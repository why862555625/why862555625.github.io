<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>new_article</title>
      <link href="/posts/d9795d88.html"/>
      <url>/posts/d9795d88.html</url>
      
        <content type="html"><![CDATA[<p>摘要</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 类别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 主題 </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>quickjs调试工具</title>
      <link href="/posts/d9795d10.html"/>
      <url>/posts/d9795d10.html</url>
      
        <content type="html"><![CDATA[<p>vela系统quickjs对接devtools</p><span id="more"></span><h2 id="vela快应用调试功能概览"><a href="#vela快应用调试功能概览" class="headerlink" title="vela快应用调试功能概览"></a>vela快应用调试功能概览</h2><p><img src="https://raw.githubusercontent.com/why862555625/images/main/image-20230525102147522.png" alt="image-20230525102147522"></p><h1 id="vela-debug调试功能"><a href="#vela-debug调试功能" class="headerlink" title="vela debug调试功能"></a>vela debug调试功能</h1><p>debug调试功能图</p><p><img src="https://raw.githubusercontent.com/why862555625/images/main/image-20230525111407415.png" alt="image-20230525111407415"></p><p>vela debug调试功能实现大致分为4个步骤：</p><ol><li><strong>连接时将所有的源码发送给devtools。</strong></li><li><strong>在devtools 的source功能中打断点、将请求发送给下层cdp.</strong></li><li><strong>cdp计算断点具体在字节码中的位置、并记录。</strong></li><li><strong>在引擎执行字节码时判断有无命中断点。</strong></li></ol><p>下面具体说明这四个步骤：</p><h2 id="1-连接时将所有的源码发送给devtools"><a href="#1-连接时将所有的源码发送给devtools" class="headerlink" title="1. 连接时将所有的源码发送给devtools"></a>1. 连接时将所有的源码发送给devtools</h2><p>在调用loadApplication时会将app的路径保存在APP类中，也就是app的rpk的最外层路径。在监听到devtool连接时，会将rpk包中的所js文件发送给devtools，devtools会将这些js文件拼接成上图中的source文件。</p><h2 id="2-在devtools-的source功能中打断点、将请求发送给下层cdp"><a href="#2-在devtools-的source功能中打断点、将请求发送给下层cdp" class="headerlink" title="2. 在devtools 的source功能中打断点、将请求发送给下层cdp"></a>2. 在devtools 的source功能中打断点、将请求发送给下层cdp</h2><p>当打开source文件上打断点、devtools会将断点的文件名、行号发送到下层cdp.</p><h2 id="3-cdp计算断点具体在字节码中的位置、并记录。"><a href="#3-cdp计算断点具体在字节码中的位置、并记录。" class="headerlink" title="3. cdp计算断点具体在字节码中的位置、并记录。"></a>3. cdp计算断点具体在字节码中的位置、并记录。</h2><ul><li><p>断点功能的输入实际上是文件名和断点行信息，第一步我们需要利用这个信息，找到模块，进而首先找到目标函数。</p><ul><li>quickjs在真实加载module的时候都会调用JS_EvalInternal。我们可以在这个函数里面监听并记录已经加载完的模块。</li></ul></li><li><p>每个函数对象上都记录了自身的起始行，通过pc2line table可以计算得到结束行，进而和传入的行号进行范围匹配计算。</p><ul><li>函数和字节码的映射规则：<ul><li>如果一行源码对应的字节码较短，就将前4位存源码的行数，后四位存字节码对应的行数</li><li>如果一个源码对应的字节码较长，就先存入一个0值（解析pc2line_buf的时候遇到0值会自动将下一个当做128  int来解析），后面补一个128的int，这个int的高位用来存源码行数、低位存字节码的行数。</li></ul></li></ul></li></ul><p><strong>计算结束行函数：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PC2LINE_BASE     (-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PC2LINE_RANGE    5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PC2LINE_OP_FIRST 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PC2LINE_DIFF_PC_MAX ((255 - PC2LINE_OP_FIRST) / PC2LINE_RANGE)</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">caculate_function_last_line</span><span class="params">(JSFunctionBytecode* b)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> op;</span><br><span class="line">    <span class="type">int</span> ret, v;</span><br><span class="line">    FunctionBytecodeDebugInfo* debug = <span class="built_in">js_debugger_get_bytecode_debug_info</span>(b);</span><br><span class="line">    <span class="type">int</span> line_num = debug-&gt;line_num, new_line_num;</span><br><span class="line">    <span class="type">uint8_t</span> *p = debug-&gt;pc2line_buf;</span><br><span class="line">    <span class="type">uint8_t</span> *p_end = p + debug-&gt;pc2line_len;</span><br><span class="line">    <span class="type">int</span> succ = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// scan line by line</span></span><br><span class="line">    <span class="keyword">while</span> (p &lt; p_end) &#123;</span><br><span class="line">        op = *p++;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">uint32_t</span> val;</span><br><span class="line">            ret = <span class="built_in">get_leb128</span>(&amp;val, p, p_end);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                succ = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// pc += val;</span></span><br><span class="line">            p += ret;</span><br><span class="line">            ret = <span class="built_in">get_sleb128</span>(&amp;v, p, p_end);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                succ = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p += ret;</span><br><span class="line">            new_line_num = line_num + v;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            op -= PC2LINE_OP_FIRST;</span><br><span class="line">            new_line_num = line_num + (op % PC2LINE_RANGE) + PC2LINE_BASE;</span><br><span class="line">        &#125;</span><br><span class="line">        line_num = new_line_num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> succ ? line_num : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">STATIC <span class="type">int</span> <span class="title">get_leb128</span><span class="params">(<span class="type">uint32_t</span> *pval, <span class="type">const</span> <span class="type">uint8_t</span> *buf,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="type">const</span> <span class="type">uint8_t</span> *buf_end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint8_t</span> *ptr = buf;</span><br><span class="line">    <span class="type">uint32_t</span> v, a, i;</span><br><span class="line">    v = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">unlikely</span>(ptr &gt;= buf_end))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        a = *ptr++;</span><br><span class="line">        v |= (a &amp; <span class="number">0x7f</span>) &lt;&lt; (i * <span class="number">7</span>);</span><br><span class="line">        <span class="keyword">if</span> (!(a &amp; <span class="number">0x80</span>)) &#123;</span><br><span class="line">            *pval = v;</span><br><span class="line">            <span class="keyword">return</span> ptr - buf;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *pval = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">STATIC <span class="type">int</span> <span class="title">get_sleb128</span><span class="params">(<span class="type">int32_t</span> *pval, <span class="type">const</span> <span class="type">uint8_t</span> *buf,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="type">const</span> <span class="type">uint8_t</span> *buf_end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="type">uint32_t</span> val;</span><br><span class="line">    ret = <span class="built_in">get_leb128</span>(&amp;val, buf, buf_end);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        *pval = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *pval = (val &gt;&gt; <span class="number">1</span>) ^ -(val &amp; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>源码表和字节码表对应规则：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">compute_pc2line_info</span><span class="params">(JSFunctionDef *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(s-&gt;js_mode &amp; JS_MODE_STRIP) &amp;&amp; s-&gt;line_number_slots) &#123;</span><br><span class="line">        <span class="type">int</span> last_line_num = s-&gt;line_num;</span><br><span class="line">        <span class="type">uint32_t</span> last_pc = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">js_dbuf_init</span>(s-&gt;ctx, &amp;s-&gt;pc2line);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s-&gt;line_number_count; i++) &#123;</span><br><span class="line">            <span class="type">uint32_t</span> pc = s-&gt;line_number_slots[i].pc;</span><br><span class="line">            <span class="type">int</span> line_num = s-&gt;line_number_slots[i].line_num;</span><br><span class="line">            <span class="type">int</span> diff_pc, diff_line;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (line_num &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            diff_pc = pc - last_pc;</span><br><span class="line">            diff_line = line_num - last_line_num;</span><br><span class="line">            <span class="keyword">if</span> (diff_line == <span class="number">0</span> || diff_pc &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (diff_line &gt;= PC2LINE_BASE &amp;&amp;</span><br><span class="line">                diff_line &lt; PC2LINE_BASE + PC2LINE_RANGE &amp;&amp;</span><br><span class="line">                diff_pc &lt;= PC2LINE_DIFF_PC_MAX) &#123;</span><br><span class="line">                <span class="built_in">dbuf_putc</span>(&amp;s-&gt;pc2line, (diff_line - PC2LINE_BASE) +</span><br><span class="line">                          diff_pc * PC2LINE_RANGE + PC2LINE_OP_FIRST);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/* longer encoding */</span></span><br><span class="line">                <span class="built_in">dbuf_putc</span>(&amp;s-&gt;pc2line, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">dbuf_put_leb128</span>(&amp;s-&gt;pc2line, diff_pc);</span><br><span class="line">                <span class="built_in">dbuf_put_sleb128</span>(&amp;s-&gt;pc2line, diff_line);</span><br><span class="line">            &#125;</span><br><span class="line">            last_pc = pc;</span><br><span class="line">            last_line_num = line_num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>需要注意匹配到的函数可能只是外层函数，具体的断点偏移计算时要考虑递归子函数。</p><ul><li>基于pc2line table计算断点在函数字节码中的偏移位置，计算时如果目出现计算出来的行号比目标行号大的情况 <code>end_line_num&gt;cur_line_num&gt;targe_num</code>，说明断点落在了子函数中，需要递归，直到最终找到或全部失败。</li></ul><p><img src="https://raw.githubusercontent.com/why862555625/images/main/image-20230525125207891.png" alt="image-20230525125207891"></p></li><li><p>断点断到、将pause消息和目前上下文的变量信息和调用栈发送给devtools。</p><ul><li>runtime上面保留了当前栈的信息JSStackFrame，JSStackFrame上面保存了栈上的变量、参数、函数信息；并且JSStackFrame可以通过prev_frame向上查找栈信息。这样遍历下来就可以完整的得到栈上的变量和调用栈。</li></ul></li></ul><p><strong>JSRuntime和JSStackFrame的数据结构</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">JSRuntime</span> &#123;</span><br><span class="line">    JSMallocFunctions mf;</span><br><span class="line">    JSMallocState malloc_state;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *rt_info;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> atom_hash_size; <span class="comment">/* power of two */</span></span><br><span class="line">    <span class="type">int</span> atom_count;</span><br><span class="line">    <span class="type">int</span> atom_size;</span><br><span class="line">    <span class="type">int</span> atom_count_resize; <span class="comment">/* resize hash table at this count */</span></span><br><span class="line">    <span class="type">uint32_t</span> *atom_hash;</span><br><span class="line">    JSAtomStruct **atom_array;</span><br><span class="line">    <span class="type">int</span> atom_free_index; <span class="comment">/* 0 = none */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> class_count;    <span class="comment">/* size of class_array */</span></span><br><span class="line">    JSClass *class_array;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">list_head</span> context_list; <span class="comment">/* list of JSContext.link */</span></span><br><span class="line">    <span class="comment">/* list of JSGCObjectHeader.link. List of allocated GC objects (used</span></span><br><span class="line"><span class="comment">       by the garbage collector) */</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">list_head</span> gc_obj_list;</span><br><span class="line">    <span class="comment">/* list of JSGCObjectHeader.link. Used during JS_FreeValueRT() */</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">list_head</span> gc_zero_ref_count_list;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">list_head</span> tmp_obj_list; <span class="comment">/* used during GC */</span></span><br><span class="line">    JSGCPhaseEnum gc_phase : <span class="number">8</span>;</span><br><span class="line">    <span class="type">size_t</span> malloc_gc_threshold;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DUMP_LEAKS</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">list_head</span> string_list; <span class="comment">/* list of JSString.link */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* stack limitation */</span></span><br><span class="line">    <span class="type">uintptr_t</span> stack_size; <span class="comment">/* in bytes, 0 if no limit */</span></span><br><span class="line">    <span class="type">uintptr_t</span> stack_top;</span><br><span class="line">    <span class="type">uintptr_t</span> stack_limit; <span class="comment">/* lower stack limit */</span></span><br><span class="line"></span><br><span class="line">    JSValue current_exception;</span><br><span class="line">    <span class="comment">/* true if inside an out of memory error, to avoid recursing */</span></span><br><span class="line">    BOOL in_out_of_memory : <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">JSStackFrame</span> *current_stack_frame;  <span class="comment">// current stack info</span></span><br><span class="line"></span><br><span class="line">    JSInterruptHandler *interrupt_handler;</span><br><span class="line">    <span class="type">void</span> *interrupt_opaque;</span><br><span class="line"></span><br><span class="line">    JSHostPromiseRejectionTracker *host_promise_rejection_tracker;</span><br><span class="line">    <span class="type">void</span> *host_promise_rejection_tracker_opaque;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">list_head</span> job_list; <span class="comment">/* list of JSJobEntry.link */</span></span><br><span class="line"></span><br><span class="line">    JSModuleNormalizeFunc *module_normalize_func;</span><br><span class="line">    JSModuleLoaderFunc *module_loader_func;</span><br><span class="line">    <span class="type">void</span> *module_loader_opaque;</span><br><span class="line"></span><br><span class="line">    BOOL can_block : <span class="number">8</span>; <span class="comment">/* TRUE if Atomics.wait can block */</span></span><br><span class="line">    <span class="comment">/* used to allocate, free and clone SharedArrayBuffers */</span></span><br><span class="line">    JSSharedArrayBufferFunctions sab_funcs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Shape hash table */</span></span><br><span class="line">    <span class="type">int</span> shape_hash_bits;</span><br><span class="line">    <span class="type">int</span> shape_hash_size;</span><br><span class="line">    <span class="type">int</span> shape_hash_count; <span class="comment">/* number of hashed shapes */</span></span><br><span class="line">    JSShape **shape_hash;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_BIGNUM</span></span><br><span class="line">    <span class="type">bf_context_t</span> bf_ctx;</span><br><span class="line">    JSNumericOperations bigint_ops;</span><br><span class="line">    JSNumericOperations bigfloat_ops;</span><br><span class="line">    JSNumericOperations bigdecimal_ops;</span><br><span class="line">    <span class="type">uint32_t</span> operator_count;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">void</span> *user_opaque;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_INTERPRETERS_QUICKJS_DEBUG</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">JSDebuggerInfo</span> debugger_info;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">DumpMemoryInfo</span> dump_memory_info;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    JSOutOfMemoryTracker* oom_tracker;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_MEMORY_LEAK_TRACK</span></span><br><span class="line">    <span class="type">int</span> isStartMemoryDump;</span><br><span class="line">    vector* newObjVector;</span><br><span class="line">    JSContext* currentCtx;</span><br><span class="line">    <span class="type">char</span>* pageStatus;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">JSStackFrame</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">JSStackFrame</span> *prev_frame; <span class="comment">/* NULL if first stack frame */</span></span><br><span class="line">    JSValue cur_func; <span class="comment">/* current function, JS_UNDEFINED if the frame is detached */</span></span><br><span class="line">    JSValue *arg_buf; <span class="comment">/* arguments */</span></span><br><span class="line">    JSValue *var_buf; <span class="comment">/* variables */</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">list_head</span> var_ref_list; <span class="comment">/* list of JSVarRef.link */</span></span><br><span class="line">    <span class="type">const</span> <span class="type">uint8_t</span> *cur_pc; <span class="comment">/* only used in bytecode functions : PC of the</span></span><br><span class="line"><span class="comment">                        instruction after the call */</span></span><br><span class="line">    <span class="type">int</span> arg_count;</span><br><span class="line">    <span class="type">int</span> js_mode; <span class="comment">/* 0 or JS_MODE_MATH for C functions */</span></span><br><span class="line">    <span class="comment">/* only used in generators. Current stack pointer value. NULL if</span></span><br><span class="line"><span class="comment">       the function is running. */</span></span><br><span class="line">    JSValue *cur_sp;</span><br><span class="line">&#125; JSStackFrame;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>函数数据结构：</strong></p><p><img src="https://raw.githubusercontent.com/why862555625/images/main/image-20230525144252998.png"></p><p><strong>查找目标函数流程：</strong></p><p><img src="https://raw.githubusercontent.com/why862555625/images/main/image-20230525124949165.png"></p><h2 id="4-在引擎执行字节码时判断有无命中断点。"><a href="#4-在引擎执行字节码时判断有无命中断点。" class="headerlink" title="4. 在引擎执行字节码时判断有无命中断点。"></a>4. 在引擎执行字节码时判断有无命中断点。</h2><p>命中断点有两个设计思路：</p><p><strong>第一种：</strong></p><p>直接修改字节码、插入debugger指令和nop\需要额外注意在命中后和取消时将字节码恢复、否则会出现问题。</p><p><img src="https://raw.githubusercontent.com/why862555625/images/main/image-20230525161322186.png" alt="image-20230525161322186"></p><p><strong>第二种：</strong></p><p>分配一块和字节码相同长度的数组、在相同的便宜位置写入1、作为断点标志、方便命中检查。</p><p><img src="https://raw.githubusercontent.com/why862555625/images/main/image-20230525161507336.png" alt="image-20230525161507336"></p><p>断点命中的核心思路实在引擎解释执行字节码的时候插入堆断点命中的检查、命中断电后停止执行（不在继续解释下一条指令）。</p><p>这里选择重定义字节码的case定义、如果开启了调试功能、则每次解释执行字节码都会插入对js_debugger_check函数执行、他负责检查每一步执行是否命中断点。检查方法很简单、检查当前pc是否落在了断点的范围内（依赖设置断点）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_INTERPRETERS_QUICKJS_DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASE(op)        case op: js_debugger_check(ctx, pc); stub_ ## op</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CASE(op)        case op: stub_ ## op</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>执行字节码：</strong></p><p><img src="https://raw.githubusercontent.com/why862555625/images/main/image-20230525170447952.png" alt="image-20230525170447952"></p><p>js_debugger_check 中暂停的主要逻辑是一个<code>while(ture)</code>循环，然后每次执行libuv_run_once()推一次主循环的句柄，用来判断服务端是否放开断点。</p><h1 id="memory-功能"><a href="#memory-功能" class="headerlink" title="memory 功能"></a>memory 功能</h1><p>memory功能大概可以概述为三个部分：</p><ol><li>接受devtools  memory dump的请求之后，开始遍历引擎的堆内存链表（v8是使用图结构来表示的堆内存、quickjs是使用链表表示的）。</li><li>将quickjs中的链表内存转化为图结构内存。（devtools snapshot需要图结构）</li><li>将图结构转化为snapshot发送给devtools、devtools进行解析并显示。</li></ol><h2 id="1-理解引擎的堆内存结构"><a href="#1-理解引擎的堆内存结构" class="headerlink" title="1. 理解引擎的堆内存结构"></a>1. 理解引擎的堆内存结构</h2><p>quickjs的runtime中的gc_obj_list保存了引擎中的所有堆对象的JSGCObjectHeader.遍历gc_obj_list就可以得到所有的堆对象信息</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">JSGCObjectHeader</span> &#123;</span><br><span class="line">    <span class="type">int</span> ref_count; <span class="comment">/* must come first, 32-bit */</span></span><br><span class="line">    JSGCObjectTypeEnum gc_obj_type : <span class="number">4</span>;</span><br><span class="line">    <span class="type">uint8_t</span> mark : <span class="number">4</span>; <span class="comment">/* used by the GC */</span></span><br><span class="line">    <span class="type">uint8_t</span> dummy1; <span class="comment">/* not used by the GC */</span></span><br><span class="line">    <span class="type">uint16_t</span> dummy2; <span class="comment">/* not used by the GC */</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">list_head</span> link;</span><br><span class="line">    <span class="type">int64_t</span> id;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/why862555625/images/main/image-20230525171354456.png" alt="image-20230525171354456"></p><h2 id="2-理解snapshot文件格式"><a href="#2-理解snapshot文件格式" class="headerlink" title="2. 理解snapshot文件格式"></a>2. 理解snapshot文件格式</h2><ul><li>V8 HeapSnapshot文件整体采用JSON格式存储。</li><li>存储时采用Meta + 内容的方式，Meta里描述了各个字段的含义，各个节点的数量等。</li><li>内存dump信息按照点集和边集的形式存储。点集存储节点信息，边集存储对象之间的链接关系。</li><li>字符串是单独存储的，节点中使用时采用下标引用的方式以节约内存。</li></ul><p><img src="https://raw.githubusercontent.com/why862555625/images/main/image-20230525172031289.png" alt="image-20230525172031289"></p><h2 id="3-堆对象处理：从链表到图"><a href="#3-堆对象处理：从链表到图" class="headerlink" title="3.堆对象处理：从链表到图"></a>3.堆对象处理：从链表到图</h2><p>Quickjs中GC对象是通过链表保存的，但HeapSnapshot中是按照图结构保存的，所以需要有一个从链表构建对象图的过程，我生成了一个代理结构，额外记录了对象间的链接关系。</p><p>如果不这样做，就需要修改quickjs的GC list结构，这样改动会很大。</p><p><img src="https://raw.githubusercontent.com/why862555625/images/main/image-20230525172159734.png" alt="image-20230525172159734"></p><h2 id="4-Proxy图的构建算法"><a href="#4-Proxy图的构建算法" class="headerlink" title="4. Proxy图的构建算法"></a>4. Proxy图的构建算法</h2><p><img src="https://raw.githubusercontent.com/why862555625/images/main/image-20230525172302551.png" alt="image-20230525172302551"></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML &amp; CSS复习</title>
      <link href="/posts/d9795d88.html"/>
      <url>/posts/d9795d88.html</url>
      
        <content type="html"><![CDATA[<p>JS复习记录</p><span id="more"></span><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="1-语义化"><a href="#1-语义化" class="headerlink" title="1. 语义化"></a>1. 语义化</h2><ol><li><p>语义化，指对文本内容的结构化（内容语义化），选择合乎语义的标签（代码语义化）。</p></li><li><p>语义化标签：<code>header</code>、<code>nav</code>、<code>main</code>、<code>article</code>、<code>section</code>、<code>aside</code>、<code>footer</code>等。</p></li><li><p>优点：</p><ul><li>代码结构清晰，易于阅读，有利于维护</li><li>方便其他设备解析（如：屏幕阅读器）</li><li>有利于搜索引擎优化（SEO），搜索引擎爬虫会根据不同的标签来赋予不同的权重</li></ul></li></ol><h2 id="2-script-标签中属性-async-和-defer-的区别？"><a href="#2-script-标签中属性-async-和-defer-的区别？" class="headerlink" title="2. script 标签中属性 async 和 defer 的区别？"></a>2. script 标签中属性 async 和 defer 的区别？</h2><ul><li><code>script</code> 会阻碍 HTML 解析，只有下载好并执行完脚本才会继续解析 HTML</li><li><code>async script</code>：解析 HTML 的过程中会进行脚本的异步下载，下载成功后立马执行，因此有可能会阻断 HTML 的解析。多个脚本的执行顺序无法保证。</li><li><code>defer script</code>：也是异步下载脚步，加载完成后，如果此时 HTML 还没有解析完，浏览器不会暂停解析去执行 JS 代码，而是等待 HTML 解析完毕再执行 JS 代码，如果存在多个 <code>defer script </code>标签，浏览器（IE9及以下除外）会保证它们按照在 HTML 中出现的顺序执行，不会破坏 JS 脚本之间的依赖关系。</li></ul><h2 id="3-DOCTYPE-的作用是什么？"><a href="#3-DOCTYPE-的作用是什么？" class="headerlink" title="3. DOCTYPE 的作用是什么？"></a>3. DOCTYPE 的作用是什么？</h2><p><code>&lt;!DOCTYE&gt;</code> 声明一般位于文档的第一行，它的作用主要是告诉浏览器以什么样的模式来解析文档。一般指定了之后会以“标准模式”进行文档解析，否则就以“兼容模式”进行解析。</p><ul><li>在<code>标准模式</code>下，浏览器的解析规则都是按照最新的标准进行解析的。</li><li>而在<code>兼容模式</code>下，浏览器会以向后兼容的方式来模拟老式浏览器的行为，以保证一些老的网站能正常访问。</li></ul><h2 id="4-SGML、HTML、XML-和-XHTML的区别"><a href="#4-SGML、HTML、XML-和-XHTML的区别" class="headerlink" title="4. SGML、HTML、XML 和 XHTML的区别"></a>4. SGML、HTML、XML 和 XHTML的区别</h2><ul><li><code>SGML</code> 是标准通用标记语言，是一种定义电子文档结构和描述其内容的国际标准语言，是所有电子文档标记语言的起源。</li><li><code>HTML</code> 是超文本标记语言，主要是用于规定怎样显示网页。</li><li><code>XML</code> 是可扩展标记语言，是未来网页语言的发展方向，XML 和 HTML 的最大区别就在于 XML 的标签是可以自己创建的，数量无限多，而 HTML 的标签都是固定的而且数量有限。</li><li><code>XHTML</code> 也是现在基本上所有网页都在用的标记语言，他其实和 HTML 没什么本质的区别，标签都一样，用法也都一样，就是比 HTML 更严格，比如标签必须都用小写，标签都必须有闭合标签等。</li></ul><h2 id="5-HTML5-有哪些新特性、移除了哪些元素？"><a href="#5-HTML5-有哪些新特性、移除了哪些元素？" class="headerlink" title="5. HTML5 有哪些新特性、移除了哪些元素？"></a>5. HTML5 有哪些新特性、移除了哪些元素？</h2><p>HTML5 现在已经不是 SGML 的子集，主要是关于图像、位置、存储、多任务等功能的增加。</p><p>新增的：</p><ul><li>绘图 <code>canvas</code></li><li>用于媒介回放的 <code>video</code> 和 <code>audio</code> 元素</li><li>本地离线存储 <code>localStorage</code> 、<code>sessionStorage</code></li><li>语义化更好的内容元素，如：<code>header</code>、<code>article</code>、<code>nav</code>、<code>section</code>、<code>footer</code>等</li><li>表单控件 <code>calendar</code>、<code>date</code>、<code>time</code>、<code>email</code>、<code>url</code>、<code>search</code> 等</li><li>新的技术 <code>webworker</code>、<code>websocket</code></li><li>新的文档属性 <code>document.visibilityState</code></li></ul><p>移除的：</p><ul><li>纯表现的元素：<code>basefont</code>、<code>big</code>、<code>center</code>、<code>s</code>、<code>tt</code>、<code>u</code></li><li>对可用性产生负面影响的元素：<code>frame</code>、<code>frameset</code>、<code>noframes</code></li></ul><h2 id="6-对浏览器内核的理解"><a href="#6-对浏览器内核的理解" class="headerlink" title="6. 对浏览器内核的理解"></a>6. 对浏览器内核的理解</h2><p>主要分为两部分：渲染引擎和JS引擎。</p><ul><li><code>渲染引擎</code>：其职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 HTML、 XML 文档及图片，它也可以借助一些浏览器扩展插件显示其他类型数据，如：使用PDF阅读器插件可以显示 PDF 格式。</li><li><code>JS引擎</code>：解析和执行 JavaScript 来实现网页的动态效果。</li></ul><p>最开始渲染引擎和JS引擎并没有区分的很明显，后来JS引擎越来越独立，内核就倾向于只指渲染引擎了</p><h2 id="7-什么是文档的预解析？"><a href="#7-什么是文档的预解析？" class="headerlink" title="7. 什么是文档的预解析？"></a>7. 什么是文档的预解析？</h2><p>当执行 JavaScript 脚本时，另一个线程解析剩下的文档，并加载后面需要通过网络加载的资源。这种方式可以使资源并行加载，从而使整体速度更快。</p><p>需要注意的是，预解析并不改变DOM树，它将这个工作交给主解析过程，自己只解析外部资源的引用，比如：外部脚本、样式及图片。</p><h2 id="8-浏览器的渲染原理"><a href="#8-浏览器的渲染原理" class="headerlink" title="8. 浏览器的渲染原理"></a>8. 浏览器的渲染原理</h2><p>简记： 生成DOM树 –&gt; 生成CSS规则树 –&gt; 构建渲染树 –&gt; 布局 –&gt; 绘制</p><ol><li>首先解析收到的文档，根据文档定义构建一颗 <code>DOM 树</code>，DOM 树是由 DOM 元素及属性节点组成的。</li><li>然后对 CSS 进行解析，生成一颗 <code>CSS 规则树</code>。</li><li>根据 DOM 树和 CSS 规则树构建<code>渲染树</code>。渲染树的节点被称为渲染对象，它是一个包含有颜色等属性的矩形。渲染对象和 DOM 元素相对应，但这种关系不是一对一的，不可见的 DOM 元素不会插入渲染树。还有一些 DOM 元素对应几个可见对象，它们一般是一些具有复杂结构的元素，无法用一个矩形来描述。</li><li>当渲染对象被创建并添加到树中，它们没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行<code>布局</code>（也可以叫做回流）。这一阶段浏览器要做的是计算出各个节点在页面中确切位置和大小。通常这一行为也被称为自动重排。</li><li>布局阶段结束后是<code>绘制</code>阶段，遍历渲染树并调用渲染对象的 paint 方法将它们的内容显示到屏幕上。值得注意的是，这个过程是逐步完成的，为了更好的用户体验，渲染引擎会尽早的将内容呈现到屏幕上，并不会等到所有 HMTL 内容都解析完之后再去构建和布局渲染树，它是解析完一部分内容就显示一部分内容，同时，可能还通过网络下载其余内容。</li></ol><h2 id="9-什么是回流和重绘？"><a href="#9-什么是回流和重绘？" class="headerlink" title="9. 什么是回流和重绘？"></a>9. 什么是回流和重绘？</h2><p>1.概念：</p><ul><li><code>回流</code>：当 DOM 的变化影响了元素的几何信息，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做回流（也可以叫做重排）。表现为重新生成布局，重新排列元素。</li><li><code>重绘</code>：当一个元素的外观发生改变，重新把元素外观绘制出来的过程，叫做重绘。表现为某些元素的外观被改变。</li></ul><p>2.常见引起回流和重绘的属性和方法：</p><p>任何会改变元素几何信息（元素的位置和尺寸大小）的操作都会触发回流。</p><ul><li>添加或删除可见的 DOM 元素</li><li>元素尺寸改变–边距、填充、宽度、高度</li><li>浏览器尺寸改变– resize 事件发生时</li><li>计算 offsetWidth 和 offsetHeight 属性</li><li>设置 style 属性的值</li><li>修改网页默认字体</li></ul><p><strong>回流必定会发生重绘，重绘不一定会引发回流。</strong></p><p><strong>回流所需的成本比重绘高得多</strong></p><p>建议阅读文章：<a href="https://juejin.cn/post/6844903779700047885">你真的了解回流和重绘吗</a></p><h2 id="10-如何减少回流？"><a href="#10-如何减少回流？" class="headerlink" title="10. 如何减少回流？"></a>10. 如何减少回流？</h2><ul><li>使用 transform 代替 top</li><li>不要把节点的属性值放在一个循环里，当成循环里的变量</li><li>不要使用 table 布局，可能很小的一个改动会造成整个 table 的重新布局</li><li>把 DOM 离线后修改。如：使用 documentFragment 对象在内存里操作 DOM</li><li>不要一条一条的修改样式，可以预先定义好 class，然后修改 DOM 的 className</li><li>使用 absolute 或 fixed 使元素脱离文档流</li></ul><h2 id="11-sessionStorage，localStorage-和-cookie-的区别"><a href="#11-sessionStorage，localStorage-和-cookie-的区别" class="headerlink" title="11. sessionStorage，localStorage 和 cookie 的区别"></a>11. sessionStorage，localStorage 和 cookie 的区别</h2><ol><li>共同点：都是保存在浏览器端，且同源的</li><li>区别:</li></ol><ul><li>cookie 始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器和服务器之间来回传递；而 sessionStorage 和 localStorage 不会自动把数据发送到服务器，仅在本地保存。cookie 还有路径（path）的概念，可以限制 cookie 只属于某个路径下。</li><li>存储大小限制不同。cookie 不能超过 4K，因为每次 http 请求都会携带 cookie，所以 cookie 只适合保存很小的数据，如：会话标识。sessionStorage 和 localStorage 虽然也有存储大小限制，但比 cookie 大得多，可以达到 5M 或更大。</li><li>数据有效期不同。sessionStorage 仅在当前浏览器窗口关闭之前有效；localStorage 始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie 只在设置的 cookie 过期时间之前有效。</li><li>作用域不同。sessionStorage 不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 和 cookie 在所有同源窗口中都是共享的。</li></ul><h2 id="12-iframe-有哪些优缺点？"><a href="#12-iframe-有哪些优缺点？" class="headerlink" title="12. iframe 有哪些优缺点？"></a>12. iframe 有哪些优缺点？</h2><p>优点：</p><ol><li>iframe 能原封不动的把嵌入的网页展现出来。</li><li>如果有多个网页引用 iframe，只需修改 iframe 的内容，就可以实现调用每一个页面的更改，方便快捷。</li></ol><p>缺点：</p><ol><li>iframe 会阻塞主页面的 onload 事件。</li><li>iframe 和主页面共享链接池，而浏览器对相同域的链接有限制，所以会影响页面的并行加载。</li><li>不利于 SEO，代码复杂，无法一下被搜索引擎索引到。</li><li>iframe 框架页面会增加服务器的 http 请求，对于大型网站不可取。</li><li>很多移动设备无法完全显示框架，设备兼容性差。</li></ol><p>注意：通过动态给 iframe 添加 src 属性值，可解决前两个问题。</p><h2 id="13-什么是-canvas，基本用法是什么？"><a href="#13-什么是-canvas，基本用法是什么？" class="headerlink" title="13. 什么是 canvas，基本用法是什么？"></a>13. 什么是 canvas，基本用法是什么？</h2><p>canvas 元素是 HTML5 的一部分，允许脚步语言动态渲染位图像。canvas 由一个可控制区域 HTML 代码中的属性定义决定高度和宽度。JavaScript 代码可以访问该区域，通过一套完整的绘图功能类似于其他通用二维的 API，从而生成动态的图形。</p><ol><li>创建 canvas 标签</li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arduino</span><br><span class="line">复制代码&lt;canvas id=<span class="string">&quot;myCanvas&quot;</span> width=<span class="string">&quot;150&quot;</span> height=<span class="string">&quot;150&quot;</span>&gt;该浏览器不支持canvas&lt;/canvas&gt;</span><br></pre></td></tr></table></figure><ol><li>渲染上下文</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ini复制代码var <span class="attr">canvas</span> = document.getElementById(<span class="string">&#x27;myCanvas&#x27;</span>)<span class="comment">;</span></span><br><span class="line">var <span class="attr">ctx</span> = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>代码第一行通过使用 <code>document.getElementById()</code> 方法获取 <code>&lt;canvas&gt;</code> 元素对应的 DOM 对象，然后可以通过使用它的 <code>getContext()</code> 方法来绘制上下文。 创建 canvas 标签时可以在标签内写上不支持的提示信息；也可以通过 <code>getContext()</code> 方法判读是否支持编程。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ini复制代码var <span class="attr">canvas</span> = document.getElementById(<span class="string">&#x27;myCanvas&#x27;</span>)<span class="comment">;</span></span><br><span class="line">if (canvas.getContext) &#123;</span><br><span class="line">  var <span class="attr">ctx</span> = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>)<span class="comment">;</span></span><br><span class="line">  // other code</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  // 不支持 canvas 的其他代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用途：</p><p>canvas 可用于游戏和图表（echarts.js、heightchart.js 都是基于 canvas 来绘图）制作。</p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="1-css3-有哪些新特性？"><a href="#1-css3-有哪些新特性？" class="headerlink" title="1. css3 有哪些新特性？"></a>1. css3 有哪些新特性？</h2><ul><li>rgba 和 透明度</li><li>background-image、background-origin、background-size、background-repeat</li><li>word-wrap: break-word（对长的不可分割的单词换行）</li><li>文字阴影 text-shadow</li><li>font-face属性，定义自己的字体</li><li>border-radius</li><li>边框图片 border-image</li><li>盒阴影 box-shadow</li><li>媒体查询：定义多套 css，当浏览器尺寸发生变化时采用不同的属性</li></ul><h2 id="2-style-标签写在-body-后与-body-前有什么区别？"><a href="#2-style-标签写在-body-后与-body-前有什么区别？" class="headerlink" title="2. style 标签写在 body 后与 body 前有什么区别？"></a>2. style 标签写在 body 后与 body 前有什么区别？</h2><ol><li>写在 body 标签前有利于浏览器逐步渲染： resources downloading –&gt; cssDOM + DOM –&gt; Render Tree –&gt; layout –&gt; paint</li><li>写在 body 标签后： 由于浏览器以逐行方式对 HTML 文档进行解析，当解析到写在尾部的样式表（外联或写在 style 标签）会导致浏览器停止之前的渲染，等待加载且解析样式完成后重新渲染；在 windows 的 IE 下可能出现样式失效导致的页面闪烁问题。</li></ol><h2 id="3-CSS选择器及优先级"><a href="#3-CSS选择器及优先级" class="headerlink" title="3. CSS选择器及优先级"></a>3. CSS选择器及优先级</h2><ol><li>选择器<ul><li>id选择器(#myid)</li><li>类选择器(.myclass)</li><li>属性选择器(a[rel=”external”])</li><li>伪类选择器(a:hover, li:nth-child)</li><li>标签选择器(div, h1, p)</li><li>伪元素选择器(p::first-line)</li><li>相邻选择器（h1 + p）</li><li>子选择器(ul &gt; li)</li><li>后代选择器(li a)</li><li>通配符选择器(*)</li></ul></li><li>优先级<ul><li><code>!important</code></li><li>内联样式（1000）</li><li>ID选择器（0100）</li><li>类选择器 / 属性选择器 / 伪类选择器（0010）</li><li>标签选择器 / 伪元素选择器（0001）</li><li>关系选择器 / 通配符选择器（0000）</li></ul></li></ol><p>带 !important 标记的样式属性优先级最高；样式表的来源相同时：<code>!important &gt; 行内样式&gt; ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</code></p><h2 id="4-rgba-和-opacity-设置透明度的区别是什么？"><a href="#4-rgba-和-opacity-设置透明度的区别是什么？" class="headerlink" title="4. rgba() 和 opacity 设置透明度的区别是什么？"></a>4. rgba() 和 opacity 设置透明度的区别是什么？</h2><p>rgba() 和 opacity 都能实现透明效果，但最大的不同是 opacity 作用于元素，以及元素内的所有内容的透明度；而 rgba() 只作用于元素的颜色或其背景色，设置 rgba() 透明的元素的子元素不会继承透明效果。</p><h2 id="5-浏览器是如何解析-css-选择器的？"><a href="#5-浏览器是如何解析-css-选择器的？" class="headerlink" title="5. 浏览器是如何解析 css 选择器的？"></a>5. 浏览器是如何解析 css 选择器的？</h2><p><code>从右向左解析的。</code>若从左向右匹配，发现不符合规则，需要回溯，会损失很多性能。若从右向左匹配，先找到所有的最后节点，对于每一个节点，向上寻找其父节点直到查找至根元素或满足条件的匹配规则，则结束这个分支的遍历。</p><p>在 css 解析完毕后，需将解析结果 css 规则树和 DOM Tree 一起进行分析建立一颗 Render Tree，最终用来进行绘图。</p><h2 id="6-display-none-和-visibility-hidden-两者的区别"><a href="#6-display-none-和-visibility-hidden-两者的区别" class="headerlink" title="6. display: none 和 visibility: hidden 两者的区别"></a>6. display: none 和 visibility: hidden 两者的区别</h2><ol><li>display: none 隐藏后不占用文档流；而 visibility: hidden 会占用文档流。</li><li>visibility 具有继承性，给父元素设置 “visibility: hidden”，子元素也会继承该属性，但如果重新给子元素设置 “visibility: visible”，则子元素又会显示出来。</li><li>visibility: hidden 不会影响计数器的计数，虽然隐藏了，但计数器依然运行着。</li><li>在 css3 中 transition 支持 visibility 属性，但不支持 display。因为 transition 可以延迟执行，因此配合 visibility 使用纯 css 延时显示效果可以提高用户体验。</li><li>display: none 会引起回流（重排）和重绘；visibility: hidden 会引起重绘。</li></ol><h2 id="7-简述-transform，transition，animation-的作用"><a href="#7-简述-transform，transition，animation-的作用" class="headerlink" title="7. 简述 transform，transition，animation 的作用"></a>7. 简述 transform，transition，animation 的作用</h2><ol><li><code>transform</code>：描述了元素的静态样式，本身不会呈现动画效果，可以对元素进行旋转 rotate、扭曲 skew、缩放 scale 和移动 translate 以及矩阵变形 matrix。<code>transition</code> 和 <code>animation</code> 两者都能实现动画效果。<code>transform</code> 常配合<code>transition</code> 和 <code>animation</code> 使用。</li><li><code>transition</code>：样式过渡，从一种效果逐渐改变为另一种效果，它是一个合写属性。transition: transition-property  transition-duration  transition-timing-function  transition-delay 从左到右，依次是：过渡效果的css属性名称、过渡效果花费时间、速度曲线、过渡开始的延迟时间  <code>transition</code> 通常和 hover 等事件配合使用，需要由事件来触发过渡。</li><li><code>animation</code>：动画，有 <code>@keyframes</code> 来描述每一帧的样式。</li></ol><p>区别：</p><ul><li><code>transform</code> 仅描述元素的静态样式，常配合<code>transition</code> 和 <code>animation</code> 使用。</li><li><code>transition</code> 通常和 hover 等事件配合使用；<code>animation</code> 是自发的，立即播放。</li><li><code>animation</code> 可以设置循环次数。</li><li><code>animation</code> 可以设置每一帧的样式和时间，<code>transition</code> 只能设置头尾。</li><li><code>transition</code> 可以与 js 配合使用， js 设定要变化的样式，<code>transition</code> 负责动画效果。</li></ul><h2 id="8-line-height-如何继承？"><a href="#8-line-height-如何继承？" class="headerlink" title="8. line-height 如何继承？"></a>8. line-height 如何继承？</h2><ul><li>父元素的 <code>line-height</code> 是具体数值，则子元素 <code>line-height</code> 继承该值。</li><li>父元素的 <code>line-height</code> 是比例值，如’2’，则子元素 <code>line-height</code> 继承该比例。</li><li>父元素的 <code>line-height</code> 是百分比，则子元素 <code>line-height</code> 继承的是父元素的 font-size * 百分比 计算出来的值。</li></ul><h2 id="9-如何让-chrome-支持-10px-的文字？"><a href="#9-如何让-chrome-支持-10px-的文字？" class="headerlink" title="9. 如何让 chrome 支持 10px 的文字？"></a>9. 如何让 chrome 支持 10px 的文字？</h2><ol><li>font-size: 12px; -webkit-transform: scale(0.84);</li><li>font-size: 20px; -webkit-transform: scale(0.5);</li></ol><h2 id="10-position-属性的值有哪些？"><a href="#10-position-属性的值有哪些？" class="headerlink" title="10. position 属性的值有哪些？"></a>10. position 属性的值有哪些？</h2><ol><li><code>static</code>：默认定位。元素出现在正常的文档流中（忽略top，bottom，left，right 或 z-index声明）</li><li><code>relative</code>：相对定位。如果对一个元素进行相对定位，将出现在它所在的位置上。然后，可以通过设置垂直或水平位置，使其“相对于”它的起点进行移动。使用相对定位时，无论是否移动，元素仍然占据原来的空间；移动元素会导致其覆盖其他元素。</li><li><code>absolute</code>：绝对定位。元素的位置相对于最近的已定位的父元素，如果元素没有已定位的父元素，则相对于根元素（即 html 元素）定位。绝对定位的元素会脱离文档流，不占据空间，会与其他元素重叠。</li><li><code>fixed</code>：固定定位。元素的位置相对于浏览器窗口是固定位置，即使窗口滚动它也不会移动。固定定位的元素会脱离文档流，不占据空间，会与其他元素重叠。</li><li><code>sticky</code>：粘性定位。粘性定位可以被认为是相对定位和固定定位的混合，元素在跨越特定阈值前为相对定位，之后为固定定位。top，right，buttom，left，必须指定这四个阈值中的一个，才可以使粘性定位生效，否则行为与其相对定位相同。</li><li><code>inherit</code>：规定应该从父元素继承 position 属性的值。</li></ol><h2 id="11-css-盒模型？"><a href="#11-css-盒模型？" class="headerlink" title="11. css 盒模型？"></a>11. css 盒模型？</h2><ul><li><code>标准盒模型</code>，width 指 content 部分的宽度，总宽度 = width + border(左右) + padding（左右）+ margin（左右）；高度同理。</li><li><code>怪异盒模型（IE盒模型）</code>，width 指 content + border（左右） + padding（左右）三部分的宽度，因此，总宽度 = width + margin（左右）；高度同理。</li></ul><h2 id="12-box-sizing-属性"><a href="#12-box-sizing-属性" class="headerlink" title="12. box-sizing 属性"></a>12. box-sizing 属性</h2><ol><li><code>content-box</code>，对应标准盒模型。</li><li><code>border-box</code>，IE盒模型。</li><li><code>inherit</code>，继承父元素的 box-sizing 值。</li></ol><h2 id="13-BFC（块级格式上下文）"><a href="#13-BFC（块级格式上下文）" class="headerlink" title="13. BFC（块级格式上下文）"></a>13. BFC（块级格式上下文）</h2><ol><li>概念： BFC（Block Formatting Context），块级格式上下文。BFC 是 css 布局的一个概念，是一个独立的渲染区域，规定了内部 box 如何布局，且这个区域内的子元素不会影响到外面的元素。</li><li>布局规则：</li></ol><ul><li>内部的 box 会在垂直方向一个接一个的放置</li><li>box 垂直方向的距离由 margin 决定，同一个 BFC 相邻的 box 的 margin 会发生重叠</li><li>每个 box 的 margin 左边，与包含块的左 border 相接触（对于从左往右的格式化，否则相反）</li><li>BFC 的区域不会与 float box 重叠</li><li>BFC 是一个独立容器，容器内的子元素不会影响到外面的元素</li><li>计算 BFC 高度时，浮动元素也参与计算高度</li></ul><ol><li>如何创建 BFC ？</li></ol><ul><li>根元素，即 html 元素</li><li>float 值不为 none</li><li>position 值为 absolute 或 fixed</li><li>display 的值为 inline-block、tabl-cell、table-caption</li><li>overflow 的值不为 visible</li></ul><ol><li>BFC 的使用场景</li></ol><ul><li>去除边距重叠问题</li><li>清除浮动（让父元素的高度包含子浮动元素）</li><li>阻止元素被浮动元素覆盖</li></ul><h2 id="14-让一个元素水平-垂直居中"><a href="#14-让一个元素水平-垂直居中" class="headerlink" title="14. 让一个元素水平/垂直居中"></a>14. 让一个元素水平/垂直居中</h2><ol><li>水平居中</li></ol><ul><li>行内元素：<code>text-align: center;</code></li><li>对于确定宽度的块级元素<ul><li>width 和 margin 实现： <code>mragin: 0 auto;</code></li><li>绝对定位和 margin-left 实现： <code>margin-left: (父width - 子 width)/2；</code>(前提是父元素相对定位)</li></ul></li><li>对于宽度未知的块级元素<ul><li>table 标签配合 margin 左右 auto 实现</li><li>inline-block 实现：<code>display: inline-block; text-align: center;</code></li><li>绝对定位和 transform 实现， translateX 可以移动本身元素的50%</li><li>flex 布局 <code>justify-content: center</code></li></ul></li></ul><ol><li>垂直居中</li></ol><ul><li>纯文字类，设置 line-height 等于 height</li><li>子绝父相，子元素通过 margin 实现自适应居中</li><li>子绝父相，通过位移 transform 实现</li><li>flex 布局，<code>align-items: center;</code></li><li>table 布局，父级通过转换为表格形式，子级设置 vertical-align 实现</li></ul><h2 id="15-flex-布局"><a href="#15-flex-布局" class="headerlink" title="15. flex 布局"></a>15. flex 布局</h2><p>flex 布局，是一种弹性盒布局模型，给子元素提供了空间分布和对齐能力，由<code>container</code>（容器）及<code>item</code>（项目）组成。该布局模型提供了一种更加高效的方式来对容器中的项目进行布局、对齐和分配空间。适用于在不同尺寸的屏幕中创建可自动扩展和收缩布局，通常可用于<code>水平/垂直居中</code>，<code>两栏</code>、<code>三栏布局</code>等的场景里。</p><p>其中<code>flex</code>属性是<code>flex-grow</code>，<code>flex-shrink</code>和<code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。<strong>该属性有两个快捷值：<code>auto (1 1 auto)</code> 和 <code>none (0 0 auto)</code>。</strong></p><ul><li><code>flex-grow</code>：定义项目的放大比例，默认值为 0，即如果存在剩余空间，也不放大。如果所有项目的<code>flex-grow</code>属性都为 1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</li><li><code>flex-shrink</code>：项目的缩小比例，默认为 1，即如果空间不足，项目将缩小。如果所有项目的<code>flex-shrink</code>属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为 0，其他项目都为 1，则空间不足时，前者不缩小。</li><li><code>flex-basis</code>：定义了在分配多余空间之前，项目占据的主轴空间。浏览器会根据该属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小。当设置为 0 的是，会根据内容撑开。也可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如 350px），则项目将占据固定空间。</li></ul><p><code>flex</code>常用的属性值：</p><ul><li>flex: 1 –&gt; flex: 1 1 0%</li><li>flex: 2 –&gt; flex: 2 1 0%</li><li>flex: auto –&gt; flex: 1 1 auto</li><li>flex: none –&gt; flex: 0 0 auto【常用于固定尺寸不伸缩】</li></ul><h2 id="16-清除浮动"><a href="#16-清除浮动" class="headerlink" title="16. 清除浮动"></a>16. 清除浮动</h2><ol><li><p>直接把 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>作为最后一个子标签</p><ul><li>优点：通俗易懂，容易掌握；</li><li>缺点：会添加较多无意义的空标签，有违结构与表现的分离，在后期维护中将是噩梦</li></ul></li><li><p>.clearfix { overflow: hidden; zoom: 1; }</p><ul><li>优点：不存在结构和语义化问题，代码量极少</li><li>缺点：内容增多时容易造成不自动换行，导致内容被隐藏掉，无法显示需要溢出的元素</li></ul></li><li><p>建立伪类选择器</p></li></ol><p><img src="https://raw.githubusercontent.com/why862555625/images/main/images/98e2353e3275475095bd26ecedfa32e9%7Etplv-k3u1fbpfcp-zoom-in-crop-mark%3A1512%3A0%3A0%3A0.awebp" alt="image.png"></p><h2 id="17-css-中优雅降级和渐进增强有什么区别？"><a href="#17-css-中优雅降级和渐进增强有什么区别？" class="headerlink" title="17. css 中优雅降级和渐进增强有什么区别？"></a>17. css 中优雅降级和渐进增强有什么区别？</h2><p>优雅降级和渐进增强是随着 css3 流出来的一个概念。由于低级浏览器不支持 css3， 但 css3 的效果又很优秀不忍放弃，所以在高级浏览器中使用 css3 ，而在低级浏览器只保证最基本的功能。二者最关键的区别是它们所侧重的内容，以及这种不同所造成的工作流程的差异。</p><ul><li><code>优雅降级</code>：一开始就构建完整的功能，然后针对浏览器测试和修复。</li><li><code>渐进增强</code>：一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能以达到更好的体验。</li></ul><h2 id="18-img-的-alt-和-title-的异同？实现图片懒加载的原理？"><a href="#18-img-的-alt-和-title-的异同？实现图片懒加载的原理？" class="headerlink" title="18. img 的 alt 和 title 的异同？实现图片懒加载的原理？"></a>18. img 的 alt 和 title 的异同？实现图片懒加载的原理？</h2><ul><li><code>alt</code>是图片加载失败时显示在网页上的替代文字；<code>title</code>是鼠标放在图片上面时显示的文字，是对图片的进一步描述和说明。</li><li><code>alt</code>是 img 的必要属性；<code>title</code>不是。</li><li>对于网站 SEO 优先来说，搜索引擎对图片意思的判断，主要是靠<code>alt</code>属性，所以在图片<code>alt</code>属性中以简要文字说明，同时包含关键字，也是页面优化的一部分。</li></ul><p><code>懒加载原理</code>：先设置图片的 <code>data-set</code> 属性值（也可以是其他任意的，只要不发生 http 请求就可以，作用是为了存取值）为图片路径，由于不是 <code>src</code> 属性，故不会发生 http 请求。然后计算出页面的 scrollTop 的高度和浏览器的高度之和，如果图片距页面顶端距离小于前两者之和，说明图片要显示出来了，这时将 <code>data-set</code> 属性替换为 <code>src</code> 属性即可。</p><h2 id="19-css-sprites-（雪碧图-精灵图）"><a href="#19-css-sprites-（雪碧图-精灵图）" class="headerlink" title="19. css sprites （雪碧图/精灵图）"></a>19. css sprites （雪碧图/精灵图）</h2><p>css sprites 就是把网页中一些小图片整合到一张图片文件中，再利用 css 的 background-image、background-repeat、background-position 的组合进行背景定位。</p><p>优点： 减少图片体积；减少 http 请求次数</p><p>缺点：维护比较麻烦；不能随便改变大小，会失真模糊</p><h2 id="20-什么是字体图标？"><a href="#20-什么是字体图标？" class="headerlink" title="20. 什么是字体图标？"></a>20. 什么是字体图标？</h2><p>字体图标简单的说，就是一种特殊的字体，通过这种字体，显示给用户的就像一个个图片一样。字体图标最大的好处，在于它不会变形和加载速度快。字体图标可以像文字一样，随意通过 css 来控制它的大小和颜色，非常方便。</p><h2 id="21-主流浏览器内核私有属性-css-前缀？"><a href="#21-主流浏览器内核私有属性-css-前缀？" class="headerlink" title="21. 主流浏览器内核私有属性 css 前缀？"></a>21. 主流浏览器内核私有属性 css 前缀？</h2><ul><li>mozilla(firefox、flock等): -moz</li><li>webkit 内核(safari、chrome等): -webkit</li><li>opera 内核(opera浏览器): -o</li><li>trident 内核(ie 浏览器): -ms</li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS复习</title>
      <link href="/posts/d9795d86.html"/>
      <url>/posts/d9795d86.html</url>
      
        <content type="html"><![CDATA[<p>JS复习记录</p><span id="more"></span><h1 id="1-JS-的数据类型有哪些？"><a href="#1-JS-的数据类型有哪些？" class="headerlink" title="1. JS 的数据类型有哪些？"></a>1. JS 的数据类型有哪些？</h1><ul><li>基本数据类型（值类型）：Number、String、Boolean、Null、Undefined、Symbol、BigInt。保存在栈内存中。</li><li>复杂数据类型（引用类型）：Object、Function、Array、RegExp、Date 基本包装类型及单体内置对象(Global、Math)等。</li></ul><blockquote><p>基本数据类型保存在栈里面，可以直接访问它的值；引用数据类型保存在堆里面，栈里面保存的是地址，通过栈里面的地址去访问堆里面的值。</p></blockquote><h1 id="2-null-和-undefined-的区别？"><a href="#2-null-和-undefined-的区别？" class="headerlink" title="2.null 和 undefined 的区别？"></a>2.null 和 undefined 的区别？</h1><ul><li>null表示一个对象被定义了，值为“空值”。用法：<br>① 作为函数的参数，表示该函数的参数不是对象。<br>② 作为对象原型链的终点。</li><li>undefined表示不存在这个值。就是此处应该有一个值，但是还没有定义，当尝试读取时就会返回 undefined。用法：<br>① 函数没有返回值时，默认返回 undefined。<br>② 变量已声明，没有赋值时，为 undefined。<br>③ 对象中没有赋值的属性，该属性的值为 undefined。<br>④ 调用函数时，应该提供的参数没有提供，该参数等于 undefined。</li></ul><h1 id="3-如何判断-JS-的数据类型？"><a href="#3-如何判断-JS-的数据类型？" class="headerlink" title="3. 如何判断 JS 的数据类型？"></a>3. 如何判断 JS 的数据类型？</h1><h2 id="1-typeof"><a href="#1-typeof" class="headerlink" title="1.typeof"></a>1.typeof</h2><p>typeof可以区分除了Null类型以外的其他基本数据类型，以及从对象类型中识别出函数（function）。<br>其返回值有：number、string、boolean、undefined、symbol、bigint、function、object。<br>其中, typeof null返回 “object”<br>如果要识别null，可直接使用===全等运算符来判断。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">1</span> <span class="comment">// &#x27;number&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;1&#x27;</span> <span class="comment">// &#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">// &#x27;boolean&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// &#x27;undefined&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Symbol</span>() <span class="comment">// &#x27;symbol&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> [] <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="variable language_">console</span> <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="variable language_">console</span>.<span class="property">log</span> <span class="comment">// &#x27;function&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-instanceof"><a href="#2-instanceof" class="headerlink" title="2.instanceof"></a>2.instanceof</h2><p>instanceof一般是用来判断引用数据类型，但不能正确判断基本数据类型，根据在原型链中查找判断当前数据的原型对象是否存在返回布尔类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">instanceof</span> <span class="title class_">Number</span>; <span class="comment">// false</span></span><br><span class="line"><span class="literal">true</span> <span class="keyword">instanceof</span> <span class="title class_">Boolean</span>; <span class="comment">// false</span></span><br><span class="line"><span class="string">&#x27;str&#x27;</span> <span class="keyword">instanceof</span> <span class="title class_">String</span>; <span class="comment">// false</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="title class_">Array</span>; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Function</span>; <span class="comment">// true</span></span><br><span class="line">&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">date instance <span class="keyword">of</span> <span class="title class_">Date</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="3-Object-prototype-toString"><a href="#3-Object-prototype-toString" class="headerlink" title="3. Object.prototype.toString"></a>3. Object.prototype.toString</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">toString</span>(&#123;&#125;) <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;&#125;) <span class="comment">// 同上结果，加上call也ok</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">1</span>) <span class="comment">// &quot;[object Number]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;1&#x27;</span>) <span class="comment">// &quot;[object String]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>) <span class="comment">// &quot;[object Boolean]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;) <span class="comment">// &quot;[object Function]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>) <span class="comment">//&quot;[object Null]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>) <span class="comment">//&quot;[object Undefined]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="regexp">/123/g</span>) <span class="comment">//&quot;[object RegExp]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()) <span class="comment">//&quot;[object Date]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]) <span class="comment">//&quot;[object Array]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="variable language_">document</span>) <span class="comment">//&quot;[object HTMLDocument]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="variable language_">window</span>) <span class="comment">//&quot;[object Window]&quot;</span></span><br></pre></td></tr></table></figure><h2 id="4-Array-isArray"><a href="#4-Array-isArray" class="headerlink" title="4. Array.isArray"></a>4. Array.isArray</h2><p>Array.isArray(value)可以判断 value 是否为数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>([]); <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(&#123;&#125;); <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="number">1</span>); <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="string">&#x27;string&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="literal">true</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h1 id="3-如何遍历对象的属性？"><a href="#3-如何遍历对象的属性？" class="headerlink" title="3.如何遍历对象的属性？"></a>3.如何遍历对象的属性？</h1><ul><li>遍历自身可枚举的属性（可枚举、非继承属性）：Object.keys() 方法,该方法会返回一个由给定对象的自身可枚举属性组成的数组。</li><li>遍历自身的所有属性（可枚举、不可枚举、非继承属性）：Object.getOwnPropertyNames()方法，该方法会返回一个由指定对象的所有自身属性组成的数组</li><li>遍历可枚举的自身属性和继承属性：for … in …</li></ul><h1 id="4-和-的区别？"><a href="#4-和-的区别？" class="headerlink" title="4. == 和 === 的区别？"></a>4. == 和 === 的区别？</h1><ul><li>==：两个等号称为等值符，当等号两边的值为相同类型时比较值是否相同，类型不同时会发生类型的自动转换，转换为相同的类型后再做比较。</li><li>===：三个等号称为等同符，当等号两边的值为相同类型时，直接比较等号两边的值，值相同则返回 true；若等号两边值的类型不同时直接返回 false。也就是三个等号既要判断类型也要判断值是否相等。</li></ul><h1 id="5-如何判断两个对象是否相等？"><a href="#5-如何判断两个对象是否相等？" class="headerlink" title="5.如何判断两个对象是否相等？"></a>5.如何判断两个对象是否相等？</h1><ol><li><p>Object.is(obj1, obj2)，判断两个对象都引用地址是否一致，true 则一致，false 不一致。</p></li><li><p>判断两个对象内容是否一致，思路是遍历对象的所有键名和键值是否都一致<br>① 判断两个对象是否指向同一内存<br>② 使用 Object.getOwnPropertyNames 获取对象所有键名数组<br>③ 判断两个对象的键名数组是否相等<br>④ 遍历键名，判断键值是否都相等</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isObjValueEqual</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断两个对象是否指向同一内存，指向同一内存返回 true</span></span><br><span class="line">  <span class="keyword">if</span> (a === b) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 获取两个对象的键名数组</span></span><br><span class="line">  <span class="keyword">let</span> aProps = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(a);</span><br><span class="line">  <span class="keyword">let</span> bProps = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(b);</span><br><span class="line">  <span class="comment">// 判断两键名数组长度是否一致，不一致返回 false</span></span><br><span class="line">  <span class="keyword">if</span> (aProps.<span class="property">length</span> !== bProps.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 遍历对象的键值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> a) &#123;</span><br><span class="line">    <span class="comment">// 判断 a 的键名，在 b 中是否存在，不存在，直接返回 false</span></span><br><span class="line">    <span class="keyword">if</span> (b.<span class="title function_">hasOwnProperty</span>(prop)) &#123;</span><br><span class="line">      <span class="comment">// 判断 a 的键值是否为对象，是对象的话需要递归；</span></span><br><span class="line">      <span class="comment">// 不是对象，直接判断键值是否相等，不相等则返回 false</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> a[prop] === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">isObjValueEqual</span>(a[prop], b[prop])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[prop] !== b[prop])&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-强制类型转换和隐式类型转换有哪些"><a href="#6-强制类型转换和隐式类型转换有哪些" class="headerlink" title="6. 强制类型转换和隐式类型转换有哪些"></a>6. 强制类型转换和隐式类型转换有哪些</h1><ul><li>强制：<br>转换成字符串: toString()、String()<br>转换成数字：Number()、parseInt()、parseFloat()<br>转换成布尔类型：Boolean()</li><li>隐式：<br>拼接字符串：let str = 1 + “”;</li></ul><h1 id="7-JS-中的作用域和作用域链"><a href="#7-JS-中的作用域和作用域链" class="headerlink" title="7. JS 中的作用域和作用域链"></a>7. JS 中的作用域和作用域链</h1><ul><li><p>作用域，即变量（变量作用域又称上下文）和函数生效（能被访问）的区域或集合。作用域决定了代码区块中变量和其他资源的可见性。一般可分为：全局作用域、局部作用域（函数作用域）、块级作用域。</p></li><li><p>全局作用域：任何不在函数中或是大括号中声明的变量，都是在全局作用域下，全局作用域下声明的变量可以在程序的任意位置访问。</p></li><li><p>局部作用域：也叫做函数作用域，如果一个变量是在函数内部声明的，它就在一个函数作用域下面。这些变量只能在函数内部访问，不能在函数以外去访问。<br>块级作用域：凡是代码块就可以划分变量的作用域，这种作用域的规则就叫做块级作用域。</p></li><li><p>作用域链：当在 JS 中使用一个变量时，JS 引擎会尝试在当前作用域下寻找该变量，如果没找到，再到它的上层作用域寻找，以此类推，直至找到该变量或是查找至全局作用域，如果在全局作用域里仍然找不到该变量，它就会在全局范围内隐式声明该变量(非严格模式下)或是直接报错。</p></li><li><p>js 采用的是静态作用域，所以函数的作用域在函数定义时就确定了</p></li></ul><h1 id="8-JS-的预解析"><a href="#8-JS-的预解析" class="headerlink" title="8. JS 的预解析"></a>8. JS 的预解析</h1><p>JS 代码的执行是由浏览器中的 JS 解析器来执行的，JS 解析器执行 JS 代码时，分为两个过程：预解析过程和代码执行过程。预解析分为变量预解析（变量提升）和函数预解析（函数提升）；代码执行是指按顺序从上至下执行。</p><ul><li>变量提升：把变量的声明提升到当前作用域的最前面，只提升声明，不提升赋值；</li><li>函数提升：把函数的声明提升到当前作用域的最前面，只提升声明，不提升调用；</li></ul><blockquote><p>函数表达式的写法不存在函数提升</p></blockquote><blockquote><p>函数提升优先级高于变量提升，即函数提升在变量提升之上，且不会被同名变量声明时覆盖，但是会被同名变量赋值后覆盖</p></blockquote><h1 id="9-原型和原型链"><a href="#9-原型和原型链" class="headerlink" title="9. 原型和原型链"></a>9. 原型和原型链</h1><p>JS是面向对象的，每个实例对象都有一个__proto__属性，该属性指向它的原型对象。该实例的构造函数有一个原型属性prototype，与实例的__proto__属性指向同一个对象。同时，原型对象的constructor 指向构造函数本身。</p><p>当一个对象在查找一个属性时，自身没有就会根据__proto__属性向它的原型进行查找，如果还是没有，则向它的原型的原型继续查找，直至查到Object.prototype.__proto__也就是null，这样就形成了原型链。</p><h1 id="10-闭包"><a href="#10-闭包" class="headerlink" title="10. 闭包"></a>10. 闭包</h1><p>在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。可以在一个内层函数中访问到其外层函数的作用域。</p><p>闭包就是能够读取其他函数内部变量的函数。主要作用是解决变量污染问题，也可以用来延长局部变量的生命周期。</p><ul><li>优点：延长局部变量的生命周期</li><li>缺点：会导致函数的变量一直保存在内存中，过多的闭包可能会导致内存泄漏</li></ul><h1 id="11-new-操作符的实现机制"><a href="#11-new-操作符的实现机制" class="headerlink" title="11. new 操作符的实现机制"></a>11. new 操作符的实现机制</h1><ol><li>首先创建了一个新的空对象</li><li>设置原型，将对象的原型设置为函数的prototype对象。</li><li>让函数的this指向这个对象，执行构造函数的代码（为这个新对象添加属性）</li><li>判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">  obj.<span class="property">__proto__</span> = context.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  <span class="keyword">const</span> res = context.<span class="title function_">apply</span>(obj, [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> res === <span class="string">&quot;object&quot;</span> ? res : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="12-this-的理解？"><a href="#12-this-的理解？" class="headerlink" title="12. this 的理解？"></a>12. this 的理解？</h1><ol><li>概念：<br>this是 JS 的一个关键字，它是函数运行时，自动生成的一个内部对象，只能在函数内部使用，随着函数使用场合的不同，this的值会发生变化，但有一个总的原则：this指的是调用函数的那个对象。</li><li>this的指向：</li></ol><ul><li>① 作为普通函数执行时，this指向window，但在严格模式下this指向undefined。</li><li>② 函数作为对象里的方法被调用时，this指向该对象.</li><li>③ 当用new运算符调用构造函数时，this指向返回的这个对象。</li><li>④ 箭头函数的this绑定看的是this所在函数定义在哪个对象下，就绑定哪个对象。- 如果存在嵌套，则this绑定到最近的一层对象上。</li><li>⑤ call()、apply()、bind()是函数的三个方法，都可以显式的指定调用函数的this指向。</li></ul><h1 id="13-call、apply、bind的区别以及手写实现"><a href="#13-call、apply、bind的区别以及手写实现" class="headerlink" title="13.call、apply、bind的区别以及手写实现"></a>13.call、apply、bind的区别以及手写实现</h1><ul><li><code>call()</code>可以传递两个参数，第一个参数是指定函数内部中<code>this</code>的指向，第二个参数是函数调用时需要传递的参数。改变<code>this</code>指向后原函数会立即执行，且此方法只是临时改变<code>this</code>指向一次。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码<span class="comment">// 实现call方法</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断调用对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> != <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;type error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 首先获取参数</span></span><br><span class="line">  <span class="keyword">let</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">let</span> res = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 判断context是否传入，如果没有，就设置为window</span></span><br><span class="line">  context = context || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="comment">// 将被调用的方法置入context的属性</span></span><br><span class="line">  <span class="comment">// this 即为要调用的方法</span></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// 执行要被调用的方法</span></span><br><span class="line">  res = context.<span class="title function_">fn</span>(...args);</span><br><span class="line">  <span class="comment">// 删除手动增加的属性方法</span></span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span>;</span><br><span class="line">  <span class="comment">// 执行结果返回</span></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>apply()</code>接受两个参数，第一个参数是<code>this</code>的指向，第二个参数是函数接受的参数，以<code>数组</code>的形式传入。改变<code>this</code>指向后原函数会立即执行，且此方法只是临时改变<code>this</code>指向一次。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码<span class="comment">// 实现apply方法</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span>(<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> != <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;type error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="literal">null</span>;</span><br><span class="line">  context = context || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="comment">// 使用 symbol 来保证属性唯一</span></span><br><span class="line">  <span class="comment">// 也就是保证不会重写用户自己原来定义在context中的同名属性</span></span><br><span class="line">  <span class="keyword">const</span> fnSymbol = <span class="title class_">Symbol</span>();</span><br><span class="line">  context[fnSymbol] = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// 执行被调用的方法</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    res = context[fnSymbol](...<span class="variable language_">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res = context[fnSymbol]();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context[fnSymbol];</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>bind()</code>方法的第一参数也是<code>this</code>的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入)。改变<code>this</code>指向后不会立即执行，而是返回一个永久改变<code>this</code>指向的函数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码<span class="comment">// 实现bind方法</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> != <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;type error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">apply</span>(</span><br><span class="line">      <span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Fn</span> ? <span class="variable language_">this</span> : context,</span><br><span class="line">      <span class="comment">// 当前这个 arguments 是指 Fn 的参数</span></span><br><span class="line">      args.<span class="title function_">concat</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>共同点：改变函数执行时的上下文，简而言之就是改变函数运行时的<code>this</code>指向。<br> 不同：</p><ul><li><code>call()</code>和<code>bind()</code>第二个参数是列表形式的；<code>apply()</code>第二个参数是数组形式。</li><li><code>call()</code>和<code>apply()</code>是立即执行；<code>bind()</code>不会立即执行而是生成一个修改<code>this</code>之后的新函数。</li></ul><h1 id="14-箭头函数"><a href="#14-箭头函数" class="headerlink" title="14. 箭头函数"></a>14. 箭头函数</h1><ol><li>箭头函数是定义函数一种新的方式，比普通函数定义更加方便和简单。</li><li>箭头函数不绑定<code>this</code>，会捕获其所在上下文的<code>this</code>，作为自己的<code>this</code>。</li><li>箭头函数不能用作构造函数，也就是说不可以使用<code>new</code>命令，否则会抛出错误。</li><li>箭头函数不绑定<code>arguments</code>，取而代之用<code>rest</code>参数解决，同时没有<code>super</code>和<code>new.target</code>。</li><li>使用<code>call</code>，<code>apply</code>，<code>bind</code>并不会改变箭头函数中的<code>this</code>指向。对箭头函数使用<code>call</code>或<code>apply</code>方法时，只会传入参数并调用函数；对箭头函数使用<code>bind</code>方法时，只会返回一个预设参数的新函数，并不会改变这个新函数的<code>this</code>指向。</li></ol><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="15-浅拷贝和深拷贝的实现"><a href="#15-浅拷贝和深拷贝的实现" class="headerlink" title="15. 浅拷贝和深拷贝的实现"></a>15. 浅拷贝和深拷贝的实现</h1><p><code>浅拷贝</code>：如果属性是基本类型，拷贝的就是基本类型的值；如果属性是引用类型，拷贝的就是内存地址。即浅拷贝是<code>拷贝一层</code>，深层次的引用类型则共享内存地址。常用的方法有：object.assign，扩展运算符等等</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ini复制代码var <span class="attr">a</span> = &#123; count: <span class="number">1</span>, deep: &#123; count: <span class="number">2</span> &#125; &#125;<span class="comment">;</span></span><br><span class="line">var <span class="attr">b</span> = Object.assign(&#123;&#125;, a)<span class="comment">;</span></span><br><span class="line">// 或者</span><br><span class="line">var <span class="attr">c</span> = &#123;...a&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">// 实现一个浅拷贝</span><br><span class="line">function shallowClone(obj) &#123;</span><br><span class="line">  const <span class="attr">newObj</span> = &#123;&#125;<span class="comment">;</span></span><br><span class="line">  for (let prop in obj) &#123;</span><br><span class="line">    if (obj.hasOwnProperty(prop)) &#123;</span><br><span class="line">      newObj<span class="section">[prop]</span> = obj<span class="section">[prop]</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>深拷贝</code>：开辟一个新的栈，两个对象的属性完全相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深拷贝</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; obj 要拷贝的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Map</span>&#125; map 用于存储循环引用对象的地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj = &#123;&#125;, map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> obj <span class="comment">// 如果是null或者undefined我就不进行拷贝操作</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj)</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj)</span><br><span class="line">  <span class="comment">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> obj</span><br><span class="line">  <span class="keyword">if</span> (map.<span class="title function_">get</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">return</span> map.<span class="title function_">get</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = &#123;&#125;; <span class="comment">// 初始化返回结果</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    obj <span class="keyword">instanceof</span> <span class="title class_">Array</span> ||</span><br><span class="line">    <span class="comment">// 加 || 的原因是为了防止 Array 的 prototype 被重写，Array.isArray 也是如此</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">toString</span>(obj) === <span class="string">&quot;[object Array]&quot;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    result = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 防止循环引用</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">// 保证 key 不是原型属性</span></span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="comment">// 递归调用</span></span><br><span class="line">      result[key] = <span class="title function_">deepClone</span>(obj[key], map);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="16-JavaScript-中内存泄漏的几种情况"><a href="#16-JavaScript-中内存泄漏的几种情况" class="headerlink" title="16. JavaScript 中内存泄漏的几种情况"></a>16. JavaScript 中内存泄漏的几种情况</h1><p><code>内存泄漏</code>一般是指系统进程不再用到的内存，没有及时释放，造成内存资源浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p><p>造成内存泄漏的原因有：</p><ol><li><code>全局变量。</code>在局部作用域中，函数执行完毕后，变量就没有存在的必要了，垃圾回收机制很快的做出判断并回收；但是对于全局变量，很难判断什么时候不用这些变量，无法正常回收。<br> 解决办法：<br> ① 尽量少使用全局变量；<br> ② 使用严格模式，在 js 文件头部或者函数的顶部加上<code>use strict</code>。</li><li><code>闭包引起的内存泄露。</code>闭包可以读取函数内部的变量，然后让这些变量始终保存在内存中，如果在使用结束后没有将局部变量清除，就可能导致内存泄露。<br> 解决办法：将事件处理函数定义在外部，解除闭包。</li><li><code>被遗忘的定时器。</code>定时器<code>setInterval</code>或者<code>setTimeout</code>不再需要使用时，且没有被清除，导致定时器的回调函数及其内部依赖的变量都不能被回收，就会造成内存泄漏。<br> 解决办法：当不需要定时器的时候，调用<code>clearInterval</code>或者<code>clearTimeout</code>手动清除。</li><li><code>事件监听。</code>垃圾回收机制不好判断事件是否需要被解除，导致<code>callback</code>不能被释放，此时需要手动解除绑定。<br> 解决办法：及时使用<code>removeEventListener</code>移除事件监听。</li><li><code>元素引用没有清理。</code><br> 解决办法：移除元素后，手动设置元素的引用为<code>null</code>。</li><li><code>console</code>。传递给<code>console.log</code>的对象是不能被垃圾回收，可能会存在内存泄漏。<br> 解决办法：清除不必要的<code>console</code>。</li></ol><h1 id="17-防抖和节流的区别，以及手写实现"><a href="#17-防抖和节流的区别，以及手写实现" class="headerlink" title="17. 防抖和节流的区别，以及手写实现"></a>17. 防抖和节流的区别，以及手写实现</h1><p><code>防抖</code>：多次触发事件，事件处理函数只执行一次，并且是在触发操作结束时执行。也就是说，当一个事件被触发，准备执行事件函数前，会等待一定的时间，在这个等待时间内，如果没有再次被触发，那么就执行，如果又触发了，那就本次作废，重置等待时间，直到最终能执行。<br> 主要应用场景：搜索框搜索输入，用户最后一次输入完，再发送请求；手机号、邮箱验证输入检测</p><p><code>节流</code>：事件触发后，规定时间内，事件处理函数不能再次被调用。也就是说在规定的时间内，函数只能被调用一次，且是最先被触发调用的那次。<br> 主要应用场景：高频点击、表单重复提交等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">javascript复制代码<span class="comment">/*** 防抖函数 n 秒后再执行该事件，若在 n 秒内被重复触发，则重新计时</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> func 要被防抖的函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> wait 规定的时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span>; <span class="comment">// 保存this指向</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>; <span class="comment">// 拿到event对象</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">    &#125;, wait)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*** 节流函数 n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> fn 要被节流的函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> wait 规定的时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttled</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="18-EventLoop-事件循环"><a href="#18-EventLoop-事件循环" class="headerlink" title="18. EventLoop 事件循环"></a>18. EventLoop 事件循环</h1><p>js 是单线程运行的，当遇到一个异步事件后并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当一个异步事件返回结果后，js会将这个事件加入与当前执行栈不同的另一个队列–<code>事件队列（Task Queue）</code>。被放入事件队列不会立刻执行其回调，而是等待当前执行栈中的所有任务都执行完毕， 主线程处于闲置状态时，主线程会去查找事件队列是否有任务。如果有，那么主线程会从中取出排在第一位的事件，并把这个事件对应的回调放入执行栈中，然后执行其中的同步代码…，如此反复，这样就形成了一个无限的循环，这个过程被称为<code>事件循环（Event Loop）</code>。</p><p>实际上,异步任务之间并不相同，它们的执行优先级也有区别。异步任务分两类：<code>微任务（micro task</code>）和<code>宏任务（macro task）</code>。</p><p>微任务包括： <code>promise 的回调</code>、node 中的 <code>process.nextTick</code> 、对 Dom 变化监听的 <code>MutationObserver</code>。</p><p>宏任务包括： script 脚本的执行，<code>setTimeout</code> 、<code>setInterval</code> 和<code>setImmediate</code> 一类的定时事件，还有如 I/O 操作，UI 渲染等。</p><p>在一个事件循环中，异步事件返回结果后会被放到一个事件队列中。然而，根据这个异步事件的类型，这个事件实际上会被对应的<code>宏任务队列</code>或者<code>微任务队列</code>中去。并且在当前执行栈为空的时候，主线程会查看微任务队列是否有事件存在。如果不存在，那么再去宏任务队列中取出一个事件并把对应的回调加入当前执行栈；如果存在，则会依次执行队列中事件对应的回调，直到微任务队列为空，然后去宏任务队列中取出最前面的一个事件，把对应的回调加入当前执行栈…如此反复，进入循环。</p><p><strong>在当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行</strong>。</p><h1 id="19-Promise"><a href="#19-Promise" class="headerlink" title="19. Promise"></a>19. Promise</h1><p><code>Promise</code>异步编程的一种解决方案。<code>Promise</code>是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是<code>pending</code>、<code>fulfilled</code>和<code>rejected</code>，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 fulfilled 或者 rejected 状态，并且状态一经改变，就无法再改变了。状态的改变是通过<code>resolve()</code>和<code>reject()</code>函数来实现的，可以在异步操作结束后调用这两个函数改变 Promise 实例的状态。Promise 的原型上定义了一个 <code>then</code>方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vela快应用框架</title>
      <link href="/posts/d9795d89.html"/>
      <url>/posts/d9795d89.html</url>
      
        <content type="html"><![CDATA[<p>Vela上快应用框架的一些实现原理和编程实践</p><span id="more"></span><h1 id="快应用框架构成"><a href="#快应用框架构成" class="headerlink" title="快应用框架构成"></a>快应用框架构成</h1><p>一个简单的图用来描述快应用框架的模块构成，主要由Native（C++）部分和JS部分（framework.js）构成。</p><p><img src="https://raw.githubusercontent.com/why862555625/images/main/images/48c4d276-9d71-439a-a720-7f268da27d85.svg" alt="48c4d276-9d71-439a-a720-7f268da27d85"></p><p>在框架的C++代码中，最核心的两大组件就是 quickjs和libuv，分别提供JS运行环境和异步消息循环机制。框架还用到了一些其他的C/C++库如libcurl作为http客户端，rapidjson提供json解析能力等。</p><p>下面给出项目目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── bin                                     # 生成目录</span><br><span class="line">│   ├── app                                 # 测试应用</span><br><span class="line">│   ├── apps.json                           # 应用配置文件</span><br><span class="line">│   ├── font                                # 应用字体资源</span><br><span class="line">│   ├── quickapp</span><br><span class="line">│   └── vapp                                # 项目生成的可执行文件</span><br><span class="line">├── build                                   # cmake构建目录</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── deps                                    # 依赖项目录</span><br><span class="line">│   ├── curl                                # 多协议文件传输库</span><br><span class="line">│   ├── ext                                 # 扩展，主要是lvgl非标准扩展</span><br><span class="line">│   ├── FFmpeg                              # 音视频编解码库</span><br><span class="line">│   ├── freetype2                           # 字体渲染库</span><br><span class="line">│   ├── libuv                               # 跨平台事件驱动的消息循环库</span><br><span class="line">│   ├── littlefs                            # lvgl相关</span><br><span class="line">│   ├── lv_conf.h</span><br><span class="line">│   ├── lv_drivers</span><br><span class="line">│   ├── lv_drv_conf.h</span><br><span class="line">│   ├── lv_ffmpeg_interface</span><br><span class="line">│   ├── lv_fs_interface</span><br><span class="line">│   ├── lvgl                                # lvgl 嵌入式gui库</span><br><span class="line">│   ├── lv_lib_freetype                     # lvgl的freetype库</span><br><span class="line">│   ├── lv_lib_png                          # lvgl的png解码库</span><br><span class="line">│   ├── quickjs                             # 嵌入式JS引擎</span><br><span class="line">│   ├── rapidjson                           # Json库</span><br><span class="line">│   ├── tools                               # 工具目录，目前存放了Ffmpeg编译脚本</span><br><span class="line">│   ├── unqlite                             # no sql数据库</span><br><span class="line">│   ├── uvws                                # 基于libuv实现的websocket库</span><br><span class="line">│   ├── wasm3                               # web assembely支持库</span><br><span class="line">│   └── yoga                                # yoga排版引擎</span><br><span class="line">├── Kconfig                                 # 供vela使用的kconfg配置</span><br><span class="line">├── Make.defs</span><br><span class="line">├── Makefile                                # vela makefile</span><br><span class="line">├── README.md                               # 本文件</span><br><span class="line">├── src                                     # 源码</span><br><span class="line">│   ├── aiotjs.h</span><br><span class="line">│   ├── ajs_vm.cpp</span><br><span class="line">│   ├── ....</span><br><span class="line">│   ├── framework                           # 框架源码</span><br><span class="line">│   ├── gui                                 # GUI相关代码，包含lvgl渲染器实现</span><br><span class="line">│   ├── jse                                 # JS Environment JS环境相关</span><br><span class="line">│   └── Kconfig</span><br><span class="line">├── tests                                   # 测试</span><br><span class="line">│   ├── gui</span><br><span class="line">│   ├── helpers</span><br><span class="line">│   ├── run.js</span><br><span class="line">│   ├── ... </span><br><span class="line">│   ├── test-feature-vibrator.js</span><br><span class="line">│   ├── wasi</span><br><span class="line">│   └── wasm</span><br><span class="line">└── toolchain                               # 交叉编译相关</span><br><span class="line">    └── cross-m32.cmake                     # linux 32位构建</span><br></pre></td></tr></table></figure><h1 id="框架启动流程分析"><a href="#框架启动流程分析" class="headerlink" title="框架启动流程分析"></a>框架启动流程分析</h1><p><img src="https://raw.githubusercontent.com/why862555625/images/main/images/6ca169bc-84af-4252-9758-54c853feefef.svg" alt="6ca169bc-84af-4252-9758-54c853feefef"></p><p>框架的整个启动和执行流程较为复杂，里面涉及到了JS和C++的互调用。</p><p>启动流程以C++的入口函数为入口点，会初始化quickjs，创建app，启动子线程并加载Native module和内置JS框架代码。</p><p>然后流程转交到JS，由JS通过调用初始化时注册的Native函数来完成整个快应用的加载。</p><h1 id="VDOM渲染流程分析"><a href="#VDOM渲染流程分析" class="headerlink" title="VDOM渲染流程分析"></a>VDOM渲染流程分析</h1><p>VDOM的创建和渲染出于性能考虑，放在了C++层实现，整个VDOM的创建由Native通过执行template上的渲染函数来创建。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">vm</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> _vm_ = vm || <span class="variable language_">this</span></span><br><span class="line">      <span class="keyword">return</span> aiot.<span class="title function_">__ce__</span>(<span class="string">&quot;div&quot;</span>, &#123;</span><br><span class="line">        <span class="string">&quot;classList&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;page&quot;</span>,</span><br><span class="line">          <span class="string">&quot;home-page&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;, [</span><br><span class="line">        aiot.<span class="title function_">__ci__</span>(&#123;</span><br><span class="line">          <span class="attr">shown</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> _vm_.<span class="property">status</span> !== <span class="number">0</span> &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">          <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> aiot.<span class="title function_">__ce__</span>(<span class="string">&quot;text&quot;</span>, &#123;</span><br><span class="line">              <span class="string">&quot;classList&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;text-time&quot;</span></span><br><span class="line">              ],</span><br><span class="line">              <span class="string">&quot;value&quot;</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> _vm_.$t(<span class="string">&quot;a.b&quot;</span>) &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;),</span><br><span class="line">        aiot.<span class="title function_">__ci__</span>(&#123;</span><br><span class="line">          <span class="attr">shown</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> _vm_.<span class="property">status</span> === <span class="number">0</span> &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">          <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> aiot.<span class="title function_">__ce__</span>(<span class="string">&quot;div&quot;</span>, &#123;</span><br><span class="line">              <span class="string">&quot;classList&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;body&quot;</span>,</span><br><span class="line">                <span class="string">&quot;launch-panel&quot;</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;, [</span><br><span class="line">              aiot.<span class="title function_">__ce__</span>(<span class="string">&quot;image&quot;</span>, &#123;</span><br><span class="line">                <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/Common/logo.png&quot;</span>,</span><br><span class="line">                <span class="string">&quot;classList&quot;</span>: [</span><br><span class="line">                  <span class="string">&quot;logo&quot;</span></span><br><span class="line">                ]</span><br><span class="line">              &#125;),</span><br><span class="line">              aiot.<span class="title function_">__ce__</span>(<span class="string">&quot;text&quot;</span>, &#123;</span><br><span class="line">                <span class="string">&quot;classList&quot;</span>: [</span><br><span class="line">                  <span class="string">&quot;app-name&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: <span class="string">&quot;航旅纵横&quot;</span></span><br><span class="line">              &#125;)</span><br><span class="line">            ])</span><br><span class="line">          &#125;),</span><br><span class="line">        aiot.<span class="title function_">__ci__</span>(&#123;...&#125;),</span><br><span class="line">        aiot.<span class="title function_">__ci__</span>(&#123;...&#125;),</span><br><span class="line">        ....</span><br><span class="line">      ])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/***/</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>Template本身是一个嵌套结构，它被翻译成了对aiot.<strong>ce</strong>, aiot__cf__, aiot.__ci__等函数的嵌套调用，嵌套调用的过程就是在Native层完成整个dom树构建的过程。</p><p>我们来看__cf__对应的C++源码，它用于创建一个逻辑循环节点：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DomEntity* <span class="title">dom_create_for_fragment</span><span class="params">(jse_context_ref ctx, <span class="type">jse_value_t</span> options, <span class="type">jse_value_t</span> func)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">AIOTJS_LOG_DEBUG</span>(<span class="string">&quot;dom_create_for_fragment ==================== &quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   ....</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建DomForFragment节点</span></span><br><span class="line">    DomForFragment *frag = <span class="keyword">new</span> <span class="built_in">DomForFragment</span>();</span><br><span class="line">    page-&gt;<span class="built_in">addDomEntity</span>(frag);</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存JS端传入的表达式和render函数</span></span><br><span class="line">    <span class="type">jse_value_t</span> exp = <span class="built_in">jse_get_object_property</span>(ctx, options, <span class="string">&quot;exp&quot;</span>);</span><br><span class="line">    frag-&gt;<span class="built_in">setExpress</span>(<span class="built_in">jse_dup_value</span>(ctx, exp));</span><br><span class="line">    frag-&gt;<span class="built_in">setRenderFunction</span>(<span class="built_in">jse_dup_value</span>(ctx, func));</span><br><span class="line">    <span class="built_in">jse_free_value</span>(ctx, exp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置key或者$idx</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建effect函数</span></span><br><span class="line">    <span class="type">jse_value_t</span> eff = <span class="built_in">create_effect</span>(ctx, dom_update_for_fragment, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">AIOTJS_LOG_DEBUG</span>(<span class="string">&quot;AddEffect for %d&quot;</span>, frag-&gt;<span class="built_in">uid</span>());</span><br><span class="line">    <span class="comment">//调用framework的effectWrap函数将effect函数传递给JS层保存</span></span><br><span class="line">    frag-&gt;<span class="built_in">addEffect</span>(ctx, <span class="built_in">dom_effect</span>(ctx, eff, frag-&gt;<span class="built_in">uid</span>(), <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">jse_free_value</span>(ctx, eff);</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回创建好的frag vdom节点</span></span><br><span class="line">    <span class="keyword">return</span> frag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dom_update_for_fragment是C++端的节点更新函数，它最终会触发节点的render函数更新子节点：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DomForFragment::render</span><span class="params">(jse_context_ref ctx)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 递归构造</span></span><br><span class="line">    <span class="type">jse_value_t</span> exp_obj = <span class="built_in">jse_call</span>(ctx, exp_, JSE_UNDEFINED, <span class="number">0</span>, &#123;&#125;);</span><br><span class="line">    <span class="type">jse_value_t</span> expValue = JSE_UNDEFINED;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* str_tid = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用JS端的求值函数获取for循环对应的list对象 expValue</span></span><br><span class="line">    expValue = <span class="built_in">get_from_js_expression</span>();</span><br><span class="line">    </span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历数组</span></span><br><span class="line">    <span class="type">jse_size_t</span> len = <span class="built_in">jse_get_array_length</span>(ctx, expValue);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">jse_size_t</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="comment">//为每个element分别调用render函数</span></span><br><span class="line">        <span class="type">jse_value_t</span> idx = <span class="built_in">jse_uint</span>(ctx, i);</span><br><span class="line">        <span class="type">jse_value_t</span> args[] = &#123;</span><br><span class="line">            idx,</span><br><span class="line">            item</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">jse_value_t</span> res = <span class="built_in">jse_call</span>(ctx, render_, JSE_UNDEFINED, <span class="number">2</span>, args);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">jse_is_number</span>(res)) &#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">int</span> cid = <span class="built_in">jse_to_uint_def</span>(ctx, res, <span class="number">0</span>);</span><br><span class="line">            DomEntity* ent = p-&gt;<span class="built_in">entity</span>(cid);</span><br><span class="line">            <span class="built_in">AIOTJS_CHECK_NE</span>(ent, <span class="literal">nullptr</span>);</span><br><span class="line">            ent-&gt;<span class="built_in">setDiffOperationType</span>(DomEntityDiffOperationType::Add);</span><br><span class="line">            <span class="built_in">addChild</span>(ent);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">jse_is_undefined</span>(tid_value)) &#123;</span><br><span class="line">                <span class="type">jse_value_t</span> v_tid = <span class="built_in">jse_dup_value</span>(ctx, tid_value);</span><br><span class="line">                ent-&gt;<span class="built_in">setTid</span>(v_tid);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">jse_is_array</span>(ctx, res)) &#123;</span><br><span class="line">            <span class="type">jse_size_t</span> childlen = <span class="built_in">jse_get_array_length</span>(ctx, res);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">size_t</span> j=<span class="number">0</span>; j&lt;childlen; j++) &#123;</span><br><span class="line">                <span class="type">unsigned</span> <span class="type">int</span> cid = <span class="built_in">jse_get_array_idx_uint</span>(ctx, res, j, <span class="number">0</span>);</span><br><span class="line">                DomEntity* ent = p-&gt;<span class="built_in">entity</span>(cid);</span><br><span class="line">                <span class="built_in">AIOTJS_CHECK_NE</span>(ent, <span class="literal">nullptr</span>);</span><br><span class="line">                ent-&gt;<span class="built_in">setDiffOperationType</span>(DomEntityDiffOperationType::Add);</span><br><span class="line">                <span class="built_in">addChild</span>(ent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">jse_free_value</span>(ctx, res);</span><br><span class="line">        <span class="built_in">jse_free_value</span>(ctx, idx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">jse_free_value</span>(ctx, item);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">jse_free_value</span>(ctx, expValue);</span><br><span class="line">    <span class="built_in">AIOTJS_LOG_DEBUG</span>(<span class="string">&quot;DomForFragment::build finished - &lt;%u&gt;&quot;</span>, <span class="built_in">uid</span>());</span><br><span class="line">    <span class="comment">// 只有初始化的时候返回true表示需要flush，其它情况下延迟flush</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isBindingEffect</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dom_update_for_fragment是C++端的节点更新函数，它最终会触发节点的render函数更新子节点：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DomForFragment::render</span><span class="params">(jse_context_ref ctx)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 递归构造</span></span><br><span class="line">    <span class="type">jse_value_t</span> exp_obj = <span class="built_in">jse_call</span>(ctx, exp_, JSE_UNDEFINED, <span class="number">0</span>, &#123;&#125;);</span><br><span class="line">    <span class="type">jse_value_t</span> expValue = JSE_UNDEFINED;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* str_tid = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用JS端的求值函数获取for循环对应的list对象 expValue</span></span><br><span class="line">    expValue = <span class="built_in">get_from_js_expression</span>();</span><br><span class="line">    </span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历数组</span></span><br><span class="line">    <span class="type">jse_size_t</span> len = <span class="built_in">jse_get_array_length</span>(ctx, expValue);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">jse_size_t</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="comment">//为每个element分别调用render函数</span></span><br><span class="line">        <span class="type">jse_value_t</span> idx = <span class="built_in">jse_uint</span>(ctx, i);</span><br><span class="line">        <span class="type">jse_value_t</span> args[] = &#123;</span><br><span class="line">            idx,</span><br><span class="line">            item</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">jse_value_t</span> res = <span class="built_in">jse_call</span>(ctx, render_, JSE_UNDEFINED, <span class="number">2</span>, args);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">jse_is_number</span>(res)) &#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">int</span> cid = <span class="built_in">jse_to_uint_def</span>(ctx, res, <span class="number">0</span>);</span><br><span class="line">            DomEntity* ent = p-&gt;<span class="built_in">entity</span>(cid);</span><br><span class="line">            <span class="built_in">AIOTJS_CHECK_NE</span>(ent, <span class="literal">nullptr</span>);</span><br><span class="line">            ent-&gt;<span class="built_in">setDiffOperationType</span>(DomEntityDiffOperationType::Add);</span><br><span class="line">            <span class="built_in">addChild</span>(ent);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">jse_is_undefined</span>(tid_value)) &#123;</span><br><span class="line">                <span class="type">jse_value_t</span> v_tid = <span class="built_in">jse_dup_value</span>(ctx, tid_value);</span><br><span class="line">                ent-&gt;<span class="built_in">setTid</span>(v_tid);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">jse_is_array</span>(ctx, res)) &#123;</span><br><span class="line">            <span class="type">jse_size_t</span> childlen = <span class="built_in">jse_get_array_length</span>(ctx, res);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">size_t</span> j=<span class="number">0</span>; j&lt;childlen; j++) &#123;</span><br><span class="line">                <span class="type">unsigned</span> <span class="type">int</span> cid = <span class="built_in">jse_get_array_idx_uint</span>(ctx, res, j, <span class="number">0</span>);</span><br><span class="line">                DomEntity* ent = p-&gt;<span class="built_in">entity</span>(cid);</span><br><span class="line">                <span class="built_in">AIOTJS_CHECK_NE</span>(ent, <span class="literal">nullptr</span>);</span><br><span class="line">                ent-&gt;<span class="built_in">setDiffOperationType</span>(DomEntityDiffOperationType::Add);</span><br><span class="line">                <span class="built_in">addChild</span>(ent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">jse_free_value</span>(ctx, res);</span><br><span class="line">        <span class="built_in">jse_free_value</span>(ctx, idx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">jse_free_value</span>(ctx, item);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">jse_free_value</span>(ctx, expValue);</span><br><span class="line">    <span class="built_in">AIOTJS_LOG_DEBUG</span>(<span class="string">&quot;DomForFragment::build finished - &lt;%u&gt;&quot;</span>, <span class="built_in">uid</span>());</span><br><span class="line">    <span class="comment">// 只有初始化的时候返回true表示需要flush，其它情况下延迟flush</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isBindingEffect</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="框架线程模型"><a href="#框架线程模型" class="headerlink" title="框架线程模型"></a>框架线程模型</h1><p>框架采用多线程模式，主要有如下两类线程：</p><ul><li>主线程：负责渲染，只有一个</li><li>应用线程：负责执行JS代码，响应数据变更并更新vdom</li></ul><p>主线程和应用线程各启动一个uv loop进行消息处理，这两个线程通过libuv进行异步通信，主要有如下几种场景：</p><ol><li>应用线程退出后异步通知主线程退出</li><li>应用线程更新vdom后异步通知主线程刷新ui</li><li>系统消息（如应用后台，应用退出等）由主线程发出，通过libuv转到应用线程执行</li></ol><h1 id="渲染流程分析"><a href="#渲染流程分析" class="headerlink" title="渲染流程分析"></a>渲染流程分析</h1><h2 id="渲染流程图"><a href="#渲染流程图" class="headerlink" title="渲染流程图"></a>渲染流程图</h2><p><img src="https://raw.githubusercontent.com/why862555625/images/main/images/33f7e704-ec72-4782-b8ff-1e58df0bef2d.svg" alt="33f7e704-ec72-4782-b8ff-1e58df0bef2d"></p><h2 id="渲染流程"><a href="#渲染流程" class="headerlink" title="渲染流程"></a>渲染流程</h2><p><img src="https://raw.githubusercontent.com/why862555625/images/main/images/6e8b9b04-5afd-47aa-9263-d3a379c1ac5b.svg" alt="6e8b9b04-5afd-47aa-9263-d3a379c1ac5b"></p><h1 id="框架核心部分介绍"><a href="#框架核心部分介绍" class="headerlink" title="框架核心部分介绍"></a>框架核心部分介绍</h1><h2 id="核心类图"><a href="#核心类图" class="headerlink" title="核心类图"></a>核心类图</h2><p><img src="https://raw.githubusercontent.com/why862555625/images/main/images/a8dc8b49-a594-454c-9309-164e3269c5e9.svg" alt="a8dc8b49-a594-454c-9309-164e3269c5e9"></p><p>解释：</p><ol><li>Framework是内部使用的框架类表示，FrameworkExt从Framework继承并添加了对vela系统的消息集成，在vela中使用FrameworkExt表示唯一的框架实例</li><li>FrameworkExt中会维护多个app实例，框架支持多应用切换</li><li>每个app实例包含一个JS运行上下文环境和相关的libuv句柄，它们封装在RuntimeContxt中，作为Application的成员变量保存，即一个Application对象唯一对应一个js运行上下文。</li><li>一个Applicatoin对象可以拥有多个Page对象，一个Page对象表示一个可显示的页面，实际是一颗vdom树</li><li>Page对象的继承关系较为复杂，框架支持自定义组件，从逻辑上讲，一个Component包含一颗vdom子树，它可以被任意组合来形成最终的完整vdom树。Page是最顶层的Component组件，唯一。从继承关系上讲，DomDocument这一层应该去掉，在添加子组件支持后它的语义已被Component取代，这层抽象当前代码中没有意义但仍然存在。</li></ol>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> quickjs </tag>
            
            <tag> devtools </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
