<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>5分钟搭一个hexo博客</title>
      <link href="/posts/b9dc5266.html"/>
      <url>/posts/b9dc5266.html</url>
      
        <content type="html"><![CDATA[<p>这是一篇基础教程，简单的搭建hexo博客</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><img src="https://sls-cloudfunction-ap-guangzhou-code-1300044145.file.myqcloud.com/upload/hexo.png" style="zoom:50%;" /><p><strong>hexo</strong>也算是老牌博客框架了，以前对于hexo的了解也仅仅停留在知道他是一个能够快速将本地的markdown文件生成静态网站的框架。<br>最早的个人博客网站还是自己动手，从0-1的一个spa，并做了大量seo，设备适配，性能优化，配套开发的服务也包括后台管理系统，node服务以及sql数据库，当然个人还兼备产品设计，UI设计等工作。</p><p>入坑尝试hexo是由于看到hexo：</p><ol><li>主题丰富，且多端适配良好。</li><li>seo优化，网页性能👍🏻。</li><li>方便管理，迁移。</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>准备好基本环境：</p><ol><li>git</li><li>node</li></ol><p>直接全局安装hexo-cli</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>运行检查是否安装完成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h2 id="cmd快速辅助工具"><a href="#cmd快速辅助工具" class="headerlink" title="cmd快速辅助工具"></a>cmd快速辅助工具</h2><ul><li><div class="flink"> <div class="flink-list">          <div class="flink-list-item">            <a href="/posts/db0a31c8/" title="快速辅助工具" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="http://q2.qlogo.cn/headimg_dl?dst_uin=1400000222&spec=640" onerror='this.onerror=null;this.src="https://unpkg.com/plasx@1.0.3/img/bj.webp"' alt="快速辅助工具" />              </div>              <div class="flink-item-name">快速辅助工具</div>               <div class="flink-item-desc" title="cmd快速辅助工具">cmd快速辅助工具</div>            </a>          </div></div></div></li></ul><p>有效的快速开启服务关闭服务，避免每次都输入命令的繁琐</p><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>使用hero-cli初始化blog项目，我取名叫”luna”吧🌛。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init luna</span><br></pre></td></tr></table></figure><p>接着安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd luna</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>安装完成之后，我们可以运行看下效果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>打开<code>http://localhost:4000/</code>查看效果</p><p><img src="https://sls-cloudfunction-ap-guangzhou-code-1300044145.file.myqcloud.com/upload/image-20220703154230288.png" alt="image-20220703154230288"></p><p><strong>文章迁移</strong></p><p>把原先写过的markdown，copy到source/_posts。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r /Users/allen/Documents/blog /User/allen/Desktop/luna/source/_posts</span><br></pre></td></tr></table></figure><blockquote><p>这里我没找到如何快速批量配置front-matter的方式，只能手动一个一个改了</p></blockquote><h2 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h2><p>Yaml语言的配置文件，对网站进行详细的设置。</p><p><a href="https://hexo.io/docs/configuration.html">https://hexo.io/docs/configuration.html</a></p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>默认的主题有点丑，可以到官网找下喜欢的。</p><p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>我选了Butterfly<br><a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><p>按照提示安装配置即可。</p><h2 id="写个web服务器"><a href="#写个web服务器" class="headerlink" title="写个web服务器"></a>写个web服务器</h2><p>目前我们已经完成了hexo项目的初始化，但hexo仅是一个静态页面生成的框架，如果我们需要部署到机器上，那么还需要一个服务器。</p><p>express即可满足我所有需求。</p><p>安装express，在项目根目录下，创建一个<code>luna/www/index.js</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 静态资源 */</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`app listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>安装pm2，添加script。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;logs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pm2 logs&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pm2 start ./www/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;stop&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pm2 stop all&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其实快速在机器上更新代码还挺麻烦的，再写个脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;🚚 拉取最新代码...&quot;</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;🚗 更新npm包...&quot;</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;📦️ 打包前端代码...&quot;</span></span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;🌏︎ 启动www服务...&quot;</span></span><br><span class="line">npm run stop</span><br><span class="line">npm run start</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;🎉🎉🎉 部署成功!!!&quot;</span></span><br></pre></td></tr></table></figure><p>放在<code>luna/script/deploy.sh</code>，然后再加个script。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;logs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pm2 logs&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pm2 start ./www/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;stop&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pm2 stop all&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sh ./script/deploy.sh&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>测试一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure><p><img src="https://sls-cloudfunction-ap-guangzhou-code-1300044145.file.myqcloud.com/upload/image-20220721230920045.png" alt="image-20220721230920045"></p><p>看起来好像没什么问题🤔</p><h2 id="搭个图床"><a href="#搭个图床" class="headerlink" title="搭个图床"></a>搭个图床</h2><p>博客里图片资源那么多，你看我的1M的学生服务器怎么扛得住呢？图片资源都上CDN吧。</p><p>本身我也习惯本地用Typora写博，那么就推荐一下picGo做图床管理吧，mac体验满分。</p><p><img src="https://sls-cloudfunction-ap-guangzhou-code-1300044145.file.myqcloud.com/upload/image-20220721231448819.png" alt="image-20220721231448819"></p><p><a href="https://picgo.github.io/PicGo-Doc/">PicGo官网</a></p><p>支持的图床还蛮多的（我用COS），先配置好你的图床。<img src="https://sls-cloudfunction-ap-guangzhou-code-1300044145.file.myqcloud.com/upload/image-20220721231557705.png" alt="image-20220721231557705"></p><p>打开Typora偏好设置，配置PicGO自动上传。</p><p><img src="https://sls-cloudfunction-ap-guangzhou-code-1300044145.file.myqcloud.com/upload/image-20220721231756498.png" alt="image-20220721231756498"></p><p>试试在Typora里粘贴图片吧</p><h2 id="实现自动部署"><a href="#实现自动部署" class="headerlink" title="实现自动部署"></a>实现自动部署</h2><p>自动部署使用方式我写进了仓库的README.md了</p><p><a href="https://github.com/AHREAL/luna#%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2">自动部署</a></p><p>100行实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>)</span><br><span class="line">dotenv.<span class="title function_">config</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Buffer</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;buffer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> childrenProcess = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">80</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">HUB_SECRET</span> = process.<span class="property">env</span>.<span class="property">HUB_SECRET</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 执行命令 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">exec</span> = (<span class="params">bash</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`🔧 开始执行命令 <span class="subst">$&#123;bash&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    childrenProcess.<span class="title function_">exec</span>(bash, <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`🔧 命令出错 <span class="subst">$&#123;bash&#125;</span> exec error: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">        <span class="title function_">reject</span>()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`🔧 命令完成 <span class="subst">$&#123;bash&#125;</span> stdout: <span class="subst">$&#123;stdout&#125;</span> stderr: <span class="subst">$&#123;stderr&#125;</span>`</span>);</span><br><span class="line">      <span class="title function_">resolve</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 校验sig */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">validateHubSig</span> = (<span class="params">req</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">body</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> signature = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">`sha1=<span class="subst">$&#123;crypto.createHmac(<span class="string">&#x27;sha1&#x27;</span>, HUB_SECRET).update(<span class="built_in">JSON</span>.stringify(req.body)).digest(<span class="string">&#x27;hex&#x27;</span>)&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">const</span> _signature = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(req.<span class="property">headers</span>[<span class="string">&#x27;x-hub-signature&#x27;</span>])</span><br><span class="line">    <span class="keyword">if</span> (signature.<span class="property">length</span> !== _signature.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> crypto.<span class="title function_">timingSafeEqual</span>(signature, _signature)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;validateHubSigFail&#x27;</span>, error)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 静态资源 */</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">/** webhook - 自动刷新 */</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/refresh&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">validateHubSig</span>(req)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🏂 webhook自动刷新触发，正在执行...&#x27;</span>)</span><br><span class="line">    <span class="title function_">exec</span>(<span class="string">&#x27;git pull&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(exec.<span class="title function_">bind</span>(<span class="variable language_">this</span>, <span class="string">&#x27;npm install&#x27;</span>))</span><br><span class="line">      .<span class="title function_">then</span>(exec.<span class="title function_">bind</span>(<span class="variable language_">this</span>, <span class="string">&#x27;npm run build&#x27;</span>))</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🎉 自动刷新完成!&#x27;</span>)</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;❌ 自动刷新失败，请查看日志详情!&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">msg</span>:<span class="string">&#x27;webhook success&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;validate signature fail&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`app listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>剩下就是直接push，再也不用上机器了（当然有BUG还是要去的 😅）</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 基础教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
