{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/people.png","path":"people.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/people.ico","path":"people.ico","modified":0,"renderable":1},{"_id":"themes/butterfly/source/example/try.html","path":"example/try.html","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/gengxing.css","path":"css/gengxing.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/glb.css","path":"css/glb.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/link.css","path":"css/link.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/liuyanban.css","path":"css/liuyanban.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/mouse.css","path":"css/mouse.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/guanyu.css","path":"css/guanyu.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/mycss.css","path":"css/mycss.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/nav_menu.css","path":"css/nav_menu.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/progress_bar.css","path":"css/progress_bar.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/people.css","path":"css/people.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/notice.css","path":"css/notice.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/xiazai.css","path":"css/xiazai.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/20115853_380680b35f.jpeg","path":"img/20115853_380680b35f.jpeg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.webp","path":"img/404.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/alipay.webp","path":"img/alipay.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/JgNrST23690481619450556342.gif!cover","path":"img/JgNrST23690481619450556342.gif!cover","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bj.webp","path":"img/bj.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bt.webp","path":"img/bt.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/default_top_img.webp","path":"img/default_top_img.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/cover.png","path":"img/cover.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/dzbp.webp","path":"img/dzbp.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.webp","path":"img/favicon.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/hx.webp","path":"img/hx.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/lightning2.png","path":"img/lightning2.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/ljz.webp","path":"img/ljz.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/lightning1.png","path":"img/lightning1.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/logo.ico","path":"img/logo.ico","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/xka.webp","path":"img/xka.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/countup.js","path":"js/countup.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/categoryBar.js","path":"js/categoryBar.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/dmyx.js","path":"js/dmyx.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/hygl.js","path":"js/hygl.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/index.js","path":"js/index.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/ripples.js","path":"js/ripples.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/people.js","path":"js/people.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/nav_menu.js","path":"js/nav_menu.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/shangshengqipao.js","path":"js/shangshengqipao.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/sun_moon.js","path":"js/sun_moon.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/snowflake.js","path":"js/snowflake.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/watchWorker.js","path":"js/watchWorker.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/twikookstx.js","path":"js/twikookstx.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/xh1.js","path":"js/xh1.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/xh2.js","path":"js/xh2.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/xiazai.js","path":"js/xiazai.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/music.html","path":"music/music.html","modified":0,"renderable":1},{"_id":"themes/butterfly/source/xz/index.html","path":"xz/index.html","modified":0,"renderable":1},{"_id":"themes/butterfly/source/example/try/index.html","path":"example/try/index.html","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/css/bootstrap.min.css","path":"dmyx/css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/js/bootstrap.min.js","path":"dmyx/js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/css/try.css","path":"dmyx/css/try.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/css/love.css","path":"dmyx/css/love.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/images/bg-body.jpg","path":"dmyx/images/bg-body.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/images/cream.png","path":"dmyx/images/cream.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/images/shouji.png","path":"dmyx/images/shouji.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/fonts/glyphicons-halflings-regular.woff2","path":"dmyx/fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/images/device_ico.png","path":"dmyx/images/device_ico.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/1.png","path":"img/app/1.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/10.png","path":"img/app/10.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/12.png","path":"img/app/12.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/11.png","path":"img/app/11.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/13.png","path":"img/app/13.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/14.png","path":"img/app/14.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/15.png","path":"img/app/15.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/16.png","path":"img/app/16.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/17.png","path":"img/app/17.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/19.png","path":"img/app/19.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/18.png","path":"img/app/18.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/20.png","path":"img/app/20.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/2.png","path":"img/app/2.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/21.png","path":"img/app/21.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/23.png","path":"img/app/23.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/22.png","path":"img/app/22.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/25.png","path":"img/app/25.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/26.png","path":"img/app/26.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/27.png","path":"img/app/27.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/24.png","path":"img/app/24.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/3.png","path":"img/app/3.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/7.png","path":"img/app/7.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/5.png","path":"img/app/5.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/4.png","path":"img/app/4.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/6.png","path":"img/app/6.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/8.png","path":"img/app/8.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/9.png","path":"img/app/9.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/tz/1.webp","path":"img/tz/1.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/tz/3.webp","path":"img/tz/3.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/custom/swiper_init.js","path":"js/custom/swiper_init.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/tz/2.webp","path":"img/tz/2.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/wz/fishes.js","path":"js/wz/fishes.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/wz/siche.js","path":"js/wz/siche.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/css/lights.css","path":"music/css/lights.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/js/Config.js","path":"music/js/Config.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/js/Lights.js","path":"music/js/Lights.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/xz/css/login.css","path":"xz/css/login.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/js/Three.js","path":"music/js/Three.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/xz/js/jquery.params.js","path":"xz/js/jquery.params.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/xz/js/app.js","path":"xz/js/app.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/xz/js/particles.js","path":"xz/js/particles.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/xz/img/login_background.png","path":"xz/img/login_background.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/cherrytree.png","path":"music/images/avatars/cherrytree.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/blue.png","path":"music/images/avatars/blue.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/js/one/one.min.js","path":"dmyx/js/one/one.min.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/ellie.jpeg","path":"music/images/avatars/ellie.jpeg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/green.png","path":"music/images/avatars/green.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/polydor.png","path":"music/images/avatars/polydor.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/interscope.png","path":"music/images/avatars/interscope.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/magenta.png","path":"music/images/avatars/magenta.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/orange.png","path":"music/images/avatars/orange.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/red.png","path":"music/images/avatars/red.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/envmap/envMapLeftRight.png","path":"music/images/envmap/envMapLeftRight.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/data/spectrumData.png","path":"music/images/data/spectrumData.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/envmap/envMapBottom.png","path":"music/images/envmap/envMapBottom.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/envmap/envMapTop.png","path":"music/images/envmap/envMapTop.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/envmap/envMapFrontBack.png","path":"music/images/envmap/envMapFrontBack.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/bengalShadow.png","path":"music/images/experience/bengalShadow.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/bengalSeq.png","path":"music/images/experience/bengalSeq.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/glow.png","path":"music/images/experience/glow.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/circle.png","path":"music/images/experience/circle.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/dot.png","path":"music/images/experience/dot.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/particle.png","path":"music/images/experience/particle.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/plasmaBlue.png","path":"music/images/experience/plasmaBlue.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/plasmaCyan.png","path":"music/images/experience/plasmaCyan.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/plasmaGreen.png","path":"music/images/experience/plasmaGreen.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/plasmaMagenta.png","path":"music/images/experience/plasmaMagenta.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/skybox.png","path":"music/images/experience/skybox.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/plasmaRed.png","path":"music/images/experience/plasmaRed.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/plasmaWhite.png","path":"music/images/experience/plasmaWhite.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/plasmaYellow.png","path":"music/images/experience/plasmaYellow.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/spot.png","path":"music/images/experience/spot.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/fonts/standard_07_55.png","path":"music/images/fonts/standard_07_55.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/spotLine.png","path":"music/images/experience/spotLine.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/fonts/standard_07_55.txt","path":"music/images/fonts/standard_07_55.txt","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/spotLineAlpha.png","path":"music/images/experience/spotLineAlpha.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/terrain66.png","path":"music/images/experience/terrain66.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/home/loadingButton.png","path":"music/images/home/loadingButton.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/home/bokeh.png","path":"music/images/home/bokeh.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/home/logo.png","path":"music/images/home/logo.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/home/replayButton.png","path":"music/images/home/replayButton.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/home/tweetButton.png","path":"music/images/home/tweetButton.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/home/playButton.png","path":"music/images/home/playButton.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/js/codemirror/lib/codemirror_all.min.css","path":"dmyx/js/codemirror/lib/codemirror_all.min.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar0.png","path":"music/images/avatars/ellie/ellieAvatar0.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/js/codemirror/lib/codemirror_all.min.js","path":"dmyx/js/codemirror/lib/codemirror_all.min.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar1.png","path":"music/images/avatars/ellie/ellieAvatar1.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar2.png","path":"music/images/avatars/ellie/ellieAvatar2.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar3.png","path":"music/images/avatars/ellie/ellieAvatar3.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar4.png","path":"music/images/avatars/ellie/ellieAvatar4.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/example/try/code/1/bd/rono.html","path":"example/try/code/1/bd/rono.html","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/js/codemirror/addon/hint/jsAll.json","path":"dmyx/js/codemirror/addon/hint/jsAll.json","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/reward.yml","hash":"211611d99643b8040c86b0f2934fee87d03228ed","modified":1685820643162},{"_id":"source/_data/notice.yml","hash":"492caac6124da0ac6595b6528f552f6b93adbb2a","modified":1685820643161},{"_id":"source/_data/creativity.yml","hash":"a57df6ee84151f21382e2190dc43723491bf92c5","modified":1685820643161},{"_id":"source/_data/indexwz.yml","hash":"fb560ffe9b41b2304589565bfaa4107061faec9d","modified":1685820643161},{"_id":"source/about/index.md","hash":"1e86be157bd057dc84635cf4c04483556079e10d","modified":1685820643166},{"_id":"source/categories/index.md","hash":"17ebb2d1c13eace1ee7fdda9f9d7885130561971","modified":1685820643166},{"_id":"source/_data/link.yml","hash":"78406b2a0604ea93330f89de3166af7b8127f278","modified":1685820643161},{"_id":"source/_data/widget.yml","hash":"9448a9acacc100272581154ce24fe9c72263bc6d","modified":1685820643162},{"_id":"source/_data/video.yml","hash":"156c07478c2f7ca591ac5a475c0c36fbf758f8d3","modified":1685820643162},{"_id":"source/_data/shuanbian.yml","hash":"4686f2d793fec02d9324cfc285c45ebb8c7f588e","modified":1686028883408},{"_id":"source/link/index.md","hash":"d18945e26531ac9a9700e672982ce3bf67a3af67","modified":1685820643167},{"_id":"source/music/index.md","hash":"87f4d1598072e632c41c764c7e062128ff2e2b12","modified":1685820643167},{"_id":"source/messageboard/index.md","hash":"5b37634e649fd2eb432270826b31b330438fe8c1","modified":1685820643167},{"_id":"source/notice/index.md","hash":"89b993998a36d2b1d59e0ea75a3ebe6dfbe188ad","modified":1685820643168},{"_id":"source/tags/index.md","hash":"92bce69df344161705b609ecf53458c6b210ee67","modified":1685820643169},{"_id":"source/myself/index.md","hash":"fe5485d63260c37b5d0e0e239c39cc1b6b339bc3","modified":1685820643168},{"_id":"source/timeline/index.md","hash":"82277d24faa33cefc47e6ca657eb25b431b9a33a","modified":1685820643169},{"_id":"source/talking/index.md","hash":"e16ccd4afb18d6d9f9e37f713c3a819404b5d301","modified":1685820643169},{"_id":"source/video/index.md","hash":"d6d7baf3dc1da2da3e8c8f8fecdc87891bf8c5e7","modified":1685820643170},{"_id":"source/xiance/index.md","hash":"6ceca422daca03a0874b1adff5ab880a139eea99","modified":1685820643170},{"_id":"source/selfjs/tw_cn.js","hash":"c9ad65ee76b33fcb3b9e0c49671ce0824789df3b","modified":1685820643169},{"_id":"source/tuku/index.md","hash":"7226b6f9ff1d15463988a193f7bf51e4410f0e55","modified":1685820643170},{"_id":"source/selfjs/localsearch.js","hash":"3c4b6dbab1e5a69092594216695d9bdb954b0222","modified":1685820643168},{"_id":"source/_posts/c/vela运行时.md","hash":"1da770f6cad920d82451d1d9bec734ed0136c88b","modified":1685820643163},{"_id":"source/_posts/c/quickjs调试器.md","hash":"47b63e7d4c180f49ae3e538587059c537fd07a0e","modified":1685820643163},{"_id":"source/xiance/ohmygirl/index.md","hash":"9d3b7ddf48de00f2788f027cc8a1743e4d50e021","modified":1685820643171},{"_id":"source/_posts/js/HTML.md","hash":"358104a6160cff66cd988dac1dcf0f9c9aee3a40","modified":1686206624664},{"_id":"source/_posts/c/vela快应用框架.md","hash":"d31f86ab34a01c3787aecfe36f0d57c9b7f4a091","modified":1686030389483},{"_id":"source/_posts/js/react复习.md","hash":"7469f2ad1034a1c4a814a53c2a0afbf3fddc24c2","modified":1686206426243},{"_id":"source/xiance/marvel/index.md","hash":"d78f7c7f93731d38386aac476ce6a48d73b2064f","modified":1685820643171},{"_id":"source/_posts/freedom/励志文字.md","hash":"eb7260ae55d7479c138607704ed76b454a57fb1a","modified":1686028658514},{"_id":"source/_posts/js/vue复习.md","hash":"0dd7d6d45de12e64352afe240d3fe15c495e25f4","modified":1686206315251},{"_id":"source/_posts/js/前端工程化.md","hash":"103413e64fc7fda7f33cf9f94b73d09e0945dd09","modified":1686206501366},{"_id":"source/_posts/js/前端安全问题.md","hash":"4e41ea61d9d6edd944e03d45e9e5caf3e8177697","modified":1686206487793},{"_id":"source/_posts/js/网络.md","hash":"d9846600bb739e86fab3b85351b4a32b9d68c912","modified":1686206576832},{"_id":"source/_posts/js/算法练习.md","hash":"fa0c513d200c6101e1fcad67190ffd103c3f6f4c","modified":1686206532491},{"_id":"source/_posts/js/算法总结.md","hash":"1a3438d734bb02ad3a071bbd670f5efb3818f7bc","modified":1686206555171},{"_id":"source/_posts/js/JS复习.md","hash":"c12fab0725d16c234f3cdac606b038346ed79573","modified":1686367880916},{"_id":"source/_posts/js/js面试手写.md","hash":"d123a36b64e1f62a21e15e11a4db7c170d0fdb39","modified":1686206464947},{"_id":"source/_posts/js/css复习.md","hash":"ba0f50ef54d4d3e562e5e4107200a6f34132f99a","modified":1686213304571},{"_id":"themes/butterfly/source/css/gengxing.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1685820643230},{"_id":"themes/butterfly/source/css/notice.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1685820643232},{"_id":"themes/butterfly/package.json","hash":"766181f2d556741a7285fea3b170a9a0c67dbc0c","modified":1685820643204},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1685820643175},{"_id":"themes/butterfly/plugins.yml","hash":"8e3b5e44ff0e7e9c5779234bf21e1e70aeec5ae8","modified":1685820643205},{"_id":"themes/butterfly/_config.yml","hash":"86b2994a1772cbfd36a955d62940168a7edf47c1","modified":1686214358250},{"_id":"themes/butterfly/languages/default.yml","hash":"335731ef259a3cec2499a2d5b050025ff4bdc608","modified":1685820643175},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"4adf079fb0170e3a8de6ddbb0392d6d1120030c4","modified":1685820643175},{"_id":"themes/butterfly/layout/category.pug","hash":"599676899fb3198ec1b1d6b933167fee97a00c48","modified":1685820643176},{"_id":"themes/butterfly/layout/post.pug","hash":"5db3efe98cd6a3ff8288ecec7b319c247b5032c4","modified":1685820643204},{"_id":"themes/butterfly/layout/index.pug","hash":"261e49a7d002fc1c06dcbc4fbe8c0e9d39d3f7a5","modified":1685820643204},{"_id":"themes/butterfly/layout/page.pug","hash":"eb240117e27984c70f0a036d3f1ca22a1f445937","modified":1685820643204},{"_id":"themes/butterfly/layout/tag.pug","hash":"970db5f198820f1aae20ed906cd63631c3d95f84","modified":1685820643204},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml.bak","hash":"e1043b8f149371d5a4ab0f1306eabc2988bed071","modified":1685820643172},{"_id":"themes/butterfly/source/people.ico","hash":"791c16e638c9035943d524e96b7b2d996c39e711","modified":1685820643285},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1685820643176},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"26d4cff28a99b63e89a2390a635b1af8f2cc00bb","modified":1685820643172},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1685820643173},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1685820643173},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1685820643172},{"_id":"themes/butterfly/layout/includes/categoryBar.pug","hash":"a0743165d4a8d7d2ac5c90207f0e981a05f093b8","modified":1685820643177},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"553f6e5e242506775ea02ebe4ebf5c99bcd9d439","modified":1685820643176},{"_id":"themes/butterfly/layout/includes/appxiazai.pug","hash":"c9eb428a8dd1732dbdd375b9801eed434ed91e27","modified":1685820643177},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1685820643173},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1685820643174},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"b1bdc6c7dddf2d2dd1291bc95c9dbb43a81515df","modified":1685820643182},{"_id":"themes/butterfly/layout/includes/footer2.pug","hash":"671d19893a30e91478c7f4dad851f215251d380d","modified":1685820643178},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"3b9652a3c6e333b0ef8dadb742effd6c2b4c258d","modified":1685820643178},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1685820643178},{"_id":"themes/butterfly/layout/includes/index1.pug","hash":"64bf6c62c43c395d294380f6ed7c8627841e7227","modified":1685820643182},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1685820643185},{"_id":"themes/butterfly/layout/includes/sysliderbar.pug","hash":"42e0bc9f078517cd466f6682ac3cd9e4996165e7","modified":1685820643186},{"_id":"themes/butterfly/layout/includes/tagBar.pug","hash":"d83af56abf4f3d1a89e288f8f7fb6f53ed51e484","modified":1685820643187},{"_id":"themes/butterfly/layout/includes/recommend.pug","hash":"e1f87c4bf491541c0f7a4397ff53a169375ccc66","modified":1685820643186},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"4f41fc46410e1e3018ff87e1d1a5c28be7258119","modified":1685820643186},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"482981bd6ba8e6744ade27436d2408ec2614bbf5","modified":1685820643186},{"_id":"themes/butterfly/source/example/try.html","hash":"1ed815109b396260ea3aa084bcf3b5bf80b79802","modified":1685820643240},{"_id":"themes/butterfly/source/css/mouse.css","hash":"fa490f71912e6bf7d9f8275279c52df6d391a745","modified":1685820643231},{"_id":"themes/butterfly/source/css/glb.css","hash":"de7665c0c4d536816e5b272feb9891ff05a894d9","modified":1685820643230},{"_id":"themes/butterfly/source/css/link.css","hash":"511b5c4b8f6f53e6f84b944057bf9a5ee1fa4ddf","modified":1685820643231},{"_id":"themes/butterfly/source/css/liuyanban.css","hash":"729385c9a4cd1c3e370f1607a78c6158e9444df2","modified":1685820643231},{"_id":"themes/butterfly/source/css/index.styl","hash":"132a6ea7fb7e45c3532d5ea88f2b5f3555f26a87","modified":1685820643231},{"_id":"themes/butterfly/source/css/guanyu.css","hash":"51303052027a65ee10b27dd590489f3b96410902","modified":1685820643231},{"_id":"themes/butterfly/source/css/progress_bar.css","hash":"5b2463e4034ff351d12f3be5ffbb50b5c149bc38","modified":1685820643232},{"_id":"themes/butterfly/source/css/nav_menu.css","hash":"4def3d3658b69ee41143d851750881c3ea792211","modified":1685820643232},{"_id":"themes/butterfly/source/css/mycss.css","hash":"58f5232e693c7e6c35c8313bbc240dbe3ac44ae5","modified":1685820643232},{"_id":"themes/butterfly/source/css/people.css","hash":"8f8a9272d512f871d2773031af1d7a271acabb0b","modified":1685820643232},{"_id":"themes/butterfly/source/css/xiazai.css","hash":"8e89efdbf18ee9605906ca0de586135a88d715ca","modified":1685820643233},{"_id":"themes/butterfly/source/css/var.styl","hash":"f68dea4fd49783bbc6069ac1d33bf05ea334a330","modified":1685820643233},{"_id":"themes/butterfly/source/img/alipay.webp","hash":"b7310124dcd14f351d224f17863dfbab6a0f701c","modified":1685820643245},{"_id":"themes/butterfly/source/img/404.webp","hash":"bd0dc3ec1a22a1a72ee179d6b42434b1d763ec69","modified":1685820643243},{"_id":"themes/butterfly/source/img/default_top_img.webp","hash":"4ab272a986bb628ad6061e82322665a1eeabb438","modified":1685820643254},{"_id":"themes/butterfly/source/img/cover.png","hash":"f9edf7939e4bb129392396a83aa637b36e09499e","modified":1685820643254},{"_id":"themes/butterfly/source/img/dzbp.webp","hash":"48e680ccfe156c25b9cf6c0a63cd8e135dc2d633","modified":1685820643255},{"_id":"themes/butterfly/source/img/favicon.webp","hash":"60412802902f538637b45db3bf64afea208a5fe8","modified":1685820643255},{"_id":"themes/butterfly/source/img/hx.webp","hash":"a5574851e056f58c8330d4ba6d6c6348112ba3ef","modified":1685820643255},{"_id":"themes/butterfly/source/img/ljz.webp","hash":"e63976f72c82e9813c4c138d53a859a7d0251a6d","modified":1685820643256},{"_id":"themes/butterfly/source/js/copy.js","hash":"0de907dc2859af4a0cadc9877fcfe4f2d4f31de7","modified":1685820643259},{"_id":"themes/butterfly/source/img/lightning1.png","hash":"8dbaa433850eee48afe82e5bf178991e181ac981","modified":1685820643256},{"_id":"themes/butterfly/source/img/xka.webp","hash":"607e06c04e255207f26f896de772ace855e21357","modified":1685820643258},{"_id":"themes/butterfly/source/img/logo.ico","hash":"791c16e638c9035943d524e96b7b2d996c39e711","modified":1685820643257},{"_id":"themes/butterfly/source/img/lightning2.png","hash":"83f02621657fa555369c680d154255dabbf712ff","modified":1685820643256},{"_id":"themes/butterfly/source/js/countup.js","hash":"ddcbf0b3022b59b1f5c188a994b8d049b1230f74","modified":1685820643259},{"_id":"themes/butterfly/source/js/categoryBar.js","hash":"7ec6741664cbc871f359e37393b02a9a25f49c23","modified":1685820643259},{"_id":"themes/butterfly/source/js/hygl.js","hash":"b67f69e8f090d6c807fe3a33bccab70bf0395047","modified":1685820643260},{"_id":"themes/butterfly/source/js/index.js","hash":"7c814534bbbc6f67d08f8222d99ec19ddda66752","modified":1685820643260},{"_id":"themes/butterfly/source/js/dmyx.js","hash":"54b656d608d2be326d424a7e6d5f15a927ceaf3b","modified":1685820643260},{"_id":"themes/butterfly/source/js/ripples.js","hash":"b735e4ea7e5991916d947e43c3d017f5c5d2d64a","modified":1685820643261},{"_id":"themes/butterfly/source/js/people.js","hash":"f150580160f413a6a4d0774f6c183cb13dc37108","modified":1685820643261},{"_id":"themes/butterfly/source/js/sun_moon.js","hash":"dc626b19d2905c154a364e9e573ebe2d3e0ed1f1","modified":1685820643263},{"_id":"themes/butterfly/source/js/main.js","hash":"6e9d9e14a0dbeafce17cfecd1743b9a02f2116cd","modified":1685820643260},{"_id":"themes/butterfly/source/js/nav_menu.js","hash":"ff623c493b65ae366d989160c0a364769c67b772","modified":1686215386070},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"1ae9561ea27fd9f929a9a67f1b1025303ca4370f","modified":1685820643263},{"_id":"themes/butterfly/source/js/snowflake.js","hash":"bf9c62d49e9b606f446c4bac858f40d94a73fad0","modified":1685820643262},{"_id":"themes/butterfly/source/js/watchWorker.js","hash":"0c4bd96c87a5d267fedc42752fe0a7deb9ed3c2d","modified":1685820643264},{"_id":"themes/butterfly/source/js/twikookstx.js","hash":"33950ec696f64c3b75624ec8ff28cb94aa624061","modified":1685820643263},{"_id":"themes/butterfly/source/js/xh2.js","hash":"2ad21eee60dda6739049fd2f1a401d2d20d90b9a","modified":1685820643265},{"_id":"themes/butterfly/source/js/xh1.js","hash":"7ff3968507312f79b75c2e456b6d65357dd5254a","modified":1685820643264},{"_id":"themes/butterfly/source/js/utils.js","hash":"fdb9e5b38f076953a2431b8f682388b030694b55","modified":1685820643263},{"_id":"themes/butterfly/source/js/xiazai.js","hash":"f331ed29ec68f903f661a6685598fddc66b5a9ab","modified":1685820643265},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"8e6f0677c190d44c64222054e2e7c065fc6c4802","modified":1685820643205},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"176332aa4d01728d0bd084e9b02c60167dc307dd","modified":1685820643206},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1685820643205},{"_id":"themes/butterfly/scripts/events/init.js","hash":"b3e05e3440b078f57391c113d6b0c8ecff112720","modified":1685820643206},{"_id":"themes/butterfly/source/music/music.html","hash":"b5dd74b5bca055f5c2b12ffbdcf0c4dce22a5a13","modified":1685820643285},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1685820643207},{"_id":"themes/butterfly/source/xz/index.html","hash":"b9413aa1992875bfb581c6c79b201120ad53ff91","modified":1685820643288},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"cddd14fd7d666f02473352c6f8677d2cacd76e64","modified":1685820643206},{"_id":"themes/butterfly/scripts/tag/bubble.js","hash":"b47330f4bc251e828f6f519d84d761c4e3d150d2","modified":1685820643210},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1685820643206},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1685820643210},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"6c3b7d0874fa499800a4fd49894c481b05ec750c","modified":1685820643207},{"_id":"themes/butterfly/scripts/tag/checkbox.js","hash":"636cef0f4500a14b123c6b21187fb67989472cbd","modified":1685820643210},{"_id":"themes/butterfly/scripts/tag/card.js","hash":"a952a7c0fc67893f05c6d5bbabd6f37adc69987f","modified":1685820643210},{"_id":"themes/butterfly/scripts/tag/dmyx.js","hash":"910d38bea3852a11cd00dc1c44022c1590b25d4a","modified":1685820643211},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"6d4cd2393945a9316339351cab588265f5c18d73","modified":1685820643211},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1685820643212},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1685820643212},{"_id":"themes/butterfly/scripts/tag/inline-labels.js","hash":"eaaedc3d65384e0beb4306534ef4ed202b46da18","modified":1685820643212},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1685820643211},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1685820643213},{"_id":"themes/butterfly/scripts/tag/link.js","hash":"1137af3a6e6385588abff558c7171c5d9e9b9dc2","modified":1685820643212},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1685820643212},{"_id":"themes/butterfly/scripts/tag/mima.js","hash":"6107ef7e40e63663ef1e979dc59e7791ba07b6c4","modified":1685820643213},{"_id":"themes/butterfly/scripts/tag/notation.js","hash":"e7ff8db2f01e052c92ab6f606fa71f5dc66631e2","modified":1685820643213},{"_id":"themes/butterfly/scripts/tag/progress.js","hash":"a5147da2079b8ad00e2e73ba9f5c809decefcba7","modified":1685820643214},{"_id":"themes/butterfly/scripts/tag/msgbox.js","hash":"e485c768bba09025be7b7ecbdfd74a4fa5ac772f","modified":1685820643213},{"_id":"themes/butterfly/scripts/tag/poem.js","hash":"dc32c3cec0247b63fd848cbbed69a4bcf3e47525","modified":1685820643213},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1685820643214},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1685820643213},{"_id":"themes/butterfly/scripts/tag/folding.js","hash":"93f56903a307b4ce54963b40050fbb9aeb5baf47","modified":1685820643211},{"_id":"themes/butterfly/scripts/tag/xiazai.js","hash":"b7f30fd35439ef40711790056d759b1f62d54667","modified":1685820643215},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1685820643214},{"_id":"themes/butterfly/scripts/tag/wblj.js","hash":"564443781b21a09236093eae84465439d880a633","modified":1685820643214},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1685820643207},{"_id":"themes/butterfly/scripts/helpers/cybericon.js","hash":"50366caf8caf6e88b6c803dc982ceaf45e17afb9","modified":1685820643208},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1685820643207},{"_id":"themes/butterfly/scripts/tag/video.js","hash":"fa2c074c4c51af11451934140ed8173149a9cadf","modified":1685820643214},{"_id":"themes/butterfly/scripts/helpers/get_arrays.js","hash":"e51c2d054017ff92425a9691eea0cf0da0cf3017","modified":1685820643208},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c07efb04120914363b8de2c276ac5783b82db776","modified":1685820643209},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"c445140fa16f19bf5fb617fa735504e7799d4d42","modified":1685820643208},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"db4f5971c27f49a4cb47d34729f4ddf9919d392b","modified":1685820643208},{"_id":"themes/butterfly/scripts/helpers/random.js","hash":"5ece9d3529de2814277eb3b6671546539c189ebd","modified":1685820643209},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"83bfb16ab8d440be04e1b1f889f6affa7ad65a67","modified":1685820643209},{"_id":"themes/butterfly/scripts/helpers/swiperbar.js","hash":"c71a85b720f6998b8ee0f1ff015af49ab43953d7","modified":1685820643210},{"_id":"themes/butterfly/scripts/helpers/suijiwenzhang.js","hash":"816182853ea9d2b390fa4d2fe8288d1fef74bb55","modified":1685820643209},{"_id":"themes/butterfly/layout/includes/custom/businesscard.pug","hash":"5427336b4c8e74322ad603f622ffe1ad1c56b4d8","modified":1685820643177},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"bee7e29995ebe28ff8518646ef162201b5efa9d9","modified":1685820643179},{"_id":"themes/butterfly/layout/includes/custom/cyber_swiperBar.pug","hash":"d94982fc8f2850265bb0e9f72c2ee2be2b9adf24","modified":1685820643178},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1685820643180},{"_id":"themes/butterfly/layout/includes/custom/sun_moon.pug","hash":"8924013bd2e1ae1bdfb33c4730a69a49107ebc39","modified":1685820643178},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c1e45d4d0bd905ddcd2282de4fe89be92e67847d","modified":1685820643179},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1685820643180},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1685820643181},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"b69f54423e1d7db78b0e4a5ff726244401a6546b","modified":1685820643179},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fc3e67e5ae4774d9e89964ba96beed28f34ee8f0","modified":1685820643180},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1685820643180},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1685820643182},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"39847b8a1f0fad7889954a4ac936b7681949f16c","modified":1685820643183},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"c1105cd32a2fa140cae74f9192061b1c3cbc432a","modified":1685820643181},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"1031eb2011edb743b14fef9ff78a99cf1e323412","modified":1685820643181},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1685820643180},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"e3464088f5417fc8ca95b29aff459ccb972a7d93","modified":1685820643182},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"41550d6da2e85de68ab9647e4fd32e457e05fae3","modified":1685820643183},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"bf7c75bd97de5801ee0c102627f970c74753bcae","modified":1685820643183},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"81362a8c82029119d02b33f0f7bed249950040f0","modified":1685820643183},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"5f941e4112d15cdd30e08ae7e67eb7751f57a2fa","modified":1685820643183},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1685820643181},{"_id":"themes/butterfly/layout/includes/page/about.pug","hash":"22d7f8c0274ebe61a6edfebd36ef21ca66de756b","modified":1685820643184},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1685820643184},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"daecc11491df2a353882111354d7275b4f631cf9","modified":1685820643186},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"0f62aea3920621ce9cd87a496fde3828d5fcfe37","modified":1685820643184},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1685820643187},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1685820643185},{"_id":"themes/butterfly/layout/includes/page/video.pug","hash":"6bade52d2fbb03bf83e18a0bf9aeb962b921e004","modified":1685820643185},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1685820643184},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"8f43fdeaf8cff4a35bab74b48c963786ca015620","modified":1685820643185},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1685820643195},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"5c6a88642ceb753d72a90e7c6691d944c86ba3a8","modified":1685820643198},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d561d36229692e2c8a9ee45a7c24c0c2b3599170","modified":1685820643200},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1685820643198},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1685820643198},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1685820643201},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1685820643201},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1685820643202},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1685820643201},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1685820643202},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1685820643202},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"06d757b0b4b7cdbc45e697923369b2e25e386c0a","modified":1685820643201},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1685820643203},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1685820643203},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1685820643203},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"5e0e9e9b2cd3c256d52423e2278e790aa387a53a","modified":1685820643203},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1685820643202},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1685820643202},{"_id":"themes/butterfly/source/example/try/index.html","hash":"d778e2c23c6dd2f89fb04290e04ca41c29c61dfa","modified":1685820643241},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"26381297177114f4c126974f3400c186f548d112","modified":1685820643215},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1685820643217},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"57ea5014139b2ec7c130887c6d6290c1235a648f","modified":1685820643215},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1685820643216},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"9d264c7a1f2267d0d4be621bd7fe4ecccaab19d6","modified":1685820643218},{"_id":"themes/butterfly/source/css/_layout/cyber_swiper_bar.styl","hash":"2ecc00f730281241c548630b21ad7dcacd47d176","modified":1685820643219},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"e931ef81754a7b9d999fa23d134c620e68e75491","modified":1685820643219},{"_id":"themes/butterfly/source/css/_layout/businesscard.styl","hash":"9cfa4b5a7d4b7ed6725fba20043a5f59bb9d6f30","modified":1685820643218},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1685820643218},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"79034c210d8e074dc5da604c9afd1fb07ac1e311","modified":1685820643220},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1685820643220},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"bb51f99085d7f8fe4168169be27adabc0e0217f0","modified":1685820643219},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"eec12861206005856f9092c003842bd313a7f54e","modified":1685820643221},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"b0ba6f72848bc711bcf534c56b04ae14ab21b320","modified":1685820643221},{"_id":"themes/butterfly/source/css/_layout/notice.styl","hash":"5af85ef71a0adaa1ee089595c295fe619332045d","modified":1685820643220},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"1c1c585ba99cb4004956b5e98fc044260b456f99","modified":1685820643221},{"_id":"themes/butterfly/source/css/_layout/sun_moon.styl","hash":"6d7b2f48e04dca561eaec6d8f5b02140106d0377","modified":1685820643222},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1685820643222},{"_id":"themes/butterfly/source/css/_layout/web-bg.styl","hash":"f1c666a5e4b4151403e75a7ac53315c686013051","modified":1685820643222},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1685820643221},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"d72218cb5a6bfe048ae1c92009bd815a08a53d3a","modified":1685820643223},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"1d689531b349a7b136af1be36783253bf9da8952","modified":1685820643222},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1685820643224},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1685820643223},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"5a671599d86612d6405070d29266709aec331602","modified":1685820643224},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"6d3209cc21bfad732f78ab4b6d4a38f1155a829b","modified":1685820643224},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"e298708d226bc7fe01ba2d2a881a528e5d7d2f91","modified":1685820643224},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1685820643219},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1685820643224},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"cced94e70b4b90130cfa215582be2adbf883efba","modified":1685820643225},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"45792c13c7c439d412b7dc597d74d24f3b598406","modified":1685820643225},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"d1398399eb7f1cc004fbcefa18f56188cc8fec8c","modified":1685820643225},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1685820643226},{"_id":"themes/butterfly/source/css/_tags/bubble.styl","hash":"21f5a6b3d78fd49ff3b459c91df0b4b162c18902","modified":1685820643226},{"_id":"themes/butterfly/source/css/_tags/card.styl","hash":"0aabe1b5117e8a86b6d8860ec0d0b46a7b1d9b83","modified":1685820643226},{"_id":"themes/butterfly/source/css/_tags/checkbox.styl","hash":"8a6988eed6b62fe3f141984ea6158c98415cf9bf","modified":1685820643226},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1685820643227},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"84c42716e833d2d1dd47195ea996803ffa0e58ec","modified":1685820643227},{"_id":"themes/butterfly/source/css/_tags/folding.styl","hash":"f749e0fc2b5e9ee0db319f21e2f6b311da36c16b","modified":1685820643226},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1685820643227},{"_id":"themes/butterfly/source/css/_tags/msgbox.styl","hash":"9a9189581ef2df9f41fad44b6a115b814ee90ae0","modified":1685820643228},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1685820643227},{"_id":"themes/butterfly/source/css/_tags/inline-labels.styl","hash":"c7d6be0b6435b346a383fd9cac4cc1a43db7cb8a","modified":1685820643227},{"_id":"themes/butterfly/source/css/_tags/poem.styl","hash":"b35c7ac2a751090a51b35acd44f958f7555c4683","modified":1685820643229},{"_id":"themes/butterfly/source/css/_tags/link.styl","hash":"54c548a6e69ed3e36e31fb0cb81b1016a4c5604f","modified":1685820643228},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1685820643228},{"_id":"themes/butterfly/source/css/_tags/notation.styl","hash":"a546dc07fdaca66dfb8ee216fac257aefbfc79c6","modified":1685820643228},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"0b68d83ac5717af91112e9cb6e293bf4baee5def","modified":1685820643223},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1685820643229},{"_id":"themes/butterfly/source/css/_tags/progress.styl","hash":"96be22ff1c26bbe4c8d7f397e0d2e4bee9ce69f2","modified":1685820643229},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"1fed25162d7204480e9bcf476b3246e1717107ca","modified":1685820643223},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1685820643229},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1685820643228},{"_id":"themes/butterfly/source/dmyx/css/bootstrap.min.css","hash":"f64e254caa7199fd8b52935eafe2772ec2c873b4","modified":1685820643233},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1685820643230},{"_id":"themes/butterfly/source/dmyx/css/try.css","hash":"b8932ca54eef5212eb6e969364fe4deefca26c74","modified":1685820643234},{"_id":"themes/butterfly/source/dmyx/images/bg-body.jpg","hash":"a12bdff40ec6772a6b1b4a4b2af95324bf0f7c4a","modified":1685820643234},{"_id":"themes/butterfly/source/dmyx/css/love.css","hash":"c0d73e8bbc21aed4b3bd2cfbfffa4c85578e632a","modified":1685820643234},{"_id":"themes/butterfly/source/dmyx/images/cream.png","hash":"eef38c387db75e461f07f1c3578942d8907e4f5a","modified":1685820643235},{"_id":"themes/butterfly/source/dmyx/fonts/glyphicons-halflings-regular.woff2","hash":"1ac0ad2111e7a33efccf7c61677ed52c81580845","modified":1685820643234},{"_id":"themes/butterfly/source/img/app/1.png","hash":"384551ecc5bd11f4b780f0ab785788e874e1b9a9","modified":1685820643245},{"_id":"themes/butterfly/source/dmyx/js/bootstrap.min.js","hash":"c5c481ca5a263031d938f6c12abd2fe5fb4b6a83","modified":1685820643236},{"_id":"themes/butterfly/source/dmyx/images/device_ico.png","hash":"7ffe5a758cd5437a5b65d0c0331158d637573bf2","modified":1685820643235},{"_id":"themes/butterfly/source/img/app/12.png","hash":"6640ac8a1812fc2dd42830b8a9cdac9ec8ec48a2","modified":1685820643246},{"_id":"themes/butterfly/source/img/app/13.png","hash":"4cc90d31f9d6b0f3b515d2722dc4d024920ec9f2","modified":1685820643246},{"_id":"themes/butterfly/source/img/app/14.png","hash":"362eb15aa006f3ee1276e882fb54623e207b0b7f","modified":1685820643246},{"_id":"themes/butterfly/source/img/app/10.png","hash":"47c88b91ba0894084e550b0253c5feffacf1a453","modified":1685820643245},{"_id":"themes/butterfly/source/img/app/17.png","hash":"2d39f73536f0b2f13e855547e9fb2212203029b7","modified":1685820643247},{"_id":"themes/butterfly/source/img/app/16.png","hash":"a7815d07dabf5bfc7b98fdd8c1052f9d76bbca10","modified":1685820643247},{"_id":"themes/butterfly/source/img/app/11.png","hash":"355d9b84a9423a2e8f58c46d6b551a445e683e30","modified":1685820643245},{"_id":"themes/butterfly/source/img/app/15.png","hash":"77a4f4abd81f6747ec0b8941a7e11885a613355f","modified":1685820643246},{"_id":"themes/butterfly/source/img/app/19.png","hash":"38397dc1b44748b5e4c53e9cbab024a851db5065","modified":1685820643247},{"_id":"themes/butterfly/source/img/app/18.png","hash":"0d140ba61db9706879c4dfcfd64ce03988974a61","modified":1685820643247},{"_id":"themes/butterfly/source/img/app/23.png","hash":"b6aa5a5142fb286120442e00d9e383b872a6dca3","modified":1685820643248},{"_id":"themes/butterfly/source/img/app/22.png","hash":"9f2c5d27277fa548979272283c24678d94b07d6c","modified":1685820643248},{"_id":"themes/butterfly/source/img/app/2.png","hash":"2a0b3928246949624a9b3a54512fd9e53aae7d05","modified":1685820643248},{"_id":"themes/butterfly/source/img/app/26.png","hash":"240a3ec16dbaa1bec9f9a2ee0e9f4760dba004bb","modified":1685820643249},{"_id":"themes/butterfly/source/img/app/20.png","hash":"c4523336533bb6f6ac07794f8c3c45f0a42653b6","modified":1685820643248},{"_id":"themes/butterfly/source/img/app/27.png","hash":"d0247de008905f827a5ba1c6a38fca84446b8500","modified":1685820643249},{"_id":"themes/butterfly/source/img/app/24.png","hash":"8d9e2e7d9ed8fd3fbf404f73b9dc429fa4b3bbf7","modified":1685820643249},{"_id":"themes/butterfly/source/img/app/25.png","hash":"48ceef0aee04b51e6712f4594d4f902cd67eee3d","modified":1685820643249},{"_id":"themes/butterfly/source/img/app/3.png","hash":"201d04b358b5cf38a0a51de34c17056631cec2a4","modified":1685820643250},{"_id":"themes/butterfly/source/img/app/5.png","hash":"69660eb6846ba34675088d6ea2298a6aa5675889","modified":1685820643251},{"_id":"themes/butterfly/source/img/app/21.png","hash":"f008110f88a5a5ef560f4c573dd86393ccd26d40","modified":1685820643248},{"_id":"themes/butterfly/source/img/app/7.png","hash":"a5a6fc07ab65cf4f1f9fc8e8f4d933bf3ad915e7","modified":1685820643251},{"_id":"themes/butterfly/source/img/app/4.png","hash":"61737a687f8f999913ee8c503f3c77c0982bb515","modified":1685820643250},{"_id":"themes/butterfly/source/img/app/6.png","hash":"c8db691d7e91871360d0a797ede693f086eaa38e","modified":1685820643251},{"_id":"themes/butterfly/source/img/app/8.png","hash":"adaed050a0f1e443f79e413ffbf713f1953e84c1","modified":1685820643251},{"_id":"themes/butterfly/source/img/app/9.png","hash":"246eb14bb574c9cd3a6f5ab594aabd69b8f682db","modified":1685820643252},{"_id":"themes/butterfly/source/img/tz/1.webp","hash":"ae0f03e61da9880904751ca80a0e88b5180aab1a","modified":1685820643257},{"_id":"themes/butterfly/source/img/tz/3.webp","hash":"a80d31e3a5d9a7973ba2362a7bfe0ff244343d7f","modified":1685820643257},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"d0d60008ef4ff74298ff062878766f194a2e4a70","modified":1685820643261},{"_id":"themes/butterfly/source/js/custom/swiper_init.js","hash":"d703c9adcdfba3769ae9647295ef3ced89fd923a","modified":1685820643259},{"_id":"themes/butterfly/source/js/wz/fishes.js","hash":"4d4e26707d5be0d96e24bf2b1c63d3cacfe3387d","modified":1685820643264},{"_id":"themes/butterfly/source/img/tz/2.webp","hash":"e039cc56a0bdd41be429bbb416c0be83c2f9d3b5","modified":1685820643257},{"_id":"themes/butterfly/source/js/wz/siche.js","hash":"be9add955c22f237a1cfd006a32d18805a5b8cb3","modified":1685820643264},{"_id":"themes/butterfly/source/music/css/lights.css","hash":"0815d760b66fe7d054d1c10d71e1136d94c2cf4a","modified":1685820643265},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"f72e002d56903a49c36174e77e42f88b8af8bd44","modified":1685820643262},{"_id":"themes/butterfly/source/xz/css/login.css","hash":"e8450a60b8011b63a3e0e28b690ac9cb2dffba84","modified":1685820643286},{"_id":"themes/butterfly/source/music/js/Config.js","hash":"1e39ab323f99ddc8832e1ae4bbad45c154044ae3","modified":1685820643282},{"_id":"themes/butterfly/source/xz/js/app.js","hash":"33bcfd3bbe90fcab9d6bcabf11999888b8f89774","modified":1685820643288},{"_id":"themes/butterfly/source/xz/js/jquery.params.js","hash":"dd0fe18c9c0f9cd2f9b9e64cd5b51a098282dbce","modified":1685820643289},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"38b85d216d9377ddbaa2e5867e2f03805227237c","modified":1685820643189},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"645087801624a73cbee63269cfd399e9da39c663","modified":1685820643188},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1685820643188},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"aff5c34b6061b281c66a986cf017e9021dc11ac6","modified":1685820643188},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1685820643188},{"_id":"themes/butterfly/source/xz/js/particles.js","hash":"db50c31434054b956a3467edba299d87b56d3dce","modified":1685820643289},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1685820643189},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1685820643189},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"6e5ccc9ea4346c71ad4cbf1e9f1cb83bb45e6f27","modified":1685820643190},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1685820643190},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1685820643190},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1685820643190},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"a5ddcf84ce8855c7801289270009e29c3a103150","modified":1685820643191},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1685820643191},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1685820643191},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e703319ae5395273e81de11ba2366f21a104cf47","modified":1685820643191},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"55f7c144e4ef7a7f317bcdab8044fd8f89bdd5d9","modified":1685820643192},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"3b551ab7618b36795480015b5cf565288df5b957","modified":1685820643192},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"319463fc8ff993b798f2293b659b522ad7770cf0","modified":1685820643192},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"8c16214a610ff8087628f32d005a1b0aab3bb910","modified":1685820643192},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"3df2f59c9552a1f2e6f0d50c4ae97e72c5392b59","modified":1685820643193},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"5b44b4e5f2445260811de81edd3eeeb97d8bb583","modified":1685820643193},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"fe599836225b835bd19fe1a6831fb4d41bcec071","modified":1685820643192},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"ccb5c3f2a821b87986998595743387d7c997c16e","modified":1685820643194},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1685820643193},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1685820643193},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f04263a3bd7efb7f1b250cfee112e82f49805492","modified":1685820643194},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1685820643195},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"d48d59ebf8c0142fb3c4592a0d35874f85e6fd4c","modified":1685820643194},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1685820643194},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"e45152e4ebc3fb2462916be93f98d18f0574f2d3","modified":1685820643194},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1685820643195},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"297d34d83e7bff8ec3b8bc19bb0f4d901c35fe5a","modified":1685820643196},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"77ac27a24b8347668c4df9d5c44c9461c69eaec9","modified":1685820643196},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1685820643197},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1685820643196},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1685820643199},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1685820643197},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"91a72e94743befa21a7b1c557fbb3751efb87ab0","modified":1685820643197},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"bc207dcb771fc2c2c329f29d01708ff6b18443da","modified":1685820643197},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1685820643200},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1685820643200},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"b45fc15c3ae7db3a0fbce0d6da74a72a95ca8a2b","modified":1685820643200},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"63ef0b2a75cf26a94c5bcd885f3a1c144451b852","modified":1685820643198},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1685820643199},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"33368c0b80e4c4e78f3c7ee9bec0fed70ad838ca","modified":1685820643197},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"af5d3d87b736598dafcf5871863596592cacdfe1","modified":1685820643199},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3b5ef84744a1a8fec5a63554079008040d96f924","modified":1685820643199},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1685820643217},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1685820643216},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1685820643216},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1685820643217},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1685820643217},{"_id":"themes/butterfly/source/music/images/avatars/ellie.jpeg","hash":"3d5148a95ff2a1c993879374162265f34777b710","modified":1685820643267},{"_id":"themes/butterfly/source/music/images/avatars/blue.png","hash":"19089e90eab98eb0da4612f8742ad306f7652a92","modified":1685820643266},{"_id":"themes/butterfly/source/dmyx/js/one/one.min.js","hash":"1ebe889635a11a556aab592ca909833f7207d75f","modified":1685820643240},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"2a39dd634a80a735359206a2481f8468f34a0b5c","modified":1685820643196},{"_id":"themes/butterfly/source/music/images/avatars/cherrytree.png","hash":"d5fb1b5314f76dae7c39e816f32601fccd9240ff","modified":1685820643266},{"_id":"themes/butterfly/source/music/images/avatars/polydor.png","hash":"2775079ac49d4546dbe014e8148e67c856db2c7c","modified":1685820643269},{"_id":"themes/butterfly/source/music/images/avatars/green.png","hash":"6b467f115390c5c703452c0b5b7038404b09c9f7","modified":1685820643268},{"_id":"themes/butterfly/source/music/images/avatars/interscope.png","hash":"09b2f9c2cc7af5bee4bb47d97e86ed0c2a42b768","modified":1685820643269},{"_id":"themes/butterfly/source/music/images/avatars/magenta.png","hash":"7e215e4786d125764bea414273f7e9d254155f69","modified":1685820643269},{"_id":"themes/butterfly/source/music/images/avatars/red.png","hash":"2f93445f19812b5a5e04fc39ca7625e9e18da268","modified":1685820643270},{"_id":"themes/butterfly/source/music/images/avatars/orange.png","hash":"909d859c556a6c1110b6fc7a3ad070ee0c647e93","modified":1685820643269},{"_id":"themes/butterfly/source/music/images/envmap/envMapLeftRight.png","hash":"fe594ace284262d1e95f40aef9d6efd1fd00cc78","modified":1685820643273},{"_id":"themes/butterfly/source/music/images/envmap/envMapBottom.png","hash":"e2be0544d9baaf180c30b5ab9c81a17c638d06ed","modified":1685820643272},{"_id":"themes/butterfly/source/music/images/envmap/envMapTop.png","hash":"1879f9596f7d14c31a578cd4357682ef356f9e78","modified":1685820643273},{"_id":"themes/butterfly/source/music/images/envmap/envMapFrontBack.png","hash":"85febdea45ee07dbccb26ab97ac05c512632ea26","modified":1685820643272},{"_id":"themes/butterfly/source/music/images/experience/bengalShadow.png","hash":"320fe31973727ba6fb142d5ae612b95a5bd42738","modified":1685820643275},{"_id":"themes/butterfly/source/music/images/experience/glow.png","hash":"dc7e5cb971c22f3b2cc7260cde48d3ad063d240f","modified":1685820643276},{"_id":"themes/butterfly/source/music/images/experience/particle.png","hash":"1b89697043ad44e47fd82e39c673a3f8d376cc58","modified":1685820643277},{"_id":"themes/butterfly/source/music/images/experience/circle.png","hash":"df98a89d0dd5d8635407b8ddaf846c0aafe8a15d","modified":1685820643276},{"_id":"themes/butterfly/source/music/images/experience/dot.png","hash":"e7197d81a9abe031306a9b8b2eef5f23e0e9239e","modified":1685820643276},{"_id":"themes/butterfly/source/music/images/experience/plasmaCyan.png","hash":"b4b7254707dc20f40a0cc952d8886bec95b3a84f","modified":1685820643277},{"_id":"themes/butterfly/source/music/images/experience/plasmaBlue.png","hash":"72d1cda4448f275d45bf03fdbc0e77ac851f3013","modified":1685820643277},{"_id":"themes/butterfly/source/music/images/experience/plasmaMagenta.png","hash":"b20827d73754d4dc10053525263752b8ff5dd9d8","modified":1685820643278},{"_id":"themes/butterfly/source/music/images/experience/plasmaGreen.png","hash":"65b07e4fa23a8e2ff9f7759cbf59313e4fb75a07","modified":1685820643277},{"_id":"themes/butterfly/source/music/images/experience/spot.png","hash":"42292d6b34d34d3e10a64257605f3b3ddead29b3","modified":1685820643279},{"_id":"themes/butterfly/source/music/images/experience/skybox.png","hash":"a027caf9adf2cf4c6bd5b2b139142b68589a2b1b","modified":1685820643279},{"_id":"themes/butterfly/source/music/images/experience/plasmaRed.png","hash":"4964398681e581e8cb7687e485ba428fd37e5615","modified":1685820643278},{"_id":"themes/butterfly/source/music/images/experience/plasmaWhite.png","hash":"97bc0ff1030918a08e8463f82da03dd22c56df9a","modified":1685820643278},{"_id":"themes/butterfly/source/music/images/experience/plasmaYellow.png","hash":"88d5d4ba3fd83dec236e2ec2763818d4549d4285","modified":1685820643278},{"_id":"themes/butterfly/source/music/images/fonts/standard_07_55.png","hash":"d346381f5559472003bd05dcd5202d0a7d6c7d30","modified":1685820643280},{"_id":"themes/butterfly/source/music/images/fonts/standard_07_55.txt","hash":"b6b2df4c8559b4113aef7078194ab075b45f7ac7","modified":1685820643280},{"_id":"themes/butterfly/source/music/images/experience/terrain66.png","hash":"bf563eb3b7e5c877f10e0d0b63b9033d0ab36e56","modified":1685820643279},{"_id":"themes/butterfly/source/music/images/home/loadingButton.png","hash":"1829ec8893a39316e579e9d36b2827b79af2fc95","modified":1685820643281},{"_id":"themes/butterfly/source/music/images/home/bokeh.png","hash":"574eed75311e1cb0a4af2268edf6cf04e5e669e6","modified":1685820643280},{"_id":"themes/butterfly/source/music/images/experience/spotLineAlpha.png","hash":"d5ea95bc36007ab2f92697d0b7fa81bbc5de5c43","modified":1685820643279},{"_id":"themes/butterfly/source/music/images/experience/spotLine.png","hash":"6e48d9b31c8116f7b4cc1715e18ebe039e4fb498","modified":1685820643279},{"_id":"themes/butterfly/source/music/images/home/logo.png","hash":"789aa0a62fe5027acabd745da2471deaeb14e0fe","modified":1685820643281},{"_id":"themes/butterfly/source/music/images/home/tweetButton.png","hash":"c34afe0b82eb4ba75890f70c766840e4676b95e7","modified":1685820643282},{"_id":"themes/butterfly/source/music/images/home/playButton.png","hash":"df49d11a73d3934bf9fa7287c4c795da0a56ac74","modified":1685820643281},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar1.png","hash":"0d1db600de69e0f90a75c44331bb2c99d2469567","modified":1685820643267},{"_id":"themes/butterfly/source/music/images/home/replayButton.png","hash":"b766899a8046a27e11799af9e24e614dd907dcc5","modified":1685820643282},{"_id":"themes/butterfly/source/dmyx/js/codemirror/lib/codemirror_all.min.css","hash":"0a0a79f3886d817c256a6fa3d8b59e00cc90e682","modified":1685820643238},{"_id":"themes/butterfly/source/example/try/code/1/bd/rono.html","hash":"99c0af48d2fb825312fe37858f3be2b1f5dc2fbd","modified":1685820643241},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar2.png","hash":"9a75dd2abc79b86377653b822e44f57a7a65d4fd","modified":1685820643268},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar0.png","hash":"931497bcbf8553806170481d5a998650f28b689e","modified":1685820643267},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar4.png","hash":"c649d09d9771d50afbb1d152b434a1f89857de99","modified":1685820643268},{"_id":"themes/butterfly/source/people.png","hash":"fbf04a351853358578e6adbd5cd1744205cbfbb4","modified":1685820643286},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar3.png","hash":"2b2c33da7d078ec13c438bf3157a2f1f6f681250","modified":1685820643268},{"_id":"themes/butterfly/source/dmyx/js/codemirror/addon/hint/jsAll.json","hash":"d08f9bfd93166f935c4c838bec276560f4811d74","modified":1685820643237},{"_id":"themes/butterfly/source/img/bj.webp","hash":"a93feb37399ad9d8c2b88f80e0dafdcded8062f8","modified":1685820643252},{"_id":"themes/butterfly/source/img/avatar.png","hash":"fbf04a351853358578e6adbd5cd1744205cbfbb4","modified":1685820643252},{"_id":"themes/butterfly/source/img/wechat.jpg","hash":"7c31b3251068706cf7dd02d992a99a8ea1ffb91c","modified":1685820643258},{"_id":"themes/butterfly/source/js/shangshengqipao.js","hash":"7a703a92ba8a60cd1630df1e5086ca1be86a3533","modified":1685820643262},{"_id":"themes/butterfly/source/dmyx/images/shouji.png","hash":"a3b9ad709e9398d66bc9352406831e1d5b1547cb","modified":1685820643236},{"_id":"themes/butterfly/source/img/JgNrST23690481619450556342.gif!cover","hash":"f78e9fa23d791b6fb1275c64b48656e01348d2f4","modified":1685820643244},{"_id":"themes/butterfly/source/img/20115853_380680b35f.jpeg","hash":"0f2c52debbdb267620cd0a8898b390a8b44bd489","modified":1685820643242},{"_id":"themes/butterfly/source/music/js/Three.js","hash":"5f109ceb1b66a02a939afdf5c24f8408db89788b","modified":1685820643285},{"_id":"themes/butterfly/source/music/images/experience/bengalSeq.png","hash":"2bd2e362f582b88287df6301b4da796694b2d729","modified":1685820643275},{"_id":"themes/butterfly/source/music/js/Lights.js","hash":"e46eb36b4c6d430352e93210819a367db1dcd7d0","modified":1685820643284},{"_id":"themes/butterfly/source/music/images/data/spectrumData.png","hash":"eef56debff5b90deb47c2fa18fe30fdffc0b3fe4","modified":1685820643271},{"_id":"themes/butterfly/source/dmyx/js/codemirror/lib/codemirror_all.min.js","hash":"03c2aa18064773f566b7b619deefd6ec8f7e81e3","modified":1685820643239},{"_id":"themes/butterfly/source/img/bt.webp","hash":"1bf17ff87be2cdda060e115c02d92f413e6663a3","modified":1685820643254},{"_id":"themes/butterfly/source/xz/img/login_background.png","hash":"eddf28d185c0852dc37434ec4e73abeb81934b44","modified":1685820643288},{"_id":"public/selfjs/tw_cn.js","hash":"ed646e9fb14b1179d8cfb9d89db299cf6c341193","modified":1686368065904},{"_id":"public/selfjs/localsearch.js","hash":"5bd7f3a3db98258311f98a543b3bcace7e30aa76","modified":1686368065904},{"_id":"public/atom.xml","hash":"87d54f3bba26dd4f4652f27e00175d17101e2def","modified":1686368065904},{"_id":"public/sitemap.xml","hash":"1741d313804e40f22e4fada5c361f7db26ca114e","modified":1686368065904},{"_id":"public/rss2.xml","hash":"b62052209cd1ca5ce5d55386825db81f2997e889","modified":1686368065904},{"_id":"public/search.xml","hash":"c70b18e10e52656fb11b649c78be3f468685ae4d","modified":1686368065904},{"_id":"public/baidusitemap.xml","hash":"f5f172b3e087b8bc2e93ad7c5535209f4d48ecc0","modified":1686368065904},{"_id":"public/zhheo/random.js","hash":"277c65133be48e4a7c933c46b9f64c7052160f88","modified":1686368065904},{"_id":"public/404.html","hash":"27cac5015a115598918813408e383bb57f9d37ec","modified":1686368065904},{"_id":"public/about/index.html","hash":"5af582e20cb1f953053f73c9a7473d32cd676a65","modified":1686368065904},{"_id":"public/link/index.html","hash":"979d142e28bf1e860cfe3818dcf8cb067c9fc9c6","modified":1686368065904},{"_id":"public/messageboard/index.html","hash":"3c54e97fa894ac9df8c6e3265673b4745222aff2","modified":1686368065904},{"_id":"public/notice/index.html","hash":"b4231f5393bd33da625f16897d51a8486438993b","modified":1686368065904},{"_id":"public/music/index.html","hash":"b7fce171998a1ec24571474e90b8e10e765e6c7f","modified":1686368065904},{"_id":"public/categories/index.html","hash":"9cc695dd438ea04968a9fa04daf4f284cd0fd0ae","modified":1686368065904},{"_id":"public/tags/index.html","hash":"3bf0595d9e53d7d3dc42884b8844570853072a5f","modified":1686368065904},{"_id":"public/talking/index.html","hash":"f4e1d751930de9f1fbd80c831a668a8edca0c3db","modified":1686368065904},{"_id":"public/myself/index.html","hash":"d794040761d32ea8cf0f7f594fbf271b77e64c78","modified":1686368065904},{"_id":"public/video/index.html","hash":"1eef77a6c66e3e0d1594b32ddf08246a4c702427","modified":1686368065904},{"_id":"public/xiance/index.html","hash":"57fc7141001cfd1a90cf2f370cd0abde549d26db","modified":1686368065904},{"_id":"public/tuku/index.html","hash":"7350581b781d2af0b9633cf4e05b4accbb513055","modified":1686368065904},{"_id":"public/timeline/index.html","hash":"fe54c7bb3cb9b89a45dfd4f141e00db8f2f093ce","modified":1686368065904},{"_id":"public/xiance/marvel/index.html","hash":"b406776d2825538292e69c53e582768a2a9896ef","modified":1686368065904},{"_id":"public/posts/a09ef191.html","hash":"dc8d2b55a3fe13f6f6695f899af3b759a05a4352","modified":1686368065904},{"_id":"public/posts/ed9fe6ee.html","hash":"d41879d5f400c981e4799294b7fad76b9357352c","modified":1686368065904},{"_id":"public/xiance/ohmygirl/index.html","hash":"3945195aead0cffc70609ec08310e0de4886ec62","modified":1686368065904},{"_id":"public/posts/8857f1a4.html","hash":"a0ed2a6b3915169a9c9aa674eee6a765a4d7f884","modified":1686368065904},{"_id":"public/posts/fa264d8c.html","hash":"74f7f5e9e7c19d2276739270fe0087cf4cbf45f9","modified":1686368065904},{"_id":"public/posts/1213ac56.html","hash":"39f31a310a43900388e364e27c0b71dd53c7c07f","modified":1686368065904},{"_id":"public/posts/7db00131.html","hash":"7ab3d4e66403a3900065acba8a488ddcc3f0e75d","modified":1686368065904},{"_id":"public/posts/667b4089.html","hash":"231c0c14916ebf5788014fe01f5ba01e96ea99cb","modified":1686368065904},{"_id":"public/posts/ab232981.html","hash":"400d0e49cd65f78800fe9f69ba922b3014f23744","modified":1686368065904},{"_id":"public/posts/d9795f88.html","hash":"064261aa47e907e275aa881aee37df66e41ff122","modified":1686368065904},{"_id":"public/posts/c9a941a3.html","hash":"426a73ddbfee2d54d5d4307fd6d560769d98a7ce","modified":1686368065904},{"_id":"public/posts/d9795d10.html","hash":"60cf8a8e2ecd9b86e4a807f4dc9bebc40c64db80","modified":1686368065904},{"_id":"public/posts/d9795d88.html","hash":"27f11364ca5e0277b33f1c1d778a9d4a59628462","modified":1686368065904},{"_id":"public/posts/50daec4.html","hash":"fd064d9b1a049712da2931d99f8b6c6118ff3cc6","modified":1686368065904},{"_id":"public/posts/d9795d86.html","hash":"68762cfd201cd5725b581b33273d5253842ec676","modified":1686368065904},{"_id":"public/posts/d9795d89.html","hash":"cb61e3bc9cf8718dbdeee26e2bcf3cda9f83e84e","modified":1686368065904},{"_id":"public/archives/index.html","hash":"e4820f1130ee506006e14da63c4a0249170f4443","modified":1686368065904},{"_id":"public/archives/page/2/index.html","hash":"047d2f7bd7a08ca2dd7c243108cfb4bfacb45d74","modified":1686368065904},{"_id":"public/archives/2023/index.html","hash":"5c60cbb6a4618d2742d2ccc0651e4e7daf550de9","modified":1686368065904},{"_id":"public/archives/2023/05/index.html","hash":"011765840e7904c7f07fdd4c077b0a61774e049f","modified":1686368065904},{"_id":"public/archives/2023/page/2/index.html","hash":"3f0fb045ce442563f66509c16187815afb156b02","modified":1686368065904},{"_id":"public/archives/2023/04/index.html","hash":"0111b6ebf2b66b209c55ce62e24a899612605a02","modified":1686368065904},{"_id":"public/index.html","hash":"332b86156295ecc76d4e8c2304497e21a9258570","modified":1686368065904},{"_id":"public/archives/2023/06/index.html","hash":"845250e3709ad27b91b638c78524f0c4d85f019a","modified":1686368065904},{"_id":"public/archives/2023/05/page/2/index.html","hash":"2d86bf40e900cc311680cf14ab01de9a8e4dd883","modified":1686368065904},{"_id":"public/page/2/index.html","hash":"276b197f02076cf7b36e80f419edce4f18dbc775","modified":1686368065904},{"_id":"public/categories/C/index.html","hash":"6b897e1f64cd7c1efe3ce042d68cb6ef0eb6a46c","modified":1686368065904},{"_id":"public/categories/JS/index.html","hash":"9388ec2bc72be1a33f40e4e6c80d391b6ec2fee0","modified":1686368065904},{"_id":"public/categories/加油/index.html","hash":"db6493deea8739ab9d92c3f4fb6b35c8447b0443","modified":1686368065904},{"_id":"public/categories/面试/page/2/index.html","hash":"c33889dcf02a9db6c3eca950f6ce22501d502ad2","modified":1686368065904},{"_id":"public/tags/quickjs/index.html","hash":"39144f6d8817012cdf2fa9968fd502706b6f53f0","modified":1686368065904},{"_id":"public/tags/devtools/index.html","hash":"40a53d3527ddab9fc53fdd96b2446ae1a60f888f","modified":1686368065904},{"_id":"public/tags/前端/index.html","hash":"03ed2c83d3e1d18ae69b689e23ce665c51fe3046","modified":1686368065904},{"_id":"public/tags/C/index.html","hash":"2e21396b5309789e6bb2b9f16406072c0131ab80","modified":1686368065904},{"_id":"public/tags/c/index.html","hash":"7c73c93baeb60664eef942a4533a0d4188bc4d51","modified":1686368065904},{"_id":"public/categories/面试/index.html","hash":"37c3e88a9bcf8894701cb01686e3cc1549b2981b","modified":1686368065904},{"_id":"public/tags/加油/index.html","hash":"fad46e780d29293cb85f62f353f8f7ee247cf0ab","modified":1686368065904},{"_id":"public/tags/js/index.html","hash":"66c3261e26c86c827a13c5573e5c9aed9c43b9a3","modified":1686368065904},{"_id":"public/tags/HTML/index.html","hash":"806d1de40174fefc14137845e424227ec23111ec","modified":1686368065904},{"_id":"public/tags/运行时/index.html","hash":"3bace2720c6c977398fded2df2008b4297c62b40","modified":1686368065904},{"_id":"public/tags/网络/index.html","hash":"95c46eee13f677d1c35bc9162caa297c0e0e3ef8","modified":1686368065904},{"_id":"public/tags/面试/index.html","hash":"4ab07c16f1e9a39aed8143ebf20baacdabe9cbd1","modified":1686368065904},{"_id":"public/tags/JS/index.html","hash":"c5c839b3b1b8a3a19b16cd3c12b78e2e286afd27","modified":1686368065904},{"_id":"public/tags/vue/index.html","hash":"d4f9975c92dad45a7b919834f93e1eea6914d12f","modified":1686368065904},{"_id":"public/tags/css/index.html","hash":"bc6775494eb204cb51535dae40091c72f0d62290","modified":1686368065904},{"_id":"public/people.ico","hash":"791c16e638c9035943d524e96b7b2d996c39e711","modified":1686368065904},{"_id":"public/img/alipay.webp","hash":"b7310124dcd14f351d224f17863dfbab6a0f701c","modified":1686368065904},{"_id":"public/img/404.webp","hash":"bd0dc3ec1a22a1a72ee179d6b42434b1d763ec69","modified":1686368065904},{"_id":"public/img/cover.png","hash":"f9edf7939e4bb129392396a83aa637b36e09499e","modified":1686368065904},{"_id":"public/img/favicon.webp","hash":"60412802902f538637b45db3bf64afea208a5fe8","modified":1686368065904},{"_id":"public/img/hx.webp","hash":"a5574851e056f58c8330d4ba6d6c6348112ba3ef","modified":1686368065904},{"_id":"public/img/lightning2.png","hash":"83f02621657fa555369c680d154255dabbf712ff","modified":1686368065904},{"_id":"public/img/dzbp.webp","hash":"48e680ccfe156c25b9cf6c0a63cd8e135dc2d633","modified":1686368065904},{"_id":"public/img/lightning1.png","hash":"8dbaa433850eee48afe82e5bf178991e181ac981","modified":1686368065904},{"_id":"public/img/default_top_img.webp","hash":"4ab272a986bb628ad6061e82322665a1eeabb438","modified":1686368065904},{"_id":"public/img/ljz.webp","hash":"e63976f72c82e9813c4c138d53a859a7d0251a6d","modified":1686368065904},{"_id":"public/img/xka.webp","hash":"607e06c04e255207f26f896de772ace855e21357","modified":1686368065904},{"_id":"public/img/logo.ico","hash":"791c16e638c9035943d524e96b7b2d996c39e711","modified":1686368065904},{"_id":"public/img/app/1.png","hash":"384551ecc5bd11f4b780f0ab785788e874e1b9a9","modified":1686368065904},{"_id":"public/img/app/11.png","hash":"355d9b84a9423a2e8f58c46d6b551a445e683e30","modified":1686368065904},{"_id":"public/dmyx/images/cream.png","hash":"eef38c387db75e461f07f1c3578942d8907e4f5a","modified":1686368065904},{"_id":"public/img/app/12.png","hash":"6640ac8a1812fc2dd42830b8a9cdac9ec8ec48a2","modified":1686368065904},{"_id":"public/img/app/13.png","hash":"4cc90d31f9d6b0f3b515d2722dc4d024920ec9f2","modified":1686368065904},{"_id":"public/img/app/10.png","hash":"47c88b91ba0894084e550b0253c5feffacf1a453","modified":1686368065904},{"_id":"public/img/app/16.png","hash":"a7815d07dabf5bfc7b98fdd8c1052f9d76bbca10","modified":1686368065904},{"_id":"public/dmyx/images/device_ico.png","hash":"7ffe5a758cd5437a5b65d0c0331158d637573bf2","modified":1686368065904},{"_id":"public/img/app/15.png","hash":"77a4f4abd81f6747ec0b8941a7e11885a613355f","modified":1686368065904},{"_id":"public/img/app/14.png","hash":"362eb15aa006f3ee1276e882fb54623e207b0b7f","modified":1686368065904},{"_id":"public/dmyx/fonts/glyphicons-halflings-regular.woff2","hash":"1ac0ad2111e7a33efccf7c61677ed52c81580845","modified":1686368065904},{"_id":"public/img/app/17.png","hash":"2d39f73536f0b2f13e855547e9fb2212203029b7","modified":1686368065904},{"_id":"public/img/app/19.png","hash":"38397dc1b44748b5e4c53e9cbab024a851db5065","modified":1686368065904},{"_id":"public/img/app/20.png","hash":"c4523336533bb6f6ac07794f8c3c45f0a42653b6","modified":1686368065904},{"_id":"public/img/app/2.png","hash":"2a0b3928246949624a9b3a54512fd9e53aae7d05","modified":1686368065904},{"_id":"public/img/app/18.png","hash":"0d140ba61db9706879c4dfcfd64ce03988974a61","modified":1686368065904},{"_id":"public/img/app/22.png","hash":"9f2c5d27277fa548979272283c24678d94b07d6c","modified":1686368065904},{"_id":"public/img/app/21.png","hash":"f008110f88a5a5ef560f4c573dd86393ccd26d40","modified":1686368065904},{"_id":"public/img/app/23.png","hash":"b6aa5a5142fb286120442e00d9e383b872a6dca3","modified":1686368065904},{"_id":"public/img/app/26.png","hash":"240a3ec16dbaa1bec9f9a2ee0e9f4760dba004bb","modified":1686368065904},{"_id":"public/img/app/27.png","hash":"d0247de008905f827a5ba1c6a38fca84446b8500","modified":1686368065904},{"_id":"public/dmyx/images/bg-body.jpg","hash":"a12bdff40ec6772a6b1b4a4b2af95324bf0f7c4a","modified":1686368065904},{"_id":"public/img/app/25.png","hash":"48ceef0aee04b51e6712f4594d4f902cd67eee3d","modified":1686368065904},{"_id":"public/img/app/24.png","hash":"8d9e2e7d9ed8fd3fbf404f73b9dc429fa4b3bbf7","modified":1686368065904},{"_id":"public/img/app/7.png","hash":"a5a6fc07ab65cf4f1f9fc8e8f4d933bf3ad915e7","modified":1686368065904},{"_id":"public/img/app/4.png","hash":"61737a687f8f999913ee8c503f3c77c0982bb515","modified":1686368065904},{"_id":"public/img/app/3.png","hash":"201d04b358b5cf38a0a51de34c17056631cec2a4","modified":1686368065904},{"_id":"public/img/app/5.png","hash":"69660eb6846ba34675088d6ea2298a6aa5675889","modified":1686368065904},{"_id":"public/img/app/6.png","hash":"c8db691d7e91871360d0a797ede693f086eaa38e","modified":1686368065904},{"_id":"public/img/tz/1.webp","hash":"ae0f03e61da9880904751ca80a0e88b5180aab1a","modified":1686368065904},{"_id":"public/img/app/9.png","hash":"246eb14bb574c9cd3a6f5ab594aabd69b8f682db","modified":1686368065904},{"_id":"public/img/tz/3.webp","hash":"a80d31e3a5d9a7973ba2362a7bfe0ff244343d7f","modified":1686368065904},{"_id":"public/img/app/8.png","hash":"adaed050a0f1e443f79e413ffbf713f1953e84c1","modified":1686368065904},{"_id":"public/img/tz/2.webp","hash":"e039cc56a0bdd41be429bbb416c0be83c2f9d3b5","modified":1686368065904},{"_id":"public/music/images/avatars/blue.png","hash":"19089e90eab98eb0da4612f8742ad306f7652a92","modified":1686368065904},{"_id":"public/music/images/avatars/ellie.jpeg","hash":"3d5148a95ff2a1c993879374162265f34777b710","modified":1686368065904},{"_id":"public/music/images/avatars/cherrytree.png","hash":"d5fb1b5314f76dae7c39e816f32601fccd9240ff","modified":1686368065904},{"_id":"public/people.png","hash":"fbf04a351853358578e6adbd5cd1744205cbfbb4","modified":1686368065904},{"_id":"public/img/avatar.png","hash":"fbf04a351853358578e6adbd5cd1744205cbfbb4","modified":1686368065904},{"_id":"public/img/bj.webp","hash":"a93feb37399ad9d8c2b88f80e0dafdcded8062f8","modified":1686368065904},{"_id":"public/img/wechat.jpg","hash":"7c31b3251068706cf7dd02d992a99a8ea1ffb91c","modified":1686368065904},{"_id":"public/dmyx/images/shouji.png","hash":"a3b9ad709e9398d66bc9352406831e1d5b1547cb","modified":1686368065904},{"_id":"public/music/images/avatars/green.png","hash":"6b467f115390c5c703452c0b5b7038404b09c9f7","modified":1686368065904},{"_id":"public/music/images/avatars/red.png","hash":"2f93445f19812b5a5e04fc39ca7625e9e18da268","modified":1686368065904},{"_id":"public/music/images/avatars/interscope.png","hash":"09b2f9c2cc7af5bee4bb47d97e86ed0c2a42b768","modified":1686368065904},{"_id":"public/music/images/avatars/polydor.png","hash":"2775079ac49d4546dbe014e8148e67c856db2c7c","modified":1686368065904},{"_id":"public/music/images/avatars/orange.png","hash":"909d859c556a6c1110b6fc7a3ad070ee0c647e93","modified":1686368065904},{"_id":"public/music/images/avatars/magenta.png","hash":"7e215e4786d125764bea414273f7e9d254155f69","modified":1686368065904},{"_id":"public/music/images/envmap/envMapLeftRight.png","hash":"fe594ace284262d1e95f40aef9d6efd1fd00cc78","modified":1686368065904},{"_id":"public/music/images/envmap/envMapBottom.png","hash":"e2be0544d9baaf180c30b5ab9c81a17c638d06ed","modified":1686368065904},{"_id":"public/music/images/envmap/envMapFrontBack.png","hash":"85febdea45ee07dbccb26ab97ac05c512632ea26","modified":1686368065904},{"_id":"public/music/images/envmap/envMapTop.png","hash":"1879f9596f7d14c31a578cd4357682ef356f9e78","modified":1686368065904},{"_id":"public/music/images/experience/bengalShadow.png","hash":"320fe31973727ba6fb142d5ae612b95a5bd42738","modified":1686368065904},{"_id":"public/music/images/experience/glow.png","hash":"dc7e5cb971c22f3b2cc7260cde48d3ad063d240f","modified":1686368065904},{"_id":"public/music/images/experience/dot.png","hash":"e7197d81a9abe031306a9b8b2eef5f23e0e9239e","modified":1686368065904},{"_id":"public/music/images/experience/particle.png","hash":"1b89697043ad44e47fd82e39c673a3f8d376cc58","modified":1686368065904},{"_id":"public/music/images/experience/plasmaCyan.png","hash":"b4b7254707dc20f40a0cc952d8886bec95b3a84f","modified":1686368065904},{"_id":"public/music/images/experience/circle.png","hash":"df98a89d0dd5d8635407b8ddaf846c0aafe8a15d","modified":1686368065904},{"_id":"public/music/images/experience/plasmaGreen.png","hash":"65b07e4fa23a8e2ff9f7759cbf59313e4fb75a07","modified":1686368065904},{"_id":"public/music/images/experience/plasmaBlue.png","hash":"72d1cda4448f275d45bf03fdbc0e77ac851f3013","modified":1686368065904},{"_id":"public/music/images/experience/plasmaRed.png","hash":"4964398681e581e8cb7687e485ba428fd37e5615","modified":1686368065904},{"_id":"public/music/images/experience/plasmaMagenta.png","hash":"b20827d73754d4dc10053525263752b8ff5dd9d8","modified":1686368065904},{"_id":"public/music/images/experience/plasmaWhite.png","hash":"97bc0ff1030918a08e8463f82da03dd22c56df9a","modified":1686368065904},{"_id":"public/music/images/experience/skybox.png","hash":"a027caf9adf2cf4c6bd5b2b139142b68589a2b1b","modified":1686368065904},{"_id":"public/music/images/experience/spot.png","hash":"42292d6b34d34d3e10a64257605f3b3ddead29b3","modified":1686368065904},{"_id":"public/music/images/experience/plasmaYellow.png","hash":"88d5d4ba3fd83dec236e2ec2763818d4549d4285","modified":1686368065904},{"_id":"public/music/images/fonts/standard_07_55.png","hash":"d346381f5559472003bd05dcd5202d0a7d6c7d30","modified":1686368065904},{"_id":"public/music/images/fonts/standard_07_55.txt","hash":"b6b2df4c8559b4113aef7078194ab075b45f7ac7","modified":1686368065904},{"_id":"public/music/images/experience/spotLine.png","hash":"6e48d9b31c8116f7b4cc1715e18ebe039e4fb498","modified":1686368065904},{"_id":"public/music/images/experience/spotLineAlpha.png","hash":"d5ea95bc36007ab2f92697d0b7fa81bbc5de5c43","modified":1686368065904},{"_id":"public/music/images/experience/terrain66.png","hash":"bf563eb3b7e5c877f10e0d0b63b9033d0ab36e56","modified":1686368065904},{"_id":"public/music/images/home/bokeh.png","hash":"574eed75311e1cb0a4af2268edf6cf04e5e669e6","modified":1686368065904},{"_id":"public/music/images/home/loadingButton.png","hash":"1829ec8893a39316e579e9d36b2827b79af2fc95","modified":1686368065904},{"_id":"public/music/images/home/logo.png","hash":"789aa0a62fe5027acabd745da2471deaeb14e0fe","modified":1686368065904},{"_id":"public/music/images/home/replayButton.png","hash":"b766899a8046a27e11799af9e24e614dd907dcc5","modified":1686368065904},{"_id":"public/music/images/avatars/ellie/ellieAvatar0.png","hash":"931497bcbf8553806170481d5a998650f28b689e","modified":1686368065904},{"_id":"public/music/images/home/playButton.png","hash":"df49d11a73d3934bf9fa7287c4c795da0a56ac74","modified":1686368065904},{"_id":"public/music/images/home/tweetButton.png","hash":"c34afe0b82eb4ba75890f70c766840e4676b95e7","modified":1686368065904},{"_id":"public/music/images/avatars/ellie/ellieAvatar1.png","hash":"0d1db600de69e0f90a75c44331bb2c99d2469567","modified":1686368065904},{"_id":"public/music/images/avatars/ellie/ellieAvatar2.png","hash":"9a75dd2abc79b86377653b822e44f57a7a65d4fd","modified":1686368065904},{"_id":"public/music/images/avatars/ellie/ellieAvatar4.png","hash":"c649d09d9771d50afbb1d152b434a1f89857de99","modified":1686368065904},{"_id":"public/music/images/avatars/ellie/ellieAvatar3.png","hash":"2b2c33da7d078ec13c438bf3157a2f1f6f681250","modified":1686368065904},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"284416885e4e80e27fa4eae6fc305f4de15b914c","modified":1686368065904},{"_id":"public/css/liuyanban.css","hash":"ea7b2c41de33c33ce8cf68badbc3cc57d4d2c28f","modified":1686368065904},{"_id":"public/css/gengxing.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1686368065904},{"_id":"public/example/try.html","hash":"3dc615ebae03a4f7c101f9158738b9afb35222c9","modified":1686368065904},{"_id":"public/css/mouse.css","hash":"9ba069efa357f82d208dbc88357bf278f99fc875","modified":1686368065904},{"_id":"public/css/mycss.css","hash":"95af0a254b18287f09ed8297233a5d005da40778","modified":1686368065904},{"_id":"public/css/link.css","hash":"0fbb8034c33b6e3592a38f84e32a7f4ca6de570d","modified":1686368065904},{"_id":"public/css/progress_bar.css","hash":"ce1a2c7b71129aa204ea9cf4115277a0b28f8a8d","modified":1686368065904},{"_id":"public/css/nav_menu.css","hash":"d2b20dc763c4240b4401907c1771e3e37a1ebe22","modified":1686368065904},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1686368065904},{"_id":"public/css/people.css","hash":"8f8a9272d512f871d2773031af1d7a271acabb0b","modified":1686368065904},{"_id":"public/css/xiazai.css","hash":"4b6068622b4788f1d4933bc2c4bd17b14ff61931","modified":1686368065904},{"_id":"public/js/countup.js","hash":"89388b8b14405b13257da96356312a5f37f94841","modified":1686368065904},{"_id":"public/css/notice.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1686368065904},{"_id":"public/js/copy.js","hash":"40965ead3aee64c38a0ef944f54fe6b6b184ee21","modified":1686368065904},{"_id":"public/js/categoryBar.js","hash":"19a3b570b471951d5ab67f1607d5f7f43ef380be","modified":1686368065904},{"_id":"public/js/hygl.js","hash":"0dab40071de2b58aac27d55428eaca257cea8087","modified":1686368065904},{"_id":"public/js/ripples.js","hash":"a60e67666d8385d928f11f61236a5c57fd0fbc77","modified":1686368065904},{"_id":"public/js/index.js","hash":"fcde0a1ec6cd0a48c0a59611284ef6aa55fc87a8","modified":1686368065904},{"_id":"public/js/dmyx.js","hash":"339ad47c0aa929ac3f9e8a59e7622c07a2d7e125","modified":1686368065904},{"_id":"public/js/nav_menu.js","hash":"c79303544951701b2cc36a9d1d267f9455cbfd55","modified":1686368065904},{"_id":"public/js/people.js","hash":"4bf541c0ae1394dae5e7a823202fc89b18afe73b","modified":1686368065904},{"_id":"public/js/sun_moon.js","hash":"6d811c3e017116f0b79d756c15d54aad0ea3f5df","modified":1686368065904},{"_id":"public/js/watchWorker.js","hash":"9ee3c98dc197c09e38b41b5ffca5970cd0e579e3","modified":1686368065904},{"_id":"public/js/twikookstx.js","hash":"1e21e562f0f8c3fbfacac60ac6c039be5c97a27a","modified":1686368065904},{"_id":"public/js/snowflake.js","hash":"a5b020f3bbb9a2c06e8a8dd25cd99513d10476ba","modified":1686368065904},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1686368065904},{"_id":"public/js/xiazai.js","hash":"810c3317e57d7b951e686815b0bb557e6eeb2c7f","modified":1686368065904},{"_id":"public/js/xh2.js","hash":"5e7707221da3e904bce94f7342b7fbf273802681","modified":1686368065904},{"_id":"public/music/music.html","hash":"861943a6551ac46743ee5118073643d0e8a5be1c","modified":1686368065904},{"_id":"public/dmyx/css/try.css","hash":"777637f3feafc2b47785ecbb199dfde91b0b5810","modified":1686368065904},{"_id":"public/dmyx/css/bootstrap.min.css","hash":"cd3314fe8a9f15c40636ba25892e0c43970dedad","modified":1686368065904},{"_id":"public/xz/index.html","hash":"2cbf295492bbf568bfbe8e303dad9e5982db77d6","modified":1686368065904},{"_id":"public/example/try/index.html","hash":"f964ed0a6eab288ab7acc21cbe8bc62df93d8832","modified":1686368065904},{"_id":"public/dmyx/css/love.css","hash":"55540f76540a1fedf82c234c26c12f9c25f470c2","modified":1686368065904},{"_id":"public/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1686368065904},{"_id":"public/js/custom/swiper_init.js","hash":"b1565743838aff2214fd03d1cef7d571f1ebbfd1","modified":1686368065904},{"_id":"public/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1686368065904},{"_id":"public/music/css/lights.css","hash":"aad43a26ce66e8ee59a3a95df4f4a44eca68a99b","modified":1686368065904},{"_id":"public/js/wz/siche.js","hash":"fbfae529794c9da8f9e9ad45d1f2796f0c2ba1ac","modified":1686368065904},{"_id":"public/music/js/Config.js","hash":"b0a44ccfb452ae50b1042b1f18bab5bb9d1cfd47","modified":1686368065904},{"_id":"public/js/wz/fishes.js","hash":"215e26df2611e30866ce3fe9a3fc1b2f9c8911c5","modified":1686368065904},{"_id":"public/xz/js/jquery.params.js","hash":"9d51f091f6eb2264af0da5161924f7b7fd2d55fe","modified":1686368065904},{"_id":"public/xz/css/login.css","hash":"91eb8a2a8a5739644ff0d42f9c290d03e19214f5","modified":1686368065904},{"_id":"public/xz/js/app.js","hash":"f4692619f43e430885eeb3147b8461345f178d05","modified":1686368065904},{"_id":"public/dmyx/js/one/one.min.js","hash":"1ebe889635a11a556aab592ca909833f7207d75f","modified":1686368065904},{"_id":"public/css/index.css","hash":"b6ea80e697f3137ec8b4780b84c82c4df50ec2e5","modified":1686368065904},{"_id":"public/css/guanyu.css","hash":"3e292547dbf8f48892214cf961767faaa340682c","modified":1686368065904},{"_id":"public/css/glb.css","hash":"70465d17d3110d33d6a5c3c4ee199cefe7e8895e","modified":1686368065904},{"_id":"public/js/main.js","hash":"60110cdc320450483b13c4a4961bd6c56ec3c436","modified":1686368065904},{"_id":"public/js/shangshengqipao.js","hash":"80262c504da31df93cd57961ebb63321e382c22b","modified":1686368065904},{"_id":"public/js/xh1.js","hash":"4449ed117bb01a0f457a09a636548e5bcd65ac26","modified":1686368065904},{"_id":"public/js/tw_cn.js","hash":"5c1391c9e96950833641f178b5f23c58422fb659","modified":1686368065904},{"_id":"public/dmyx/js/bootstrap.min.js","hash":"791aa054a026bddc0de92bad6cf7a1c6e73713d5","modified":1686368065904},{"_id":"public/music/js/Three.js","hash":"2c2075cbdf186dfa0aaf47980c040a9a7baf1cb5","modified":1686368065904},{"_id":"public/music/js/Lights.js","hash":"fbc2a8f49131ddd37daeecd1aa7184ed7dd6f1dd","modified":1686368065904},{"_id":"public/xz/js/particles.js","hash":"6d41b2dfd94b9b8e8b96b95d1258f57efb11aada","modified":1686368065904},{"_id":"public/css/hbe.style.css","hash":"b0a0077cb588c0941823905fcc383aa7509ade73","modified":1686368065904},{"_id":"public/lib/hbe.js","hash":"136dba00826bdd086153bf0acb5473aea7183ad1","modified":1686368065904},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"e56ad6b82caf69066de545201014291fc961635e","modified":1686368065904},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"a3b131a9a47ccc16f4dd8988fabb6d306548db2f","modified":1686368065904},{"_id":"public/example/try/code/1/bd/rono.html","hash":"99c0af48d2fb825312fe37858f3be2b1f5dc2fbd","modified":1686368065904},{"_id":"public/dmyx/js/codemirror/lib/codemirror_all.min.css","hash":"b84586e6826ac0767d8a33f27ec4a0fc8b812a97","modified":1686368065904},{"_id":"public/dmyx/js/codemirror/addon/hint/jsAll.json","hash":"ebd7876e04631ecd74c31539b84683c92bc47f42","modified":1686368065904},{"_id":"public/dmyx/js/codemirror/lib/codemirror_all.min.js","hash":"e7c91175d5d88c39585cb5f0e091a74ac942509a","modified":1686368065904},{"_id":"public/img/JgNrST23690481619450556342.gif!cover","hash":"f78e9fa23d791b6fb1275c64b48656e01348d2f4","modified":1686368065904},{"_id":"public/img/20115853_380680b35f.jpeg","hash":"0f2c52debbdb267620cd0a8898b390a8b44bd489","modified":1686368065904},{"_id":"public/assets/algolia/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":1686368065904},{"_id":"public/music/images/experience/bengalSeq.png","hash":"2bd2e362f582b88287df6301b4da796694b2d729","modified":1686368065904},{"_id":"public/img/bt.webp","hash":"1bf17ff87be2cdda060e115c02d92f413e6663a3","modified":1686368065904},{"_id":"public/music/images/data/spectrumData.png","hash":"eef56debff5b90deb47c2fa18fe30fdffc0b3fe4","modified":1686368065904},{"_id":"public/xz/img/login_background.png","hash":"eddf28d185c0852dc37434ec4e73abeb81934b44","modified":1686368065904}],"Category":[{"name":"C","_id":"clipg086u0004rgwh5jewf2bp"},{"name":"JS","_id":"clipg0871000irgwh8r4tfc0b"},{"name":"加油","_id":"clipg0873000srgwhar9106h8"},{"name":"面试","_id":"clipg08750010rgwh3z7xd5nq"}],"Data":[{"_id":"indexwz","data":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}]},{"_id":"creativity","data":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}]},{"_id":"reward","data":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}]},{"_id":"notice","data":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]}},{"_id":"link","data":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]},{"_id":"video","data":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}]},{"_id":"widget","data":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]}},{"_id":"shuanbian","data":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}],"Page":[{"title":"关于","date":"2021-03-30T07:57:51.000Z","aside":false,"top_img":false,"background":"#f8f9fe","comments":1,"type":"about","_content":"\n\n<link rel=\"stylesheet\" href=\"/css/guanyu.css\"> ","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2021-03-30 15:57:51\naside: false\ntop_img: false\nbackground: \"#f8f9fe\"\ncomments: true\ntype: \"about\"\n---\n\n\n<link rel=\"stylesheet\" href=\"/css/guanyu.css\"> ","updated":"2023-06-03T19:30:43.166Z","path":"about/index.html","layout":"page","_id":"clipg086m0000rgwhebdb2dmg","content":"<link rel=\"stylesheet\" href=\"/css/guanyu.css\"> ","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/66.jpg","excerpt":"","more":"<link rel=\"stylesheet\" href=\"/css/guanyu.css\"> "},{"title":"留言板","date":"2022-09-30T01:00:05.000Z","type":"messageboard","top_img":"https://s2.loli.net/2022/11/04/cJoWvz81e73ljp6.webp","_content":"\n<link href=\"/css/liuyanban.css\" rel=\"stylesheet\" type=\"text/css\"/>\n\n  <div id=\"computer\">\n    <div id=\"maincontent\"><br>\n      <div id=\"form-wrap\"><img src=\"https://drfs.ctcontents.com/file/14237530/741091857/688faf/img/xf/2.png\" id=\"beforeimg\"/>\n        <div id=\"envelope\">\n          <form>\n            <div class=\"formmain\">\n              <img class=\"headerimg\" src=\"https://drfs.ctcontents.com/file/14237530/741090658/42ef53/img/xf/3.png\"/>\n              <div style=\"padding: 5px 20px;\">\n                <center>\n                  <h3 calss=\"title3\">太华  伽罗</h3>\n                </center>\n                <center class=\"comments\">\n                  有什么想问的？<br>\n                  有什么想说的？<br>\n                  有什么想吐槽的？<br>\n                  哪怕是有什么想吃的，都可以告诉我哦~<br>\n                </center>\n                <div class=\"bottomcontent\">\n                <img class=\"bottomimg\" src=\"https://ae01.alicdn.com/kf/U0968ee80fd5c4f05a02bdda9709b041eE.png\"/>\n                </div>\n                <p class=\"bottomhr\">自动书记人偶竭诚为您服务！</p>\n              </div>\n            </div>\n          </form>\n        </div><img id=\"afterimg\" src=\"https://drfs.ctcontents.com/file/14237530/741090660/ce3212/img/xf/1.png\"/>\n      </div>\n    </div>\n  </div>\n","source":"messageboard/index.md","raw":"\n---\n\ntitle: 留言板\n\ndate: 2022-09-30 09:00:05\n\ntype: messageboard\n\ntop_img: https://s2.loli.net/2022/11/04/cJoWvz81e73ljp6.webp\n\n---\n\n<link href=\"/css/liuyanban.css\" rel=\"stylesheet\" type=\"text/css\"/>\n\n  <div id=\"computer\">\n    <div id=\"maincontent\"><br>\n      <div id=\"form-wrap\"><img src=\"https://drfs.ctcontents.com/file/14237530/741091857/688faf/img/xf/2.png\" id=\"beforeimg\"/>\n        <div id=\"envelope\">\n          <form>\n            <div class=\"formmain\">\n              <img class=\"headerimg\" src=\"https://drfs.ctcontents.com/file/14237530/741090658/42ef53/img/xf/3.png\"/>\n              <div style=\"padding: 5px 20px;\">\n                <center>\n                  <h3 calss=\"title3\">太华  伽罗</h3>\n                </center>\n                <center class=\"comments\">\n                  有什么想问的？<br>\n                  有什么想说的？<br>\n                  有什么想吐槽的？<br>\n                  哪怕是有什么想吃的，都可以告诉我哦~<br>\n                </center>\n                <div class=\"bottomcontent\">\n                <img class=\"bottomimg\" src=\"https://ae01.alicdn.com/kf/U0968ee80fd5c4f05a02bdda9709b041eE.png\"/>\n                </div>\n                <p class=\"bottomhr\">自动书记人偶竭诚为您服务！</p>\n              </div>\n            </div>\n          </form>\n        </div><img id=\"afterimg\" src=\"https://drfs.ctcontents.com/file/14237530/741090660/ce3212/img/xf/1.png\"/>\n      </div>\n    </div>\n  </div>\n","updated":"2023-06-03T19:30:43.167Z","path":"messageboard/index.html","comments":1,"layout":"page","_id":"clipg086s0002rgwhhrn7fqsy","content":"<link href=\"/css/liuyanban.css\" rel=\"stylesheet\" type=\"text/css\"/>\n\n  <div id=\"computer\">\n    <div id=\"maincontent\"><br>\n      <div id=\"form-wrap\"><img src=\"https://drfs.ctcontents.com/file/14237530/741091857/688faf/img/xf/2.png\" id=\"beforeimg\"/>\n        <div id=\"envelope\">\n          <form>\n            <div class=\"formmain\">\n              <img class=\"headerimg\" src=\"https://drfs.ctcontents.com/file/14237530/741090658/42ef53/img/xf/3.png\"/>\n              <div style=\"padding: 5px 20px;\">\n                <center>\n                  <h3 calss=\"title3\">太华  伽罗</h3>\n                </center>\n                <center class=\"comments\">\n                  有什么想问的？<br>\n                  有什么想说的？<br>\n                  有什么想吐槽的？<br>\n                  哪怕是有什么想吃的，都可以告诉我哦~<br>\n                </center>\n                <div class=\"bottomcontent\">\n                <img class=\"bottomimg\" src=\"https://ae01.alicdn.com/kf/U0968ee80fd5c4f05a02bdda9709b041eE.png\"/>\n                </div>\n                <p class=\"bottomhr\">自动书记人偶竭诚为您服务！</p>\n              </div>\n            </div>\n          </form>\n        </div><img id=\"afterimg\" src=\"https://drfs.ctcontents.com/file/14237530/741090660/ce3212/img/xf/1.png\"/>\n      </div>\n    </div>\n  </div>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/77.jpg","excerpt":"","more":"<link href=\"/css/liuyanban.css\" rel=\"stylesheet\" type=\"text/css\"/>\n\n  <div id=\"computer\">\n    <div id=\"maincontent\"><br>\n      <div id=\"form-wrap\"><img src=\"https://drfs.ctcontents.com/file/14237530/741091857/688faf/img/xf/2.png\" id=\"beforeimg\"/>\n        <div id=\"envelope\">\n          <form>\n            <div class=\"formmain\">\n              <img class=\"headerimg\" src=\"https://drfs.ctcontents.com/file/14237530/741090658/42ef53/img/xf/3.png\"/>\n              <div style=\"padding: 5px 20px;\">\n                <center>\n                  <h3 calss=\"title3\">太华  伽罗</h3>\n                </center>\n                <center class=\"comments\">\n                  有什么想问的？<br>\n                  有什么想说的？<br>\n                  有什么想吐槽的？<br>\n                  哪怕是有什么想吃的，都可以告诉我哦~<br>\n                </center>\n                <div class=\"bottomcontent\">\n                <img class=\"bottomimg\" src=\"https://ae01.alicdn.com/kf/U0968ee80fd5c4f05a02bdda9709b041eE.png\"/>\n                </div>\n                <p class=\"bottomhr\">自动书记人偶竭诚为您服务！</p>\n              </div>\n            </div>\n          </form>\n        </div><img id=\"afterimg\" src=\"https://drfs.ctcontents.com/file/14237530/741090660/ce3212/img/xf/1.png\"/>\n      </div>\n    </div>\n  </div>\n"},{"title":"友情链接","date":"2018-06-07T14:17:49.000Z","type":"link","top_img":"https://s2.loli.net/2022/11/04/GOKblJF1BMpWvYf.webp","aside":false,"_content":"\n***\n\n如果你想把自己的网页也新增到`我的博客`页面里\n\n\n>1. 博客名称：biubiu\n>2. 博客链接：https://why862555625.github.io/\n>3. logo地址：https://why862555625.github.io/img/favicon.webp\n>4. 博客介绍：千里之行，始于足下。\n\n邮箱：1400000222@qq.com\n\n~~~html\n    - name: biubiu\n      link: https://why862555625.github.io/\n      avatar: https://why862555625.github.io/img/favicon.webp\n      descr: 千里之行，始于足下。\n~~~\n\n\n<div class=\"addBtn\"><button onclick=\"leonus.linkCom()\"><i class=\"fa-solid fa-circle-plus\"></i>快速申请 (默认样式)</button> <button onclick=\"leonus.linkCom(&quot;bf&quot;)\"><i class=\"fa-solid fa-circle-plus\"></i>快速申请 (Butterfly)</button></div>\n\n<script src=\"/js/twikookstx.js\"></script>\n\n<style>\n.addBtn {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n}\n.addBtn button {\n    transtion: .2s;\n    display: flex;\n    margin: 5px auto;\n    color: var(--global-bg);\n    padding: 15px;\n    border-radius: 12px;\n    background: var(--search-result-title);\n    align-items: center;\n}\n\nbutton {\n    padding: 0;\n    outline: 0;\n    border: none;\n    background: 0 0;\n    cursor: pointer;\n    touch-action: manipulation;\n}\n.fa-solid, .fas {\n    font-family: \"Font Awesome 6 Free\";\n    font-weight: 900;\n}\n.addBtn i {\n    font-size: 1.3rem;\n    margin-right: 10px;\n}\n.addBtn button:hover {\n    background: #4b7aff;\n    color: #fff;\n}\n</style>\n\n","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2018-06-07 22:17:49\ntype: \"link\"\ntop_img: https://s2.loli.net/2022/11/04/GOKblJF1BMpWvYf.webp\naside: false\n---\n\n***\n\n如果你想把自己的网页也新增到`我的博客`页面里\n\n\n>1. 博客名称：biubiu\n>2. 博客链接：https://why862555625.github.io/\n>3. logo地址：https://why862555625.github.io/img/favicon.webp\n>4. 博客介绍：千里之行，始于足下。\n\n邮箱：1400000222@qq.com\n\n~~~html\n    - name: biubiu\n      link: https://why862555625.github.io/\n      avatar: https://why862555625.github.io/img/favicon.webp\n      descr: 千里之行，始于足下。\n~~~\n\n\n<div class=\"addBtn\"><button onclick=\"leonus.linkCom()\"><i class=\"fa-solid fa-circle-plus\"></i>快速申请 (默认样式)</button> <button onclick=\"leonus.linkCom(&quot;bf&quot;)\"><i class=\"fa-solid fa-circle-plus\"></i>快速申请 (Butterfly)</button></div>\n\n<script src=\"/js/twikookstx.js\"></script>\n\n<style>\n.addBtn {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n}\n.addBtn button {\n    transtion: .2s;\n    display: flex;\n    margin: 5px auto;\n    color: var(--global-bg);\n    padding: 15px;\n    border-radius: 12px;\n    background: var(--search-result-title);\n    align-items: center;\n}\n\nbutton {\n    padding: 0;\n    outline: 0;\n    border: none;\n    background: 0 0;\n    cursor: pointer;\n    touch-action: manipulation;\n}\n.fa-solid, .fas {\n    font-family: \"Font Awesome 6 Free\";\n    font-weight: 900;\n}\n.addBtn i {\n    font-size: 1.3rem;\n    margin-right: 10px;\n}\n.addBtn button:hover {\n    background: #4b7aff;\n    color: #fff;\n}\n</style>\n\n","updated":"2023-06-03T19:30:43.167Z","path":"link/index.html","comments":1,"layout":"page","_id":"clipg086w0006rgwhcbkk2f54","content":"<hr>\n<p>如果你想把自己的网页也新增到<code>我的博客</code>页面里</p>\n<blockquote>\n<ol>\n<li>博客名称：biubiu</li>\n<li>博客链接：<a href=\"https://why862555625.github.io/\">https://why862555625.github.io/</a></li>\n<li>logo地址：<a href=\"https://why862555625.github.io/img/favicon.webp\">https://why862555625.github.io/img/favicon.webp</a></li>\n<li>博客介绍：千里之行，始于足下。</li>\n</ol>\n</blockquote>\n<p>邮箱：<a href=\"mailto:&#x31;&#x34;&#48;&#x30;&#x30;&#48;&#48;&#x32;&#50;&#x32;&#x40;&#113;&#x71;&#x2e;&#x63;&#111;&#x6d;\">&#x31;&#x34;&#48;&#x30;&#x30;&#48;&#48;&#x32;&#50;&#x32;&#x40;&#113;&#x71;&#x2e;&#x63;&#111;&#x6d;</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- name: biubiu</span><br><span class=\"line\">  link: https://why862555625.github.io/</span><br><span class=\"line\">  avatar: https://why862555625.github.io/img/favicon.webp</span><br><span class=\"line\">  descr: 千里之行，始于足下。</span><br></pre></td></tr></table></figure>\n\n\n<div class=\"addBtn\"><button onclick=\"leonus.linkCom()\"><i class=\"fa-solid fa-circle-plus\"></i>快速申请 (默认样式)</button> <button onclick=\"leonus.linkCom(&quot;bf&quot;)\"><i class=\"fa-solid fa-circle-plus\"></i>快速申请 (Butterfly)</button></div>\n\n<script src=\"/js/twikookstx.js\"></script>\n\n<style>\n.addBtn {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n}\n.addBtn button {\n    transtion: .2s;\n    display: flex;\n    margin: 5px auto;\n    color: var(--global-bg);\n    padding: 15px;\n    border-radius: 12px;\n    background: var(--search-result-title);\n    align-items: center;\n}\n\nbutton {\n    padding: 0;\n    outline: 0;\n    border: none;\n    background: 0 0;\n    cursor: pointer;\n    touch-action: manipulation;\n}\n.fa-solid, .fas {\n    font-family: \"Font Awesome 6 Free\";\n    font-weight: 900;\n}\n.addBtn i {\n    font-size: 1.3rem;\n    margin-right: 10px;\n}\n.addBtn button:hover {\n    background: #4b7aff;\n    color: #fff;\n}\n</style>\n\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/66.jpg","excerpt":"","more":"<hr>\n<p>如果你想把自己的网页也新增到<code>我的博客</code>页面里</p>\n<blockquote>\n<ol>\n<li>博客名称：biubiu</li>\n<li>博客链接：<a href=\"https://why862555625.github.io/\">https://why862555625.github.io/</a></li>\n<li>logo地址：<a href=\"https://why862555625.github.io/img/favicon.webp\">https://why862555625.github.io/img/favicon.webp</a></li>\n<li>博客介绍：千里之行，始于足下。</li>\n</ol>\n</blockquote>\n<p>邮箱：<a href=\"mailto:&#x31;&#x34;&#48;&#x30;&#x30;&#48;&#48;&#x32;&#50;&#x32;&#x40;&#113;&#x71;&#x2e;&#x63;&#111;&#x6d;\">&#x31;&#x34;&#48;&#x30;&#x30;&#48;&#48;&#x32;&#50;&#x32;&#x40;&#113;&#x71;&#x2e;&#x63;&#111;&#x6d;</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- name: biubiu</span><br><span class=\"line\">  link: https://why862555625.github.io/</span><br><span class=\"line\">  avatar: https://why862555625.github.io/img/favicon.webp</span><br><span class=\"line\">  descr: 千里之行，始于足下。</span><br></pre></td></tr></table></figure>\n\n\n<div class=\"addBtn\"><button onclick=\"leonus.linkCom()\"><i class=\"fa-solid fa-circle-plus\"></i>快速申请 (默认样式)</button> <button onclick=\"leonus.linkCom(&quot;bf&quot;)\"><i class=\"fa-solid fa-circle-plus\"></i>快速申请 (Butterfly)</button></div>\n\n<script src=\"/js/twikookstx.js\"></script>\n\n<style>\n.addBtn {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n}\n.addBtn button {\n    transtion: .2s;\n    display: flex;\n    margin: 5px auto;\n    color: var(--global-bg);\n    padding: 15px;\n    border-radius: 12px;\n    background: var(--search-result-title);\n    align-items: center;\n}\n\nbutton {\n    padding: 0;\n    outline: 0;\n    border: none;\n    background: 0 0;\n    cursor: pointer;\n    touch-action: manipulation;\n}\n.fa-solid, .fas {\n    font-family: \"Font Awesome 6 Free\";\n    font-weight: 900;\n}\n.addBtn i {\n    font-size: 1.3rem;\n    margin-right: 10px;\n}\n.addBtn button:hover {\n    background: #4b7aff;\n    color: #fff;\n}\n</style>\n\n"},{"title":"分类","date":"2022-07-30T00:54:29.000Z","layout":"categories","type":"categories","top_img":"https://s2.loli.net/2022/11/04/opmhQGMbSktden5.jpg","comments":1,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-07-30 08:54:29\nlayout: \"categories\"\ntype: \"categories\"\ntop_img: https://s2.loli.net/2022/11/04/opmhQGMbSktden5.jpg\ncomments: true\n---\n","updated":"2023-06-03T19:30:43.166Z","path":"categories/index.html","_id":"clipg086x0008rgwh82dg6cip","content":"","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/77.jpg","excerpt":"","more":""},{"title":"notice","comments":0,"date":"2023-01-10T12:36:53.000Z","reward":null,"description":null,"top_img":null,"_content":"{% timeline 2022,blue %}\n<!-- timeline 01-02 -->\n主题开源自己研究\n开源地址：[plasx520/blog-butterfly: hexo静态博客butterfly魔改主题 (github.com)](https://github.com/plasx520/blog-butterfly)\n\n<!-- endtimeline -->\n{% endtimeline %}\n{% timeline 2022,blue %}\n<!-- timeline 01-02 -->\n這是測試頁面\n<!-- endtimeline -->\n{% endtimeline %}\n","source":"notice/index.md","raw":"---\ntitle: notice\ncomments: false\ndate: 2023-01-10 20:36:53\nreward:\ndescription:\ntop_img:\n---\n{% timeline 2022,blue %}\n<!-- timeline 01-02 -->\n主题开源自己研究\n开源地址：[plasx520/blog-butterfly: hexo静态博客butterfly魔改主题 (github.com)](https://github.com/plasx520/blog-butterfly)\n\n<!-- endtimeline -->\n{% endtimeline %}\n{% timeline 2022,blue %}\n<!-- timeline 01-02 -->\n這是測試頁面\n<!-- endtimeline -->\n{% endtimeline %}\n","updated":"2023-06-03T19:30:43.168Z","path":"notice/index.html","layout":"page","_id":"clipg086y000argwhf32e1evv","content":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p>\n</div></div><div class='timeline-item-content'><p>主题开源自己研究<br>开源地址：<a href=\"https://github.com/plasx520/blog-butterfly\">plasx520/blog-butterfly: hexo静态博客butterfly魔改主题 (github.com)</a></p>\n</div></div></div>\n<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p>\n</div></div><div class='timeline-item-content'><p>這是測試頁面</p>\n</div></div></div>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/112.jpg","excerpt":"","more":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p>\n</div></div><div class='timeline-item-content'><p>主题开源自己研究<br>开源地址：<a href=\"https://github.com/plasx520/blog-butterfly\">plasx520/blog-butterfly: hexo静态博客butterfly魔改主题 (github.com)</a></p>\n</div></div></div>\n<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p>\n</div></div><div class='timeline-item-content'><p>這是測試頁面</p>\n</div></div></div>\n"},{"comments":1,"aside":false,"_content":"\n\n<style type=\"text/css\">#page{background:transparent;}</style> \n\n\n\n{% meting \"60198\" \"netease\" \"playlist\" \"autoplay\" \"mutex:false\" \"listfolded\" \"listmaxheight:340px\" \"preload:none\" \"theme:#ad7a86\"%}","source":"music/index.md","raw":"---\ncomments: true\naside: false\n---\n\n\n<style type=\"text/css\">#page{background:transparent;}</style> \n\n\n\n{% meting \"60198\" \"netease\" \"playlist\" \"autoplay\" \"mutex:false\" \"listfolded\" \"listmaxheight:340px\" \"preload:none\" \"theme:#ad7a86\"%}","date":"2023-06-03T19:30:43.168Z","updated":"2023-06-03T19:30:43.167Z","path":"music/index.html","title":"","layout":"page","_id":"clipg0870000ergwh3f395uk9","content":"<style type=\"text/css\">#page{background:transparent;}</style> \n\n\n\n\n    <div id=\"aplayer-pcjuRhIg\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"60198\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"false\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\" data-listfolded=\"true\"\n    ></div>","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/112.jpg","excerpt":"","more":"<style type=\"text/css\">#page{background:transparent;}</style> \n\n\n\n\n    <div id=\"aplayer-pcjuRhIg\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"60198\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"false\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\" data-listfolded=\"true\"\n    ></div>"},{"title":"标签","date":"2022-07-30T00:45:06.000Z","layout":"tags","type":"tags","top_img":"https://s2.loli.net/2022/11/04/cAlqtEg5UZv8DW7.webp","comments":1,"_content":"\n\n","source":"tags/index.md","raw":"---\n\ntitle: 标签 \n\ndate: 2022-07-30 08:45:06 \nlayout: tags\ntype: tags \ntop_img: https://s2.loli.net/2022/11/04/cAlqtEg5UZv8DW7.webp\ncomments: true\n\n---\n\n\n","updated":"2023-06-03T19:30:43.169Z","path":"tags/index.html","_id":"clipg0871000grgwhcv7f67kr","content":"","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/66.jpg","excerpt":"","more":""},{"_content":"/* eslint-disable no-undef */\ndocument.addEventListener('DOMContentLoaded', function () {\n  const translate = GLOBAL_CONFIG.translate\n  const snackbarData = GLOBAL_CONFIG.Snackbar\n  const defaultEncoding = translate.defaultEncoding // 網站默認語言，1: 繁體中文, 2: 簡體中文\n  const translateDelay = translate.translateDelay // 延遲時間,若不在前, 要設定延遲翻譯時間, 如100表示100ms,默認為0\n  const msgToTraditionalChinese = translate.msgToTraditionalChinese // 此處可以更改為你想要顯示的文字\n  const msgToSimplifiedChinese = translate.msgToSimplifiedChinese // 同上，但兩處均不建議更改\n  let currentEncoding = defaultEncoding\n  const targetEncodingCookie = 'translate-chn-cht'\n  let targetEncoding =\n  saveToLocal.get(targetEncodingCookie) === undefined\n    ? defaultEncoding\n    : Number(saveToLocal.get('translate-chn-cht'))\n  let translateButtonObject\n  const isSnackbar = GLOBAL_CONFIG.Snackbar !== undefined\n\n  function translateText (txt) {\n    if (txt === '' || txt == null) return ''\n    if (currentEncoding === 1 && targetEncoding === 2) return Simplized(txt)\n    else if (currentEncoding === 2 && targetEncoding === 1) { return Traditionalized(txt) } else return txt\n  }\n  function translateBody (fobj) {\n    let objs\n    if (typeof fobj === 'object') objs = fobj.childNodes\n    else objs = document.body.childNodes\n    for (let i = 0; i < objs.length; i++) {\n      const obj = objs.item(i)\n      if (\n        '||BR|HR|'.indexOf('|' + obj.tagName + '|') > 0 ||\n      obj === translateButtonObject\n      ) { continue }\n      if (obj.title !== '' && obj.title != null) { obj.title = translateText(obj.title) }\n      if (obj.alt !== '' && obj.alt != null) obj.alt = translateText(obj.alt)\n      if (obj.placeholder !== '' && obj.placeholder != null) obj.placeholder = translateText(obj.placeholder)\n      if (\n        obj.tagName === 'INPUT' &&\n      obj.value !== '' &&\n      obj.type !== 'text' &&\n      obj.type !== 'hidden'\n      ) { obj.value = translateText(obj.value) }\n      if (obj.nodeType === 3) obj.data = translateText(obj.data)\n      else translateBody(obj)\n    }\n  }\n  function translatePage () {\n    if (targetEncoding === 1) {\n      currentEncoding = 1\n      targetEncoding = 2\n      translateButtonObject.innerHTML = msgToTraditionalChinese\n      saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n      translateBody()\n      if (isSnackbar) btf.snackbarShow(snackbarData.cht_to_chs)\n    } else if (targetEncoding === 2) {\n      currentEncoding = 2\n      targetEncoding = 1\n      translateButtonObject.innerHTML = msgToSimplifiedChinese\n      saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n      translateBody()\n      if (isSnackbar) btf.snackbarShow(snackbarData.chs_to_cht)\n    }\n  }\n  function JTPYStr () {\n    return '万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾'\n  }\n  function FTPYStr () {\n    return '萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽'\n  }\n  window.Traditionalized = (cc) => {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && ss.indexOf(cc.charAt(i)) !== -1) { str += tt.charAt(ss.indexOf(cc.charAt(i))) } else str += cc.charAt(i)\n    }\n    return str\n  }\n  function Simplized (cc) {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && tt.indexOf(cc.charAt(i)) !== -1) { str += ss.charAt(tt.indexOf(cc.charAt(i))) } else str += cc.charAt(i)\n    }\n    return str\n  }\n  function translateInitialization () {\n    translateButtonObject = document.getElementById('translateLink')\n    if (translateButtonObject) {\n      if (currentEncoding !== targetEncoding) {\n        setTimeout(translateBody, translateDelay)\n        if (targetEncoding === 1) translateButtonObject.innerHTML = msgToSimplifiedChinese\n        else translateButtonObject.innerHTML = msgToTraditionalChinese\n      }\n      translateButtonObject.addEventListener('click', translatePage, false)\n    }\n  }\n  translateInitialization()\n  document.addEventListener('pjax:complete', translateInitialization)\n})","source":"selfjs/tw_cn.js","raw":"/* eslint-disable no-undef */\ndocument.addEventListener('DOMContentLoaded', function () {\n  const translate = GLOBAL_CONFIG.translate\n  const snackbarData = GLOBAL_CONFIG.Snackbar\n  const defaultEncoding = translate.defaultEncoding // 網站默認語言，1: 繁體中文, 2: 簡體中文\n  const translateDelay = translate.translateDelay // 延遲時間,若不在前, 要設定延遲翻譯時間, 如100表示100ms,默認為0\n  const msgToTraditionalChinese = translate.msgToTraditionalChinese // 此處可以更改為你想要顯示的文字\n  const msgToSimplifiedChinese = translate.msgToSimplifiedChinese // 同上，但兩處均不建議更改\n  let currentEncoding = defaultEncoding\n  const targetEncodingCookie = 'translate-chn-cht'\n  let targetEncoding =\n  saveToLocal.get(targetEncodingCookie) === undefined\n    ? defaultEncoding\n    : Number(saveToLocal.get('translate-chn-cht'))\n  let translateButtonObject\n  const isSnackbar = GLOBAL_CONFIG.Snackbar !== undefined\n\n  function translateText (txt) {\n    if (txt === '' || txt == null) return ''\n    if (currentEncoding === 1 && targetEncoding === 2) return Simplized(txt)\n    else if (currentEncoding === 2 && targetEncoding === 1) { return Traditionalized(txt) } else return txt\n  }\n  function translateBody (fobj) {\n    let objs\n    if (typeof fobj === 'object') objs = fobj.childNodes\n    else objs = document.body.childNodes\n    for (let i = 0; i < objs.length; i++) {\n      const obj = objs.item(i)\n      if (\n        '||BR|HR|'.indexOf('|' + obj.tagName + '|') > 0 ||\n      obj === translateButtonObject\n      ) { continue }\n      if (obj.title !== '' && obj.title != null) { obj.title = translateText(obj.title) }\n      if (obj.alt !== '' && obj.alt != null) obj.alt = translateText(obj.alt)\n      if (obj.placeholder !== '' && obj.placeholder != null) obj.placeholder = translateText(obj.placeholder)\n      if (\n        obj.tagName === 'INPUT' &&\n      obj.value !== '' &&\n      obj.type !== 'text' &&\n      obj.type !== 'hidden'\n      ) { obj.value = translateText(obj.value) }\n      if (obj.nodeType === 3) obj.data = translateText(obj.data)\n      else translateBody(obj)\n    }\n  }\n  function translatePage () {\n    if (targetEncoding === 1) {\n      currentEncoding = 1\n      targetEncoding = 2\n      translateButtonObject.innerHTML = msgToTraditionalChinese\n      saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n      translateBody()\n      if (isSnackbar) btf.snackbarShow(snackbarData.cht_to_chs)\n    } else if (targetEncoding === 2) {\n      currentEncoding = 2\n      targetEncoding = 1\n      translateButtonObject.innerHTML = msgToSimplifiedChinese\n      saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n      translateBody()\n      if (isSnackbar) btf.snackbarShow(snackbarData.chs_to_cht)\n    }\n  }\n  function JTPYStr () {\n    return '万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾'\n  }\n  function FTPYStr () {\n    return '萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽'\n  }\n  window.Traditionalized = (cc) => {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && ss.indexOf(cc.charAt(i)) !== -1) { str += tt.charAt(ss.indexOf(cc.charAt(i))) } else str += cc.charAt(i)\n    }\n    return str\n  }\n  function Simplized (cc) {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && tt.indexOf(cc.charAt(i)) !== -1) { str += ss.charAt(tt.indexOf(cc.charAt(i))) } else str += cc.charAt(i)\n    }\n    return str\n  }\n  function translateInitialization () {\n    translateButtonObject = document.getElementById('translateLink')\n    if (translateButtonObject) {\n      if (currentEncoding !== targetEncoding) {\n        setTimeout(translateBody, translateDelay)\n        if (targetEncoding === 1) translateButtonObject.innerHTML = msgToSimplifiedChinese\n        else translateButtonObject.innerHTML = msgToTraditionalChinese\n      }\n      translateButtonObject.addEventListener('click', translatePage, false)\n    }\n  }\n  translateInitialization()\n  document.addEventListener('pjax:complete', translateInitialization)\n})","date":"2023-06-03T19:30:43.169Z","updated":"2023-06-03T19:30:43.169Z","path":"selfjs/tw_cn.js","layout":"false","title":"","comments":1,"_id":"clipg0872000lrgwhd96ddsh8","content":"/* eslint-disable no-undef */\ndocument.addEventListener('DOMContentLoaded', function () {\n  const translate = GLOBAL_CONFIG.translate\n  const snackbarData = GLOBAL_CONFIG.Snackbar\n  const defaultEncoding = translate.defaultEncoding // 網站默認語言，1: 繁體中文, 2: 簡體中文\n  const translateDelay = translate.translateDelay // 延遲時間,若不在前, 要設定延遲翻譯時間, 如100表示100ms,默認為0\n  const msgToTraditionalChinese = translate.msgToTraditionalChinese // 此處可以更改為你想要顯示的文字\n  const msgToSimplifiedChinese = translate.msgToSimplifiedChinese // 同上，但兩處均不建議更改\n  let currentEncoding = defaultEncoding\n  const targetEncodingCookie = 'translate-chn-cht'\n  let targetEncoding =\n  saveToLocal.get(targetEncodingCookie) === undefined\n    ? defaultEncoding\n    : Number(saveToLocal.get('translate-chn-cht'))\n  let translateButtonObject\n  const isSnackbar = GLOBAL_CONFIG.Snackbar !== undefined\n\n  function translateText (txt) {\n    if (txt === '' || txt == null) return ''\n    if (currentEncoding === 1 && targetEncoding === 2) return Simplized(txt)\n    else if (currentEncoding === 2 && targetEncoding === 1) { return Traditionalized(txt) } else return txt\n  }\n  function translateBody (fobj) {\n    let objs\n    if (typeof fobj === 'object') objs = fobj.childNodes\n    else objs = document.body.childNodes\n    for (let i = 0; i < objs.length; i++) {\n      const obj = objs.item(i)\n      if (\n        '||BR|HR|'.indexOf('|' + obj.tagName + '|') > 0 ||\n      obj === translateButtonObject\n      ) { continue }\n      if (obj.title !== '' && obj.title != null) { obj.title = translateText(obj.title) }\n      if (obj.alt !== '' && obj.alt != null) obj.alt = translateText(obj.alt)\n      if (obj.placeholder !== '' && obj.placeholder != null) obj.placeholder = translateText(obj.placeholder)\n      if (\n        obj.tagName === 'INPUT' &&\n      obj.value !== '' &&\n      obj.type !== 'text' &&\n      obj.type !== 'hidden'\n      ) { obj.value = translateText(obj.value) }\n      if (obj.nodeType === 3) obj.data = translateText(obj.data)\n      else translateBody(obj)\n    }\n  }\n  function translatePage () {\n    if (targetEncoding === 1) {\n      currentEncoding = 1\n      targetEncoding = 2\n      translateButtonObject.innerHTML = msgToTraditionalChinese\n      saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n      translateBody()\n      if (isSnackbar) btf.snackbarShow(snackbarData.cht_to_chs)\n    } else if (targetEncoding === 2) {\n      currentEncoding = 2\n      targetEncoding = 1\n      translateButtonObject.innerHTML = msgToSimplifiedChinese\n      saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n      translateBody()\n      if (isSnackbar) btf.snackbarShow(snackbarData.chs_to_cht)\n    }\n  }\n  function JTPYStr () {\n    return '万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾'\n  }\n  function FTPYStr () {\n    return '萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽'\n  }\n  window.Traditionalized = (cc) => {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && ss.indexOf(cc.charAt(i)) !== -1) { str += tt.charAt(ss.indexOf(cc.charAt(i))) } else str += cc.charAt(i)\n    }\n    return str\n  }\n  function Simplized (cc) {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && tt.indexOf(cc.charAt(i)) !== -1) { str += ss.charAt(tt.indexOf(cc.charAt(i))) } else str += cc.charAt(i)\n    }\n    return str\n  }\n  function translateInitialization () {\n    translateButtonObject = document.getElementById('translateLink')\n    if (translateButtonObject) {\n      if (currentEncoding !== targetEncoding) {\n        setTimeout(translateBody, translateDelay)\n        if (targetEncoding === 1) translateButtonObject.innerHTML = msgToSimplifiedChinese\n        else translateButtonObject.innerHTML = msgToTraditionalChinese\n      }\n      translateButtonObject.addEventListener('click', translatePage, false)\n    }\n  }\n  translateInitialization()\n  document.addEventListener('pjax:complete', translateInitialization)\n})","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/112.jpg","excerpt":"","more":"/* eslint-disable no-undef */\ndocument.addEventListener('DOMContentLoaded', function () {\n  const translate = GLOBAL_CONFIG.translate\n  const snackbarData = GLOBAL_CONFIG.Snackbar\n  const defaultEncoding = translate.defaultEncoding // 網站默認語言，1: 繁體中文, 2: 簡體中文\n  const translateDelay = translate.translateDelay // 延遲時間,若不在前, 要設定延遲翻譯時間, 如100表示100ms,默認為0\n  const msgToTraditionalChinese = translate.msgToTraditionalChinese // 此處可以更改為你想要顯示的文字\n  const msgToSimplifiedChinese = translate.msgToSimplifiedChinese // 同上，但兩處均不建議更改\n  let currentEncoding = defaultEncoding\n  const targetEncodingCookie = 'translate-chn-cht'\n  let targetEncoding =\n  saveToLocal.get(targetEncodingCookie) === undefined\n    ? defaultEncoding\n    : Number(saveToLocal.get('translate-chn-cht'))\n  let translateButtonObject\n  const isSnackbar = GLOBAL_CONFIG.Snackbar !== undefined\n\n  function translateText (txt) {\n    if (txt === '' || txt == null) return ''\n    if (currentEncoding === 1 && targetEncoding === 2) return Simplized(txt)\n    else if (currentEncoding === 2 && targetEncoding === 1) { return Traditionalized(txt) } else return txt\n  }\n  function translateBody (fobj) {\n    let objs\n    if (typeof fobj === 'object') objs = fobj.childNodes\n    else objs = document.body.childNodes\n    for (let i = 0; i < objs.length; i++) {\n      const obj = objs.item(i)\n      if (\n        '||BR|HR|'.indexOf('|' + obj.tagName + '|') > 0 ||\n      obj === translateButtonObject\n      ) { continue }\n      if (obj.title !== '' && obj.title != null) { obj.title = translateText(obj.title) }\n      if (obj.alt !== '' && obj.alt != null) obj.alt = translateText(obj.alt)\n      if (obj.placeholder !== '' && obj.placeholder != null) obj.placeholder = translateText(obj.placeholder)\n      if (\n        obj.tagName === 'INPUT' &&\n      obj.value !== '' &&\n      obj.type !== 'text' &&\n      obj.type !== 'hidden'\n      ) { obj.value = translateText(obj.value) }\n      if (obj.nodeType === 3) obj.data = translateText(obj.data)\n      else translateBody(obj)\n    }\n  }\n  function translatePage () {\n    if (targetEncoding === 1) {\n      currentEncoding = 1\n      targetEncoding = 2\n      translateButtonObject.innerHTML = msgToTraditionalChinese\n      saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n      translateBody()\n      if (isSnackbar) btf.snackbarShow(snackbarData.cht_to_chs)\n    } else if (targetEncoding === 2) {\n      currentEncoding = 2\n      targetEncoding = 1\n      translateButtonObject.innerHTML = msgToSimplifiedChinese\n      saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n      translateBody()\n      if (isSnackbar) btf.snackbarShow(snackbarData.chs_to_cht)\n    }\n  }\n  function JTPYStr () {\n    return '万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾'\n  }\n  function FTPYStr () {\n    return '萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽'\n  }\n  window.Traditionalized = (cc) => {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && ss.indexOf(cc.charAt(i)) !== -1) { str += tt.charAt(ss.indexOf(cc.charAt(i))) } else str += cc.charAt(i)\n    }\n    return str\n  }\n  function Simplized (cc) {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && tt.indexOf(cc.charAt(i)) !== -1) { str += ss.charAt(tt.indexOf(cc.charAt(i))) } else str += cc.charAt(i)\n    }\n    return str\n  }\n  function translateInitialization () {\n    translateButtonObject = document.getElementById('translateLink')\n    if (translateButtonObject) {\n      if (currentEncoding !== targetEncoding) {\n        setTimeout(translateBody, translateDelay)\n        if (targetEncoding === 1) translateButtonObject.innerHTML = msgToSimplifiedChinese\n        else translateButtonObject.innerHTML = msgToTraditionalChinese\n      }\n      translateButtonObject.addEventListener('click', translatePage, false)\n    }\n  }\n  translateInitialization()\n  document.addEventListener('pjax:complete', translateInitialization)\n})"},{"title":"自言自語","date":"2020-09-15T16:58:58.000Z","comments":1,"reward":null,"description":null,"top_img":"https://s2.loli.net/2022/11/04/CvJl9TkY4LgEGP3.webp","type":"artitalk","_content":"","source":"talking/index.md","raw":"---\ntitle: 自言自語\ndate: 2020-09-16 00:58:58\ncomments: true\nreward:\ndescription:\ntop_img: https://s2.loli.net/2022/11/04/CvJl9TkY4LgEGP3.webp\ntype: artitalk\n---\n","updated":"2023-06-03T19:30:43.169Z","path":"talking/index.html","layout":"page","_id":"clipg0873000orgwh8cev9vjp","content":"","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/13.jpg","excerpt":"","more":""},{"title":"This is me","date":"2022-07-30T01:04:02.000Z","type":"myself","_content":"","source":"myself/index.md","raw":"---\ntitle: This is me\ndate: 2022-07-30 09:04:02\ntype: myself\n---\n","updated":"2023-06-03T19:30:43.168Z","path":"myself/index.html","comments":1,"layout":"page","_id":"clipg0874000urgwh3wobdec2","content":"","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/333.jpg","excerpt":"","more":""},{"_content":"window.addEventListener('load', () => {\n  let loadFlag = false\n  const openSearch = () => {\n    const bodyStyle = document.body.style\n    bodyStyle.width = '100%'\n    bodyStyle.overflow = 'hidden'\n    btf.animateIn(document.getElementById('search-mask'), 'to_show 0.5s')\n    btf.animateIn(document.querySelector('#local-search .search-dialog'), 'titleScale 0.5s')\n    setTimeout(() => { document.querySelector('#local-search-input input').focus() }, 100)\n    if (!loadFlag) {\n      search(GLOBAL_CONFIG.localSearch.path)\n      loadFlag = true\n    }\n    // shortcut: ESC\n    document.addEventListener('keydown', function f (event) {\n      if (event.code === 'Escape') {\n        closeSearch()\n        document.removeEventListener('keydown', f)\n      }\n    })\n  }\n\n  const closeSearch = () => {\n    const bodyStyle = document.body.style\n    bodyStyle.width = ''\n    bodyStyle.overflow = ''\n    btf.animateOut(document.querySelector('#local-search .search-dialog'), 'search_close .5s')\n    btf.animateOut(document.getElementById('search-mask'), 'to_hide 0.5s')\n  }\n\n  // click function\n  const searchClickFn = () => {\n    document.querySelector('#search-button > .search').addEventListener('click', openSearch)\n    document.getElementById('search-mask').addEventListener('click', closeSearch)\n    document.querySelector('#local-search .search-close-button').addEventListener('click', closeSearch)\n  }\n\n  searchClickFn()\n\n  // pjax\n  window.addEventListener('pjax:complete', function () {\n    getComputedStyle(document.querySelector('#local-search .search-dialog')).display === 'block' && closeSearch()\n    searchClickFn()\n  })\n\n  async function search (path) {\n    let datas = []\n    const typeF = path.split('.')[1]\n    const response = await fetch(GLOBAL_CONFIG.root + path)\n    if (typeF === 'json') {\n      datas = await response.json()\n    } else if (typeF === 'xml') {\n      const res = await response.text()\n      const t = await new window.DOMParser().parseFromString(res, 'text/xml')\n      const a = await t\n      datas = [...a.querySelectorAll('entry')].map(function (item) {\n        return {\n          title: item.querySelector('title').textContent,\n          content: item.querySelector('content').textContent,\n          url: item.querySelector('url').textContent\n        }\n      })\n    }\n    if (response.ok) {\n      const $loadDataItem = document.getElementById('loading-database')\n      $loadDataItem.nextElementSibling.style.display = 'block'\n      $loadDataItem.remove()\n    }\n\n    const $input = document.querySelector('#local-search-input input')\n    const $resultContent = document.getElementById('local-search-results')\n    const $loadingStatus = document.getElementById('loading-status')\n    $input.addEventListener('input', function () {\n      const keywords = Traditionalized(this.value).trim().toLowerCase().split(/[\\s]+/)\n      if (keywords[0] !== '') $loadingStatus.innerHTML = '<i class=\"fas fa-spinner fa-pulse\"></i>'\n\n      $resultContent.innerHTML = ''\n      let str = '<div class=\"search-result-list\">'\n      if (this.value.trim().length <= 0) return\n      let count = 0\n      // perform local searching\n      datas.forEach(function (data) {\n        let isMatch = true\n        if (!data.title || data.title.trim() === '') {\n          data.title = ''\n        }\n        let dataTitle = data.title.trim().toLowerCase()\n        const dataContent = data.content ? data.content.trim().replace(/<[^>]+>/g, '').toLowerCase() : ''\n        const dataUrl = data.url.startsWith('/') ? data.url : GLOBAL_CONFIG.root + data.url\n        let indexTitle = -1\n        let indexContent = -1\n        let firstOccur = -1\n        // only match artiles with not empty titles and contents\n        if (dataTitle !== '' || dataContent !== '') {\n          keywords.forEach(function (keyword, i) {\n            indexTitle = dataTitle.indexOf(keyword)\n            indexContent = dataContent.indexOf(keyword)\n            if (indexTitle < 0 && indexContent < 0) {\n              isMatch = false\n            } else {\n              if (indexContent < 0) {\n                indexContent = 0\n              }\n              if (i === 0) {\n                firstOccur = indexContent\n              }\n            }\n          })\n        } else {\n          isMatch = false\n        }\n\n        // show search results\n        if (isMatch) {\n          const content = data.content.trim().replace(/<[^>]+>/g, '')\n          if (firstOccur >= 0) {\n            // cut out 130 characters\n            // let start = firstOccur - 30 < 0 ? 0 : firstOccur - 30\n            // let end = firstOccur + 50 > content.length ? content.length : firstOccur + 50\n            let start = firstOccur - 30\n            let end = firstOccur + 100\n\n            if (start < 0) {\n              start = 0\n            }\n\n            if (start === 0) {\n              end = 100\n            }\n\n            if (end > content.length) {\n              end = content.length\n            }\n\n            let matchContent = content.substring(start, end)\n\n            // highlight all keywords\n            keywords.forEach(function (keyword) {\n              const regS = new RegExp(keyword, 'gi')\n              matchContent = matchContent.replace(regS, '<span class=\"search-keyword\">' + keyword + '</span>')\n              dataTitle = dataTitle.replace(regS, '<span class=\"search-keyword\">' + keyword + '</span>')\n            })\n\n            str += '<div class=\"local-search__hit-item\"><a href=\"' + dataUrl + '\" class=\"search-result-title\">' + dataTitle + '</a>'\n            count += 1\n\n            if (dataContent !== '') {\n              str += '<p class=\"search-result\">' + matchContent + '...</p>'\n            }\n          }\n          str += '</div>'\n        }\n      })\n      if (count === 0) {\n        str += '<div id=\"local-search__hits-empty\">' + GLOBAL_CONFIG.localSearch.languages.hits_empty.replace(/\\$\\{query}/, this.value.trim()) +\n          '</div>'\n      }\n      str += '</div>'\n      $resultContent.innerHTML = str\n      if (keywords[0] !== '') $loadingStatus.innerHTML = ''\n      window.pjax && window.pjax.refresh($resultContent)\n    })\n  }\n})","source":"selfjs/localsearch.js","raw":"window.addEventListener('load', () => {\n  let loadFlag = false\n  const openSearch = () => {\n    const bodyStyle = document.body.style\n    bodyStyle.width = '100%'\n    bodyStyle.overflow = 'hidden'\n    btf.animateIn(document.getElementById('search-mask'), 'to_show 0.5s')\n    btf.animateIn(document.querySelector('#local-search .search-dialog'), 'titleScale 0.5s')\n    setTimeout(() => { document.querySelector('#local-search-input input').focus() }, 100)\n    if (!loadFlag) {\n      search(GLOBAL_CONFIG.localSearch.path)\n      loadFlag = true\n    }\n    // shortcut: ESC\n    document.addEventListener('keydown', function f (event) {\n      if (event.code === 'Escape') {\n        closeSearch()\n        document.removeEventListener('keydown', f)\n      }\n    })\n  }\n\n  const closeSearch = () => {\n    const bodyStyle = document.body.style\n    bodyStyle.width = ''\n    bodyStyle.overflow = ''\n    btf.animateOut(document.querySelector('#local-search .search-dialog'), 'search_close .5s')\n    btf.animateOut(document.getElementById('search-mask'), 'to_hide 0.5s')\n  }\n\n  // click function\n  const searchClickFn = () => {\n    document.querySelector('#search-button > .search').addEventListener('click', openSearch)\n    document.getElementById('search-mask').addEventListener('click', closeSearch)\n    document.querySelector('#local-search .search-close-button').addEventListener('click', closeSearch)\n  }\n\n  searchClickFn()\n\n  // pjax\n  window.addEventListener('pjax:complete', function () {\n    getComputedStyle(document.querySelector('#local-search .search-dialog')).display === 'block' && closeSearch()\n    searchClickFn()\n  })\n\n  async function search (path) {\n    let datas = []\n    const typeF = path.split('.')[1]\n    const response = await fetch(GLOBAL_CONFIG.root + path)\n    if (typeF === 'json') {\n      datas = await response.json()\n    } else if (typeF === 'xml') {\n      const res = await response.text()\n      const t = await new window.DOMParser().parseFromString(res, 'text/xml')\n      const a = await t\n      datas = [...a.querySelectorAll('entry')].map(function (item) {\n        return {\n          title: item.querySelector('title').textContent,\n          content: item.querySelector('content').textContent,\n          url: item.querySelector('url').textContent\n        }\n      })\n    }\n    if (response.ok) {\n      const $loadDataItem = document.getElementById('loading-database')\n      $loadDataItem.nextElementSibling.style.display = 'block'\n      $loadDataItem.remove()\n    }\n\n    const $input = document.querySelector('#local-search-input input')\n    const $resultContent = document.getElementById('local-search-results')\n    const $loadingStatus = document.getElementById('loading-status')\n    $input.addEventListener('input', function () {\n      const keywords = Traditionalized(this.value).trim().toLowerCase().split(/[\\s]+/)\n      if (keywords[0] !== '') $loadingStatus.innerHTML = '<i class=\"fas fa-spinner fa-pulse\"></i>'\n\n      $resultContent.innerHTML = ''\n      let str = '<div class=\"search-result-list\">'\n      if (this.value.trim().length <= 0) return\n      let count = 0\n      // perform local searching\n      datas.forEach(function (data) {\n        let isMatch = true\n        if (!data.title || data.title.trim() === '') {\n          data.title = ''\n        }\n        let dataTitle = data.title.trim().toLowerCase()\n        const dataContent = data.content ? data.content.trim().replace(/<[^>]+>/g, '').toLowerCase() : ''\n        const dataUrl = data.url.startsWith('/') ? data.url : GLOBAL_CONFIG.root + data.url\n        let indexTitle = -1\n        let indexContent = -1\n        let firstOccur = -1\n        // only match artiles with not empty titles and contents\n        if (dataTitle !== '' || dataContent !== '') {\n          keywords.forEach(function (keyword, i) {\n            indexTitle = dataTitle.indexOf(keyword)\n            indexContent = dataContent.indexOf(keyword)\n            if (indexTitle < 0 && indexContent < 0) {\n              isMatch = false\n            } else {\n              if (indexContent < 0) {\n                indexContent = 0\n              }\n              if (i === 0) {\n                firstOccur = indexContent\n              }\n            }\n          })\n        } else {\n          isMatch = false\n        }\n\n        // show search results\n        if (isMatch) {\n          const content = data.content.trim().replace(/<[^>]+>/g, '')\n          if (firstOccur >= 0) {\n            // cut out 130 characters\n            // let start = firstOccur - 30 < 0 ? 0 : firstOccur - 30\n            // let end = firstOccur + 50 > content.length ? content.length : firstOccur + 50\n            let start = firstOccur - 30\n            let end = firstOccur + 100\n\n            if (start < 0) {\n              start = 0\n            }\n\n            if (start === 0) {\n              end = 100\n            }\n\n            if (end > content.length) {\n              end = content.length\n            }\n\n            let matchContent = content.substring(start, end)\n\n            // highlight all keywords\n            keywords.forEach(function (keyword) {\n              const regS = new RegExp(keyword, 'gi')\n              matchContent = matchContent.replace(regS, '<span class=\"search-keyword\">' + keyword + '</span>')\n              dataTitle = dataTitle.replace(regS, '<span class=\"search-keyword\">' + keyword + '</span>')\n            })\n\n            str += '<div class=\"local-search__hit-item\"><a href=\"' + dataUrl + '\" class=\"search-result-title\">' + dataTitle + '</a>'\n            count += 1\n\n            if (dataContent !== '') {\n              str += '<p class=\"search-result\">' + matchContent + '...</p>'\n            }\n          }\n          str += '</div>'\n        }\n      })\n      if (count === 0) {\n        str += '<div id=\"local-search__hits-empty\">' + GLOBAL_CONFIG.localSearch.languages.hits_empty.replace(/\\$\\{query}/, this.value.trim()) +\n          '</div>'\n      }\n      str += '</div>'\n      $resultContent.innerHTML = str\n      if (keywords[0] !== '') $loadingStatus.innerHTML = ''\n      window.pjax && window.pjax.refresh($resultContent)\n    })\n  }\n})","date":"2023-06-03T19:30:43.168Z","updated":"2023-06-03T19:30:43.168Z","path":"selfjs/localsearch.js","layout":"false","title":"","comments":1,"_id":"clipg0874000xrgwh20j2crah","content":"window.addEventListener('load', () => {\n  let loadFlag = false\n  const openSearch = () => {\n    const bodyStyle = document.body.style\n    bodyStyle.width = '100%'\n    bodyStyle.overflow = 'hidden'\n    btf.animateIn(document.getElementById('search-mask'), 'to_show 0.5s')\n    btf.animateIn(document.querySelector('#local-search .search-dialog'), 'titleScale 0.5s')\n    setTimeout(() => { document.querySelector('#local-search-input input').focus() }, 100)\n    if (!loadFlag) {\n      search(GLOBAL_CONFIG.localSearch.path)\n      loadFlag = true\n    }\n    // shortcut: ESC\n    document.addEventListener('keydown', function f (event) {\n      if (event.code === 'Escape') {\n        closeSearch()\n        document.removeEventListener('keydown', f)\n      }\n    })\n  }\n\n  const closeSearch = () => {\n    const bodyStyle = document.body.style\n    bodyStyle.width = ''\n    bodyStyle.overflow = ''\n    btf.animateOut(document.querySelector('#local-search .search-dialog'), 'search_close .5s')\n    btf.animateOut(document.getElementById('search-mask'), 'to_hide 0.5s')\n  }\n\n  // click function\n  const searchClickFn = () => {\n    document.querySelector('#search-button > .search').addEventListener('click', openSearch)\n    document.getElementById('search-mask').addEventListener('click', closeSearch)\n    document.querySelector('#local-search .search-close-button').addEventListener('click', closeSearch)\n  }\n\n  searchClickFn()\n\n  // pjax\n  window.addEventListener('pjax:complete', function () {\n    getComputedStyle(document.querySelector('#local-search .search-dialog')).display === 'block' && closeSearch()\n    searchClickFn()\n  })\n\n  async function search (path) {\n    let datas = []\n    const typeF = path.split('.')[1]\n    const response = await fetch(GLOBAL_CONFIG.root + path)\n    if (typeF === 'json') {\n      datas = await response.json()\n    } else if (typeF === 'xml') {\n      const res = await response.text()\n      const t = await new window.DOMParser().parseFromString(res, 'text/xml')\n      const a = await t\n      datas = [...a.querySelectorAll('entry')].map(function (item) {\n        return {\n          title: item.querySelector('title').textContent,\n          content: item.querySelector('content').textContent,\n          url: item.querySelector('url').textContent\n        }\n      })\n    }\n    if (response.ok) {\n      const $loadDataItem = document.getElementById('loading-database')\n      $loadDataItem.nextElementSibling.style.display = 'block'\n      $loadDataItem.remove()\n    }\n\n    const $input = document.querySelector('#local-search-input input')\n    const $resultContent = document.getElementById('local-search-results')\n    const $loadingStatus = document.getElementById('loading-status')\n    $input.addEventListener('input', function () {\n      const keywords = Traditionalized(this.value).trim().toLowerCase().split(/[\\s]+/)\n      if (keywords[0] !== '') $loadingStatus.innerHTML = '<i class=\"fas fa-spinner fa-pulse\"></i>'\n\n      $resultContent.innerHTML = ''\n      let str = '<div class=\"search-result-list\">'\n      if (this.value.trim().length <= 0) return\n      let count = 0\n      // perform local searching\n      datas.forEach(function (data) {\n        let isMatch = true\n        if (!data.title || data.title.trim() === '') {\n          data.title = ''\n        }\n        let dataTitle = data.title.trim().toLowerCase()\n        const dataContent = data.content ? data.content.trim().replace(/<[^>]+>/g, '').toLowerCase() : ''\n        const dataUrl = data.url.startsWith('/') ? data.url : GLOBAL_CONFIG.root + data.url\n        let indexTitle = -1\n        let indexContent = -1\n        let firstOccur = -1\n        // only match artiles with not empty titles and contents\n        if (dataTitle !== '' || dataContent !== '') {\n          keywords.forEach(function (keyword, i) {\n            indexTitle = dataTitle.indexOf(keyword)\n            indexContent = dataContent.indexOf(keyword)\n            if (indexTitle < 0 && indexContent < 0) {\n              isMatch = false\n            } else {\n              if (indexContent < 0) {\n                indexContent = 0\n              }\n              if (i === 0) {\n                firstOccur = indexContent\n              }\n            }\n          })\n        } else {\n          isMatch = false\n        }\n\n        // show search results\n        if (isMatch) {\n          const content = data.content.trim().replace(/<[^>]+>/g, '')\n          if (firstOccur >= 0) {\n            // cut out 130 characters\n            // let start = firstOccur - 30 < 0 ? 0 : firstOccur - 30\n            // let end = firstOccur + 50 > content.length ? content.length : firstOccur + 50\n            let start = firstOccur - 30\n            let end = firstOccur + 100\n\n            if (start < 0) {\n              start = 0\n            }\n\n            if (start === 0) {\n              end = 100\n            }\n\n            if (end > content.length) {\n              end = content.length\n            }\n\n            let matchContent = content.substring(start, end)\n\n            // highlight all keywords\n            keywords.forEach(function (keyword) {\n              const regS = new RegExp(keyword, 'gi')\n              matchContent = matchContent.replace(regS, '<span class=\"search-keyword\">' + keyword + '</span>')\n              dataTitle = dataTitle.replace(regS, '<span class=\"search-keyword\">' + keyword + '</span>')\n            })\n\n            str += '<div class=\"local-search__hit-item\"><a href=\"' + dataUrl + '\" class=\"search-result-title\">' + dataTitle + '</a>'\n            count += 1\n\n            if (dataContent !== '') {\n              str += '<p class=\"search-result\">' + matchContent + '...</p>'\n            }\n          }\n          str += '</div>'\n        }\n      })\n      if (count === 0) {\n        str += '<div id=\"local-search__hits-empty\">' + GLOBAL_CONFIG.localSearch.languages.hits_empty.replace(/\\$\\{query}/, this.value.trim()) +\n          '</div>'\n      }\n      str += '</div>'\n      $resultContent.innerHTML = str\n      if (keywords[0] !== '') $loadingStatus.innerHTML = ''\n      window.pjax && window.pjax.refresh($resultContent)\n    })\n  }\n})","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/66.jpg","excerpt":"","more":"window.addEventListener('load', () => {\n  let loadFlag = false\n  const openSearch = () => {\n    const bodyStyle = document.body.style\n    bodyStyle.width = '100%'\n    bodyStyle.overflow = 'hidden'\n    btf.animateIn(document.getElementById('search-mask'), 'to_show 0.5s')\n    btf.animateIn(document.querySelector('#local-search .search-dialog'), 'titleScale 0.5s')\n    setTimeout(() => { document.querySelector('#local-search-input input').focus() }, 100)\n    if (!loadFlag) {\n      search(GLOBAL_CONFIG.localSearch.path)\n      loadFlag = true\n    }\n    // shortcut: ESC\n    document.addEventListener('keydown', function f (event) {\n      if (event.code === 'Escape') {\n        closeSearch()\n        document.removeEventListener('keydown', f)\n      }\n    })\n  }\n\n  const closeSearch = () => {\n    const bodyStyle = document.body.style\n    bodyStyle.width = ''\n    bodyStyle.overflow = ''\n    btf.animateOut(document.querySelector('#local-search .search-dialog'), 'search_close .5s')\n    btf.animateOut(document.getElementById('search-mask'), 'to_hide 0.5s')\n  }\n\n  // click function\n  const searchClickFn = () => {\n    document.querySelector('#search-button > .search').addEventListener('click', openSearch)\n    document.getElementById('search-mask').addEventListener('click', closeSearch)\n    document.querySelector('#local-search .search-close-button').addEventListener('click', closeSearch)\n  }\n\n  searchClickFn()\n\n  // pjax\n  window.addEventListener('pjax:complete', function () {\n    getComputedStyle(document.querySelector('#local-search .search-dialog')).display === 'block' && closeSearch()\n    searchClickFn()\n  })\n\n  async function search (path) {\n    let datas = []\n    const typeF = path.split('.')[1]\n    const response = await fetch(GLOBAL_CONFIG.root + path)\n    if (typeF === 'json') {\n      datas = await response.json()\n    } else if (typeF === 'xml') {\n      const res = await response.text()\n      const t = await new window.DOMParser().parseFromString(res, 'text/xml')\n      const a = await t\n      datas = [...a.querySelectorAll('entry')].map(function (item) {\n        return {\n          title: item.querySelector('title').textContent,\n          content: item.querySelector('content').textContent,\n          url: item.querySelector('url').textContent\n        }\n      })\n    }\n    if (response.ok) {\n      const $loadDataItem = document.getElementById('loading-database')\n      $loadDataItem.nextElementSibling.style.display = 'block'\n      $loadDataItem.remove()\n    }\n\n    const $input = document.querySelector('#local-search-input input')\n    const $resultContent = document.getElementById('local-search-results')\n    const $loadingStatus = document.getElementById('loading-status')\n    $input.addEventListener('input', function () {\n      const keywords = Traditionalized(this.value).trim().toLowerCase().split(/[\\s]+/)\n      if (keywords[0] !== '') $loadingStatus.innerHTML = '<i class=\"fas fa-spinner fa-pulse\"></i>'\n\n      $resultContent.innerHTML = ''\n      let str = '<div class=\"search-result-list\">'\n      if (this.value.trim().length <= 0) return\n      let count = 0\n      // perform local searching\n      datas.forEach(function (data) {\n        let isMatch = true\n        if (!data.title || data.title.trim() === '') {\n          data.title = ''\n        }\n        let dataTitle = data.title.trim().toLowerCase()\n        const dataContent = data.content ? data.content.trim().replace(/<[^>]+>/g, '').toLowerCase() : ''\n        const dataUrl = data.url.startsWith('/') ? data.url : GLOBAL_CONFIG.root + data.url\n        let indexTitle = -1\n        let indexContent = -1\n        let firstOccur = -1\n        // only match artiles with not empty titles and contents\n        if (dataTitle !== '' || dataContent !== '') {\n          keywords.forEach(function (keyword, i) {\n            indexTitle = dataTitle.indexOf(keyword)\n            indexContent = dataContent.indexOf(keyword)\n            if (indexTitle < 0 && indexContent < 0) {\n              isMatch = false\n            } else {\n              if (indexContent < 0) {\n                indexContent = 0\n              }\n              if (i === 0) {\n                firstOccur = indexContent\n              }\n            }\n          })\n        } else {\n          isMatch = false\n        }\n\n        // show search results\n        if (isMatch) {\n          const content = data.content.trim().replace(/<[^>]+>/g, '')\n          if (firstOccur >= 0) {\n            // cut out 130 characters\n            // let start = firstOccur - 30 < 0 ? 0 : firstOccur - 30\n            // let end = firstOccur + 50 > content.length ? content.length : firstOccur + 50\n            let start = firstOccur - 30\n            let end = firstOccur + 100\n\n            if (start < 0) {\n              start = 0\n            }\n\n            if (start === 0) {\n              end = 100\n            }\n\n            if (end > content.length) {\n              end = content.length\n            }\n\n            let matchContent = content.substring(start, end)\n\n            // highlight all keywords\n            keywords.forEach(function (keyword) {\n              const regS = new RegExp(keyword, 'gi')\n              matchContent = matchContent.replace(regS, '<span class=\"search-keyword\">' + keyword + '</span>')\n              dataTitle = dataTitle.replace(regS, '<span class=\"search-keyword\">' + keyword + '</span>')\n            })\n\n            str += '<div class=\"local-search__hit-item\"><a href=\"' + dataUrl + '\" class=\"search-result-title\">' + dataTitle + '</a>'\n            count += 1\n\n            if (dataContent !== '') {\n              str += '<p class=\"search-result\">' + matchContent + '...</p>'\n            }\n          }\n          str += '</div>'\n        }\n      })\n      if (count === 0) {\n        str += '<div id=\"local-search__hits-empty\">' + GLOBAL_CONFIG.localSearch.languages.hits_empty.replace(/\\$\\{query}/, this.value.trim()) +\n          '</div>'\n      }\n      str += '</div>'\n      $resultContent.innerHTML = str\n      if (keywords[0] !== '') $loadingStatus.innerHTML = ''\n      window.pjax && window.pjax.refresh($resultContent)\n    })\n  }\n})"},{"title":"我的视频","date":"2020-07-17T12:54:09.000Z","comment":true,"top_img":false,"showToc":true,"aside":false,"type":"video","_content":"\n<script src=\"https://unpkg.com/jquery@latest/dist/jquery.min.js\"></script>\n<script>\nfunction selectVideo(id){\n    var src=$(\"#video-item-\"+id).attr(\"data-src\");\n    $(\"#video-select\").html(\"<iframe id='video-iframe' src='\"+src+\"' scrolling='no' border='0' frameborder='no' framespacing='0' allowfullscreen='true'> </iframe>\");\n    var iframe = document.getElementById(\"video-select\")\n    if(iframe.attachEvent){\n      iframe.attachEvent(\"onreadystatechange\", function() {\n        if (iframe.readyState === \"complete\" || iframe.readyState == \"loaded\") {\n          iframe.detachEvent(\"onreadystatechange\", arguments.callee);\n        if (document.getElementsByClassName('video-mirror').length>0) {\n          console.log(\"1true\")\n          $(\".video-mirror\").attr(\"style\",\"transform:scaleX(-1);\")\n          }\n        }\n      });\n    }else{\n      iframe.addEventListener(\"load\", function() {\n        this.removeEventListener(\"load\", arguments.call, false);\n      if (document.getElementsByClassName('video-mirror').length>0) {\n        console.log(\"2true\")\n        $(\".video-mirror\").attr(\"style\",\"transform:scaleX(-1);\")\n      }\n      }, false);\n    }\n}\n$(document).ready(selectVideo(0));\n</script>\n","source":"video/index.md","raw":"---\ntitle: 我的视频\ndate: 2020-07-17 20:54:09\ncomment: true\ntop_img: false\nshowToc: true\naside: false\ntype: \"video\"\n---\n\n<script src=\"https://unpkg.com/jquery@latest/dist/jquery.min.js\"></script>\n<script>\nfunction selectVideo(id){\n    var src=$(\"#video-item-\"+id).attr(\"data-src\");\n    $(\"#video-select\").html(\"<iframe id='video-iframe' src='\"+src+\"' scrolling='no' border='0' frameborder='no' framespacing='0' allowfullscreen='true'> </iframe>\");\n    var iframe = document.getElementById(\"video-select\")\n    if(iframe.attachEvent){\n      iframe.attachEvent(\"onreadystatechange\", function() {\n        if (iframe.readyState === \"complete\" || iframe.readyState == \"loaded\") {\n          iframe.detachEvent(\"onreadystatechange\", arguments.callee);\n        if (document.getElementsByClassName('video-mirror').length>0) {\n          console.log(\"1true\")\n          $(\".video-mirror\").attr(\"style\",\"transform:scaleX(-1);\")\n          }\n        }\n      });\n    }else{\n      iframe.addEventListener(\"load\", function() {\n        this.removeEventListener(\"load\", arguments.call, false);\n      if (document.getElementsByClassName('video-mirror').length>0) {\n        console.log(\"2true\")\n        $(\".video-mirror\").attr(\"style\",\"transform:scaleX(-1);\")\n      }\n      }, false);\n    }\n}\n$(document).ready(selectVideo(0));\n</script>\n","updated":"2023-06-03T19:30:43.170Z","path":"video/index.html","comments":1,"layout":"page","_id":"clipg08750012rgwh5npaggir","content":"<script src=\"https://unpkg.com/jquery@latest/dist/jquery.min.js\"></script>\n<script>\nfunction selectVideo(id){\n    var src=$(\"#video-item-\"+id).attr(\"data-src\");\n    $(\"#video-select\").html(\"<iframe id='video-iframe' src='\"+src+\"' scrolling='no' border='0' frameborder='no' framespacing='0' allowfullscreen='true'> </iframe>\");\n    var iframe = document.getElementById(\"video-select\")\n    if(iframe.attachEvent){\n      iframe.attachEvent(\"onreadystatechange\", function() {\n        if (iframe.readyState === \"complete\" || iframe.readyState == \"loaded\") {\n          iframe.detachEvent(\"onreadystatechange\", arguments.callee);\n        if (document.getElementsByClassName('video-mirror').length>0) {\n          console.log(\"1true\")\n          $(\".video-mirror\").attr(\"style\",\"transform:scaleX(-1);\")\n          }\n        }\n      });\n    }else{\n      iframe.addEventListener(\"load\", function() {\n        this.removeEventListener(\"load\", arguments.call, false);\n      if (document.getElementsByClassName('video-mirror').length>0) {\n        console.log(\"2true\")\n        $(\".video-mirror\").attr(\"style\",\"transform:scaleX(-1);\")\n      }\n      }, false);\n    }\n}\n$(document).ready(selectVideo(0));\n</script>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/333.jpg","excerpt":"","more":"<script src=\"https://unpkg.com/jquery@latest/dist/jquery.min.js\"></script>\n<script>\nfunction selectVideo(id){\n    var src=$(\"#video-item-\"+id).attr(\"data-src\");\n    $(\"#video-select\").html(\"<iframe id='video-iframe' src='\"+src+\"' scrolling='no' border='0' frameborder='no' framespacing='0' allowfullscreen='true'> </iframe>\");\n    var iframe = document.getElementById(\"video-select\")\n    if(iframe.attachEvent){\n      iframe.attachEvent(\"onreadystatechange\", function() {\n        if (iframe.readyState === \"complete\" || iframe.readyState == \"loaded\") {\n          iframe.detachEvent(\"onreadystatechange\", arguments.callee);\n        if (document.getElementsByClassName('video-mirror').length>0) {\n          console.log(\"1true\")\n          $(\".video-mirror\").attr(\"style\",\"transform:scaleX(-1);\")\n          }\n        }\n      });\n    }else{\n      iframe.addEventListener(\"load\", function() {\n        this.removeEventListener(\"load\", arguments.call, false);\n      if (document.getElementsByClassName('video-mirror').length>0) {\n        console.log(\"2true\")\n        $(\".video-mirror\").attr(\"style\",\"transform:scaleX(-1);\")\n      }\n      }, false);\n    }\n}\n$(document).ready(selectVideo(0));\n</script>\n"},{"title":"日志","date":"2022-01-04T16:00:00.000Z","top_img":"linear-gradient(-45deg,#ee7752,#ce3e75,#23a6d5,#23d5ab);background-size: 400% 400%; animation: gradientBG 15s ease infinite;","type":"timeline","_content":"","source":"timeline/index.md","raw":"---\ntitle: 日志\ndate: 2022-01-05 00:00:00\ntop_img:  'linear-gradient(-45deg,#ee7752,#ce3e75,#23a6d5,#23d5ab);background-size: 400% 400%; animation: gradientBG 15s ease infinite;'\ntype: timeline\n---\n","updated":"2023-06-03T19:30:43.169Z","path":"timeline/index.html","comments":1,"layout":"page","_id":"clipg08760015rgwh1gq24u5k","content":"","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/66.jpg","excerpt":"","more":""},{"title":"Gallery","date":"2019-10-24T14:23:55.000Z","comments":1,"reward":false,"description":"相册","aside":false,"top_img":"https://s2.loli.net/2022/11/04/y8rclikszbXZ7HK.webp","_content":"<div class=\"gallery-group-main\">\n{% galleryGroup '壁紙' '收藏的一些壁紙' '/xiance/wallpaper' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %}\n{% galleryGroup '漫威' '關於漫威的圖片' '/xiance/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %}\n{% galleryGroup 'OH MY GIRL' '關於OH MY GIRL的圖片' '/xiance/ohmygirl' https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %}\n\n\n</div>\n","source":"xiance/index.md","raw":"---\ntitle: Gallery\ndate: 2019-10-24 22:23:55\ncomments: true\nreward: false\ndescription: 相册\naside: false\ntop_img: https://s2.loli.net/2022/11/04/y8rclikszbXZ7HK.webp\n---\n<div class=\"gallery-group-main\">\n{% galleryGroup '壁紙' '收藏的一些壁紙' '/xiance/wallpaper' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %}\n{% galleryGroup '漫威' '關於漫威的圖片' '/xiance/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %}\n{% galleryGroup 'OH MY GIRL' '關於OH MY GIRL的圖片' '/xiance/ohmygirl' https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %}\n\n\n</div>\n","updated":"2023-06-03T19:30:43.170Z","path":"xiance/index.html","layout":"page","_id":"clipg0876001argwh4my88pl6","content":"<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">壁紙</div>\n  <p>收藏的一些壁紙</p>\n  <a href='/xiance/wallpaper'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">漫威</div>\n  <p>關於漫威的圖片</p>\n  <a href='/xiance/marvel'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">OH MY GIRL</div>\n  <p>關於OH MY GIRL的圖片</p>\n  <a href='/xiance/ohmygirl'></a>\n  </figcaption>\n  </figure>\n  \n\n\n</div>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/66.jpg","excerpt":"","more":"<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">壁紙</div>\n  <p>收藏的一些壁紙</p>\n  <a href='/xiance/wallpaper'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">漫威</div>\n  <p>關於漫威的圖片</p>\n  <a href='/xiance/marvel'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">OH MY GIRL</div>\n  <p>關於OH MY GIRL的圖片</p>\n  <a href='/xiance/ohmygirl'></a>\n  </figcaption>\n  </figure>\n  \n\n\n</div>\n"},{"title":"Gallery","date":"2019-10-24T14:23:55.000Z","comments":1,"reward":false,"description":"相册","aside":false,"top_img":"https://s2.loli.net/2022/11/04/y8rclikszbXZ7HK.webp","_content":"\n\n<div class=\"gallery-group-main\">\n{% galleryGroup '壁紙' '收藏的一些壁紙' '/xiance/wallpaper' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %}\n{% galleryGroup '漫威' '關於漫威的圖片' '/xiance/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %}\n{% galleryGroup 'OH MY GIRL' '關於OH MY GIRL的圖片' '/xiance/ohmygirl' https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %}\n</div>","source":"tuku/index.md","raw":"---\ntitle: Gallery\ndate: 2019-10-24 22:23:55\ncomments: true\nreward: false\ndescription: 相册\naside: false\ntop_img: https://s2.loli.net/2022/11/04/y8rclikszbXZ7HK.webp\n---\n\n\n<div class=\"gallery-group-main\">\n{% galleryGroup '壁紙' '收藏的一些壁紙' '/xiance/wallpaper' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %}\n{% galleryGroup '漫威' '關於漫威的圖片' '/xiance/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %}\n{% galleryGroup 'OH MY GIRL' '關於OH MY GIRL的圖片' '/xiance/ohmygirl' https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %}\n</div>","updated":"2023-06-03T19:30:43.170Z","path":"tuku/index.html","layout":"page","_id":"clipg0877001drgwhbqa62ij8","content":"<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">壁紙</div>\n  <p>收藏的一些壁紙</p>\n  <a href='/xiance/wallpaper'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">漫威</div>\n  <p>關於漫威的圖片</p>\n  <a href='/xiance/marvel'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">OH MY GIRL</div>\n  <p>關於OH MY GIRL的圖片</p>\n  <a href='/xiance/ohmygirl'></a>\n  </figcaption>\n  </figure>\n  \n</div>","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/66.jpg","excerpt":"","more":"<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">壁紙</div>\n  <p>收藏的一些壁紙</p>\n  <a href='/xiance/wallpaper'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">漫威</div>\n  <p>關於漫威的圖片</p>\n  <a href='/xiance/marvel'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">OH MY GIRL</div>\n  <p>關於OH MY GIRL的圖片</p>\n  <a href='/xiance/ohmygirl'></a>\n  </figcaption>\n  </figure>\n  \n</div>"},{"title":"Marvel","date":"2019-12-25T15:29:25.000Z","comments":1,"reward":false,"description":null,"top_img":"https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg","_content":"{% gallery %}\n![](https://i.loli.net/2019/12/25/Jj8FXuKVlOea4Ec.jpg)\n![](https://i.loli.net/2019/12/25/eqBGrXx9tWsZOao.jpg)\n![](https://i.loli.net/2019/12/25/LjW2CfNSD7OaY4v.jpg)\n![](https://i.loli.net/2019/12/25/pGIhaPjxtl438U9.jpg)\n![](https://i.loli.net/2019/12/25/hzjJBR2x5SEmsbC.jpg)\n![](https://i.loli.net/2019/12/25/ucNDmUqQkrFfAWv.jpg)\n![](https://i.loli.net/2019/12/25/oj1wAnGSKtFvXIJ.jpg)\n{% endgallery %}","source":"xiance/marvel/index.md","raw":"---\ntitle: Marvel\ndate: 2019-12-25 23:29:25\ncomments: true\nreward: false\ndescription:\ntop_img: https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg\n---\n{% gallery %}\n![](https://i.loli.net/2019/12/25/Jj8FXuKVlOea4Ec.jpg)\n![](https://i.loli.net/2019/12/25/eqBGrXx9tWsZOao.jpg)\n![](https://i.loli.net/2019/12/25/LjW2CfNSD7OaY4v.jpg)\n![](https://i.loli.net/2019/12/25/pGIhaPjxtl438U9.jpg)\n![](https://i.loli.net/2019/12/25/hzjJBR2x5SEmsbC.jpg)\n![](https://i.loli.net/2019/12/25/ucNDmUqQkrFfAWv.jpg)\n![](https://i.loli.net/2019/12/25/oj1wAnGSKtFvXIJ.jpg)\n{% endgallery %}","updated":"2023-06-03T19:30:43.171Z","path":"xiance/marvel/index.html","layout":"page","_id":"clipg0878001grgwh02086nm0","content":"<div class=\"fj-gallery\"><p><img src=\"https://i.loli.net/2019/12/25/Jj8FXuKVlOea4Ec.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/eqBGrXx9tWsZOao.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/LjW2CfNSD7OaY4v.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/pGIhaPjxtl438U9.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/hzjJBR2x5SEmsbC.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/ucNDmUqQkrFfAWv.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/oj1wAnGSKtFvXIJ.jpg\"></p>\n          </div>","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/13.jpg","excerpt":"","more":"<div class=\"fj-gallery\"><p><img src=\"https://i.loli.net/2019/12/25/Jj8FXuKVlOea4Ec.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/eqBGrXx9tWsZOao.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/LjW2CfNSD7OaY4v.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/pGIhaPjxtl438U9.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/hzjJBR2x5SEmsbC.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/ucNDmUqQkrFfAWv.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/oj1wAnGSKtFvXIJ.jpg\"></p>\n          </div>"},{"title":"ohmygirl","date":"2019-12-25T15:42:01.000Z","comments":1,"reward":false,"description":null,"top_img":"https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg","_content":"{% gallery %}\n![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)\n![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)\n![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)\n![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)\n![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)\n![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)\n![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)\n![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)\n{% endgallery %}","source":"xiance/ohmygirl/index.md","raw":"---\ntitle: ohmygirl\ndate: 2019-12-25 23:42:01\ncomments: true\nreward: false\ndescription: \ntop_img: https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg\n---\n{% gallery %}\n![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)\n![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)\n![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)\n![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)\n![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)\n![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)\n![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)\n![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)\n{% endgallery %}","updated":"2023-06-03T19:30:43.171Z","path":"xiance/ohmygirl/index.html","layout":"page","_id":"clipg0878001jrgwhablhfmwg","content":"<div class=\"fj-gallery\"><p><img src=\"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg\"></p>\n          </div>","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/77.jpg","excerpt":"","more":"<div class=\"fj-gallery\"><p><img src=\"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg\"></p>\n          </div>"}],"Post":[{"title":"vela快应用框架","keywords":"quickjs ts c++","description":"quickjs对接devtools","top_img":"设置false不显示顶部图片","sticky":100,"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/17.png","comments":1,"abbrlink":"d9795d89","date":"2023-04-25T07:27:56.000Z","updated":"2023-04-25T07:27:56.000Z","_content":"\n\n\nVela上快应用框架的一些实现原理和编程实践\n\n<!-- more -->\n\n# 快应用框架构成\n\n一个简单的图用来描述快应用框架的模块构成，主要由Native（C++）部分和JS部分（framework.js）构成。\n\n![48c4d276-9d71-439a-a720-7f268da27d85](https://raw.githubusercontent.com/why862555625/images/main/images/48c4d276-9d71-439a-a720-7f268da27d85.svg)\n\n在框架的C++代码中，最核心的两大组件就是 quickjs和libuv，分别提供JS运行环境和异步消息循环机制。框架还用到了一些其他的C/C++库如libcurl作为http客户端，rapidjson提供json解析能力等。\n\n下面给出项目目录结构：\n\n```\n.\n├── bin                                     # 生成目录\n│   ├── app                                 # 测试应用\n│   ├── apps.json                           # 应用配置文件\n│   ├── font                                # 应用字体资源\n│   ├── quickapp\n│   └── vapp                                # 项目生成的可执行文件\n├── build                                   # cmake构建目录\n├── CMakeLists.txt\n├── deps                                    # 依赖项目录\n│   ├── curl                                # 多协议文件传输库\n│   ├── ext                                 # 扩展，主要是lvgl非标准扩展\n│   ├── FFmpeg                              # 音视频编解码库\n│   ├── freetype2                           # 字体渲染库\n│   ├── libuv                               # 跨平台事件驱动的消息循环库\n│   ├── littlefs                            # lvgl相关\n│   ├── lv_conf.h\n│   ├── lv_drivers\n│   ├── lv_drv_conf.h\n│   ├── lv_ffmpeg_interface\n│   ├── lv_fs_interface\n│   ├── lvgl                                # lvgl 嵌入式gui库\n│   ├── lv_lib_freetype                     # lvgl的freetype库\n│   ├── lv_lib_png                          # lvgl的png解码库\n│   ├── quickjs                             # 嵌入式JS引擎\n│   ├── rapidjson                           # Json库\n│   ├── tools                               # 工具目录，目前存放了Ffmpeg编译脚本\n│   ├── unqlite                             # no sql数据库\n│   ├── uvws                                # 基于libuv实现的websocket库\n│   ├── wasm3                               # web assembely支持库\n│   └── yoga                                # yoga排版引擎\n├── Kconfig                                 # 供vela使用的kconfg配置\n├── Make.defs\n├── Makefile                                # vela makefile\n├── README.md                               # 本文件\n├── src                                     # 源码\n│   ├── aiotjs.h\n│   ├── ajs_vm.cpp\n│   ├── ....\n│   ├── framework                           # 框架源码\n│   ├── gui                                 # GUI相关代码，包含lvgl渲染器实现\n│   ├── jse                                 # JS Environment JS环境相关\n│   └── Kconfig\n├── tests                                   # 测试\n│   ├── gui\n│   ├── helpers\n│   ├── run.js\n│   ├── ... \n│   ├── test-feature-vibrator.js\n│   ├── wasi\n│   └── wasm\n└── toolchain                               # 交叉编译相关\n    └── cross-m32.cmake                     # linux 32位构建\n```\n\n\n\n# 框架启动流程分析\n\n![6ca169bc-84af-4252-9758-54c853feefef](https://raw.githubusercontent.com/why862555625/images/main/images/6ca169bc-84af-4252-9758-54c853feefef.svg)\n\n框架的整个启动和执行流程较为复杂，里面涉及到了JS和C++的互调用。\n\n启动流程以C++的入口函数为入口点，会初始化quickjs，创建app，启动子线程并加载Native module和内置JS框架代码。\n\n然后流程转交到JS，由JS通过调用初始化时注册的Native函数来完成整个快应用的加载。\n\n\n\n# VDOM渲染流程分析\n\n\n\nVDOM的创建和渲染出于性能考虑，放在了C++层实现，整个VDOM的创建由Native通过执行template上的渲染函数来创建。\n\n```js\n((module) => {\n    module.exports = function (vm) {\n      const _vm_ = vm || this\n      return aiot.__ce__(\"div\", {\n        \"classList\": [\n          \"page\",\n          \"home-page\"\n        ]\n      }, [\n        aiot.__ci__({\n          shown: function () { return _vm_.status !== 0 }\n        },\n          function () {\n            return aiot.__ce__(\"text\", {\n              \"classList\": [\n                \"text-time\"\n              ],\n              \"value\": function () { return _vm_.$t(\"a.b\") }\n            })\n          }),\n        aiot.__ci__({\n          shown: function () { return _vm_.status === 0 }\n        },\n          function () {\n            return aiot.__ce__(\"div\", {\n              \"classList\": [\n                \"body\",\n                \"launch-panel\"\n              ]\n            }, [\n              aiot.__ce__(\"image\", {\n                \"src\": \"/Common/logo.png\",\n                \"classList\": [\n                  \"logo\"\n                ]\n              }),\n              aiot.__ce__(\"text\", {\n                \"classList\": [\n                  \"app-name\"\n                ],\n                \"value\": \"航旅纵横\"\n              })\n            ])\n          }),\n        aiot.__ci__({...}),\n        aiot.__ci__({...}),\n        ....\n      ])\n    }\n    /***/\n}),\n```\n\nTemplate本身是一个嵌套结构，它被翻译成了对aiot.__ce__, aiot__cf__, aiot.__ci__等函数的嵌套调用，嵌套调用的过程就是在Native层完成整个dom树构建的过程。\n\n我们来看__cf__对应的C++源码，它用于创建一个逻辑循环节点：\n\n\n\n```c++\nDomEntity* dom_create_for_fragment(jse_context_ref ctx, jse_value_t options, jse_value_t func) {\n    AIOTJS_LOG_DEBUG(\"dom_create_for_fragment ==================== \");\n\n\n   ....\n\n    //创建DomForFragment节点\n    DomForFragment *frag = new DomForFragment();\n    page->addDomEntity(frag);\n    \n    ...\n\n    // 保存JS端传入的表达式和render函数\n    jse_value_t exp = jse_get_object_property(ctx, options, \"exp\");\n    frag->setExpress(jse_dup_value(ctx, exp));\n    frag->setRenderFunction(jse_dup_value(ctx, func));\n    jse_free_value(ctx, exp);\n\n    //设置key或者$idx\n    ...\n\n    //创建effect函数\n    jse_value_t eff = create_effect(ctx, dom_update_for_fragment, 0);\n    AIOTJS_LOG_DEBUG(\"AddEffect for %d\", frag->uid());\n    //调用framework的effectWrap函数将effect函数传递给JS层保存\n    frag->addEffect(ctx, dom_effect(ctx, eff, frag->uid(), 0));\n    jse_free_value(ctx, eff);\n    ...\n    \n    // 返回创建好的frag vdom节点\n    return frag;\n}\n```\n\ndom_update_for_fragment是C++端的节点更新函数，它最终会触发节点的render函数更新子节点：\n\n\n\n```c++\nbool DomForFragment::render(jse_context_ref ctx) {\n    // 递归构造\n    jse_value_t exp_obj = jse_call(ctx, exp_, JSE_UNDEFINED, 0, {});\n    jse_value_t expValue = JSE_UNDEFINED;\n    const char* str_tid = nullptr;\n\n    // 调用JS端的求值函数获取for循环对应的list对象 expValue\n    expValue = get_from_js_expression();\n    \n    ....\n\n    //遍历数组\n    jse_size_t len = jse_get_array_length(ctx, expValue);\n    for(jse_size_t i = 0; i < len; i++) {\n        //为每个element分别调用render函数\n        jse_value_t idx = jse_uint(ctx, i);\n        jse_value_t args[] = {\n            idx,\n            item\n        };\n        jse_value_t res = jse_call(ctx, render_, JSE_UNDEFINED, 2, args);\n        if (jse_is_number(res)) {\n            unsigned int cid = jse_to_uint_def(ctx, res, 0);\n            DomEntity* ent = p->entity(cid);\n            AIOTJS_CHECK_NE(ent, nullptr);\n            ent->setDiffOperationType(DomEntityDiffOperationType::Add);\n            addChild(ent);\n            if(!jse_is_undefined(tid_value)) {\n                jse_value_t v_tid = jse_dup_value(ctx, tid_value);\n                ent->setTid(v_tid);\n            }\n        } else if (jse_is_array(ctx, res)) {\n            jse_size_t childlen = jse_get_array_length(ctx, res);\n            for(size_t j=0; j<childlen; j++) {\n                unsigned int cid = jse_get_array_idx_uint(ctx, res, j, 0);\n                DomEntity* ent = p->entity(cid);\n                AIOTJS_CHECK_NE(ent, nullptr);\n                ent->setDiffOperationType(DomEntityDiffOperationType::Add);\n                addChild(ent);\n            }\n        }\n        jse_free_value(ctx, res);\n        jse_free_value(ctx, idx);\n    }\n    jse_free_value(ctx, item);\n\n    jse_free_value(ctx, expValue);\n    AIOTJS_LOG_DEBUG(\"DomForFragment::build finished - <%u>\", uid());\n    // 只有初始化的时候返回true表示需要flush，其它情况下延迟flush\n    return isBindingEffect();\n}\n```\n# 框架线程模型\n\n框架采用多线程模式，主要有如下两类线程：\n\n- 主线程：负责渲染，只有一个\n- 应用线程：负责执行JS代码，响应数据变更并更新vdom\n\n主线程和应用线程各启动一个uv loop进行消息处理，这两个线程通过libuv进行异步通信，主要有如下几种场景：\n\n1. 应用线程退出后异步通知主线程退出\n2. 应用线程更新vdom后异步通知主线程刷新ui\n3. 系统消息（如应用后台，应用退出等）由主线程发出，通过libuv转到应用线程执行\n\n# 渲染流程分析\n\n## 渲染流程图\n\n\n\n![33f7e704-ec72-4782-b8ff-1e58df0bef2d](https://raw.githubusercontent.com/why862555625/images/main/images/33f7e704-ec72-4782-b8ff-1e58df0bef2d.svg)\n\n\n\n## 渲染流程\n\n\n\n![6e8b9b04-5afd-47aa-9263-d3a379c1ac5b](https://raw.githubusercontent.com/why862555625/images/main/images/6e8b9b04-5afd-47aa-9263-d3a379c1ac5b.svg)\n\n\n\n# 框架核心部分介绍\n\n## 核心类图\n\n![a8dc8b49-a594-454c-9309-164e3269c5e9](https://raw.githubusercontent.com/why862555625/images/main/images/a8dc8b49-a594-454c-9309-164e3269c5e9.svg)\n\n解释：\n\n1. Framework是内部使用的框架类表示，FrameworkExt从Framework继承并添加了对vela系统的消息集成，在vela中使用FrameworkExt表示唯一的框架实例\n2. FrameworkExt中会维护多个app实例，框架支持多应用切换\n3. 每个app实例包含一个JS运行上下文环境和相关的libuv句柄，它们封装在RuntimeContxt中，作为Application的成员变量保存，即一个Application对象唯一对应一个js运行上下文。\n4. 一个Applicatoin对象可以拥有多个Page对象，一个Page对象表示一个可显示的页面，实际是一颗vdom树\n5. Page对象的继承关系较为复杂，框架支持自定义组件，从逻辑上讲，一个Component包含一颗vdom子树，它可以被任意组合来形成最终的完整vdom树。Page是最顶层的Component组件，唯一。从继承关系上讲，DomDocument这一层应该去掉，在添加子组件支持后它的语义已被Component取代，这层抽象当前代码中没有意义但仍然存在。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/c/vela快应用框架.md","raw":"---\ntitle: vela快应用框架\ntags:\n  - quickjs\n  - devtools\ncategories: C\nkeywords: 'quickjs ts c++'\ndescription: quickjs对接devtools\ntop_img: 设置false不显示顶部图片\nsticky: 100\ncover: \"https://raw.githubusercontent.com/why862555625/images/main/images/17.png\"\ncomments: true评论\nabbrlink: d9795d89\ndate: 2023-04-25 15:27:56\nupdated: 2023-04-25 15:27:56\n---\n\n\n\nVela上快应用框架的一些实现原理和编程实践\n\n<!-- more -->\n\n# 快应用框架构成\n\n一个简单的图用来描述快应用框架的模块构成，主要由Native（C++）部分和JS部分（framework.js）构成。\n\n![48c4d276-9d71-439a-a720-7f268da27d85](https://raw.githubusercontent.com/why862555625/images/main/images/48c4d276-9d71-439a-a720-7f268da27d85.svg)\n\n在框架的C++代码中，最核心的两大组件就是 quickjs和libuv，分别提供JS运行环境和异步消息循环机制。框架还用到了一些其他的C/C++库如libcurl作为http客户端，rapidjson提供json解析能力等。\n\n下面给出项目目录结构：\n\n```\n.\n├── bin                                     # 生成目录\n│   ├── app                                 # 测试应用\n│   ├── apps.json                           # 应用配置文件\n│   ├── font                                # 应用字体资源\n│   ├── quickapp\n│   └── vapp                                # 项目生成的可执行文件\n├── build                                   # cmake构建目录\n├── CMakeLists.txt\n├── deps                                    # 依赖项目录\n│   ├── curl                                # 多协议文件传输库\n│   ├── ext                                 # 扩展，主要是lvgl非标准扩展\n│   ├── FFmpeg                              # 音视频编解码库\n│   ├── freetype2                           # 字体渲染库\n│   ├── libuv                               # 跨平台事件驱动的消息循环库\n│   ├── littlefs                            # lvgl相关\n│   ├── lv_conf.h\n│   ├── lv_drivers\n│   ├── lv_drv_conf.h\n│   ├── lv_ffmpeg_interface\n│   ├── lv_fs_interface\n│   ├── lvgl                                # lvgl 嵌入式gui库\n│   ├── lv_lib_freetype                     # lvgl的freetype库\n│   ├── lv_lib_png                          # lvgl的png解码库\n│   ├── quickjs                             # 嵌入式JS引擎\n│   ├── rapidjson                           # Json库\n│   ├── tools                               # 工具目录，目前存放了Ffmpeg编译脚本\n│   ├── unqlite                             # no sql数据库\n│   ├── uvws                                # 基于libuv实现的websocket库\n│   ├── wasm3                               # web assembely支持库\n│   └── yoga                                # yoga排版引擎\n├── Kconfig                                 # 供vela使用的kconfg配置\n├── Make.defs\n├── Makefile                                # vela makefile\n├── README.md                               # 本文件\n├── src                                     # 源码\n│   ├── aiotjs.h\n│   ├── ajs_vm.cpp\n│   ├── ....\n│   ├── framework                           # 框架源码\n│   ├── gui                                 # GUI相关代码，包含lvgl渲染器实现\n│   ├── jse                                 # JS Environment JS环境相关\n│   └── Kconfig\n├── tests                                   # 测试\n│   ├── gui\n│   ├── helpers\n│   ├── run.js\n│   ├── ... \n│   ├── test-feature-vibrator.js\n│   ├── wasi\n│   └── wasm\n└── toolchain                               # 交叉编译相关\n    └── cross-m32.cmake                     # linux 32位构建\n```\n\n\n\n# 框架启动流程分析\n\n![6ca169bc-84af-4252-9758-54c853feefef](https://raw.githubusercontent.com/why862555625/images/main/images/6ca169bc-84af-4252-9758-54c853feefef.svg)\n\n框架的整个启动和执行流程较为复杂，里面涉及到了JS和C++的互调用。\n\n启动流程以C++的入口函数为入口点，会初始化quickjs，创建app，启动子线程并加载Native module和内置JS框架代码。\n\n然后流程转交到JS，由JS通过调用初始化时注册的Native函数来完成整个快应用的加载。\n\n\n\n# VDOM渲染流程分析\n\n\n\nVDOM的创建和渲染出于性能考虑，放在了C++层实现，整个VDOM的创建由Native通过执行template上的渲染函数来创建。\n\n```js\n((module) => {\n    module.exports = function (vm) {\n      const _vm_ = vm || this\n      return aiot.__ce__(\"div\", {\n        \"classList\": [\n          \"page\",\n          \"home-page\"\n        ]\n      }, [\n        aiot.__ci__({\n          shown: function () { return _vm_.status !== 0 }\n        },\n          function () {\n            return aiot.__ce__(\"text\", {\n              \"classList\": [\n                \"text-time\"\n              ],\n              \"value\": function () { return _vm_.$t(\"a.b\") }\n            })\n          }),\n        aiot.__ci__({\n          shown: function () { return _vm_.status === 0 }\n        },\n          function () {\n            return aiot.__ce__(\"div\", {\n              \"classList\": [\n                \"body\",\n                \"launch-panel\"\n              ]\n            }, [\n              aiot.__ce__(\"image\", {\n                \"src\": \"/Common/logo.png\",\n                \"classList\": [\n                  \"logo\"\n                ]\n              }),\n              aiot.__ce__(\"text\", {\n                \"classList\": [\n                  \"app-name\"\n                ],\n                \"value\": \"航旅纵横\"\n              })\n            ])\n          }),\n        aiot.__ci__({...}),\n        aiot.__ci__({...}),\n        ....\n      ])\n    }\n    /***/\n}),\n```\n\nTemplate本身是一个嵌套结构，它被翻译成了对aiot.__ce__, aiot__cf__, aiot.__ci__等函数的嵌套调用，嵌套调用的过程就是在Native层完成整个dom树构建的过程。\n\n我们来看__cf__对应的C++源码，它用于创建一个逻辑循环节点：\n\n\n\n```c++\nDomEntity* dom_create_for_fragment(jse_context_ref ctx, jse_value_t options, jse_value_t func) {\n    AIOTJS_LOG_DEBUG(\"dom_create_for_fragment ==================== \");\n\n\n   ....\n\n    //创建DomForFragment节点\n    DomForFragment *frag = new DomForFragment();\n    page->addDomEntity(frag);\n    \n    ...\n\n    // 保存JS端传入的表达式和render函数\n    jse_value_t exp = jse_get_object_property(ctx, options, \"exp\");\n    frag->setExpress(jse_dup_value(ctx, exp));\n    frag->setRenderFunction(jse_dup_value(ctx, func));\n    jse_free_value(ctx, exp);\n\n    //设置key或者$idx\n    ...\n\n    //创建effect函数\n    jse_value_t eff = create_effect(ctx, dom_update_for_fragment, 0);\n    AIOTJS_LOG_DEBUG(\"AddEffect for %d\", frag->uid());\n    //调用framework的effectWrap函数将effect函数传递给JS层保存\n    frag->addEffect(ctx, dom_effect(ctx, eff, frag->uid(), 0));\n    jse_free_value(ctx, eff);\n    ...\n    \n    // 返回创建好的frag vdom节点\n    return frag;\n}\n```\n\ndom_update_for_fragment是C++端的节点更新函数，它最终会触发节点的render函数更新子节点：\n\n\n\n```c++\nbool DomForFragment::render(jse_context_ref ctx) {\n    // 递归构造\n    jse_value_t exp_obj = jse_call(ctx, exp_, JSE_UNDEFINED, 0, {});\n    jse_value_t expValue = JSE_UNDEFINED;\n    const char* str_tid = nullptr;\n\n    // 调用JS端的求值函数获取for循环对应的list对象 expValue\n    expValue = get_from_js_expression();\n    \n    ....\n\n    //遍历数组\n    jse_size_t len = jse_get_array_length(ctx, expValue);\n    for(jse_size_t i = 0; i < len; i++) {\n        //为每个element分别调用render函数\n        jse_value_t idx = jse_uint(ctx, i);\n        jse_value_t args[] = {\n            idx,\n            item\n        };\n        jse_value_t res = jse_call(ctx, render_, JSE_UNDEFINED, 2, args);\n        if (jse_is_number(res)) {\n            unsigned int cid = jse_to_uint_def(ctx, res, 0);\n            DomEntity* ent = p->entity(cid);\n            AIOTJS_CHECK_NE(ent, nullptr);\n            ent->setDiffOperationType(DomEntityDiffOperationType::Add);\n            addChild(ent);\n            if(!jse_is_undefined(tid_value)) {\n                jse_value_t v_tid = jse_dup_value(ctx, tid_value);\n                ent->setTid(v_tid);\n            }\n        } else if (jse_is_array(ctx, res)) {\n            jse_size_t childlen = jse_get_array_length(ctx, res);\n            for(size_t j=0; j<childlen; j++) {\n                unsigned int cid = jse_get_array_idx_uint(ctx, res, j, 0);\n                DomEntity* ent = p->entity(cid);\n                AIOTJS_CHECK_NE(ent, nullptr);\n                ent->setDiffOperationType(DomEntityDiffOperationType::Add);\n                addChild(ent);\n            }\n        }\n        jse_free_value(ctx, res);\n        jse_free_value(ctx, idx);\n    }\n    jse_free_value(ctx, item);\n\n    jse_free_value(ctx, expValue);\n    AIOTJS_LOG_DEBUG(\"DomForFragment::build finished - <%u>\", uid());\n    // 只有初始化的时候返回true表示需要flush，其它情况下延迟flush\n    return isBindingEffect();\n}\n```\n# 框架线程模型\n\n框架采用多线程模式，主要有如下两类线程：\n\n- 主线程：负责渲染，只有一个\n- 应用线程：负责执行JS代码，响应数据变更并更新vdom\n\n主线程和应用线程各启动一个uv loop进行消息处理，这两个线程通过libuv进行异步通信，主要有如下几种场景：\n\n1. 应用线程退出后异步通知主线程退出\n2. 应用线程更新vdom后异步通知主线程刷新ui\n3. 系统消息（如应用后台，应用退出等）由主线程发出，通过libuv转到应用线程执行\n\n# 渲染流程分析\n\n## 渲染流程图\n\n\n\n![33f7e704-ec72-4782-b8ff-1e58df0bef2d](https://raw.githubusercontent.com/why862555625/images/main/images/33f7e704-ec72-4782-b8ff-1e58df0bef2d.svg)\n\n\n\n## 渲染流程\n\n\n\n![6e8b9b04-5afd-47aa-9263-d3a379c1ac5b](https://raw.githubusercontent.com/why862555625/images/main/images/6e8b9b04-5afd-47aa-9263-d3a379c1ac5b.svg)\n\n\n\n# 框架核心部分介绍\n\n## 核心类图\n\n![a8dc8b49-a594-454c-9309-164e3269c5e9](https://raw.githubusercontent.com/why862555625/images/main/images/a8dc8b49-a594-454c-9309-164e3269c5e9.svg)\n\n解释：\n\n1. Framework是内部使用的框架类表示，FrameworkExt从Framework继承并添加了对vela系统的消息集成，在vela中使用FrameworkExt表示唯一的框架实例\n2. FrameworkExt中会维护多个app实例，框架支持多应用切换\n3. 每个app实例包含一个JS运行上下文环境和相关的libuv句柄，它们封装在RuntimeContxt中，作为Application的成员变量保存，即一个Application对象唯一对应一个js运行上下文。\n4. 一个Applicatoin对象可以拥有多个Page对象，一个Page对象表示一个可显示的页面，实际是一颗vdom树\n5. Page对象的继承关系较为复杂，框架支持自定义组件，从逻辑上讲，一个Component包含一颗vdom子树，它可以被任意组合来形成最终的完整vdom树。Page是最顶层的Component组件，唯一。从继承关系上讲，DomDocument这一层应该去掉，在添加子组件支持后它的语义已被Component取代，这层抽象当前代码中没有意义但仍然存在。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"c/vela快应用框架","published":1,"layout":"post","photos":[],"link":"","_id":"clipg086p0001rgwh38bdfk4q","content":"<p>Vela上快应用框架的一些实现原理和编程实践</p>\n<span id=\"more\"></span>\n\n<h1 id=\"快应用框架构成\"><a href=\"#快应用框架构成\" class=\"headerlink\" title=\"快应用框架构成\"></a>快应用框架构成</h1><p>一个简单的图用来描述快应用框架的模块构成，主要由Native（C++）部分和JS部分（framework.js）构成。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/48c4d276-9d71-439a-a720-7f268da27d85.svg\" alt=\"48c4d276-9d71-439a-a720-7f268da27d85\"></p>\n<p>在框架的C++代码中，最核心的两大组件就是 quickjs和libuv，分别提供JS运行环境和异步消息循环机制。框架还用到了一些其他的C/C++库如libcurl作为http客户端，rapidjson提供json解析能力等。</p>\n<p>下面给出项目目录结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── bin                                     # 生成目录</span><br><span class=\"line\">│   ├── app                                 # 测试应用</span><br><span class=\"line\">│   ├── apps.json                           # 应用配置文件</span><br><span class=\"line\">│   ├── font                                # 应用字体资源</span><br><span class=\"line\">│   ├── quickapp</span><br><span class=\"line\">│   └── vapp                                # 项目生成的可执行文件</span><br><span class=\"line\">├── build                                   # cmake构建目录</span><br><span class=\"line\">├── CMakeLists.txt</span><br><span class=\"line\">├── deps                                    # 依赖项目录</span><br><span class=\"line\">│   ├── curl                                # 多协议文件传输库</span><br><span class=\"line\">│   ├── ext                                 # 扩展，主要是lvgl非标准扩展</span><br><span class=\"line\">│   ├── FFmpeg                              # 音视频编解码库</span><br><span class=\"line\">│   ├── freetype2                           # 字体渲染库</span><br><span class=\"line\">│   ├── libuv                               # 跨平台事件驱动的消息循环库</span><br><span class=\"line\">│   ├── littlefs                            # lvgl相关</span><br><span class=\"line\">│   ├── lv_conf.h</span><br><span class=\"line\">│   ├── lv_drivers</span><br><span class=\"line\">│   ├── lv_drv_conf.h</span><br><span class=\"line\">│   ├── lv_ffmpeg_interface</span><br><span class=\"line\">│   ├── lv_fs_interface</span><br><span class=\"line\">│   ├── lvgl                                # lvgl 嵌入式gui库</span><br><span class=\"line\">│   ├── lv_lib_freetype                     # lvgl的freetype库</span><br><span class=\"line\">│   ├── lv_lib_png                          # lvgl的png解码库</span><br><span class=\"line\">│   ├── quickjs                             # 嵌入式JS引擎</span><br><span class=\"line\">│   ├── rapidjson                           # Json库</span><br><span class=\"line\">│   ├── tools                               # 工具目录，目前存放了Ffmpeg编译脚本</span><br><span class=\"line\">│   ├── unqlite                             # no sql数据库</span><br><span class=\"line\">│   ├── uvws                                # 基于libuv实现的websocket库</span><br><span class=\"line\">│   ├── wasm3                               # web assembely支持库</span><br><span class=\"line\">│   └── yoga                                # yoga排版引擎</span><br><span class=\"line\">├── Kconfig                                 # 供vela使用的kconfg配置</span><br><span class=\"line\">├── Make.defs</span><br><span class=\"line\">├── Makefile                                # vela makefile</span><br><span class=\"line\">├── README.md                               # 本文件</span><br><span class=\"line\">├── src                                     # 源码</span><br><span class=\"line\">│   ├── aiotjs.h</span><br><span class=\"line\">│   ├── ajs_vm.cpp</span><br><span class=\"line\">│   ├── ....</span><br><span class=\"line\">│   ├── framework                           # 框架源码</span><br><span class=\"line\">│   ├── gui                                 # GUI相关代码，包含lvgl渲染器实现</span><br><span class=\"line\">│   ├── jse                                 # JS Environment JS环境相关</span><br><span class=\"line\">│   └── Kconfig</span><br><span class=\"line\">├── tests                                   # 测试</span><br><span class=\"line\">│   ├── gui</span><br><span class=\"line\">│   ├── helpers</span><br><span class=\"line\">│   ├── run.js</span><br><span class=\"line\">│   ├── ... </span><br><span class=\"line\">│   ├── test-feature-vibrator.js</span><br><span class=\"line\">│   ├── wasi</span><br><span class=\"line\">│   └── wasm</span><br><span class=\"line\">└── toolchain                               # 交叉编译相关</span><br><span class=\"line\">    └── cross-m32.cmake                     # linux 32位构建</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"框架启动流程分析\"><a href=\"#框架启动流程分析\" class=\"headerlink\" title=\"框架启动流程分析\"></a>框架启动流程分析</h1><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/6ca169bc-84af-4252-9758-54c853feefef.svg\" alt=\"6ca169bc-84af-4252-9758-54c853feefef\"></p>\n<p>框架的整个启动和执行流程较为复杂，里面涉及到了JS和C++的互调用。</p>\n<p>启动流程以C++的入口函数为入口点，会初始化quickjs，创建app，启动子线程并加载Native module和内置JS框架代码。</p>\n<p>然后流程转交到JS，由JS通过调用初始化时注册的Native函数来完成整个快应用的加载。</p>\n<h1 id=\"VDOM渲染流程分析\"><a href=\"#VDOM渲染流程分析\" class=\"headerlink\" title=\"VDOM渲染流程分析\"></a>VDOM渲染流程分析</h1><p>VDOM的创建和渲染出于性能考虑，放在了C++层实现，整个VDOM的创建由Native通过执行template上的渲染函数来创建。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">(<span class=\"params\"><span class=\"variable language_\">module</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">vm</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> _vm_ = vm || <span class=\"variable language_\">this</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;div&quot;</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">          <span class=\"string\">&quot;page&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;home-page&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;, [</span><br><span class=\"line\">        aiot.<span class=\"title function_\">__ci__</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">shown</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> _vm_.<span class=\"property\">status</span> !== <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">          <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;text&quot;</span>, &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">                <span class=\"string\">&quot;text-time&quot;</span></span><br><span class=\"line\">              ],</span><br><span class=\"line\">              <span class=\"string\">&quot;value&quot;</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> _vm_.$t(<span class=\"string\">&quot;a.b&quot;</span>) &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">        aiot.<span class=\"title function_\">__ci__</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">shown</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> _vm_.<span class=\"property\">status</span> === <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">          <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;div&quot;</span>, &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">                <span class=\"string\">&quot;body&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;launch-panel&quot;</span></span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;, [</span><br><span class=\"line\">              aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;image&quot;</span>, &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;src&quot;</span>: <span class=\"string\">&quot;/Common/logo.png&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">                  <span class=\"string\">&quot;logo&quot;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">              &#125;),</span><br><span class=\"line\">              aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;text&quot;</span>, &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">                  <span class=\"string\">&quot;app-name&quot;</span></span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"string\">&quot;value&quot;</span>: <span class=\"string\">&quot;航旅纵横&quot;</span></span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">            ])</span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">        aiot.<span class=\"title function_\">__ci__</span>(&#123;...&#125;),</span><br><span class=\"line\">        aiot.<span class=\"title function_\">__ci__</span>(&#123;...&#125;),</span><br><span class=\"line\">        ....</span><br><span class=\"line\">      ])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/***/</span></span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n\n<p>Template本身是一个嵌套结构，它被翻译成了对aiot.<strong>ce</strong>, aiot__cf__, aiot.__ci__等函数的嵌套调用，嵌套调用的过程就是在Native层完成整个dom树构建的过程。</p>\n<p>我们来看__cf__对应的C++源码，它用于创建一个逻辑循环节点：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">DomEntity* <span class=\"title\">dom_create_for_fragment</span><span class=\"params\">(jse_context_ref ctx, <span class=\"type\">jse_value_t</span> options, <span class=\"type\">jse_value_t</span> func)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">AIOTJS_LOG_DEBUG</span>(<span class=\"string\">&quot;dom_create_for_fragment ==================== &quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   ....</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建DomForFragment节点</span></span><br><span class=\"line\">    DomForFragment *frag = <span class=\"keyword\">new</span> <span class=\"built_in\">DomForFragment</span>();</span><br><span class=\"line\">    page-&gt;<span class=\"built_in\">addDomEntity</span>(frag);</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存JS端传入的表达式和render函数</span></span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> exp = <span class=\"built_in\">jse_get_object_property</span>(ctx, options, <span class=\"string\">&quot;exp&quot;</span>);</span><br><span class=\"line\">    frag-&gt;<span class=\"built_in\">setExpress</span>(<span class=\"built_in\">jse_dup_value</span>(ctx, exp));</span><br><span class=\"line\">    frag-&gt;<span class=\"built_in\">setRenderFunction</span>(<span class=\"built_in\">jse_dup_value</span>(ctx, func));</span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, exp);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置key或者$idx</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建effect函数</span></span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> eff = <span class=\"built_in\">create_effect</span>(ctx, dom_update_for_fragment, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">AIOTJS_LOG_DEBUG</span>(<span class=\"string\">&quot;AddEffect for %d&quot;</span>, frag-&gt;<span class=\"built_in\">uid</span>());</span><br><span class=\"line\">    <span class=\"comment\">//调用framework的effectWrap函数将effect函数传递给JS层保存</span></span><br><span class=\"line\">    frag-&gt;<span class=\"built_in\">addEffect</span>(ctx, <span class=\"built_in\">dom_effect</span>(ctx, eff, frag-&gt;<span class=\"built_in\">uid</span>(), <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, eff);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 返回创建好的frag vdom节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> frag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>dom_update_for_fragment是C++端的节点更新函数，它最终会触发节点的render函数更新子节点：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DomForFragment::render</span><span class=\"params\">(jse_context_ref ctx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归构造</span></span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> exp_obj = <span class=\"built_in\">jse_call</span>(ctx, exp_, JSE_UNDEFINED, <span class=\"number\">0</span>, &#123;&#125;);</span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> expValue = JSE_UNDEFINED;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* str_tid = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用JS端的求值函数获取for循环对应的list对象 expValue</span></span><br><span class=\"line\">    expValue = <span class=\"built_in\">get_from_js_expression</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    ....</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">    <span class=\"type\">jse_size_t</span> len = <span class=\"built_in\">jse_get_array_length</span>(ctx, expValue);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">jse_size_t</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//为每个element分别调用render函数</span></span><br><span class=\"line\">        <span class=\"type\">jse_value_t</span> idx = <span class=\"built_in\">jse_uint</span>(ctx, i);</span><br><span class=\"line\">        <span class=\"type\">jse_value_t</span> args[] = &#123;</span><br><span class=\"line\">            idx,</span><br><span class=\"line\">            item</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">jse_value_t</span> res = <span class=\"built_in\">jse_call</span>(ctx, render_, JSE_UNDEFINED, <span class=\"number\">2</span>, args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">jse_is_number</span>(res)) &#123;</span><br><span class=\"line\">            <span class=\"type\">unsigned</span> <span class=\"type\">int</span> cid = <span class=\"built_in\">jse_to_uint_def</span>(ctx, res, <span class=\"number\">0</span>);</span><br><span class=\"line\">            DomEntity* ent = p-&gt;<span class=\"built_in\">entity</span>(cid);</span><br><span class=\"line\">            <span class=\"built_in\">AIOTJS_CHECK_NE</span>(ent, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">            ent-&gt;<span class=\"built_in\">setDiffOperationType</span>(DomEntityDiffOperationType::Add);</span><br><span class=\"line\">            <span class=\"built_in\">addChild</span>(ent);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"built_in\">jse_is_undefined</span>(tid_value)) &#123;</span><br><span class=\"line\">                <span class=\"type\">jse_value_t</span> v_tid = <span class=\"built_in\">jse_dup_value</span>(ctx, tid_value);</span><br><span class=\"line\">                ent-&gt;<span class=\"built_in\">setTid</span>(v_tid);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">jse_is_array</span>(ctx, res)) &#123;</span><br><span class=\"line\">            <span class=\"type\">jse_size_t</span> childlen = <span class=\"built_in\">jse_get_array_length</span>(ctx, res);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j=<span class=\"number\">0</span>; j&lt;childlen; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">unsigned</span> <span class=\"type\">int</span> cid = <span class=\"built_in\">jse_get_array_idx_uint</span>(ctx, res, j, <span class=\"number\">0</span>);</span><br><span class=\"line\">                DomEntity* ent = p-&gt;<span class=\"built_in\">entity</span>(cid);</span><br><span class=\"line\">                <span class=\"built_in\">AIOTJS_CHECK_NE</span>(ent, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">                ent-&gt;<span class=\"built_in\">setDiffOperationType</span>(DomEntityDiffOperationType::Add);</span><br><span class=\"line\">                <span class=\"built_in\">addChild</span>(ent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">jse_free_value</span>(ctx, res);</span><br><span class=\"line\">        <span class=\"built_in\">jse_free_value</span>(ctx, idx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, item);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, expValue);</span><br><span class=\"line\">    <span class=\"built_in\">AIOTJS_LOG_DEBUG</span>(<span class=\"string\">&quot;DomForFragment::build finished - &lt;%u&gt;&quot;</span>, <span class=\"built_in\">uid</span>());</span><br><span class=\"line\">    <span class=\"comment\">// 只有初始化的时候返回true表示需要flush，其它情况下延迟flush</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">isBindingEffect</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"框架线程模型\"><a href=\"#框架线程模型\" class=\"headerlink\" title=\"框架线程模型\"></a>框架线程模型</h1><p>框架采用多线程模式，主要有如下两类线程：</p>\n<ul>\n<li>主线程：负责渲染，只有一个</li>\n<li>应用线程：负责执行JS代码，响应数据变更并更新vdom</li>\n</ul>\n<p>主线程和应用线程各启动一个uv loop进行消息处理，这两个线程通过libuv进行异步通信，主要有如下几种场景：</p>\n<ol>\n<li>应用线程退出后异步通知主线程退出</li>\n<li>应用线程更新vdom后异步通知主线程刷新ui</li>\n<li>系统消息（如应用后台，应用退出等）由主线程发出，通过libuv转到应用线程执行</li>\n</ol>\n<h1 id=\"渲染流程分析\"><a href=\"#渲染流程分析\" class=\"headerlink\" title=\"渲染流程分析\"></a>渲染流程分析</h1><h2 id=\"渲染流程图\"><a href=\"#渲染流程图\" class=\"headerlink\" title=\"渲染流程图\"></a>渲染流程图</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/33f7e704-ec72-4782-b8ff-1e58df0bef2d.svg\" alt=\"33f7e704-ec72-4782-b8ff-1e58df0bef2d\"></p>\n<h2 id=\"渲染流程\"><a href=\"#渲染流程\" class=\"headerlink\" title=\"渲染流程\"></a>渲染流程</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/6e8b9b04-5afd-47aa-9263-d3a379c1ac5b.svg\" alt=\"6e8b9b04-5afd-47aa-9263-d3a379c1ac5b\"></p>\n<h1 id=\"框架核心部分介绍\"><a href=\"#框架核心部分介绍\" class=\"headerlink\" title=\"框架核心部分介绍\"></a>框架核心部分介绍</h1><h2 id=\"核心类图\"><a href=\"#核心类图\" class=\"headerlink\" title=\"核心类图\"></a>核心类图</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/a8dc8b49-a594-454c-9309-164e3269c5e9.svg\" alt=\"a8dc8b49-a594-454c-9309-164e3269c5e9\"></p>\n<p>解释：</p>\n<ol>\n<li>Framework是内部使用的框架类表示，FrameworkExt从Framework继承并添加了对vela系统的消息集成，在vela中使用FrameworkExt表示唯一的框架实例</li>\n<li>FrameworkExt中会维护多个app实例，框架支持多应用切换</li>\n<li>每个app实例包含一个JS运行上下文环境和相关的libuv句柄，它们封装在RuntimeContxt中，作为Application的成员变量保存，即一个Application对象唯一对应一个js运行上下文。</li>\n<li>一个Applicatoin对象可以拥有多个Page对象，一个Page对象表示一个可显示的页面，实际是一颗vdom树</li>\n<li>Page对象的继承关系较为复杂，框架支持自定义组件，从逻辑上讲，一个Component包含一颗vdom子树，它可以被任意组合来形成最终的完整vdom树。Page是最顶层的Component组件，唯一。从继承关系上讲，DomDocument这一层应该去掉，在添加子组件支持后它的语义已被Component取代，这层抽象当前代码中没有意义但仍然存在。</li>\n</ol>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"excerpt":"<p>Vela上快应用框架的一些实现原理和编程实践</p>","more":"<h1 id=\"快应用框架构成\"><a href=\"#快应用框架构成\" class=\"headerlink\" title=\"快应用框架构成\"></a>快应用框架构成</h1><p>一个简单的图用来描述快应用框架的模块构成，主要由Native（C++）部分和JS部分（framework.js）构成。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/48c4d276-9d71-439a-a720-7f268da27d85.svg\" alt=\"48c4d276-9d71-439a-a720-7f268da27d85\"></p>\n<p>在框架的C++代码中，最核心的两大组件就是 quickjs和libuv，分别提供JS运行环境和异步消息循环机制。框架还用到了一些其他的C/C++库如libcurl作为http客户端，rapidjson提供json解析能力等。</p>\n<p>下面给出项目目录结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── bin                                     # 生成目录</span><br><span class=\"line\">│   ├── app                                 # 测试应用</span><br><span class=\"line\">│   ├── apps.json                           # 应用配置文件</span><br><span class=\"line\">│   ├── font                                # 应用字体资源</span><br><span class=\"line\">│   ├── quickapp</span><br><span class=\"line\">│   └── vapp                                # 项目生成的可执行文件</span><br><span class=\"line\">├── build                                   # cmake构建目录</span><br><span class=\"line\">├── CMakeLists.txt</span><br><span class=\"line\">├── deps                                    # 依赖项目录</span><br><span class=\"line\">│   ├── curl                                # 多协议文件传输库</span><br><span class=\"line\">│   ├── ext                                 # 扩展，主要是lvgl非标准扩展</span><br><span class=\"line\">│   ├── FFmpeg                              # 音视频编解码库</span><br><span class=\"line\">│   ├── freetype2                           # 字体渲染库</span><br><span class=\"line\">│   ├── libuv                               # 跨平台事件驱动的消息循环库</span><br><span class=\"line\">│   ├── littlefs                            # lvgl相关</span><br><span class=\"line\">│   ├── lv_conf.h</span><br><span class=\"line\">│   ├── lv_drivers</span><br><span class=\"line\">│   ├── lv_drv_conf.h</span><br><span class=\"line\">│   ├── lv_ffmpeg_interface</span><br><span class=\"line\">│   ├── lv_fs_interface</span><br><span class=\"line\">│   ├── lvgl                                # lvgl 嵌入式gui库</span><br><span class=\"line\">│   ├── lv_lib_freetype                     # lvgl的freetype库</span><br><span class=\"line\">│   ├── lv_lib_png                          # lvgl的png解码库</span><br><span class=\"line\">│   ├── quickjs                             # 嵌入式JS引擎</span><br><span class=\"line\">│   ├── rapidjson                           # Json库</span><br><span class=\"line\">│   ├── tools                               # 工具目录，目前存放了Ffmpeg编译脚本</span><br><span class=\"line\">│   ├── unqlite                             # no sql数据库</span><br><span class=\"line\">│   ├── uvws                                # 基于libuv实现的websocket库</span><br><span class=\"line\">│   ├── wasm3                               # web assembely支持库</span><br><span class=\"line\">│   └── yoga                                # yoga排版引擎</span><br><span class=\"line\">├── Kconfig                                 # 供vela使用的kconfg配置</span><br><span class=\"line\">├── Make.defs</span><br><span class=\"line\">├── Makefile                                # vela makefile</span><br><span class=\"line\">├── README.md                               # 本文件</span><br><span class=\"line\">├── src                                     # 源码</span><br><span class=\"line\">│   ├── aiotjs.h</span><br><span class=\"line\">│   ├── ajs_vm.cpp</span><br><span class=\"line\">│   ├── ....</span><br><span class=\"line\">│   ├── framework                           # 框架源码</span><br><span class=\"line\">│   ├── gui                                 # GUI相关代码，包含lvgl渲染器实现</span><br><span class=\"line\">│   ├── jse                                 # JS Environment JS环境相关</span><br><span class=\"line\">│   └── Kconfig</span><br><span class=\"line\">├── tests                                   # 测试</span><br><span class=\"line\">│   ├── gui</span><br><span class=\"line\">│   ├── helpers</span><br><span class=\"line\">│   ├── run.js</span><br><span class=\"line\">│   ├── ... </span><br><span class=\"line\">│   ├── test-feature-vibrator.js</span><br><span class=\"line\">│   ├── wasi</span><br><span class=\"line\">│   └── wasm</span><br><span class=\"line\">└── toolchain                               # 交叉编译相关</span><br><span class=\"line\">    └── cross-m32.cmake                     # linux 32位构建</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"框架启动流程分析\"><a href=\"#框架启动流程分析\" class=\"headerlink\" title=\"框架启动流程分析\"></a>框架启动流程分析</h1><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/6ca169bc-84af-4252-9758-54c853feefef.svg\" alt=\"6ca169bc-84af-4252-9758-54c853feefef\"></p>\n<p>框架的整个启动和执行流程较为复杂，里面涉及到了JS和C++的互调用。</p>\n<p>启动流程以C++的入口函数为入口点，会初始化quickjs，创建app，启动子线程并加载Native module和内置JS框架代码。</p>\n<p>然后流程转交到JS，由JS通过调用初始化时注册的Native函数来完成整个快应用的加载。</p>\n<h1 id=\"VDOM渲染流程分析\"><a href=\"#VDOM渲染流程分析\" class=\"headerlink\" title=\"VDOM渲染流程分析\"></a>VDOM渲染流程分析</h1><p>VDOM的创建和渲染出于性能考虑，放在了C++层实现，整个VDOM的创建由Native通过执行template上的渲染函数来创建。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">(<span class=\"params\"><span class=\"variable language_\">module</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">vm</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> _vm_ = vm || <span class=\"variable language_\">this</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;div&quot;</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">          <span class=\"string\">&quot;page&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;home-page&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;, [</span><br><span class=\"line\">        aiot.<span class=\"title function_\">__ci__</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">shown</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> _vm_.<span class=\"property\">status</span> !== <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">          <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;text&quot;</span>, &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">                <span class=\"string\">&quot;text-time&quot;</span></span><br><span class=\"line\">              ],</span><br><span class=\"line\">              <span class=\"string\">&quot;value&quot;</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> _vm_.$t(<span class=\"string\">&quot;a.b&quot;</span>) &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">        aiot.<span class=\"title function_\">__ci__</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">shown</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> _vm_.<span class=\"property\">status</span> === <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">          <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;div&quot;</span>, &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">                <span class=\"string\">&quot;body&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;launch-panel&quot;</span></span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;, [</span><br><span class=\"line\">              aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;image&quot;</span>, &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;src&quot;</span>: <span class=\"string\">&quot;/Common/logo.png&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">                  <span class=\"string\">&quot;logo&quot;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">              &#125;),</span><br><span class=\"line\">              aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;text&quot;</span>, &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">                  <span class=\"string\">&quot;app-name&quot;</span></span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"string\">&quot;value&quot;</span>: <span class=\"string\">&quot;航旅纵横&quot;</span></span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">            ])</span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">        aiot.<span class=\"title function_\">__ci__</span>(&#123;...&#125;),</span><br><span class=\"line\">        aiot.<span class=\"title function_\">__ci__</span>(&#123;...&#125;),</span><br><span class=\"line\">        ....</span><br><span class=\"line\">      ])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/***/</span></span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n\n<p>Template本身是一个嵌套结构，它被翻译成了对aiot.<strong>ce</strong>, aiot__cf__, aiot.__ci__等函数的嵌套调用，嵌套调用的过程就是在Native层完成整个dom树构建的过程。</p>\n<p>我们来看__cf__对应的C++源码，它用于创建一个逻辑循环节点：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">DomEntity* <span class=\"title\">dom_create_for_fragment</span><span class=\"params\">(jse_context_ref ctx, <span class=\"type\">jse_value_t</span> options, <span class=\"type\">jse_value_t</span> func)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">AIOTJS_LOG_DEBUG</span>(<span class=\"string\">&quot;dom_create_for_fragment ==================== &quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   ....</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建DomForFragment节点</span></span><br><span class=\"line\">    DomForFragment *frag = <span class=\"keyword\">new</span> <span class=\"built_in\">DomForFragment</span>();</span><br><span class=\"line\">    page-&gt;<span class=\"built_in\">addDomEntity</span>(frag);</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存JS端传入的表达式和render函数</span></span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> exp = <span class=\"built_in\">jse_get_object_property</span>(ctx, options, <span class=\"string\">&quot;exp&quot;</span>);</span><br><span class=\"line\">    frag-&gt;<span class=\"built_in\">setExpress</span>(<span class=\"built_in\">jse_dup_value</span>(ctx, exp));</span><br><span class=\"line\">    frag-&gt;<span class=\"built_in\">setRenderFunction</span>(<span class=\"built_in\">jse_dup_value</span>(ctx, func));</span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, exp);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置key或者$idx</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建effect函数</span></span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> eff = <span class=\"built_in\">create_effect</span>(ctx, dom_update_for_fragment, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">AIOTJS_LOG_DEBUG</span>(<span class=\"string\">&quot;AddEffect for %d&quot;</span>, frag-&gt;<span class=\"built_in\">uid</span>());</span><br><span class=\"line\">    <span class=\"comment\">//调用framework的effectWrap函数将effect函数传递给JS层保存</span></span><br><span class=\"line\">    frag-&gt;<span class=\"built_in\">addEffect</span>(ctx, <span class=\"built_in\">dom_effect</span>(ctx, eff, frag-&gt;<span class=\"built_in\">uid</span>(), <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, eff);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 返回创建好的frag vdom节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> frag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>dom_update_for_fragment是C++端的节点更新函数，它最终会触发节点的render函数更新子节点：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DomForFragment::render</span><span class=\"params\">(jse_context_ref ctx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归构造</span></span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> exp_obj = <span class=\"built_in\">jse_call</span>(ctx, exp_, JSE_UNDEFINED, <span class=\"number\">0</span>, &#123;&#125;);</span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> expValue = JSE_UNDEFINED;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* str_tid = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用JS端的求值函数获取for循环对应的list对象 expValue</span></span><br><span class=\"line\">    expValue = <span class=\"built_in\">get_from_js_expression</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    ....</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">    <span class=\"type\">jse_size_t</span> len = <span class=\"built_in\">jse_get_array_length</span>(ctx, expValue);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">jse_size_t</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//为每个element分别调用render函数</span></span><br><span class=\"line\">        <span class=\"type\">jse_value_t</span> idx = <span class=\"built_in\">jse_uint</span>(ctx, i);</span><br><span class=\"line\">        <span class=\"type\">jse_value_t</span> args[] = &#123;</span><br><span class=\"line\">            idx,</span><br><span class=\"line\">            item</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">jse_value_t</span> res = <span class=\"built_in\">jse_call</span>(ctx, render_, JSE_UNDEFINED, <span class=\"number\">2</span>, args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">jse_is_number</span>(res)) &#123;</span><br><span class=\"line\">            <span class=\"type\">unsigned</span> <span class=\"type\">int</span> cid = <span class=\"built_in\">jse_to_uint_def</span>(ctx, res, <span class=\"number\">0</span>);</span><br><span class=\"line\">            DomEntity* ent = p-&gt;<span class=\"built_in\">entity</span>(cid);</span><br><span class=\"line\">            <span class=\"built_in\">AIOTJS_CHECK_NE</span>(ent, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">            ent-&gt;<span class=\"built_in\">setDiffOperationType</span>(DomEntityDiffOperationType::Add);</span><br><span class=\"line\">            <span class=\"built_in\">addChild</span>(ent);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"built_in\">jse_is_undefined</span>(tid_value)) &#123;</span><br><span class=\"line\">                <span class=\"type\">jse_value_t</span> v_tid = <span class=\"built_in\">jse_dup_value</span>(ctx, tid_value);</span><br><span class=\"line\">                ent-&gt;<span class=\"built_in\">setTid</span>(v_tid);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">jse_is_array</span>(ctx, res)) &#123;</span><br><span class=\"line\">            <span class=\"type\">jse_size_t</span> childlen = <span class=\"built_in\">jse_get_array_length</span>(ctx, res);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j=<span class=\"number\">0</span>; j&lt;childlen; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">unsigned</span> <span class=\"type\">int</span> cid = <span class=\"built_in\">jse_get_array_idx_uint</span>(ctx, res, j, <span class=\"number\">0</span>);</span><br><span class=\"line\">                DomEntity* ent = p-&gt;<span class=\"built_in\">entity</span>(cid);</span><br><span class=\"line\">                <span class=\"built_in\">AIOTJS_CHECK_NE</span>(ent, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">                ent-&gt;<span class=\"built_in\">setDiffOperationType</span>(DomEntityDiffOperationType::Add);</span><br><span class=\"line\">                <span class=\"built_in\">addChild</span>(ent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">jse_free_value</span>(ctx, res);</span><br><span class=\"line\">        <span class=\"built_in\">jse_free_value</span>(ctx, idx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, item);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, expValue);</span><br><span class=\"line\">    <span class=\"built_in\">AIOTJS_LOG_DEBUG</span>(<span class=\"string\">&quot;DomForFragment::build finished - &lt;%u&gt;&quot;</span>, <span class=\"built_in\">uid</span>());</span><br><span class=\"line\">    <span class=\"comment\">// 只有初始化的时候返回true表示需要flush，其它情况下延迟flush</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">isBindingEffect</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"框架线程模型\"><a href=\"#框架线程模型\" class=\"headerlink\" title=\"框架线程模型\"></a>框架线程模型</h1><p>框架采用多线程模式，主要有如下两类线程：</p>\n<ul>\n<li>主线程：负责渲染，只有一个</li>\n<li>应用线程：负责执行JS代码，响应数据变更并更新vdom</li>\n</ul>\n<p>主线程和应用线程各启动一个uv loop进行消息处理，这两个线程通过libuv进行异步通信，主要有如下几种场景：</p>\n<ol>\n<li>应用线程退出后异步通知主线程退出</li>\n<li>应用线程更新vdom后异步通知主线程刷新ui</li>\n<li>系统消息（如应用后台，应用退出等）由主线程发出，通过libuv转到应用线程执行</li>\n</ol>\n<h1 id=\"渲染流程分析\"><a href=\"#渲染流程分析\" class=\"headerlink\" title=\"渲染流程分析\"></a>渲染流程分析</h1><h2 id=\"渲染流程图\"><a href=\"#渲染流程图\" class=\"headerlink\" title=\"渲染流程图\"></a>渲染流程图</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/33f7e704-ec72-4782-b8ff-1e58df0bef2d.svg\" alt=\"33f7e704-ec72-4782-b8ff-1e58df0bef2d\"></p>\n<h2 id=\"渲染流程\"><a href=\"#渲染流程\" class=\"headerlink\" title=\"渲染流程\"></a>渲染流程</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/6e8b9b04-5afd-47aa-9263-d3a379c1ac5b.svg\" alt=\"6e8b9b04-5afd-47aa-9263-d3a379c1ac5b\"></p>\n<h1 id=\"框架核心部分介绍\"><a href=\"#框架核心部分介绍\" class=\"headerlink\" title=\"框架核心部分介绍\"></a>框架核心部分介绍</h1><h2 id=\"核心类图\"><a href=\"#核心类图\" class=\"headerlink\" title=\"核心类图\"></a>核心类图</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/a8dc8b49-a594-454c-9309-164e3269c5e9.svg\" alt=\"a8dc8b49-a594-454c-9309-164e3269c5e9\"></p>\n<p>解释：</p>\n<ol>\n<li>Framework是内部使用的框架类表示，FrameworkExt从Framework继承并添加了对vela系统的消息集成，在vela中使用FrameworkExt表示唯一的框架实例</li>\n<li>FrameworkExt中会维护多个app实例，框架支持多应用切换</li>\n<li>每个app实例包含一个JS运行上下文环境和相关的libuv句柄，它们封装在RuntimeContxt中，作为Application的成员变量保存，即一个Application对象唯一对应一个js运行上下文。</li>\n<li>一个Applicatoin对象可以拥有多个Page对象，一个Page对象表示一个可显示的页面，实际是一颗vdom树</li>\n<li>Page对象的继承关系较为复杂，框架支持自定义组件，从逻辑上讲，一个Component包含一颗vdom子树，它可以被任意组合来形成最终的完整vdom树。Page是最顶层的Component组件，唯一。从继承关系上讲，DomDocument这一层应该去掉，在添加子组件支持后它的语义已被Component取代，这层抽象当前代码中没有意义但仍然存在。</li>\n</ol>"},{"title":"quickjs调试工具","keywords":"前端,面试,C","description":"quickjs调试工具","top_img":"设置false不显示顶部图片","sticky":"数值越大越靠前","cover":"https://raw.githubusercontent.com/why862555625/images/main/images/18.jpg","comments":1,"abbrlink":"d9795d10","date":"2023-05-23T07:21:13.000Z","updated":"2023-05-23T07:21:13.000Z","_content":"\n\n\nvela系统quickjs对接devtools\n\n<!-- more -->\n\n## vela快应用调试功能概览\n\n![image-20230525102147522](https://raw.githubusercontent.com/why862555625/images/main/image-20230525102147522.png)\n\n# vela debug调试功能\n\ndebug调试功能图\n\n![image-20230525111407415](https://raw.githubusercontent.com/why862555625/images/main/image-20230525111407415.png)\n\nvela debug调试功能实现大致分为4个步骤：\n\n1. **连接时将所有的源码发送给devtools。**\n2. **在devtools 的source功能中打断点、将请求发送给下层cdp.**\n3. **cdp计算断点具体在字节码中的位置、并记录。**\n4. **在引擎执行字节码时判断有无命中断点。**\n\n下面具体说明这四个步骤：\n\n## 1. 连接时将所有的源码发送给devtools\n\n在调用loadApplication时会将app的路径保存在APP类中，也就是app的rpk的最外层路径。在监听到devtool连接时，会将rpk包中的所js文件发送给devtools，devtools会将这些js文件拼接成上图中的source文件。\n\n## 2. 在devtools 的source功能中打断点、将请求发送给下层cdp\n\n当打开source文件上打断点、devtools会将断点的文件名、行号发送到下层cdp.\n\n## 3. cdp计算断点具体在字节码中的位置、并记录。\n\n- 断点功能的输入实际上是文件名和断点行信息，第一步我们需要利用这个信息，找到模块，进而首先找到目标函数。\n  - quickjs在真实加载module的时候都会调用JS_EvalInternal。我们可以在这个函数里面监听并记录已经加载完的模块。\n\n- 每个函数对象上都记录了自身的起始行，通过pc2line table可以计算得到结束行，进而和传入的行号进行范围匹配计算。\n  - 函数和字节码的映射规则：\n    - 如果一行源码对应的字节码较短，就将前4位存源码的行数，后四位存字节码对应的行数\n    - 如果一个源码对应的字节码较长，就先存入一个0值（解析pc2line_buf的时候遇到0值会自动将下一个当做128  int来解析），后面补一个128的int，这个int的高位用来存源码行数、低位存字节码的行数。\n\n**计算结束行函数：**\n\n```c++\n#define PC2LINE_BASE     (-1)\n#define PC2LINE_RANGE    5\n#define PC2LINE_OP_FIRST 1\n#define PC2LINE_DIFF_PC_MAX ((255 - PC2LINE_OP_FIRST) / PC2LINE_RANGE)\nstatic int caculate_function_last_line(JSFunctionBytecode* b) {\n    unsigned int op;\n    int ret, v;\n    FunctionBytecodeDebugInfo* debug = js_debugger_get_bytecode_debug_info(b);\n    int line_num = debug->line_num, new_line_num;\n    uint8_t *p = debug->pc2line_buf;\n    uint8_t *p_end = p + debug->pc2line_len;\n    int succ = 1;\n\n    // scan line by line\n    while (p < p_end) {\n        op = *p++;\n        if (op == 0) {\n            uint32_t val;\n            ret = get_leb128(&val, p, p_end);\n            if (ret < 0) {\n                succ = 0;\n                break;\n            }\n            // pc += val;\n            p += ret;\n            ret = get_sleb128(&v, p, p_end);\n            if (ret < 0) {\n                succ = 0;\n                break;\n            }\n            p += ret;\n            new_line_num = line_num + v;\n        } else {\n            op -= PC2LINE_OP_FIRST;\n            new_line_num = line_num + (op % PC2LINE_RANGE) + PC2LINE_BASE;\n        }\n        line_num = new_line_num;\n    }\n    return succ ? line_num : 0;\n}\n\nSTATIC int get_leb128(uint32_t *pval, const uint8_t *buf,\n                      const uint8_t *buf_end)\n{\n    const uint8_t *ptr = buf;\n    uint32_t v, a, i;\n    v = 0;\n    for(i = 0; i < 5; i++) {\n        if (unlikely(ptr >= buf_end))\n            break;\n        a = *ptr++;\n        v |= (a & 0x7f) << (i * 7);\n        if (!(a & 0x80)) {\n            *pval = v;\n            return ptr - buf;\n        }\n    }\n    *pval = 0;\n    return -1;\n}\nSTATIC int get_sleb128(int32_t *pval, const uint8_t *buf,\n                       const uint8_t *buf_end)\n{\n    int ret;\n    uint32_t val;\n    ret = get_leb128(&val, buf, buf_end);\n    if (ret < 0) {\n        *pval = 0;\n        return -1;\n    }\n    *pval = (val >> 1) ^ -(val & 1);\n    return ret;\n}\n```\n\n**源码表和字节码表对应规则：**\n\n```c++\n\nstatic void compute_pc2line_info(JSFunctionDef *s)\n{\n    if (!(s->js_mode & JS_MODE_STRIP) && s->line_number_slots) {\n        int last_line_num = s->line_num;\n        uint32_t last_pc = 0;\n        int i;\n\n        js_dbuf_init(s->ctx, &s->pc2line);\n        for (i = 0; i < s->line_number_count; i++) {\n            uint32_t pc = s->line_number_slots[i].pc;\n            int line_num = s->line_number_slots[i].line_num;\n            int diff_pc, diff_line;\n\n            if (line_num < 0)\n                continue;\n\n            diff_pc = pc - last_pc;\n            diff_line = line_num - last_line_num;\n            if (diff_line == 0 || diff_pc < 0)\n                continue;\n\n            if (diff_line >= PC2LINE_BASE &&\n                diff_line < PC2LINE_BASE + PC2LINE_RANGE &&\n                diff_pc <= PC2LINE_DIFF_PC_MAX) {\n                dbuf_putc(&s->pc2line, (diff_line - PC2LINE_BASE) +\n                          diff_pc * PC2LINE_RANGE + PC2LINE_OP_FIRST);\n            } else {\n                /* longer encoding */\n                dbuf_putc(&s->pc2line, 0);\n                dbuf_put_leb128(&s->pc2line, diff_pc);\n                dbuf_put_sleb128(&s->pc2line, diff_line);\n            }\n            last_pc = pc;\n            last_line_num = line_num;\n        }\n    }\n}\n```\n\n\n\n- 需要注意匹配到的函数可能只是外层函数，具体的断点偏移计算时要考虑递归子函数。\n\n  - 基于pc2line table计算断点在函数字节码中的偏移位置，计算时如果目出现计算出来的行号比目标行号大的情况 `end_line_num>cur_line_num>targe_num`，说明断点落在了子函数中，需要递归，直到最终找到或全部失败。\n\n  \n\n  ![image-20230525125207891](https://raw.githubusercontent.com/why862555625/images/main/image-20230525125207891.png)\n\n- 断点断到、将pause消息和目前上下文的变量信息和调用栈发送给devtools。\n\n  - runtime上面保留了当前栈的信息JSStackFrame，JSStackFrame上面保存了栈上的变量、参数、函数信息；并且JSStackFrame可以通过prev_frame向上查找栈信息。这样遍历下来就可以完整的得到栈上的变量和调用栈。\n\n  \n\n**JSRuntime和JSStackFrame的数据结构**\n\n```C++\n\nstruct JSRuntime {\n    JSMallocFunctions mf;\n    JSMallocState malloc_state;\n    const char *rt_info;\n\n    int atom_hash_size; /* power of two */\n    int atom_count;\n    int atom_size;\n    int atom_count_resize; /* resize hash table at this count */\n    uint32_t *atom_hash;\n    JSAtomStruct **atom_array;\n    int atom_free_index; /* 0 = none */\n\n    int class_count;    /* size of class_array */\n    JSClass *class_array;\n\n    struct list_head context_list; /* list of JSContext.link */\n    /* list of JSGCObjectHeader.link. List of allocated GC objects (used\n       by the garbage collector) */\n    struct list_head gc_obj_list;\n    /* list of JSGCObjectHeader.link. Used during JS_FreeValueRT() */\n    struct list_head gc_zero_ref_count_list;\n    struct list_head tmp_obj_list; /* used during GC */\n    JSGCPhaseEnum gc_phase : 8;\n    size_t malloc_gc_threshold;\n#ifdef DUMP_LEAKS\n    struct list_head string_list; /* list of JSString.link */\n#endif\n    /* stack limitation */\n    uintptr_t stack_size; /* in bytes, 0 if no limit */\n    uintptr_t stack_top;\n    uintptr_t stack_limit; /* lower stack limit */\n\n    JSValue current_exception;\n    /* true if inside an out of memory error, to avoid recursing */\n    BOOL in_out_of_memory : 8;\n\n    struct JSStackFrame *current_stack_frame;  // current stack info\n\n    JSInterruptHandler *interrupt_handler;\n    void *interrupt_opaque;\n\n    JSHostPromiseRejectionTracker *host_promise_rejection_tracker;\n    void *host_promise_rejection_tracker_opaque;\n\n    struct list_head job_list; /* list of JSJobEntry.link */\n\n    JSModuleNormalizeFunc *module_normalize_func;\n    JSModuleLoaderFunc *module_loader_func;\n    void *module_loader_opaque;\n\n    BOOL can_block : 8; /* TRUE if Atomics.wait can block */\n    /* used to allocate, free and clone SharedArrayBuffers */\n    JSSharedArrayBufferFunctions sab_funcs;\n\n    /* Shape hash table */\n    int shape_hash_bits;\n    int shape_hash_size;\n    int shape_hash_count; /* number of hashed shapes */\n    JSShape **shape_hash;\n#ifdef CONFIG_BIGNUM\n    bf_context_t bf_ctx;\n    JSNumericOperations bigint_ops;\n    JSNumericOperations bigfloat_ops;\n    JSNumericOperations bigdecimal_ops;\n    uint32_t operator_count;\n#endif\n    void *user_opaque;\n#ifdef CONFIG_INTERPRETERS_QUICKJS_DEBUG\n    struct JSDebuggerInfo debugger_info;\n    struct DumpMemoryInfo dump_memory_info;\n#endif\n    JSOutOfMemoryTracker* oom_tracker;\n#ifdef CONFIG_MEMORY_LEAK_TRACK\n    int isStartMemoryDump;\n    vector* newObjVector;\n    JSContext* currentCtx;\n    char* pageStatus;\n#endif\n};\n\ntypedef struct JSStackFrame {\n    struct JSStackFrame *prev_frame; /* NULL if first stack frame */\n    JSValue cur_func; /* current function, JS_UNDEFINED if the frame is detached */\n    JSValue *arg_buf; /* arguments */\n    JSValue *var_buf; /* variables */\n    struct list_head var_ref_list; /* list of JSVarRef.link */\n    const uint8_t *cur_pc; /* only used in bytecode functions : PC of the\n                        instruction after the call */\n    int arg_count;\n    int js_mode; /* 0 or JS_MODE_MATH for C functions */\n    /* only used in generators. Current stack pointer value. NULL if\n       the function is running. */\n    JSValue *cur_sp;\n} JSStackFrame;\n\n```\n\n**函数数据结构：**\n\n![](https://raw.githubusercontent.com/why862555625/images/main/image-20230525144252998.png)\n\n**查找目标函数流程：**\n\n![](https://raw.githubusercontent.com/why862555625/images/main/image-20230525124949165.png)\n\n\n\n## 4. 在引擎执行字节码时判断有无命中断点。\n\n命中断点有两个设计思路：\n\n**第一种：**\n\n直接修改字节码、插入debugger指令和nop\\需要额外注意在命中后和取消时将字节码恢复、否则会出现问题。\n\n![image-20230525161322186](https://raw.githubusercontent.com/why862555625/images/main/image-20230525161322186.png)\n\n**第二种：**\n\n分配一块和字节码相同长度的数组、在相同的便宜位置写入1、作为断点标志、方便命中检查。\n\n![image-20230525161507336](https://raw.githubusercontent.com/why862555625/images/main/image-20230525161507336.png)\n\n断点命中的核心思路实在引擎解释执行字节码的时候插入堆断点命中的检查、命中断电后停止执行（不在继续解释下一条指令）。\n\n这里选择重定义字节码的case定义、如果开启了调试功能、则每次解释执行字节码都会插入对js_debugger_check函数执行、他负责检查每一步执行是否命中断点。检查方法很简单、检查当前pc是否落在了断点的范围内（依赖设置断点）\n\n```c++\n#ifdef CONFIG_INTERPRETERS_QUICKJS_DEBUG\n#define CASE(op)        case op: js_debugger_check(ctx, pc); stub_ ## op\n#else\n#define CASE(op)        case op: stub_ ## op\n#endif\n```\n\n**执行字节码：**\n\n![image-20230525170447952](https://raw.githubusercontent.com/why862555625/images/main/image-20230525170447952.png)\n\njs_debugger_check 中暂停的主要逻辑是一个`while(ture)`循环，然后每次执行libuv_run_once()推一次主循环的句柄，用来判断服务端是否放开断点。\n\n\n\n# memory 功能\n\n\n\nmemory功能大概可以概述为三个部分：\n\n1. 接受devtools  memory dump的请求之后，开始遍历引擎的堆内存链表（v8是使用图结构来表示的堆内存、quickjs是使用链表表示的）。\n2. 将quickjs中的链表内存转化为图结构内存。（devtools snapshot需要图结构）\n3. 将图结构转化为snapshot发送给devtools、devtools进行解析并显示。\n\n## 1. 理解引擎的堆内存结构\n\nquickjs的runtime中的gc_obj_list保存了引擎中的所有堆对象的JSGCObjectHeader.遍历gc_obj_list就可以得到所有的堆对象信息\n\n```c++\n\nstruct JSGCObjectHeader {\n    int ref_count; /* must come first, 32-bit */\n    JSGCObjectTypeEnum gc_obj_type : 4;\n    uint8_t mark : 4; /* used by the GC */\n    uint8_t dummy1; /* not used by the GC */\n    uint16_t dummy2; /* not used by the GC */\n    struct list_head link;\n    int64_t id;\n};\n```\n\n\n\n![image-20230525171354456](https://raw.githubusercontent.com/why862555625/images/main/image-20230525171354456.png)\n\n\n\n## 2. 理解snapshot文件格式\n\n- V8 HeapSnapshot文件整体采用JSON格式存储。\n- 存储时采用Meta + 内容的方式，Meta里描述了各个字段的含义，各个节点的数量等。\n- 内存dump信息按照点集和边集的形式存储。点集存储节点信息，边集存储对象之间的链接关系。\n- 字符串是单独存储的，节点中使用时采用下标引用的方式以节约内存。\n\n\n\n![image-20230525172031289](https://raw.githubusercontent.com/why862555625/images/main/image-20230525172031289.png)\n\n\n\n\n\n## 3.堆对象处理：从链表到图\n\nQuickjs中GC对象是通过链表保存的，但HeapSnapshot中是按照图结构保存的，所以需要有一个从链表构建对象图的过程，我生成了一个代理结构，额外记录了对象间的链接关系。\n\n如果不这样做，就需要修改quickjs的GC list结构，这样改动会很大。\n\n\n\n![image-20230525172159734](https://raw.githubusercontent.com/why862555625/images/main/image-20230525172159734.png)\n\n## 4. Proxy图的构建算法\n\n![image-20230525172302551](https://raw.githubusercontent.com/why862555625/images/main/image-20230525172302551.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/c/quickjs调试器.md","raw":"---\ntitle: quickjs调试工具\ntags:\n  - 前端\n  - C\ncategories: C\nkeywords: '前端,面试,C'\ndescription: quickjs调试工具\ntop_img: 设置false不显示顶部图片\nsticky: 数值越大越靠前\ncover: \"https://raw.githubusercontent.com/why862555625/images/main/images/18.jpg\"\ncomments: false评论\nabbrlink: d9795d10\ndate: 2023-05-23 15:21:13\nupdated: 2023-05-23 15:21:13\n---\n\n\n\nvela系统quickjs对接devtools\n\n<!-- more -->\n\n## vela快应用调试功能概览\n\n![image-20230525102147522](https://raw.githubusercontent.com/why862555625/images/main/image-20230525102147522.png)\n\n# vela debug调试功能\n\ndebug调试功能图\n\n![image-20230525111407415](https://raw.githubusercontent.com/why862555625/images/main/image-20230525111407415.png)\n\nvela debug调试功能实现大致分为4个步骤：\n\n1. **连接时将所有的源码发送给devtools。**\n2. **在devtools 的source功能中打断点、将请求发送给下层cdp.**\n3. **cdp计算断点具体在字节码中的位置、并记录。**\n4. **在引擎执行字节码时判断有无命中断点。**\n\n下面具体说明这四个步骤：\n\n## 1. 连接时将所有的源码发送给devtools\n\n在调用loadApplication时会将app的路径保存在APP类中，也就是app的rpk的最外层路径。在监听到devtool连接时，会将rpk包中的所js文件发送给devtools，devtools会将这些js文件拼接成上图中的source文件。\n\n## 2. 在devtools 的source功能中打断点、将请求发送给下层cdp\n\n当打开source文件上打断点、devtools会将断点的文件名、行号发送到下层cdp.\n\n## 3. cdp计算断点具体在字节码中的位置、并记录。\n\n- 断点功能的输入实际上是文件名和断点行信息，第一步我们需要利用这个信息，找到模块，进而首先找到目标函数。\n  - quickjs在真实加载module的时候都会调用JS_EvalInternal。我们可以在这个函数里面监听并记录已经加载完的模块。\n\n- 每个函数对象上都记录了自身的起始行，通过pc2line table可以计算得到结束行，进而和传入的行号进行范围匹配计算。\n  - 函数和字节码的映射规则：\n    - 如果一行源码对应的字节码较短，就将前4位存源码的行数，后四位存字节码对应的行数\n    - 如果一个源码对应的字节码较长，就先存入一个0值（解析pc2line_buf的时候遇到0值会自动将下一个当做128  int来解析），后面补一个128的int，这个int的高位用来存源码行数、低位存字节码的行数。\n\n**计算结束行函数：**\n\n```c++\n#define PC2LINE_BASE     (-1)\n#define PC2LINE_RANGE    5\n#define PC2LINE_OP_FIRST 1\n#define PC2LINE_DIFF_PC_MAX ((255 - PC2LINE_OP_FIRST) / PC2LINE_RANGE)\nstatic int caculate_function_last_line(JSFunctionBytecode* b) {\n    unsigned int op;\n    int ret, v;\n    FunctionBytecodeDebugInfo* debug = js_debugger_get_bytecode_debug_info(b);\n    int line_num = debug->line_num, new_line_num;\n    uint8_t *p = debug->pc2line_buf;\n    uint8_t *p_end = p + debug->pc2line_len;\n    int succ = 1;\n\n    // scan line by line\n    while (p < p_end) {\n        op = *p++;\n        if (op == 0) {\n            uint32_t val;\n            ret = get_leb128(&val, p, p_end);\n            if (ret < 0) {\n                succ = 0;\n                break;\n            }\n            // pc += val;\n            p += ret;\n            ret = get_sleb128(&v, p, p_end);\n            if (ret < 0) {\n                succ = 0;\n                break;\n            }\n            p += ret;\n            new_line_num = line_num + v;\n        } else {\n            op -= PC2LINE_OP_FIRST;\n            new_line_num = line_num + (op % PC2LINE_RANGE) + PC2LINE_BASE;\n        }\n        line_num = new_line_num;\n    }\n    return succ ? line_num : 0;\n}\n\nSTATIC int get_leb128(uint32_t *pval, const uint8_t *buf,\n                      const uint8_t *buf_end)\n{\n    const uint8_t *ptr = buf;\n    uint32_t v, a, i;\n    v = 0;\n    for(i = 0; i < 5; i++) {\n        if (unlikely(ptr >= buf_end))\n            break;\n        a = *ptr++;\n        v |= (a & 0x7f) << (i * 7);\n        if (!(a & 0x80)) {\n            *pval = v;\n            return ptr - buf;\n        }\n    }\n    *pval = 0;\n    return -1;\n}\nSTATIC int get_sleb128(int32_t *pval, const uint8_t *buf,\n                       const uint8_t *buf_end)\n{\n    int ret;\n    uint32_t val;\n    ret = get_leb128(&val, buf, buf_end);\n    if (ret < 0) {\n        *pval = 0;\n        return -1;\n    }\n    *pval = (val >> 1) ^ -(val & 1);\n    return ret;\n}\n```\n\n**源码表和字节码表对应规则：**\n\n```c++\n\nstatic void compute_pc2line_info(JSFunctionDef *s)\n{\n    if (!(s->js_mode & JS_MODE_STRIP) && s->line_number_slots) {\n        int last_line_num = s->line_num;\n        uint32_t last_pc = 0;\n        int i;\n\n        js_dbuf_init(s->ctx, &s->pc2line);\n        for (i = 0; i < s->line_number_count; i++) {\n            uint32_t pc = s->line_number_slots[i].pc;\n            int line_num = s->line_number_slots[i].line_num;\n            int diff_pc, diff_line;\n\n            if (line_num < 0)\n                continue;\n\n            diff_pc = pc - last_pc;\n            diff_line = line_num - last_line_num;\n            if (diff_line == 0 || diff_pc < 0)\n                continue;\n\n            if (diff_line >= PC2LINE_BASE &&\n                diff_line < PC2LINE_BASE + PC2LINE_RANGE &&\n                diff_pc <= PC2LINE_DIFF_PC_MAX) {\n                dbuf_putc(&s->pc2line, (diff_line - PC2LINE_BASE) +\n                          diff_pc * PC2LINE_RANGE + PC2LINE_OP_FIRST);\n            } else {\n                /* longer encoding */\n                dbuf_putc(&s->pc2line, 0);\n                dbuf_put_leb128(&s->pc2line, diff_pc);\n                dbuf_put_sleb128(&s->pc2line, diff_line);\n            }\n            last_pc = pc;\n            last_line_num = line_num;\n        }\n    }\n}\n```\n\n\n\n- 需要注意匹配到的函数可能只是外层函数，具体的断点偏移计算时要考虑递归子函数。\n\n  - 基于pc2line table计算断点在函数字节码中的偏移位置，计算时如果目出现计算出来的行号比目标行号大的情况 `end_line_num>cur_line_num>targe_num`，说明断点落在了子函数中，需要递归，直到最终找到或全部失败。\n\n  \n\n  ![image-20230525125207891](https://raw.githubusercontent.com/why862555625/images/main/image-20230525125207891.png)\n\n- 断点断到、将pause消息和目前上下文的变量信息和调用栈发送给devtools。\n\n  - runtime上面保留了当前栈的信息JSStackFrame，JSStackFrame上面保存了栈上的变量、参数、函数信息；并且JSStackFrame可以通过prev_frame向上查找栈信息。这样遍历下来就可以完整的得到栈上的变量和调用栈。\n\n  \n\n**JSRuntime和JSStackFrame的数据结构**\n\n```C++\n\nstruct JSRuntime {\n    JSMallocFunctions mf;\n    JSMallocState malloc_state;\n    const char *rt_info;\n\n    int atom_hash_size; /* power of two */\n    int atom_count;\n    int atom_size;\n    int atom_count_resize; /* resize hash table at this count */\n    uint32_t *atom_hash;\n    JSAtomStruct **atom_array;\n    int atom_free_index; /* 0 = none */\n\n    int class_count;    /* size of class_array */\n    JSClass *class_array;\n\n    struct list_head context_list; /* list of JSContext.link */\n    /* list of JSGCObjectHeader.link. List of allocated GC objects (used\n       by the garbage collector) */\n    struct list_head gc_obj_list;\n    /* list of JSGCObjectHeader.link. Used during JS_FreeValueRT() */\n    struct list_head gc_zero_ref_count_list;\n    struct list_head tmp_obj_list; /* used during GC */\n    JSGCPhaseEnum gc_phase : 8;\n    size_t malloc_gc_threshold;\n#ifdef DUMP_LEAKS\n    struct list_head string_list; /* list of JSString.link */\n#endif\n    /* stack limitation */\n    uintptr_t stack_size; /* in bytes, 0 if no limit */\n    uintptr_t stack_top;\n    uintptr_t stack_limit; /* lower stack limit */\n\n    JSValue current_exception;\n    /* true if inside an out of memory error, to avoid recursing */\n    BOOL in_out_of_memory : 8;\n\n    struct JSStackFrame *current_stack_frame;  // current stack info\n\n    JSInterruptHandler *interrupt_handler;\n    void *interrupt_opaque;\n\n    JSHostPromiseRejectionTracker *host_promise_rejection_tracker;\n    void *host_promise_rejection_tracker_opaque;\n\n    struct list_head job_list; /* list of JSJobEntry.link */\n\n    JSModuleNormalizeFunc *module_normalize_func;\n    JSModuleLoaderFunc *module_loader_func;\n    void *module_loader_opaque;\n\n    BOOL can_block : 8; /* TRUE if Atomics.wait can block */\n    /* used to allocate, free and clone SharedArrayBuffers */\n    JSSharedArrayBufferFunctions sab_funcs;\n\n    /* Shape hash table */\n    int shape_hash_bits;\n    int shape_hash_size;\n    int shape_hash_count; /* number of hashed shapes */\n    JSShape **shape_hash;\n#ifdef CONFIG_BIGNUM\n    bf_context_t bf_ctx;\n    JSNumericOperations bigint_ops;\n    JSNumericOperations bigfloat_ops;\n    JSNumericOperations bigdecimal_ops;\n    uint32_t operator_count;\n#endif\n    void *user_opaque;\n#ifdef CONFIG_INTERPRETERS_QUICKJS_DEBUG\n    struct JSDebuggerInfo debugger_info;\n    struct DumpMemoryInfo dump_memory_info;\n#endif\n    JSOutOfMemoryTracker* oom_tracker;\n#ifdef CONFIG_MEMORY_LEAK_TRACK\n    int isStartMemoryDump;\n    vector* newObjVector;\n    JSContext* currentCtx;\n    char* pageStatus;\n#endif\n};\n\ntypedef struct JSStackFrame {\n    struct JSStackFrame *prev_frame; /* NULL if first stack frame */\n    JSValue cur_func; /* current function, JS_UNDEFINED if the frame is detached */\n    JSValue *arg_buf; /* arguments */\n    JSValue *var_buf; /* variables */\n    struct list_head var_ref_list; /* list of JSVarRef.link */\n    const uint8_t *cur_pc; /* only used in bytecode functions : PC of the\n                        instruction after the call */\n    int arg_count;\n    int js_mode; /* 0 or JS_MODE_MATH for C functions */\n    /* only used in generators. Current stack pointer value. NULL if\n       the function is running. */\n    JSValue *cur_sp;\n} JSStackFrame;\n\n```\n\n**函数数据结构：**\n\n![](https://raw.githubusercontent.com/why862555625/images/main/image-20230525144252998.png)\n\n**查找目标函数流程：**\n\n![](https://raw.githubusercontent.com/why862555625/images/main/image-20230525124949165.png)\n\n\n\n## 4. 在引擎执行字节码时判断有无命中断点。\n\n命中断点有两个设计思路：\n\n**第一种：**\n\n直接修改字节码、插入debugger指令和nop\\需要额外注意在命中后和取消时将字节码恢复、否则会出现问题。\n\n![image-20230525161322186](https://raw.githubusercontent.com/why862555625/images/main/image-20230525161322186.png)\n\n**第二种：**\n\n分配一块和字节码相同长度的数组、在相同的便宜位置写入1、作为断点标志、方便命中检查。\n\n![image-20230525161507336](https://raw.githubusercontent.com/why862555625/images/main/image-20230525161507336.png)\n\n断点命中的核心思路实在引擎解释执行字节码的时候插入堆断点命中的检查、命中断电后停止执行（不在继续解释下一条指令）。\n\n这里选择重定义字节码的case定义、如果开启了调试功能、则每次解释执行字节码都会插入对js_debugger_check函数执行、他负责检查每一步执行是否命中断点。检查方法很简单、检查当前pc是否落在了断点的范围内（依赖设置断点）\n\n```c++\n#ifdef CONFIG_INTERPRETERS_QUICKJS_DEBUG\n#define CASE(op)        case op: js_debugger_check(ctx, pc); stub_ ## op\n#else\n#define CASE(op)        case op: stub_ ## op\n#endif\n```\n\n**执行字节码：**\n\n![image-20230525170447952](https://raw.githubusercontent.com/why862555625/images/main/image-20230525170447952.png)\n\njs_debugger_check 中暂停的主要逻辑是一个`while(ture)`循环，然后每次执行libuv_run_once()推一次主循环的句柄，用来判断服务端是否放开断点。\n\n\n\n# memory 功能\n\n\n\nmemory功能大概可以概述为三个部分：\n\n1. 接受devtools  memory dump的请求之后，开始遍历引擎的堆内存链表（v8是使用图结构来表示的堆内存、quickjs是使用链表表示的）。\n2. 将quickjs中的链表内存转化为图结构内存。（devtools snapshot需要图结构）\n3. 将图结构转化为snapshot发送给devtools、devtools进行解析并显示。\n\n## 1. 理解引擎的堆内存结构\n\nquickjs的runtime中的gc_obj_list保存了引擎中的所有堆对象的JSGCObjectHeader.遍历gc_obj_list就可以得到所有的堆对象信息\n\n```c++\n\nstruct JSGCObjectHeader {\n    int ref_count; /* must come first, 32-bit */\n    JSGCObjectTypeEnum gc_obj_type : 4;\n    uint8_t mark : 4; /* used by the GC */\n    uint8_t dummy1; /* not used by the GC */\n    uint16_t dummy2; /* not used by the GC */\n    struct list_head link;\n    int64_t id;\n};\n```\n\n\n\n![image-20230525171354456](https://raw.githubusercontent.com/why862555625/images/main/image-20230525171354456.png)\n\n\n\n## 2. 理解snapshot文件格式\n\n- V8 HeapSnapshot文件整体采用JSON格式存储。\n- 存储时采用Meta + 内容的方式，Meta里描述了各个字段的含义，各个节点的数量等。\n- 内存dump信息按照点集和边集的形式存储。点集存储节点信息，边集存储对象之间的链接关系。\n- 字符串是单独存储的，节点中使用时采用下标引用的方式以节约内存。\n\n\n\n![image-20230525172031289](https://raw.githubusercontent.com/why862555625/images/main/image-20230525172031289.png)\n\n\n\n\n\n## 3.堆对象处理：从链表到图\n\nQuickjs中GC对象是通过链表保存的，但HeapSnapshot中是按照图结构保存的，所以需要有一个从链表构建对象图的过程，我生成了一个代理结构，额外记录了对象间的链接关系。\n\n如果不这样做，就需要修改quickjs的GC list结构，这样改动会很大。\n\n\n\n![image-20230525172159734](https://raw.githubusercontent.com/why862555625/images/main/image-20230525172159734.png)\n\n## 4. Proxy图的构建算法\n\n![image-20230525172302551](https://raw.githubusercontent.com/why862555625/images/main/image-20230525172302551.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"c/quickjs调试器","published":1,"layout":"post","photos":[],"link":"","_id":"clipg086t0003rgwh9avic217","content":"<p>vela系统quickjs对接devtools</p>\n<span id=\"more\"></span>\n\n<h2 id=\"vela快应用调试功能概览\"><a href=\"#vela快应用调试功能概览\" class=\"headerlink\" title=\"vela快应用调试功能概览\"></a>vela快应用调试功能概览</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525102147522.png\" alt=\"image-20230525102147522\"></p>\n<h1 id=\"vela-debug调试功能\"><a href=\"#vela-debug调试功能\" class=\"headerlink\" title=\"vela debug调试功能\"></a>vela debug调试功能</h1><p>debug调试功能图</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525111407415.png\" alt=\"image-20230525111407415\"></p>\n<p>vela debug调试功能实现大致分为4个步骤：</p>\n<ol>\n<li><strong>连接时将所有的源码发送给devtools。</strong></li>\n<li><strong>在devtools 的source功能中打断点、将请求发送给下层cdp.</strong></li>\n<li><strong>cdp计算断点具体在字节码中的位置、并记录。</strong></li>\n<li><strong>在引擎执行字节码时判断有无命中断点。</strong></li>\n</ol>\n<p>下面具体说明这四个步骤：</p>\n<h2 id=\"1-连接时将所有的源码发送给devtools\"><a href=\"#1-连接时将所有的源码发送给devtools\" class=\"headerlink\" title=\"1. 连接时将所有的源码发送给devtools\"></a>1. 连接时将所有的源码发送给devtools</h2><p>在调用loadApplication时会将app的路径保存在APP类中，也就是app的rpk的最外层路径。在监听到devtool连接时，会将rpk包中的所js文件发送给devtools，devtools会将这些js文件拼接成上图中的source文件。</p>\n<h2 id=\"2-在devtools-的source功能中打断点、将请求发送给下层cdp\"><a href=\"#2-在devtools-的source功能中打断点、将请求发送给下层cdp\" class=\"headerlink\" title=\"2. 在devtools 的source功能中打断点、将请求发送给下层cdp\"></a>2. 在devtools 的source功能中打断点、将请求发送给下层cdp</h2><p>当打开source文件上打断点、devtools会将断点的文件名、行号发送到下层cdp.</p>\n<h2 id=\"3-cdp计算断点具体在字节码中的位置、并记录。\"><a href=\"#3-cdp计算断点具体在字节码中的位置、并记录。\" class=\"headerlink\" title=\"3. cdp计算断点具体在字节码中的位置、并记录。\"></a>3. cdp计算断点具体在字节码中的位置、并记录。</h2><ul>\n<li><p>断点功能的输入实际上是文件名和断点行信息，第一步我们需要利用这个信息，找到模块，进而首先找到目标函数。</p>\n<ul>\n<li>quickjs在真实加载module的时候都会调用JS_EvalInternal。我们可以在这个函数里面监听并记录已经加载完的模块。</li>\n</ul>\n</li>\n<li><p>每个函数对象上都记录了自身的起始行，通过pc2line table可以计算得到结束行，进而和传入的行号进行范围匹配计算。</p>\n<ul>\n<li>函数和字节码的映射规则：<ul>\n<li>如果一行源码对应的字节码较短，就将前4位存源码的行数，后四位存字节码对应的行数</li>\n<li>如果一个源码对应的字节码较长，就先存入一个0值（解析pc2line_buf的时候遇到0值会自动将下一个当做128  int来解析），后面补一个128的int，这个int的高位用来存源码行数、低位存字节码的行数。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>计算结束行函数：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PC2LINE_BASE     (-1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PC2LINE_RANGE    5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PC2LINE_OP_FIRST 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PC2LINE_DIFF_PC_MAX ((255 - PC2LINE_OP_FIRST) / PC2LINE_RANGE)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">caculate_function_last_line</span><span class=\"params\">(JSFunctionBytecode* b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> op;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret, v;</span><br><span class=\"line\">    FunctionBytecodeDebugInfo* debug = <span class=\"built_in\">js_debugger_get_bytecode_debug_info</span>(b);</span><br><span class=\"line\">    <span class=\"type\">int</span> line_num = debug-&gt;line_num, new_line_num;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> *p = debug-&gt;pc2line_buf;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> *p_end = p + debug-&gt;pc2line_len;</span><br><span class=\"line\">    <span class=\"type\">int</span> succ = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// scan line by line</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p &lt; p_end) &#123;</span><br><span class=\"line\">        op = *p++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> val;</span><br><span class=\"line\">            ret = <span class=\"built_in\">get_leb128</span>(&amp;val, p, p_end);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                succ = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// pc += val;</span></span><br><span class=\"line\">            p += ret;</span><br><span class=\"line\">            ret = <span class=\"built_in\">get_sleb128</span>(&amp;v, p, p_end);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                succ = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            p += ret;</span><br><span class=\"line\">            new_line_num = line_num + v;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            op -= PC2LINE_OP_FIRST;</span><br><span class=\"line\">            new_line_num = line_num + (op % PC2LINE_RANGE) + PC2LINE_BASE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        line_num = new_line_num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> succ ? line_num : <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">STATIC <span class=\"type\">int</span> <span class=\"title\">get_leb128</span><span class=\"params\">(<span class=\"type\">uint32_t</span> *pval, <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *buf,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                      <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *buf_end)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *ptr = buf;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> v, a, i;</span><br><span class=\"line\">    v = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">unlikely</span>(ptr &gt;= buf_end))</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        a = *ptr++;</span><br><span class=\"line\">        v |= (a &amp; <span class=\"number\">0x7f</span>) &lt;&lt; (i * <span class=\"number\">7</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(a &amp; <span class=\"number\">0x80</span>)) &#123;</span><br><span class=\"line\">            *pval = v;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ptr - buf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *pval = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">STATIC <span class=\"type\">int</span> <span class=\"title\">get_sleb128</span><span class=\"params\">(<span class=\"type\">int32_t</span> *pval, <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *buf,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                       <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *buf_end)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> val;</span><br><span class=\"line\">    ret = <span class=\"built_in\">get_leb128</span>(&amp;val, buf, buf_end);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        *pval = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *pval = (val &gt;&gt; <span class=\"number\">1</span>) ^ -(val &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>源码表和字节码表对应规则：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">compute_pc2line_info</span><span class=\"params\">(JSFunctionDef *s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(s-&gt;js_mode &amp; JS_MODE_STRIP) &amp;&amp; s-&gt;line_number_slots) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> last_line_num = s-&gt;line_num;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> last_pc = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">js_dbuf_init</span>(s-&gt;ctx, &amp;s-&gt;pc2line);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; s-&gt;line_number_count; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> pc = s-&gt;line_number_slots[i].pc;</span><br><span class=\"line\">            <span class=\"type\">int</span> line_num = s-&gt;line_number_slots[i].line_num;</span><br><span class=\"line\">            <span class=\"type\">int</span> diff_pc, diff_line;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (line_num &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            diff_pc = pc - last_pc;</span><br><span class=\"line\">            diff_line = line_num - last_line_num;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (diff_line == <span class=\"number\">0</span> || diff_pc &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (diff_line &gt;= PC2LINE_BASE &amp;&amp;</span><br><span class=\"line\">                diff_line &lt; PC2LINE_BASE + PC2LINE_RANGE &amp;&amp;</span><br><span class=\"line\">                diff_pc &lt;= PC2LINE_DIFF_PC_MAX) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">dbuf_putc</span>(&amp;s-&gt;pc2line, (diff_line - PC2LINE_BASE) +</span><br><span class=\"line\">                          diff_pc * PC2LINE_RANGE + PC2LINE_OP_FIRST);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/* longer encoding */</span></span><br><span class=\"line\">                <span class=\"built_in\">dbuf_putc</span>(&amp;s-&gt;pc2line, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"built_in\">dbuf_put_leb128</span>(&amp;s-&gt;pc2line, diff_pc);</span><br><span class=\"line\">                <span class=\"built_in\">dbuf_put_sleb128</span>(&amp;s-&gt;pc2line, diff_line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            last_pc = pc;</span><br><span class=\"line\">            last_line_num = line_num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>需要注意匹配到的函数可能只是外层函数，具体的断点偏移计算时要考虑递归子函数。</p>\n<ul>\n<li>基于pc2line table计算断点在函数字节码中的偏移位置，计算时如果目出现计算出来的行号比目标行号大的情况 <code>end_line_num&gt;cur_line_num&gt;targe_num</code>，说明断点落在了子函数中，需要递归，直到最终找到或全部失败。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525125207891.png\" alt=\"image-20230525125207891\"></p>\n</li>\n<li><p>断点断到、将pause消息和目前上下文的变量信息和调用栈发送给devtools。</p>\n<ul>\n<li>runtime上面保留了当前栈的信息JSStackFrame，JSStackFrame上面保存了栈上的变量、参数、函数信息；并且JSStackFrame可以通过prev_frame向上查找栈信息。这样遍历下来就可以完整的得到栈上的变量和调用栈。</li>\n</ul>\n</li>\n</ul>\n<p><strong>JSRuntime和JSStackFrame的数据结构</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">JSRuntime</span> &#123;</span><br><span class=\"line\">    JSMallocFunctions mf;</span><br><span class=\"line\">    JSMallocState malloc_state;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *rt_info;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> atom_hash_size; <span class=\"comment\">/* power of two */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> atom_count;</span><br><span class=\"line\">    <span class=\"type\">int</span> atom_size;</span><br><span class=\"line\">    <span class=\"type\">int</span> atom_count_resize; <span class=\"comment\">/* resize hash table at this count */</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> *atom_hash;</span><br><span class=\"line\">    JSAtomStruct **atom_array;</span><br><span class=\"line\">    <span class=\"type\">int</span> atom_free_index; <span class=\"comment\">/* 0 = none */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> class_count;    <span class=\"comment\">/* size of class_array */</span></span><br><span class=\"line\">    JSClass *class_array;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> context_list; <span class=\"comment\">/* list of JSContext.link */</span></span><br><span class=\"line\">    <span class=\"comment\">/* list of JSGCObjectHeader.link. List of allocated GC objects (used</span></span><br><span class=\"line\"><span class=\"comment\">       by the garbage collector) */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> gc_obj_list;</span><br><span class=\"line\">    <span class=\"comment\">/* list of JSGCObjectHeader.link. Used during JS_FreeValueRT() */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> gc_zero_ref_count_list;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> tmp_obj_list; <span class=\"comment\">/* used during GC */</span></span><br><span class=\"line\">    JSGCPhaseEnum gc_phase : <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> malloc_gc_threshold;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> DUMP_LEAKS</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> string_list; <span class=\"comment\">/* list of JSString.link */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"comment\">/* stack limitation */</span></span><br><span class=\"line\">    <span class=\"type\">uintptr_t</span> stack_size; <span class=\"comment\">/* in bytes, 0 if no limit */</span></span><br><span class=\"line\">    <span class=\"type\">uintptr_t</span> stack_top;</span><br><span class=\"line\">    <span class=\"type\">uintptr_t</span> stack_limit; <span class=\"comment\">/* lower stack limit */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    JSValue current_exception;</span><br><span class=\"line\">    <span class=\"comment\">/* true if inside an out of memory error, to avoid recursing */</span></span><br><span class=\"line\">    BOOL in_out_of_memory : <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">JSStackFrame</span> *current_stack_frame;  <span class=\"comment\">// current stack info</span></span><br><span class=\"line\"></span><br><span class=\"line\">    JSInterruptHandler *interrupt_handler;</span><br><span class=\"line\">    <span class=\"type\">void</span> *interrupt_opaque;</span><br><span class=\"line\"></span><br><span class=\"line\">    JSHostPromiseRejectionTracker *host_promise_rejection_tracker;</span><br><span class=\"line\">    <span class=\"type\">void</span> *host_promise_rejection_tracker_opaque;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> job_list; <span class=\"comment\">/* list of JSJobEntry.link */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    JSModuleNormalizeFunc *module_normalize_func;</span><br><span class=\"line\">    JSModuleLoaderFunc *module_loader_func;</span><br><span class=\"line\">    <span class=\"type\">void</span> *module_loader_opaque;</span><br><span class=\"line\"></span><br><span class=\"line\">    BOOL can_block : <span class=\"number\">8</span>; <span class=\"comment\">/* TRUE if Atomics.wait can block */</span></span><br><span class=\"line\">    <span class=\"comment\">/* used to allocate, free and clone SharedArrayBuffers */</span></span><br><span class=\"line\">    JSSharedArrayBufferFunctions sab_funcs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Shape hash table */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> shape_hash_bits;</span><br><span class=\"line\">    <span class=\"type\">int</span> shape_hash_size;</span><br><span class=\"line\">    <span class=\"type\">int</span> shape_hash_count; <span class=\"comment\">/* number of hashed shapes */</span></span><br><span class=\"line\">    JSShape **shape_hash;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_BIGNUM</span></span><br><span class=\"line\">    <span class=\"type\">bf_context_t</span> bf_ctx;</span><br><span class=\"line\">    JSNumericOperations bigint_ops;</span><br><span class=\"line\">    JSNumericOperations bigfloat_ops;</span><br><span class=\"line\">    JSNumericOperations bigdecimal_ops;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> operator_count;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"type\">void</span> *user_opaque;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_INTERPRETERS_QUICKJS_DEBUG</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">JSDebuggerInfo</span> debugger_info;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">DumpMemoryInfo</span> dump_memory_info;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    JSOutOfMemoryTracker* oom_tracker;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_MEMORY_LEAK_TRACK</span></span><br><span class=\"line\">    <span class=\"type\">int</span> isStartMemoryDump;</span><br><span class=\"line\">    vector* newObjVector;</span><br><span class=\"line\">    JSContext* currentCtx;</span><br><span class=\"line\">    <span class=\"type\">char</span>* pageStatus;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">JSStackFrame</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">JSStackFrame</span> *prev_frame; <span class=\"comment\">/* NULL if first stack frame */</span></span><br><span class=\"line\">    JSValue cur_func; <span class=\"comment\">/* current function, JS_UNDEFINED if the frame is detached */</span></span><br><span class=\"line\">    JSValue *arg_buf; <span class=\"comment\">/* arguments */</span></span><br><span class=\"line\">    JSValue *var_buf; <span class=\"comment\">/* variables */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> var_ref_list; <span class=\"comment\">/* list of JSVarRef.link */</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *cur_pc; <span class=\"comment\">/* only used in bytecode functions : PC of the</span></span><br><span class=\"line\"><span class=\"comment\">                        instruction after the call */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> arg_count;</span><br><span class=\"line\">    <span class=\"type\">int</span> js_mode; <span class=\"comment\">/* 0 or JS_MODE_MATH for C functions */</span></span><br><span class=\"line\">    <span class=\"comment\">/* only used in generators. Current stack pointer value. NULL if</span></span><br><span class=\"line\"><span class=\"comment\">       the function is running. */</span></span><br><span class=\"line\">    JSValue *cur_sp;</span><br><span class=\"line\">&#125; JSStackFrame;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数数据结构：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525144252998.png\"></p>\n<p><strong>查找目标函数流程：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525124949165.png\"></p>\n<h2 id=\"4-在引擎执行字节码时判断有无命中断点。\"><a href=\"#4-在引擎执行字节码时判断有无命中断点。\" class=\"headerlink\" title=\"4. 在引擎执行字节码时判断有无命中断点。\"></a>4. 在引擎执行字节码时判断有无命中断点。</h2><p>命中断点有两个设计思路：</p>\n<p><strong>第一种：</strong></p>\n<p>直接修改字节码、插入debugger指令和nop\\需要额外注意在命中后和取消时将字节码恢复、否则会出现问题。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525161322186.png\" alt=\"image-20230525161322186\"></p>\n<p><strong>第二种：</strong></p>\n<p>分配一块和字节码相同长度的数组、在相同的便宜位置写入1、作为断点标志、方便命中检查。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525161507336.png\" alt=\"image-20230525161507336\"></p>\n<p>断点命中的核心思路实在引擎解释执行字节码的时候插入堆断点命中的检查、命中断电后停止执行（不在继续解释下一条指令）。</p>\n<p>这里选择重定义字节码的case定义、如果开启了调试功能、则每次解释执行字节码都会插入对js_debugger_check函数执行、他负责检查每一步执行是否命中断点。检查方法很简单、检查当前pc是否落在了断点的范围内（依赖设置断点）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_INTERPRETERS_QUICKJS_DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CASE(op)        case op: js_debugger_check(ctx, pc); stub_ ## op</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CASE(op)        case op: stub_ ## op</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>执行字节码：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525170447952.png\" alt=\"image-20230525170447952\"></p>\n<p>js_debugger_check 中暂停的主要逻辑是一个<code>while(ture)</code>循环，然后每次执行libuv_run_once()推一次主循环的句柄，用来判断服务端是否放开断点。</p>\n<h1 id=\"memory-功能\"><a href=\"#memory-功能\" class=\"headerlink\" title=\"memory 功能\"></a>memory 功能</h1><p>memory功能大概可以概述为三个部分：</p>\n<ol>\n<li>接受devtools  memory dump的请求之后，开始遍历引擎的堆内存链表（v8是使用图结构来表示的堆内存、quickjs是使用链表表示的）。</li>\n<li>将quickjs中的链表内存转化为图结构内存。（devtools snapshot需要图结构）</li>\n<li>将图结构转化为snapshot发送给devtools、devtools进行解析并显示。</li>\n</ol>\n<h2 id=\"1-理解引擎的堆内存结构\"><a href=\"#1-理解引擎的堆内存结构\" class=\"headerlink\" title=\"1. 理解引擎的堆内存结构\"></a>1. 理解引擎的堆内存结构</h2><p>quickjs的runtime中的gc_obj_list保存了引擎中的所有堆对象的JSGCObjectHeader.遍历gc_obj_list就可以得到所有的堆对象信息</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">JSGCObjectHeader</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ref_count; <span class=\"comment\">/* must come first, 32-bit */</span></span><br><span class=\"line\">    JSGCObjectTypeEnum gc_obj_type : <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> mark : <span class=\"number\">4</span>; <span class=\"comment\">/* used by the GC */</span></span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> dummy1; <span class=\"comment\">/* not used by the GC */</span></span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> dummy2; <span class=\"comment\">/* not used by the GC */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> link;</span><br><span class=\"line\">    <span class=\"type\">int64_t</span> id;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525171354456.png\" alt=\"image-20230525171354456\"></p>\n<h2 id=\"2-理解snapshot文件格式\"><a href=\"#2-理解snapshot文件格式\" class=\"headerlink\" title=\"2. 理解snapshot文件格式\"></a>2. 理解snapshot文件格式</h2><ul>\n<li>V8 HeapSnapshot文件整体采用JSON格式存储。</li>\n<li>存储时采用Meta + 内容的方式，Meta里描述了各个字段的含义，各个节点的数量等。</li>\n<li>内存dump信息按照点集和边集的形式存储。点集存储节点信息，边集存储对象之间的链接关系。</li>\n<li>字符串是单独存储的，节点中使用时采用下标引用的方式以节约内存。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525172031289.png\" alt=\"image-20230525172031289\"></p>\n<h2 id=\"3-堆对象处理：从链表到图\"><a href=\"#3-堆对象处理：从链表到图\" class=\"headerlink\" title=\"3.堆对象处理：从链表到图\"></a>3.堆对象处理：从链表到图</h2><p>Quickjs中GC对象是通过链表保存的，但HeapSnapshot中是按照图结构保存的，所以需要有一个从链表构建对象图的过程，我生成了一个代理结构，额外记录了对象间的链接关系。</p>\n<p>如果不这样做，就需要修改quickjs的GC list结构，这样改动会很大。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525172159734.png\" alt=\"image-20230525172159734\"></p>\n<h2 id=\"4-Proxy图的构建算法\"><a href=\"#4-Proxy图的构建算法\" class=\"headerlink\" title=\"4. Proxy图的构建算法\"></a>4. Proxy图的构建算法</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525172302551.png\" alt=\"image-20230525172302551\"></p>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"excerpt":"<p>vela系统quickjs对接devtools</p>","more":"<h2 id=\"vela快应用调试功能概览\"><a href=\"#vela快应用调试功能概览\" class=\"headerlink\" title=\"vela快应用调试功能概览\"></a>vela快应用调试功能概览</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525102147522.png\" alt=\"image-20230525102147522\"></p>\n<h1 id=\"vela-debug调试功能\"><a href=\"#vela-debug调试功能\" class=\"headerlink\" title=\"vela debug调试功能\"></a>vela debug调试功能</h1><p>debug调试功能图</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525111407415.png\" alt=\"image-20230525111407415\"></p>\n<p>vela debug调试功能实现大致分为4个步骤：</p>\n<ol>\n<li><strong>连接时将所有的源码发送给devtools。</strong></li>\n<li><strong>在devtools 的source功能中打断点、将请求发送给下层cdp.</strong></li>\n<li><strong>cdp计算断点具体在字节码中的位置、并记录。</strong></li>\n<li><strong>在引擎执行字节码时判断有无命中断点。</strong></li>\n</ol>\n<p>下面具体说明这四个步骤：</p>\n<h2 id=\"1-连接时将所有的源码发送给devtools\"><a href=\"#1-连接时将所有的源码发送给devtools\" class=\"headerlink\" title=\"1. 连接时将所有的源码发送给devtools\"></a>1. 连接时将所有的源码发送给devtools</h2><p>在调用loadApplication时会将app的路径保存在APP类中，也就是app的rpk的最外层路径。在监听到devtool连接时，会将rpk包中的所js文件发送给devtools，devtools会将这些js文件拼接成上图中的source文件。</p>\n<h2 id=\"2-在devtools-的source功能中打断点、将请求发送给下层cdp\"><a href=\"#2-在devtools-的source功能中打断点、将请求发送给下层cdp\" class=\"headerlink\" title=\"2. 在devtools 的source功能中打断点、将请求发送给下层cdp\"></a>2. 在devtools 的source功能中打断点、将请求发送给下层cdp</h2><p>当打开source文件上打断点、devtools会将断点的文件名、行号发送到下层cdp.</p>\n<h2 id=\"3-cdp计算断点具体在字节码中的位置、并记录。\"><a href=\"#3-cdp计算断点具体在字节码中的位置、并记录。\" class=\"headerlink\" title=\"3. cdp计算断点具体在字节码中的位置、并记录。\"></a>3. cdp计算断点具体在字节码中的位置、并记录。</h2><ul>\n<li><p>断点功能的输入实际上是文件名和断点行信息，第一步我们需要利用这个信息，找到模块，进而首先找到目标函数。</p>\n<ul>\n<li>quickjs在真实加载module的时候都会调用JS_EvalInternal。我们可以在这个函数里面监听并记录已经加载完的模块。</li>\n</ul>\n</li>\n<li><p>每个函数对象上都记录了自身的起始行，通过pc2line table可以计算得到结束行，进而和传入的行号进行范围匹配计算。</p>\n<ul>\n<li>函数和字节码的映射规则：<ul>\n<li>如果一行源码对应的字节码较短，就将前4位存源码的行数，后四位存字节码对应的行数</li>\n<li>如果一个源码对应的字节码较长，就先存入一个0值（解析pc2line_buf的时候遇到0值会自动将下一个当做128  int来解析），后面补一个128的int，这个int的高位用来存源码行数、低位存字节码的行数。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>计算结束行函数：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PC2LINE_BASE     (-1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PC2LINE_RANGE    5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PC2LINE_OP_FIRST 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PC2LINE_DIFF_PC_MAX ((255 - PC2LINE_OP_FIRST) / PC2LINE_RANGE)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">caculate_function_last_line</span><span class=\"params\">(JSFunctionBytecode* b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> op;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret, v;</span><br><span class=\"line\">    FunctionBytecodeDebugInfo* debug = <span class=\"built_in\">js_debugger_get_bytecode_debug_info</span>(b);</span><br><span class=\"line\">    <span class=\"type\">int</span> line_num = debug-&gt;line_num, new_line_num;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> *p = debug-&gt;pc2line_buf;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> *p_end = p + debug-&gt;pc2line_len;</span><br><span class=\"line\">    <span class=\"type\">int</span> succ = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// scan line by line</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p &lt; p_end) &#123;</span><br><span class=\"line\">        op = *p++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> val;</span><br><span class=\"line\">            ret = <span class=\"built_in\">get_leb128</span>(&amp;val, p, p_end);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                succ = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// pc += val;</span></span><br><span class=\"line\">            p += ret;</span><br><span class=\"line\">            ret = <span class=\"built_in\">get_sleb128</span>(&amp;v, p, p_end);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                succ = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            p += ret;</span><br><span class=\"line\">            new_line_num = line_num + v;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            op -= PC2LINE_OP_FIRST;</span><br><span class=\"line\">            new_line_num = line_num + (op % PC2LINE_RANGE) + PC2LINE_BASE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        line_num = new_line_num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> succ ? line_num : <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">STATIC <span class=\"type\">int</span> <span class=\"title\">get_leb128</span><span class=\"params\">(<span class=\"type\">uint32_t</span> *pval, <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *buf,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                      <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *buf_end)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *ptr = buf;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> v, a, i;</span><br><span class=\"line\">    v = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">unlikely</span>(ptr &gt;= buf_end))</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        a = *ptr++;</span><br><span class=\"line\">        v |= (a &amp; <span class=\"number\">0x7f</span>) &lt;&lt; (i * <span class=\"number\">7</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(a &amp; <span class=\"number\">0x80</span>)) &#123;</span><br><span class=\"line\">            *pval = v;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ptr - buf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *pval = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">STATIC <span class=\"type\">int</span> <span class=\"title\">get_sleb128</span><span class=\"params\">(<span class=\"type\">int32_t</span> *pval, <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *buf,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                       <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *buf_end)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> val;</span><br><span class=\"line\">    ret = <span class=\"built_in\">get_leb128</span>(&amp;val, buf, buf_end);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        *pval = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *pval = (val &gt;&gt; <span class=\"number\">1</span>) ^ -(val &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>源码表和字节码表对应规则：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">compute_pc2line_info</span><span class=\"params\">(JSFunctionDef *s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(s-&gt;js_mode &amp; JS_MODE_STRIP) &amp;&amp; s-&gt;line_number_slots) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> last_line_num = s-&gt;line_num;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> last_pc = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">js_dbuf_init</span>(s-&gt;ctx, &amp;s-&gt;pc2line);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; s-&gt;line_number_count; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> pc = s-&gt;line_number_slots[i].pc;</span><br><span class=\"line\">            <span class=\"type\">int</span> line_num = s-&gt;line_number_slots[i].line_num;</span><br><span class=\"line\">            <span class=\"type\">int</span> diff_pc, diff_line;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (line_num &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            diff_pc = pc - last_pc;</span><br><span class=\"line\">            diff_line = line_num - last_line_num;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (diff_line == <span class=\"number\">0</span> || diff_pc &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (diff_line &gt;= PC2LINE_BASE &amp;&amp;</span><br><span class=\"line\">                diff_line &lt; PC2LINE_BASE + PC2LINE_RANGE &amp;&amp;</span><br><span class=\"line\">                diff_pc &lt;= PC2LINE_DIFF_PC_MAX) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">dbuf_putc</span>(&amp;s-&gt;pc2line, (diff_line - PC2LINE_BASE) +</span><br><span class=\"line\">                          diff_pc * PC2LINE_RANGE + PC2LINE_OP_FIRST);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/* longer encoding */</span></span><br><span class=\"line\">                <span class=\"built_in\">dbuf_putc</span>(&amp;s-&gt;pc2line, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"built_in\">dbuf_put_leb128</span>(&amp;s-&gt;pc2line, diff_pc);</span><br><span class=\"line\">                <span class=\"built_in\">dbuf_put_sleb128</span>(&amp;s-&gt;pc2line, diff_line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            last_pc = pc;</span><br><span class=\"line\">            last_line_num = line_num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>需要注意匹配到的函数可能只是外层函数，具体的断点偏移计算时要考虑递归子函数。</p>\n<ul>\n<li>基于pc2line table计算断点在函数字节码中的偏移位置，计算时如果目出现计算出来的行号比目标行号大的情况 <code>end_line_num&gt;cur_line_num&gt;targe_num</code>，说明断点落在了子函数中，需要递归，直到最终找到或全部失败。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525125207891.png\" alt=\"image-20230525125207891\"></p>\n</li>\n<li><p>断点断到、将pause消息和目前上下文的变量信息和调用栈发送给devtools。</p>\n<ul>\n<li>runtime上面保留了当前栈的信息JSStackFrame，JSStackFrame上面保存了栈上的变量、参数、函数信息；并且JSStackFrame可以通过prev_frame向上查找栈信息。这样遍历下来就可以完整的得到栈上的变量和调用栈。</li>\n</ul>\n</li>\n</ul>\n<p><strong>JSRuntime和JSStackFrame的数据结构</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">JSRuntime</span> &#123;</span><br><span class=\"line\">    JSMallocFunctions mf;</span><br><span class=\"line\">    JSMallocState malloc_state;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *rt_info;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> atom_hash_size; <span class=\"comment\">/* power of two */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> atom_count;</span><br><span class=\"line\">    <span class=\"type\">int</span> atom_size;</span><br><span class=\"line\">    <span class=\"type\">int</span> atom_count_resize; <span class=\"comment\">/* resize hash table at this count */</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> *atom_hash;</span><br><span class=\"line\">    JSAtomStruct **atom_array;</span><br><span class=\"line\">    <span class=\"type\">int</span> atom_free_index; <span class=\"comment\">/* 0 = none */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> class_count;    <span class=\"comment\">/* size of class_array */</span></span><br><span class=\"line\">    JSClass *class_array;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> context_list; <span class=\"comment\">/* list of JSContext.link */</span></span><br><span class=\"line\">    <span class=\"comment\">/* list of JSGCObjectHeader.link. List of allocated GC objects (used</span></span><br><span class=\"line\"><span class=\"comment\">       by the garbage collector) */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> gc_obj_list;</span><br><span class=\"line\">    <span class=\"comment\">/* list of JSGCObjectHeader.link. Used during JS_FreeValueRT() */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> gc_zero_ref_count_list;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> tmp_obj_list; <span class=\"comment\">/* used during GC */</span></span><br><span class=\"line\">    JSGCPhaseEnum gc_phase : <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> malloc_gc_threshold;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> DUMP_LEAKS</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> string_list; <span class=\"comment\">/* list of JSString.link */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"comment\">/* stack limitation */</span></span><br><span class=\"line\">    <span class=\"type\">uintptr_t</span> stack_size; <span class=\"comment\">/* in bytes, 0 if no limit */</span></span><br><span class=\"line\">    <span class=\"type\">uintptr_t</span> stack_top;</span><br><span class=\"line\">    <span class=\"type\">uintptr_t</span> stack_limit; <span class=\"comment\">/* lower stack limit */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    JSValue current_exception;</span><br><span class=\"line\">    <span class=\"comment\">/* true if inside an out of memory error, to avoid recursing */</span></span><br><span class=\"line\">    BOOL in_out_of_memory : <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">JSStackFrame</span> *current_stack_frame;  <span class=\"comment\">// current stack info</span></span><br><span class=\"line\"></span><br><span class=\"line\">    JSInterruptHandler *interrupt_handler;</span><br><span class=\"line\">    <span class=\"type\">void</span> *interrupt_opaque;</span><br><span class=\"line\"></span><br><span class=\"line\">    JSHostPromiseRejectionTracker *host_promise_rejection_tracker;</span><br><span class=\"line\">    <span class=\"type\">void</span> *host_promise_rejection_tracker_opaque;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> job_list; <span class=\"comment\">/* list of JSJobEntry.link */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    JSModuleNormalizeFunc *module_normalize_func;</span><br><span class=\"line\">    JSModuleLoaderFunc *module_loader_func;</span><br><span class=\"line\">    <span class=\"type\">void</span> *module_loader_opaque;</span><br><span class=\"line\"></span><br><span class=\"line\">    BOOL can_block : <span class=\"number\">8</span>; <span class=\"comment\">/* TRUE if Atomics.wait can block */</span></span><br><span class=\"line\">    <span class=\"comment\">/* used to allocate, free and clone SharedArrayBuffers */</span></span><br><span class=\"line\">    JSSharedArrayBufferFunctions sab_funcs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Shape hash table */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> shape_hash_bits;</span><br><span class=\"line\">    <span class=\"type\">int</span> shape_hash_size;</span><br><span class=\"line\">    <span class=\"type\">int</span> shape_hash_count; <span class=\"comment\">/* number of hashed shapes */</span></span><br><span class=\"line\">    JSShape **shape_hash;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_BIGNUM</span></span><br><span class=\"line\">    <span class=\"type\">bf_context_t</span> bf_ctx;</span><br><span class=\"line\">    JSNumericOperations bigint_ops;</span><br><span class=\"line\">    JSNumericOperations bigfloat_ops;</span><br><span class=\"line\">    JSNumericOperations bigdecimal_ops;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> operator_count;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"type\">void</span> *user_opaque;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_INTERPRETERS_QUICKJS_DEBUG</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">JSDebuggerInfo</span> debugger_info;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">DumpMemoryInfo</span> dump_memory_info;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    JSOutOfMemoryTracker* oom_tracker;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_MEMORY_LEAK_TRACK</span></span><br><span class=\"line\">    <span class=\"type\">int</span> isStartMemoryDump;</span><br><span class=\"line\">    vector* newObjVector;</span><br><span class=\"line\">    JSContext* currentCtx;</span><br><span class=\"line\">    <span class=\"type\">char</span>* pageStatus;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">JSStackFrame</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">JSStackFrame</span> *prev_frame; <span class=\"comment\">/* NULL if first stack frame */</span></span><br><span class=\"line\">    JSValue cur_func; <span class=\"comment\">/* current function, JS_UNDEFINED if the frame is detached */</span></span><br><span class=\"line\">    JSValue *arg_buf; <span class=\"comment\">/* arguments */</span></span><br><span class=\"line\">    JSValue *var_buf; <span class=\"comment\">/* variables */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> var_ref_list; <span class=\"comment\">/* list of JSVarRef.link */</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *cur_pc; <span class=\"comment\">/* only used in bytecode functions : PC of the</span></span><br><span class=\"line\"><span class=\"comment\">                        instruction after the call */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> arg_count;</span><br><span class=\"line\">    <span class=\"type\">int</span> js_mode; <span class=\"comment\">/* 0 or JS_MODE_MATH for C functions */</span></span><br><span class=\"line\">    <span class=\"comment\">/* only used in generators. Current stack pointer value. NULL if</span></span><br><span class=\"line\"><span class=\"comment\">       the function is running. */</span></span><br><span class=\"line\">    JSValue *cur_sp;</span><br><span class=\"line\">&#125; JSStackFrame;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数数据结构：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525144252998.png\"></p>\n<p><strong>查找目标函数流程：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525124949165.png\"></p>\n<h2 id=\"4-在引擎执行字节码时判断有无命中断点。\"><a href=\"#4-在引擎执行字节码时判断有无命中断点。\" class=\"headerlink\" title=\"4. 在引擎执行字节码时判断有无命中断点。\"></a>4. 在引擎执行字节码时判断有无命中断点。</h2><p>命中断点有两个设计思路：</p>\n<p><strong>第一种：</strong></p>\n<p>直接修改字节码、插入debugger指令和nop\\需要额外注意在命中后和取消时将字节码恢复、否则会出现问题。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525161322186.png\" alt=\"image-20230525161322186\"></p>\n<p><strong>第二种：</strong></p>\n<p>分配一块和字节码相同长度的数组、在相同的便宜位置写入1、作为断点标志、方便命中检查。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525161507336.png\" alt=\"image-20230525161507336\"></p>\n<p>断点命中的核心思路实在引擎解释执行字节码的时候插入堆断点命中的检查、命中断电后停止执行（不在继续解释下一条指令）。</p>\n<p>这里选择重定义字节码的case定义、如果开启了调试功能、则每次解释执行字节码都会插入对js_debugger_check函数执行、他负责检查每一步执行是否命中断点。检查方法很简单、检查当前pc是否落在了断点的范围内（依赖设置断点）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_INTERPRETERS_QUICKJS_DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CASE(op)        case op: js_debugger_check(ctx, pc); stub_ ## op</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CASE(op)        case op: stub_ ## op</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>执行字节码：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525170447952.png\" alt=\"image-20230525170447952\"></p>\n<p>js_debugger_check 中暂停的主要逻辑是一个<code>while(ture)</code>循环，然后每次执行libuv_run_once()推一次主循环的句柄，用来判断服务端是否放开断点。</p>\n<h1 id=\"memory-功能\"><a href=\"#memory-功能\" class=\"headerlink\" title=\"memory 功能\"></a>memory 功能</h1><p>memory功能大概可以概述为三个部分：</p>\n<ol>\n<li>接受devtools  memory dump的请求之后，开始遍历引擎的堆内存链表（v8是使用图结构来表示的堆内存、quickjs是使用链表表示的）。</li>\n<li>将quickjs中的链表内存转化为图结构内存。（devtools snapshot需要图结构）</li>\n<li>将图结构转化为snapshot发送给devtools、devtools进行解析并显示。</li>\n</ol>\n<h2 id=\"1-理解引擎的堆内存结构\"><a href=\"#1-理解引擎的堆内存结构\" class=\"headerlink\" title=\"1. 理解引擎的堆内存结构\"></a>1. 理解引擎的堆内存结构</h2><p>quickjs的runtime中的gc_obj_list保存了引擎中的所有堆对象的JSGCObjectHeader.遍历gc_obj_list就可以得到所有的堆对象信息</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">JSGCObjectHeader</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ref_count; <span class=\"comment\">/* must come first, 32-bit */</span></span><br><span class=\"line\">    JSGCObjectTypeEnum gc_obj_type : <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> mark : <span class=\"number\">4</span>; <span class=\"comment\">/* used by the GC */</span></span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> dummy1; <span class=\"comment\">/* not used by the GC */</span></span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> dummy2; <span class=\"comment\">/* not used by the GC */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> link;</span><br><span class=\"line\">    <span class=\"type\">int64_t</span> id;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525171354456.png\" alt=\"image-20230525171354456\"></p>\n<h2 id=\"2-理解snapshot文件格式\"><a href=\"#2-理解snapshot文件格式\" class=\"headerlink\" title=\"2. 理解snapshot文件格式\"></a>2. 理解snapshot文件格式</h2><ul>\n<li>V8 HeapSnapshot文件整体采用JSON格式存储。</li>\n<li>存储时采用Meta + 内容的方式，Meta里描述了各个字段的含义，各个节点的数量等。</li>\n<li>内存dump信息按照点集和边集的形式存储。点集存储节点信息，边集存储对象之间的链接关系。</li>\n<li>字符串是单独存储的，节点中使用时采用下标引用的方式以节约内存。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525172031289.png\" alt=\"image-20230525172031289\"></p>\n<h2 id=\"3-堆对象处理：从链表到图\"><a href=\"#3-堆对象处理：从链表到图\" class=\"headerlink\" title=\"3.堆对象处理：从链表到图\"></a>3.堆对象处理：从链表到图</h2><p>Quickjs中GC对象是通过链表保存的，但HeapSnapshot中是按照图结构保存的，所以需要有一个从链表构建对象图的过程，我生成了一个代理结构，额外记录了对象间的链接关系。</p>\n<p>如果不这样做，就需要修改quickjs的GC list结构，这样改动会很大。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525172159734.png\" alt=\"image-20230525172159734\"></p>\n<h2 id=\"4-Proxy图的构建算法\"><a href=\"#4-Proxy图的构建算法\" class=\"headerlink\" title=\"4. Proxy图的构建算法\"></a>4. Proxy图的构建算法</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525172302551.png\" alt=\"image-20230525172302551\"></p>"},{"title":"vela运行时","keywords":"vela运行时","description":"vela运行时","top_img":"设置false不显示顶部图片","sticky":"数值越大越靠前","cover":"https://raw.githubusercontent.com/why862555625/images/main/images/16.png","comments":1,"abbrlink":"d9795f88","date":"2023-05-25T11:04:29.000Z","updated":"2023-05-25T11:04:29.000Z","_content":"\nvela运行时\n\n\n<!-- more -->\n\n1. 响应式数据实现和原理\n2. vdom和组件\n3. 计算属性\n4. watch实现\n\n","source":"_posts/c/vela运行时.md","raw":"---\ntitle: vela运行时\ntags:\n  - c\n  - js\n  - 运行时\ncategories: JS\nkeywords: 'vela运行时'\ndescription: vela运行时\ntop_img: 设置false不显示顶部图片\nsticky: 数值越大越靠前\ncover: \"https://raw.githubusercontent.com/why862555625/images/main/images/16.png\"\ncomments: false评论\nabbrlink: d9795f88\ndate: 2023-05-25 19:04:29\nupdated: 2023-05-25 19:04:29\n---\n\nvela运行时\n\n\n<!-- more -->\n\n1. 响应式数据实现和原理\n2. vdom和组件\n3. 计算属性\n4. watch实现\n\n","slug":"c/vela运行时","published":1,"layout":"post","photos":[],"link":"","_id":"clipg086x0007rgwh47xig8in","content":"<p>vela运行时</p>\n<span id=\"more\"></span>\n\n<ol>\n<li>响应式数据实现和原理</li>\n<li>vdom和组件</li>\n<li>计算属性</li>\n<li>watch实现</li>\n</ol>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"excerpt":"<p>vela运行时</p>","more":"<ol>\n<li>响应式数据实现和原理</li>\n<li>vdom和组件</li>\n<li>计算属性</li>\n<li>watch实现</li>\n</ol>"},{"title":"加油","keywords":"读书","description":"鼓励自己的小句子","top_img":"设置false不显示顶部图片","sticky":"数值越大越靠前","cover":"https://raw.githubusercontent.com/why862555625/images/main/images/99.jpg","comments":1,"abbrlink":"8857f1a4","date":"2023-06-06T04:56:20.000Z","updated":"2023-06-06T04:56:20.000Z","_content":"\n文字鉴赏\n\n<!-- more -->\n\n# 1.\n\n我从来不想鹤立鸡群，我只想快点离开那群鸡。我目睹了一场谋杀，但我看不见他，他站在道德的制高点，站在阳光下，怪异的动物会被保护起来，怪异的人会被孤立，圣人也有过去，罪人也有未来，当愚昧成为主流，清醒就成为了犯罪，你要么闭嘴，要么使用他们的语言，每个人都在愤世嫉俗，每个人都在同流合污。你是在拜佛还是在拜自己的欲望。伊洛先生说：有钱能治愈一切自卑，光善良没有用你得优秀，活着就应该遇山开路，遇水架桥，其实，真正让你好起来的只有自律和自信，没有人能阻止你变好，除了你自己，如果你每天只是在床上追逐剧集，刷抖音，不积极运动，到了晚上还为感情问题而怀疑人生，那你迟早会被这个世界抛弃，不要失去信心，在工作中努力拼搏，不努力就会失去你想要的一切，你一定要努力奋斗，努力成为一个出色的人，不要让别人知道你得计划，直到有一天，你可以自由地离开那些让你不舒服的圈子和人，让他们都对你刮目相看。现在开始悄悄努力吧，做最好的自己，等待那些值得的人，趁现在还有时间，全力以赴去完成你一直想做的事情，成为你一直梦寐以求的那种人，过上你一直向往的那种生活。不要在等待中浪费岁月，每一天都给予自己最大的努力，让自己的光芒照亮前行的路，即使面临困难和挫折，也要坚持住，因为在哪些努力中，你将发现自己的价值和无限的可能。\n","source":"_posts/freedom/励志文字.md","raw":"---\ntitle: 加油\ntags:\n  - 加油\ncategories: 加油\nkeywords: 读书\ndescription: 鼓励自己的小句子\ntop_img: 设置false不显示顶部图片\nsticky: 数值越大越靠前\ncover: \"https://raw.githubusercontent.com/why862555625/images/main/images/99.jpg\"\ncomments: false评论\nabbrlink: 8857f1a4\ndate: 2023-06-06 12:56:20\nupdated: 2023-06-06 12:56:20\n---\n\n文字鉴赏\n\n<!-- more -->\n\n# 1.\n\n我从来不想鹤立鸡群，我只想快点离开那群鸡。我目睹了一场谋杀，但我看不见他，他站在道德的制高点，站在阳光下，怪异的动物会被保护起来，怪异的人会被孤立，圣人也有过去，罪人也有未来，当愚昧成为主流，清醒就成为了犯罪，你要么闭嘴，要么使用他们的语言，每个人都在愤世嫉俗，每个人都在同流合污。你是在拜佛还是在拜自己的欲望。伊洛先生说：有钱能治愈一切自卑，光善良没有用你得优秀，活着就应该遇山开路，遇水架桥，其实，真正让你好起来的只有自律和自信，没有人能阻止你变好，除了你自己，如果你每天只是在床上追逐剧集，刷抖音，不积极运动，到了晚上还为感情问题而怀疑人生，那你迟早会被这个世界抛弃，不要失去信心，在工作中努力拼搏，不努力就会失去你想要的一切，你一定要努力奋斗，努力成为一个出色的人，不要让别人知道你得计划，直到有一天，你可以自由地离开那些让你不舒服的圈子和人，让他们都对你刮目相看。现在开始悄悄努力吧，做最好的自己，等待那些值得的人，趁现在还有时间，全力以赴去完成你一直想做的事情，成为你一直梦寐以求的那种人，过上你一直向往的那种生活。不要在等待中浪费岁月，每一天都给予自己最大的努力，让自己的光芒照亮前行的路，即使面临困难和挫折，也要坚持住，因为在哪些努力中，你将发现自己的价值和无限的可能。\n","slug":"freedom/励志文字","published":1,"layout":"post","photos":[],"link":"","_id":"clipg086x0009rgwhd5gocnno","content":"<p>文字鉴赏</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h1><p>我从来不想鹤立鸡群，我只想快点离开那群鸡。我目睹了一场谋杀，但我看不见他，他站在道德的制高点，站在阳光下，怪异的动物会被保护起来，怪异的人会被孤立，圣人也有过去，罪人也有未来，当愚昧成为主流，清醒就成为了犯罪，你要么闭嘴，要么使用他们的语言，每个人都在愤世嫉俗，每个人都在同流合污。你是在拜佛还是在拜自己的欲望。伊洛先生说：有钱能治愈一切自卑，光善良没有用你得优秀，活着就应该遇山开路，遇水架桥，其实，真正让你好起来的只有自律和自信，没有人能阻止你变好，除了你自己，如果你每天只是在床上追逐剧集，刷抖音，不积极运动，到了晚上还为感情问题而怀疑人生，那你迟早会被这个世界抛弃，不要失去信心，在工作中努力拼搏，不努力就会失去你想要的一切，你一定要努力奋斗，努力成为一个出色的人，不要让别人知道你得计划，直到有一天，你可以自由地离开那些让你不舒服的圈子和人，让他们都对你刮目相看。现在开始悄悄努力吧，做最好的自己，等待那些值得的人，趁现在还有时间，全力以赴去完成你一直想做的事情，成为你一直梦寐以求的那种人，过上你一直向往的那种生活。不要在等待中浪费岁月，每一天都给予自己最大的努力，让自己的光芒照亮前行的路，即使面临困难和挫折，也要坚持住，因为在哪些努力中，你将发现自己的价值和无限的可能。</p>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"excerpt":"<p>文字鉴赏</p>","more":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h1><p>我从来不想鹤立鸡群，我只想快点离开那群鸡。我目睹了一场谋杀，但我看不见他，他站在道德的制高点，站在阳光下，怪异的动物会被保护起来，怪异的人会被孤立，圣人也有过去，罪人也有未来，当愚昧成为主流，清醒就成为了犯罪，你要么闭嘴，要么使用他们的语言，每个人都在愤世嫉俗，每个人都在同流合污。你是在拜佛还是在拜自己的欲望。伊洛先生说：有钱能治愈一切自卑，光善良没有用你得优秀，活着就应该遇山开路，遇水架桥，其实，真正让你好起来的只有自律和自信，没有人能阻止你变好，除了你自己，如果你每天只是在床上追逐剧集，刷抖音，不积极运动，到了晚上还为感情问题而怀疑人生，那你迟早会被这个世界抛弃，不要失去信心，在工作中努力拼搏，不努力就会失去你想要的一切，你一定要努力奋斗，努力成为一个出色的人，不要让别人知道你得计划，直到有一天，你可以自由地离开那些让你不舒服的圈子和人，让他们都对你刮目相看。现在开始悄悄努力吧，做最好的自己，等待那些值得的人，趁现在还有时间，全力以赴去完成你一直想做的事情，成为你一直梦寐以求的那种人，过上你一直向往的那种生活。不要在等待中浪费岁月，每一天都给予自己最大的努力，让自己的光芒照亮前行的路，即使面临困难和挫折，也要坚持住，因为在哪些努力中，你将发现自己的价值和无限的可能。</p>"},{"title":"HTML复习","keywords":"前端,面试,HTML","description":"HTMLJS复习记录","top_img":"https://raw.githubusercontent.com/why862555625/images/main/images/444.jpg","sticky":"数值越大越靠前","cover":"https://raw.githubusercontent.com/why862555625/images/main/images/444.jpg","comments":1,"abbrlink":"d9795d88","date":"2023-05-23T07:21:13.000Z","updated":"2023-05-23T07:21:13.000Z","_content":"\nHTML复习 \n\n<!-- more -->\n\n![image-20230608143228021](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230608143228021.png)\n\n### 1. src和href的区别\n\nsrc和href都是**用来引用外部的资源**，它们的区别如下：\n\n- **src：** 表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。src会将其指向的资源下载并应⽤到⽂档内，如请求js脚本。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，所以⼀般js脚本会放在页面底部。\n- **href：** 表示超文本引用，它指向一些网络资源，建立和当前元素或本文档的链接关系。当浏览器识别到它他指向的⽂件时，就会并⾏下载资源，不会停⽌对当前⽂档的处理。 常用在a、link等标签上。\n\n### 2. 对HTML语义化的理解\n\n**语义化是指根据内容的结构化（内容语义化），选择合适的标签（代码语义化）**。通俗来讲就是用正确的标签做正确的事情。\n\n语义化的优点如下：\n\n- 对机器友好，带有语义的文字表现力丰富，更适合搜索引擎的爬虫爬取有效信息，有利于SEO。除此之外，语义类还支持读屏软件，根据文章可以自动生成目录；\n- 对开发者友好，使用语义类标签增强了可读性，结构更加清晰，开发者能清晰的看出网页的结构，便于团队的开发与维护。\n\n常见的语义化标签：\n\n```html\n<header></header>  头部\n\n<nav></nav>  导航栏\n\n<section></section>  区块（有语义化的div）\n\n<main></main>  主要区域\n\n<article></article>  主要内容\n\n<aside></aside>  侧边栏\n\n<footer></footer>  底部\n```\n\n### 3. DOCTYPE(⽂档类型) 的作⽤\n\nDOCTYPE是HTML5中一种标准通用标记语言的文档类型声明，它的目的是**告诉浏览器（解析器）应该以什么样（html或xhtml）的文档类型定义来解析文档**，不同的渲染模式会影响浏览器对 CSS 代码甚⾄ JavaScript 脚本的解析。它必须声明在HTML⽂档的第⼀⾏。\n\n浏览器渲染页面的两种模式（可通过document.compatMode获取，比如，语雀官网的文档类型是**CSS1Compat**）：\n\n- **CSS1Compat：标准模式（Strick mode）**，默认模式，浏览器使用W3C的标准解析渲染页面。在标准模式中，浏览器以其支持的最高标准呈现页面。\n- **BackCompat：怪异模式(混杂模式)(Quick mode)**，浏览器使用自己的怪异模式解析渲染页面。在怪异模式中，页面以一种比较宽松的向后兼容的方式显示。\n\n### 4. script标签中defer和async的区别\n\n如果没有defer或async属性，浏览器会立即加载并执行相应的脚本。它不会等待后续加载的文档元素，读取到就会开始加载和执行，这样就阻塞了后续文档的加载。\n\n下图可以直观的看出三者之间的区别: ![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0a8a139519f46dfa2d1992c58eb5397~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) 其中蓝色代表js脚本网络加载时间，红色代表js脚本执行时间，绿色代表html解析。\n\n**defer 和 async属性都是去异步加载外部的JS脚本文件，它们都不会阻塞页面的解析**，其区别如下：\n\n- **执行顺序：** 多个带async属性的标签，不能保证加载的顺序；多个带defer属性的标签，按照加载顺序执行；\n- **脚本是否并行执行：\\**async属性，表示\\**后续文档的加载和执行与js脚本的加载和执行是并行进行的**，即异步执行；defer属性，加载后续文档的过程和js脚本的加载(此时仅加载不执行)是并行进行的(异步)，js脚本需要等到文档所有元素解析完成之后才执行，DOMContentLoaded事件触发执行之前。\n\n### 5. 常⽤的meta标签有哪些\n\n`meta` 标签由 `name` 和 `content` 属性定义，**用来描述网页文档的属性**，比如网页的作者，网页描述，关键词等，除了HTTP标准固定了一些`name`作为大家使用的共识，开发者还可以自定义name。\n\n常用的meta标签： （1）`charset`，用来描述HTML文档的编码类型：\n\n```html\n<meta charset=\"UTF-8\" >\n```\n\n（2） `keywords`，页面关键词：\n\n```html\n<meta name=\"keywords\" content=\"关键词\" />\n```\n\n（3）`description`，页面描述：\n\n```html\n<meta name=\"description\" content=\"页面描述内容\" />\n```\n\n（4）`refresh`，页面重定向和刷新：\n\n```html\n<meta http-equiv=\"refresh\" content=\"0;url=\" />\n```\n\n（5）`viewport`，适配移动端，可以控制视口的大小和比例：\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n```\n\n其中，`content` 参数有以下几种：\n\n- `width viewport` ：宽度(数值/device-width)\n- `height viewport` ：高度(数值/device-height)\n- `initial-scale` ：初始缩放比例\n- `maximum-scale` ：最大缩放比例\n- `minimum-scale` ：最小缩放比例\n- `user-scalable` ：是否允许用户缩放(yes/no）\n\n（6）搜索引擎索引方式：\n\n```html\n<meta name=\"robots\" content=\"index,follow\" />\n```\n\n其中，`content` 参数有以下几种：\n\n- `all`：文件将被检索，且页面上的链接可以被查询；\n- `none`：文件将不被检索，且页面上的链接不可以被查询；\n- `index`：文件将被检索；\n- `follow`：页面上的链接可以被查询；\n- `noindex`：文件将不被检索；\n- `nofollow`：页面上的链接不可以被查询。\n\n### 6. HTML5有哪些更新\n\n#### 1. 语义化标签\n\n- header：定义文档的页眉（头部）；\n- nav：定义导航链接的部分；\n- footer：定义文档或节的页脚（底部）；\n- article：定义文章内容；\n- section：定义文档中的节（section、区段）；\n- aside：定义其所处内容之外的内容（侧边）；\n\n#### 2. 媒体标签\n\n（1） audio：音频\n\n```html\n<audio src='' controls autoplay loop='true'></audio>\n```\n\n属性：\n\n- controls 控制面板\n- autoplay 自动播放\n- loop=‘true’ 循环播放\n\n（2）video视频\n\n```html\n<video src='' poster='imgs/aa.jpg' controls></video>\n```\n\n属性：\n\n- poster：指定视频还没有完全下载完毕，或者用户还没有点击播放前显示的封面。默认显示当前视频文件的第一针画面，当然通过poster也可以自己指定。\n- controls 控制面板\n- width\n- height\n\n（3）source标签 因为浏览器对视频格式支持程度不一样，为了能够兼容不同的浏览器，可以通过source来指定视频源。\n\n```html\n<video>\n \t<source src='aa.flv' type='video/flv'></source>\n \t<source src='aa.mp4' type='video/mp4'></source>\n</video>\n```\n\n#### 3. 表单\n\n**表单类型：**\n\n- email ：能够验证当前输入的邮箱地址是否合法\n- url ： 验证URL\n- number ： 只能输入数字，其他输入不了，而且自带上下增大减小箭头，max属性可以设置为最大值，min可以设置为最小值，value为默认值。\n- search ： 输入框后面会给提供一个小叉，可以删除输入的内容，更加人性化。\n- range ： 可以提供给一个范围，其中可以设置max和min以及value，其中value属性可以设置为默认值\n- color ： 提供了一个颜色拾取器\n- time ： 时分秒\n- data ： 日期选择年月日\n- datatime ： 时间和日期(目前只有Safari支持)\n- datatime-local ：日期时间控件\n- week ：周控件\n- month：月控件\n\n**表单属性：**\n\n- placeholder ：提示信息\n- autofocus ：自动获取焦点\n- autocomplete=“on” 或者 autocomplete=“off” 使用这个属性需要有两个前提：\n  - 表单必须提交过\n  - 必须有name属性。\n- required：要求输入框不能为空，必须有值才能够提交。\n- pattern=\" \" 里面写入想要的正则模式，例如手机号patte=\"^(+86)?\\d{10}$\"\n- multiple：可以选择多个文件或者多个邮箱\n- form=\" form表单的ID\"\n\n**表单事件：**\n\n- oninput 每当input里的输入框内容发生变化都会触发此事件。\n- oninvalid 当验证不通过时触发此事件。\n\n#### 4. 进度条、度量器\n\n- progress标签：用来表示任务的进度（IE、Safari不支持），max用来表示任务的进度，value表示已完成多少\n- meter属性：用来显示剩余容量或剩余库存（IE、Safari不支持）\n  - high/low：规定被视作高/低的范围\n  - max/min：规定最大/小值\n  - value：规定当前度量值\n\n设置规则：min < low < high < max\n\n#### 5.DOM查询操作\n\n- document.querySelector()\n- document.querySelectorAll()\n\n它们选择的对象可以是标签，可以是类(需要加点)，可以是ID(需要加#)\n\n#### 6. Web存储\n\nHTML5 提供了两种在客户端存储数据的新方法：\n\n- localStorage - 没有时间限制的数据存储\n- sessionStorage - 针对一个 session 的数据存储\n\n#### 7. 其他\n\n- 拖放：拖放是一种常见的特性，即抓取对象以后拖到另一个位置。设置元素可拖放：\n\n```html\n<img draggable=\"true\" />\n```\n\n- 画布（canvas ）： canvas 元素使用 JavaScript 在网页上绘制图像。画布是一个矩形区域，可以控制其每一像素。canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。\n\n```html\n<canvas id=\"myCanvas\" width=\"200\" height=\"100\"></canvas>\n```\n\n- SVG：SVG 指可伸缩矢量图形，用于定义用于网络的基于矢量的图形，使用 XML 格式定义图形，图像在放大或改变尺寸的情况下其图形质量不会有损失，它是万维网联盟的标准\n- 地理定位：Geolocation（地理定位）用于定位用户的位置。‘\n\n**总结：** （1）新增语义化标签：nav、header、footer、aside、section、article （2）音频、视频标签：audio、video （3）数据存储：localStorage、sessionStorage （4）canvas（画布）、Geolocation（地理定位）、websocket（通信协议） （5）input标签新增属性：placeholder、autocomplete、autofocus、required （6）history API：go、forward、back、pushstate\n\n**移除的元素有：**\n\n- 纯表现的元素：basefont，big，center，font, s，strike，tt，u;\n- 对可用性产生负面影响的元素：frame，frameset，noframes；\n\n### 7. img的srcset属性的作⽤？\n\n响应式页面中经常用到根据屏幕密度设置不同的图片。这时就用到了 img 标签的srcset属性。srcset属性用于设置不同屏幕密度下，img 会自动加载不同的图片。用法如下：\n\n```html\n<img src=\"image-128.png\" srcset=\"image-256.png 2x\" />\n```\n\n使用上面的代码，就能实现在屏幕密度为1x的情况下加载image-128.png, 屏幕密度为2x时加载image-256.png。\n\n按照上面的实现，不同的屏幕密度都要设置图片地址，目前的屏幕密度有1x,2x,3x,4x四种，如果每一个图片都设置4张图片，加载就会很慢。所以就有了新的srcset标准。代码如下：\n\n```html\n<img src=\"image-128.png\"\n     srcset=\"image-128.png 128w, image-256.png 256w, image-512.png 512w\"\n     sizes=\"(max-width: 360px) 340px, 128px\" />\n```\n\n其中srcset指定图片的地址和对应的图片质量。sizes用来设置图片的尺寸零界点。对于 srcset 中的 w 单位，可以理解成图片质量。如果可视区域小于这个质量的值，就可以使用。浏览器会自动选择一个最小的可用图片。\n\nsizes语法如下：\n\n```html\nsizes=\"[media query] [length], [media query] [length] ... \"\n```\n\nsizes就是指默认显示128px, 如果视区宽度大于360px, 则显示340px。\n\n### 8.  行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\n\n- 行内元素有：`a b span img input select strong`；\n- 块级元素有：`div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p`；\n\n空元素，即没有内容的HTML元素。空元素是在开始标签中关闭的，也就是空元素没有闭合标签：\n\n- 常见的有：`<br>`、`<hr>`、`<img>`、`<input>`、`<link>`、`<meta>`；\n- 鲜见的有：`<area>`、`<base>`、`<col>`、`<colgroup>`、`<command>`、`<embed>`、`<keygen>`、`<param>`、`<source>`、`<track>`、`<wbr>`。\n\n### 9. 说一下 web worker\n\n在 HTML 页面中，如果在执行脚本时，页面的状态是不可相应的，直到脚本执行完成后，页面才变成可相应。web worker 是运行在后台的 js，独立于其他脚本，不会影响页面的性能。 并且通过 postMessage 将结果回传到主线程。这样在进行复杂操作的时候，就不会阻塞主线程了。\n\n如何创建 web worker：\n\n1. 检测浏览器对于 web worker 的支持性\n2. 创建 web worker 文件（js，回传函数等）\n3. 创建 web worker 对象\n\n### 10. HTML5的离线储存怎么使用，它的工作原理是什么\n\n离线存储指的是：在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。\n\n**原理：**HTML5的离线存储是基于一个新建的 `.appcache` 文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示\n\n**使用方法：** （1）创建一个和 html 同名的 manifest 文件，然后在页面头部加入 manifest 属性：\n\n```html\n<html lang=\"en\" manifest=\"index.manifest\">\n```\n（2）在 `cache.manifest` 文件中编写需要离线存储的资源：\n```html\nCACHE MANIFEST\n    #v0.11\n    CACHE:\n    js/app.js\n    css/style.css\n    NETWORK:\n    resourse/logo.png\n    FALLBACK:\n    / /offline.html\n```\n\n- **CACHE**: 表示需要离线存储的资源列表，由于包含 manifest 文件的页面将被自动离线存储，所以不需要把页面自身也列出来。\n- **NETWORK**: 表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些资源。不过，如果在 CACHE 和 NETWORK 中有一个相同的资源，那么这个资源还是会被离线存储，也就是说 CACHE 的优先级更高。\n- **FALLBACK**: 表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问 offline.html 。\n\n（3）在离线状态时，操作 `window.applicationCache` 进行离线缓存的操作。\n\n**如何更新缓存：**\n\n（1）更新 manifest 文件\n\n（2）通过 javascript 操作\n\n（3）清除浏览器缓存\n\n**注意事项：**\n\n（1）浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。\n\n（2）如果 manifest 文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存。\n\n（3）引用 manifest 的 html 必须与 manifest 文件同源，在同一个域下。\n\n（4）FALLBACK 中的资源必须和 manifest 文件同源。\n\n（5）当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。\n\n（6）站点中的其他页面即使没有设置 manifest 属性，请求的资源如果在缓存中也从缓存中访问。\n\n（7）当 manifest 文件发生改变时，资源请求本身也会触发更新。\n\n### 11. 浏览器是如何对 HTML5 的离线储存资源进行管理和加载？\n\n- **在线的情况下**，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件，如果是第一次访问页面 ，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。如果已经访问过页面并且资源已经进行离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，就会重新下载文件中的资源并进行离线存储。\n- **离线的情况下**，浏览器会直接使用离线存储的资源。\n\n### 12. title与h1的区别、b与strong的区别、i与em的区别？\n\n- strong标签有语义，是起到加重语气的效果，而b标签是没有的，b标签只是一个简单加粗标签。b标签之间的字符都设为粗体，strong标签加强字符的语气都是通过粗体来实现的，而搜索引擎更侧重strong标签。\n- title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取有很大的影响\n- **i内容展示为斜体，em表示强调的文本**\n\n### 13. **iframe 有那些优点和缺点？**\n\niframe 元素会创建包含另外一个文档的内联框架（即行内框架）。\n\n**优点：**\n\n- 用来加载速度较慢的内容（如广告）\n- 可以使脚本可以并行下载\n- 可以实现跨子域通信\n\n**缺点：**\n\n- iframe 会阻塞主页面的 onload 事件\n- 无法被一些搜索引擎索识别\n- 会产生很多页面，不容易管理\n\n### 14. label 的作用是什么？如何使用？\n\nlabel标签来定义表单控件的关系：当用户选择label标签时，浏览器会自动将焦点转到和label标签相关的表单控件上。\n\n- 使用方法1：\n\n```html\n<label for=\"mobile\">Number:</label>\n<input type=\"text\" id=\"mobile\"/>\n```\n\n- 使用方法2：\n\n```html\n<label>Date:<input type=\"text\"/></label>\n```\n\n### 15. Canvas和SVG的区别\n\n**（1）SVG：** SVG可缩放矢量图形（Scalable Vector Graphics）是基于可扩展标记语言XML描述的2D图形的语言，SVG基于XML就意味着SVG DOM中的每个元素都是可用的，可以为某个元素附加Javascript事件处理器。在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。\n\n其特点如下：\n\n- 不依赖分辨率\n- 支持事件处理器\n- 最适合带有大型渲染区域的应用程序（比如谷歌地图）\n- 复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）\n- 不适合游戏应用\n\n**（2）Canvas：** Canvas是画布，通过Javascript来绘制2D图形，是逐像素进行渲染的。其位置发生改变，就会重新进行绘制。\n\n其特点如下：\n\n- 依赖分辨率\n- 不支持事件处理器\n- 弱的文本渲染能力\n- 能够以 .png 或 .jpg 格式保存结果图像\n- 最适合图像密集型的游戏，其中的许多对象会被频繁重绘\n\n注：矢量图，也称为面向对象的图像或绘图图像，在数学上定义为一系列由线连接的点。矢量文件中的图形元素称为对象。每个对象都是一个自成一体的实体，它具有颜色、形状、轮廓、大小和屏幕位置等属性。\n\n### 16. head 标签有什么作用，其中什么标签必不可少？\n\n 标签用于定义文档的头部，它是所有头部元素的容器。 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等。\n\n文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。\n\n下面这些标签可用在 head 部分：`<base>, <link>, <meta>, <script>, <style>, <title>`。\n\n其中 `<title>` 定义文档的标题，它是 head 部分中唯一必需的元素。\n\n### 17. 文档声明（Doctype）和`<!Doctype html>`有何作用? 严格模式与混杂模式如何区分？它们有何意义?\n\n**文档声明的作用：** 文档声明是为了告诉浏览器，当前`HTML`文档使用什么版本的`HTML`来写的，这样浏览器才能按照声明的版本来正确的解析。\n\n**的作用：**`<!doctype html>` 的作用就是让浏览器进入标准模式，使用最新的 `HTML5` 标准来解析渲染页面；如果不写，浏览器就会进入混杂模式，我们需要避免此类情况发生。\n\n**严格模式与混杂模式的区分：**\n\n- **严格模式**： 又称为标准模式，指浏览器按照`W3C`标准解析代码；\n- **混杂模式**： 又称怪异模式、兼容模式，是指浏览器用自己的方式解析代码。混杂模式通常模拟老式浏览器的行为，以防止老站点无法工作；\n\n**区分**：网页中的`DTD`，直接影响到使用的是严格模式还是浏览模式，可以说`DTD`的使用与这两种方式的区别息息相关。\n\n- 如果文档包含严格的`DOCTYPE` ，那么它一般以严格模式呈现（**严格 DTD ——严格模式**）；\n- 包含过渡 `DTD` 和 `URI` 的 `DOCTYPE` ，也以严格模式呈现，但有过渡 `DTD` 而没有 `URI` （统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现（**有 URI 的过渡 DTD ——严格模式；没有 URI 的过渡 DTD ——混杂模式**）；\n- `DOCTYPE` 不存在或形式不正确会导致文档以混杂模式呈现（**DTD不存在或者格式不正确——混杂模式**）；\n- `HTML5` 没有 `DTD` ，因此也就没有严格模式与混杂模式的区别，`HTML5` 有相对宽松的 法，实现时，已经尽可能大的实现了向后兼容(**HTML5 没有严格和混杂之分**)。\n\n总之，**严格模式让各个浏览器统一执行一套规范兼容模式保证了旧网站的正常运行。**\n\n### 18. 浏览器乱码的原因是什么？如何解决？\n\n**产生乱码的原因：**\n\n- 网页源代码是`gbk`的编码，而内容中的中文字是`utf-8`编码的，这样浏览器打开即会出现`html`乱码，反之也会出现乱码；\n- `html`网页编码是`gbk`，而程序从数据库中调出呈现是`utf-8`编码的内容也会造成编码乱码；\n- 浏览器不能自动检测网页编码，造成网页乱码。\n\n**解决办法：**\n\n- 使用软件编辑HTML网页内容；\n- 如果网页设置编码是`gbk`，而数据库储存数据编码格式是`UTF-8`，此时需要程序查询数据库数据显示数据前进程序转码；\n- 如果浏览器浏览时候出现网页乱码，在浏览器中找到转换编码的菜单进行转换。\n\n### 19. 渐进增强和优雅降级之间的区别\n\n**（1）渐进增强（progressive enhancement）**：主要是针对低版本的浏览器进行页面重构，保证基本的功能情况下，再针对高级浏览器进行效果、交互等方面的改进和追加功能，以达到更好的用户体验。 **（2）优雅降级 graceful degradation**： 一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容。\n\n**两者区别：**\n\n- 优雅降级是从复杂的现状开始的，并试图减少用户体验的供给；而渐进增强是从一个非常基础的，能够起作用的版本开始的，并在此基础上不断扩充，以适应未来环境的需要；\n- 降级（功能衰竭）意味着往回看，而渐进增强则意味着往前看，同时保证其根基处于安全地带。\n\n“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。 在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。\n\n“渐进增强”观点则认为应关注于内容本身。内容是建立网站的诱因，有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。\n\n### 20. 说一下 HTML5 drag API\n\n- dragstart：事件主体是被拖放元素，在开始拖放被拖放元素时触发。\n- darg：事件主体是被拖放元素，在正在拖放被拖放元素时触发。\n- dragenter：事件主体是目标元素，在被拖放元素进入某元素时触发。\n- dragover：事件主体是目标元素，在被拖放在某元素内移动时触发。\n- dragleave：事件主体是目标元素，在被拖放元素移出目标元素是触发。\n- drop：事件主体是目标元素，在目标元素完全接受被拖放元素时触发。\n- dragend：事件主体是被拖放元素，在整个拖放操作结束时触发。\n\n","source":"_posts/js/HTML.md","raw":"---\ntitle: HTML复习 \ntags:\n  - 面试\n  - HTML\ncategories: 面试\nkeywords: '前端,面试,HTML'\ndescription: HTMLJS复习记录\ntop_img: 'https://raw.githubusercontent.com/why862555625/images/main/images/444.jpg'\nsticky: 数值越大越靠前\ncover: 'https://raw.githubusercontent.com/why862555625/images/main/images/444.jpg'\ncomments: false评论\nabbrlink: d9795d88\ndate: 2023-05-23 15:21:13\nupdated: 2023-05-23 15:21:13\n---\n\nHTML复习 \n\n<!-- more -->\n\n![image-20230608143228021](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230608143228021.png)\n\n### 1. src和href的区别\n\nsrc和href都是**用来引用外部的资源**，它们的区别如下：\n\n- **src：** 表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。src会将其指向的资源下载并应⽤到⽂档内，如请求js脚本。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，所以⼀般js脚本会放在页面底部。\n- **href：** 表示超文本引用，它指向一些网络资源，建立和当前元素或本文档的链接关系。当浏览器识别到它他指向的⽂件时，就会并⾏下载资源，不会停⽌对当前⽂档的处理。 常用在a、link等标签上。\n\n### 2. 对HTML语义化的理解\n\n**语义化是指根据内容的结构化（内容语义化），选择合适的标签（代码语义化）**。通俗来讲就是用正确的标签做正确的事情。\n\n语义化的优点如下：\n\n- 对机器友好，带有语义的文字表现力丰富，更适合搜索引擎的爬虫爬取有效信息，有利于SEO。除此之外，语义类还支持读屏软件，根据文章可以自动生成目录；\n- 对开发者友好，使用语义类标签增强了可读性，结构更加清晰，开发者能清晰的看出网页的结构，便于团队的开发与维护。\n\n常见的语义化标签：\n\n```html\n<header></header>  头部\n\n<nav></nav>  导航栏\n\n<section></section>  区块（有语义化的div）\n\n<main></main>  主要区域\n\n<article></article>  主要内容\n\n<aside></aside>  侧边栏\n\n<footer></footer>  底部\n```\n\n### 3. DOCTYPE(⽂档类型) 的作⽤\n\nDOCTYPE是HTML5中一种标准通用标记语言的文档类型声明，它的目的是**告诉浏览器（解析器）应该以什么样（html或xhtml）的文档类型定义来解析文档**，不同的渲染模式会影响浏览器对 CSS 代码甚⾄ JavaScript 脚本的解析。它必须声明在HTML⽂档的第⼀⾏。\n\n浏览器渲染页面的两种模式（可通过document.compatMode获取，比如，语雀官网的文档类型是**CSS1Compat**）：\n\n- **CSS1Compat：标准模式（Strick mode）**，默认模式，浏览器使用W3C的标准解析渲染页面。在标准模式中，浏览器以其支持的最高标准呈现页面。\n- **BackCompat：怪异模式(混杂模式)(Quick mode)**，浏览器使用自己的怪异模式解析渲染页面。在怪异模式中，页面以一种比较宽松的向后兼容的方式显示。\n\n### 4. script标签中defer和async的区别\n\n如果没有defer或async属性，浏览器会立即加载并执行相应的脚本。它不会等待后续加载的文档元素，读取到就会开始加载和执行，这样就阻塞了后续文档的加载。\n\n下图可以直观的看出三者之间的区别: ![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0a8a139519f46dfa2d1992c58eb5397~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) 其中蓝色代表js脚本网络加载时间，红色代表js脚本执行时间，绿色代表html解析。\n\n**defer 和 async属性都是去异步加载外部的JS脚本文件，它们都不会阻塞页面的解析**，其区别如下：\n\n- **执行顺序：** 多个带async属性的标签，不能保证加载的顺序；多个带defer属性的标签，按照加载顺序执行；\n- **脚本是否并行执行：\\**async属性，表示\\**后续文档的加载和执行与js脚本的加载和执行是并行进行的**，即异步执行；defer属性，加载后续文档的过程和js脚本的加载(此时仅加载不执行)是并行进行的(异步)，js脚本需要等到文档所有元素解析完成之后才执行，DOMContentLoaded事件触发执行之前。\n\n### 5. 常⽤的meta标签有哪些\n\n`meta` 标签由 `name` 和 `content` 属性定义，**用来描述网页文档的属性**，比如网页的作者，网页描述，关键词等，除了HTTP标准固定了一些`name`作为大家使用的共识，开发者还可以自定义name。\n\n常用的meta标签： （1）`charset`，用来描述HTML文档的编码类型：\n\n```html\n<meta charset=\"UTF-8\" >\n```\n\n（2） `keywords`，页面关键词：\n\n```html\n<meta name=\"keywords\" content=\"关键词\" />\n```\n\n（3）`description`，页面描述：\n\n```html\n<meta name=\"description\" content=\"页面描述内容\" />\n```\n\n（4）`refresh`，页面重定向和刷新：\n\n```html\n<meta http-equiv=\"refresh\" content=\"0;url=\" />\n```\n\n（5）`viewport`，适配移动端，可以控制视口的大小和比例：\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n```\n\n其中，`content` 参数有以下几种：\n\n- `width viewport` ：宽度(数值/device-width)\n- `height viewport` ：高度(数值/device-height)\n- `initial-scale` ：初始缩放比例\n- `maximum-scale` ：最大缩放比例\n- `minimum-scale` ：最小缩放比例\n- `user-scalable` ：是否允许用户缩放(yes/no）\n\n（6）搜索引擎索引方式：\n\n```html\n<meta name=\"robots\" content=\"index,follow\" />\n```\n\n其中，`content` 参数有以下几种：\n\n- `all`：文件将被检索，且页面上的链接可以被查询；\n- `none`：文件将不被检索，且页面上的链接不可以被查询；\n- `index`：文件将被检索；\n- `follow`：页面上的链接可以被查询；\n- `noindex`：文件将不被检索；\n- `nofollow`：页面上的链接不可以被查询。\n\n### 6. HTML5有哪些更新\n\n#### 1. 语义化标签\n\n- header：定义文档的页眉（头部）；\n- nav：定义导航链接的部分；\n- footer：定义文档或节的页脚（底部）；\n- article：定义文章内容；\n- section：定义文档中的节（section、区段）；\n- aside：定义其所处内容之外的内容（侧边）；\n\n#### 2. 媒体标签\n\n（1） audio：音频\n\n```html\n<audio src='' controls autoplay loop='true'></audio>\n```\n\n属性：\n\n- controls 控制面板\n- autoplay 自动播放\n- loop=‘true’ 循环播放\n\n（2）video视频\n\n```html\n<video src='' poster='imgs/aa.jpg' controls></video>\n```\n\n属性：\n\n- poster：指定视频还没有完全下载完毕，或者用户还没有点击播放前显示的封面。默认显示当前视频文件的第一针画面，当然通过poster也可以自己指定。\n- controls 控制面板\n- width\n- height\n\n（3）source标签 因为浏览器对视频格式支持程度不一样，为了能够兼容不同的浏览器，可以通过source来指定视频源。\n\n```html\n<video>\n \t<source src='aa.flv' type='video/flv'></source>\n \t<source src='aa.mp4' type='video/mp4'></source>\n</video>\n```\n\n#### 3. 表单\n\n**表单类型：**\n\n- email ：能够验证当前输入的邮箱地址是否合法\n- url ： 验证URL\n- number ： 只能输入数字，其他输入不了，而且自带上下增大减小箭头，max属性可以设置为最大值，min可以设置为最小值，value为默认值。\n- search ： 输入框后面会给提供一个小叉，可以删除输入的内容，更加人性化。\n- range ： 可以提供给一个范围，其中可以设置max和min以及value，其中value属性可以设置为默认值\n- color ： 提供了一个颜色拾取器\n- time ： 时分秒\n- data ： 日期选择年月日\n- datatime ： 时间和日期(目前只有Safari支持)\n- datatime-local ：日期时间控件\n- week ：周控件\n- month：月控件\n\n**表单属性：**\n\n- placeholder ：提示信息\n- autofocus ：自动获取焦点\n- autocomplete=“on” 或者 autocomplete=“off” 使用这个属性需要有两个前提：\n  - 表单必须提交过\n  - 必须有name属性。\n- required：要求输入框不能为空，必须有值才能够提交。\n- pattern=\" \" 里面写入想要的正则模式，例如手机号patte=\"^(+86)?\\d{10}$\"\n- multiple：可以选择多个文件或者多个邮箱\n- form=\" form表单的ID\"\n\n**表单事件：**\n\n- oninput 每当input里的输入框内容发生变化都会触发此事件。\n- oninvalid 当验证不通过时触发此事件。\n\n#### 4. 进度条、度量器\n\n- progress标签：用来表示任务的进度（IE、Safari不支持），max用来表示任务的进度，value表示已完成多少\n- meter属性：用来显示剩余容量或剩余库存（IE、Safari不支持）\n  - high/low：规定被视作高/低的范围\n  - max/min：规定最大/小值\n  - value：规定当前度量值\n\n设置规则：min < low < high < max\n\n#### 5.DOM查询操作\n\n- document.querySelector()\n- document.querySelectorAll()\n\n它们选择的对象可以是标签，可以是类(需要加点)，可以是ID(需要加#)\n\n#### 6. Web存储\n\nHTML5 提供了两种在客户端存储数据的新方法：\n\n- localStorage - 没有时间限制的数据存储\n- sessionStorage - 针对一个 session 的数据存储\n\n#### 7. 其他\n\n- 拖放：拖放是一种常见的特性，即抓取对象以后拖到另一个位置。设置元素可拖放：\n\n```html\n<img draggable=\"true\" />\n```\n\n- 画布（canvas ）： canvas 元素使用 JavaScript 在网页上绘制图像。画布是一个矩形区域，可以控制其每一像素。canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。\n\n```html\n<canvas id=\"myCanvas\" width=\"200\" height=\"100\"></canvas>\n```\n\n- SVG：SVG 指可伸缩矢量图形，用于定义用于网络的基于矢量的图形，使用 XML 格式定义图形，图像在放大或改变尺寸的情况下其图形质量不会有损失，它是万维网联盟的标准\n- 地理定位：Geolocation（地理定位）用于定位用户的位置。‘\n\n**总结：** （1）新增语义化标签：nav、header、footer、aside、section、article （2）音频、视频标签：audio、video （3）数据存储：localStorage、sessionStorage （4）canvas（画布）、Geolocation（地理定位）、websocket（通信协议） （5）input标签新增属性：placeholder、autocomplete、autofocus、required （6）history API：go、forward、back、pushstate\n\n**移除的元素有：**\n\n- 纯表现的元素：basefont，big，center，font, s，strike，tt，u;\n- 对可用性产生负面影响的元素：frame，frameset，noframes；\n\n### 7. img的srcset属性的作⽤？\n\n响应式页面中经常用到根据屏幕密度设置不同的图片。这时就用到了 img 标签的srcset属性。srcset属性用于设置不同屏幕密度下，img 会自动加载不同的图片。用法如下：\n\n```html\n<img src=\"image-128.png\" srcset=\"image-256.png 2x\" />\n```\n\n使用上面的代码，就能实现在屏幕密度为1x的情况下加载image-128.png, 屏幕密度为2x时加载image-256.png。\n\n按照上面的实现，不同的屏幕密度都要设置图片地址，目前的屏幕密度有1x,2x,3x,4x四种，如果每一个图片都设置4张图片，加载就会很慢。所以就有了新的srcset标准。代码如下：\n\n```html\n<img src=\"image-128.png\"\n     srcset=\"image-128.png 128w, image-256.png 256w, image-512.png 512w\"\n     sizes=\"(max-width: 360px) 340px, 128px\" />\n```\n\n其中srcset指定图片的地址和对应的图片质量。sizes用来设置图片的尺寸零界点。对于 srcset 中的 w 单位，可以理解成图片质量。如果可视区域小于这个质量的值，就可以使用。浏览器会自动选择一个最小的可用图片。\n\nsizes语法如下：\n\n```html\nsizes=\"[media query] [length], [media query] [length] ... \"\n```\n\nsizes就是指默认显示128px, 如果视区宽度大于360px, 则显示340px。\n\n### 8.  行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\n\n- 行内元素有：`a b span img input select strong`；\n- 块级元素有：`div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p`；\n\n空元素，即没有内容的HTML元素。空元素是在开始标签中关闭的，也就是空元素没有闭合标签：\n\n- 常见的有：`<br>`、`<hr>`、`<img>`、`<input>`、`<link>`、`<meta>`；\n- 鲜见的有：`<area>`、`<base>`、`<col>`、`<colgroup>`、`<command>`、`<embed>`、`<keygen>`、`<param>`、`<source>`、`<track>`、`<wbr>`。\n\n### 9. 说一下 web worker\n\n在 HTML 页面中，如果在执行脚本时，页面的状态是不可相应的，直到脚本执行完成后，页面才变成可相应。web worker 是运行在后台的 js，独立于其他脚本，不会影响页面的性能。 并且通过 postMessage 将结果回传到主线程。这样在进行复杂操作的时候，就不会阻塞主线程了。\n\n如何创建 web worker：\n\n1. 检测浏览器对于 web worker 的支持性\n2. 创建 web worker 文件（js，回传函数等）\n3. 创建 web worker 对象\n\n### 10. HTML5的离线储存怎么使用，它的工作原理是什么\n\n离线存储指的是：在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。\n\n**原理：**HTML5的离线存储是基于一个新建的 `.appcache` 文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示\n\n**使用方法：** （1）创建一个和 html 同名的 manifest 文件，然后在页面头部加入 manifest 属性：\n\n```html\n<html lang=\"en\" manifest=\"index.manifest\">\n```\n（2）在 `cache.manifest` 文件中编写需要离线存储的资源：\n```html\nCACHE MANIFEST\n    #v0.11\n    CACHE:\n    js/app.js\n    css/style.css\n    NETWORK:\n    resourse/logo.png\n    FALLBACK:\n    / /offline.html\n```\n\n- **CACHE**: 表示需要离线存储的资源列表，由于包含 manifest 文件的页面将被自动离线存储，所以不需要把页面自身也列出来。\n- **NETWORK**: 表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些资源。不过，如果在 CACHE 和 NETWORK 中有一个相同的资源，那么这个资源还是会被离线存储，也就是说 CACHE 的优先级更高。\n- **FALLBACK**: 表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问 offline.html 。\n\n（3）在离线状态时，操作 `window.applicationCache` 进行离线缓存的操作。\n\n**如何更新缓存：**\n\n（1）更新 manifest 文件\n\n（2）通过 javascript 操作\n\n（3）清除浏览器缓存\n\n**注意事项：**\n\n（1）浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。\n\n（2）如果 manifest 文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存。\n\n（3）引用 manifest 的 html 必须与 manifest 文件同源，在同一个域下。\n\n（4）FALLBACK 中的资源必须和 manifest 文件同源。\n\n（5）当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。\n\n（6）站点中的其他页面即使没有设置 manifest 属性，请求的资源如果在缓存中也从缓存中访问。\n\n（7）当 manifest 文件发生改变时，资源请求本身也会触发更新。\n\n### 11. 浏览器是如何对 HTML5 的离线储存资源进行管理和加载？\n\n- **在线的情况下**，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件，如果是第一次访问页面 ，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。如果已经访问过页面并且资源已经进行离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，就会重新下载文件中的资源并进行离线存储。\n- **离线的情况下**，浏览器会直接使用离线存储的资源。\n\n### 12. title与h1的区别、b与strong的区别、i与em的区别？\n\n- strong标签有语义，是起到加重语气的效果，而b标签是没有的，b标签只是一个简单加粗标签。b标签之间的字符都设为粗体，strong标签加强字符的语气都是通过粗体来实现的，而搜索引擎更侧重strong标签。\n- title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取有很大的影响\n- **i内容展示为斜体，em表示强调的文本**\n\n### 13. **iframe 有那些优点和缺点？**\n\niframe 元素会创建包含另外一个文档的内联框架（即行内框架）。\n\n**优点：**\n\n- 用来加载速度较慢的内容（如广告）\n- 可以使脚本可以并行下载\n- 可以实现跨子域通信\n\n**缺点：**\n\n- iframe 会阻塞主页面的 onload 事件\n- 无法被一些搜索引擎索识别\n- 会产生很多页面，不容易管理\n\n### 14. label 的作用是什么？如何使用？\n\nlabel标签来定义表单控件的关系：当用户选择label标签时，浏览器会自动将焦点转到和label标签相关的表单控件上。\n\n- 使用方法1：\n\n```html\n<label for=\"mobile\">Number:</label>\n<input type=\"text\" id=\"mobile\"/>\n```\n\n- 使用方法2：\n\n```html\n<label>Date:<input type=\"text\"/></label>\n```\n\n### 15. Canvas和SVG的区别\n\n**（1）SVG：** SVG可缩放矢量图形（Scalable Vector Graphics）是基于可扩展标记语言XML描述的2D图形的语言，SVG基于XML就意味着SVG DOM中的每个元素都是可用的，可以为某个元素附加Javascript事件处理器。在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。\n\n其特点如下：\n\n- 不依赖分辨率\n- 支持事件处理器\n- 最适合带有大型渲染区域的应用程序（比如谷歌地图）\n- 复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）\n- 不适合游戏应用\n\n**（2）Canvas：** Canvas是画布，通过Javascript来绘制2D图形，是逐像素进行渲染的。其位置发生改变，就会重新进行绘制。\n\n其特点如下：\n\n- 依赖分辨率\n- 不支持事件处理器\n- 弱的文本渲染能力\n- 能够以 .png 或 .jpg 格式保存结果图像\n- 最适合图像密集型的游戏，其中的许多对象会被频繁重绘\n\n注：矢量图，也称为面向对象的图像或绘图图像，在数学上定义为一系列由线连接的点。矢量文件中的图形元素称为对象。每个对象都是一个自成一体的实体，它具有颜色、形状、轮廓、大小和屏幕位置等属性。\n\n### 16. head 标签有什么作用，其中什么标签必不可少？\n\n 标签用于定义文档的头部，它是所有头部元素的容器。 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等。\n\n文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。\n\n下面这些标签可用在 head 部分：`<base>, <link>, <meta>, <script>, <style>, <title>`。\n\n其中 `<title>` 定义文档的标题，它是 head 部分中唯一必需的元素。\n\n### 17. 文档声明（Doctype）和`<!Doctype html>`有何作用? 严格模式与混杂模式如何区分？它们有何意义?\n\n**文档声明的作用：** 文档声明是为了告诉浏览器，当前`HTML`文档使用什么版本的`HTML`来写的，这样浏览器才能按照声明的版本来正确的解析。\n\n**的作用：**`<!doctype html>` 的作用就是让浏览器进入标准模式，使用最新的 `HTML5` 标准来解析渲染页面；如果不写，浏览器就会进入混杂模式，我们需要避免此类情况发生。\n\n**严格模式与混杂模式的区分：**\n\n- **严格模式**： 又称为标准模式，指浏览器按照`W3C`标准解析代码；\n- **混杂模式**： 又称怪异模式、兼容模式，是指浏览器用自己的方式解析代码。混杂模式通常模拟老式浏览器的行为，以防止老站点无法工作；\n\n**区分**：网页中的`DTD`，直接影响到使用的是严格模式还是浏览模式，可以说`DTD`的使用与这两种方式的区别息息相关。\n\n- 如果文档包含严格的`DOCTYPE` ，那么它一般以严格模式呈现（**严格 DTD ——严格模式**）；\n- 包含过渡 `DTD` 和 `URI` 的 `DOCTYPE` ，也以严格模式呈现，但有过渡 `DTD` 而没有 `URI` （统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现（**有 URI 的过渡 DTD ——严格模式；没有 URI 的过渡 DTD ——混杂模式**）；\n- `DOCTYPE` 不存在或形式不正确会导致文档以混杂模式呈现（**DTD不存在或者格式不正确——混杂模式**）；\n- `HTML5` 没有 `DTD` ，因此也就没有严格模式与混杂模式的区别，`HTML5` 有相对宽松的 法，实现时，已经尽可能大的实现了向后兼容(**HTML5 没有严格和混杂之分**)。\n\n总之，**严格模式让各个浏览器统一执行一套规范兼容模式保证了旧网站的正常运行。**\n\n### 18. 浏览器乱码的原因是什么？如何解决？\n\n**产生乱码的原因：**\n\n- 网页源代码是`gbk`的编码，而内容中的中文字是`utf-8`编码的，这样浏览器打开即会出现`html`乱码，反之也会出现乱码；\n- `html`网页编码是`gbk`，而程序从数据库中调出呈现是`utf-8`编码的内容也会造成编码乱码；\n- 浏览器不能自动检测网页编码，造成网页乱码。\n\n**解决办法：**\n\n- 使用软件编辑HTML网页内容；\n- 如果网页设置编码是`gbk`，而数据库储存数据编码格式是`UTF-8`，此时需要程序查询数据库数据显示数据前进程序转码；\n- 如果浏览器浏览时候出现网页乱码，在浏览器中找到转换编码的菜单进行转换。\n\n### 19. 渐进增强和优雅降级之间的区别\n\n**（1）渐进增强（progressive enhancement）**：主要是针对低版本的浏览器进行页面重构，保证基本的功能情况下，再针对高级浏览器进行效果、交互等方面的改进和追加功能，以达到更好的用户体验。 **（2）优雅降级 graceful degradation**： 一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容。\n\n**两者区别：**\n\n- 优雅降级是从复杂的现状开始的，并试图减少用户体验的供给；而渐进增强是从一个非常基础的，能够起作用的版本开始的，并在此基础上不断扩充，以适应未来环境的需要；\n- 降级（功能衰竭）意味着往回看，而渐进增强则意味着往前看，同时保证其根基处于安全地带。\n\n“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。 在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。\n\n“渐进增强”观点则认为应关注于内容本身。内容是建立网站的诱因，有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。\n\n### 20. 说一下 HTML5 drag API\n\n- dragstart：事件主体是被拖放元素，在开始拖放被拖放元素时触发。\n- darg：事件主体是被拖放元素，在正在拖放被拖放元素时触发。\n- dragenter：事件主体是目标元素，在被拖放元素进入某元素时触发。\n- dragover：事件主体是目标元素，在被拖放在某元素内移动时触发。\n- dragleave：事件主体是目标元素，在被拖放元素移出目标元素是触发。\n- drop：事件主体是目标元素，在目标元素完全接受被拖放元素时触发。\n- dragend：事件主体是被拖放元素，在整个拖放操作结束时触发。\n\n","slug":"js/HTML","published":1,"layout":"post","photos":[],"link":"","_id":"clipg086y000brgwh5ht24v6t","content":"<p>HTML复习 </p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230608143228021.png\" alt=\"image-20230608143228021\"></p>\n<h3 id=\"1-src和href的区别\"><a href=\"#1-src和href的区别\" class=\"headerlink\" title=\"1. src和href的区别\"></a>1. src和href的区别</h3><p>src和href都是<strong>用来引用外部的资源</strong>，它们的区别如下：</p>\n<ul>\n<li><strong>src：</strong> 表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。src会将其指向的资源下载并应⽤到⽂档内，如请求js脚本。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，所以⼀般js脚本会放在页面底部。</li>\n<li><strong>href：</strong> 表示超文本引用，它指向一些网络资源，建立和当前元素或本文档的链接关系。当浏览器识别到它他指向的⽂件时，就会并⾏下载资源，不会停⽌对当前⽂档的处理。 常用在a、link等标签上。</li>\n</ul>\n<h3 id=\"2-对HTML语义化的理解\"><a href=\"#2-对HTML语义化的理解\" class=\"headerlink\" title=\"2. 对HTML语义化的理解\"></a>2. 对HTML语义化的理解</h3><p><strong>语义化是指根据内容的结构化（内容语义化），选择合适的标签（代码语义化）</strong>。通俗来讲就是用正确的标签做正确的事情。</p>\n<p>语义化的优点如下：</p>\n<ul>\n<li>对机器友好，带有语义的文字表现力丰富，更适合搜索引擎的爬虫爬取有效信息，有利于SEO。除此之外，语义类还支持读屏软件，根据文章可以自动生成目录；</li>\n<li>对开发者友好，使用语义类标签增强了可读性，结构更加清晰，开发者能清晰的看出网页的结构，便于团队的开发与维护。</li>\n</ul>\n<p>常见的语义化标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span>  头部</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span>  导航栏</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span>  区块（有语义化的div）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span>  主要区域</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span>  主要内容</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aside</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span>  侧边栏</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span>  底部</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-DOCTYPE-⽂档类型-的作⽤\"><a href=\"#3-DOCTYPE-⽂档类型-的作⽤\" class=\"headerlink\" title=\"3. DOCTYPE(⽂档类型) 的作⽤\"></a>3. DOCTYPE(⽂档类型) 的作⽤</h3><p>DOCTYPE是HTML5中一种标准通用标记语言的文档类型声明，它的目的是<strong>告诉浏览器（解析器）应该以什么样（html或xhtml）的文档类型定义来解析文档</strong>，不同的渲染模式会影响浏览器对 CSS 代码甚⾄ JavaScript 脚本的解析。它必须声明在HTML⽂档的第⼀⾏。</p>\n<p>浏览器渲染页面的两种模式（可通过document.compatMode获取，比如，语雀官网的文档类型是<strong>CSS1Compat</strong>）：</p>\n<ul>\n<li><strong>CSS1Compat：标准模式（Strick mode）</strong>，默认模式，浏览器使用W3C的标准解析渲染页面。在标准模式中，浏览器以其支持的最高标准呈现页面。</li>\n<li>**BackCompat：怪异模式(混杂模式)(Quick mode)**，浏览器使用自己的怪异模式解析渲染页面。在怪异模式中，页面以一种比较宽松的向后兼容的方式显示。</li>\n</ul>\n<h3 id=\"4-script标签中defer和async的区别\"><a href=\"#4-script标签中defer和async的区别\" class=\"headerlink\" title=\"4. script标签中defer和async的区别\"></a>4. script标签中defer和async的区别</h3><p>如果没有defer或async属性，浏览器会立即加载并执行相应的脚本。它不会等待后续加载的文档元素，读取到就会开始加载和执行，这样就阻塞了后续文档的加载。</p>\n<p>下图可以直观的看出三者之间的区别: <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0a8a139519f46dfa2d1992c58eb5397~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"image.png\"> 其中蓝色代表js脚本网络加载时间，红色代表js脚本执行时间，绿色代表html解析。</p>\n<p><strong>defer 和 async属性都是去异步加载外部的JS脚本文件，它们都不会阻塞页面的解析</strong>，其区别如下：</p>\n<ul>\n<li><strong>执行顺序：</strong> 多个带async属性的标签，不能保证加载的顺序；多个带defer属性的标签，按照加载顺序执行；</li>\n<li>**脚本是否并行执行：**async属性，表示**后续文档的加载和执行与js脚本的加载和执行是并行进行的**，即异步执行；defer属性，加载后续文档的过程和js脚本的加载(此时仅加载不执行)是并行进行的(异步)，js脚本需要等到文档所有元素解析完成之后才执行，DOMContentLoaded事件触发执行之前。</li>\n</ul>\n<h3 id=\"5-常⽤的meta标签有哪些\"><a href=\"#5-常⽤的meta标签有哪些\" class=\"headerlink\" title=\"5. 常⽤的meta标签有哪些\"></a>5. 常⽤的meta标签有哪些</h3><p><code>meta</code> 标签由 <code>name</code> 和 <code>content</code> 属性定义，<strong>用来描述网页文档的属性</strong>，比如网页的作者，网页描述，关键词等，除了HTTP标准固定了一些<code>name</code>作为大家使用的共识，开发者还可以自定义name。</p>\n<p>常用的meta标签： （1）<code>charset</code>，用来描述HTML文档的编码类型：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>（2） <code>keywords</code>，页面关键词：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;keywords&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;关键词&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>（3）<code>description</code>，页面描述：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;页面描述内容&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>（4）<code>refresh</code>，页面重定向和刷新：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;refresh&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;0;url=&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>（5）<code>viewport</code>，适配移动端，可以控制视口的大小和比例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>content</code> 参数有以下几种：</p>\n<ul>\n<li><code>width viewport</code> ：宽度(数值/device-width)</li>\n<li><code>height viewport</code> ：高度(数值/device-height)</li>\n<li><code>initial-scale</code> ：初始缩放比例</li>\n<li><code>maximum-scale</code> ：最大缩放比例</li>\n<li><code>minimum-scale</code> ：最小缩放比例</li>\n<li><code>user-scalable</code> ：是否允许用户缩放(yes/no）</li>\n</ul>\n<p>（6）搜索引擎索引方式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;robots&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;index,follow&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>content</code> 参数有以下几种：</p>\n<ul>\n<li><code>all</code>：文件将被检索，且页面上的链接可以被查询；</li>\n<li><code>none</code>：文件将不被检索，且页面上的链接不可以被查询；</li>\n<li><code>index</code>：文件将被检索；</li>\n<li><code>follow</code>：页面上的链接可以被查询；</li>\n<li><code>noindex</code>：文件将不被检索；</li>\n<li><code>nofollow</code>：页面上的链接不可以被查询。</li>\n</ul>\n<h3 id=\"6-HTML5有哪些更新\"><a href=\"#6-HTML5有哪些更新\" class=\"headerlink\" title=\"6. HTML5有哪些更新\"></a>6. HTML5有哪些更新</h3><h4 id=\"1-语义化标签\"><a href=\"#1-语义化标签\" class=\"headerlink\" title=\"1. 语义化标签\"></a>1. 语义化标签</h4><ul>\n<li>header：定义文档的页眉（头部）；</li>\n<li>nav：定义导航链接的部分；</li>\n<li>footer：定义文档或节的页脚（底部）；</li>\n<li>article：定义文章内容；</li>\n<li>section：定义文档中的节（section、区段）；</li>\n<li>aside：定义其所处内容之外的内容（侧边）；</li>\n</ul>\n<h4 id=\"2-媒体标签\"><a href=\"#2-媒体标签\" class=\"headerlink\" title=\"2. 媒体标签\"></a>2. 媒体标签</h4><p>（1） audio：音频</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;&#x27;</span> <span class=\"attr\">controls</span> <span class=\"attr\">autoplay</span> <span class=\"attr\">loop</span>=<span class=\"string\">&#x27;true&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>属性：</p>\n<ul>\n<li>controls 控制面板</li>\n<li>autoplay 自动播放</li>\n<li>loop=‘true’ 循环播放</li>\n</ul>\n<p>（2）video视频</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;&#x27;</span> <span class=\"attr\">poster</span>=<span class=\"string\">&#x27;imgs/aa.jpg&#x27;</span> <span class=\"attr\">controls</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>属性：</p>\n<ul>\n<li>poster：指定视频还没有完全下载完毕，或者用户还没有点击播放前显示的封面。默认显示当前视频文件的第一针画面，当然通过poster也可以自己指定。</li>\n<li>controls 控制面板</li>\n<li>width</li>\n<li>height</li>\n</ul>\n<p>（3）source标签 因为浏览器对视频格式支持程度不一样，为了能够兼容不同的浏览器，可以通过source来指定视频源。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"> \t<span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;aa.flv&#x27;</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;video/flv&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\"> \t<span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;aa.mp4&#x27;</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;video/mp4&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-表单\"><a href=\"#3-表单\" class=\"headerlink\" title=\"3. 表单\"></a>3. 表单</h4><p><strong>表单类型：</strong></p>\n<ul>\n<li>email ：能够验证当前输入的邮箱地址是否合法</li>\n<li>url ： 验证URL</li>\n<li>number ： 只能输入数字，其他输入不了，而且自带上下增大减小箭头，max属性可以设置为最大值，min可以设置为最小值，value为默认值。</li>\n<li>search ： 输入框后面会给提供一个小叉，可以删除输入的内容，更加人性化。</li>\n<li>range ： 可以提供给一个范围，其中可以设置max和min以及value，其中value属性可以设置为默认值</li>\n<li>color ： 提供了一个颜色拾取器</li>\n<li>time ： 时分秒</li>\n<li>data ： 日期选择年月日</li>\n<li>datatime ： 时间和日期(目前只有Safari支持)</li>\n<li>datatime-local ：日期时间控件</li>\n<li>week ：周控件</li>\n<li>month：月控件</li>\n</ul>\n<p><strong>表单属性：</strong></p>\n<ul>\n<li>placeholder ：提示信息</li>\n<li>autofocus ：自动获取焦点</li>\n<li>autocomplete=“on” 或者 autocomplete=“off” 使用这个属性需要有两个前提：<ul>\n<li>表单必须提交过</li>\n<li>必须有name属性。</li>\n</ul>\n</li>\n<li>required：要求输入框不能为空，必须有值才能够提交。</li>\n<li>pattern=” “ 里面写入想要的正则模式，例如手机号patte=”^(+86)?\\d{10}$”</li>\n<li>multiple：可以选择多个文件或者多个邮箱</li>\n<li>form=” form表单的ID”</li>\n</ul>\n<p><strong>表单事件：</strong></p>\n<ul>\n<li>oninput 每当input里的输入框内容发生变化都会触发此事件。</li>\n<li>oninvalid 当验证不通过时触发此事件。</li>\n</ul>\n<h4 id=\"4-进度条、度量器\"><a href=\"#4-进度条、度量器\" class=\"headerlink\" title=\"4. 进度条、度量器\"></a>4. 进度条、度量器</h4><ul>\n<li>progress标签：用来表示任务的进度（IE、Safari不支持），max用来表示任务的进度，value表示已完成多少</li>\n<li>meter属性：用来显示剩余容量或剩余库存（IE、Safari不支持）<ul>\n<li>high/low：规定被视作高/低的范围</li>\n<li>max/min：规定最大/小值</li>\n<li>value：规定当前度量值</li>\n</ul>\n</li>\n</ul>\n<p>设置规则：min &lt; low &lt; high &lt; max</p>\n<h4 id=\"5-DOM查询操作\"><a href=\"#5-DOM查询操作\" class=\"headerlink\" title=\"5.DOM查询操作\"></a>5.DOM查询操作</h4><ul>\n<li>document.querySelector()</li>\n<li>document.querySelectorAll()</li>\n</ul>\n<p>它们选择的对象可以是标签，可以是类(需要加点)，可以是ID(需要加#)</p>\n<h4 id=\"6-Web存储\"><a href=\"#6-Web存储\" class=\"headerlink\" title=\"6. Web存储\"></a>6. Web存储</h4><p>HTML5 提供了两种在客户端存储数据的新方法：</p>\n<ul>\n<li>localStorage - 没有时间限制的数据存储</li>\n<li>sessionStorage - 针对一个 session 的数据存储</li>\n</ul>\n<h4 id=\"7-其他\"><a href=\"#7-其他\" class=\"headerlink\" title=\"7. 其他\"></a>7. 其他</h4><ul>\n<li>拖放：拖放是一种常见的特性，即抓取对象以后拖到另一个位置。设置元素可拖放：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">draggable</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>画布（canvas ）： canvas 元素使用 JavaScript 在网页上绘制图像。画布是一个矩形区域，可以控制其每一像素。canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myCanvas&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;200&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>SVG：SVG 指可伸缩矢量图形，用于定义用于网络的基于矢量的图形，使用 XML 格式定义图形，图像在放大或改变尺寸的情况下其图形质量不会有损失，它是万维网联盟的标准</li>\n<li>地理定位：Geolocation（地理定位）用于定位用户的位置。‘</li>\n</ul>\n<p><strong>总结：</strong> （1）新增语义化标签：nav、header、footer、aside、section、article （2）音频、视频标签：audio、video （3）数据存储：localStorage、sessionStorage （4）canvas（画布）、Geolocation（地理定位）、websocket（通信协议） （5）input标签新增属性：placeholder、autocomplete、autofocus、required （6）history API：go、forward、back、pushstate</p>\n<p><strong>移除的元素有：</strong></p>\n<ul>\n<li>纯表现的元素：basefont，big，center，font, s，strike，tt，u;</li>\n<li>对可用性产生负面影响的元素：frame，frameset，noframes；</li>\n</ul>\n<h3 id=\"7-img的srcset属性的作⽤？\"><a href=\"#7-img的srcset属性的作⽤？\" class=\"headerlink\" title=\"7. img的srcset属性的作⽤？\"></a>7. img的srcset属性的作⽤？</h3><p>响应式页面中经常用到根据屏幕密度设置不同的图片。这时就用到了 img 标签的srcset属性。srcset属性用于设置不同屏幕密度下，img 会自动加载不同的图片。用法如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;image-128.png&quot;</span> <span class=\"attr\">srcset</span>=<span class=\"string\">&quot;image-256.png 2x&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用上面的代码，就能实现在屏幕密度为1x的情况下加载image-128.png, 屏幕密度为2x时加载image-256.png。</p>\n<p>按照上面的实现，不同的屏幕密度都要设置图片地址，目前的屏幕密度有1x,2x,3x,4x四种，如果每一个图片都设置4张图片，加载就会很慢。所以就有了新的srcset标准。代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;image-128.png&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">srcset</span>=<span class=\"string\">&quot;image-128.png 128w, image-256.png 256w, image-512.png 512w&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">sizes</span>=<span class=\"string\">&quot;(max-width: 360px) 340px, 128px&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中srcset指定图片的地址和对应的图片质量。sizes用来设置图片的尺寸零界点。对于 srcset 中的 w 单位，可以理解成图片质量。如果可视区域小于这个质量的值，就可以使用。浏览器会自动选择一个最小的可用图片。</p>\n<p>sizes语法如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sizes=&quot;[media query] [length], [media query] [length] ... &quot;</span><br></pre></td></tr></table></figure>\n\n<p>sizes就是指默认显示128px, 如果视区宽度大于360px, 则显示340px。</p>\n<h3 id=\"8-行内元素有哪些？块级元素有哪些？-空-void-元素有那些？\"><a href=\"#8-行内元素有哪些？块级元素有哪些？-空-void-元素有那些？\" class=\"headerlink\" title=\"8.  行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\"></a>8.  行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</h3><ul>\n<li>行内元素有：<code>a b span img input select strong</code>；</li>\n<li>块级元素有：<code>div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p</code>；</li>\n</ul>\n<p>空元素，即没有内容的HTML元素。空元素是在开始标签中关闭的，也就是空元素没有闭合标签：</p>\n<ul>\n<li>常见的有：<code>&lt;br&gt;</code>、<code>&lt;hr&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;meta&gt;</code>；</li>\n<li>鲜见的有：<code>&lt;area&gt;</code>、<code>&lt;base&gt;</code>、<code>&lt;col&gt;</code>、<code>&lt;colgroup&gt;</code>、<code>&lt;command&gt;</code>、<code>&lt;embed&gt;</code>、<code>&lt;keygen&gt;</code>、<code>&lt;param&gt;</code>、<code>&lt;source&gt;</code>、<code>&lt;track&gt;</code>、<code>&lt;wbr&gt;</code>。</li>\n</ul>\n<h3 id=\"9-说一下-web-worker\"><a href=\"#9-说一下-web-worker\" class=\"headerlink\" title=\"9. 说一下 web worker\"></a>9. 说一下 web worker</h3><p>在 HTML 页面中，如果在执行脚本时，页面的状态是不可相应的，直到脚本执行完成后，页面才变成可相应。web worker 是运行在后台的 js，独立于其他脚本，不会影响页面的性能。 并且通过 postMessage 将结果回传到主线程。这样在进行复杂操作的时候，就不会阻塞主线程了。</p>\n<p>如何创建 web worker：</p>\n<ol>\n<li>检测浏览器对于 web worker 的支持性</li>\n<li>创建 web worker 文件（js，回传函数等）</li>\n<li>创建 web worker 对象</li>\n</ol>\n<h3 id=\"10-HTML5的离线储存怎么使用，它的工作原理是什么\"><a href=\"#10-HTML5的离线储存怎么使用，它的工作原理是什么\" class=\"headerlink\" title=\"10. HTML5的离线储存怎么使用，它的工作原理是什么\"></a>10. HTML5的离线储存怎么使用，它的工作原理是什么</h3><p>离线存储指的是：在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。</p>\n<p><strong>原理：</strong>HTML5的离线存储是基于一个新建的 <code>.appcache</code> 文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示</p>\n<p><strong>使用方法：</strong> （1）创建一个和 html 同名的 manifest 文件，然后在页面头部加入 manifest 属性：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">manifest</span>=<span class=\"string\">&quot;index.manifest&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（2）在 <code>cache.manifest</code> 文件中编写需要离线存储的资源：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHE MANIFEST</span><br><span class=\"line\">    #v0.11</span><br><span class=\"line\">    CACHE:</span><br><span class=\"line\">    js/app.js</span><br><span class=\"line\">    css/style.css</span><br><span class=\"line\">    NETWORK:</span><br><span class=\"line\">    resourse/logo.png</span><br><span class=\"line\">    FALLBACK:</span><br><span class=\"line\">    / /offline.html</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>CACHE</strong>: 表示需要离线存储的资源列表，由于包含 manifest 文件的页面将被自动离线存储，所以不需要把页面自身也列出来。</li>\n<li><strong>NETWORK</strong>: 表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些资源。不过，如果在 CACHE 和 NETWORK 中有一个相同的资源，那么这个资源还是会被离线存储，也就是说 CACHE 的优先级更高。</li>\n<li><strong>FALLBACK</strong>: 表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问 offline.html 。</li>\n</ul>\n<p>（3）在离线状态时，操作 <code>window.applicationCache</code> 进行离线缓存的操作。</p>\n<p><strong>如何更新缓存：</strong></p>\n<p>（1）更新 manifest 文件</p>\n<p>（2）通过 javascript 操作</p>\n<p>（3）清除浏览器缓存</p>\n<p><strong>注意事项：</strong></p>\n<p>（1）浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。</p>\n<p>（2）如果 manifest 文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存。</p>\n<p>（3）引用 manifest 的 html 必须与 manifest 文件同源，在同一个域下。</p>\n<p>（4）FALLBACK 中的资源必须和 manifest 文件同源。</p>\n<p>（5）当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。</p>\n<p>（6）站点中的其他页面即使没有设置 manifest 属性，请求的资源如果在缓存中也从缓存中访问。</p>\n<p>（7）当 manifest 文件发生改变时，资源请求本身也会触发更新。</p>\n<h3 id=\"11-浏览器是如何对-HTML5-的离线储存资源进行管理和加载？\"><a href=\"#11-浏览器是如何对-HTML5-的离线储存资源进行管理和加载？\" class=\"headerlink\" title=\"11. 浏览器是如何对 HTML5 的离线储存资源进行管理和加载？\"></a>11. 浏览器是如何对 HTML5 的离线储存资源进行管理和加载？</h3><ul>\n<li><strong>在线的情况下</strong>，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件，如果是第一次访问页面 ，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。如果已经访问过页面并且资源已经进行离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，就会重新下载文件中的资源并进行离线存储。</li>\n<li><strong>离线的情况下</strong>，浏览器会直接使用离线存储的资源。</li>\n</ul>\n<h3 id=\"12-title与h1的区别、b与strong的区别、i与em的区别？\"><a href=\"#12-title与h1的区别、b与strong的区别、i与em的区别？\" class=\"headerlink\" title=\"12. title与h1的区别、b与strong的区别、i与em的区别？\"></a>12. title与h1的区别、b与strong的区别、i与em的区别？</h3><ul>\n<li>strong标签有语义，是起到加重语气的效果，而b标签是没有的，b标签只是一个简单加粗标签。b标签之间的字符都设为粗体，strong标签加强字符的语气都是通过粗体来实现的，而搜索引擎更侧重strong标签。</li>\n<li>title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取有很大的影响</li>\n<li><strong>i内容展示为斜体，em表示强调的文本</strong></li>\n</ul>\n<h3 id=\"13-iframe-有那些优点和缺点？\"><a href=\"#13-iframe-有那些优点和缺点？\" class=\"headerlink\" title=\"13. iframe 有那些优点和缺点？\"></a>13. <strong>iframe 有那些优点和缺点？</strong></h3><p>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>用来加载速度较慢的内容（如广告）</li>\n<li>可以使脚本可以并行下载</li>\n<li>可以实现跨子域通信</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>iframe 会阻塞主页面的 onload 事件</li>\n<li>无法被一些搜索引擎索识别</li>\n<li>会产生很多页面，不容易管理</li>\n</ul>\n<h3 id=\"14-label-的作用是什么？如何使用？\"><a href=\"#14-label-的作用是什么？如何使用？\" class=\"headerlink\" title=\"14. label 的作用是什么？如何使用？\"></a>14. label 的作用是什么？如何使用？</h3><p>label标签来定义表单控件的关系：当用户选择label标签时，浏览器会自动将焦点转到和label标签相关的表单控件上。</p>\n<ul>\n<li>使用方法1：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;mobile&quot;</span>&gt;</span>Number:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;mobile&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用方法2：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Date:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-Canvas和SVG的区别\"><a href=\"#15-Canvas和SVG的区别\" class=\"headerlink\" title=\"15. Canvas和SVG的区别\"></a>15. Canvas和SVG的区别</h3><p><strong>（1）SVG：</strong> SVG可缩放矢量图形（Scalable Vector Graphics）是基于可扩展标记语言XML描述的2D图形的语言，SVG基于XML就意味着SVG DOM中的每个元素都是可用的，可以为某个元素附加Javascript事件处理器。在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。</p>\n<p>其特点如下：</p>\n<ul>\n<li>不依赖分辨率</li>\n<li>支持事件处理器</li>\n<li>最适合带有大型渲染区域的应用程序（比如谷歌地图）</li>\n<li>复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）</li>\n<li>不适合游戏应用</li>\n</ul>\n<p><strong>（2）Canvas：</strong> Canvas是画布，通过Javascript来绘制2D图形，是逐像素进行渲染的。其位置发生改变，就会重新进行绘制。</p>\n<p>其特点如下：</p>\n<ul>\n<li>依赖分辨率</li>\n<li>不支持事件处理器</li>\n<li>弱的文本渲染能力</li>\n<li>能够以 .png 或 .jpg 格式保存结果图像</li>\n<li>最适合图像密集型的游戏，其中的许多对象会被频繁重绘</li>\n</ul>\n<p>注：矢量图，也称为面向对象的图像或绘图图像，在数学上定义为一系列由线连接的点。矢量文件中的图形元素称为对象。每个对象都是一个自成一体的实体，它具有颜色、形状、轮廓、大小和屏幕位置等属性。</p>\n<h3 id=\"16-head-标签有什么作用，其中什么标签必不可少？\"><a href=\"#16-head-标签有什么作用，其中什么标签必不可少？\" class=\"headerlink\" title=\"16. head 标签有什么作用，其中什么标签必不可少？\"></a>16. head 标签有什么作用，其中什么标签必不可少？</h3><p> 标签用于定义文档的头部，它是所有头部元素的容器。 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等。</p>\n<p>文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。</p>\n<p>下面这些标签可用在 head 部分：<code>&lt;base&gt;, &lt;link&gt;, &lt;meta&gt;, &lt;script&gt;, &lt;style&gt;, &lt;title&gt;</code>。</p>\n<p>其中 <code>&lt;title&gt;</code> 定义文档的标题，它是 head 部分中唯一必需的元素。</p>\n<h3 id=\"17-文档声明（Doctype）和-lt-Doctype-html-gt-有何作用-严格模式与混杂模式如何区分？它们有何意义\"><a href=\"#17-文档声明（Doctype）和-lt-Doctype-html-gt-有何作用-严格模式与混杂模式如何区分？它们有何意义\" class=\"headerlink\" title=\"17. 文档声明（Doctype）和&lt;!Doctype html&gt;有何作用? 严格模式与混杂模式如何区分？它们有何意义?\"></a>17. 文档声明（Doctype）和<code>&lt;!Doctype html&gt;</code>有何作用? 严格模式与混杂模式如何区分？它们有何意义?</h3><p><strong>文档声明的作用：</strong> 文档声明是为了告诉浏览器，当前<code>HTML</code>文档使用什么版本的<code>HTML</code>来写的，这样浏览器才能按照声明的版本来正确的解析。</p>\n<p><strong>的作用：</strong><code>&lt;!doctype html&gt;</code> 的作用就是让浏览器进入标准模式，使用最新的 <code>HTML5</code> 标准来解析渲染页面；如果不写，浏览器就会进入混杂模式，我们需要避免此类情况发生。</p>\n<p><strong>严格模式与混杂模式的区分：</strong></p>\n<ul>\n<li><strong>严格模式</strong>： 又称为标准模式，指浏览器按照<code>W3C</code>标准解析代码；</li>\n<li><strong>混杂模式</strong>： 又称怪异模式、兼容模式，是指浏览器用自己的方式解析代码。混杂模式通常模拟老式浏览器的行为，以防止老站点无法工作；</li>\n</ul>\n<p><strong>区分</strong>：网页中的<code>DTD</code>，直接影响到使用的是严格模式还是浏览模式，可以说<code>DTD</code>的使用与这两种方式的区别息息相关。</p>\n<ul>\n<li>如果文档包含严格的<code>DOCTYPE</code> ，那么它一般以严格模式呈现（<strong>严格 DTD ——严格模式</strong>）；</li>\n<li>包含过渡 <code>DTD</code> 和 <code>URI</code> 的 <code>DOCTYPE</code> ，也以严格模式呈现，但有过渡 <code>DTD</code> 而没有 <code>URI</code> （统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现（<strong>有 URI 的过渡 DTD ——严格模式；没有 URI 的过渡 DTD ——混杂模式</strong>）；</li>\n<li><code>DOCTYPE</code> 不存在或形式不正确会导致文档以混杂模式呈现（<strong>DTD不存在或者格式不正确——混杂模式</strong>）；</li>\n<li><code>HTML5</code> 没有 <code>DTD</code> ，因此也就没有严格模式与混杂模式的区别，<code>HTML5</code> 有相对宽松的 法，实现时，已经尽可能大的实现了向后兼容(<strong>HTML5 没有严格和混杂之分</strong>)。</li>\n</ul>\n<p>总之，<strong>严格模式让各个浏览器统一执行一套规范兼容模式保证了旧网站的正常运行。</strong></p>\n<h3 id=\"18-浏览器乱码的原因是什么？如何解决？\"><a href=\"#18-浏览器乱码的原因是什么？如何解决？\" class=\"headerlink\" title=\"18. 浏览器乱码的原因是什么？如何解决？\"></a>18. 浏览器乱码的原因是什么？如何解决？</h3><p><strong>产生乱码的原因：</strong></p>\n<ul>\n<li>网页源代码是<code>gbk</code>的编码，而内容中的中文字是<code>utf-8</code>编码的，这样浏览器打开即会出现<code>html</code>乱码，反之也会出现乱码；</li>\n<li><code>html</code>网页编码是<code>gbk</code>，而程序从数据库中调出呈现是<code>utf-8</code>编码的内容也会造成编码乱码；</li>\n<li>浏览器不能自动检测网页编码，造成网页乱码。</li>\n</ul>\n<p><strong>解决办法：</strong></p>\n<ul>\n<li>使用软件编辑HTML网页内容；</li>\n<li>如果网页设置编码是<code>gbk</code>，而数据库储存数据编码格式是<code>UTF-8</code>，此时需要程序查询数据库数据显示数据前进程序转码；</li>\n<li>如果浏览器浏览时候出现网页乱码，在浏览器中找到转换编码的菜单进行转换。</li>\n</ul>\n<h3 id=\"19-渐进增强和优雅降级之间的区别\"><a href=\"#19-渐进增强和优雅降级之间的区别\" class=\"headerlink\" title=\"19. 渐进增强和优雅降级之间的区别\"></a>19. 渐进增强和优雅降级之间的区别</h3><p><strong>（1）渐进增强（progressive enhancement）</strong>：主要是针对低版本的浏览器进行页面重构，保证基本的功能情况下，再针对高级浏览器进行效果、交互等方面的改进和追加功能，以达到更好的用户体验。 <strong>（2）优雅降级 graceful degradation</strong>： 一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容。</p>\n<p><strong>两者区别：</strong></p>\n<ul>\n<li>优雅降级是从复杂的现状开始的，并试图减少用户体验的供给；而渐进增强是从一个非常基础的，能够起作用的版本开始的，并在此基础上不断扩充，以适应未来环境的需要；</li>\n<li>降级（功能衰竭）意味着往回看，而渐进增强则意味着往前看，同时保证其根基处于安全地带。</li>\n</ul>\n<p>“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。 在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p>\n<p>“渐进增强”观点则认为应关注于内容本身。内容是建立网站的诱因，有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。</p>\n<h3 id=\"20-说一下-HTML5-drag-API\"><a href=\"#20-说一下-HTML5-drag-API\" class=\"headerlink\" title=\"20. 说一下 HTML5 drag API\"></a>20. 说一下 HTML5 drag API</h3><ul>\n<li>dragstart：事件主体是被拖放元素，在开始拖放被拖放元素时触发。</li>\n<li>darg：事件主体是被拖放元素，在正在拖放被拖放元素时触发。</li>\n<li>dragenter：事件主体是目标元素，在被拖放元素进入某元素时触发。</li>\n<li>dragover：事件主体是目标元素，在被拖放在某元素内移动时触发。</li>\n<li>dragleave：事件主体是目标元素，在被拖放元素移出目标元素是触发。</li>\n<li>drop：事件主体是目标元素，在目标元素完全接受被拖放元素时触发。</li>\n<li>dragend：事件主体是被拖放元素，在整个拖放操作结束时触发。</li>\n</ul>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"excerpt":"<p>HTML复习 </p>","more":"<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230608143228021.png\" alt=\"image-20230608143228021\"></p>\n<h3 id=\"1-src和href的区别\"><a href=\"#1-src和href的区别\" class=\"headerlink\" title=\"1. src和href的区别\"></a>1. src和href的区别</h3><p>src和href都是<strong>用来引用外部的资源</strong>，它们的区别如下：</p>\n<ul>\n<li><strong>src：</strong> 表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。src会将其指向的资源下载并应⽤到⽂档内，如请求js脚本。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，所以⼀般js脚本会放在页面底部。</li>\n<li><strong>href：</strong> 表示超文本引用，它指向一些网络资源，建立和当前元素或本文档的链接关系。当浏览器识别到它他指向的⽂件时，就会并⾏下载资源，不会停⽌对当前⽂档的处理。 常用在a、link等标签上。</li>\n</ul>\n<h3 id=\"2-对HTML语义化的理解\"><a href=\"#2-对HTML语义化的理解\" class=\"headerlink\" title=\"2. 对HTML语义化的理解\"></a>2. 对HTML语义化的理解</h3><p><strong>语义化是指根据内容的结构化（内容语义化），选择合适的标签（代码语义化）</strong>。通俗来讲就是用正确的标签做正确的事情。</p>\n<p>语义化的优点如下：</p>\n<ul>\n<li>对机器友好，带有语义的文字表现力丰富，更适合搜索引擎的爬虫爬取有效信息，有利于SEO。除此之外，语义类还支持读屏软件，根据文章可以自动生成目录；</li>\n<li>对开发者友好，使用语义类标签增强了可读性，结构更加清晰，开发者能清晰的看出网页的结构，便于团队的开发与维护。</li>\n</ul>\n<p>常见的语义化标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span>  头部</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span>  导航栏</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span>  区块（有语义化的div）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span>  主要区域</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span>  主要内容</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aside</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span>  侧边栏</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span>  底部</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-DOCTYPE-⽂档类型-的作⽤\"><a href=\"#3-DOCTYPE-⽂档类型-的作⽤\" class=\"headerlink\" title=\"3. DOCTYPE(⽂档类型) 的作⽤\"></a>3. DOCTYPE(⽂档类型) 的作⽤</h3><p>DOCTYPE是HTML5中一种标准通用标记语言的文档类型声明，它的目的是<strong>告诉浏览器（解析器）应该以什么样（html或xhtml）的文档类型定义来解析文档</strong>，不同的渲染模式会影响浏览器对 CSS 代码甚⾄ JavaScript 脚本的解析。它必须声明在HTML⽂档的第⼀⾏。</p>\n<p>浏览器渲染页面的两种模式（可通过document.compatMode获取，比如，语雀官网的文档类型是<strong>CSS1Compat</strong>）：</p>\n<ul>\n<li><strong>CSS1Compat：标准模式（Strick mode）</strong>，默认模式，浏览器使用W3C的标准解析渲染页面。在标准模式中，浏览器以其支持的最高标准呈现页面。</li>\n<li>**BackCompat：怪异模式(混杂模式)(Quick mode)**，浏览器使用自己的怪异模式解析渲染页面。在怪异模式中，页面以一种比较宽松的向后兼容的方式显示。</li>\n</ul>\n<h3 id=\"4-script标签中defer和async的区别\"><a href=\"#4-script标签中defer和async的区别\" class=\"headerlink\" title=\"4. script标签中defer和async的区别\"></a>4. script标签中defer和async的区别</h3><p>如果没有defer或async属性，浏览器会立即加载并执行相应的脚本。它不会等待后续加载的文档元素，读取到就会开始加载和执行，这样就阻塞了后续文档的加载。</p>\n<p>下图可以直观的看出三者之间的区别: <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0a8a139519f46dfa2d1992c58eb5397~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"image.png\"> 其中蓝色代表js脚本网络加载时间，红色代表js脚本执行时间，绿色代表html解析。</p>\n<p><strong>defer 和 async属性都是去异步加载外部的JS脚本文件，它们都不会阻塞页面的解析</strong>，其区别如下：</p>\n<ul>\n<li><strong>执行顺序：</strong> 多个带async属性的标签，不能保证加载的顺序；多个带defer属性的标签，按照加载顺序执行；</li>\n<li>**脚本是否并行执行：**async属性，表示**后续文档的加载和执行与js脚本的加载和执行是并行进行的**，即异步执行；defer属性，加载后续文档的过程和js脚本的加载(此时仅加载不执行)是并行进行的(异步)，js脚本需要等到文档所有元素解析完成之后才执行，DOMContentLoaded事件触发执行之前。</li>\n</ul>\n<h3 id=\"5-常⽤的meta标签有哪些\"><a href=\"#5-常⽤的meta标签有哪些\" class=\"headerlink\" title=\"5. 常⽤的meta标签有哪些\"></a>5. 常⽤的meta标签有哪些</h3><p><code>meta</code> 标签由 <code>name</code> 和 <code>content</code> 属性定义，<strong>用来描述网页文档的属性</strong>，比如网页的作者，网页描述，关键词等，除了HTTP标准固定了一些<code>name</code>作为大家使用的共识，开发者还可以自定义name。</p>\n<p>常用的meta标签： （1）<code>charset</code>，用来描述HTML文档的编码类型：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>（2） <code>keywords</code>，页面关键词：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;keywords&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;关键词&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>（3）<code>description</code>，页面描述：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;页面描述内容&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>（4）<code>refresh</code>，页面重定向和刷新：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;refresh&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;0;url=&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>（5）<code>viewport</code>，适配移动端，可以控制视口的大小和比例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>content</code> 参数有以下几种：</p>\n<ul>\n<li><code>width viewport</code> ：宽度(数值/device-width)</li>\n<li><code>height viewport</code> ：高度(数值/device-height)</li>\n<li><code>initial-scale</code> ：初始缩放比例</li>\n<li><code>maximum-scale</code> ：最大缩放比例</li>\n<li><code>minimum-scale</code> ：最小缩放比例</li>\n<li><code>user-scalable</code> ：是否允许用户缩放(yes/no）</li>\n</ul>\n<p>（6）搜索引擎索引方式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;robots&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;index,follow&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>content</code> 参数有以下几种：</p>\n<ul>\n<li><code>all</code>：文件将被检索，且页面上的链接可以被查询；</li>\n<li><code>none</code>：文件将不被检索，且页面上的链接不可以被查询；</li>\n<li><code>index</code>：文件将被检索；</li>\n<li><code>follow</code>：页面上的链接可以被查询；</li>\n<li><code>noindex</code>：文件将不被检索；</li>\n<li><code>nofollow</code>：页面上的链接不可以被查询。</li>\n</ul>\n<h3 id=\"6-HTML5有哪些更新\"><a href=\"#6-HTML5有哪些更新\" class=\"headerlink\" title=\"6. HTML5有哪些更新\"></a>6. HTML5有哪些更新</h3><h4 id=\"1-语义化标签\"><a href=\"#1-语义化标签\" class=\"headerlink\" title=\"1. 语义化标签\"></a>1. 语义化标签</h4><ul>\n<li>header：定义文档的页眉（头部）；</li>\n<li>nav：定义导航链接的部分；</li>\n<li>footer：定义文档或节的页脚（底部）；</li>\n<li>article：定义文章内容；</li>\n<li>section：定义文档中的节（section、区段）；</li>\n<li>aside：定义其所处内容之外的内容（侧边）；</li>\n</ul>\n<h4 id=\"2-媒体标签\"><a href=\"#2-媒体标签\" class=\"headerlink\" title=\"2. 媒体标签\"></a>2. 媒体标签</h4><p>（1） audio：音频</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;&#x27;</span> <span class=\"attr\">controls</span> <span class=\"attr\">autoplay</span> <span class=\"attr\">loop</span>=<span class=\"string\">&#x27;true&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>属性：</p>\n<ul>\n<li>controls 控制面板</li>\n<li>autoplay 自动播放</li>\n<li>loop=‘true’ 循环播放</li>\n</ul>\n<p>（2）video视频</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;&#x27;</span> <span class=\"attr\">poster</span>=<span class=\"string\">&#x27;imgs/aa.jpg&#x27;</span> <span class=\"attr\">controls</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>属性：</p>\n<ul>\n<li>poster：指定视频还没有完全下载完毕，或者用户还没有点击播放前显示的封面。默认显示当前视频文件的第一针画面，当然通过poster也可以自己指定。</li>\n<li>controls 控制面板</li>\n<li>width</li>\n<li>height</li>\n</ul>\n<p>（3）source标签 因为浏览器对视频格式支持程度不一样，为了能够兼容不同的浏览器，可以通过source来指定视频源。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"> \t<span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;aa.flv&#x27;</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;video/flv&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\"> \t<span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;aa.mp4&#x27;</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;video/mp4&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-表单\"><a href=\"#3-表单\" class=\"headerlink\" title=\"3. 表单\"></a>3. 表单</h4><p><strong>表单类型：</strong></p>\n<ul>\n<li>email ：能够验证当前输入的邮箱地址是否合法</li>\n<li>url ： 验证URL</li>\n<li>number ： 只能输入数字，其他输入不了，而且自带上下增大减小箭头，max属性可以设置为最大值，min可以设置为最小值，value为默认值。</li>\n<li>search ： 输入框后面会给提供一个小叉，可以删除输入的内容，更加人性化。</li>\n<li>range ： 可以提供给一个范围，其中可以设置max和min以及value，其中value属性可以设置为默认值</li>\n<li>color ： 提供了一个颜色拾取器</li>\n<li>time ： 时分秒</li>\n<li>data ： 日期选择年月日</li>\n<li>datatime ： 时间和日期(目前只有Safari支持)</li>\n<li>datatime-local ：日期时间控件</li>\n<li>week ：周控件</li>\n<li>month：月控件</li>\n</ul>\n<p><strong>表单属性：</strong></p>\n<ul>\n<li>placeholder ：提示信息</li>\n<li>autofocus ：自动获取焦点</li>\n<li>autocomplete=“on” 或者 autocomplete=“off” 使用这个属性需要有两个前提：<ul>\n<li>表单必须提交过</li>\n<li>必须有name属性。</li>\n</ul>\n</li>\n<li>required：要求输入框不能为空，必须有值才能够提交。</li>\n<li>pattern=” “ 里面写入想要的正则模式，例如手机号patte=”^(+86)?\\d{10}$”</li>\n<li>multiple：可以选择多个文件或者多个邮箱</li>\n<li>form=” form表单的ID”</li>\n</ul>\n<p><strong>表单事件：</strong></p>\n<ul>\n<li>oninput 每当input里的输入框内容发生变化都会触发此事件。</li>\n<li>oninvalid 当验证不通过时触发此事件。</li>\n</ul>\n<h4 id=\"4-进度条、度量器\"><a href=\"#4-进度条、度量器\" class=\"headerlink\" title=\"4. 进度条、度量器\"></a>4. 进度条、度量器</h4><ul>\n<li>progress标签：用来表示任务的进度（IE、Safari不支持），max用来表示任务的进度，value表示已完成多少</li>\n<li>meter属性：用来显示剩余容量或剩余库存（IE、Safari不支持）<ul>\n<li>high/low：规定被视作高/低的范围</li>\n<li>max/min：规定最大/小值</li>\n<li>value：规定当前度量值</li>\n</ul>\n</li>\n</ul>\n<p>设置规则：min &lt; low &lt; high &lt; max</p>\n<h4 id=\"5-DOM查询操作\"><a href=\"#5-DOM查询操作\" class=\"headerlink\" title=\"5.DOM查询操作\"></a>5.DOM查询操作</h4><ul>\n<li>document.querySelector()</li>\n<li>document.querySelectorAll()</li>\n</ul>\n<p>它们选择的对象可以是标签，可以是类(需要加点)，可以是ID(需要加#)</p>\n<h4 id=\"6-Web存储\"><a href=\"#6-Web存储\" class=\"headerlink\" title=\"6. Web存储\"></a>6. Web存储</h4><p>HTML5 提供了两种在客户端存储数据的新方法：</p>\n<ul>\n<li>localStorage - 没有时间限制的数据存储</li>\n<li>sessionStorage - 针对一个 session 的数据存储</li>\n</ul>\n<h4 id=\"7-其他\"><a href=\"#7-其他\" class=\"headerlink\" title=\"7. 其他\"></a>7. 其他</h4><ul>\n<li>拖放：拖放是一种常见的特性，即抓取对象以后拖到另一个位置。设置元素可拖放：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">draggable</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>画布（canvas ）： canvas 元素使用 JavaScript 在网页上绘制图像。画布是一个矩形区域，可以控制其每一像素。canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myCanvas&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;200&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>SVG：SVG 指可伸缩矢量图形，用于定义用于网络的基于矢量的图形，使用 XML 格式定义图形，图像在放大或改变尺寸的情况下其图形质量不会有损失，它是万维网联盟的标准</li>\n<li>地理定位：Geolocation（地理定位）用于定位用户的位置。‘</li>\n</ul>\n<p><strong>总结：</strong> （1）新增语义化标签：nav、header、footer、aside、section、article （2）音频、视频标签：audio、video （3）数据存储：localStorage、sessionStorage （4）canvas（画布）、Geolocation（地理定位）、websocket（通信协议） （5）input标签新增属性：placeholder、autocomplete、autofocus、required （6）history API：go、forward、back、pushstate</p>\n<p><strong>移除的元素有：</strong></p>\n<ul>\n<li>纯表现的元素：basefont，big，center，font, s，strike，tt，u;</li>\n<li>对可用性产生负面影响的元素：frame，frameset，noframes；</li>\n</ul>\n<h3 id=\"7-img的srcset属性的作⽤？\"><a href=\"#7-img的srcset属性的作⽤？\" class=\"headerlink\" title=\"7. img的srcset属性的作⽤？\"></a>7. img的srcset属性的作⽤？</h3><p>响应式页面中经常用到根据屏幕密度设置不同的图片。这时就用到了 img 标签的srcset属性。srcset属性用于设置不同屏幕密度下，img 会自动加载不同的图片。用法如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;image-128.png&quot;</span> <span class=\"attr\">srcset</span>=<span class=\"string\">&quot;image-256.png 2x&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用上面的代码，就能实现在屏幕密度为1x的情况下加载image-128.png, 屏幕密度为2x时加载image-256.png。</p>\n<p>按照上面的实现，不同的屏幕密度都要设置图片地址，目前的屏幕密度有1x,2x,3x,4x四种，如果每一个图片都设置4张图片，加载就会很慢。所以就有了新的srcset标准。代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;image-128.png&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">srcset</span>=<span class=\"string\">&quot;image-128.png 128w, image-256.png 256w, image-512.png 512w&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">sizes</span>=<span class=\"string\">&quot;(max-width: 360px) 340px, 128px&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中srcset指定图片的地址和对应的图片质量。sizes用来设置图片的尺寸零界点。对于 srcset 中的 w 单位，可以理解成图片质量。如果可视区域小于这个质量的值，就可以使用。浏览器会自动选择一个最小的可用图片。</p>\n<p>sizes语法如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sizes=&quot;[media query] [length], [media query] [length] ... &quot;</span><br></pre></td></tr></table></figure>\n\n<p>sizes就是指默认显示128px, 如果视区宽度大于360px, 则显示340px。</p>\n<h3 id=\"8-行内元素有哪些？块级元素有哪些？-空-void-元素有那些？\"><a href=\"#8-行内元素有哪些？块级元素有哪些？-空-void-元素有那些？\" class=\"headerlink\" title=\"8.  行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？\"></a>8.  行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</h3><ul>\n<li>行内元素有：<code>a b span img input select strong</code>；</li>\n<li>块级元素有：<code>div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p</code>；</li>\n</ul>\n<p>空元素，即没有内容的HTML元素。空元素是在开始标签中关闭的，也就是空元素没有闭合标签：</p>\n<ul>\n<li>常见的有：<code>&lt;br&gt;</code>、<code>&lt;hr&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;meta&gt;</code>；</li>\n<li>鲜见的有：<code>&lt;area&gt;</code>、<code>&lt;base&gt;</code>、<code>&lt;col&gt;</code>、<code>&lt;colgroup&gt;</code>、<code>&lt;command&gt;</code>、<code>&lt;embed&gt;</code>、<code>&lt;keygen&gt;</code>、<code>&lt;param&gt;</code>、<code>&lt;source&gt;</code>、<code>&lt;track&gt;</code>、<code>&lt;wbr&gt;</code>。</li>\n</ul>\n<h3 id=\"9-说一下-web-worker\"><a href=\"#9-说一下-web-worker\" class=\"headerlink\" title=\"9. 说一下 web worker\"></a>9. 说一下 web worker</h3><p>在 HTML 页面中，如果在执行脚本时，页面的状态是不可相应的，直到脚本执行完成后，页面才变成可相应。web worker 是运行在后台的 js，独立于其他脚本，不会影响页面的性能。 并且通过 postMessage 将结果回传到主线程。这样在进行复杂操作的时候，就不会阻塞主线程了。</p>\n<p>如何创建 web worker：</p>\n<ol>\n<li>检测浏览器对于 web worker 的支持性</li>\n<li>创建 web worker 文件（js，回传函数等）</li>\n<li>创建 web worker 对象</li>\n</ol>\n<h3 id=\"10-HTML5的离线储存怎么使用，它的工作原理是什么\"><a href=\"#10-HTML5的离线储存怎么使用，它的工作原理是什么\" class=\"headerlink\" title=\"10. HTML5的离线储存怎么使用，它的工作原理是什么\"></a>10. HTML5的离线储存怎么使用，它的工作原理是什么</h3><p>离线存储指的是：在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。</p>\n<p><strong>原理：</strong>HTML5的离线存储是基于一个新建的 <code>.appcache</code> 文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示</p>\n<p><strong>使用方法：</strong> （1）创建一个和 html 同名的 manifest 文件，然后在页面头部加入 manifest 属性：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">manifest</span>=<span class=\"string\">&quot;index.manifest&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（2）在 <code>cache.manifest</code> 文件中编写需要离线存储的资源：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHE MANIFEST</span><br><span class=\"line\">    #v0.11</span><br><span class=\"line\">    CACHE:</span><br><span class=\"line\">    js/app.js</span><br><span class=\"line\">    css/style.css</span><br><span class=\"line\">    NETWORK:</span><br><span class=\"line\">    resourse/logo.png</span><br><span class=\"line\">    FALLBACK:</span><br><span class=\"line\">    / /offline.html</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>CACHE</strong>: 表示需要离线存储的资源列表，由于包含 manifest 文件的页面将被自动离线存储，所以不需要把页面自身也列出来。</li>\n<li><strong>NETWORK</strong>: 表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些资源。不过，如果在 CACHE 和 NETWORK 中有一个相同的资源，那么这个资源还是会被离线存储，也就是说 CACHE 的优先级更高。</li>\n<li><strong>FALLBACK</strong>: 表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问 offline.html 。</li>\n</ul>\n<p>（3）在离线状态时，操作 <code>window.applicationCache</code> 进行离线缓存的操作。</p>\n<p><strong>如何更新缓存：</strong></p>\n<p>（1）更新 manifest 文件</p>\n<p>（2）通过 javascript 操作</p>\n<p>（3）清除浏览器缓存</p>\n<p><strong>注意事项：</strong></p>\n<p>（1）浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。</p>\n<p>（2）如果 manifest 文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存。</p>\n<p>（3）引用 manifest 的 html 必须与 manifest 文件同源，在同一个域下。</p>\n<p>（4）FALLBACK 中的资源必须和 manifest 文件同源。</p>\n<p>（5）当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。</p>\n<p>（6）站点中的其他页面即使没有设置 manifest 属性，请求的资源如果在缓存中也从缓存中访问。</p>\n<p>（7）当 manifest 文件发生改变时，资源请求本身也会触发更新。</p>\n<h3 id=\"11-浏览器是如何对-HTML5-的离线储存资源进行管理和加载？\"><a href=\"#11-浏览器是如何对-HTML5-的离线储存资源进行管理和加载？\" class=\"headerlink\" title=\"11. 浏览器是如何对 HTML5 的离线储存资源进行管理和加载？\"></a>11. 浏览器是如何对 HTML5 的离线储存资源进行管理和加载？</h3><ul>\n<li><strong>在线的情况下</strong>，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件，如果是第一次访问页面 ，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。如果已经访问过页面并且资源已经进行离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，就会重新下载文件中的资源并进行离线存储。</li>\n<li><strong>离线的情况下</strong>，浏览器会直接使用离线存储的资源。</li>\n</ul>\n<h3 id=\"12-title与h1的区别、b与strong的区别、i与em的区别？\"><a href=\"#12-title与h1的区别、b与strong的区别、i与em的区别？\" class=\"headerlink\" title=\"12. title与h1的区别、b与strong的区别、i与em的区别？\"></a>12. title与h1的区别、b与strong的区别、i与em的区别？</h3><ul>\n<li>strong标签有语义，是起到加重语气的效果，而b标签是没有的，b标签只是一个简单加粗标签。b标签之间的字符都设为粗体，strong标签加强字符的语气都是通过粗体来实现的，而搜索引擎更侧重strong标签。</li>\n<li>title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取有很大的影响</li>\n<li><strong>i内容展示为斜体，em表示强调的文本</strong></li>\n</ul>\n<h3 id=\"13-iframe-有那些优点和缺点？\"><a href=\"#13-iframe-有那些优点和缺点？\" class=\"headerlink\" title=\"13. iframe 有那些优点和缺点？\"></a>13. <strong>iframe 有那些优点和缺点？</strong></h3><p>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>用来加载速度较慢的内容（如广告）</li>\n<li>可以使脚本可以并行下载</li>\n<li>可以实现跨子域通信</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>iframe 会阻塞主页面的 onload 事件</li>\n<li>无法被一些搜索引擎索识别</li>\n<li>会产生很多页面，不容易管理</li>\n</ul>\n<h3 id=\"14-label-的作用是什么？如何使用？\"><a href=\"#14-label-的作用是什么？如何使用？\" class=\"headerlink\" title=\"14. label 的作用是什么？如何使用？\"></a>14. label 的作用是什么？如何使用？</h3><p>label标签来定义表单控件的关系：当用户选择label标签时，浏览器会自动将焦点转到和label标签相关的表单控件上。</p>\n<ul>\n<li>使用方法1：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;mobile&quot;</span>&gt;</span>Number:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;mobile&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用方法2：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Date:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-Canvas和SVG的区别\"><a href=\"#15-Canvas和SVG的区别\" class=\"headerlink\" title=\"15. Canvas和SVG的区别\"></a>15. Canvas和SVG的区别</h3><p><strong>（1）SVG：</strong> SVG可缩放矢量图形（Scalable Vector Graphics）是基于可扩展标记语言XML描述的2D图形的语言，SVG基于XML就意味着SVG DOM中的每个元素都是可用的，可以为某个元素附加Javascript事件处理器。在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。</p>\n<p>其特点如下：</p>\n<ul>\n<li>不依赖分辨率</li>\n<li>支持事件处理器</li>\n<li>最适合带有大型渲染区域的应用程序（比如谷歌地图）</li>\n<li>复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）</li>\n<li>不适合游戏应用</li>\n</ul>\n<p><strong>（2）Canvas：</strong> Canvas是画布，通过Javascript来绘制2D图形，是逐像素进行渲染的。其位置发生改变，就会重新进行绘制。</p>\n<p>其特点如下：</p>\n<ul>\n<li>依赖分辨率</li>\n<li>不支持事件处理器</li>\n<li>弱的文本渲染能力</li>\n<li>能够以 .png 或 .jpg 格式保存结果图像</li>\n<li>最适合图像密集型的游戏，其中的许多对象会被频繁重绘</li>\n</ul>\n<p>注：矢量图，也称为面向对象的图像或绘图图像，在数学上定义为一系列由线连接的点。矢量文件中的图形元素称为对象。每个对象都是一个自成一体的实体，它具有颜色、形状、轮廓、大小和屏幕位置等属性。</p>\n<h3 id=\"16-head-标签有什么作用，其中什么标签必不可少？\"><a href=\"#16-head-标签有什么作用，其中什么标签必不可少？\" class=\"headerlink\" title=\"16. head 标签有什么作用，其中什么标签必不可少？\"></a>16. head 标签有什么作用，其中什么标签必不可少？</h3><p> 标签用于定义文档的头部，它是所有头部元素的容器。 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等。</p>\n<p>文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。</p>\n<p>下面这些标签可用在 head 部分：<code>&lt;base&gt;, &lt;link&gt;, &lt;meta&gt;, &lt;script&gt;, &lt;style&gt;, &lt;title&gt;</code>。</p>\n<p>其中 <code>&lt;title&gt;</code> 定义文档的标题，它是 head 部分中唯一必需的元素。</p>\n<h3 id=\"17-文档声明（Doctype）和-lt-Doctype-html-gt-有何作用-严格模式与混杂模式如何区分？它们有何意义\"><a href=\"#17-文档声明（Doctype）和-lt-Doctype-html-gt-有何作用-严格模式与混杂模式如何区分？它们有何意义\" class=\"headerlink\" title=\"17. 文档声明（Doctype）和&lt;!Doctype html&gt;有何作用? 严格模式与混杂模式如何区分？它们有何意义?\"></a>17. 文档声明（Doctype）和<code>&lt;!Doctype html&gt;</code>有何作用? 严格模式与混杂模式如何区分？它们有何意义?</h3><p><strong>文档声明的作用：</strong> 文档声明是为了告诉浏览器，当前<code>HTML</code>文档使用什么版本的<code>HTML</code>来写的，这样浏览器才能按照声明的版本来正确的解析。</p>\n<p><strong>的作用：</strong><code>&lt;!doctype html&gt;</code> 的作用就是让浏览器进入标准模式，使用最新的 <code>HTML5</code> 标准来解析渲染页面；如果不写，浏览器就会进入混杂模式，我们需要避免此类情况发生。</p>\n<p><strong>严格模式与混杂模式的区分：</strong></p>\n<ul>\n<li><strong>严格模式</strong>： 又称为标准模式，指浏览器按照<code>W3C</code>标准解析代码；</li>\n<li><strong>混杂模式</strong>： 又称怪异模式、兼容模式，是指浏览器用自己的方式解析代码。混杂模式通常模拟老式浏览器的行为，以防止老站点无法工作；</li>\n</ul>\n<p><strong>区分</strong>：网页中的<code>DTD</code>，直接影响到使用的是严格模式还是浏览模式，可以说<code>DTD</code>的使用与这两种方式的区别息息相关。</p>\n<ul>\n<li>如果文档包含严格的<code>DOCTYPE</code> ，那么它一般以严格模式呈现（<strong>严格 DTD ——严格模式</strong>）；</li>\n<li>包含过渡 <code>DTD</code> 和 <code>URI</code> 的 <code>DOCTYPE</code> ，也以严格模式呈现，但有过渡 <code>DTD</code> 而没有 <code>URI</code> （统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现（<strong>有 URI 的过渡 DTD ——严格模式；没有 URI 的过渡 DTD ——混杂模式</strong>）；</li>\n<li><code>DOCTYPE</code> 不存在或形式不正确会导致文档以混杂模式呈现（<strong>DTD不存在或者格式不正确——混杂模式</strong>）；</li>\n<li><code>HTML5</code> 没有 <code>DTD</code> ，因此也就没有严格模式与混杂模式的区别，<code>HTML5</code> 有相对宽松的 法，实现时，已经尽可能大的实现了向后兼容(<strong>HTML5 没有严格和混杂之分</strong>)。</li>\n</ul>\n<p>总之，<strong>严格模式让各个浏览器统一执行一套规范兼容模式保证了旧网站的正常运行。</strong></p>\n<h3 id=\"18-浏览器乱码的原因是什么？如何解决？\"><a href=\"#18-浏览器乱码的原因是什么？如何解决？\" class=\"headerlink\" title=\"18. 浏览器乱码的原因是什么？如何解决？\"></a>18. 浏览器乱码的原因是什么？如何解决？</h3><p><strong>产生乱码的原因：</strong></p>\n<ul>\n<li>网页源代码是<code>gbk</code>的编码，而内容中的中文字是<code>utf-8</code>编码的，这样浏览器打开即会出现<code>html</code>乱码，反之也会出现乱码；</li>\n<li><code>html</code>网页编码是<code>gbk</code>，而程序从数据库中调出呈现是<code>utf-8</code>编码的内容也会造成编码乱码；</li>\n<li>浏览器不能自动检测网页编码，造成网页乱码。</li>\n</ul>\n<p><strong>解决办法：</strong></p>\n<ul>\n<li>使用软件编辑HTML网页内容；</li>\n<li>如果网页设置编码是<code>gbk</code>，而数据库储存数据编码格式是<code>UTF-8</code>，此时需要程序查询数据库数据显示数据前进程序转码；</li>\n<li>如果浏览器浏览时候出现网页乱码，在浏览器中找到转换编码的菜单进行转换。</li>\n</ul>\n<h3 id=\"19-渐进增强和优雅降级之间的区别\"><a href=\"#19-渐进增强和优雅降级之间的区别\" class=\"headerlink\" title=\"19. 渐进增强和优雅降级之间的区别\"></a>19. 渐进增强和优雅降级之间的区别</h3><p><strong>（1）渐进增强（progressive enhancement）</strong>：主要是针对低版本的浏览器进行页面重构，保证基本的功能情况下，再针对高级浏览器进行效果、交互等方面的改进和追加功能，以达到更好的用户体验。 <strong>（2）优雅降级 graceful degradation</strong>： 一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容。</p>\n<p><strong>两者区别：</strong></p>\n<ul>\n<li>优雅降级是从复杂的现状开始的，并试图减少用户体验的供给；而渐进增强是从一个非常基础的，能够起作用的版本开始的，并在此基础上不断扩充，以适应未来环境的需要；</li>\n<li>降级（功能衰竭）意味着往回看，而渐进增强则意味着往前看，同时保证其根基处于安全地带。</li>\n</ul>\n<p>“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。 在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p>\n<p>“渐进增强”观点则认为应关注于内容本身。内容是建立网站的诱因，有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。</p>\n<h3 id=\"20-说一下-HTML5-drag-API\"><a href=\"#20-说一下-HTML5-drag-API\" class=\"headerlink\" title=\"20. 说一下 HTML5 drag API\"></a>20. 说一下 HTML5 drag API</h3><ul>\n<li>dragstart：事件主体是被拖放元素，在开始拖放被拖放元素时触发。</li>\n<li>darg：事件主体是被拖放元素，在正在拖放被拖放元素时触发。</li>\n<li>dragenter：事件主体是目标元素，在被拖放元素进入某元素时触发。</li>\n<li>dragover：事件主体是目标元素，在被拖放在某元素内移动时触发。</li>\n<li>dragleave：事件主体是目标元素，在被拖放元素移出目标元素是触发。</li>\n<li>drop：事件主体是目标元素，在目标元素完全接受被拖放元素时触发。</li>\n<li>dragend：事件主体是被拖放元素，在整个拖放操作结束时触发。</li>\n</ul>"},{"title":"JS复习","keywords":"前端,面试,JS","description":"JS复习记录","top_img":"https://raw.githubusercontent.com/why862555625/images/main/images/444.jpg","sticky":"数值越大越靠前","cover":"https://raw.githubusercontent.com/why862555625/images/main/images/444.jpg","comments":1,"abbrlink":"d9795d86","date":"2023-05-23T07:21:13.000Z","updated":"2023-05-23T07:21:13.000Z","_content":"\nJS复习记录\n\n<!-- more -->\n\n![image-20230610112558784](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112558784.png)\n\n## 一、数据类型\n\n### 1. JavaScript有哪些数据类型，它们的区别？\n\nJavaScript共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。\n\n其中 Symbol 和 BigInt 是ES6 中新增的数据类型：\n\n- Symbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。\n- BigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。\n\n这些数据可以分为原始数据类型和引用数据类型：\n\n- 栈：原始数据类型（Undefined、Null、Boolean、Number、String）\n- 堆：引用数据类型（对象、数组和函数）\n\n两种类型的区别在于**存储位置的不同：**\n\n- 原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；\n- 引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。\n\n堆和栈的概念存在于数据结构和操作系统内存中，在数据结构中：\n\n- 在数据结构中，栈中数据的存取方式为先进后出。\n- 堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。\n\n在操作系统中，内存被分为栈区和堆区：\n\n- 栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。\n- 堆区内存一般由开发着分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。\n\n### 2. 数据类型检测的方式有哪些\n\n**（1）typeof**\n\n```javascript\nconsole.log(typeof 2);               // number\nconsole.log(typeof true);            // boolean\nconsole.log(typeof 'str');           // string\nconsole.log(typeof []);              // object    \nconsole.log(typeof function(){});    // function\nconsole.log(typeof {});              // object\nconsole.log(typeof undefined);       // undefined\nconsole.log(typeof null);            // object\n```\n\n其中数组、对象、null都会被判断为object，其他判断都正确。\n\n**（2）instanceof**\n\n`instanceof`可以正确判断对象的类型，**其内部运行机制是判断在其原型链中能否找到该类型的原型**。\n\n```javascript\nconsole.log(2 instanceof Number);                    // false\nconsole.log(true instanceof Boolean);                // false \nconsole.log('str' instanceof String);                // false \n \nconsole.log([] instanceof Array);                    // true\nconsole.log(function(){} instanceof Function);       // true\nconsole.log({} instanceof Object);                   // true\n```\n\n可以看到，`instanceof`**只能正确判断引用数据类型**，而不能判断基本数据类型。`instanceof` 运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 `prototype` 属性。\n\n**（3） constructor**\n\n```javascript\nconsole.log((2).constructor === Number); // true\nconsole.log((true).constructor === Boolean); // true\nconsole.log(('str').constructor === String); // true\nconsole.log(([]).constructor === Array); // true\nconsole.log((function() {}).constructor === Function); // true\nconsole.log(({}).constructor === Object); // true\n```\n\n`constructor`有两个作用，一是判断数据的类型，二是对象实例通过 `constrcutor` 对象访问它的构造函数。需要注意，如果创建一个对象来改变它的原型，`constructor`就不能用来判断数据类型了：\n\n```javascript\nfunction Fn(){};\n \nFn.prototype = new Array();\n \nvar f = new Fn();\n \nconsole.log(f.constructor===Fn);    // false\nconsole.log(f.constructor===Array); // true\n```\n\n**（4）Object.prototype.toString.call()**\n\n`Object.prototype.toString.call()` 使用 Object 对象的原型方法 toString 来判断数据类型：\n\n```javascript\nvar a = Object.prototype.toString;\n \nconsole.log(a.call(2));\nconsole.log(a.call(true));\nconsole.log(a.call('str'));\nconsole.log(a.call([]));\nconsole.log(a.call(function(){}));\nconsole.log(a.call({}));\nconsole.log(a.call(undefined));\nconsole.log(a.call(null));\n```\n\n同样是检测对象obj调用toString方法，obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样，这是为什么？\n\n这是因为toString是Object的原型方法，而Array、function等**类型作为Object的实例，都重写了toString方法**。不同的对象类型调用toString方法时，根据原型链的知识，调用的是对应的重写之后的toString方法（function类型返回内容为函数体的字符串，Array类型返回元素组成的字符串…），而不会去调用Object上原型toString方法（返回对象的具体类型），所以采用obj.toString()不能得到其对象类型，只能将obj转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用Object原型上的toString方法。\n\n### 3. 判断数组的方式有哪些\n\n- 通过Object.prototype.toString.call()做判断\n\n```javascript\nObject.prototype.toString.call(obj).slice(8,-1) === 'Array';\n```\n\n- 通过原型链做判断\n\n```javascript\nobj.__proto__ === Array.prototype;\n```\n\n- 通过ES6的Array.isArray()做判断\n\n```javascript\nArray.isArrray(obj);\n```\n\n- 通过instanceof做判断\n\n```javascript\nobj instanceof Array\n```\n\n- 通过Array.prototype.isPrototypeOf\n\n```javascript\nArray.prototype.isPrototypeOf(obj)\n```\n\n### 4. null和undefined区别\n\n首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。\n\nundefined 代表的含义是**未定义**，null 代表的含义是**空对象**。一般变量声明了但还没有定义的时候会返回 undefined，null主要用于赋值给一些可能会返回对象的变量，作为初始化。\n\nundefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。\n\n当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 “object”，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。\n\n### 5. typeof null 的结果是什么，为什么？\n\ntypeof null 的结果是Object。\n\n在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的 **类型标签(1-3 bits)** 以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型：\n\n```javascript\n000: object   - 当前存储的数据指向一个对象。\n  1: int      - 当前存储的数据是一个 31 位的有符号整数。\n010: double   - 当前存储的数据指向一个双精度的浮点数。\n100: string   - 当前存储的数据指向一个字符串。\n110: boolean  - 当前存储的数据是布尔值。\n```\n\n如果最低位是 1，则类型标签标志位的长度只有一位；如果最低位是 0，则类型标签标志位的长度占三位，为存储其他四种数据类型提供了额外两个 bit 的长度。\n\n有两种特殊数据类型：\n\n- undefined的值是 (-2)30(一个超出整数范围的数字)；\n- null 的值是机器码 NULL 指针(null 指针的值全是 0)\n\n那也就是说null的类型标签也是000，和Object的类型标签一样，所以会被判定为Object。\n\n### 6. intanceof 操作符的实现原理及实现\n\ninstanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n\n```javascript\nfunction myInstanceof(left, right) {\n  // 获取对象的原型\n  let proto = Object.getPrototypeOf(left)\n  // 获取构造函数的 prototype 对象\n  let prototype = right.prototype; \n \n  // 判断构造函数的 prototype 对象是否在对象的原型链上\n  while (true) {\n    if (!proto) return false;\n    if (proto === prototype) return true;\n    // 如果没有找到，就继续从其原型上找，Object.getPrototypeOf方法用来获取指定对象的原型\n    proto = Object.getPrototypeOf(proto);\n  }\n}\n```\n\n### 7. 为什么0.1+0.2 ! == 0.3，如何让其相等  \n\n在开发过程中遇到类似这样的问题：\n\n```javascript\nlet n1 = 0.1, n2 = 0.2\nconsole.log(n1 + n2)  // 0.30000000000000004\n```\n\n这里得到的不是想要的结果，要想等于0.3，就要把它进行转化：\n\n```javascript\n(n1 + n2).toFixed(2) // 注意，toFixed为四舍五入\n```\n\n`toFixed(num)` 方法可把 Number 四舍五入为指定小数位数的数字。那为什么会出现这样的结果呢？\n\n计算机是通过二进制的方式存储数据的，所以计算机计算0.1+0.2的时候，实际上是计算的两个数的二进制的和。0.1的二进制是`0.0001100110011001100...`（1100循环），0.2的二进制是：`0.00110011001100...`（1100循环），这两个数的二进制都是无限循环的数。那JavaScript是如何处理无限循环的二进制小数呢？\n\n一般我们认为数字包括整数和小数，但是在 JavaScript 中只有一种数字类型：Number，它的实现遵循IEEE 754标准，使用64位固定长度来表示，也就是标准的double双精度浮点数。在二进制科学表示法中，双精度浮点数的小数部分最多只能保留52位，再加上前面的1，其实就是保留53位有效数字，剩余的需要舍去，遵从“0舍1入”的原则。\n\n根据这个原则，0.1和0.2的二进制数相加，再转化为十进制数就是：`0.30000000000000004`。\n\n下面看一下**双精度数是如何保存**的： ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0cb225cf71d748a8b2d6a5615e402711~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)\n\n- 第一部分（蓝色）：用来存储符号位（sign），用来区分正负数，0表示正数，占用1位\n- 第二部分（绿色）：用来存储指数（exponent），占用11位\n- 第三部分（红色）：用来存储小数（fraction），占用52位\n\n对于0.1，它的二进制为：\n\n```javascript\n0.00011001100110011001100110011001100110011001100110011001 10011...\n```\n\n转为科学计数法（科学计数法的结果就是浮点数）：\n\n```javascript\n1.1001100110011001100110011001100110011001100110011001*2^-4\n```\n\n可以看出0.1的符号位为0，指数位为-4，小数位为：\n\n```javascript\n1001100110011001100110011001100110011001100110011001\n```\n\n那么问题又来了，**指数位是负数，该如何保存**呢？\n\nIEEE标准规定了一个偏移量，对于指数部分，每次都加这个偏移量进行保存，这样即使指数是负数，那么加上这个偏移量也就是正数了。由于JavaScript的数字是双精度数，这里就以双精度数为例，它的指数部分为11位，能表示的范围就是0~2047，IEEE固定**双精度数的偏移量为1023**。\n\n- 当指数位不全是0也不全是1时(规格化的数值)，IEEE规定，阶码计算公式为 e-Bias。 此时e最小值是1，则1-1023= -1022，e最大值是2046，则2046-1023=1023，可以看到，这种情况下取值范围是`-1022~1013`。\n- 当指数位全部是0的时候(非规格化的数值)，IEEE规定，阶码的计算公式为1-Bias，即1-1023= -1022。\n- 当指数位全部是1的时候(特殊值)，IEEE规定这个浮点数可用来表示3个特殊值，分别是正无穷，负无穷，NaN。 具体的，小数位不为0的时候表示NaN；小数位为0时，当符号位s=0时表示正无穷，s=1时候表示负无穷。\n\n对于上面的0.1的指数位为-4，-4+1023 = 1019 转化为二进制就是：`1111111011`.\n\n所以，0.1表示为：\n\n```javascript\n0 1111111011 1001100110011001100110011001100110011001100110011001\n```\n\n说了这么多，是时候该最开始的问题了，如何实现0.1+0.2=0.3呢？\n\n对于这个问题，一个直接的解决方法就是设置一个误差范围，通常称为“机器精度”。对JavaScript来说，这个值通常为2-52，在ES6中，提供了`Number.EPSILON`属性，而它的值就是2-52，只要判断`0.1+0.2-0.3`是否小于`Number.EPSILON`，如果小于，就可以判断为0.1+0.2 ===0.3\n\n```javascript\nfunction numberepsilon(arg1,arg2){                   \n  return Math.abs(arg1 - arg2) < Number.EPSILON;        \n}        \n\nconsole.log(numberepsilon(0.1 + 0.2, 0.3)); // true\n```\n\n### 8. 如何获取安全的 undefined 值？\n\n因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。表达式 void ___ 没有返回值，因此返回结果是 undefined。void 并不改变表达式的结果，只是让表达式不返回值。因此可以用 void 0 来获得 undefined。\n\n### 9. typeof NaN 的结果是什么？\n\nNaN 指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel value，有特殊用途的常规值），用于指出数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。\n\n```javascript\ntypeof NaN; // \"number\"\n```\n\nNaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN !== NaN 为 true。\n\n### 10. isNaN 和 Number.isNaN 函数的区别？\n\n- 函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会返回 true ，会影响 NaN 的判断。\n- 函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN 的判断更为准确。\n\n### 12. 其他值到字符串的转换规则？\n\n- Null 和 Undefined 类型 ，null 转换为 \"null\"，undefined 转换为 \"undefined\"，\n- Boolean 类型，true 转换为 \"true\"，false 转换为 \"false\"。\n- Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。\n- Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。\n- 对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()）来返回内部属性 [[Class]] 的值，如\"[object Object]\"。如果对象有自己的 toString() 方法，字符串化时就会调用该方法并使用其返回值。\n\n### 13. 其他值到数字值的转换规则？\n\n- Undefined 类型的值转换为 NaN。\n- Null 类型的值转换为 0。\n- Boolean 类型的值，true 转换为 1，false 转换为 0。\n- String 类型的值转换如同使用 Number() 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。\n- Symbol 类型的值不能转换为数字，会报错。\n- 对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。\n\n为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。\n\n如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。\n\n### 14. 其他值到布尔类型的值的转换规则？\n\n以下这些是假值： • undefined • null • false • +0、-0 和 NaN • \"\"\n\n假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。\n\n### 15. || 和 && 操作符的返回值？\n\n|| 和 && 首先会对第一个操作数执行条件判断，如果其不是布尔值就先强制转换为布尔类型，然后再执行条件判断。\n\n- 对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。\n- && 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。\n\n|| 和 && 返回它们其中一个操作数的值，而非条件判断的结果\n\n### 16. Object.is() 与比较操作符 “===”、“==” 的区别？\n\n- 使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。\n- 使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。\n- 使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的。\n\n### 17. 什么是 JavaScript 中的包装类型？\n\n在 JavaScript 中，基本类型是没有属性和方法的，但是为了便于操作基本类型的值，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象，如：\n\n```javascript\nconst a = \"abc\";\na.length; // 3\na.toUpperCase(); // \"ABC\"\n```\n\n在访问`'abc'.length`时，JavaScript 将`'abc'`在后台转换成`String('abc')`，然后再访问其`length`属性。\n\nJavaScript也可以使用`Object`函数显式地将基本类型转换为包装类型：\n\n```javascript\nvar a = 'abc'\nObject(a) // String {\"abc\"}\n```\n\n也可以使用`valueOf`方法将包装类型倒转成基本类型：\n\n```javascript\nvar a = 'abc'\nvar b = Object(a)\nvar c = b.valueOf() // 'abc'\n```\n\n看看如下代码会打印出什么：\n\n```javascript\nvar a = new Boolean( false );\nif (!a) {\n\tconsole.log( \"Oops\" ); // never runs\n}\n```\n\n答案是什么都不会打印，因为虽然包裹的基本类型是`false`，但是`false`被包裹成包装类型后就成了对象，所以其非值为`false`，所以循环体中的内容不会运行。\n\n### 18. JavaScript 中如何进行隐式类型转换？\n\n首先要介绍`ToPrimitive`方法，这是 JavaScript 中每个值隐含的自带的方法，用来将值 （无论是基本类型值还是对象）转换为基本类型值。如果值为基本类型，则直接返回值本身；如果值为对象，其看起来大概是这样：\n\n```javascript\n/**\n* @obj 需要转换的对象\n* @type 期望的结果类型\n*/\nToPrimitive(obj,type)\n```\n\n`type`的值为`number`或者`string`。\n\n**（1）当**`type`**为**`number`**时规则如下：**\n\n- 调用`obj`的`valueOf`方法，如果为原始值，则返回，否则下一步；\n- 调用`obj`的`toString`方法，后续同上；\n- 抛出`TypeError` 异常。\n\n**（2）当**`type`**为**`string`**时规则如下：**\n\n- 调用`obj`的`toString`方法，如果为原始值，则返回，否则下一步；\n- 调用`obj`的`valueOf`方法，后续同上；\n- 抛出`TypeError` 异常。\n\n可以看出两者的主要区别在于调用`toString`和`valueOf`的先后顺序。默认情况下：\n\n- 如果对象为 Date 对象，则`type`默认为`string`；\n- 其他情况下，`type`默认为`number`。\n\n总结上面的规则，对于 Date 以外的对象，转换为基本类型的大概规则可以概括为一个函数：\n\n```javascript\nvar objToNumber = value => Number(value.valueOf().toString())\nobjToNumber([]) === 0\nobjToNumber({}) === NaN\n```\n\n而 JavaScript 中的隐式类型转换主要发生在`+、-、*、/`以及`==、>、<`这些运算符之间。而这些运算符只能操作基本类型值，所以在进行这些运算前的第一步就是将两边的值用`ToPrimitive`转换成基本类型，再进行操作。\n\n以下是基本类型的值在不同操作符的情况下隐式转换的规则 （对于对象，其会被`ToPrimitive`转换成基本类型，所以最终还是要应用基本类型转换规则）：\n\n1. `+`**操作符** `+`操作符的两边有至少一个`string`类型变量时，两边的变量都会被隐式转换为字符串；其他情况下两边的变量都会被转换为数字。\n\n```javascript\n1 + '23' // '123'\n 1 + false // 1 \n 1 + Symbol() // Uncaught TypeError: Cannot convert a Symbol value to a number\n '1' + false // '1false'\n false + true // 1\n```\n\n1. `-`、`*`、`\\`**操作符**\n\n`NaN`也是一个数字\n\n```javascript\n1 * '23' // 23\n 1 * false // 0\n 1 / 'aa' // NaN\n```\n\n1. **对于**`==`**操作符**\n\n操作符两边的值都尽量转成`number`：\n\n```javascript\n3 == true // false, 3 转为number为3，true转为number为1\n'0' == false //true, '0'转为number为0，false转为number为0\n'0' == 0 // '0'转为number为0\n```\n\n1. **对于**`<`**和**`>`**比较符**\n\n如果两边都是字符串，则比较字母表顺序：\n\n```javascript\n'ca' < 'bd' // false\n'a' < 'b' // true\n```\n\n其他情况下，转换为数字再比较：\n\n```javascript\n'12' < 13 // true\nfalse > -1 // true\n```\n\n以上说的是基本类型的隐式转换，而对象会被`ToPrimitive`转换为基本类型再进行转换：\n\n```javascript\nvar a = {}\na > 2 // false\n```\n\n其对比过程如下：\n\n```javascript\na.valueOf() // {}, 上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步\na.toString() // \"[object Object]\"，现在是一个字符串了\nNumber(a.toString()) // NaN，根据上面 < 和 > 操作符的规则，要转换成数字\nNaN > 2 //false，得出比较结果\n```\n\n又比如：\n\n```javascript\nvar a = {name:'Jack'}\nvar b = {age: 18}\na + b // \"[object Object][object Object]\"\n```\n\n运算过程如下：\n\n```javascript\na.valueOf() // {}，上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步\na.toString() // \"[object Object]\"\nb.valueOf() // 同理\nb.toString() // \"[object Object]\"\na + b // \"[object Object][object Object]\"\n```\n\n### 19. `+` 操作符什么时候用于字符串的拼接？\n\n根据 ES5 规范，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。\n\n简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字加法。\n\n那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。\n\n### 20. 为什么会有**BigInt**的提案？\n\nJavaScript中Number.MAX_SAFE_INTEGER表示最⼤安全数字，计算结果是9007199254740991，即在这个数范围内不会出现精度丢失（⼩数除外）。但是⼀旦超过这个范围，js就会出现计算不准确的情况，这在⼤数计算的时候不得不依靠⼀些第三⽅库进⾏解决，因此官⽅提出了BigInt来解决此问题。\n\n### 21. object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别\n\n扩展运算符：\n\n```javascript\nlet outObj = {\n  inObj: {a: 1, b: 2}\n}\nlet newObj = {...outObj}\nnewObj.inObj.a = 2\nconsole.log(outObj) // {inObj: {a: 2, b: 2}}\n```\n\nObject.assign():\n\n```javascript\nlet outObj = {\n  inObj: {a: 1, b: 2}\n}\nlet newObj = Object.assign({}, outObj)\nnewObj.inObj.a = 2\nconsole.log(outObj) // {inObj: {a: 2, b: 2}}\n```\n\n可以看到，两者都是浅拷贝。\n\n- Object.assign()方法接收的第一个参数作为目标对象，后面的所有参数作为源对象。然后把所有的源对象合并到目标对象中。它会修改了一个对象，因此会触发 ES6 setter。\n- 扩展操作符（…）使用它时，数组或对象中的每一个值都会被拷贝到一个新的数组或对象中。它不复制继承的属性或类的属性，但是它会复制ES6的 symbols 属性。\n\n## 二、ES6\n\n### 1. let、const、var的区别\n\n**（1）块级作用域：** 块作用域由 `{ }`包括，let和const具有块级作用域，var不存在块级作用域。块级作用域解决了ES5中的两个问题：\n\n- 内层变量可能覆盖外层变量\n- 用来计数的循环变量泄露为全局变量\n\n**（2）变量提升：** var存在变量提升，let和const不存在变量提升，即在变量只能在声明之后使用，否在会报错。\n\n**（3）给全局添加属性：** 浏览器的全局对象是window，Node的全局对象是global。var声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。\n\n**（4）重复声明：** var声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const和let不允许重复声明变量。\n\n**（5）暂时性死区：** 在使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为**暂时性死区**。使用var声明的变量不存在暂时性死区。\n\n**（6）初始值设置：** 在变量声明时，var 和 let 可以不用设置初始值。而const声明变量必须设置初始值。\n\n**（7）指针指向：** let和const都是ES6新增的用于创建变量的语法。 let创建的变量是可以更改指针指向（可以重新赋值）。但const声明的变量是不允许改变指针的指向。\n\n| **区别**           | **var** | **let** | **const** |\n| ------------------ | ------- | ------- | --------- |\n| 是否有块级作用域   | ×       | ✔️       | ✔️         |\n| 是否存在变量提升   | ✔️       | ×       | ×         |\n| 是否添加全局属性   | ✔️       | ×       | ×         |\n| 能否重复声明变量   | ✔️       | ×       | ×         |\n| 是否存在暂时性死区 | ×       | ✔️       | ✔️         |\n| 是否必须设置初始值 | ×       | ×       | ✔️         |\n| 能否改变指针指向   | ✔️       | ✔️       | ×         |\n\n### 2. const对象的属性可以修改吗\n\nconst保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。对于基本类型的数据（数值、字符串、布尔值），其值就保存在变量指向的那个内存地址，因此等同于常量。\n\n但对于引用类型的数据（主要是对象和数组）来说，变量指向数据的内存地址，保存的只是一个指针，const只能保证这个指针是固定不变的，至于它指向的数据结构是不是可变的，就完全不能控制了。\n\n### 3. 如果new一个箭头函数的会怎么样\n\n箭头函数是ES6中的提出来的，它没有prototype，也没有自己的this指向，更不可以使用arguments参数，所以不能New一个箭头函数。\n\nnew操作符的实现步骤如下：\n\n1. 创建一个对象\n2. 将构造函数的作用域赋给新对象（也就是将对象的__proto__属性指向构造函数的prototype属性）\n3. 指向构造函数中的代码，构造函数中的this指向该对象（也就是为这个对象添加属性和方法）\n4. 返回新的对象\n\n所以，上面的第二、三步，箭头函数都是没有办法执行的。\n\n### 4. 箭头函数与普通函数的区别\n\n**（1）箭头函数比普通函数更加简洁**\n\n- 如果没有参数，就直接写一个空括号即可\n- 如果只有一个参数，可以省去参数的括号\n- 如果有多个参数，用逗号分割\n- 如果函数体的返回值只有一句，可以省略大括号\n- 如果函数体不需要返回值，且只有一句话，可以给这个语句前面加一个void关键字。最常见的就是调用一个函数：\n\n```javascript\nlet fn = () => void doesNotReturn();\n```\n\n**（2）箭头函数没有自己的this**\n\n箭头函数不会创建自己的this， 所以它没有自己的this，它只会在自己作用域的上一层继承this。所以箭头函数中this的指向在它在定义时已经确定了，之后不会改变。\n\n**（3）箭头函数继承来的this指向永远不会改变**\n\n```javascript\nvar id = 'GLOBAL';\nvar obj = {\n  id: 'OBJ',\n  a: function(){\n    console.log(this.id);\n  },\n  b: () => {\n    console.log(this.id);\n  }\n};\nobj.a();    // 'OBJ'\nobj.b();    // 'GLOBAL'\nnew obj.a()  // undefined\nnew obj.b()  // Uncaught TypeError: obj.b is not a constructor\n```\n\n对象obj的方法b是使用箭头函数定义的，这个函数中的this就永远指向它定义时所处的全局执行环境中的this，即便这个函数是作为对象obj的方法调用，this依旧指向Window对象。需要注意，定义对象的大括号`{}`是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中。\n\n**（4）call()、apply()、bind()等方法不能改变箭头函数中this的指向**\n\n```javascript\nvar id = 'Global';\nlet fun1 = () => {\n    console.log(this.id)\n};\nfun1();                     // 'Global'\nfun1.call({id: 'Obj'});     // 'Global'\nfun1.apply({id: 'Obj'});    // 'Global'\nfun1.bind({id: 'Obj'})();   // 'Global'\n```\n\n**（5）箭头函数不能作为构造函数使用**\n\n构造函数在new的步骤在上面已经说过了，实际上第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，且this指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。\n\n**（6）箭头函数没有自己的arguments**\n\n箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是它外层函数的arguments值。\n\n**（7）箭头函数没有prototype**\n\n**（8）箭头函数不能用作Generator函数，不能使用yeild关键字**\n\n### 5. 箭头函数的**this**指向哪⾥？\n\n箭头函数不同于传统JavaScript中的函数，箭头函数并没有属于⾃⼰的this，它所谓的this是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值，并且由于没有属于⾃⼰的this，所以是不会被new调⽤的，这个所谓的this也不会被改变。\n\n可以⽤Babel理解⼀下箭头函数:\n\n```javascript\n// ES6 \nconst obj = { \n  getArrow() { \n    return () => { \n      console.log(this === obj); \n    }; \n  } \n}\n```\n\n转化后：\n\n```javascript\n// ES5，由 Babel 转译\nvar obj = { \n   getArrow: function getArrow() { \n     var _this = this; \n     return function () { \n        console.log(_this === obj); \n     }; \n   } \n};\n```\n\n### 6. 扩展运算符的作用及使用场景\n\n**（1）对象扩展运算符**\n\n对象的扩展运算符(...)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中。\n\n```javascript\nlet bar = { a: 1, b: 2 };\nlet baz = { ...bar }; // { a: 1, b: 2 }\n```\n\n上述方法实际上等价于:\n\n```javascript\nlet bar = { a: 1, b: 2 };\nlet baz = Object.assign({}, bar); // { a: 1, b: 2 }\n```\n\n`Object.assign`方法用于对象的合并，将源对象`（source）`的所有可枚举属性，复制到目标对象`（target）`。`Object.assign`方法的第一个参数是目标对象，后面的参数都是源对象。(**如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性**)。\n\n同样，如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。\n\n```javascript\nlet bar = {a: 1, b: 2};\nlet baz = {...bar, ...{a:2, b: 4}};  // {a: 2, b: 4}\n```\n\n利用上述特性就可以很方便的修改对象的部分属性。在`redux`中的`reducer`函数规定必须是**一个纯函数**，`reducer`中的`state`对象要求不能直接修改，可以通过扩展运算符把修改路径的对象都复制一遍，然后产生一个新的对象返回。\n\n需要注意：**扩展运算符对对象实例的拷贝属于浅拷贝**。\n\n**（2）数组扩展运算符**\n\n数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。\n\n```javascript\nconsole.log(...[1, 2, 3])\n// 1 2 3\nconsole.log(...[1, [2, 3, 4], 5])\n// 1 [2, 3, 4] 5\n```\n\n下面是数组的扩展运算符的应用：\n\n- **将数组转换为参数序列**\n\n```javascript\nfunction add(x, y) {\n  return x + y;\n}\nconst numbers = [1, 2];\nadd(...numbers) // 3\n```\n\n- **复制数组**\n\n```javascript\nconst arr1 = [1, 2];\nconst arr2 = [...arr1];\n```\n\n要记住：**扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中**，这里参数对象是个数组，数组里面的所有对象都是基础数据类型，将所有基础数据类型重新拷贝到新的数组中。\n\n- **合并数组**\n\n如果想在数组内合并数组，可以这样：\n\n```javascript\nconst arr1 = ['two', 'three'];const arr2 = ['one', ...arr1, 'four', 'five'];// [\"one\", \"two\", \"three\", \"four\", \"five\"]\n```\n\n- **扩展运算符与解构赋值结合起来，用于生成数组**\n\n```javascript\nconst [first, ...rest] = [1, 2, 3, 4, 5];first // 1rest  // [2, 3, 4, 5]\n```\n\n需要注意：**如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。**\n\n```javascript\nconst [...rest, last] = [1, 2, 3, 4, 5];         // 报错const [first, ...rest, last] = [1, 2, 3, 4, 5];  // 报错\n```\n\n- **将字符串转为真正的数组**\n\n```javascript\n[...'hello']    // [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n```\n\n- **任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组**\n\n比较常见的应用是可以将某些数据结构转为数组：\n\n```javascript\n// arguments对象\nfunction foo() {\n  const args = [...arguments];\n}\n```\n\n用于替换`es5`中的`Array.prototype.slice.call(arguments)`写法。\n\n- **使用**`Math`**函数获取数组中特定的值**\n\n```javascript\nconst numbers = [9, 4, 7, 1];\nMath.min(...numbers); // 1\nMath.max(...numbers); // 9\n```\n\n### 8. 对对象与数组的解构的理解\n\n解构是 ES6 提供的一种新的提取数据的模式，这种模式能够从对象或数组里有针对性地拿到想要的数值。 **1）数组的解构** 在解构数组时，以元素的位置为匹配条件来提取想要的数据的：\n\n```javascript\nconst [a, b, c] = [1, 2, 3]\n```\n\n最终，a、b、c分别被赋予了数组第0、1、2个索引位的值：\n\n![image-20230610112704625](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112704625.png)\n\n数组里的0、1、2索引位的元素值，精准地被映射到了左侧的第0、1、2个变量里去，这就是数组解构的工作模式。还可以通过给左侧变量数组设置空占位的方式，实现对数组中某几个元素的精准提取：\n\n```javascript\nconst [a,,c] = [1,2,3]\n```\n\n通过把中间位留空，可以顺利地把数组第一位和最后一位的值赋给 a、c 两个变量： \n\n![image-20230610112753402](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112753402.png)\n\n**2）对象的解构** 对象解构比数组结构稍微复杂一些，也更显强大。在解构对象时，是以属性的名称为匹配条件，来提取想要的数据的。现在定义一个对象：\n\n```javascript\nconst stu = {\n  name: 'Bob',\n  age: 24\n}\n```\n\n假如想要解构它的两个自有属性，可以这样：\n\n```javascript\nconst { name, age } = stu\n```\n\n这样就得到了 name 和 age 两个和 stu 平级的变量：\n\n![image-20230610112810838](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112810838.png)\n\n注意，对象解构严格以属性名作为定位依据，所以就算调换了 name 和 age 的位置，结果也是一样的：\n\n```javascript\nconst { age, name } = stu\n```\n\n### 9. **如何提取高度嵌套的对象里的指定属性？**\n\n有时会遇到一些嵌套程度非常深的对象：\n\n```javascript\nconst school = {\n   classes: {\n      stu: {\n         name: 'Bob',\n         age: 24,\n      }\n   }\n}\n```\n\n像此处的 name 这个变量，嵌套了四层，此时如果仍然尝试老方法来提取它：\n\n```javascript\nconst { name } = school\n```\n\n显然是不奏效的，因为 school 这个对象本身是没有 name 这个属性的，name 位于 school 对象的“儿子的儿子”对象里面。要想把 name 提取出来，一种比较笨的方法是逐层解构：\n\n```javascript\nconst { classes } = school\nconst { stu } = classes\nconst { name } = stu\nname // 'Bob'\n```\n\n但是还有一种更标准的做法，可以用一行代码来解决这个问题：\n\n```javascript\nconst { classes: { stu: { name } }} = school\n       \nconsole.log(name)  // 'Bob'\n```\n\n可以在解构出来的变量名右侧，通过冒号+{目标属性名}这种形式，进一步解构它，一直解构到拿到目标数据为止。\n\n### 10. 对 rest 参数的理解\n\n扩展运算符被用在函数形参上时，**它还可以把一个分离的参数序列整合成一个数组**：\n\n```javascript\nfunction mutiple(...args) {\n  let result = 1;\n  for (var val of args) {\n    result *= val;\n  }\n  return result;\n}\nmutiple(1, 2, 3, 4) // 24\n```\n\n这里，传入 mutiple 的是四个分离的参数，但是如果在 mutiple 函数里尝试输出 args 的值，会发现它是一个数组：\n\n```javascript\nfunction mutiple(...args) {\n  console.log(args)\n}\nmutiple(1, 2, 3, 4) // [1, 2, 3, 4]\n```\n\n这就是 … rest运算符的又一层威力了，它可以把函数的多个入参收敛进一个数组里。这一点**经常用于获取函数的多余参数，或者像上面这样处理函数参数个数不确定的情况。**\n\n### 11. ES6中模板语法与字符串处理\n\nES6 提出了“模板语法”的概念。在 ES6 以前，拼接字符串是很麻烦的事情：\n\n```javascript\nvar name = 'css'   \nvar career = 'coder' \nvar hobby = ['coding', 'writing']\nvar finalString = 'my name is ' + name + ', I work as a ' + career + ', I love ' + hobby[0] + ' and ' + hobby[1]\n```\n\n仅仅几个变量，写了这么多加号，还要时刻小心里面的空格和标点符号有没有跟错地方。但是有了模板字符串，拼接难度直线下降：\n\n```javascript\nvar name = 'css'   \nvar career = 'coder' \nvar hobby = ['coding', 'writing']\nvar finalString = `my name is ${name}, I work as a ${career} I love ${hobby[0]} and ${hobby[1]}`\n```\n\n字符串不仅更容易拼了，也更易读了，代码整体的质量都变高了。这就是模板字符串的第一个优势——允许用${}的方式嵌入变量。但这还不是问题的关键，模板字符串的关键优势有两个：\n\n- 在模板字符串中，空格、缩进、换行都会被保留\n- 模板字符串完全支持“运算”式的表达式，可以在${}里完成一些计算\n\n基于第一点，可以在模板字符串里无障碍地直接写 html 代码：\n\n```javascript\nlet list = `\n\t<ul>\n\t\t<li>列表项1</li>\n\t\t<li>列表项2</li>\n\t</ul>\n`;\nconsole.log(message); // 正确输出，不存在报错\n```\n\n基于第二点，可以把一些简单的计算和调用丢进 ${} 来做：\n\n```javascript\nfunction add(a, b) {\n  const finalString = `${a} + ${b} = ${a+b}`\n  console.log(finalString)\n}\nadd(1, 2) // 输出 '1 + 2 = 3'\n```\n\n除了模板语法外， ES6中还新增了一系列的字符串方法用于提升开发效率：\n\n（1）**存在性判定**：在过去，当判断一个字符/字符串是否在某字符串中时，只能用 indexOf > -1 来做。现在 ES6 提供了三个方法：includes、startsWith、endsWith，它们都会返回一个布尔值来告诉你是否存在。\n\n- **includes**：判断字符串与子串的包含关系：\n\n```javascript\nconst son = 'haha' \nconst father = 'xixi haha hehe'\nfather.includes(son) // true\n```\n\n- **startsWith**：判断字符串是否以某个/某串字符开头：\n\n```javascript\nconst father = 'xixi haha hehe'\nfather.startsWith('haha') // false\nfather.startsWith('xixi') // true\n```\n\n- **endsWith**：判断字符串是否以某个/某串字符结尾：\n\n```javascript\nconst father = 'xixi haha hehe'\n  father.endsWith('hehe') // true\n```\n\n（2）**自动重复**：可以使用 repeat 方法来使同一个字符串输出多次（被连续复制多次）：\n\n```javascript\nconst sourceCode = 'repeat for 3 times;'\nconst repeated = sourceCode.repeat(3) \nconsole.log(repeated) // repeat for 3 times;repeat for 3 times;repeat for 3 times;\n```\n\n## 三、JavaScript基础\n\n### 1. new操作符的实现原理\n\n**new操作符的执行过程：**\n\n（1）首先创建了一个新的空对象\n\n（2）设置原型，将对象的原型设置为函数的 prototype 对象。\n\n（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）\n\n（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\n\n具体实现：\n\n```javascript\nfunction objectFactory() {\n  let newObject = null;\n  let constructor = Array.prototype.shift.call(arguments);\n  let result = null;\n  // 判断参数是否是一个函数\n  if (typeof constructor !== \"function\") {\n    console.error(\"type error\");\n    return;\n  }\n  // 新建一个空对象，对象的原型为构造函数的 prototype 对象\n  newObject = Object.create(constructor.prototype);\n  // 将 this 指向新建对象，并执行函数\n  result = constructor.apply(newObject, arguments);\n  // 判断返回对象\n  let flag = result && (typeof result === \"object\" || typeof result === \"function\");\n  // 判断返回结果\n  return flag ? result : newObject;\n}\n// 使用方法\nobjectFactory(构造函数, 初始化参数);\n```\n\n### 2. map和Object的区别\n\n|          | Map                                                          | Object                                                       |\n| -------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 意外的键 | Map默认情况不包含任何键，只包含显式插入的键。                | Object 有一个原型, 原型链上的键名有可能和自己在对象上的设置的键名产生冲突。 |\n| 键的类型 | Map的键可以是任意值，包括函数、对象或任意基本类型。          | Object 的键必须是 String 或是Symbol。                        |\n| 键的顺序 | Map 中的 key 是有序的。因此，当迭代的时候， Map 对象以插入的顺序返回键值。 | Object 的键是无序的                                          |\n| Size     | Map 的键值对个数可以轻易地通过size 属性获取                  | Object 的键值对个数只能手动计算                              |\n| 迭代     | Map 是 iterable 的，所以可以直接被迭代。                     | 迭代Object需要以某种方式获取它的键然后才能迭代。             |\n| 性能     | 在频繁增删键值对的场景下表现更好。                           | 在频繁添加和删除键值对的场景下未作出优化。                   |\n\n### 3. map和weakMap的区别\n\n**（1）Map** map本质上就是键值对的集合，但是普通的Object中的键值对中的键只能是字符串。而ES6提供的Map数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的Hash结构。如果Map的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。\n\n实际上Map是一个数组，它的每一个数据也都是一个数组，其形式如下：\n\n```javascript\nconst map = [\n     [\"name\",\"张三\"],\n     [\"age\",18],\n]\n```\n\nMap数据结构有以下操作方法：\n\n- **size**： `map.size` 返回Map结构的成员总数。\n- **set(key,value)**：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）\n- **get(key)**：该方法读取key对应的键值，如果找不到key，返回undefined。\n- **has(key)**：该方法返回一个布尔值，表示某个键是否在当前Map对象中。\n- **delete(key)**：该方法删除某个键，返回true，如果删除失败，返回false。\n- **clear()**：map.clear()清除所有成员，没有返回值。\n\nMap结构原生提供是三个遍历器生成函数和一个遍历方法\n\n- keys()：返回键名的遍历器。\n- values()：返回键值的遍历器。\n- entries()：返回所有成员的遍历器。\n- forEach()：遍历Map的所有成员。\n\n```javascript\nconst map = new Map([\n     [\"foo\",1],\n     [\"bar\",2],\n])\nfor(let key of map.keys()){\n    console.log(key);  // foo bar\n}\nfor(let value of map.values()){\n     console.log(value); // 1 2\n}\nfor(let items of map.entries()){\n    console.log(items);  // [\"foo\",1]  [\"bar\",2]\n}\nmap.forEach( (value,key,map) => {\n     console.log(key,value); // foo 1    bar 2\n})\n```\n\n**（2）WeakMap** WeakMap 对象也是一组键值对的集合，其中的键是弱引用的。**其键必须是对象**，原始数据类型不能作为key值，而值可以是任意的。\n\n该对象也有以下几种方法：\n\n- **set(key,value)**：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）\n- **get(key)**：该方法读取key对应的键值，如果找不到key，返回undefined。\n- **has(key)**：该方法返回一个布尔值，表示某个键是否在当前Map对象中。\n- **delete(key)**：该方法删除某个键，返回true，如果删除失败，返回false。\n\n其clear()方法已经被弃用，所以可以通过创建一个空的WeakMap并替换原对象来实现清除。\n\nWeakMap的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。\n\n而WeakMap的**键名所引用的对象都是弱引用**，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的**键名对象和所对应的键值对会自动消失，不用手动删除引用**。\n\n**总结：**\n\n- Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。\n- WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null 除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。\n\n### 4. JavaScript有哪些内置对象\n\n全局的对象（ global objects ）或称标准内置对象，不要和 \"全局对象（global object）\" 混淆。这里说的全局的对象是说在 全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。\n\n**标准内置对象的分类：**\n\n（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。例如 Infinity、NaN、undefined、null 字面量\n\n（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。例如 eval()、parseFloat()、parseInt() 等\n\n（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。例如 Object、Function、Boolean、Symbol、Error 等\n\n（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。例如 Number、Math、Date\n\n（5）字符串，用来表示和操作字符串的对象。例如 String、RegExp\n\n（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array\n\n（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。 例如 Map、Set、WeakMap、WeakSet\n\n（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。 例如 SIMD 等\n\n（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。例如 JSON 等\n\n（10）控制抽象对象 例如 Promise、Generator 等\n\n（11）反射。例如 Reflect、Proxy\n\n（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。例如 Intl、Intl.Collator 等\n\n（13）WebAssembly\n\n（14）其他。例如 arguments\n\n**总结：** js 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js 定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。一般经常用到的如全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构造函数如 Date、Object 等，还有提供数学计算的单体内置对象如 Math 对象。\n\n### 5. 常用的正则表达式有哪些？\n\n```javascript\n// （1）匹配 16 进制颜色值\nvar regex = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;\n\n// （2）匹配日期，如 yyyy-mm-dd 格式\nvar regex = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\n\n// （3）匹配 qq 号\nvar regex = /^[1-9][0-9]{4,10}$/g;\n\n// （4）手机号码正则\nvar regex = /^1[34578]\\d{9}$/g;\n\n// （5）用户名正则\nvar regex = /^[a-zA-Z\\$][a-zA-Z0-9_\\$]{4,16}$/;\n```\n\n### 6. 对JSON的理解\n\nJSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。\n\n在项目开发中，使用 JSON 作为前后端数据交换的方式。在前端通过将一个符合 JSON 格式的数据结构序列化为 JSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。\n\n因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是应该注意的是 JSON 和 js 中的对象不是一回事，JSON 中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。\n\n在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，\n\n- JSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，可以调用这个函数将数据对象转化为 JSON 格式的字符串。\n- JSON.parse() 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当从后端接收到 JSON 格式的字符串时，可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。\n\n### 7. JavaScript脚本延迟加载的方式有哪些？\n\n延迟加载就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。\n\n一般有以下几种方式：\n\n- **defer 属性：** 给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。\n- **async 属性：** 给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。\n- **动态创建 DOM 方式：** 动态创建 DOM 标签的方式，可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。\n- **使用 setTimeout 延迟方法：** 设置一个定时器来延迟加载js脚本文件\n- **让 JS 最后加载：** 将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。\n\n### 8. JavaScript 类数组对象的定义？\n\n一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。\n\n常见的类数组转换为数组的方法有这样几种：\n\n（1）通过 call 调用数组的 slice 方法来实现转换\n\n```javascript\nArray.prototype.slice.call(arrayLike);\n```\n\n（2）通过 call 调用数组的 splice 方法来实现转换\n\n```javascript\nArray.prototype.splice.call(arrayLike, 0);\n```\n\n（3）通过 apply 调用数组的 concat 方法来实现转换\n\n```javascript\nArray.prototype.concat.apply([], arrayLike);\n```\n\n（4）通过 Array.from 方法来实现转换\n\n```javascript\nArray.from(arrayLike);\n```\n\n### 9. 数组有哪些原生方法？\n\n- 数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。\n- 数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。\n- 数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。\n- 数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。\n- 数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。\n- 数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法\n- 数组归并方法 reduce() 和 reduceRight() 方法\n\n### 10. **Unicode、UTF-8、UTF-16、UTF-32的区别？**\n\n#### （1）Unicode\n\n在说`Unicode`之前需要先了解一下`ASCII`码：ASCII 码（`American Standard Code for Information Interchange`）称为美国标准信息交换码。\n\n- 它是基于拉丁字母的一套电脑编码系统。\n- 它定义了一个用于代表常见字符的字典。\n- 它包含了\"A-Z\"(包含大小写)，数据\"0-9\" 以及一些常见的符号。\n- 它是专门为英语而设计的，有128个编码，对其他语言无能为力\n\n`ASCII`码可以表示的编码有限，要想表示其他语言的编码，还是要使用`Unicode`来表示，可以说`Unicode`是`ASCII` 的超集。\n\n`Unicode`全称 `Unicode Translation Format`，又叫做统一码、万国码、单一码。`Unicode` 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。\n\n`Unicode`的实现方式（也就是编码方式）有很多种，常见的是**UTF-8**、**UTF-16**、**UTF-32**和**USC-2**。\n\n#### （2）UTF-8\n\n`UTF-8`是使用最广泛的`Unicode`编码方式，它是一种可变长的编码方式，可以是1—4个字节不等，它可以完全兼容`ASCII`码的128个字符。\n\n**注意：** `UTF-8` 是一种编码方式，`Unicode`是一个字符集合。\n\n`UTF-8`的编码规则：\n\n- 对于**单字节**的符号，字节的第一位为0，后面的7位为这个字符的`Unicode`编码，因此对于英文字母，它的`Unicode`编码和`ACSII`编码一样。\n- 对于**n字节**的符号，第一个字节的前n位都是1，第n+1位设为0，后面字节的前两位一律设为10，剩下的没有提及的二进制位，全部为这个符号的`Unicode`码 。\n\n来看一下具体的`Unicode`编号范围与对应的`UTF-8`二进制格式 ：\n\n| 编码范围（编号对应的十进制数）  | 二进制格式                          |\n| ------------------------------- | ----------------------------------- |\n| 0x00—0x7F （0-127）             | 0xxxxxxx                            |\n| 0x80—0x7FF （128-2047）         | 110xxxxx 10xxxxxx                   |\n| 0x800—0xFFFF  （2048-65535）    | 1110xxxx 10xxxxxx 10xxxxxx          |\n| 0x10000—0x10FFFF  （65536以上） | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx |\n\n那该如何通过具体的`Unicode`编码，进行具体的`UTF-8`编码呢？**步骤如下：**\n\n- 找到该`Unicode`编码的所在的编号范围，进而找到与之对应的二进制格式\n- 将`Unicode`编码转换为二进制数（去掉最高位的0）\n- 将二进制数从右往左一次填入二进制格式的`X`中，如果有`X`未填，就设为0\n\n来看一个实际的例子： “**马**” 字的`Unicode`编码是：`0x9A6C`，整数编号是`39532` （1）首选确定了该字符在第三个范围内，它的格式是 `1110xxxx 10xxxxxx 10xxxxxx` （2）39532对应的二进制数为`1001 1010 0110 1100` （3）将二进制数填入X中，结果是：`11101001 10101001 10101100`\n\n#### （3）UTF-16\n\n**1. 平面的概念**\n\n在了解`UTF-16`之前，先看一下**平面**的概念： `Unicode`编码中有很多很多的字符，它并不是一次性定义的，而是分区进行定义的，每个区存放**65536**（216）个字符，这称为一个**平面**，目前总共有17 个平面。\n\n最前面的一个平面称为**基本平面**，它的码点从**0 — 216-1**，写成16进制就是`U+0000 — U+FFFF`，那剩下的16个平面就是**辅助平面**，码点范围是 `U+10000—U+10FFFF`。\n\n**2. UTF-16 概念：**\n\n`UTF-16`也是`Unicode`编码集的一种编码形式，把`Unicode`字符集的抽象码位映射为16位长的整数（即码元）的序列，用于数据存储或传递。`Unicode`字符的码位需要1个或者2个16位长的码元来表示，因此`UTF-16`也是用变长字节表示的。\n\n**3. UTF-16 编码规则：**\n\n- 编号在 `U+0000—U+FFFF` 的字符（常用字符集），直接用两个字节表示。\n- 编号在 `U+10000—U+10FFFF` 之间的字符，需要用四个字节表示。\n\n**4. 编码识别**\n\n那么问题来了，当遇到两个字节时，怎么知道是把它当做一个字符还是和后面的两个字节一起当做一个字符呢？\n\n`UTF-16` 编码肯定也考虑到了这个问题，在基本平面内，从 `U+D800 — U+DFFF` 是一个空段，也就是说这个区间的码点不对应任何的字符，因此这些空段就可以用来映射辅助平面的字符。\n\n辅助平面共有 **220** 个字符位，因此表示这些字符至少需要 20 个二进制位。`UTF-16` 将这 20 个二进制位分成两半，前 10 位映射在 `U+D800 — U+DBFF`，称为**高位**（H），后 10 位映射在 `U+DC00 — U+DFFF`，称为**低位**（L）。这就相当于，将一个辅助平面的字符拆成了两个基本平面的字符来表示。\n\n因此，当遇到两个字节时，发现它的码点在 `U+D800 —U+DBFF`之间，就可以知道，它后面的两个字节的码点应该在 `U+DC00 — U+DFFF` 之间，这四个字节必须放在一起进行解读。\n\n**5. 举例说明**\n\n以 \"**𡠀**\" 字为例，它的 `Unicode` 码点为 `0x21800`，该码点超出了基本平面的范围，因此需要用四个字节来表示，步骤如下：\n\n- 首先计算超出部分的结果：`0x21800 - 0x10000`\n- 将上面的计算结果转为20位的二进制数，不足20位就在前面补0，结果为：`0001000110 0000000000`\n- 将得到的两个10位二进制数分别对应到两个区间中\n- `U+D800` 对应的二进制数为 `1101100000000000`， 将`0001000110`填充在它的后10 个二进制位，得到 `1101100001000110`，转成 16 进制数为 `0xD846`。同理，低位为 `0xDC00`，所以这个字的`UTF-16` 编码为 `0xD846 0xDC00`\n\n#### （4） UTF-32\n\n`UTF-32` 就是字符所对应编号的整数二进制形式，每个字符占四个字节，这个是直接进行转换的。该编码方式占用的储存空间较多，所以使用较少。\n\n比如“**马**” 字的Unicode编号是：`U+9A6C`，整数编号是`39532`，直接转化为二进制：`1001 1010 0110 1100`，这就是它的UTF-32编码。\n\n#### （5）总结\n\n**Unicode、UTF-8、UTF-16、UTF-32有什么区别？**\n\n- `Unicode` 是编码字符集（字符集），而`UTF-8`、`UTF-16`、`UTF-32`是字符集编码（编码规则）；\n- `UTF-16` 使用变长码元序列的编码方式，相较于定长码元序列的`UTF-32`算法更复杂，甚至比同样是变长码元序列的`UTF-8`也更为复杂，因为其引入了独特的**代理对**这样的代理机制；\n- `UTF-8`需要判断每个字节中的开头标志信息，所以如果某个字节在传送过程中出错了，就会导致后面的字节也会解析出错；而`UTF-16`不会判断开头标志，即使错也只会错一个字符，所以容错能力教强；\n- 如果字符内容全部英文或英文与其他文字混合，但英文占绝大部分，那么用`UTF-8`就比`UTF-16`节省了很多空间；而如果字符内容全部是中文这样类似的字符或者混合字符中中文占绝大多数，那么`UTF-16`就占优势了，可以节省很多空间；\n\n### 11. 常见的位运算符有哪些？其计算规则是什么？\n\n现代计算机中数据都是以二进制的形式存储的，即0、1两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。\n\n常见的位运算有以下几种：\n\n| 运算符 | 描述 | 运算规则                                                 |                          |\n| ------ | ---- | -------------------------------------------------------- | ------------------------ |\n| `&`    | 与   | 两个位都为1时，结果才为1                                 |                          |\n| `      | `    | 或                                                       | 两个位都为0时，结果才为0 |\n| `^`    | 异或 | 两个位相同为0，相异为1                                   |                          |\n| `~`    | 取反 | 0变1，1变0                                               |                          |\n| `<<`   | 左移 | 各二进制位全部左移若干位，高位丢弃，低位补0              |                          |\n| `>>`   | 右移 | 各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃 |                          |\n\n#### 1. 按位与运算符（&）\n\n**定义：** 参加运算的两个数据**按二进制位**进行“与”运算。 **运算规则：**\n\n```javascript\n0 & 0 = 0  \n0 & 1 = 0  \n1 & 0 = 0  \n1 & 1 = 1\n```\n\n总结：两位同时为1，结果才为1，否则结果为0。 例如：3&5 即：\n\n```javascript\n0000 0011 \n   0000 0101 \n = 0000 0001\n```\n\n因此 3&5 的值为1。 注意：负数按补码形式参加按位与运算。\n\n**用途：**\n\n**（1）判断奇偶**\n\n只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用`if ((i & 1) == 0)`代替`if (i % 2 == 0)`来判断a是不是偶数。\n\n**（2）清零**\n\n如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。\n\n#### 2. 按位或运算符（|）\n\n**定义：** 参加运算的两个对象按二进制位进行“或”运算。\n\n**运算规则：**\n\n```javascript\n0 | 0 = 0\n0 | 1 = 1  \n1 | 0 = 1  \n1 | 1 = 1\n```\n\n总结：参加运算的两个对象只要有一个为1，其值为1。 例如：3|5即：\n\n```javascript\n0000 0011\n  0000 0101 \n= 0000 0111\n```\n\n因此，3|5的值为7。 注意：负数按补码形式参加按位或运算。\n\n#### 3. 异或运算符（^）\n\n**定义：** 参加运算的两个数据按二进制位进行“异或”运算。\n\n**运算规则：**\n\n```javascript\n0 ^ 0 = 0  \n0 ^ 1 = 1  \n1 ^ 0 = 1  \n1 ^ 1 = 0\n```\n\n总结：参加运算的两个对象，如果两个相应位相同为0，相异为1。 例如：3|5即：\n\n```javascript\n0000 0011\n  0000 0101 \n= 0000 0110\n```\n\n因此，3^5的值为6。 异或运算的性质:\n\n- 交换律：`(a^b)^c == a^(b^c)`\n- 结合律：`(a + b)^c == a^b + b^c`\n- 对于任何数x，都有 `x^x=0，x^0=x`\n- 自反性: `a^b^b=a^0=a`;\n\n#### 4. 取反运算符 (~)\n\n**定义：** 参加运算的一个数据按二进制进行“取反”运算。\n\n**运算规则：**\n\n```javascript\n~ 1 = 0~ 0 = 1\n```\n\n总结：对一个二进制数按位取反，即将0变1，1变0。 例如：~6 即：\n\n```javascript\n0000 0110= 1111 1001\n```\n\n在计算机中，正数用原码表示，负数使用补码存储，首先看最高位，最高位1表示负数，0表示正数。此计算机二进制码为负数，最高位为符号位。 当发现按位取反为负数时，就**直接取其补码**，变为十进制：\n\n```javascript\n0000 0110   = 1111 1001反码：1000 0110补码：1000 0111\n```\n\n因此，~6的值为-7。\n\n#### 5. 左移运算符（<<）\n\n**定义：** 将一个运算对象的各二进制位全部左移若干位，左边的二进制位丢弃，右边补0。 设 a=1010 1110，a = a<< 2 将a的二进制位左移2位、右补0，即得a=1011 1000。 若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。\n\n#### 6. 右移运算符（>>）\n\n**定义：** 将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。 例如：a=a>>2 将a的二进制位右移2位，左补0 或者 左补1得看被移数是正还是负。 操作数每右移一位，相当于该数除以2。\n\n#### 7. 原码、补码、反码\n\n上面提到了补码、反码等知识，这里就补充一下。 计算机中的**有符号数**有三种表示方法，即原码、反码和补码。三种表示方法均有符号位和数值位两部分，符号位都是用0表示“正”，用1表示“负”，而数值位，三种表示方法各不相同。\n\n**（1）原码**\n\n原码就是一个数的二进制数。例如：10的原码为0000 1010\n\n**（2）反码**\n\n- 正数的反码与原码相同，如：10 反码为 0000 1010\n- 负数的反码为除符号位，按位取反，即0变1，1变0。\n\n例如：-10\n\n```javascript\n原码：1000 1010\n反码：1111 0101\n```\n\n**（3）补码**\n\n- 正数的补码与原码相同，如：10 补码为 0000 1010\n- 负数的补码是原码除符号位外的所有位取反即0变1，1变0，然后加1，也就是反码加1。\n\n例如：-10\n\n```javascript\n原码：1000 1010\n反码：1111 0101\n补码：1111 0110\n```\n\n### 12. 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?\n\n`arguments`是一个对象，它的属性是从 0 开始依次递增的数字，还有`callee`和`length`等属性，与数组相似；但是它却没有数组常见的方法属性，如`forEach`, `reduce`等，所以叫它们类数组。\n\n要遍历类数组，有三个方法：\n\n（1）将数组的方法应用到类数组上，这时候就可以使用`call`和`apply`方法，如：\n\n```javascript\nfunction foo(){ \n  Array.prototype.forEach.call(arguments, a => console.log(a))\n}\n```\n\n（2）使用Array.from方法将类数组转化成数组：‌\n\n```javascript\nfunction foo(){ \n  const arrArgs = Array.from(arguments) \n  arrArgs.forEach(a => console.log(a))\n}\n```\n\n（3）使用展开运算符将类数组转化成数组\n\n```javascript\nfunction foo(){ \n    const arrArgs = [...arguments] \n    arrArgs.forEach(a => console.log(a)) \n}\n```\n\n### 13. 什么是 DOM 和 BOM？\n\n- DOM 指的是文档对象模型，它指的是把文档当做一个对象，这个对象主要定义了处理网页内容的方法和接口。\n- BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。\n\n### 14. 对类数组对象的理解，如何转化为数组\n\n一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，函数参数也可以被看作是类数组对象，因为它含有 length属性值，代表可接收的参数个数。\n\n常见的类数组转换为数组的方法有这样几种：\n\n- 通过 call 调用数组的 slice 方法来实现转换\n\n```javascript\nArray.prototype.slice.call(arrayLike);\n```\n\n- 通过 call 调用数组的 splice 方法来实现转换\n\n```javascript\nArray.prototype.splice.call(arrayLike, 0);\n```\n\n- 通过 apply 调用数组的 concat 方法来实现转换\n\n```javascript\nArray.prototype.concat.apply([], arrayLike);\n```\n\n- 通过 Array.from 方法来实现转换\n\n```javascript\nArray.from(arrayLike);\n```\n\n### 15. escape、encodeURI、encodeURIComponent 的区别\n\n- encodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。\n- encodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。\n- escape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 %u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。\n\n### 16. 对AJAX的理解，实现一个AJAX请求\n\nAJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。\n\n创建AJAX请求的步骤：\n\n- **创建一个 XMLHttpRequest 对象。**\n- 在这个对象上**使用 open 方法创建一个 HTTP 请求**，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。\n- 在发起请求前，可以为这个对象**添加一些信息和监听函数**。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。\n- 当对象的属性和监听函数设置完成后，最后调**用 sent 方法来向服务器发起请求**，可以传入参数作为发送的数据体。\n\n```javascript\nconst SERVER_URL = \"/server\";\nlet xhr = new XMLHttpRequest();\n// 创建 Http 请求\nxhr.open(\"GET\", url, true);\n// 设置状态监听函数\nxhr.onreadystatechange = function() {\n  if (this.readyState !== 4) return;\n  // 当请求成功时\n  if (this.status === 200) {\n    handle(this.response);\n  } else {\n    console.error(this.statusText);\n  }\n};\n// 设置请求失败时的监听函数\nxhr.onerror = function() {\n  console.error(this.statusText);\n};\n// 设置请求头信息\nxhr.responseType = \"json\";\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n// 发送 Http 请求\nxhr.send(null);\n```\n\n使用Promise封装AJAX：\n\n```javascript\n// promise 封装实现：\nfunction getJSON(url) {\n  // 创建一个 promise 对象\n  let promise = new Promise(function(resolve, reject) {\n    let xhr = new XMLHttpRequest();\n    // 新建一个 http 请求\n    xhr.open(\"GET\", url, true);\n    // 设置状态的监听函数\n    xhr.onreadystatechange = function() {\n      if (this.readyState !== 4) return;\n      // 当请求成功或失败时，改变 promise 的状态\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n    // 设置错误监听函数\n    xhr.onerror = function() {\n      reject(new Error(this.statusText));\n    };\n    // 设置响应的数据类型\n    xhr.responseType = \"json\";\n    // 设置请求头信息\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n    // 发送 http 请求\n    xhr.send(null);\n  });\n  return promise;\n}\n```\n\n### 17. JavaScript为什么要进行变量提升，它导致了什么问题？\n\n变量提升的表现是，无论在函数中何处位置声明的变量，好像都被提升到了函数的首部，可以在变量声明前访问到而不会报错。\n\n造成变量声明提升的**本质原因**是 js 引擎在代码执行前有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象。当访问一个变量时，会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性，它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。\n\n首先要知道，JS在拿到一个变量或者一个函数的时候，会有两步操作，即解析和执行。\n\n- 在解析阶段\n\n  ，JS会检查语法，并对函数进行预编译。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。\n\n  - 全局上下文：变量定义，函数声明\n  - 函数上下文：变量定义，函数声明，this，arguments\n\n- **在执行阶段**，就是按照代码的顺序依次执行。\n\n那为什么会进行变量提升呢？主要有以下两个原因：\n\n- 提高性能\n- 容错性更好\n\n**（1）提高性能** 在JS代码执行之前，会进行语法检查和预编译，并且这一操作只进行一次。这么做就是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新解析一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。\n\n在解析的过程中，还会为函数生成预编译代码。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，去除注释、不必要的空白等。这样做的好处就是每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量，创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。\n\n**（2）容错性更好**\n\n变量提升可以在一定程度上提高JS的容错性，看下面的代码：\n\n```javascript\na = 1;var a;console.log(a);\n```\n\n如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。\n\n虽然，在可以开发过程中，可以完全避免这样写，但是有时代码很复杂的时候。可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。\n\n**总结：**\n\n- 解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间\n- 声明提升还可以提高JS代码的容错性，使一些不规范的代码也可以正常执行\n\n变量提升虽然有一些优点，但是他也会造成一定的问题，在ES6中提出了let、const来定义变量，它们就没有变量提升的机制。下面看一下变量提升可能会导致的问题：\n\n```javascript\nvar tmp = new Date();\n\nfunction fn(){\n\tconsole.log(tmp);\n\tif(false){\n\t\tvar tmp = 'hello world';\n\t}\n}\n\nfn();  // undefined\n```\n\n在这个函数中，原本是要打印出外层的tmp变量，但是因为变量提升的问题，内层定义的tmp被提到函数内部的最顶部，相当于覆盖了外层的tmp，所以打印结果为undefined。\n\n```javascript\nvar tmp = 'hello world';\n\nfor (var i = 0; i < tmp.length; i++) {\n\tconsole.log(tmp[i]);\n}\n\nconsole.log(i); // 11\n```\n\n由于遍历时定义的i会变量提升成为一个全局变量，在函数结束之后不会被销毁，所以打印出来11。\n\n### 18. 什么是尾调用，使用尾调用有什么好处？\n\n尾调用指的是函数的最后一步调用另一个函数。代码执行是基于执行栈的，所以当在一个函数里调用另一个函数时，会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这时可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。\n\n### 19.  **ES6**模块与**CommonJS**模块有什么异同？\n\nES6 Module和CommonJS模块的区别：\n\n- CommonJS是对模块的浅拷⻉，ES6 Module是对模块的引⽤，即ES6 Module只存只读，不能改变其值，也就是指针指向不能变，类似const；\n- import的接⼝是read-only（只读状态），不能修改其变量值。 即不能修改其变量的指针指向，但可以改变变量内部指针指向，可以对commonJS对重新赋值（改变指针指向），但是对ES6 Module赋值会编译报错。\n\nES6 Module和CommonJS模块的共同点：\n\n- CommonJS和ES6 Module都可以对引⼊的对象进⾏赋值，即对对象内部属性的值进⾏改变。\n\n### 20. 常见的DOM操作有哪些\n\n#### 1）DOM 节点的获取\n\nDOM 节点的获取的API及使用：\n\n```javascript\ngetElementById // 按照 id 查询\ngetElementsByTagName // 按照标签名查询\ngetElementsByClassName // 按照类名查询\nquerySelectorAll // 按照 css 选择器查询\n\n// 按照 id 查询\nvar imooc = document.getElementById('imooc') // 查询到 id 为 imooc 的元素\n// 按照标签名查询\nvar pList = document.getElementsByTagName('p')  // 查询到标签为 p 的集合\nconsole.log(divList.length)\nconsole.log(divList[0])\n// 按照类名查询\nvar moocList = document.getElementsByClassName('mooc') // 查询到类名为 mooc 的集合\n// 按照 css 选择器查询\nvar pList = document.querySelectorAll('.mooc') // 查询到类名为 mooc 的集合\n```\n\n#### 2）DOM 节点的创建\n\n**创建一个新节点，并把它添加到指定节点的后面。** 已知的 HTML 结构如下：\n\n```html\n<html>\n  <head>\n    <title>DEMO</title>\n  </head>\n  <body>\n    <div id=\"container\"> \n      <h1 id=\"title\">我是标题</h1>\n    </div>   \n  </body>\n</html>\n```\n\n要求添加一个有内容的 span 节点到 id 为 title 的节点后面，做法就是：\n\n```javascript\n// 首先获取父节点\nvar container = document.getElementById('container')\n// 创建新节点\nvar targetSpan = document.createElement('span')\n// 设置 span 节点的内容\ntargetSpan.innerHTML = 'hello world'\n// 把新创建的元素塞进父节点里去\ncontainer.appendChild(targetSpan)\n```\n\n#### 3）DOM 节点的删除\n\n**删除指定的 DOM 节点，** 已知的 HTML 结构如下：\n\n```javascript\n<html>\n  <head>\n    <title>DEMO</title>\n  </head>\n  <body>\n    <div id=\"container\"> \n      <h1 id=\"title\">我是标题</h1>\n    </div>   \n  </body>\n</html>\n```\n\n需要删除 id 为 title 的元素，做法是：\n\n```javascript\n// 获取目标元素的父元素\nvar container = document.getElementById('container')\n// 获取目标元素\nvar targetNode = document.getElementById('title')\n// 删除目标元素\ncontainer.removeChild(targetNode)\n```\n\n或者通过子节点数组来完成删除：\n\n```javascript\n// 获取目标元素的父元素var container = document.getElementById('container')// 获取目标元素var targetNode = container.childNodes[1]// 删除目标元素container.removeChild(targetNode)\n```\n\n#### 4）修改 DOM 元素\n\n修改 DOM 元素这个动作可以分很多维度，比如说移动 DOM 元素的位置，修改 DOM 元素的属性等。\n\n**将指定的两个 DOM 元素交换位置，** 已知的 HTML 结构如下：\n\n```javascript\n<html>\n  <head>\n    <title>DEMO</title>\n  </head>\n  <body>\n    <div id=\"container\"> \n      <h1 id=\"title\">我是标题</h1>\n      <p id=\"content\">我是内容</p>\n    </div>   \n  </body>\n</html>\n```\n\n现在需要调换 title 和 content 的位置，可以考虑 insertBefore 或者 appendChild：\n\n```javascript\n// 获取父元素\nvar container = document.getElementById('container')   \n \n// 获取两个需要被交换的元素\nvar title = document.getElementById('title')\nvar content = document.getElementById('content')\n// 交换两个元素，把 content 置于 title 前面\ncontainer.insertBefore(content, title)\n```\n\n### 21. use strict是什么意思 ? 使用它区别是什么？\n\nuse strict 是一种 ECMAscript5 添加的（严格模式）运行模式，这种模式使得 Javascript 在更严格的条件下运行。设立严格模式的目的如下：\n\n- 消除 Javascript 语法的不合理、不严谨之处，减少怪异行为;\n- 消除代码运行的不安全之处，保证代码运行的安全；\n- 提高编译器效率，增加运行速度；\n- 为未来新版本的 Javascript 做好铺垫。\n\n区别：\n\n- 禁止使用 with 语句。\n- 禁止 this 关键字指向全局对象。\n- 对象不能有重名的属性。\n\n### 22. 如何判断一个对象是否属于某个类？\n\n- 第一种方式，使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n- 第二种方式，通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写。\n- 第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString() 方法来打印对象的[[Class]] 属性来进行判断。\n\n### 23. 强类型语言和弱类型语言的区别\n\n- **强类型语言**：强类型语言也称为强类型定义语言，是一种总是强制类型定义的语言，要求变量的使用要严格符合定义，所有变量都必须先定义后使用。Java和C++等语言都是强制类型定义的，也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。例如你有一个整数，如果不显式地进行转换，你不能将其视为一个字符串。\n- **弱类型语言**：弱类型语言也称为弱类型定义语言，与强类型定义相反。JavaScript语言就属于弱类型语言。简单理解就是一种变量类型可以被忽略的语言。比如JavaScript是弱类型定义的，在JavaScript中就可以将字符串'12'和整数3进行连接得到字符串'123'，在相加的时候会进行强制类型转换。\n\n两者对比：强类型语言在速度上可能略逊色于弱类型语言，但是强类型语言带来的严谨性可以有效地帮助避免许多错误。\n\n### 24. 解释性语言和编译型语言的区别\n\n（1）解释型语言 使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行。是代码在执行时才被解释器一行行动态翻译和执行，而不是在执行之前就完成翻译。解释型语言不需要事先编译，其直接将源代码解释成机器码并立即执行，所以只要某一平台提供了相应的解释器即可运行该程序。其特点总结如下\n\n- 解释型语言每次运行都需要将源代码解释称机器码并执行，效率较低；\n- 只要平台提供相应的解释器，就可以运行源代码，所以可以方便源程序移植；\n- JavaScript、Python等属于解释型语言。\n\n（2）编译型语言 使用专门的编译器，针对特定的平台，将高级语言源代码一次性的编译成可被该平台硬件执行的机器码，并包装成该平台所能识别的可执行性程序的格式。在编译型语言写的程序执行之前，需要一个专门的编译过程，把源代码编译成机器语言的文件，如exe格式的文件，以后要再运行时，直接使用编译结果即可，如直接运行exe文件。因为只需编译一次，以后运行时不需要编译，所以编译型语言执行效率高。其特点总结如下：\n\n- 一次性的编译成平台相关的机器语言文件，运行时脱离开发环境，运行效率高；\n- 与特定平台相关，一般无法移植到其他平台；\n- C、C++等属于编译型语言。\n\n**两者主要区别在于：** 前者源程序编译后即可在该平台运行，后者是在运行期间才编译。所以前者运行速度快，后者跨平台性好。\n\n### 25. for...in和for...of的区别\n\nfor…of 是ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，和ES3中的for…in的区别如下\n\n- for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；\n- for… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；\n- 对于数组的遍历，for…in 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，for…of 只返回数组的下标对应的属性值；\n\n**总结：** for...in 循环主要是为了遍历对象而生，不适用于遍历数组；for...of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。\n\n### 26. 如何使用for...of遍历对象\n\nfor…of是作为ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，普通的对象用for..of遍历是会报错的。\n\n如果需要遍历的对象是类数组对象，用Array.from转成数组即可。\n\n```javascript\nvar obj = {\n    0:'one',\n    1:'two',\n    length: 2\n};\nobj = Array.from(obj);\nfor(var k of obj){\n    console.log(k)\n}\n```\n\n如果不是类数组对象，就给对象添加一个[Symbol.iterator]属性，并指向一个迭代器即可。\n\n```javascript\n//方法一：\nvar obj = {\n    a:1,\n    b:2,\n    c:3\n};\n\nobj[Symbol.iterator] = function(){\n\tvar keys = Object.keys(this);\n\tvar count = 0;\n\treturn {\n\t\tnext(){\n\t\t\tif(count<keys.length){\n\t\t\t\treturn {value: obj[keys[count++]],done:false};\n\t\t\t}else{\n\t\t\t\treturn {value:undefined,done:true};\n\t\t\t}\n\t\t}\n\t}\n};\n\nfor(var k of obj){\n\tconsole.log(k);\n}\n\n\n// 方法二\nvar obj = {\n    a:1,\n    b:2,\n    c:3\n};\nobj[Symbol.iterator] = function*(){\n    var keys = Object.keys(obj);\n    for(var k of keys){\n        yield [k,obj[k]]\n    }\n};\n\nfor(var [k,v] of obj){\n    console.log(k,v);\n}\n```\n\n### 27. ajax、axios、fetch的区别\n\n**（1）AJAX** Ajax 即“AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。其缺点如下：\n\n- 本身是针对MVC编程，不符合前端MVVM的浪潮\n- 基于原生XHR开发，XHR本身的架构不清晰\n- 不符合关注分离（Separation of Concerns）的原则\n- 配置和调用方式非常混乱，而且基于事件的异步模型不友好。\n\n**（2）Fetch** fetch号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象。Fetch是基于promise设计的。Fetch的代码结构比起ajax简单多。**fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象**。\n\nfetch的优点：\n\n- 语法简洁，更加语义化\n- 基于标准 Promise 实现，支持 async/await\n- 更加底层，提供的API丰富（request, response）\n- 脱离了XHR，是ES规范里新的实现方式\n\nfetch的缺点：\n\n- fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。\n- fetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: 'include'})\n- fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费\n- fetch没有办法原生监测请求的进度，而XHR可以\n\n**（3）Axios** Axios 是一种基于Promise封装的HTTP客户端，其特点如下：\n\n- 浏览器端发起XMLHttpRequests请求\n- node端发起http请求\n- 支持Promise API\n- 监听请求和返回\n- 对请求和返回进行转化\n- 取消请求\n- 自动转换json数据\n- 客户端支持抵御XSRF攻击\n\n### 28. 数组的遍历方法有哪些\n\n| **方法**                  | **是否改变原数组** | **特点**                                                     |\n| ------------------------- | ------------------ | ------------------------------------------------------------ |\n| forEach()                 | 否                 | 数组方法，不改变原数组，没有返回值                           |\n| map()                     | 否                 | 数组方法，不改变原数组，有返回值，可链式调用                 |\n| filter()                  | 否                 | 数组方法，过滤数组，返回包含符合条件的元素的数组，可链式调用 |\n| for...of                  | 否                 | for...of遍历具有Iterator迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的obj对象，将异步循环变成同步循环 |\n| every() 和 some()         | 否                 | 数组方法，some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false. |\n| find() 和 findIndex()     | 否                 | 数组方法，find()返回的是第一个符合条件的值；findIndex()返回的是第一个返回条件的值的索引值 |\n| reduce() 和 reduceRight() | 否                 | 数组方法，reduce()对数组正序操作；reduceRight()对数组逆序操作 |\n\n遍历方法的详细解释：[《细数JavaScript中那些遍历和循环》](https://link.juejin.cn?target=https%3A%2F%2Fcuggz.blog.csdn.net%2Farticle%2Fdetails%2F107649549)\n\n### 29. forEach和map方法有什么区别\n\n这方法都是用来遍历数组的，两者区别如下：\n\n- forEach()方法会针对每一个元素执行提供的函数，对数据的操作会改变原数组，该方法没有返回值；\n- map()方法不会改变原数组的值，返回一个新数组，新数组中的值为原数组调用函数处理之后的值；\n\n## 四、原型与原型链\n\n### 1. 对原型、原型链的理解\n\n在JavaScript中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在浏览器中都实现了 **proto** 属性来访问这个属性，但是最好不要使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法来获取对象的原型。\n\n当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。\n\n**特点：** JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。\n\n![image-20230610112915792](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112915792.png)\n\n### 2. 原型修改、重写\n\n```javascript\nfunction Person(name) {\n    this.name = name\n}\n// 修改原型\nPerson.prototype.getName = function() {}\nvar p = new Person('hello')\nconsole.log(p.__proto__ === Person.prototype) // true\nconsole.log(p.__proto__ === p.constructor.prototype) // true\n// 重写原型\nPerson.prototype = {\n    getName: function() {}\n}\nvar p = new Person('hello')\nconsole.log(p.__proto__ === Person.prototype)        // true\nconsole.log(p.__proto__ === p.constructor.prototype) // false\n```\n\n可以看到修改原型的时候p的构造函数不是指向Person了，因为直接给Person的原型对象直接用对象赋值时，它的构造函数指向的了根构造函数Object，所以这时候`p.constructor === Object` ，而不是`p.constructor === Person`。要想成立，就要用constructor指回来：\n\n```javascript\nPerson.prototype = {\n    getName: function() {}\n}\nvar p = new Person('hello')\np.constructor = Person\nconsole.log(p.__proto__ === Person.prototype)        // true\nconsole.log(p.__proto__ === p.constructor.prototype) // true\n```\n\n### 3. 原型链指向\n\n```javascript\np.__proto__  // Person.prototype\nPerson.prototype.__proto__  // Object.prototype\np.__proto__.__proto__ //Object.prototype\np.__proto__.constructor.prototype.__proto__ // Object.prototype\nPerson.prototype.constructor.prototype.__proto__ // Object.prototype\np1.__proto__.constructor // Person\nPerson.prototype.constructor  // Person\n```\n\n### 4. 原型链的终点是什么？如何打印出原型链的终点？\n\n由于`Object`是构造函数，原型链终点是`Object.prototype.__proto__`，而`Object.prototype.__proto__=== null // true`，所以，原型链的终点是`null`。原型链上的所有原型都是对象，所有的对象最终都是由`Object`构造的，而`Object.prototype`的下一级是`Object.prototype.__proto__`。\n\n![image-20230610112941072](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112941072.png)\n\n### 5. 如何获得对象非原型链上的属性？\n\n使用后`hasOwnProperty()`方法来判断属性是否属于原型链的属性：\n\n```javascript\nfunction iterate(obj){\n   var res=[];\n   for(var key in obj){\n        if(obj.hasOwnProperty(key))\n           res.push(key+': '+obj[key]);\n   }\n   return res;\n} \n```\n\n## 五、执行上下文/作用域链/闭包\n\n### 1. 对闭包的理解\n\n**闭包是指有权访问另一个函数作用域中变量的函数**，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。\n\n闭包有两个常用的用途；\n\n- 闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。\n- 闭包的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。\n\n比如，函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。\n\n```javascript\nfunction A() {\n  let a = 1\n  window.B = function () {\n      console.log(a)\n  }\n}\nA()\nB() // 1\n```\n\n在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。经典面试题：循环中使用闭包解决 var 定义函数的问题\n\n```javascript\nfor (var i = 1; i <= 5; i++) {\n  setTimeout(function timer() {\n    console.log(i)\n  }, i * 1000)\n}\n```\n\n首先因为 `setTimeout` 是个异步函数，所以会先把循环全部执行完毕，这时候 `i` 就是 6 了，所以会输出一堆 6。解决办法有三种：\n\n- 第一种是使用闭包的方式\n\n```javascript\nfor (var i = 1; i <= 5; i++) {  ;(function(j) {    setTimeout(function timer() {      console.log(j)    }, j * 1000)  })(i)}\n```\n\n在上述代码中，首先使用了立即执行函数将 `i` 传入函数内部，这个时候值就被固定在了参数 `j` 上面不会改变，当下次执行 `timer` 这个闭包的时候，就可以使用外部函数的变量 `j`，从而达到目的。\n\n- 第二种就是使用 `setTimeout` 的第三个参数，这个参数会被当成 `timer` 函数的参数传入。\n\n```javascript\nfor (var i = 1; i <= 5; i++) {\n  setTimeout(\n    function timer(j) {\n      console.log(j)\n    },\n    i * 1000,\n    i\n  )\n}\n```\n\n- 第三种就是使用 `let` 定义 `i` 了来解决问题了，这个也是最为推荐的方式\n\n```javascript\nfor (let i = 1; i <= 5; i++) {\n  setTimeout(function timer() {\n    console.log(i)\n  }, i * 1000)\n}\n```\n\n### 2. 对作用域、作用域链的理解\n\n##### 1）全局作用域和函数作用域\n\n（1）全局作用域\n\n- 最外层函数和最外层函数外面定义的变量拥有全局作用域\n- 所有未定义直接赋值的变量自动声明为全局作用域\n- 所有window对象的属性拥有全局作用域\n- 全局作用域有很大的弊端，过多的全局作用域变量会污染全局命名空间，容易引起命名冲突。\n\n（2）函数作用域\n\n- 函数作用域声明在函数内部的变零，一般只有固定的代码片段可以访问到\n- 作用域是分层的，内层作用域可以访问外层作用域，反之不行\n\n##### 2）块级作用域\n\n- 使用ES6中新增的let和const指令可以声明块级作用域，块级作用域可以在函数中创建也可以在一个代码块中的创建（由`{ }`包裹的代码片段）\n- let和const声明的变量不会有变量提升，也不可以重复声明\n- 在循环中比较适合绑定块级作用域，这样就可以把声明的计数器变量限制在循环内部。\n\n**作用域链：** 在当前作用域中查找所需变量，但是该作用域没有这个变量，那这个变量就是自由变量。如果在自己作用域找不到该变量就去父级作用域查找，依次向上级作用域查找，直到访问到window对象就被终止，这一层层的关系就是作用域链。\n\n作用域链的作用是**保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。**\n\n作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。\n\n当查找一个变量时，如果当前执行环境中没有找到，可以沿着作用域链向后查找。\n\n### 3. 对执行上下文的理解\n\n##### 1. 执行上下文类型\n\n**（1）全局执行上下文**\n\n任何不在函数内部的都是全局执行上下文，它首先会创建一个全局的window对象，并且设置this的值等于这个全局对象，一个程序中只有一个全局执行上下文。\n\n**（2）函数执行上下文**\n\n当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。\n\n**（3）**`eval`**函数执行上下文**\n\n执行在eval函数中的代码会有属于他自己的执行上下文，不过eval函数不常使用，不做介绍。\n\n##### 2. 执行上下文栈\n\n- JavaScript引擎使用执行上下文栈来管理执行上下文\n- 当JavaScript执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。\n\n```javascript\nlet a = 'Hello World!';\nfunction first() {\n  console.log('Inside first function');\n  second();\n  console.log('Again inside first function');\n}\nfunction second() {\n  console.log('Inside second function');\n}\nfirst();\n//执行顺序\n//先执行second(),在执行first()\n```\n\n##### 3. 创建执行上下文\n\n创建执行上下文有两个阶段：**创建阶段**和**执行阶段**\n\n**1）创建阶段**\n\n（1）this绑定\n\n- 在全局执行上下文中，this指向全局对象（window对象）\n- 在函数执行上下文中，this指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined\n\n（2）创建词法环境组件\n\n- 词法环境是一种有**标识符——变量映射**的数据结构，标识符是指变量/函数名，变量是对实际对象或原始数据的引用。\n- 词法环境的内部有两个组件：**加粗样式**：环境记录器:用来储存变量个函数声明的实际位置**外部环境的引用**：可以访问父级作用域\n\n（3）创建变量环境组件\n\n- 变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。\n\n**2）执行阶段** 此阶段会完成对变量的分配，最后执行完代码。\n\n**简单来说执行上下文就是指：**\n\n在执行一点JS代码之前，需要先解析代码。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。这一步执行完了，才开始正式的执行程序。\n\n在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。\n\n- 全局上下文：变量定义，函数声明\n- 函数上下文：变量定义，函数声明，`this`，`arguments`\n\n","source":"_posts/js/JS复习.md","raw":"---\ntitle: JS复习\ntags:\n  - 前端\n  - JS\ncategories: 面试\nkeywords: '前端,面试,JS'\ndescription: JS复习记录\ntop_img: 'https://raw.githubusercontent.com/why862555625/images/main/images/444.jpg'\nsticky: 数值越大越靠前\ncover: 'https://raw.githubusercontent.com/why862555625/images/main/images/444.jpg'\ncomments: false评论\nabbrlink: d9795d86\ndate: 2023-05-23 15:21:13\nupdated: 2023-05-23 15:21:13\n---\n\nJS复习记录\n\n<!-- more -->\n\n![image-20230610112558784](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112558784.png)\n\n## 一、数据类型\n\n### 1. JavaScript有哪些数据类型，它们的区别？\n\nJavaScript共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。\n\n其中 Symbol 和 BigInt 是ES6 中新增的数据类型：\n\n- Symbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。\n- BigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。\n\n这些数据可以分为原始数据类型和引用数据类型：\n\n- 栈：原始数据类型（Undefined、Null、Boolean、Number、String）\n- 堆：引用数据类型（对象、数组和函数）\n\n两种类型的区别在于**存储位置的不同：**\n\n- 原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；\n- 引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。\n\n堆和栈的概念存在于数据结构和操作系统内存中，在数据结构中：\n\n- 在数据结构中，栈中数据的存取方式为先进后出。\n- 堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。\n\n在操作系统中，内存被分为栈区和堆区：\n\n- 栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。\n- 堆区内存一般由开发着分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。\n\n### 2. 数据类型检测的方式有哪些\n\n**（1）typeof**\n\n```javascript\nconsole.log(typeof 2);               // number\nconsole.log(typeof true);            // boolean\nconsole.log(typeof 'str');           // string\nconsole.log(typeof []);              // object    \nconsole.log(typeof function(){});    // function\nconsole.log(typeof {});              // object\nconsole.log(typeof undefined);       // undefined\nconsole.log(typeof null);            // object\n```\n\n其中数组、对象、null都会被判断为object，其他判断都正确。\n\n**（2）instanceof**\n\n`instanceof`可以正确判断对象的类型，**其内部运行机制是判断在其原型链中能否找到该类型的原型**。\n\n```javascript\nconsole.log(2 instanceof Number);                    // false\nconsole.log(true instanceof Boolean);                // false \nconsole.log('str' instanceof String);                // false \n \nconsole.log([] instanceof Array);                    // true\nconsole.log(function(){} instanceof Function);       // true\nconsole.log({} instanceof Object);                   // true\n```\n\n可以看到，`instanceof`**只能正确判断引用数据类型**，而不能判断基本数据类型。`instanceof` 运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 `prototype` 属性。\n\n**（3） constructor**\n\n```javascript\nconsole.log((2).constructor === Number); // true\nconsole.log((true).constructor === Boolean); // true\nconsole.log(('str').constructor === String); // true\nconsole.log(([]).constructor === Array); // true\nconsole.log((function() {}).constructor === Function); // true\nconsole.log(({}).constructor === Object); // true\n```\n\n`constructor`有两个作用，一是判断数据的类型，二是对象实例通过 `constrcutor` 对象访问它的构造函数。需要注意，如果创建一个对象来改变它的原型，`constructor`就不能用来判断数据类型了：\n\n```javascript\nfunction Fn(){};\n \nFn.prototype = new Array();\n \nvar f = new Fn();\n \nconsole.log(f.constructor===Fn);    // false\nconsole.log(f.constructor===Array); // true\n```\n\n**（4）Object.prototype.toString.call()**\n\n`Object.prototype.toString.call()` 使用 Object 对象的原型方法 toString 来判断数据类型：\n\n```javascript\nvar a = Object.prototype.toString;\n \nconsole.log(a.call(2));\nconsole.log(a.call(true));\nconsole.log(a.call('str'));\nconsole.log(a.call([]));\nconsole.log(a.call(function(){}));\nconsole.log(a.call({}));\nconsole.log(a.call(undefined));\nconsole.log(a.call(null));\n```\n\n同样是检测对象obj调用toString方法，obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样，这是为什么？\n\n这是因为toString是Object的原型方法，而Array、function等**类型作为Object的实例，都重写了toString方法**。不同的对象类型调用toString方法时，根据原型链的知识，调用的是对应的重写之后的toString方法（function类型返回内容为函数体的字符串，Array类型返回元素组成的字符串…），而不会去调用Object上原型toString方法（返回对象的具体类型），所以采用obj.toString()不能得到其对象类型，只能将obj转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用Object原型上的toString方法。\n\n### 3. 判断数组的方式有哪些\n\n- 通过Object.prototype.toString.call()做判断\n\n```javascript\nObject.prototype.toString.call(obj).slice(8,-1) === 'Array';\n```\n\n- 通过原型链做判断\n\n```javascript\nobj.__proto__ === Array.prototype;\n```\n\n- 通过ES6的Array.isArray()做判断\n\n```javascript\nArray.isArrray(obj);\n```\n\n- 通过instanceof做判断\n\n```javascript\nobj instanceof Array\n```\n\n- 通过Array.prototype.isPrototypeOf\n\n```javascript\nArray.prototype.isPrototypeOf(obj)\n```\n\n### 4. null和undefined区别\n\n首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。\n\nundefined 代表的含义是**未定义**，null 代表的含义是**空对象**。一般变量声明了但还没有定义的时候会返回 undefined，null主要用于赋值给一些可能会返回对象的变量，作为初始化。\n\nundefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。\n\n当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 “object”，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。\n\n### 5. typeof null 的结果是什么，为什么？\n\ntypeof null 的结果是Object。\n\n在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的 **类型标签(1-3 bits)** 以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型：\n\n```javascript\n000: object   - 当前存储的数据指向一个对象。\n  1: int      - 当前存储的数据是一个 31 位的有符号整数。\n010: double   - 当前存储的数据指向一个双精度的浮点数。\n100: string   - 当前存储的数据指向一个字符串。\n110: boolean  - 当前存储的数据是布尔值。\n```\n\n如果最低位是 1，则类型标签标志位的长度只有一位；如果最低位是 0，则类型标签标志位的长度占三位，为存储其他四种数据类型提供了额外两个 bit 的长度。\n\n有两种特殊数据类型：\n\n- undefined的值是 (-2)30(一个超出整数范围的数字)；\n- null 的值是机器码 NULL 指针(null 指针的值全是 0)\n\n那也就是说null的类型标签也是000，和Object的类型标签一样，所以会被判定为Object。\n\n### 6. intanceof 操作符的实现原理及实现\n\ninstanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n\n```javascript\nfunction myInstanceof(left, right) {\n  // 获取对象的原型\n  let proto = Object.getPrototypeOf(left)\n  // 获取构造函数的 prototype 对象\n  let prototype = right.prototype; \n \n  // 判断构造函数的 prototype 对象是否在对象的原型链上\n  while (true) {\n    if (!proto) return false;\n    if (proto === prototype) return true;\n    // 如果没有找到，就继续从其原型上找，Object.getPrototypeOf方法用来获取指定对象的原型\n    proto = Object.getPrototypeOf(proto);\n  }\n}\n```\n\n### 7. 为什么0.1+0.2 ! == 0.3，如何让其相等  \n\n在开发过程中遇到类似这样的问题：\n\n```javascript\nlet n1 = 0.1, n2 = 0.2\nconsole.log(n1 + n2)  // 0.30000000000000004\n```\n\n这里得到的不是想要的结果，要想等于0.3，就要把它进行转化：\n\n```javascript\n(n1 + n2).toFixed(2) // 注意，toFixed为四舍五入\n```\n\n`toFixed(num)` 方法可把 Number 四舍五入为指定小数位数的数字。那为什么会出现这样的结果呢？\n\n计算机是通过二进制的方式存储数据的，所以计算机计算0.1+0.2的时候，实际上是计算的两个数的二进制的和。0.1的二进制是`0.0001100110011001100...`（1100循环），0.2的二进制是：`0.00110011001100...`（1100循环），这两个数的二进制都是无限循环的数。那JavaScript是如何处理无限循环的二进制小数呢？\n\n一般我们认为数字包括整数和小数，但是在 JavaScript 中只有一种数字类型：Number，它的实现遵循IEEE 754标准，使用64位固定长度来表示，也就是标准的double双精度浮点数。在二进制科学表示法中，双精度浮点数的小数部分最多只能保留52位，再加上前面的1，其实就是保留53位有效数字，剩余的需要舍去，遵从“0舍1入”的原则。\n\n根据这个原则，0.1和0.2的二进制数相加，再转化为十进制数就是：`0.30000000000000004`。\n\n下面看一下**双精度数是如何保存**的： ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0cb225cf71d748a8b2d6a5615e402711~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)\n\n- 第一部分（蓝色）：用来存储符号位（sign），用来区分正负数，0表示正数，占用1位\n- 第二部分（绿色）：用来存储指数（exponent），占用11位\n- 第三部分（红色）：用来存储小数（fraction），占用52位\n\n对于0.1，它的二进制为：\n\n```javascript\n0.00011001100110011001100110011001100110011001100110011001 10011...\n```\n\n转为科学计数法（科学计数法的结果就是浮点数）：\n\n```javascript\n1.1001100110011001100110011001100110011001100110011001*2^-4\n```\n\n可以看出0.1的符号位为0，指数位为-4，小数位为：\n\n```javascript\n1001100110011001100110011001100110011001100110011001\n```\n\n那么问题又来了，**指数位是负数，该如何保存**呢？\n\nIEEE标准规定了一个偏移量，对于指数部分，每次都加这个偏移量进行保存，这样即使指数是负数，那么加上这个偏移量也就是正数了。由于JavaScript的数字是双精度数，这里就以双精度数为例，它的指数部分为11位，能表示的范围就是0~2047，IEEE固定**双精度数的偏移量为1023**。\n\n- 当指数位不全是0也不全是1时(规格化的数值)，IEEE规定，阶码计算公式为 e-Bias。 此时e最小值是1，则1-1023= -1022，e最大值是2046，则2046-1023=1023，可以看到，这种情况下取值范围是`-1022~1013`。\n- 当指数位全部是0的时候(非规格化的数值)，IEEE规定，阶码的计算公式为1-Bias，即1-1023= -1022。\n- 当指数位全部是1的时候(特殊值)，IEEE规定这个浮点数可用来表示3个特殊值，分别是正无穷，负无穷，NaN。 具体的，小数位不为0的时候表示NaN；小数位为0时，当符号位s=0时表示正无穷，s=1时候表示负无穷。\n\n对于上面的0.1的指数位为-4，-4+1023 = 1019 转化为二进制就是：`1111111011`.\n\n所以，0.1表示为：\n\n```javascript\n0 1111111011 1001100110011001100110011001100110011001100110011001\n```\n\n说了这么多，是时候该最开始的问题了，如何实现0.1+0.2=0.3呢？\n\n对于这个问题，一个直接的解决方法就是设置一个误差范围，通常称为“机器精度”。对JavaScript来说，这个值通常为2-52，在ES6中，提供了`Number.EPSILON`属性，而它的值就是2-52，只要判断`0.1+0.2-0.3`是否小于`Number.EPSILON`，如果小于，就可以判断为0.1+0.2 ===0.3\n\n```javascript\nfunction numberepsilon(arg1,arg2){                   \n  return Math.abs(arg1 - arg2) < Number.EPSILON;        \n}        \n\nconsole.log(numberepsilon(0.1 + 0.2, 0.3)); // true\n```\n\n### 8. 如何获取安全的 undefined 值？\n\n因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。表达式 void ___ 没有返回值，因此返回结果是 undefined。void 并不改变表达式的结果，只是让表达式不返回值。因此可以用 void 0 来获得 undefined。\n\n### 9. typeof NaN 的结果是什么？\n\nNaN 指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel value，有特殊用途的常规值），用于指出数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。\n\n```javascript\ntypeof NaN; // \"number\"\n```\n\nNaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN !== NaN 为 true。\n\n### 10. isNaN 和 Number.isNaN 函数的区别？\n\n- 函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会返回 true ，会影响 NaN 的判断。\n- 函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN 的判断更为准确。\n\n### 12. 其他值到字符串的转换规则？\n\n- Null 和 Undefined 类型 ，null 转换为 \"null\"，undefined 转换为 \"undefined\"，\n- Boolean 类型，true 转换为 \"true\"，false 转换为 \"false\"。\n- Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。\n- Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。\n- 对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()）来返回内部属性 [[Class]] 的值，如\"[object Object]\"。如果对象有自己的 toString() 方法，字符串化时就会调用该方法并使用其返回值。\n\n### 13. 其他值到数字值的转换规则？\n\n- Undefined 类型的值转换为 NaN。\n- Null 类型的值转换为 0。\n- Boolean 类型的值，true 转换为 1，false 转换为 0。\n- String 类型的值转换如同使用 Number() 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。\n- Symbol 类型的值不能转换为数字，会报错。\n- 对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。\n\n为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。\n\n如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。\n\n### 14. 其他值到布尔类型的值的转换规则？\n\n以下这些是假值： • undefined • null • false • +0、-0 和 NaN • \"\"\n\n假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。\n\n### 15. || 和 && 操作符的返回值？\n\n|| 和 && 首先会对第一个操作数执行条件判断，如果其不是布尔值就先强制转换为布尔类型，然后再执行条件判断。\n\n- 对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。\n- && 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。\n\n|| 和 && 返回它们其中一个操作数的值，而非条件判断的结果\n\n### 16. Object.is() 与比较操作符 “===”、“==” 的区别？\n\n- 使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。\n- 使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。\n- 使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的。\n\n### 17. 什么是 JavaScript 中的包装类型？\n\n在 JavaScript 中，基本类型是没有属性和方法的，但是为了便于操作基本类型的值，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象，如：\n\n```javascript\nconst a = \"abc\";\na.length; // 3\na.toUpperCase(); // \"ABC\"\n```\n\n在访问`'abc'.length`时，JavaScript 将`'abc'`在后台转换成`String('abc')`，然后再访问其`length`属性。\n\nJavaScript也可以使用`Object`函数显式地将基本类型转换为包装类型：\n\n```javascript\nvar a = 'abc'\nObject(a) // String {\"abc\"}\n```\n\n也可以使用`valueOf`方法将包装类型倒转成基本类型：\n\n```javascript\nvar a = 'abc'\nvar b = Object(a)\nvar c = b.valueOf() // 'abc'\n```\n\n看看如下代码会打印出什么：\n\n```javascript\nvar a = new Boolean( false );\nif (!a) {\n\tconsole.log( \"Oops\" ); // never runs\n}\n```\n\n答案是什么都不会打印，因为虽然包裹的基本类型是`false`，但是`false`被包裹成包装类型后就成了对象，所以其非值为`false`，所以循环体中的内容不会运行。\n\n### 18. JavaScript 中如何进行隐式类型转换？\n\n首先要介绍`ToPrimitive`方法，这是 JavaScript 中每个值隐含的自带的方法，用来将值 （无论是基本类型值还是对象）转换为基本类型值。如果值为基本类型，则直接返回值本身；如果值为对象，其看起来大概是这样：\n\n```javascript\n/**\n* @obj 需要转换的对象\n* @type 期望的结果类型\n*/\nToPrimitive(obj,type)\n```\n\n`type`的值为`number`或者`string`。\n\n**（1）当**`type`**为**`number`**时规则如下：**\n\n- 调用`obj`的`valueOf`方法，如果为原始值，则返回，否则下一步；\n- 调用`obj`的`toString`方法，后续同上；\n- 抛出`TypeError` 异常。\n\n**（2）当**`type`**为**`string`**时规则如下：**\n\n- 调用`obj`的`toString`方法，如果为原始值，则返回，否则下一步；\n- 调用`obj`的`valueOf`方法，后续同上；\n- 抛出`TypeError` 异常。\n\n可以看出两者的主要区别在于调用`toString`和`valueOf`的先后顺序。默认情况下：\n\n- 如果对象为 Date 对象，则`type`默认为`string`；\n- 其他情况下，`type`默认为`number`。\n\n总结上面的规则，对于 Date 以外的对象，转换为基本类型的大概规则可以概括为一个函数：\n\n```javascript\nvar objToNumber = value => Number(value.valueOf().toString())\nobjToNumber([]) === 0\nobjToNumber({}) === NaN\n```\n\n而 JavaScript 中的隐式类型转换主要发生在`+、-、*、/`以及`==、>、<`这些运算符之间。而这些运算符只能操作基本类型值，所以在进行这些运算前的第一步就是将两边的值用`ToPrimitive`转换成基本类型，再进行操作。\n\n以下是基本类型的值在不同操作符的情况下隐式转换的规则 （对于对象，其会被`ToPrimitive`转换成基本类型，所以最终还是要应用基本类型转换规则）：\n\n1. `+`**操作符** `+`操作符的两边有至少一个`string`类型变量时，两边的变量都会被隐式转换为字符串；其他情况下两边的变量都会被转换为数字。\n\n```javascript\n1 + '23' // '123'\n 1 + false // 1 \n 1 + Symbol() // Uncaught TypeError: Cannot convert a Symbol value to a number\n '1' + false // '1false'\n false + true // 1\n```\n\n1. `-`、`*`、`\\`**操作符**\n\n`NaN`也是一个数字\n\n```javascript\n1 * '23' // 23\n 1 * false // 0\n 1 / 'aa' // NaN\n```\n\n1. **对于**`==`**操作符**\n\n操作符两边的值都尽量转成`number`：\n\n```javascript\n3 == true // false, 3 转为number为3，true转为number为1\n'0' == false //true, '0'转为number为0，false转为number为0\n'0' == 0 // '0'转为number为0\n```\n\n1. **对于**`<`**和**`>`**比较符**\n\n如果两边都是字符串，则比较字母表顺序：\n\n```javascript\n'ca' < 'bd' // false\n'a' < 'b' // true\n```\n\n其他情况下，转换为数字再比较：\n\n```javascript\n'12' < 13 // true\nfalse > -1 // true\n```\n\n以上说的是基本类型的隐式转换，而对象会被`ToPrimitive`转换为基本类型再进行转换：\n\n```javascript\nvar a = {}\na > 2 // false\n```\n\n其对比过程如下：\n\n```javascript\na.valueOf() // {}, 上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步\na.toString() // \"[object Object]\"，现在是一个字符串了\nNumber(a.toString()) // NaN，根据上面 < 和 > 操作符的规则，要转换成数字\nNaN > 2 //false，得出比较结果\n```\n\n又比如：\n\n```javascript\nvar a = {name:'Jack'}\nvar b = {age: 18}\na + b // \"[object Object][object Object]\"\n```\n\n运算过程如下：\n\n```javascript\na.valueOf() // {}，上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步\na.toString() // \"[object Object]\"\nb.valueOf() // 同理\nb.toString() // \"[object Object]\"\na + b // \"[object Object][object Object]\"\n```\n\n### 19. `+` 操作符什么时候用于字符串的拼接？\n\n根据 ES5 规范，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。\n\n简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字加法。\n\n那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。\n\n### 20. 为什么会有**BigInt**的提案？\n\nJavaScript中Number.MAX_SAFE_INTEGER表示最⼤安全数字，计算结果是9007199254740991，即在这个数范围内不会出现精度丢失（⼩数除外）。但是⼀旦超过这个范围，js就会出现计算不准确的情况，这在⼤数计算的时候不得不依靠⼀些第三⽅库进⾏解决，因此官⽅提出了BigInt来解决此问题。\n\n### 21. object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别\n\n扩展运算符：\n\n```javascript\nlet outObj = {\n  inObj: {a: 1, b: 2}\n}\nlet newObj = {...outObj}\nnewObj.inObj.a = 2\nconsole.log(outObj) // {inObj: {a: 2, b: 2}}\n```\n\nObject.assign():\n\n```javascript\nlet outObj = {\n  inObj: {a: 1, b: 2}\n}\nlet newObj = Object.assign({}, outObj)\nnewObj.inObj.a = 2\nconsole.log(outObj) // {inObj: {a: 2, b: 2}}\n```\n\n可以看到，两者都是浅拷贝。\n\n- Object.assign()方法接收的第一个参数作为目标对象，后面的所有参数作为源对象。然后把所有的源对象合并到目标对象中。它会修改了一个对象，因此会触发 ES6 setter。\n- 扩展操作符（…）使用它时，数组或对象中的每一个值都会被拷贝到一个新的数组或对象中。它不复制继承的属性或类的属性，但是它会复制ES6的 symbols 属性。\n\n## 二、ES6\n\n### 1. let、const、var的区别\n\n**（1）块级作用域：** 块作用域由 `{ }`包括，let和const具有块级作用域，var不存在块级作用域。块级作用域解决了ES5中的两个问题：\n\n- 内层变量可能覆盖外层变量\n- 用来计数的循环变量泄露为全局变量\n\n**（2）变量提升：** var存在变量提升，let和const不存在变量提升，即在变量只能在声明之后使用，否在会报错。\n\n**（3）给全局添加属性：** 浏览器的全局对象是window，Node的全局对象是global。var声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。\n\n**（4）重复声明：** var声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const和let不允许重复声明变量。\n\n**（5）暂时性死区：** 在使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为**暂时性死区**。使用var声明的变量不存在暂时性死区。\n\n**（6）初始值设置：** 在变量声明时，var 和 let 可以不用设置初始值。而const声明变量必须设置初始值。\n\n**（7）指针指向：** let和const都是ES6新增的用于创建变量的语法。 let创建的变量是可以更改指针指向（可以重新赋值）。但const声明的变量是不允许改变指针的指向。\n\n| **区别**           | **var** | **let** | **const** |\n| ------------------ | ------- | ------- | --------- |\n| 是否有块级作用域   | ×       | ✔️       | ✔️         |\n| 是否存在变量提升   | ✔️       | ×       | ×         |\n| 是否添加全局属性   | ✔️       | ×       | ×         |\n| 能否重复声明变量   | ✔️       | ×       | ×         |\n| 是否存在暂时性死区 | ×       | ✔️       | ✔️         |\n| 是否必须设置初始值 | ×       | ×       | ✔️         |\n| 能否改变指针指向   | ✔️       | ✔️       | ×         |\n\n### 2. const对象的属性可以修改吗\n\nconst保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。对于基本类型的数据（数值、字符串、布尔值），其值就保存在变量指向的那个内存地址，因此等同于常量。\n\n但对于引用类型的数据（主要是对象和数组）来说，变量指向数据的内存地址，保存的只是一个指针，const只能保证这个指针是固定不变的，至于它指向的数据结构是不是可变的，就完全不能控制了。\n\n### 3. 如果new一个箭头函数的会怎么样\n\n箭头函数是ES6中的提出来的，它没有prototype，也没有自己的this指向，更不可以使用arguments参数，所以不能New一个箭头函数。\n\nnew操作符的实现步骤如下：\n\n1. 创建一个对象\n2. 将构造函数的作用域赋给新对象（也就是将对象的__proto__属性指向构造函数的prototype属性）\n3. 指向构造函数中的代码，构造函数中的this指向该对象（也就是为这个对象添加属性和方法）\n4. 返回新的对象\n\n所以，上面的第二、三步，箭头函数都是没有办法执行的。\n\n### 4. 箭头函数与普通函数的区别\n\n**（1）箭头函数比普通函数更加简洁**\n\n- 如果没有参数，就直接写一个空括号即可\n- 如果只有一个参数，可以省去参数的括号\n- 如果有多个参数，用逗号分割\n- 如果函数体的返回值只有一句，可以省略大括号\n- 如果函数体不需要返回值，且只有一句话，可以给这个语句前面加一个void关键字。最常见的就是调用一个函数：\n\n```javascript\nlet fn = () => void doesNotReturn();\n```\n\n**（2）箭头函数没有自己的this**\n\n箭头函数不会创建自己的this， 所以它没有自己的this，它只会在自己作用域的上一层继承this。所以箭头函数中this的指向在它在定义时已经确定了，之后不会改变。\n\n**（3）箭头函数继承来的this指向永远不会改变**\n\n```javascript\nvar id = 'GLOBAL';\nvar obj = {\n  id: 'OBJ',\n  a: function(){\n    console.log(this.id);\n  },\n  b: () => {\n    console.log(this.id);\n  }\n};\nobj.a();    // 'OBJ'\nobj.b();    // 'GLOBAL'\nnew obj.a()  // undefined\nnew obj.b()  // Uncaught TypeError: obj.b is not a constructor\n```\n\n对象obj的方法b是使用箭头函数定义的，这个函数中的this就永远指向它定义时所处的全局执行环境中的this，即便这个函数是作为对象obj的方法调用，this依旧指向Window对象。需要注意，定义对象的大括号`{}`是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中。\n\n**（4）call()、apply()、bind()等方法不能改变箭头函数中this的指向**\n\n```javascript\nvar id = 'Global';\nlet fun1 = () => {\n    console.log(this.id)\n};\nfun1();                     // 'Global'\nfun1.call({id: 'Obj'});     // 'Global'\nfun1.apply({id: 'Obj'});    // 'Global'\nfun1.bind({id: 'Obj'})();   // 'Global'\n```\n\n**（5）箭头函数不能作为构造函数使用**\n\n构造函数在new的步骤在上面已经说过了，实际上第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，且this指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。\n\n**（6）箭头函数没有自己的arguments**\n\n箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是它外层函数的arguments值。\n\n**（7）箭头函数没有prototype**\n\n**（8）箭头函数不能用作Generator函数，不能使用yeild关键字**\n\n### 5. 箭头函数的**this**指向哪⾥？\n\n箭头函数不同于传统JavaScript中的函数，箭头函数并没有属于⾃⼰的this，它所谓的this是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值，并且由于没有属于⾃⼰的this，所以是不会被new调⽤的，这个所谓的this也不会被改变。\n\n可以⽤Babel理解⼀下箭头函数:\n\n```javascript\n// ES6 \nconst obj = { \n  getArrow() { \n    return () => { \n      console.log(this === obj); \n    }; \n  } \n}\n```\n\n转化后：\n\n```javascript\n// ES5，由 Babel 转译\nvar obj = { \n   getArrow: function getArrow() { \n     var _this = this; \n     return function () { \n        console.log(_this === obj); \n     }; \n   } \n};\n```\n\n### 6. 扩展运算符的作用及使用场景\n\n**（1）对象扩展运算符**\n\n对象的扩展运算符(...)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中。\n\n```javascript\nlet bar = { a: 1, b: 2 };\nlet baz = { ...bar }; // { a: 1, b: 2 }\n```\n\n上述方法实际上等价于:\n\n```javascript\nlet bar = { a: 1, b: 2 };\nlet baz = Object.assign({}, bar); // { a: 1, b: 2 }\n```\n\n`Object.assign`方法用于对象的合并，将源对象`（source）`的所有可枚举属性，复制到目标对象`（target）`。`Object.assign`方法的第一个参数是目标对象，后面的参数都是源对象。(**如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性**)。\n\n同样，如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。\n\n```javascript\nlet bar = {a: 1, b: 2};\nlet baz = {...bar, ...{a:2, b: 4}};  // {a: 2, b: 4}\n```\n\n利用上述特性就可以很方便的修改对象的部分属性。在`redux`中的`reducer`函数规定必须是**一个纯函数**，`reducer`中的`state`对象要求不能直接修改，可以通过扩展运算符把修改路径的对象都复制一遍，然后产生一个新的对象返回。\n\n需要注意：**扩展运算符对对象实例的拷贝属于浅拷贝**。\n\n**（2）数组扩展运算符**\n\n数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。\n\n```javascript\nconsole.log(...[1, 2, 3])\n// 1 2 3\nconsole.log(...[1, [2, 3, 4], 5])\n// 1 [2, 3, 4] 5\n```\n\n下面是数组的扩展运算符的应用：\n\n- **将数组转换为参数序列**\n\n```javascript\nfunction add(x, y) {\n  return x + y;\n}\nconst numbers = [1, 2];\nadd(...numbers) // 3\n```\n\n- **复制数组**\n\n```javascript\nconst arr1 = [1, 2];\nconst arr2 = [...arr1];\n```\n\n要记住：**扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中**，这里参数对象是个数组，数组里面的所有对象都是基础数据类型，将所有基础数据类型重新拷贝到新的数组中。\n\n- **合并数组**\n\n如果想在数组内合并数组，可以这样：\n\n```javascript\nconst arr1 = ['two', 'three'];const arr2 = ['one', ...arr1, 'four', 'five'];// [\"one\", \"two\", \"three\", \"four\", \"five\"]\n```\n\n- **扩展运算符与解构赋值结合起来，用于生成数组**\n\n```javascript\nconst [first, ...rest] = [1, 2, 3, 4, 5];first // 1rest  // [2, 3, 4, 5]\n```\n\n需要注意：**如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。**\n\n```javascript\nconst [...rest, last] = [1, 2, 3, 4, 5];         // 报错const [first, ...rest, last] = [1, 2, 3, 4, 5];  // 报错\n```\n\n- **将字符串转为真正的数组**\n\n```javascript\n[...'hello']    // [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n```\n\n- **任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组**\n\n比较常见的应用是可以将某些数据结构转为数组：\n\n```javascript\n// arguments对象\nfunction foo() {\n  const args = [...arguments];\n}\n```\n\n用于替换`es5`中的`Array.prototype.slice.call(arguments)`写法。\n\n- **使用**`Math`**函数获取数组中特定的值**\n\n```javascript\nconst numbers = [9, 4, 7, 1];\nMath.min(...numbers); // 1\nMath.max(...numbers); // 9\n```\n\n### 8. 对对象与数组的解构的理解\n\n解构是 ES6 提供的一种新的提取数据的模式，这种模式能够从对象或数组里有针对性地拿到想要的数值。 **1）数组的解构** 在解构数组时，以元素的位置为匹配条件来提取想要的数据的：\n\n```javascript\nconst [a, b, c] = [1, 2, 3]\n```\n\n最终，a、b、c分别被赋予了数组第0、1、2个索引位的值：\n\n![image-20230610112704625](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112704625.png)\n\n数组里的0、1、2索引位的元素值，精准地被映射到了左侧的第0、1、2个变量里去，这就是数组解构的工作模式。还可以通过给左侧变量数组设置空占位的方式，实现对数组中某几个元素的精准提取：\n\n```javascript\nconst [a,,c] = [1,2,3]\n```\n\n通过把中间位留空，可以顺利地把数组第一位和最后一位的值赋给 a、c 两个变量： \n\n![image-20230610112753402](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112753402.png)\n\n**2）对象的解构** 对象解构比数组结构稍微复杂一些，也更显强大。在解构对象时，是以属性的名称为匹配条件，来提取想要的数据的。现在定义一个对象：\n\n```javascript\nconst stu = {\n  name: 'Bob',\n  age: 24\n}\n```\n\n假如想要解构它的两个自有属性，可以这样：\n\n```javascript\nconst { name, age } = stu\n```\n\n这样就得到了 name 和 age 两个和 stu 平级的变量：\n\n![image-20230610112810838](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112810838.png)\n\n注意，对象解构严格以属性名作为定位依据，所以就算调换了 name 和 age 的位置，结果也是一样的：\n\n```javascript\nconst { age, name } = stu\n```\n\n### 9. **如何提取高度嵌套的对象里的指定属性？**\n\n有时会遇到一些嵌套程度非常深的对象：\n\n```javascript\nconst school = {\n   classes: {\n      stu: {\n         name: 'Bob',\n         age: 24,\n      }\n   }\n}\n```\n\n像此处的 name 这个变量，嵌套了四层，此时如果仍然尝试老方法来提取它：\n\n```javascript\nconst { name } = school\n```\n\n显然是不奏效的，因为 school 这个对象本身是没有 name 这个属性的，name 位于 school 对象的“儿子的儿子”对象里面。要想把 name 提取出来，一种比较笨的方法是逐层解构：\n\n```javascript\nconst { classes } = school\nconst { stu } = classes\nconst { name } = stu\nname // 'Bob'\n```\n\n但是还有一种更标准的做法，可以用一行代码来解决这个问题：\n\n```javascript\nconst { classes: { stu: { name } }} = school\n       \nconsole.log(name)  // 'Bob'\n```\n\n可以在解构出来的变量名右侧，通过冒号+{目标属性名}这种形式，进一步解构它，一直解构到拿到目标数据为止。\n\n### 10. 对 rest 参数的理解\n\n扩展运算符被用在函数形参上时，**它还可以把一个分离的参数序列整合成一个数组**：\n\n```javascript\nfunction mutiple(...args) {\n  let result = 1;\n  for (var val of args) {\n    result *= val;\n  }\n  return result;\n}\nmutiple(1, 2, 3, 4) // 24\n```\n\n这里，传入 mutiple 的是四个分离的参数，但是如果在 mutiple 函数里尝试输出 args 的值，会发现它是一个数组：\n\n```javascript\nfunction mutiple(...args) {\n  console.log(args)\n}\nmutiple(1, 2, 3, 4) // [1, 2, 3, 4]\n```\n\n这就是 … rest运算符的又一层威力了，它可以把函数的多个入参收敛进一个数组里。这一点**经常用于获取函数的多余参数，或者像上面这样处理函数参数个数不确定的情况。**\n\n### 11. ES6中模板语法与字符串处理\n\nES6 提出了“模板语法”的概念。在 ES6 以前，拼接字符串是很麻烦的事情：\n\n```javascript\nvar name = 'css'   \nvar career = 'coder' \nvar hobby = ['coding', 'writing']\nvar finalString = 'my name is ' + name + ', I work as a ' + career + ', I love ' + hobby[0] + ' and ' + hobby[1]\n```\n\n仅仅几个变量，写了这么多加号，还要时刻小心里面的空格和标点符号有没有跟错地方。但是有了模板字符串，拼接难度直线下降：\n\n```javascript\nvar name = 'css'   \nvar career = 'coder' \nvar hobby = ['coding', 'writing']\nvar finalString = `my name is ${name}, I work as a ${career} I love ${hobby[0]} and ${hobby[1]}`\n```\n\n字符串不仅更容易拼了，也更易读了，代码整体的质量都变高了。这就是模板字符串的第一个优势——允许用${}的方式嵌入变量。但这还不是问题的关键，模板字符串的关键优势有两个：\n\n- 在模板字符串中，空格、缩进、换行都会被保留\n- 模板字符串完全支持“运算”式的表达式，可以在${}里完成一些计算\n\n基于第一点，可以在模板字符串里无障碍地直接写 html 代码：\n\n```javascript\nlet list = `\n\t<ul>\n\t\t<li>列表项1</li>\n\t\t<li>列表项2</li>\n\t</ul>\n`;\nconsole.log(message); // 正确输出，不存在报错\n```\n\n基于第二点，可以把一些简单的计算和调用丢进 ${} 来做：\n\n```javascript\nfunction add(a, b) {\n  const finalString = `${a} + ${b} = ${a+b}`\n  console.log(finalString)\n}\nadd(1, 2) // 输出 '1 + 2 = 3'\n```\n\n除了模板语法外， ES6中还新增了一系列的字符串方法用于提升开发效率：\n\n（1）**存在性判定**：在过去，当判断一个字符/字符串是否在某字符串中时，只能用 indexOf > -1 来做。现在 ES6 提供了三个方法：includes、startsWith、endsWith，它们都会返回一个布尔值来告诉你是否存在。\n\n- **includes**：判断字符串与子串的包含关系：\n\n```javascript\nconst son = 'haha' \nconst father = 'xixi haha hehe'\nfather.includes(son) // true\n```\n\n- **startsWith**：判断字符串是否以某个/某串字符开头：\n\n```javascript\nconst father = 'xixi haha hehe'\nfather.startsWith('haha') // false\nfather.startsWith('xixi') // true\n```\n\n- **endsWith**：判断字符串是否以某个/某串字符结尾：\n\n```javascript\nconst father = 'xixi haha hehe'\n  father.endsWith('hehe') // true\n```\n\n（2）**自动重复**：可以使用 repeat 方法来使同一个字符串输出多次（被连续复制多次）：\n\n```javascript\nconst sourceCode = 'repeat for 3 times;'\nconst repeated = sourceCode.repeat(3) \nconsole.log(repeated) // repeat for 3 times;repeat for 3 times;repeat for 3 times;\n```\n\n## 三、JavaScript基础\n\n### 1. new操作符的实现原理\n\n**new操作符的执行过程：**\n\n（1）首先创建了一个新的空对象\n\n（2）设置原型，将对象的原型设置为函数的 prototype 对象。\n\n（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）\n\n（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\n\n具体实现：\n\n```javascript\nfunction objectFactory() {\n  let newObject = null;\n  let constructor = Array.prototype.shift.call(arguments);\n  let result = null;\n  // 判断参数是否是一个函数\n  if (typeof constructor !== \"function\") {\n    console.error(\"type error\");\n    return;\n  }\n  // 新建一个空对象，对象的原型为构造函数的 prototype 对象\n  newObject = Object.create(constructor.prototype);\n  // 将 this 指向新建对象，并执行函数\n  result = constructor.apply(newObject, arguments);\n  // 判断返回对象\n  let flag = result && (typeof result === \"object\" || typeof result === \"function\");\n  // 判断返回结果\n  return flag ? result : newObject;\n}\n// 使用方法\nobjectFactory(构造函数, 初始化参数);\n```\n\n### 2. map和Object的区别\n\n|          | Map                                                          | Object                                                       |\n| -------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 意外的键 | Map默认情况不包含任何键，只包含显式插入的键。                | Object 有一个原型, 原型链上的键名有可能和自己在对象上的设置的键名产生冲突。 |\n| 键的类型 | Map的键可以是任意值，包括函数、对象或任意基本类型。          | Object 的键必须是 String 或是Symbol。                        |\n| 键的顺序 | Map 中的 key 是有序的。因此，当迭代的时候， Map 对象以插入的顺序返回键值。 | Object 的键是无序的                                          |\n| Size     | Map 的键值对个数可以轻易地通过size 属性获取                  | Object 的键值对个数只能手动计算                              |\n| 迭代     | Map 是 iterable 的，所以可以直接被迭代。                     | 迭代Object需要以某种方式获取它的键然后才能迭代。             |\n| 性能     | 在频繁增删键值对的场景下表现更好。                           | 在频繁添加和删除键值对的场景下未作出优化。                   |\n\n### 3. map和weakMap的区别\n\n**（1）Map** map本质上就是键值对的集合，但是普通的Object中的键值对中的键只能是字符串。而ES6提供的Map数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的Hash结构。如果Map的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。\n\n实际上Map是一个数组，它的每一个数据也都是一个数组，其形式如下：\n\n```javascript\nconst map = [\n     [\"name\",\"张三\"],\n     [\"age\",18],\n]\n```\n\nMap数据结构有以下操作方法：\n\n- **size**： `map.size` 返回Map结构的成员总数。\n- **set(key,value)**：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）\n- **get(key)**：该方法读取key对应的键值，如果找不到key，返回undefined。\n- **has(key)**：该方法返回一个布尔值，表示某个键是否在当前Map对象中。\n- **delete(key)**：该方法删除某个键，返回true，如果删除失败，返回false。\n- **clear()**：map.clear()清除所有成员，没有返回值。\n\nMap结构原生提供是三个遍历器生成函数和一个遍历方法\n\n- keys()：返回键名的遍历器。\n- values()：返回键值的遍历器。\n- entries()：返回所有成员的遍历器。\n- forEach()：遍历Map的所有成员。\n\n```javascript\nconst map = new Map([\n     [\"foo\",1],\n     [\"bar\",2],\n])\nfor(let key of map.keys()){\n    console.log(key);  // foo bar\n}\nfor(let value of map.values()){\n     console.log(value); // 1 2\n}\nfor(let items of map.entries()){\n    console.log(items);  // [\"foo\",1]  [\"bar\",2]\n}\nmap.forEach( (value,key,map) => {\n     console.log(key,value); // foo 1    bar 2\n})\n```\n\n**（2）WeakMap** WeakMap 对象也是一组键值对的集合，其中的键是弱引用的。**其键必须是对象**，原始数据类型不能作为key值，而值可以是任意的。\n\n该对象也有以下几种方法：\n\n- **set(key,value)**：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）\n- **get(key)**：该方法读取key对应的键值，如果找不到key，返回undefined。\n- **has(key)**：该方法返回一个布尔值，表示某个键是否在当前Map对象中。\n- **delete(key)**：该方法删除某个键，返回true，如果删除失败，返回false。\n\n其clear()方法已经被弃用，所以可以通过创建一个空的WeakMap并替换原对象来实现清除。\n\nWeakMap的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。\n\n而WeakMap的**键名所引用的对象都是弱引用**，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的**键名对象和所对应的键值对会自动消失，不用手动删除引用**。\n\n**总结：**\n\n- Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。\n- WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null 除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。\n\n### 4. JavaScript有哪些内置对象\n\n全局的对象（ global objects ）或称标准内置对象，不要和 \"全局对象（global object）\" 混淆。这里说的全局的对象是说在 全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。\n\n**标准内置对象的分类：**\n\n（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。例如 Infinity、NaN、undefined、null 字面量\n\n（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。例如 eval()、parseFloat()、parseInt() 等\n\n（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。例如 Object、Function、Boolean、Symbol、Error 等\n\n（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。例如 Number、Math、Date\n\n（5）字符串，用来表示和操作字符串的对象。例如 String、RegExp\n\n（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array\n\n（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。 例如 Map、Set、WeakMap、WeakSet\n\n（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。 例如 SIMD 等\n\n（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。例如 JSON 等\n\n（10）控制抽象对象 例如 Promise、Generator 等\n\n（11）反射。例如 Reflect、Proxy\n\n（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。例如 Intl、Intl.Collator 等\n\n（13）WebAssembly\n\n（14）其他。例如 arguments\n\n**总结：** js 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js 定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。一般经常用到的如全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构造函数如 Date、Object 等，还有提供数学计算的单体内置对象如 Math 对象。\n\n### 5. 常用的正则表达式有哪些？\n\n```javascript\n// （1）匹配 16 进制颜色值\nvar regex = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;\n\n// （2）匹配日期，如 yyyy-mm-dd 格式\nvar regex = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\n\n// （3）匹配 qq 号\nvar regex = /^[1-9][0-9]{4,10}$/g;\n\n// （4）手机号码正则\nvar regex = /^1[34578]\\d{9}$/g;\n\n// （5）用户名正则\nvar regex = /^[a-zA-Z\\$][a-zA-Z0-9_\\$]{4,16}$/;\n```\n\n### 6. 对JSON的理解\n\nJSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。\n\n在项目开发中，使用 JSON 作为前后端数据交换的方式。在前端通过将一个符合 JSON 格式的数据结构序列化为 JSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。\n\n因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是应该注意的是 JSON 和 js 中的对象不是一回事，JSON 中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。\n\n在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，\n\n- JSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，可以调用这个函数将数据对象转化为 JSON 格式的字符串。\n- JSON.parse() 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当从后端接收到 JSON 格式的字符串时，可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。\n\n### 7. JavaScript脚本延迟加载的方式有哪些？\n\n延迟加载就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。\n\n一般有以下几种方式：\n\n- **defer 属性：** 给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。\n- **async 属性：** 给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。\n- **动态创建 DOM 方式：** 动态创建 DOM 标签的方式，可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。\n- **使用 setTimeout 延迟方法：** 设置一个定时器来延迟加载js脚本文件\n- **让 JS 最后加载：** 将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。\n\n### 8. JavaScript 类数组对象的定义？\n\n一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。\n\n常见的类数组转换为数组的方法有这样几种：\n\n（1）通过 call 调用数组的 slice 方法来实现转换\n\n```javascript\nArray.prototype.slice.call(arrayLike);\n```\n\n（2）通过 call 调用数组的 splice 方法来实现转换\n\n```javascript\nArray.prototype.splice.call(arrayLike, 0);\n```\n\n（3）通过 apply 调用数组的 concat 方法来实现转换\n\n```javascript\nArray.prototype.concat.apply([], arrayLike);\n```\n\n（4）通过 Array.from 方法来实现转换\n\n```javascript\nArray.from(arrayLike);\n```\n\n### 9. 数组有哪些原生方法？\n\n- 数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。\n- 数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。\n- 数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。\n- 数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。\n- 数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。\n- 数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法\n- 数组归并方法 reduce() 和 reduceRight() 方法\n\n### 10. **Unicode、UTF-8、UTF-16、UTF-32的区别？**\n\n#### （1）Unicode\n\n在说`Unicode`之前需要先了解一下`ASCII`码：ASCII 码（`American Standard Code for Information Interchange`）称为美国标准信息交换码。\n\n- 它是基于拉丁字母的一套电脑编码系统。\n- 它定义了一个用于代表常见字符的字典。\n- 它包含了\"A-Z\"(包含大小写)，数据\"0-9\" 以及一些常见的符号。\n- 它是专门为英语而设计的，有128个编码，对其他语言无能为力\n\n`ASCII`码可以表示的编码有限，要想表示其他语言的编码，还是要使用`Unicode`来表示，可以说`Unicode`是`ASCII` 的超集。\n\n`Unicode`全称 `Unicode Translation Format`，又叫做统一码、万国码、单一码。`Unicode` 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。\n\n`Unicode`的实现方式（也就是编码方式）有很多种，常见的是**UTF-8**、**UTF-16**、**UTF-32**和**USC-2**。\n\n#### （2）UTF-8\n\n`UTF-8`是使用最广泛的`Unicode`编码方式，它是一种可变长的编码方式，可以是1—4个字节不等，它可以完全兼容`ASCII`码的128个字符。\n\n**注意：** `UTF-8` 是一种编码方式，`Unicode`是一个字符集合。\n\n`UTF-8`的编码规则：\n\n- 对于**单字节**的符号，字节的第一位为0，后面的7位为这个字符的`Unicode`编码，因此对于英文字母，它的`Unicode`编码和`ACSII`编码一样。\n- 对于**n字节**的符号，第一个字节的前n位都是1，第n+1位设为0，后面字节的前两位一律设为10，剩下的没有提及的二进制位，全部为这个符号的`Unicode`码 。\n\n来看一下具体的`Unicode`编号范围与对应的`UTF-8`二进制格式 ：\n\n| 编码范围（编号对应的十进制数）  | 二进制格式                          |\n| ------------------------------- | ----------------------------------- |\n| 0x00—0x7F （0-127）             | 0xxxxxxx                            |\n| 0x80—0x7FF （128-2047）         | 110xxxxx 10xxxxxx                   |\n| 0x800—0xFFFF  （2048-65535）    | 1110xxxx 10xxxxxx 10xxxxxx          |\n| 0x10000—0x10FFFF  （65536以上） | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx |\n\n那该如何通过具体的`Unicode`编码，进行具体的`UTF-8`编码呢？**步骤如下：**\n\n- 找到该`Unicode`编码的所在的编号范围，进而找到与之对应的二进制格式\n- 将`Unicode`编码转换为二进制数（去掉最高位的0）\n- 将二进制数从右往左一次填入二进制格式的`X`中，如果有`X`未填，就设为0\n\n来看一个实际的例子： “**马**” 字的`Unicode`编码是：`0x9A6C`，整数编号是`39532` （1）首选确定了该字符在第三个范围内，它的格式是 `1110xxxx 10xxxxxx 10xxxxxx` （2）39532对应的二进制数为`1001 1010 0110 1100` （3）将二进制数填入X中，结果是：`11101001 10101001 10101100`\n\n#### （3）UTF-16\n\n**1. 平面的概念**\n\n在了解`UTF-16`之前，先看一下**平面**的概念： `Unicode`编码中有很多很多的字符，它并不是一次性定义的，而是分区进行定义的，每个区存放**65536**（216）个字符，这称为一个**平面**，目前总共有17 个平面。\n\n最前面的一个平面称为**基本平面**，它的码点从**0 — 216-1**，写成16进制就是`U+0000 — U+FFFF`，那剩下的16个平面就是**辅助平面**，码点范围是 `U+10000—U+10FFFF`。\n\n**2. UTF-16 概念：**\n\n`UTF-16`也是`Unicode`编码集的一种编码形式，把`Unicode`字符集的抽象码位映射为16位长的整数（即码元）的序列，用于数据存储或传递。`Unicode`字符的码位需要1个或者2个16位长的码元来表示，因此`UTF-16`也是用变长字节表示的。\n\n**3. UTF-16 编码规则：**\n\n- 编号在 `U+0000—U+FFFF` 的字符（常用字符集），直接用两个字节表示。\n- 编号在 `U+10000—U+10FFFF` 之间的字符，需要用四个字节表示。\n\n**4. 编码识别**\n\n那么问题来了，当遇到两个字节时，怎么知道是把它当做一个字符还是和后面的两个字节一起当做一个字符呢？\n\n`UTF-16` 编码肯定也考虑到了这个问题，在基本平面内，从 `U+D800 — U+DFFF` 是一个空段，也就是说这个区间的码点不对应任何的字符，因此这些空段就可以用来映射辅助平面的字符。\n\n辅助平面共有 **220** 个字符位，因此表示这些字符至少需要 20 个二进制位。`UTF-16` 将这 20 个二进制位分成两半，前 10 位映射在 `U+D800 — U+DBFF`，称为**高位**（H），后 10 位映射在 `U+DC00 — U+DFFF`，称为**低位**（L）。这就相当于，将一个辅助平面的字符拆成了两个基本平面的字符来表示。\n\n因此，当遇到两个字节时，发现它的码点在 `U+D800 —U+DBFF`之间，就可以知道，它后面的两个字节的码点应该在 `U+DC00 — U+DFFF` 之间，这四个字节必须放在一起进行解读。\n\n**5. 举例说明**\n\n以 \"**𡠀**\" 字为例，它的 `Unicode` 码点为 `0x21800`，该码点超出了基本平面的范围，因此需要用四个字节来表示，步骤如下：\n\n- 首先计算超出部分的结果：`0x21800 - 0x10000`\n- 将上面的计算结果转为20位的二进制数，不足20位就在前面补0，结果为：`0001000110 0000000000`\n- 将得到的两个10位二进制数分别对应到两个区间中\n- `U+D800` 对应的二进制数为 `1101100000000000`， 将`0001000110`填充在它的后10 个二进制位，得到 `1101100001000110`，转成 16 进制数为 `0xD846`。同理，低位为 `0xDC00`，所以这个字的`UTF-16` 编码为 `0xD846 0xDC00`\n\n#### （4） UTF-32\n\n`UTF-32` 就是字符所对应编号的整数二进制形式，每个字符占四个字节，这个是直接进行转换的。该编码方式占用的储存空间较多，所以使用较少。\n\n比如“**马**” 字的Unicode编号是：`U+9A6C`，整数编号是`39532`，直接转化为二进制：`1001 1010 0110 1100`，这就是它的UTF-32编码。\n\n#### （5）总结\n\n**Unicode、UTF-8、UTF-16、UTF-32有什么区别？**\n\n- `Unicode` 是编码字符集（字符集），而`UTF-8`、`UTF-16`、`UTF-32`是字符集编码（编码规则）；\n- `UTF-16` 使用变长码元序列的编码方式，相较于定长码元序列的`UTF-32`算法更复杂，甚至比同样是变长码元序列的`UTF-8`也更为复杂，因为其引入了独特的**代理对**这样的代理机制；\n- `UTF-8`需要判断每个字节中的开头标志信息，所以如果某个字节在传送过程中出错了，就会导致后面的字节也会解析出错；而`UTF-16`不会判断开头标志，即使错也只会错一个字符，所以容错能力教强；\n- 如果字符内容全部英文或英文与其他文字混合，但英文占绝大部分，那么用`UTF-8`就比`UTF-16`节省了很多空间；而如果字符内容全部是中文这样类似的字符或者混合字符中中文占绝大多数，那么`UTF-16`就占优势了，可以节省很多空间；\n\n### 11. 常见的位运算符有哪些？其计算规则是什么？\n\n现代计算机中数据都是以二进制的形式存储的，即0、1两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。\n\n常见的位运算有以下几种：\n\n| 运算符 | 描述 | 运算规则                                                 |                          |\n| ------ | ---- | -------------------------------------------------------- | ------------------------ |\n| `&`    | 与   | 两个位都为1时，结果才为1                                 |                          |\n| `      | `    | 或                                                       | 两个位都为0时，结果才为0 |\n| `^`    | 异或 | 两个位相同为0，相异为1                                   |                          |\n| `~`    | 取反 | 0变1，1变0                                               |                          |\n| `<<`   | 左移 | 各二进制位全部左移若干位，高位丢弃，低位补0              |                          |\n| `>>`   | 右移 | 各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃 |                          |\n\n#### 1. 按位与运算符（&）\n\n**定义：** 参加运算的两个数据**按二进制位**进行“与”运算。 **运算规则：**\n\n```javascript\n0 & 0 = 0  \n0 & 1 = 0  \n1 & 0 = 0  \n1 & 1 = 1\n```\n\n总结：两位同时为1，结果才为1，否则结果为0。 例如：3&5 即：\n\n```javascript\n0000 0011 \n   0000 0101 \n = 0000 0001\n```\n\n因此 3&5 的值为1。 注意：负数按补码形式参加按位与运算。\n\n**用途：**\n\n**（1）判断奇偶**\n\n只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用`if ((i & 1) == 0)`代替`if (i % 2 == 0)`来判断a是不是偶数。\n\n**（2）清零**\n\n如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。\n\n#### 2. 按位或运算符（|）\n\n**定义：** 参加运算的两个对象按二进制位进行“或”运算。\n\n**运算规则：**\n\n```javascript\n0 | 0 = 0\n0 | 1 = 1  \n1 | 0 = 1  \n1 | 1 = 1\n```\n\n总结：参加运算的两个对象只要有一个为1，其值为1。 例如：3|5即：\n\n```javascript\n0000 0011\n  0000 0101 \n= 0000 0111\n```\n\n因此，3|5的值为7。 注意：负数按补码形式参加按位或运算。\n\n#### 3. 异或运算符（^）\n\n**定义：** 参加运算的两个数据按二进制位进行“异或”运算。\n\n**运算规则：**\n\n```javascript\n0 ^ 0 = 0  \n0 ^ 1 = 1  \n1 ^ 0 = 1  \n1 ^ 1 = 0\n```\n\n总结：参加运算的两个对象，如果两个相应位相同为0，相异为1。 例如：3|5即：\n\n```javascript\n0000 0011\n  0000 0101 \n= 0000 0110\n```\n\n因此，3^5的值为6。 异或运算的性质:\n\n- 交换律：`(a^b)^c == a^(b^c)`\n- 结合律：`(a + b)^c == a^b + b^c`\n- 对于任何数x，都有 `x^x=0，x^0=x`\n- 自反性: `a^b^b=a^0=a`;\n\n#### 4. 取反运算符 (~)\n\n**定义：** 参加运算的一个数据按二进制进行“取反”运算。\n\n**运算规则：**\n\n```javascript\n~ 1 = 0~ 0 = 1\n```\n\n总结：对一个二进制数按位取反，即将0变1，1变0。 例如：~6 即：\n\n```javascript\n0000 0110= 1111 1001\n```\n\n在计算机中，正数用原码表示，负数使用补码存储，首先看最高位，最高位1表示负数，0表示正数。此计算机二进制码为负数，最高位为符号位。 当发现按位取反为负数时，就**直接取其补码**，变为十进制：\n\n```javascript\n0000 0110   = 1111 1001反码：1000 0110补码：1000 0111\n```\n\n因此，~6的值为-7。\n\n#### 5. 左移运算符（<<）\n\n**定义：** 将一个运算对象的各二进制位全部左移若干位，左边的二进制位丢弃，右边补0。 设 a=1010 1110，a = a<< 2 将a的二进制位左移2位、右补0，即得a=1011 1000。 若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。\n\n#### 6. 右移运算符（>>）\n\n**定义：** 将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。 例如：a=a>>2 将a的二进制位右移2位，左补0 或者 左补1得看被移数是正还是负。 操作数每右移一位，相当于该数除以2。\n\n#### 7. 原码、补码、反码\n\n上面提到了补码、反码等知识，这里就补充一下。 计算机中的**有符号数**有三种表示方法，即原码、反码和补码。三种表示方法均有符号位和数值位两部分，符号位都是用0表示“正”，用1表示“负”，而数值位，三种表示方法各不相同。\n\n**（1）原码**\n\n原码就是一个数的二进制数。例如：10的原码为0000 1010\n\n**（2）反码**\n\n- 正数的反码与原码相同，如：10 反码为 0000 1010\n- 负数的反码为除符号位，按位取反，即0变1，1变0。\n\n例如：-10\n\n```javascript\n原码：1000 1010\n反码：1111 0101\n```\n\n**（3）补码**\n\n- 正数的补码与原码相同，如：10 补码为 0000 1010\n- 负数的补码是原码除符号位外的所有位取反即0变1，1变0，然后加1，也就是反码加1。\n\n例如：-10\n\n```javascript\n原码：1000 1010\n反码：1111 0101\n补码：1111 0110\n```\n\n### 12. 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?\n\n`arguments`是一个对象，它的属性是从 0 开始依次递增的数字，还有`callee`和`length`等属性，与数组相似；但是它却没有数组常见的方法属性，如`forEach`, `reduce`等，所以叫它们类数组。\n\n要遍历类数组，有三个方法：\n\n（1）将数组的方法应用到类数组上，这时候就可以使用`call`和`apply`方法，如：\n\n```javascript\nfunction foo(){ \n  Array.prototype.forEach.call(arguments, a => console.log(a))\n}\n```\n\n（2）使用Array.from方法将类数组转化成数组：‌\n\n```javascript\nfunction foo(){ \n  const arrArgs = Array.from(arguments) \n  arrArgs.forEach(a => console.log(a))\n}\n```\n\n（3）使用展开运算符将类数组转化成数组\n\n```javascript\nfunction foo(){ \n    const arrArgs = [...arguments] \n    arrArgs.forEach(a => console.log(a)) \n}\n```\n\n### 13. 什么是 DOM 和 BOM？\n\n- DOM 指的是文档对象模型，它指的是把文档当做一个对象，这个对象主要定义了处理网页内容的方法和接口。\n- BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。\n\n### 14. 对类数组对象的理解，如何转化为数组\n\n一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，函数参数也可以被看作是类数组对象，因为它含有 length属性值，代表可接收的参数个数。\n\n常见的类数组转换为数组的方法有这样几种：\n\n- 通过 call 调用数组的 slice 方法来实现转换\n\n```javascript\nArray.prototype.slice.call(arrayLike);\n```\n\n- 通过 call 调用数组的 splice 方法来实现转换\n\n```javascript\nArray.prototype.splice.call(arrayLike, 0);\n```\n\n- 通过 apply 调用数组的 concat 方法来实现转换\n\n```javascript\nArray.prototype.concat.apply([], arrayLike);\n```\n\n- 通过 Array.from 方法来实现转换\n\n```javascript\nArray.from(arrayLike);\n```\n\n### 15. escape、encodeURI、encodeURIComponent 的区别\n\n- encodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。\n- encodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。\n- escape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 %u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。\n\n### 16. 对AJAX的理解，实现一个AJAX请求\n\nAJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。\n\n创建AJAX请求的步骤：\n\n- **创建一个 XMLHttpRequest 对象。**\n- 在这个对象上**使用 open 方法创建一个 HTTP 请求**，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。\n- 在发起请求前，可以为这个对象**添加一些信息和监听函数**。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。\n- 当对象的属性和监听函数设置完成后，最后调**用 sent 方法来向服务器发起请求**，可以传入参数作为发送的数据体。\n\n```javascript\nconst SERVER_URL = \"/server\";\nlet xhr = new XMLHttpRequest();\n// 创建 Http 请求\nxhr.open(\"GET\", url, true);\n// 设置状态监听函数\nxhr.onreadystatechange = function() {\n  if (this.readyState !== 4) return;\n  // 当请求成功时\n  if (this.status === 200) {\n    handle(this.response);\n  } else {\n    console.error(this.statusText);\n  }\n};\n// 设置请求失败时的监听函数\nxhr.onerror = function() {\n  console.error(this.statusText);\n};\n// 设置请求头信息\nxhr.responseType = \"json\";\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n// 发送 Http 请求\nxhr.send(null);\n```\n\n使用Promise封装AJAX：\n\n```javascript\n// promise 封装实现：\nfunction getJSON(url) {\n  // 创建一个 promise 对象\n  let promise = new Promise(function(resolve, reject) {\n    let xhr = new XMLHttpRequest();\n    // 新建一个 http 请求\n    xhr.open(\"GET\", url, true);\n    // 设置状态的监听函数\n    xhr.onreadystatechange = function() {\n      if (this.readyState !== 4) return;\n      // 当请求成功或失败时，改变 promise 的状态\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n    // 设置错误监听函数\n    xhr.onerror = function() {\n      reject(new Error(this.statusText));\n    };\n    // 设置响应的数据类型\n    xhr.responseType = \"json\";\n    // 设置请求头信息\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n    // 发送 http 请求\n    xhr.send(null);\n  });\n  return promise;\n}\n```\n\n### 17. JavaScript为什么要进行变量提升，它导致了什么问题？\n\n变量提升的表现是，无论在函数中何处位置声明的变量，好像都被提升到了函数的首部，可以在变量声明前访问到而不会报错。\n\n造成变量声明提升的**本质原因**是 js 引擎在代码执行前有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象。当访问一个变量时，会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性，它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。\n\n首先要知道，JS在拿到一个变量或者一个函数的时候，会有两步操作，即解析和执行。\n\n- 在解析阶段\n\n  ，JS会检查语法，并对函数进行预编译。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。\n\n  - 全局上下文：变量定义，函数声明\n  - 函数上下文：变量定义，函数声明，this，arguments\n\n- **在执行阶段**，就是按照代码的顺序依次执行。\n\n那为什么会进行变量提升呢？主要有以下两个原因：\n\n- 提高性能\n- 容错性更好\n\n**（1）提高性能** 在JS代码执行之前，会进行语法检查和预编译，并且这一操作只进行一次。这么做就是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新解析一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。\n\n在解析的过程中，还会为函数生成预编译代码。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，去除注释、不必要的空白等。这样做的好处就是每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量，创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。\n\n**（2）容错性更好**\n\n变量提升可以在一定程度上提高JS的容错性，看下面的代码：\n\n```javascript\na = 1;var a;console.log(a);\n```\n\n如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。\n\n虽然，在可以开发过程中，可以完全避免这样写，但是有时代码很复杂的时候。可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。\n\n**总结：**\n\n- 解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间\n- 声明提升还可以提高JS代码的容错性，使一些不规范的代码也可以正常执行\n\n变量提升虽然有一些优点，但是他也会造成一定的问题，在ES6中提出了let、const来定义变量，它们就没有变量提升的机制。下面看一下变量提升可能会导致的问题：\n\n```javascript\nvar tmp = new Date();\n\nfunction fn(){\n\tconsole.log(tmp);\n\tif(false){\n\t\tvar tmp = 'hello world';\n\t}\n}\n\nfn();  // undefined\n```\n\n在这个函数中，原本是要打印出外层的tmp变量，但是因为变量提升的问题，内层定义的tmp被提到函数内部的最顶部，相当于覆盖了外层的tmp，所以打印结果为undefined。\n\n```javascript\nvar tmp = 'hello world';\n\nfor (var i = 0; i < tmp.length; i++) {\n\tconsole.log(tmp[i]);\n}\n\nconsole.log(i); // 11\n```\n\n由于遍历时定义的i会变量提升成为一个全局变量，在函数结束之后不会被销毁，所以打印出来11。\n\n### 18. 什么是尾调用，使用尾调用有什么好处？\n\n尾调用指的是函数的最后一步调用另一个函数。代码执行是基于执行栈的，所以当在一个函数里调用另一个函数时，会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这时可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。\n\n### 19.  **ES6**模块与**CommonJS**模块有什么异同？\n\nES6 Module和CommonJS模块的区别：\n\n- CommonJS是对模块的浅拷⻉，ES6 Module是对模块的引⽤，即ES6 Module只存只读，不能改变其值，也就是指针指向不能变，类似const；\n- import的接⼝是read-only（只读状态），不能修改其变量值。 即不能修改其变量的指针指向，但可以改变变量内部指针指向，可以对commonJS对重新赋值（改变指针指向），但是对ES6 Module赋值会编译报错。\n\nES6 Module和CommonJS模块的共同点：\n\n- CommonJS和ES6 Module都可以对引⼊的对象进⾏赋值，即对对象内部属性的值进⾏改变。\n\n### 20. 常见的DOM操作有哪些\n\n#### 1）DOM 节点的获取\n\nDOM 节点的获取的API及使用：\n\n```javascript\ngetElementById // 按照 id 查询\ngetElementsByTagName // 按照标签名查询\ngetElementsByClassName // 按照类名查询\nquerySelectorAll // 按照 css 选择器查询\n\n// 按照 id 查询\nvar imooc = document.getElementById('imooc') // 查询到 id 为 imooc 的元素\n// 按照标签名查询\nvar pList = document.getElementsByTagName('p')  // 查询到标签为 p 的集合\nconsole.log(divList.length)\nconsole.log(divList[0])\n// 按照类名查询\nvar moocList = document.getElementsByClassName('mooc') // 查询到类名为 mooc 的集合\n// 按照 css 选择器查询\nvar pList = document.querySelectorAll('.mooc') // 查询到类名为 mooc 的集合\n```\n\n#### 2）DOM 节点的创建\n\n**创建一个新节点，并把它添加到指定节点的后面。** 已知的 HTML 结构如下：\n\n```html\n<html>\n  <head>\n    <title>DEMO</title>\n  </head>\n  <body>\n    <div id=\"container\"> \n      <h1 id=\"title\">我是标题</h1>\n    </div>   \n  </body>\n</html>\n```\n\n要求添加一个有内容的 span 节点到 id 为 title 的节点后面，做法就是：\n\n```javascript\n// 首先获取父节点\nvar container = document.getElementById('container')\n// 创建新节点\nvar targetSpan = document.createElement('span')\n// 设置 span 节点的内容\ntargetSpan.innerHTML = 'hello world'\n// 把新创建的元素塞进父节点里去\ncontainer.appendChild(targetSpan)\n```\n\n#### 3）DOM 节点的删除\n\n**删除指定的 DOM 节点，** 已知的 HTML 结构如下：\n\n```javascript\n<html>\n  <head>\n    <title>DEMO</title>\n  </head>\n  <body>\n    <div id=\"container\"> \n      <h1 id=\"title\">我是标题</h1>\n    </div>   \n  </body>\n</html>\n```\n\n需要删除 id 为 title 的元素，做法是：\n\n```javascript\n// 获取目标元素的父元素\nvar container = document.getElementById('container')\n// 获取目标元素\nvar targetNode = document.getElementById('title')\n// 删除目标元素\ncontainer.removeChild(targetNode)\n```\n\n或者通过子节点数组来完成删除：\n\n```javascript\n// 获取目标元素的父元素var container = document.getElementById('container')// 获取目标元素var targetNode = container.childNodes[1]// 删除目标元素container.removeChild(targetNode)\n```\n\n#### 4）修改 DOM 元素\n\n修改 DOM 元素这个动作可以分很多维度，比如说移动 DOM 元素的位置，修改 DOM 元素的属性等。\n\n**将指定的两个 DOM 元素交换位置，** 已知的 HTML 结构如下：\n\n```javascript\n<html>\n  <head>\n    <title>DEMO</title>\n  </head>\n  <body>\n    <div id=\"container\"> \n      <h1 id=\"title\">我是标题</h1>\n      <p id=\"content\">我是内容</p>\n    </div>   \n  </body>\n</html>\n```\n\n现在需要调换 title 和 content 的位置，可以考虑 insertBefore 或者 appendChild：\n\n```javascript\n// 获取父元素\nvar container = document.getElementById('container')   \n \n// 获取两个需要被交换的元素\nvar title = document.getElementById('title')\nvar content = document.getElementById('content')\n// 交换两个元素，把 content 置于 title 前面\ncontainer.insertBefore(content, title)\n```\n\n### 21. use strict是什么意思 ? 使用它区别是什么？\n\nuse strict 是一种 ECMAscript5 添加的（严格模式）运行模式，这种模式使得 Javascript 在更严格的条件下运行。设立严格模式的目的如下：\n\n- 消除 Javascript 语法的不合理、不严谨之处，减少怪异行为;\n- 消除代码运行的不安全之处，保证代码运行的安全；\n- 提高编译器效率，增加运行速度；\n- 为未来新版本的 Javascript 做好铺垫。\n\n区别：\n\n- 禁止使用 with 语句。\n- 禁止 this 关键字指向全局对象。\n- 对象不能有重名的属性。\n\n### 22. 如何判断一个对象是否属于某个类？\n\n- 第一种方式，使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n- 第二种方式，通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写。\n- 第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString() 方法来打印对象的[[Class]] 属性来进行判断。\n\n### 23. 强类型语言和弱类型语言的区别\n\n- **强类型语言**：强类型语言也称为强类型定义语言，是一种总是强制类型定义的语言，要求变量的使用要严格符合定义，所有变量都必须先定义后使用。Java和C++等语言都是强制类型定义的，也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。例如你有一个整数，如果不显式地进行转换，你不能将其视为一个字符串。\n- **弱类型语言**：弱类型语言也称为弱类型定义语言，与强类型定义相反。JavaScript语言就属于弱类型语言。简单理解就是一种变量类型可以被忽略的语言。比如JavaScript是弱类型定义的，在JavaScript中就可以将字符串'12'和整数3进行连接得到字符串'123'，在相加的时候会进行强制类型转换。\n\n两者对比：强类型语言在速度上可能略逊色于弱类型语言，但是强类型语言带来的严谨性可以有效地帮助避免许多错误。\n\n### 24. 解释性语言和编译型语言的区别\n\n（1）解释型语言 使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行。是代码在执行时才被解释器一行行动态翻译和执行，而不是在执行之前就完成翻译。解释型语言不需要事先编译，其直接将源代码解释成机器码并立即执行，所以只要某一平台提供了相应的解释器即可运行该程序。其特点总结如下\n\n- 解释型语言每次运行都需要将源代码解释称机器码并执行，效率较低；\n- 只要平台提供相应的解释器，就可以运行源代码，所以可以方便源程序移植；\n- JavaScript、Python等属于解释型语言。\n\n（2）编译型语言 使用专门的编译器，针对特定的平台，将高级语言源代码一次性的编译成可被该平台硬件执行的机器码，并包装成该平台所能识别的可执行性程序的格式。在编译型语言写的程序执行之前，需要一个专门的编译过程，把源代码编译成机器语言的文件，如exe格式的文件，以后要再运行时，直接使用编译结果即可，如直接运行exe文件。因为只需编译一次，以后运行时不需要编译，所以编译型语言执行效率高。其特点总结如下：\n\n- 一次性的编译成平台相关的机器语言文件，运行时脱离开发环境，运行效率高；\n- 与特定平台相关，一般无法移植到其他平台；\n- C、C++等属于编译型语言。\n\n**两者主要区别在于：** 前者源程序编译后即可在该平台运行，后者是在运行期间才编译。所以前者运行速度快，后者跨平台性好。\n\n### 25. for...in和for...of的区别\n\nfor…of 是ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，和ES3中的for…in的区别如下\n\n- for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；\n- for… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；\n- 对于数组的遍历，for…in 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，for…of 只返回数组的下标对应的属性值；\n\n**总结：** for...in 循环主要是为了遍历对象而生，不适用于遍历数组；for...of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。\n\n### 26. 如何使用for...of遍历对象\n\nfor…of是作为ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，普通的对象用for..of遍历是会报错的。\n\n如果需要遍历的对象是类数组对象，用Array.from转成数组即可。\n\n```javascript\nvar obj = {\n    0:'one',\n    1:'two',\n    length: 2\n};\nobj = Array.from(obj);\nfor(var k of obj){\n    console.log(k)\n}\n```\n\n如果不是类数组对象，就给对象添加一个[Symbol.iterator]属性，并指向一个迭代器即可。\n\n```javascript\n//方法一：\nvar obj = {\n    a:1,\n    b:2,\n    c:3\n};\n\nobj[Symbol.iterator] = function(){\n\tvar keys = Object.keys(this);\n\tvar count = 0;\n\treturn {\n\t\tnext(){\n\t\t\tif(count<keys.length){\n\t\t\t\treturn {value: obj[keys[count++]],done:false};\n\t\t\t}else{\n\t\t\t\treturn {value:undefined,done:true};\n\t\t\t}\n\t\t}\n\t}\n};\n\nfor(var k of obj){\n\tconsole.log(k);\n}\n\n\n// 方法二\nvar obj = {\n    a:1,\n    b:2,\n    c:3\n};\nobj[Symbol.iterator] = function*(){\n    var keys = Object.keys(obj);\n    for(var k of keys){\n        yield [k,obj[k]]\n    }\n};\n\nfor(var [k,v] of obj){\n    console.log(k,v);\n}\n```\n\n### 27. ajax、axios、fetch的区别\n\n**（1）AJAX** Ajax 即“AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。其缺点如下：\n\n- 本身是针对MVC编程，不符合前端MVVM的浪潮\n- 基于原生XHR开发，XHR本身的架构不清晰\n- 不符合关注分离（Separation of Concerns）的原则\n- 配置和调用方式非常混乱，而且基于事件的异步模型不友好。\n\n**（2）Fetch** fetch号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象。Fetch是基于promise设计的。Fetch的代码结构比起ajax简单多。**fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象**。\n\nfetch的优点：\n\n- 语法简洁，更加语义化\n- 基于标准 Promise 实现，支持 async/await\n- 更加底层，提供的API丰富（request, response）\n- 脱离了XHR，是ES规范里新的实现方式\n\nfetch的缺点：\n\n- fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。\n- fetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: 'include'})\n- fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费\n- fetch没有办法原生监测请求的进度，而XHR可以\n\n**（3）Axios** Axios 是一种基于Promise封装的HTTP客户端，其特点如下：\n\n- 浏览器端发起XMLHttpRequests请求\n- node端发起http请求\n- 支持Promise API\n- 监听请求和返回\n- 对请求和返回进行转化\n- 取消请求\n- 自动转换json数据\n- 客户端支持抵御XSRF攻击\n\n### 28. 数组的遍历方法有哪些\n\n| **方法**                  | **是否改变原数组** | **特点**                                                     |\n| ------------------------- | ------------------ | ------------------------------------------------------------ |\n| forEach()                 | 否                 | 数组方法，不改变原数组，没有返回值                           |\n| map()                     | 否                 | 数组方法，不改变原数组，有返回值，可链式调用                 |\n| filter()                  | 否                 | 数组方法，过滤数组，返回包含符合条件的元素的数组，可链式调用 |\n| for...of                  | 否                 | for...of遍历具有Iterator迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的obj对象，将异步循环变成同步循环 |\n| every() 和 some()         | 否                 | 数组方法，some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false. |\n| find() 和 findIndex()     | 否                 | 数组方法，find()返回的是第一个符合条件的值；findIndex()返回的是第一个返回条件的值的索引值 |\n| reduce() 和 reduceRight() | 否                 | 数组方法，reduce()对数组正序操作；reduceRight()对数组逆序操作 |\n\n遍历方法的详细解释：[《细数JavaScript中那些遍历和循环》](https://link.juejin.cn?target=https%3A%2F%2Fcuggz.blog.csdn.net%2Farticle%2Fdetails%2F107649549)\n\n### 29. forEach和map方法有什么区别\n\n这方法都是用来遍历数组的，两者区别如下：\n\n- forEach()方法会针对每一个元素执行提供的函数，对数据的操作会改变原数组，该方法没有返回值；\n- map()方法不会改变原数组的值，返回一个新数组，新数组中的值为原数组调用函数处理之后的值；\n\n## 四、原型与原型链\n\n### 1. 对原型、原型链的理解\n\n在JavaScript中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在浏览器中都实现了 **proto** 属性来访问这个属性，但是最好不要使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法来获取对象的原型。\n\n当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。\n\n**特点：** JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。\n\n![image-20230610112915792](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112915792.png)\n\n### 2. 原型修改、重写\n\n```javascript\nfunction Person(name) {\n    this.name = name\n}\n// 修改原型\nPerson.prototype.getName = function() {}\nvar p = new Person('hello')\nconsole.log(p.__proto__ === Person.prototype) // true\nconsole.log(p.__proto__ === p.constructor.prototype) // true\n// 重写原型\nPerson.prototype = {\n    getName: function() {}\n}\nvar p = new Person('hello')\nconsole.log(p.__proto__ === Person.prototype)        // true\nconsole.log(p.__proto__ === p.constructor.prototype) // false\n```\n\n可以看到修改原型的时候p的构造函数不是指向Person了，因为直接给Person的原型对象直接用对象赋值时，它的构造函数指向的了根构造函数Object，所以这时候`p.constructor === Object` ，而不是`p.constructor === Person`。要想成立，就要用constructor指回来：\n\n```javascript\nPerson.prototype = {\n    getName: function() {}\n}\nvar p = new Person('hello')\np.constructor = Person\nconsole.log(p.__proto__ === Person.prototype)        // true\nconsole.log(p.__proto__ === p.constructor.prototype) // true\n```\n\n### 3. 原型链指向\n\n```javascript\np.__proto__  // Person.prototype\nPerson.prototype.__proto__  // Object.prototype\np.__proto__.__proto__ //Object.prototype\np.__proto__.constructor.prototype.__proto__ // Object.prototype\nPerson.prototype.constructor.prototype.__proto__ // Object.prototype\np1.__proto__.constructor // Person\nPerson.prototype.constructor  // Person\n```\n\n### 4. 原型链的终点是什么？如何打印出原型链的终点？\n\n由于`Object`是构造函数，原型链终点是`Object.prototype.__proto__`，而`Object.prototype.__proto__=== null // true`，所以，原型链的终点是`null`。原型链上的所有原型都是对象，所有的对象最终都是由`Object`构造的，而`Object.prototype`的下一级是`Object.prototype.__proto__`。\n\n![image-20230610112941072](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112941072.png)\n\n### 5. 如何获得对象非原型链上的属性？\n\n使用后`hasOwnProperty()`方法来判断属性是否属于原型链的属性：\n\n```javascript\nfunction iterate(obj){\n   var res=[];\n   for(var key in obj){\n        if(obj.hasOwnProperty(key))\n           res.push(key+': '+obj[key]);\n   }\n   return res;\n} \n```\n\n## 五、执行上下文/作用域链/闭包\n\n### 1. 对闭包的理解\n\n**闭包是指有权访问另一个函数作用域中变量的函数**，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。\n\n闭包有两个常用的用途；\n\n- 闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。\n- 闭包的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。\n\n比如，函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。\n\n```javascript\nfunction A() {\n  let a = 1\n  window.B = function () {\n      console.log(a)\n  }\n}\nA()\nB() // 1\n```\n\n在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。经典面试题：循环中使用闭包解决 var 定义函数的问题\n\n```javascript\nfor (var i = 1; i <= 5; i++) {\n  setTimeout(function timer() {\n    console.log(i)\n  }, i * 1000)\n}\n```\n\n首先因为 `setTimeout` 是个异步函数，所以会先把循环全部执行完毕，这时候 `i` 就是 6 了，所以会输出一堆 6。解决办法有三种：\n\n- 第一种是使用闭包的方式\n\n```javascript\nfor (var i = 1; i <= 5; i++) {  ;(function(j) {    setTimeout(function timer() {      console.log(j)    }, j * 1000)  })(i)}\n```\n\n在上述代码中，首先使用了立即执行函数将 `i` 传入函数内部，这个时候值就被固定在了参数 `j` 上面不会改变，当下次执行 `timer` 这个闭包的时候，就可以使用外部函数的变量 `j`，从而达到目的。\n\n- 第二种就是使用 `setTimeout` 的第三个参数，这个参数会被当成 `timer` 函数的参数传入。\n\n```javascript\nfor (var i = 1; i <= 5; i++) {\n  setTimeout(\n    function timer(j) {\n      console.log(j)\n    },\n    i * 1000,\n    i\n  )\n}\n```\n\n- 第三种就是使用 `let` 定义 `i` 了来解决问题了，这个也是最为推荐的方式\n\n```javascript\nfor (let i = 1; i <= 5; i++) {\n  setTimeout(function timer() {\n    console.log(i)\n  }, i * 1000)\n}\n```\n\n### 2. 对作用域、作用域链的理解\n\n##### 1）全局作用域和函数作用域\n\n（1）全局作用域\n\n- 最外层函数和最外层函数外面定义的变量拥有全局作用域\n- 所有未定义直接赋值的变量自动声明为全局作用域\n- 所有window对象的属性拥有全局作用域\n- 全局作用域有很大的弊端，过多的全局作用域变量会污染全局命名空间，容易引起命名冲突。\n\n（2）函数作用域\n\n- 函数作用域声明在函数内部的变零，一般只有固定的代码片段可以访问到\n- 作用域是分层的，内层作用域可以访问外层作用域，反之不行\n\n##### 2）块级作用域\n\n- 使用ES6中新增的let和const指令可以声明块级作用域，块级作用域可以在函数中创建也可以在一个代码块中的创建（由`{ }`包裹的代码片段）\n- let和const声明的变量不会有变量提升，也不可以重复声明\n- 在循环中比较适合绑定块级作用域，这样就可以把声明的计数器变量限制在循环内部。\n\n**作用域链：** 在当前作用域中查找所需变量，但是该作用域没有这个变量，那这个变量就是自由变量。如果在自己作用域找不到该变量就去父级作用域查找，依次向上级作用域查找，直到访问到window对象就被终止，这一层层的关系就是作用域链。\n\n作用域链的作用是**保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。**\n\n作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。\n\n当查找一个变量时，如果当前执行环境中没有找到，可以沿着作用域链向后查找。\n\n### 3. 对执行上下文的理解\n\n##### 1. 执行上下文类型\n\n**（1）全局执行上下文**\n\n任何不在函数内部的都是全局执行上下文，它首先会创建一个全局的window对象，并且设置this的值等于这个全局对象，一个程序中只有一个全局执行上下文。\n\n**（2）函数执行上下文**\n\n当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。\n\n**（3）**`eval`**函数执行上下文**\n\n执行在eval函数中的代码会有属于他自己的执行上下文，不过eval函数不常使用，不做介绍。\n\n##### 2. 执行上下文栈\n\n- JavaScript引擎使用执行上下文栈来管理执行上下文\n- 当JavaScript执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。\n\n```javascript\nlet a = 'Hello World!';\nfunction first() {\n  console.log('Inside first function');\n  second();\n  console.log('Again inside first function');\n}\nfunction second() {\n  console.log('Inside second function');\n}\nfirst();\n//执行顺序\n//先执行second(),在执行first()\n```\n\n##### 3. 创建执行上下文\n\n创建执行上下文有两个阶段：**创建阶段**和**执行阶段**\n\n**1）创建阶段**\n\n（1）this绑定\n\n- 在全局执行上下文中，this指向全局对象（window对象）\n- 在函数执行上下文中，this指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined\n\n（2）创建词法环境组件\n\n- 词法环境是一种有**标识符——变量映射**的数据结构，标识符是指变量/函数名，变量是对实际对象或原始数据的引用。\n- 词法环境的内部有两个组件：**加粗样式**：环境记录器:用来储存变量个函数声明的实际位置**外部环境的引用**：可以访问父级作用域\n\n（3）创建变量环境组件\n\n- 变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。\n\n**2）执行阶段** 此阶段会完成对变量的分配，最后执行完代码。\n\n**简单来说执行上下文就是指：**\n\n在执行一点JS代码之前，需要先解析代码。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。这一步执行完了，才开始正式的执行程序。\n\n在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。\n\n- 全局上下文：变量定义，函数声明\n- 函数上下文：变量定义，函数声明，`this`，`arguments`\n\n","slug":"js/JS复习","published":1,"layout":"post","photos":[],"link":"","_id":"clipg0870000frgwhcw2z7lcz","content":"<p>JS复习记录</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112558784.png\" alt=\"image-20230610112558784\"></p>\n<h2 id=\"一、数据类型\"><a href=\"#一、数据类型\" class=\"headerlink\" title=\"一、数据类型\"></a>一、数据类型</h2><h3 id=\"1-JavaScript有哪些数据类型，它们的区别？\"><a href=\"#1-JavaScript有哪些数据类型，它们的区别？\" class=\"headerlink\" title=\"1. JavaScript有哪些数据类型，它们的区别？\"></a>1. JavaScript有哪些数据类型，它们的区别？</h3><p>JavaScript共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。</p>\n<p>其中 Symbol 和 BigInt 是ES6 中新增的数据类型：</p>\n<ul>\n<li>Symbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。</li>\n<li>BigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。</li>\n</ul>\n<p>这些数据可以分为原始数据类型和引用数据类型：</p>\n<ul>\n<li>栈：原始数据类型（Undefined、Null、Boolean、Number、String）</li>\n<li>堆：引用数据类型（对象、数组和函数）</li>\n</ul>\n<p>两种类型的区别在于<strong>存储位置的不同：</strong></p>\n<ul>\n<li>原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</li>\n<li>引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</li>\n</ul>\n<p>堆和栈的概念存在于数据结构和操作系统内存中，在数据结构中：</p>\n<ul>\n<li>在数据结构中，栈中数据的存取方式为先进后出。</li>\n<li>堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。</li>\n</ul>\n<p>在操作系统中，内存被分为栈区和堆区：</p>\n<ul>\n<li>栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li>\n<li>堆区内存一般由开发着分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。</li>\n</ul>\n<h3 id=\"2-数据类型检测的方式有哪些\"><a href=\"#2-数据类型检测的方式有哪些\" class=\"headerlink\" title=\"2. 数据类型检测的方式有哪些\"></a>2. 数据类型检测的方式有哪些</h3><p><strong>（1）typeof</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"number\">2</span>);               <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>);            <span class=\"comment\">// boolean</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;str&#x27;</span>);           <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> []);              <span class=\"comment\">// object    </span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;);    <span class=\"comment\">// function</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> &#123;&#125;);              <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>);       <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>);            <span class=\"comment\">// object</span></span><br></pre></td></tr></table></figure>\n\n<p>其中数组、对象、null都会被判断为object，其他判断都正确。</p>\n<p><strong>（2）instanceof</strong></p>\n<p><code>instanceof</code>可以正确判断对象的类型，<strong>其内部运行机制是判断在其原型链中能否找到该类型的原型</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Number</span>);                    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">true</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Boolean</span>);                <span class=\"comment\">// false </span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;str&#x27;</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span>);                <span class=\"comment\">// false </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>);                    <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Function</span>);       <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>);                   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，<code>instanceof</code><strong>只能正确判断引用数据类型</strong>，而不能判断基本数据类型。<code>instanceof</code> 运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 <code>prototype</code> 属性。</p>\n<p><strong>（3） constructor</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>((<span class=\"number\">2</span>).<span class=\"property\">constructor</span> === <span class=\"title class_\">Number</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>((<span class=\"literal\">true</span>).<span class=\"property\">constructor</span> === <span class=\"title class_\">Boolean</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>((<span class=\"string\">&#x27;str&#x27;</span>).<span class=\"property\">constructor</span> === <span class=\"title class_\">String</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(([]).<span class=\"property\">constructor</span> === <span class=\"title class_\">Array</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>((<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;).<span class=\"property\">constructor</span> === <span class=\"title class_\">Function</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>((&#123;&#125;).<span class=\"property\">constructor</span> === <span class=\"title class_\">Object</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><code>constructor</code>有两个作用，一是判断数据的类型，二是对象实例通过 <code>constrcutor</code> 对象访问它的构造函数。需要注意，如果创建一个对象来改变它的原型，<code>constructor</code>就不能用来判断数据类型了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Fn</span>(<span class=\"params\"></span>)&#123;&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"title class_\">Fn</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> <span class=\"title class_\">Fn</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f.<span class=\"property\">constructor</span>===<span class=\"title class_\">Fn</span>);    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f.<span class=\"property\">constructor</span>===<span class=\"title class_\">Array</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>（4）Object.prototype.toString.call()</strong></p>\n<p><code>Object.prototype.toString.call()</code> 使用 Object 对象的原型方法 toString 来判断数据类型：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">call</span>(<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">call</span>(<span class=\"literal\">true</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;str&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">call</span>([]));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">call</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">call</span>(&#123;&#125;));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>));</span><br></pre></td></tr></table></figure>\n\n<p>同样是检测对象obj调用toString方法，obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样，这是为什么？</p>\n<p>这是因为toString是Object的原型方法，而Array、function等<strong>类型作为Object的实例，都重写了toString方法</strong>。不同的对象类型调用toString方法时，根据原型链的知识，调用的是对应的重写之后的toString方法（function类型返回内容为函数体的字符串，Array类型返回元素组成的字符串…），而不会去调用Object上原型toString方法（返回对象的具体类型），所以采用obj.toString()不能得到其对象类型，只能将obj转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用Object原型上的toString方法。</p>\n<h3 id=\"3-判断数组的方式有哪些\"><a href=\"#3-判断数组的方式有哪些\" class=\"headerlink\" title=\"3. 判断数组的方式有哪些\"></a>3. 判断数组的方式有哪些</h3><ul>\n<li>通过Object.prototype.toString.call()做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(obj).<span class=\"title function_\">slice</span>(<span class=\"number\">8</span>,-<span class=\"number\">1</span>) === <span class=\"string\">&#x27;Array&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过原型链做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过ES6的Array.isArray()做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArrray</span>(obj);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过instanceof做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过Array.prototype.isPrototypeOf</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">isPrototypeOf</span>(obj)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-null和undefined区别\"><a href=\"#4-null和undefined区别\" class=\"headerlink\" title=\"4. null和undefined区别\"></a>4. null和undefined区别</h3><p>首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。</p>\n<p>undefined 代表的含义是<strong>未定义</strong>，null 代表的含义是<strong>空对象</strong>。一般变量声明了但还没有定义的时候会返回 undefined，null主要用于赋值给一些可能会返回对象的变量，作为初始化。</p>\n<p>undefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。</p>\n<p>当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 “object”，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。</p>\n<h3 id=\"5-typeof-null-的结果是什么，为什么？\"><a href=\"#5-typeof-null-的结果是什么，为什么？\" class=\"headerlink\" title=\"5. typeof null 的结果是什么，为什么？\"></a>5. typeof null 的结果是什么，为什么？</h3><p>typeof null 的结果是Object。</p>\n<p>在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的 <strong>类型标签(1-3 bits)</strong> 以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">000</span>: object   - 当前存储的数据指向一个对象。</span><br><span class=\"line\">  <span class=\"number\">1</span>: int      - 当前存储的数据是一个 <span class=\"number\">31</span> 位的有符号整数。</span><br><span class=\"line\"><span class=\"number\">010</span>: double   - 当前存储的数据指向一个双精度的浮点数。</span><br><span class=\"line\"><span class=\"number\">100</span>: string   - 当前存储的数据指向一个字符串。</span><br><span class=\"line\"><span class=\"number\">110</span>: boolean  - 当前存储的数据是布尔值。</span><br></pre></td></tr></table></figure>\n\n<p>如果最低位是 1，则类型标签标志位的长度只有一位；如果最低位是 0，则类型标签标志位的长度占三位，为存储其他四种数据类型提供了额外两个 bit 的长度。</p>\n<p>有两种特殊数据类型：</p>\n<ul>\n<li>undefined的值是 (-2)30(一个超出整数范围的数字)；</li>\n<li>null 的值是机器码 NULL 指针(null 指针的值全是 0)</li>\n</ul>\n<p>那也就是说null的类型标签也是000，和Object的类型标签一样，所以会被判定为Object。</p>\n<h3 id=\"6-intanceof-操作符的实现原理及实现\"><a href=\"#6-intanceof-操作符的实现原理及实现\" class=\"headerlink\" title=\"6. intanceof 操作符的实现原理及实现\"></a>6. intanceof 操作符的实现原理及实现</h3><p>instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myInstanceof</span>(<span class=\"params\">left, right</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取对象的原型</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> proto = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(left)</span><br><span class=\"line\">  <span class=\"comment\">// 获取构造函数的 prototype 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> prototype = right.<span class=\"property\"><span class=\"keyword\">prototype</span></span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 判断构造函数的 prototype 对象是否在对象的原型链上</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!proto) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (proto === prototype) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有找到，就继续从其原型上找，Object.getPrototypeOf方法用来获取指定对象的原型</span></span><br><span class=\"line\">    proto = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(proto);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-为什么0-1-0-2-0-3，如何让其相等\"><a href=\"#7-为什么0-1-0-2-0-3，如何让其相等\" class=\"headerlink\" title=\"7. 为什么0.1+0.2 ! == 0.3，如何让其相等\"></a>7. 为什么0.1+0.2 ! == 0.3，如何让其相等</h3><p>在开发过程中遇到类似这样的问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> n1 = <span class=\"number\">0.1</span>, n2 = <span class=\"number\">0.2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n1 + n2)  <span class=\"comment\">// 0.30000000000000004</span></span><br></pre></td></tr></table></figure>\n\n<p>这里得到的不是想要的结果，要想等于0.3，就要把它进行转化：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(n1 + n2).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) <span class=\"comment\">// 注意，toFixed为四舍五入</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toFixed(num)</code> 方法可把 Number 四舍五入为指定小数位数的数字。那为什么会出现这样的结果呢？</p>\n<p>计算机是通过二进制的方式存储数据的，所以计算机计算0.1+0.2的时候，实际上是计算的两个数的二进制的和。0.1的二进制是<code>0.0001100110011001100...</code>（1100循环），0.2的二进制是：<code>0.00110011001100...</code>（1100循环），这两个数的二进制都是无限循环的数。那JavaScript是如何处理无限循环的二进制小数呢？</p>\n<p>一般我们认为数字包括整数和小数，但是在 JavaScript 中只有一种数字类型：Number，它的实现遵循IEEE 754标准，使用64位固定长度来表示，也就是标准的double双精度浮点数。在二进制科学表示法中，双精度浮点数的小数部分最多只能保留52位，再加上前面的1，其实就是保留53位有效数字，剩余的需要舍去，遵从“0舍1入”的原则。</p>\n<p>根据这个原则，0.1和0.2的二进制数相加，再转化为十进制数就是：<code>0.30000000000000004</code>。</p>\n<p>下面看一下<strong>双精度数是如何保存</strong>的： <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0cb225cf71d748a8b2d6a5615e402711~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"></p>\n<ul>\n<li>第一部分（蓝色）：用来存储符号位（sign），用来区分正负数，0表示正数，占用1位</li>\n<li>第二部分（绿色）：用来存储指数（exponent），占用11位</li>\n<li>第三部分（红色）：用来存储小数（fraction），占用52位</li>\n</ul>\n<p>对于0.1，它的二进制为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.00011001100110011001100110011001100110011001100110011001</span> <span class=\"number\">10011.</span>..</span><br></pre></td></tr></table></figure>\n\n<p>转为科学计数法（科学计数法的结果就是浮点数）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.1001100110011001100110011001100110011001100110011001</span>*<span class=\"number\">2</span>^-<span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看出0.1的符号位为0，指数位为-4，小数位为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1001100110011001100110011001100110011001100110011001</span></span><br></pre></td></tr></table></figure>\n\n<p>那么问题又来了，<strong>指数位是负数，该如何保存</strong>呢？</p>\n<p>IEEE标准规定了一个偏移量，对于指数部分，每次都加这个偏移量进行保存，这样即使指数是负数，那么加上这个偏移量也就是正数了。由于JavaScript的数字是双精度数，这里就以双精度数为例，它的指数部分为11位，能表示的范围就是0~2047，IEEE固定<strong>双精度数的偏移量为1023</strong>。</p>\n<ul>\n<li>当指数位不全是0也不全是1时(规格化的数值)，IEEE规定，阶码计算公式为 e-Bias。 此时e最小值是1，则1-1023= -1022，e最大值是2046，则2046-1023=1023，可以看到，这种情况下取值范围是<code>-1022~1013</code>。</li>\n<li>当指数位全部是0的时候(非规格化的数值)，IEEE规定，阶码的计算公式为1-Bias，即1-1023= -1022。</li>\n<li>当指数位全部是1的时候(特殊值)，IEEE规定这个浮点数可用来表示3个特殊值，分别是正无穷，负无穷，NaN。 具体的，小数位不为0的时候表示NaN；小数位为0时，当符号位s=0时表示正无穷，s=1时候表示负无穷。</li>\n</ul>\n<p>对于上面的0.1的指数位为-4，-4+1023 = 1019 转化为二进制就是：<code>1111111011</code>.</p>\n<p>所以，0.1表示为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1111111011</span> <span class=\"number\">1001100110011001100110011001100110011001100110011001</span></span><br></pre></td></tr></table></figure>\n\n<p>说了这么多，是时候该最开始的问题了，如何实现0.1+0.2=0.3呢？</p>\n<p>对于这个问题，一个直接的解决方法就是设置一个误差范围，通常称为“机器精度”。对JavaScript来说，这个值通常为2-52，在ES6中，提供了<code>Number.EPSILON</code>属性，而它的值就是2-52，只要判断<code>0.1+0.2-0.3</code>是否小于<code>Number.EPSILON</code>，如果小于，就可以判断为0.1+0.2 ===0.3</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">numberepsilon</span>(<span class=\"params\">arg1,arg2</span>)&#123;                   </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(arg1 - arg2) &lt; <span class=\"title class_\">Number</span>.<span class=\"property\">EPSILON</span>;        </span><br><span class=\"line\">&#125;        </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">numberepsilon</span>(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>, <span class=\"number\">0.3</span>)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-如何获取安全的-undefined-值？\"><a href=\"#8-如何获取安全的-undefined-值？\" class=\"headerlink\" title=\"8. 如何获取安全的 undefined 值？\"></a>8. 如何获取安全的 undefined 值？</h3><p>因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。表达式 void ___ 没有返回值，因此返回结果是 undefined。void 并不改变表达式的结果，只是让表达式不返回值。因此可以用 void 0 来获得 undefined。</p>\n<h3 id=\"9-typeof-NaN-的结果是什么？\"><a href=\"#9-typeof-NaN-的结果是什么？\" class=\"headerlink\" title=\"9. typeof NaN 的结果是什么？\"></a>9. typeof NaN 的结果是什么？</h3><p>NaN 指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel value，有特殊用途的常规值），用于指出数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"title class_\">NaN</span>; <span class=\"comment\">// &quot;number&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>NaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN !== NaN 为 true。</p>\n<h3 id=\"10-isNaN-和-Number-isNaN-函数的区别？\"><a href=\"#10-isNaN-和-Number-isNaN-函数的区别？\" class=\"headerlink\" title=\"10. isNaN 和 Number.isNaN 函数的区别？\"></a>10. isNaN 和 Number.isNaN 函数的区别？</h3><ul>\n<li>函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会返回 true ，会影响 NaN 的判断。</li>\n<li>函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN 的判断更为准确。</li>\n</ul>\n<h3 id=\"12-其他值到字符串的转换规则？\"><a href=\"#12-其他值到字符串的转换规则？\" class=\"headerlink\" title=\"12. 其他值到字符串的转换规则？\"></a>12. 其他值到字符串的转换规则？</h3><ul>\n<li>Null 和 Undefined 类型 ，null 转换为 “null”，undefined 转换为 “undefined”，</li>\n<li>Boolean 类型，true 转换为 “true”，false 转换为 “false”。</li>\n<li>Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。</li>\n<li>Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。</li>\n<li>对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()）来返回内部属性 [[Class]] 的值，如”[object Object]”。如果对象有自己的 toString() 方法，字符串化时就会调用该方法并使用其返回值。</li>\n</ul>\n<h3 id=\"13-其他值到数字值的转换规则？\"><a href=\"#13-其他值到数字值的转换规则？\" class=\"headerlink\" title=\"13. 其他值到数字值的转换规则？\"></a>13. 其他值到数字值的转换规则？</h3><ul>\n<li>Undefined 类型的值转换为 NaN。</li>\n<li>Null 类型的值转换为 0。</li>\n<li>Boolean 类型的值，true 转换为 1，false 转换为 0。</li>\n<li>String 类型的值转换如同使用 Number() 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。</li>\n<li>Symbol 类型的值不能转换为数字，会报错。</li>\n<li>对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。</li>\n</ul>\n<p>为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。</p>\n<p>如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。</p>\n<h3 id=\"14-其他值到布尔类型的值的转换规则？\"><a href=\"#14-其他值到布尔类型的值的转换规则？\" class=\"headerlink\" title=\"14. 其他值到布尔类型的值的转换规则？\"></a>14. 其他值到布尔类型的值的转换规则？</h3><p>以下这些是假值： • undefined • null • false • +0、-0 和 NaN • “”</p>\n<p>假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。</p>\n<h3 id=\"15-和-amp-amp-操作符的返回值？\"><a href=\"#15-和-amp-amp-操作符的返回值？\" class=\"headerlink\" title=\"15. || 和 &amp;&amp; 操作符的返回值？\"></a>15. || 和 &amp;&amp; 操作符的返回值？</h3><p>|| 和 &amp;&amp; 首先会对第一个操作数执行条件判断，如果其不是布尔值就先强制转换为布尔类型，然后再执行条件判断。</p>\n<ul>\n<li>对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。</li>\n<li>&amp;&amp; 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。</li>\n</ul>\n<p>|| 和 &amp;&amp; 返回它们其中一个操作数的值，而非条件判断的结果</p>\n<h3 id=\"16-Object-is-与比较操作符-“-”、“-”-的区别？\"><a href=\"#16-Object-is-与比较操作符-“-”、“-”-的区别？\" class=\"headerlink\" title=\"16. Object.is() 与比较操作符 “===”、“==” 的区别？\"></a>16. Object.is() 与比较操作符 “===”、“==” 的区别？</h3><ul>\n<li>使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。</li>\n<li>使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。</li>\n<li>使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的。</li>\n</ul>\n<h3 id=\"17-什么是-JavaScript-中的包装类型？\"><a href=\"#17-什么是-JavaScript-中的包装类型？\" class=\"headerlink\" title=\"17. 什么是 JavaScript 中的包装类型？\"></a>17. 什么是 JavaScript 中的包装类型？</h3><p>在 JavaScript 中，基本类型是没有属性和方法的，但是为了便于操作基本类型的值，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">a.<span class=\"property\">length</span>; <span class=\"comment\">// 3</span></span><br><span class=\"line\">a.<span class=\"title function_\">toUpperCase</span>(); <span class=\"comment\">// &quot;ABC&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>在访问<code>&#39;abc&#39;.length</code>时，JavaScript 将<code>&#39;abc&#39;</code>在后台转换成<code>String(&#39;abc&#39;)</code>，然后再访问其<code>length</code>属性。</p>\n<p>JavaScript也可以使用<code>Object</code>函数显式地将基本类型转换为包装类型：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>(a) <span class=\"comment\">// String &#123;&quot;abc&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以使用<code>valueOf</code>方法将包装类型倒转成基本类型：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"title class_\">Object</span>(a)</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = b.<span class=\"title function_\">valueOf</span>() <span class=\"comment\">// &#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>看看如下代码会打印出什么：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>( <span class=\"literal\">false</span> );</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!a) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"string\">&quot;Oops&quot;</span> ); <span class=\"comment\">// never runs</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>答案是什么都不会打印，因为虽然包裹的基本类型是<code>false</code>，但是<code>false</code>被包裹成包装类型后就成了对象，所以其非值为<code>false</code>，所以循环体中的内容不会运行。</p>\n<h3 id=\"18-JavaScript-中如何进行隐式类型转换？\"><a href=\"#18-JavaScript-中如何进行隐式类型转换？\" class=\"headerlink\" title=\"18. JavaScript 中如何进行隐式类型转换？\"></a>18. JavaScript 中如何进行隐式类型转换？</h3><p>首先要介绍<code>ToPrimitive</code>方法，这是 JavaScript 中每个值隐含的自带的方法，用来将值 （无论是基本类型值还是对象）转换为基本类型值。如果值为基本类型，则直接返回值本身；如果值为对象，其看起来大概是这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@obj</span> 需要转换的对象</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@type</span> 期望的结果类型</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"title class_\">ToPrimitive</span>(obj,type)</span><br></pre></td></tr></table></figure>\n\n<p><code>type</code>的值为<code>number</code>或者<code>string</code>。</p>\n<p><strong>（1）当</strong><code>type</code><strong>为</strong><code>number</code><strong>时规则如下：</strong></p>\n<ul>\n<li>调用<code>obj</code>的<code>valueOf</code>方法，如果为原始值，则返回，否则下一步；</li>\n<li>调用<code>obj</code>的<code>toString</code>方法，后续同上；</li>\n<li>抛出<code>TypeError</code> 异常。</li>\n</ul>\n<p><strong>（2）当</strong><code>type</code><strong>为</strong><code>string</code><strong>时规则如下：</strong></p>\n<ul>\n<li>调用<code>obj</code>的<code>toString</code>方法，如果为原始值，则返回，否则下一步；</li>\n<li>调用<code>obj</code>的<code>valueOf</code>方法，后续同上；</li>\n<li>抛出<code>TypeError</code> 异常。</li>\n</ul>\n<p>可以看出两者的主要区别在于调用<code>toString</code>和<code>valueOf</code>的先后顺序。默认情况下：</p>\n<ul>\n<li>如果对象为 Date 对象，则<code>type</code>默认为<code>string</code>；</li>\n<li>其他情况下，<code>type</code>默认为<code>number</code>。</li>\n</ul>\n<p>总结上面的规则，对于 Date 以外的对象，转换为基本类型的大概规则可以概括为一个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">objToNumber</span> = value =&gt; <span class=\"title class_\">Number</span>(value.<span class=\"title function_\">valueOf</span>().<span class=\"title function_\">toString</span>())</span><br><span class=\"line\"><span class=\"title function_\">objToNumber</span>([]) === <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title function_\">objToNumber</span>(&#123;&#125;) === <span class=\"title class_\">NaN</span></span><br></pre></td></tr></table></figure>\n\n<p>而 JavaScript 中的隐式类型转换主要发生在<code>+、-、*、/</code>以及<code>==、&gt;、&lt;</code>这些运算符之间。而这些运算符只能操作基本类型值，所以在进行这些运算前的第一步就是将两边的值用<code>ToPrimitive</code>转换成基本类型，再进行操作。</p>\n<p>以下是基本类型的值在不同操作符的情况下隐式转换的规则 （对于对象，其会被<code>ToPrimitive</code>转换成基本类型，所以最终还是要应用基本类型转换规则）：</p>\n<ol>\n<li><code>+</code><strong>操作符</strong> <code>+</code>操作符的两边有至少一个<code>string</code>类型变量时，两边的变量都会被隐式转换为字符串；其他情况下两边的变量都会被转换为数字。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> + <span class=\"string\">&#x27;23&#x27;</span> <span class=\"comment\">// &#x27;123&#x27;</span></span><br><span class=\"line\"> <span class=\"number\">1</span> + <span class=\"literal\">false</span> <span class=\"comment\">// 1 </span></span><br><span class=\"line\"> <span class=\"number\">1</span> + <span class=\"title class_\">Symbol</span>() <span class=\"comment\">// Uncaught TypeError: Cannot convert a Symbol value to a number</span></span><br><span class=\"line\"> <span class=\"string\">&#x27;1&#x27;</span> + <span class=\"literal\">false</span> <span class=\"comment\">// &#x27;1false&#x27;</span></span><br><span class=\"line\"> <span class=\"literal\">false</span> + <span class=\"literal\">true</span> <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>-</code>、<code>*</code>、<code>\\</code><strong>操作符</strong></li>\n</ol>\n<p><code>NaN</code>也是一个数字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> * <span class=\"string\">&#x27;23&#x27;</span> <span class=\"comment\">// 23</span></span><br><span class=\"line\"> <span class=\"number\">1</span> * <span class=\"literal\">false</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\"> <span class=\"number\">1</span> / <span class=\"string\">&#x27;aa&#x27;</span> <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>对于</strong><code>==</code><strong>操作符</strong></li>\n</ol>\n<p>操作符两边的值都尽量转成<code>number</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span> == <span class=\"literal\">true</span> <span class=\"comment\">// false, 3 转为number为3，true转为number为1</span></span><br><span class=\"line\"><span class=\"string\">&#x27;0&#x27;</span> == <span class=\"literal\">false</span> <span class=\"comment\">//true, &#x27;0&#x27;转为number为0，false转为number为0</span></span><br><span class=\"line\"><span class=\"string\">&#x27;0&#x27;</span> == <span class=\"number\">0</span> <span class=\"comment\">// &#x27;0&#x27;转为number为0</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>对于</strong><code>&lt;</code><strong>和</strong><code>&gt;</code><strong>比较符</strong></li>\n</ol>\n<p>如果两边都是字符串，则比较字母表顺序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;ca&#x27;</span> &lt; <span class=\"string\">&#x27;bd&#x27;</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"string\">&#x27;a&#x27;</span> &lt; <span class=\"string\">&#x27;b&#x27;</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>其他情况下，转换为数字再比较：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;12&#x27;</span> &lt; <span class=\"number\">13</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">false</span> &gt; -<span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>以上说的是基本类型的隐式转换，而对象会被<code>ToPrimitive</code>转换为基本类型再进行转换：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;</span><br><span class=\"line\">a &gt; <span class=\"number\">2</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>其对比过程如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.<span class=\"title function_\">valueOf</span>() <span class=\"comment\">// &#123;&#125;, 上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步</span></span><br><span class=\"line\">a.<span class=\"title function_\">toString</span>() <span class=\"comment\">// &quot;[object Object]&quot;，现在是一个字符串了</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>(a.<span class=\"title function_\">toString</span>()) <span class=\"comment\">// NaN，根据上面 &lt; 和 &gt; 操作符的规则，要转换成数字</span></span><br><span class=\"line\"><span class=\"title class_\">NaN</span> &gt; <span class=\"number\">2</span> <span class=\"comment\">//false，得出比较结果</span></span><br></pre></td></tr></table></figure>\n\n<p>又比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;Jack&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123;<span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;</span><br><span class=\"line\">a + b <span class=\"comment\">// &quot;[object Object][object Object]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>运算过程如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.<span class=\"title function_\">valueOf</span>() <span class=\"comment\">// &#123;&#125;，上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步</span></span><br><span class=\"line\">a.<span class=\"title function_\">toString</span>() <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\">b.<span class=\"title function_\">valueOf</span>() <span class=\"comment\">// 同理</span></span><br><span class=\"line\">b.<span class=\"title function_\">toString</span>() <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\">a + b <span class=\"comment\">// &quot;[object Object][object Object]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19-操作符什么时候用于字符串的拼接？\"><a href=\"#19-操作符什么时候用于字符串的拼接？\" class=\"headerlink\" title=\"19. + 操作符什么时候用于字符串的拼接？\"></a>19. <code>+</code> 操作符什么时候用于字符串的拼接？</h3><p>根据 ES5 规范，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。</p>\n<p>简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字加法。</p>\n<p>那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。</p>\n<h3 id=\"20-为什么会有BigInt的提案？\"><a href=\"#20-为什么会有BigInt的提案？\" class=\"headerlink\" title=\"20. 为什么会有BigInt的提案？\"></a>20. 为什么会有<strong>BigInt</strong>的提案？</h3><p>JavaScript中Number.MAX_SAFE_INTEGER表示最⼤安全数字，计算结果是9007199254740991，即在这个数范围内不会出现精度丢失（⼩数除外）。但是⼀旦超过这个范围，js就会出现计算不准确的情况，这在⼤数计算的时候不得不依靠⼀些第三⽅库进⾏解决，因此官⽅提出了BigInt来解决此问题。</p>\n<h3 id=\"21-object-assign和扩展运算法是深拷贝还是浅拷贝，两者区别\"><a href=\"#21-object-assign和扩展运算法是深拷贝还是浅拷贝，两者区别\" class=\"headerlink\" title=\"21. object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别\"></a>21. object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别</h3><p>扩展运算符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> outObj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">inObj</span>: &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> newObj = &#123;...outObj&#125;</span><br><span class=\"line\">newObj.<span class=\"property\">inObj</span>.<span class=\"property\">a</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(outObj) <span class=\"comment\">// &#123;inObj: &#123;a: 2, b: 2&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Object.assign():</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> outObj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">inObj</span>: &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> newObj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, outObj)</span><br><span class=\"line\">newObj.<span class=\"property\">inObj</span>.<span class=\"property\">a</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(outObj) <span class=\"comment\">// &#123;inObj: &#123;a: 2, b: 2&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，两者都是浅拷贝。</p>\n<ul>\n<li>Object.assign()方法接收的第一个参数作为目标对象，后面的所有参数作为源对象。然后把所有的源对象合并到目标对象中。它会修改了一个对象，因此会触发 ES6 setter。</li>\n<li>扩展操作符（…）使用它时，数组或对象中的每一个值都会被拷贝到一个新的数组或对象中。它不复制继承的属性或类的属性，但是它会复制ES6的 symbols 属性。</li>\n</ul>\n<h2 id=\"二、ES6\"><a href=\"#二、ES6\" class=\"headerlink\" title=\"二、ES6\"></a>二、ES6</h2><h3 id=\"1-let、const、var的区别\"><a href=\"#1-let、const、var的区别\" class=\"headerlink\" title=\"1. let、const、var的区别\"></a>1. let、const、var的区别</h3><p><strong>（1）块级作用域：</strong> 块作用域由 <code>&#123; &#125;</code>包括，let和const具有块级作用域，var不存在块级作用域。块级作用域解决了ES5中的两个问题：</p>\n<ul>\n<li>内层变量可能覆盖外层变量</li>\n<li>用来计数的循环变量泄露为全局变量</li>\n</ul>\n<p><strong>（2）变量提升：</strong> var存在变量提升，let和const不存在变量提升，即在变量只能在声明之后使用，否在会报错。</p>\n<p><strong>（3）给全局添加属性：</strong> 浏览器的全局对象是window，Node的全局对象是global。var声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。</p>\n<p><strong>（4）重复声明：</strong> var声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const和let不允许重复声明变量。</p>\n<p><strong>（5）暂时性死区：</strong> 在使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为<strong>暂时性死区</strong>。使用var声明的变量不存在暂时性死区。</p>\n<p><strong>（6）初始值设置：</strong> 在变量声明时，var 和 let 可以不用设置初始值。而const声明变量必须设置初始值。</p>\n<p><strong>（7）指针指向：</strong> let和const都是ES6新增的用于创建变量的语法。 let创建的变量是可以更改指针指向（可以重新赋值）。但const声明的变量是不允许改变指针的指向。</p>\n<table>\n<thead>\n<tr>\n<th><strong>区别</strong></th>\n<th><strong>var</strong></th>\n<th><strong>let</strong></th>\n<th><strong>const</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>是否有块级作用域</td>\n<td>×</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>是否存在变量提升</td>\n<td>✔️</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>是否添加全局属性</td>\n<td>✔️</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>能否重复声明变量</td>\n<td>✔️</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>是否存在暂时性死区</td>\n<td>×</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>是否必须设置初始值</td>\n<td>×</td>\n<td>×</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>能否改变指针指向</td>\n<td>✔️</td>\n<td>✔️</td>\n<td>×</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-const对象的属性可以修改吗\"><a href=\"#2-const对象的属性可以修改吗\" class=\"headerlink\" title=\"2. const对象的属性可以修改吗\"></a>2. const对象的属性可以修改吗</h3><p>const保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。对于基本类型的数据（数值、字符串、布尔值），其值就保存在变量指向的那个内存地址，因此等同于常量。</p>\n<p>但对于引用类型的数据（主要是对象和数组）来说，变量指向数据的内存地址，保存的只是一个指针，const只能保证这个指针是固定不变的，至于它指向的数据结构是不是可变的，就完全不能控制了。</p>\n<h3 id=\"3-如果new一个箭头函数的会怎么样\"><a href=\"#3-如果new一个箭头函数的会怎么样\" class=\"headerlink\" title=\"3. 如果new一个箭头函数的会怎么样\"></a>3. 如果new一个箭头函数的会怎么样</h3><p>箭头函数是ES6中的提出来的，它没有prototype，也没有自己的this指向，更不可以使用arguments参数，所以不能New一个箭头函数。</p>\n<p>new操作符的实现步骤如下：</p>\n<ol>\n<li>创建一个对象</li>\n<li>将构造函数的作用域赋给新对象（也就是将对象的__proto__属性指向构造函数的prototype属性）</li>\n<li>指向构造函数中的代码，构造函数中的this指向该对象（也就是为这个对象添加属性和方法）</li>\n<li>返回新的对象</li>\n</ol>\n<p>所以，上面的第二、三步，箭头函数都是没有办法执行的。</p>\n<h3 id=\"4-箭头函数与普通函数的区别\"><a href=\"#4-箭头函数与普通函数的区别\" class=\"headerlink\" title=\"4. 箭头函数与普通函数的区别\"></a>4. 箭头函数与普通函数的区别</h3><p><strong>（1）箭头函数比普通函数更加简洁</strong></p>\n<ul>\n<li>如果没有参数，就直接写一个空括号即可</li>\n<li>如果只有一个参数，可以省去参数的括号</li>\n<li>如果有多个参数，用逗号分割</li>\n<li>如果函数体的返回值只有一句，可以省略大括号</li>\n<li>如果函数体不需要返回值，且只有一句话，可以给这个语句前面加一个void关键字。最常见的就是调用一个函数：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">fn</span> = (<span class=\"params\"></span>) =&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">doesNotReturn</span>();</span><br></pre></td></tr></table></figure>\n\n<p><strong>（2）箭头函数没有自己的this</strong></p>\n<p>箭头函数不会创建自己的this， 所以它没有自己的this，它只会在自己作用域的上一层继承this。所以箭头函数中this的指向在它在定义时已经确定了，之后不会改变。</p>\n<p><strong>（3）箭头函数继承来的this指向永远不会改变</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"string\">&#x27;GLOBAL&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"string\">&#x27;OBJ&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">id</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">id</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.<span class=\"title function_\">a</span>();    <span class=\"comment\">// &#x27;OBJ&#x27;</span></span><br><span class=\"line\">obj.<span class=\"title function_\">b</span>();    <span class=\"comment\">// &#x27;GLOBAL&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> obj.<span class=\"title function_\">a</span>()  <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> obj.<span class=\"title function_\">b</span>()  <span class=\"comment\">// Uncaught TypeError: obj.b is not a constructor</span></span><br></pre></td></tr></table></figure>\n\n<p>对象obj的方法b是使用箭头函数定义的，这个函数中的this就永远指向它定义时所处的全局执行环境中的this，即便这个函数是作为对象obj的方法调用，this依旧指向Window对象。需要注意，定义对象的大括号<code>&#123;&#125;</code>是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中。</p>\n<p><strong>（4）call()、apply()、bind()等方法不能改变箭头函数中this的指向</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"string\">&#x27;Global&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">fun1</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">id</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">fun1</span>();                     <span class=\"comment\">// &#x27;Global&#x27;</span></span><br><span class=\"line\">fun1.<span class=\"title function_\">call</span>(&#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;Obj&#x27;</span>&#125;);     <span class=\"comment\">// &#x27;Global&#x27;</span></span><br><span class=\"line\">fun1.<span class=\"title function_\">apply</span>(&#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;Obj&#x27;</span>&#125;);    <span class=\"comment\">// &#x27;Global&#x27;</span></span><br><span class=\"line\">fun1.<span class=\"title function_\">bind</span>(&#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;Obj&#x27;</span>&#125;)();   <span class=\"comment\">// &#x27;Global&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>（5）箭头函数不能作为构造函数使用</strong></p>\n<p>构造函数在new的步骤在上面已经说过了，实际上第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，且this指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。</p>\n<p><strong>（6）箭头函数没有自己的arguments</strong></p>\n<p>箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是它外层函数的arguments值。</p>\n<p><strong>（7）箭头函数没有prototype</strong></p>\n<p><strong>（8）箭头函数不能用作Generator函数，不能使用yeild关键字</strong></p>\n<h3 id=\"5-箭头函数的this指向哪⾥？\"><a href=\"#5-箭头函数的this指向哪⾥？\" class=\"headerlink\" title=\"5. 箭头函数的this指向哪⾥？\"></a>5. 箭头函数的<strong>this</strong>指向哪⾥？</h3><p>箭头函数不同于传统JavaScript中的函数，箭头函数并没有属于⾃⼰的this，它所谓的this是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值，并且由于没有属于⾃⼰的this，所以是不会被new调⽤的，这个所谓的this也不会被改变。</p>\n<p>可以⽤Babel理解⼀下箭头函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; </span><br><span class=\"line\">  <span class=\"title function_\">getArrow</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123; </span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span> === obj); </span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>转化后：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5，由 Babel 转译</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; </span><br><span class=\"line\">   <span class=\"attr\">getArrow</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">getArrow</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">     <span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>; </span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(_this === obj); </span><br><span class=\"line\">     &#125;; </span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-扩展运算符的作用及使用场景\"><a href=\"#6-扩展运算符的作用及使用场景\" class=\"headerlink\" title=\"6. 扩展运算符的作用及使用场景\"></a>6. 扩展运算符的作用及使用场景</h3><p><strong>（1）对象扩展运算符</strong></p>\n<p>对象的扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bar = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> baz = &#123; ...bar &#125;; <span class=\"comment\">// &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上述方法实际上等价于:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bar = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> baz = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, bar); <span class=\"comment\">// &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Object.assign</code>方法用于对象的合并，将源对象<code>（source）</code>的所有可枚举属性，复制到目标对象<code>（target）</code>。<code>Object.assign</code>方法的第一个参数是目标对象，后面的参数都是源对象。(<strong>如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性</strong>)。</p>\n<p>同样，如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bar = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> baz = &#123;...bar, ...&#123;<span class=\"attr\">a</span>:<span class=\"number\">2</span>, <span class=\"attr\">b</span>: <span class=\"number\">4</span>&#125;&#125;;  <span class=\"comment\">// &#123;a: 2, b: 4&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>利用上述特性就可以很方便的修改对象的部分属性。在<code>redux</code>中的<code>reducer</code>函数规定必须是<strong>一个纯函数</strong>，<code>reducer</code>中的<code>state</code>对象要求不能直接修改，可以通过扩展运算符把修改路径的对象都复制一遍，然后产生一个新的对象返回。</p>\n<p>需要注意：<strong>扩展运算符对对象实例的拷贝属于浅拷贝</strong>。</p>\n<p><strong>（2）数组扩展运算符</strong></p>\n<p>数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(...[<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"comment\">// 1 [2, 3, 4] 5</span></span><br></pre></td></tr></table></figure>\n\n<p>下面是数组的扩展运算符的应用：</p>\n<ul>\n<li><strong>将数组转换为参数序列</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"title function_\">add</span>(...numbers) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>复制数组</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [...arr1];</span><br></pre></td></tr></table></figure>\n\n<p>要记住：<strong>扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中</strong>，这里参数对象是个数组，数组里面的所有对象都是基础数据类型，将所有基础数据类型重新拷贝到新的数组中。</p>\n<ul>\n<li><strong>合并数组</strong></li>\n</ul>\n<p>如果想在数组内合并数组，可以这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>];<span class=\"keyword\">const</span> arr2 = [<span class=\"string\">&#x27;one&#x27;</span>, ...arr1, <span class=\"string\">&#x27;four&#x27;</span>, <span class=\"string\">&#x27;five&#x27;</span>];<span class=\"comment\">// [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>扩展运算符与解构赋值结合起来，用于生成数组</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];first <span class=\"comment\">// 1rest  // [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意：<strong>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [...rest, last] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];         <span class=\"comment\">// 报错const [first, ...rest, last] = [1, 2, 3, 4, 5];  // 报错</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>将字符串转为真正的数组</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...<span class=\"string\">&#x27;hello&#x27;</span>]    <span class=\"comment\">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组</strong></li>\n</ul>\n<p>比较常见的应用是可以将某些数据结构转为数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// arguments对象</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = [...<span class=\"variable language_\">arguments</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用于替换<code>es5</code>中的<code>Array.prototype.slice.call(arguments)</code>写法。</p>\n<ul>\n<li><strong>使用</strong><code>Math</code><strong>函数获取数组中特定的值</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">9</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(...numbers); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(...numbers); <span class=\"comment\">// 9</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-对对象与数组的解构的理解\"><a href=\"#8-对对象与数组的解构的理解\" class=\"headerlink\" title=\"8. 对对象与数组的解构的理解\"></a>8. 对对象与数组的解构的理解</h3><p>解构是 ES6 提供的一种新的提取数据的模式，这种模式能够从对象或数组里有针对性地拿到想要的数值。 <strong>1）数组的解构</strong> 在解构数组时，以元素的位置为匹配条件来提取想要的数据的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<p>最终，a、b、c分别被赋予了数组第0、1、2个索引位的值：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112704625.png\" alt=\"image-20230610112704625\"></p>\n<p>数组里的0、1、2索引位的元素值，精准地被映射到了左侧的第0、1、2个变量里去，这就是数组解构的工作模式。还可以通过给左侧变量数组设置空占位的方式，实现对数组中某几个元素的精准提取：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a,,c] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<p>通过把中间位留空，可以顺利地把数组第一位和最后一位的值赋给 a、c 两个变量： </p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112753402.png\" alt=\"image-20230610112753402\"></p>\n<p><strong>2）对象的解构</strong> 对象解构比数组结构稍微复杂一些，也更显强大。在解构对象时，是以属性的名称为匹配条件，来提取想要的数据的。现在定义一个对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stu = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bob&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">24</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假如想要解构它的两个自有属性，可以这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; name, age &#125; = stu</span><br></pre></td></tr></table></figure>\n\n<p>这样就得到了 name 和 age 两个和 stu 平级的变量：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112810838.png\" alt=\"image-20230610112810838\"></p>\n<p>注意，对象解构严格以属性名作为定位依据，所以就算调换了 name 和 age 的位置，结果也是一样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; age, name &#125; = stu</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-如何提取高度嵌套的对象里的指定属性？\"><a href=\"#9-如何提取高度嵌套的对象里的指定属性？\" class=\"headerlink\" title=\"9. 如何提取高度嵌套的对象里的指定属性？\"></a>9. <strong>如何提取高度嵌套的对象里的指定属性？</strong></h3><p>有时会遇到一些嵌套程度非常深的对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> school = &#123;</span><br><span class=\"line\">   <span class=\"attr\">classes</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">stu</span>: &#123;</span><br><span class=\"line\">         <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bob&#x27;</span>,</span><br><span class=\"line\">         <span class=\"attr\">age</span>: <span class=\"number\">24</span>,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>像此处的 name 这个变量，嵌套了四层，此时如果仍然尝试老方法来提取它：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; name &#125; = school</span><br></pre></td></tr></table></figure>\n\n<p>显然是不奏效的，因为 school 这个对象本身是没有 name 这个属性的，name 位于 school 对象的“儿子的儿子”对象里面。要想把 name 提取出来，一种比较笨的方法是逐层解构：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; classes &#125; = school</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; stu &#125; = classes</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; name &#125; = stu</span><br><span class=\"line\">name <span class=\"comment\">// &#x27;Bob&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是还有一种更标准的做法，可以用一行代码来解决这个问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"attr\">classes</span>: &#123; <span class=\"attr\">stu</span>: &#123; name &#125; &#125;&#125; = school</span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name)  <span class=\"comment\">// &#x27;Bob&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以在解构出来的变量名右侧，通过冒号+{目标属性名}这种形式，进一步解构它，一直解构到拿到目标数据为止。</p>\n<h3 id=\"10-对-rest-参数的理解\"><a href=\"#10-对-rest-参数的理解\" class=\"headerlink\" title=\"10. 对 rest 参数的理解\"></a>10. 对 rest 参数的理解</h3><p>扩展运算符被用在函数形参上时，<strong>它还可以把一个分离的参数序列整合成一个数组</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mutiple</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> args) &#123;</span><br><span class=\"line\">    result *= val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">mutiple</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// 24</span></span><br></pre></td></tr></table></figure>\n\n<p>这里，传入 mutiple 的是四个分离的参数，但是如果在 mutiple 函数里尝试输出 args 的值，会发现它是一个数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mutiple</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">mutiple</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n\n<p>这就是 … rest运算符的又一层威力了，它可以把函数的多个入参收敛进一个数组里。这一点<strong>经常用于获取函数的多余参数，或者像上面这样处理函数参数个数不确定的情况。</strong></p>\n<h3 id=\"11-ES6中模板语法与字符串处理\"><a href=\"#11-ES6中模板语法与字符串处理\" class=\"headerlink\" title=\"11. ES6中模板语法与字符串处理\"></a>11. ES6中模板语法与字符串处理</h3><p>ES6 提出了“模板语法”的概念。在 ES6 以前，拼接字符串是很麻烦的事情：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;css&#x27;</span>   </span><br><span class=\"line\"><span class=\"keyword\">var</span> career = <span class=\"string\">&#x27;coder&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">var</span> hobby = [<span class=\"string\">&#x27;coding&#x27;</span>, <span class=\"string\">&#x27;writing&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> finalString = <span class=\"string\">&#x27;my name is &#x27;</span> + name + <span class=\"string\">&#x27;, I work as a &#x27;</span> + career + <span class=\"string\">&#x27;, I love &#x27;</span> + hobby[<span class=\"number\">0</span>] + <span class=\"string\">&#x27; and &#x27;</span> + hobby[<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>仅仅几个变量，写了这么多加号，还要时刻小心里面的空格和标点符号有没有跟错地方。但是有了模板字符串，拼接难度直线下降：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;css&#x27;</span>   </span><br><span class=\"line\"><span class=\"keyword\">var</span> career = <span class=\"string\">&#x27;coder&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">var</span> hobby = [<span class=\"string\">&#x27;coding&#x27;</span>, <span class=\"string\">&#x27;writing&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> finalString = <span class=\"string\">`my name is <span class=\"subst\">$&#123;name&#125;</span>, I work as a <span class=\"subst\">$&#123;career&#125;</span> I love <span class=\"subst\">$&#123;hobby[<span class=\"number\">0</span>]&#125;</span> and <span class=\"subst\">$&#123;hobby[<span class=\"number\">1</span>]&#125;</span>`</span></span><br></pre></td></tr></table></figure>\n\n<p>字符串不仅更容易拼了，也更易读了，代码整体的质量都变高了。这就是模板字符串的第一个优势——允许用${}的方式嵌入变量。但这还不是问题的关键，模板字符串的关键优势有两个：</p>\n<ul>\n<li>在模板字符串中，空格、缩进、换行都会被保留</li>\n<li>模板字符串完全支持“运算”式的表达式，可以在${}里完成一些计算</li>\n</ul>\n<p>基于第一点，可以在模板字符串里无障碍地直接写 html 代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&lt;li&gt;列表项1&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&lt;li&gt;列表项2&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message); <span class=\"comment\">// 正确输出，不存在报错</span></span><br></pre></td></tr></table></figure>\n\n<p>基于第二点，可以把一些简单的计算和调用丢进 ${} 来做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> finalString = <span class=\"string\">`<span class=\"subst\">$&#123;a&#125;</span> + <span class=\"subst\">$&#123;b&#125;</span> = <span class=\"subst\">$&#123;a+b&#125;</span>`</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(finalString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 输出 &#x27;1 + 2 = 3&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>除了模板语法外， ES6中还新增了一系列的字符串方法用于提升开发效率：</p>\n<p>（1）<strong>存在性判定</strong>：在过去，当判断一个字符/字符串是否在某字符串中时，只能用 indexOf &gt; -1 来做。现在 ES6 提供了三个方法：includes、startsWith、endsWith，它们都会返回一个布尔值来告诉你是否存在。</p>\n<ul>\n<li><strong>includes</strong>：判断字符串与子串的包含关系：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> son = <span class=\"string\">&#x27;haha&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">const</span> father = <span class=\"string\">&#x27;xixi haha hehe&#x27;</span></span><br><span class=\"line\">father.<span class=\"title function_\">includes</span>(son) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>startsWith</strong>：判断字符串是否以某个/某串字符开头：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> father = <span class=\"string\">&#x27;xixi haha hehe&#x27;</span></span><br><span class=\"line\">father.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;haha&#x27;</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">father.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;xixi&#x27;</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>endsWith</strong>：判断字符串是否以某个/某串字符结尾：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> father = <span class=\"string\">&#x27;xixi haha hehe&#x27;</span></span><br><span class=\"line\">  father.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;hehe&#x27;</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）<strong>自动重复</strong>：可以使用 repeat 方法来使同一个字符串输出多次（被连续复制多次）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sourceCode = <span class=\"string\">&#x27;repeat for 3 times;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> repeated = sourceCode.<span class=\"title function_\">repeat</span>(<span class=\"number\">3</span>) </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(repeated) <span class=\"comment\">// repeat for 3 times;repeat for 3 times;repeat for 3 times;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、JavaScript基础\"><a href=\"#三、JavaScript基础\" class=\"headerlink\" title=\"三、JavaScript基础\"></a>三、JavaScript基础</h2><h3 id=\"1-new操作符的实现原理\"><a href=\"#1-new操作符的实现原理\" class=\"headerlink\" title=\"1. new操作符的实现原理\"></a>1. new操作符的实现原理</h3><p><strong>new操作符的执行过程：</strong></p>\n<p>（1）首先创建了一个新的空对象</p>\n<p>（2）设置原型，将对象的原型设置为函数的 prototype 对象。</p>\n<p>（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）</p>\n<p>（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</p>\n<p>具体实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">objectFactory</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObject = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> constructor = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">shift</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 判断参数是否是一个函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> constructor !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;type error&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 新建一个空对象，对象的原型为构造函数的 prototype 对象</span></span><br><span class=\"line\">  newObject = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(constructor.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\">  <span class=\"comment\">// 将 this 指向新建对象，并执行函数</span></span><br><span class=\"line\">  result = constructor.<span class=\"title function_\">apply</span>(newObject, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 判断返回对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> flag = result &amp;&amp; (<span class=\"keyword\">typeof</span> result === <span class=\"string\">&quot;object&quot;</span> || <span class=\"keyword\">typeof</span> result === <span class=\"string\">&quot;function&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 判断返回结果</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> flag ? result : newObject;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用方法</span></span><br><span class=\"line\"><span class=\"title function_\">objectFactory</span>(构造函数, 初始化参数);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-map和Object的区别\"><a href=\"#2-map和Object的区别\" class=\"headerlink\" title=\"2. map和Object的区别\"></a>2. map和Object的区别</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>Map</th>\n<th>Object</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>意外的键</td>\n<td>Map默认情况不包含任何键，只包含显式插入的键。</td>\n<td>Object 有一个原型, 原型链上的键名有可能和自己在对象上的设置的键名产生冲突。</td>\n</tr>\n<tr>\n<td>键的类型</td>\n<td>Map的键可以是任意值，包括函数、对象或任意基本类型。</td>\n<td>Object 的键必须是 String 或是Symbol。</td>\n</tr>\n<tr>\n<td>键的顺序</td>\n<td>Map 中的 key 是有序的。因此，当迭代的时候， Map 对象以插入的顺序返回键值。</td>\n<td>Object 的键是无序的</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>Map 的键值对个数可以轻易地通过size 属性获取</td>\n<td>Object 的键值对个数只能手动计算</td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>Map 是 iterable 的，所以可以直接被迭代。</td>\n<td>迭代Object需要以某种方式获取它的键然后才能迭代。</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>在频繁增删键值对的场景下表现更好。</td>\n<td>在频繁添加和删除键值对的场景下未作出优化。</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-map和weakMap的区别\"><a href=\"#3-map和weakMap的区别\" class=\"headerlink\" title=\"3. map和weakMap的区别\"></a>3. map和weakMap的区别</h3><p><strong>（1）Map</strong> map本质上就是键值对的集合，但是普通的Object中的键值对中的键只能是字符串。而ES6提供的Map数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的Hash结构。如果Map的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。</p>\n<p>实际上Map是一个数组，它的每一个数据也都是一个数组，其形式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = [</span><br><span class=\"line\">     [<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;张三&quot;</span>],</span><br><span class=\"line\">     [<span class=\"string\">&quot;age&quot;</span>,<span class=\"number\">18</span>],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>Map数据结构有以下操作方法：</p>\n<ul>\n<li><strong>size</strong>： <code>map.size</code> 返回Map结构的成员总数。</li>\n<li>**set(key,value)**：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）</li>\n<li>**get(key)**：该方法读取key对应的键值，如果找不到key，返回undefined。</li>\n<li>**has(key)**：该方法返回一个布尔值，表示某个键是否在当前Map对象中。</li>\n<li>**delete(key)**：该方法删除某个键，返回true，如果删除失败，返回false。</li>\n<li>**clear()**：map.clear()清除所有成员，没有返回值。</li>\n</ul>\n<p>Map结构原生提供是三个遍历器生成函数和一个遍历方法</p>\n<ul>\n<li>keys()：返回键名的遍历器。</li>\n<li>values()：返回键值的遍历器。</li>\n<li>entries()：返回所有成员的遍历器。</li>\n<li>forEach()：遍历Map的所有成员。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>([</span><br><span class=\"line\">     [<span class=\"string\">&quot;foo&quot;</span>,<span class=\"number\">1</span>],</span><br><span class=\"line\">     [<span class=\"string\">&quot;bar&quot;</span>,<span class=\"number\">2</span>],</span><br><span class=\"line\">])</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> map.<span class=\"title function_\">keys</span>())&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key);  <span class=\"comment\">// foo bar</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> map.<span class=\"title function_\">values</span>())&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value); <span class=\"comment\">// 1 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> items <span class=\"keyword\">of</span> map.<span class=\"title function_\">entries</span>())&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(items);  <span class=\"comment\">// [&quot;foo&quot;,1]  [&quot;bar&quot;,2]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">map.<span class=\"title function_\">forEach</span>( <span class=\"function\">(<span class=\"params\">value,key,map</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key,value); <span class=\"comment\">// foo 1    bar 2</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>（2）WeakMap</strong> WeakMap 对象也是一组键值对的集合，其中的键是弱引用的。<strong>其键必须是对象</strong>，原始数据类型不能作为key值，而值可以是任意的。</p>\n<p>该对象也有以下几种方法：</p>\n<ul>\n<li>**set(key,value)**：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）</li>\n<li>**get(key)**：该方法读取key对应的键值，如果找不到key，返回undefined。</li>\n<li>**has(key)**：该方法返回一个布尔值，表示某个键是否在当前Map对象中。</li>\n<li>**delete(key)**：该方法删除某个键，返回true，如果删除失败，返回false。</li>\n</ul>\n<p>其clear()方法已经被弃用，所以可以通过创建一个空的WeakMap并替换原对象来实现清除。</p>\n<p>WeakMap的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。</p>\n<p>而WeakMap的<strong>键名所引用的对象都是弱引用</strong>，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的<strong>键名对象和所对应的键值对会自动消失，不用手动删除引用</strong>。</p>\n<p><strong>总结：</strong></p>\n<ul>\n<li>Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</li>\n<li>WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null 除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。</li>\n</ul>\n<h3 id=\"4-JavaScript有哪些内置对象\"><a href=\"#4-JavaScript有哪些内置对象\" class=\"headerlink\" title=\"4. JavaScript有哪些内置对象\"></a>4. JavaScript有哪些内置对象</h3><p>全局的对象（ global objects ）或称标准内置对象，不要和 “全局对象（global object）” 混淆。这里说的全局的对象是说在 全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。</p>\n<p><strong>标准内置对象的分类：</strong></p>\n<p>（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。例如 Infinity、NaN、undefined、null 字面量</p>\n<p>（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。例如 eval()、parseFloat()、parseInt() 等</p>\n<p>（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。例如 Object、Function、Boolean、Symbol、Error 等</p>\n<p>（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。例如 Number、Math、Date</p>\n<p>（5）字符串，用来表示和操作字符串的对象。例如 String、RegExp</p>\n<p>（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array</p>\n<p>（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。 例如 Map、Set、WeakMap、WeakSet</p>\n<p>（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。 例如 SIMD 等</p>\n<p>（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。例如 JSON 等</p>\n<p>（10）控制抽象对象 例如 Promise、Generator 等</p>\n<p>（11）反射。例如 Reflect、Proxy</p>\n<p>（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。例如 Intl、Intl.Collator 等</p>\n<p>（13）WebAssembly</p>\n<p>（14）其他。例如 arguments</p>\n<p><strong>总结：</strong> js 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js 定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。一般经常用到的如全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构造函数如 Date、Object 等，还有提供数学计算的单体内置对象如 Math 对象。</p>\n<h3 id=\"5-常用的正则表达式有哪些？\"><a href=\"#5-常用的正则表达式有哪些？\" class=\"headerlink\" title=\"5. 常用的正则表达式有哪些？\"></a>5. 常用的正则表达式有哪些？</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// （1）匹配 16 进制颜色值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// （2）匹配日期，如 yyyy-mm-dd 格式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^[0-9]&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// （3）匹配 qq 号</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^[1-9][0-9]&#123;4,10&#125;$/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// （4）手机号码正则</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^1[34578]\\d&#123;9&#125;$/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// （5）用户名正则</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^[a-zA-Z\\$][a-zA-Z0-9_\\$]&#123;4,16&#125;$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-对JSON的理解\"><a href=\"#6-对JSON的理解\" class=\"headerlink\" title=\"6. 对JSON的理解\"></a>6. 对JSON的理解</h3><p>JSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。</p>\n<p>在项目开发中，使用 JSON 作为前后端数据交换的方式。在前端通过将一个符合 JSON 格式的数据结构序列化为 JSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。</p>\n<p>因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是应该注意的是 JSON 和 js 中的对象不是一回事，JSON 中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。</p>\n<p>在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，</p>\n<ul>\n<li>JSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，可以调用这个函数将数据对象转化为 JSON 格式的字符串。</li>\n<li>JSON.parse() 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当从后端接收到 JSON 格式的字符串时，可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。</li>\n</ul>\n<h3 id=\"7-JavaScript脚本延迟加载的方式有哪些？\"><a href=\"#7-JavaScript脚本延迟加载的方式有哪些？\" class=\"headerlink\" title=\"7. JavaScript脚本延迟加载的方式有哪些？\"></a>7. JavaScript脚本延迟加载的方式有哪些？</h3><p>延迟加载就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。</p>\n<p>一般有以下几种方式：</p>\n<ul>\n<li><strong>defer 属性：</strong> 给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。</li>\n<li><strong>async 属性：</strong> 给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。</li>\n<li><strong>动态创建 DOM 方式：</strong> 动态创建 DOM 标签的方式，可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。</li>\n<li><strong>使用 setTimeout 延迟方法：</strong> 设置一个定时器来延迟加载js脚本文件</li>\n<li><strong>让 JS 最后加载：</strong> 将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。</li>\n</ul>\n<h3 id=\"8-JavaScript-类数组对象的定义？\"><a href=\"#8-JavaScript-类数组对象的定义？\" class=\"headerlink\" title=\"8. JavaScript 类数组对象的定义？\"></a>8. JavaScript 类数组对象的定义？</h3><p>一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。</p>\n<p>常见的类数组转换为数组的方法有这样几种：</p>\n<p>（1）通过 call 调用数组的 slice 方法来实现转换</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(arrayLike);</span><br></pre></td></tr></table></figure>\n\n<p>（2）通过 call 调用数组的 splice 方法来实现转换</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">splice</span>.<span class=\"title function_\">call</span>(arrayLike, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>（3）通过 apply 调用数组的 concat 方法来实现转换</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">concat</span>.<span class=\"title function_\">apply</span>([], arrayLike);</span><br></pre></td></tr></table></figure>\n\n<p>（4）通过 Array.from 方法来实现转换</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(arrayLike);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-数组有哪些原生方法？\"><a href=\"#9-数组有哪些原生方法？\" class=\"headerlink\" title=\"9. 数组有哪些原生方法？\"></a>9. 数组有哪些原生方法？</h3><ul>\n<li>数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。</li>\n<li>数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。</li>\n<li>数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。</li>\n<li>数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。</li>\n<li>数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。</li>\n<li>数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法</li>\n<li>数组归并方法 reduce() 和 reduceRight() 方法</li>\n</ul>\n<h3 id=\"10-Unicode、UTF-8、UTF-16、UTF-32的区别？\"><a href=\"#10-Unicode、UTF-8、UTF-16、UTF-32的区别？\" class=\"headerlink\" title=\"10. Unicode、UTF-8、UTF-16、UTF-32的区别？\"></a>10. <strong>Unicode、UTF-8、UTF-16、UTF-32的区别？</strong></h3><h4 id=\"（1）Unicode\"><a href=\"#（1）Unicode\" class=\"headerlink\" title=\"（1）Unicode\"></a>（1）Unicode</h4><p>在说<code>Unicode</code>之前需要先了解一下<code>ASCII</code>码：ASCII 码（<code>American Standard Code for Information Interchange</code>）称为美国标准信息交换码。</p>\n<ul>\n<li>它是基于拉丁字母的一套电脑编码系统。</li>\n<li>它定义了一个用于代表常见字符的字典。</li>\n<li>它包含了”A-Z”(包含大小写)，数据”0-9” 以及一些常见的符号。</li>\n<li>它是专门为英语而设计的，有128个编码，对其他语言无能为力</li>\n</ul>\n<p><code>ASCII</code>码可以表示的编码有限，要想表示其他语言的编码，还是要使用<code>Unicode</code>来表示，可以说<code>Unicode</code>是<code>ASCII</code> 的超集。</p>\n<p><code>Unicode</code>全称 <code>Unicode Translation Format</code>，又叫做统一码、万国码、单一码。<code>Unicode</code> 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p>\n<p><code>Unicode</code>的实现方式（也就是编码方式）有很多种，常见的是<strong>UTF-8</strong>、<strong>UTF-16</strong>、<strong>UTF-32</strong>和<strong>USC-2</strong>。</p>\n<h4 id=\"（2）UTF-8\"><a href=\"#（2）UTF-8\" class=\"headerlink\" title=\"（2）UTF-8\"></a>（2）UTF-8</h4><p><code>UTF-8</code>是使用最广泛的<code>Unicode</code>编码方式，它是一种可变长的编码方式，可以是1—4个字节不等，它可以完全兼容<code>ASCII</code>码的128个字符。</p>\n<p><strong>注意：</strong> <code>UTF-8</code> 是一种编码方式，<code>Unicode</code>是一个字符集合。</p>\n<p><code>UTF-8</code>的编码规则：</p>\n<ul>\n<li>对于<strong>单字节</strong>的符号，字节的第一位为0，后面的7位为这个字符的<code>Unicode</code>编码，因此对于英文字母，它的<code>Unicode</code>编码和<code>ACSII</code>编码一样。</li>\n<li>对于<strong>n字节</strong>的符号，第一个字节的前n位都是1，第n+1位设为0，后面字节的前两位一律设为10，剩下的没有提及的二进制位，全部为这个符号的<code>Unicode</code>码 。</li>\n</ul>\n<p>来看一下具体的<code>Unicode</code>编号范围与对应的<code>UTF-8</code>二进制格式 ：</p>\n<table>\n<thead>\n<tr>\n<th>编码范围（编号对应的十进制数）</th>\n<th>二进制格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x00—0x7F （0-127）</td>\n<td>0xxxxxxx</td>\n</tr>\n<tr>\n<td>0x80—0x7FF （128-2047）</td>\n<td>110xxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>0x800—0xFFFF  （2048-65535）</td>\n<td>1110xxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>0x10000—0x10FFFF  （65536以上）</td>\n<td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n</tbody></table>\n<p>那该如何通过具体的<code>Unicode</code>编码，进行具体的<code>UTF-8</code>编码呢？<strong>步骤如下：</strong></p>\n<ul>\n<li>找到该<code>Unicode</code>编码的所在的编号范围，进而找到与之对应的二进制格式</li>\n<li>将<code>Unicode</code>编码转换为二进制数（去掉最高位的0）</li>\n<li>将二进制数从右往左一次填入二进制格式的<code>X</code>中，如果有<code>X</code>未填，就设为0</li>\n</ul>\n<p>来看一个实际的例子： “<strong>马</strong>” 字的<code>Unicode</code>编码是：<code>0x9A6C</code>，整数编号是<code>39532</code> （1）首选确定了该字符在第三个范围内，它的格式是 <code>1110xxxx 10xxxxxx 10xxxxxx</code> （2）39532对应的二进制数为<code>1001 1010 0110 1100</code> （3）将二进制数填入X中，结果是：<code>11101001 10101001 10101100</code></p>\n<h4 id=\"（3）UTF-16\"><a href=\"#（3）UTF-16\" class=\"headerlink\" title=\"（3）UTF-16\"></a>（3）UTF-16</h4><p><strong>1. 平面的概念</strong></p>\n<p>在了解<code>UTF-16</code>之前，先看一下<strong>平面</strong>的概念： <code>Unicode</code>编码中有很多很多的字符，它并不是一次性定义的，而是分区进行定义的，每个区存放<strong>65536</strong>（216）个字符，这称为一个<strong>平面</strong>，目前总共有17 个平面。</p>\n<p>最前面的一个平面称为<strong>基本平面</strong>，它的码点从<strong>0 — 216-1</strong>，写成16进制就是<code>U+0000 — U+FFFF</code>，那剩下的16个平面就是<strong>辅助平面</strong>，码点范围是 <code>U+10000—U+10FFFF</code>。</p>\n<p><strong>2. UTF-16 概念：</strong></p>\n<p><code>UTF-16</code>也是<code>Unicode</code>编码集的一种编码形式，把<code>Unicode</code>字符集的抽象码位映射为16位长的整数（即码元）的序列，用于数据存储或传递。<code>Unicode</code>字符的码位需要1个或者2个16位长的码元来表示，因此<code>UTF-16</code>也是用变长字节表示的。</p>\n<p><strong>3. UTF-16 编码规则：</strong></p>\n<ul>\n<li>编号在 <code>U+0000—U+FFFF</code> 的字符（常用字符集），直接用两个字节表示。</li>\n<li>编号在 <code>U+10000—U+10FFFF</code> 之间的字符，需要用四个字节表示。</li>\n</ul>\n<p><strong>4. 编码识别</strong></p>\n<p>那么问题来了，当遇到两个字节时，怎么知道是把它当做一个字符还是和后面的两个字节一起当做一个字符呢？</p>\n<p><code>UTF-16</code> 编码肯定也考虑到了这个问题，在基本平面内，从 <code>U+D800 — U+DFFF</code> 是一个空段，也就是说这个区间的码点不对应任何的字符，因此这些空段就可以用来映射辅助平面的字符。</p>\n<p>辅助平面共有 <strong>220</strong> 个字符位，因此表示这些字符至少需要 20 个二进制位。<code>UTF-16</code> 将这 20 个二进制位分成两半，前 10 位映射在 <code>U+D800 — U+DBFF</code>，称为<strong>高位</strong>（H），后 10 位映射在 <code>U+DC00 — U+DFFF</code>，称为<strong>低位</strong>（L）。这就相当于，将一个辅助平面的字符拆成了两个基本平面的字符来表示。</p>\n<p>因此，当遇到两个字节时，发现它的码点在 <code>U+D800 —U+DBFF</code>之间，就可以知道，它后面的两个字节的码点应该在 <code>U+DC00 — U+DFFF</code> 之间，这四个字节必须放在一起进行解读。</p>\n<p><strong>5. 举例说明</strong></p>\n<p>以 “<strong>𡠀</strong>“ 字为例，它的 <code>Unicode</code> 码点为 <code>0x21800</code>，该码点超出了基本平面的范围，因此需要用四个字节来表示，步骤如下：</p>\n<ul>\n<li>首先计算超出部分的结果：<code>0x21800 - 0x10000</code></li>\n<li>将上面的计算结果转为20位的二进制数，不足20位就在前面补0，结果为：<code>0001000110 0000000000</code></li>\n<li>将得到的两个10位二进制数分别对应到两个区间中</li>\n<li><code>U+D800</code> 对应的二进制数为 <code>1101100000000000</code>， 将<code>0001000110</code>填充在它的后10 个二进制位，得到 <code>1101100001000110</code>，转成 16 进制数为 <code>0xD846</code>。同理，低位为 <code>0xDC00</code>，所以这个字的<code>UTF-16</code> 编码为 <code>0xD846 0xDC00</code></li>\n</ul>\n<h4 id=\"（4）-UTF-32\"><a href=\"#（4）-UTF-32\" class=\"headerlink\" title=\"（4） UTF-32\"></a>（4） UTF-32</h4><p><code>UTF-32</code> 就是字符所对应编号的整数二进制形式，每个字符占四个字节，这个是直接进行转换的。该编码方式占用的储存空间较多，所以使用较少。</p>\n<p>比如“<strong>马</strong>” 字的Unicode编号是：<code>U+9A6C</code>，整数编号是<code>39532</code>，直接转化为二进制：<code>1001 1010 0110 1100</code>，这就是它的UTF-32编码。</p>\n<h4 id=\"（5）总结\"><a href=\"#（5）总结\" class=\"headerlink\" title=\"（5）总结\"></a>（5）总结</h4><p><strong>Unicode、UTF-8、UTF-16、UTF-32有什么区别？</strong></p>\n<ul>\n<li><code>Unicode</code> 是编码字符集（字符集），而<code>UTF-8</code>、<code>UTF-16</code>、<code>UTF-32</code>是字符集编码（编码规则）；</li>\n<li><code>UTF-16</code> 使用变长码元序列的编码方式，相较于定长码元序列的<code>UTF-32</code>算法更复杂，甚至比同样是变长码元序列的<code>UTF-8</code>也更为复杂，因为其引入了独特的<strong>代理对</strong>这样的代理机制；</li>\n<li><code>UTF-8</code>需要判断每个字节中的开头标志信息，所以如果某个字节在传送过程中出错了，就会导致后面的字节也会解析出错；而<code>UTF-16</code>不会判断开头标志，即使错也只会错一个字符，所以容错能力教强；</li>\n<li>如果字符内容全部英文或英文与其他文字混合，但英文占绝大部分，那么用<code>UTF-8</code>就比<code>UTF-16</code>节省了很多空间；而如果字符内容全部是中文这样类似的字符或者混合字符中中文占绝大多数，那么<code>UTF-16</code>就占优势了，可以节省很多空间；</li>\n</ul>\n<h3 id=\"11-常见的位运算符有哪些？其计算规则是什么？\"><a href=\"#11-常见的位运算符有哪些？其计算规则是什么？\" class=\"headerlink\" title=\"11. 常见的位运算符有哪些？其计算规则是什么？\"></a>11. 常见的位运算符有哪些？其计算规则是什么？</h3><p>现代计算机中数据都是以二进制的形式存储的，即0、1两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。</p>\n<p>常见的位运算有以下几种：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>运算规则</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&amp;</code></td>\n<td>与</td>\n<td>两个位都为1时，结果才为1</td>\n<td></td>\n</tr>\n<tr>\n<td>`</td>\n<td>`</td>\n<td>或</td>\n<td>两个位都为0时，结果才为0</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>异或</td>\n<td>两个位相同为0，相异为1</td>\n<td></td>\n</tr>\n<tr>\n<td><code>~</code></td>\n<td>取反</td>\n<td>0变1，1变0</td>\n<td></td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td>左移</td>\n<td>各二进制位全部左移若干位，高位丢弃，低位补0</td>\n<td></td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code></td>\n<td>右移</td>\n<td>各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃</td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"1-按位与运算符（-amp-）\"><a href=\"#1-按位与运算符（-amp-）\" class=\"headerlink\" title=\"1. 按位与运算符（&amp;）\"></a>1. 按位与运算符（&amp;）</h4><p><strong>定义：</strong> 参加运算的两个数据<strong>按二进制位</strong>进行“与”运算。 <strong>运算规则：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> &amp; <span class=\"number\">0</span> = <span class=\"number\">0</span>  </span><br><span class=\"line\"><span class=\"number\">0</span> &amp; <span class=\"number\">1</span> = <span class=\"number\">0</span>  </span><br><span class=\"line\"><span class=\"number\">1</span> &amp; <span class=\"number\">0</span> = <span class=\"number\">0</span>  </span><br><span class=\"line\"><span class=\"number\">1</span> &amp; <span class=\"number\">1</span> = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：两位同时为1，结果才为1，否则结果为0。 例如：3&amp;5 即：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0000</span> <span class=\"number\">0011</span> </span><br><span class=\"line\">   <span class=\"number\">0000</span> <span class=\"number\">0101</span> </span><br><span class=\"line\"> = <span class=\"number\">0000</span> <span class=\"number\">0001</span></span><br></pre></td></tr></table></figure>\n\n<p>因此 3&amp;5 的值为1。 注意：负数按补码形式参加按位与运算。</p>\n<p><strong>用途：</strong></p>\n<p><strong>（1）判断奇偶</strong></p>\n<p>只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用<code>if ((i &amp; 1) == 0)</code>代替<code>if (i % 2 == 0)</code>来判断a是不是偶数。</p>\n<p><strong>（2）清零</strong></p>\n<p>如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。</p>\n<h4 id=\"2-按位或运算符（-）\"><a href=\"#2-按位或运算符（-）\" class=\"headerlink\" title=\"2. 按位或运算符（|）\"></a>2. 按位或运算符（|）</h4><p><strong>定义：</strong> 参加运算的两个对象按二进制位进行“或”运算。</p>\n<p><strong>运算规则：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> | <span class=\"number\">0</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">0</span> | <span class=\"number\">1</span> = <span class=\"number\">1</span>  </span><br><span class=\"line\"><span class=\"number\">1</span> | <span class=\"number\">0</span> = <span class=\"number\">1</span>  </span><br><span class=\"line\"><span class=\"number\">1</span> | <span class=\"number\">1</span> = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：参加运算的两个对象只要有一个为1，其值为1。 例如：3|5即：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0000</span> <span class=\"number\">0011</span></span><br><span class=\"line\">  <span class=\"number\">0000</span> <span class=\"number\">0101</span> </span><br><span class=\"line\">= <span class=\"number\">0000</span> <span class=\"number\">0111</span></span><br></pre></td></tr></table></figure>\n\n<p>因此，3|5的值为7。 注意：负数按补码形式参加按位或运算。</p>\n<h4 id=\"3-异或运算符（-）\"><a href=\"#3-异或运算符（-）\" class=\"headerlink\" title=\"3. 异或运算符（^）\"></a>3. 异或运算符（^）</h4><p><strong>定义：</strong> 参加运算的两个数据按二进制位进行“异或”运算。</p>\n<p><strong>运算规则：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> ^ <span class=\"number\">0</span> = <span class=\"number\">0</span>  </span><br><span class=\"line\"><span class=\"number\">0</span> ^ <span class=\"number\">1</span> = <span class=\"number\">1</span>  </span><br><span class=\"line\"><span class=\"number\">1</span> ^ <span class=\"number\">0</span> = <span class=\"number\">1</span>  </span><br><span class=\"line\"><span class=\"number\">1</span> ^ <span class=\"number\">1</span> = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：参加运算的两个对象，如果两个相应位相同为0，相异为1。 例如：3|5即：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0000</span> <span class=\"number\">0011</span></span><br><span class=\"line\">  <span class=\"number\">0000</span> <span class=\"number\">0101</span> </span><br><span class=\"line\">= <span class=\"number\">0000</span> <span class=\"number\">0110</span></span><br></pre></td></tr></table></figure>\n\n<p>因此，3^5的值为6。 异或运算的性质:</p>\n<ul>\n<li>交换律：<code>(a^b)^c == a^(b^c)</code></li>\n<li>结合律：<code>(a + b)^c == a^b + b^c</code></li>\n<li>对于任何数x，都有 <code>x^x=0，x^0=x</code></li>\n<li>自反性: <code>a^b^b=a^0=a</code>;</li>\n</ul>\n<h4 id=\"4-取反运算符\"><a href=\"#4-取反运算符\" class=\"headerlink\" title=\"4. 取反运算符 (~)\"></a>4. 取反运算符 (~)</h4><p><strong>定义：</strong> 参加运算的一个数据按二进制进行“取反”运算。</p>\n<p><strong>运算规则：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ <span class=\"number\">1</span> = <span class=\"number\">0</span>~ <span class=\"number\">0</span> = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：对一个二进制数按位取反，即将0变1，1变0。 例如：~6 即：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0000</span> <span class=\"number\">0110</span>= <span class=\"number\">1111</span> <span class=\"number\">1001</span></span><br></pre></td></tr></table></figure>\n\n<p>在计算机中，正数用原码表示，负数使用补码存储，首先看最高位，最高位1表示负数，0表示正数。此计算机二进制码为负数，最高位为符号位。 当发现按位取反为负数时，就<strong>直接取其补码</strong>，变为十进制：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0000</span> <span class=\"number\">0110</span>   = <span class=\"number\">1111</span> <span class=\"number\">1001</span>反码：<span class=\"number\">1000</span> <span class=\"number\">0110</span>补码：<span class=\"number\">1000</span> <span class=\"number\">0111</span></span><br></pre></td></tr></table></figure>\n\n<p>因此，~6的值为-7。</p>\n<h4 id=\"5-左移运算符（-lt-lt-）\"><a href=\"#5-左移运算符（-lt-lt-）\" class=\"headerlink\" title=\"5. 左移运算符（&lt;&lt;）\"></a>5. 左移运算符（&lt;&lt;）</h4><p><strong>定义：</strong> 将一个运算对象的各二进制位全部左移若干位，左边的二进制位丢弃，右边补0。 设 a=1010 1110，a = a&lt;&lt; 2 将a的二进制位左移2位、右补0，即得a=1011 1000。 若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。</p>\n<h4 id=\"6-右移运算符（-gt-gt-）\"><a href=\"#6-右移运算符（-gt-gt-）\" class=\"headerlink\" title=\"6. 右移运算符（&gt;&gt;）\"></a>6. 右移运算符（&gt;&gt;）</h4><p><strong>定义：</strong> 将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。 例如：a=a&gt;&gt;2 将a的二进制位右移2位，左补0 或者 左补1得看被移数是正还是负。 操作数每右移一位，相当于该数除以2。</p>\n<h4 id=\"7-原码、补码、反码\"><a href=\"#7-原码、补码、反码\" class=\"headerlink\" title=\"7. 原码、补码、反码\"></a>7. 原码、补码、反码</h4><p>上面提到了补码、反码等知识，这里就补充一下。 计算机中的<strong>有符号数</strong>有三种表示方法，即原码、反码和补码。三种表示方法均有符号位和数值位两部分，符号位都是用0表示“正”，用1表示“负”，而数值位，三种表示方法各不相同。</p>\n<p><strong>（1）原码</strong></p>\n<p>原码就是一个数的二进制数。例如：10的原码为0000 1010</p>\n<p><strong>（2）反码</strong></p>\n<ul>\n<li>正数的反码与原码相同，如：10 反码为 0000 1010</li>\n<li>负数的反码为除符号位，按位取反，即0变1，1变0。</li>\n</ul>\n<p>例如：-10</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原码：<span class=\"number\">1000</span> <span class=\"number\">1010</span></span><br><span class=\"line\">反码：<span class=\"number\">1111</span> <span class=\"number\">0101</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>（3）补码</strong></p>\n<ul>\n<li>正数的补码与原码相同，如：10 补码为 0000 1010</li>\n<li>负数的补码是原码除符号位外的所有位取反即0变1，1变0，然后加1，也就是反码加1。</li>\n</ul>\n<p>例如：-10</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原码：<span class=\"number\">1000</span> <span class=\"number\">1010</span></span><br><span class=\"line\">反码：<span class=\"number\">1111</span> <span class=\"number\">0101</span></span><br><span class=\"line\">补码：<span class=\"number\">1111</span> <span class=\"number\">0110</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-为什么函数的-arguments-参数是类数组而不是数组？如何遍历类数组\"><a href=\"#12-为什么函数的-arguments-参数是类数组而不是数组？如何遍历类数组\" class=\"headerlink\" title=\"12. 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?\"></a>12. 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?</h3><p><code>arguments</code>是一个对象，它的属性是从 0 开始依次递增的数字，还有<code>callee</code>和<code>length</code>等属性，与数组相似；但是它却没有数组常见的方法属性，如<code>forEach</code>, <code>reduce</code>等，所以叫它们类数组。</p>\n<p>要遍历类数组，有三个方法：</p>\n<p>（1）将数组的方法应用到类数组上，这时候就可以使用<code>call</code>和<code>apply</code>方法，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">  <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">forEach</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（2）使用Array.from方法将类数组转化成数组：‌</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">  <span class=\"keyword\">const</span> arrArgs = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"variable language_\">arguments</span>) </span><br><span class=\"line\">  arrArgs.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（3）使用展开运算符将类数组转化成数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">    <span class=\"keyword\">const</span> arrArgs = [...<span class=\"variable language_\">arguments</span>] </span><br><span class=\"line\">    arrArgs.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)) </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-什么是-DOM-和-BOM？\"><a href=\"#13-什么是-DOM-和-BOM？\" class=\"headerlink\" title=\"13. 什么是 DOM 和 BOM？\"></a>13. 什么是 DOM 和 BOM？</h3><ul>\n<li>DOM 指的是文档对象模型，它指的是把文档当做一个对象，这个对象主要定义了处理网页内容的方法和接口。</li>\n<li>BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。</li>\n</ul>\n<h3 id=\"14-对类数组对象的理解，如何转化为数组\"><a href=\"#14-对类数组对象的理解，如何转化为数组\" class=\"headerlink\" title=\"14. 对类数组对象的理解，如何转化为数组\"></a>14. 对类数组对象的理解，如何转化为数组</h3><p>一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，函数参数也可以被看作是类数组对象，因为它含有 length属性值，代表可接收的参数个数。</p>\n<p>常见的类数组转换为数组的方法有这样几种：</p>\n<ul>\n<li>通过 call 调用数组的 slice 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(arrayLike);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过 call 调用数组的 splice 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">splice</span>.<span class=\"title function_\">call</span>(arrayLike, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过 apply 调用数组的 concat 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">concat</span>.<span class=\"title function_\">apply</span>([], arrayLike);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过 Array.from 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(arrayLike);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-escape、encodeURI、encodeURIComponent-的区别\"><a href=\"#15-escape、encodeURI、encodeURIComponent-的区别\" class=\"headerlink\" title=\"15. escape、encodeURI、encodeURIComponent 的区别\"></a>15. escape、encodeURI、encodeURIComponent 的区别</h3><ul>\n<li>encodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。</li>\n<li>encodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。</li>\n<li>escape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 %u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。</li>\n</ul>\n<h3 id=\"16-对AJAX的理解，实现一个AJAX请求\"><a href=\"#16-对AJAX的理解，实现一个AJAX请求\" class=\"headerlink\" title=\"16. 对AJAX的理解，实现一个AJAX请求\"></a>16. 对AJAX的理解，实现一个AJAX请求</h3><p>AJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。</p>\n<p>创建AJAX请求的步骤：</p>\n<ul>\n<li><strong>创建一个 XMLHttpRequest 对象。</strong></li>\n<li>在这个对象上<strong>使用 open 方法创建一个 HTTP 请求</strong>，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。</li>\n<li>在发起请求前，可以为这个对象<strong>添加一些信息和监听函数</strong>。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。</li>\n<li>当对象的属性和监听函数设置完成后，最后调<strong>用 sent 方法来向服务器发起请求</strong>，可以传入参数作为发送的数据体。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SERVER_URL</span> = <span class=\"string\">&quot;/server&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\"><span class=\"comment\">// 创建 Http 请求</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置状态监听函数</span></span><br><span class=\"line\">xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> !== <span class=\"number\">4</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 当请求成功时</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">handle</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">response</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">statusText</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 设置请求失败时的监听函数</span></span><br><span class=\"line\">xhr.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">statusText</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 设置请求头信息</span></span><br><span class=\"line\">xhr.<span class=\"property\">responseType</span> = <span class=\"string\">&quot;json&quot;</span>;</span><br><span class=\"line\">xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Accept&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 发送 Http 请求</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>使用Promise封装AJAX：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise 封装实现：</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getJSON</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个 promise 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 新建一个 http 请求</span></span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 设置状态的监听函数</span></span><br><span class=\"line\">    xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> !== <span class=\"number\">4</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 当请求成功或失败时，改变 promise 的状态</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">response</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">statusText</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 设置错误监听函数</span></span><br><span class=\"line\">    xhr.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">statusText</span>));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 设置响应的数据类型</span></span><br><span class=\"line\">    xhr.<span class=\"property\">responseType</span> = <span class=\"string\">&quot;json&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 设置请求头信息</span></span><br><span class=\"line\">    xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Accept&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 发送 http 请求</span></span><br><span class=\"line\">    xhr.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-JavaScript为什么要进行变量提升，它导致了什么问题？\"><a href=\"#17-JavaScript为什么要进行变量提升，它导致了什么问题？\" class=\"headerlink\" title=\"17. JavaScript为什么要进行变量提升，它导致了什么问题？\"></a>17. JavaScript为什么要进行变量提升，它导致了什么问题？</h3><p>变量提升的表现是，无论在函数中何处位置声明的变量，好像都被提升到了函数的首部，可以在变量声明前访问到而不会报错。</p>\n<p>造成变量声明提升的<strong>本质原因</strong>是 js 引擎在代码执行前有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象。当访问一个变量时，会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性，它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。</p>\n<p>首先要知道，JS在拿到一个变量或者一个函数的时候，会有两步操作，即解析和执行。</p>\n<ul>\n<li><p>在解析阶段</p>\n<p>，JS会检查语法，并对函数进行预编译。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。</p>\n<ul>\n<li>全局上下文：变量定义，函数声明</li>\n<li>函数上下文：变量定义，函数声明，this，arguments</li>\n</ul>\n</li>\n<li><p><strong>在执行阶段</strong>，就是按照代码的顺序依次执行。</p>\n</li>\n</ul>\n<p>那为什么会进行变量提升呢？主要有以下两个原因：</p>\n<ul>\n<li>提高性能</li>\n<li>容错性更好</li>\n</ul>\n<p><strong>（1）提高性能</strong> 在JS代码执行之前，会进行语法检查和预编译，并且这一操作只进行一次。这么做就是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新解析一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。</p>\n<p>在解析的过程中，还会为函数生成预编译代码。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，去除注释、不必要的空白等。这样做的好处就是每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量，创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。</p>\n<p><strong>（2）容错性更好</strong></p>\n<p>变量提升可以在一定程度上提高JS的容错性，看下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span>;<span class=\"keyword\">var</span> a;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。</p>\n<p>虽然，在可以开发过程中，可以完全避免这样写，但是有时代码很复杂的时候。可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。</p>\n<p><strong>总结：</strong></p>\n<ul>\n<li>解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间</li>\n<li>声明提升还可以提高JS代码的容错性，使一些不规范的代码也可以正常执行</li>\n</ul>\n<p>变量提升虽然有一些优点，但是他也会造成一定的问题，在ES6中提出了let、const来定义变量，它们就没有变量提升的机制。下面看一下变量提升可能会导致的问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> tmp = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn</span>();  <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个函数中，原本是要打印出外层的tmp变量，但是因为变量提升的问题，内层定义的tmp被提到函数内部的最顶部，相当于覆盖了外层的tmp，所以打印结果为undefined。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; tmp.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 11</span></span><br></pre></td></tr></table></figure>\n\n<p>由于遍历时定义的i会变量提升成为一个全局变量，在函数结束之后不会被销毁，所以打印出来11。</p>\n<h3 id=\"18-什么是尾调用，使用尾调用有什么好处？\"><a href=\"#18-什么是尾调用，使用尾调用有什么好处？\" class=\"headerlink\" title=\"18. 什么是尾调用，使用尾调用有什么好处？\"></a>18. 什么是尾调用，使用尾调用有什么好处？</h3><p>尾调用指的是函数的最后一步调用另一个函数。代码执行是基于执行栈的，所以当在一个函数里调用另一个函数时，会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这时可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。</p>\n<h3 id=\"19-ES6模块与CommonJS模块有什么异同？\"><a href=\"#19-ES6模块与CommonJS模块有什么异同？\" class=\"headerlink\" title=\"19.  ES6模块与CommonJS模块有什么异同？\"></a>19.  <strong>ES6</strong>模块与<strong>CommonJS</strong>模块有什么异同？</h3><p>ES6 Module和CommonJS模块的区别：</p>\n<ul>\n<li>CommonJS是对模块的浅拷⻉，ES6 Module是对模块的引⽤，即ES6 Module只存只读，不能改变其值，也就是指针指向不能变，类似const；</li>\n<li>import的接⼝是read-only（只读状态），不能修改其变量值。 即不能修改其变量的指针指向，但可以改变变量内部指针指向，可以对commonJS对重新赋值（改变指针指向），但是对ES6 Module赋值会编译报错。</li>\n</ul>\n<p>ES6 Module和CommonJS模块的共同点：</p>\n<ul>\n<li>CommonJS和ES6 Module都可以对引⼊的对象进⾏赋值，即对对象内部属性的值进⾏改变。</li>\n</ul>\n<h3 id=\"20-常见的DOM操作有哪些\"><a href=\"#20-常见的DOM操作有哪些\" class=\"headerlink\" title=\"20. 常见的DOM操作有哪些\"></a>20. 常见的DOM操作有哪些</h3><h4 id=\"1）DOM-节点的获取\"><a href=\"#1）DOM-节点的获取\" class=\"headerlink\" title=\"1）DOM 节点的获取\"></a>1）DOM 节点的获取</h4><p>DOM 节点的获取的API及使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getElementById <span class=\"comment\">// 按照 id 查询</span></span><br><span class=\"line\">getElementsByTagName <span class=\"comment\">// 按照标签名查询</span></span><br><span class=\"line\">getElementsByClassName <span class=\"comment\">// 按照类名查询</span></span><br><span class=\"line\">querySelectorAll <span class=\"comment\">// 按照 css 选择器查询</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按照 id 查询</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> imooc = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;imooc&#x27;</span>) <span class=\"comment\">// 查询到 id 为 imooc 的元素</span></span><br><span class=\"line\"><span class=\"comment\">// 按照标签名查询</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pList = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;p&#x27;</span>)  <span class=\"comment\">// 查询到标签为 p 的集合</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(divList.<span class=\"property\">length</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(divList[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"comment\">// 按照类名查询</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moocList = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByClassName</span>(<span class=\"string\">&#x27;mooc&#x27;</span>) <span class=\"comment\">// 查询到类名为 mooc 的集合</span></span><br><span class=\"line\"><span class=\"comment\">// 按照 css 选择器查询</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pList = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;.mooc&#x27;</span>) <span class=\"comment\">// 查询到类名为 mooc 的集合</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2）DOM-节点的创建\"><a href=\"#2）DOM-节点的创建\" class=\"headerlink\" title=\"2）DOM 节点的创建\"></a>2）DOM 节点的创建</h4><p><strong>创建一个新节点，并把它添加到指定节点的后面。</strong> 已知的 HTML 结构如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DEMO<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>我是标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>   </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>要求添加一个有内容的 span 节点到 id 为 title 的节点后面，做法就是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先获取父节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> container = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;container&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 创建新节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> targetSpan = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;span&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 设置 span 节点的内容</span></span><br><span class=\"line\">targetSpan.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;hello world&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 把新创建的元素塞进父节点里去</span></span><br><span class=\"line\">container.<span class=\"title function_\">appendChild</span>(targetSpan)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3）DOM-节点的删除\"><a href=\"#3）DOM-节点的删除\" class=\"headerlink\" title=\"3）DOM 节点的删除\"></a>3）DOM 节点的删除</h4><p><strong>删除指定的 DOM 节点，</strong> 已知的 HTML 结构如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DEMO<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>我是标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>   </span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>需要删除 id 为 title 的元素，做法是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取目标元素的父元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> container = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;container&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 获取目标元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> targetNode = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;title&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 删除目标元素</span></span><br><span class=\"line\">container.<span class=\"title function_\">removeChild</span>(targetNode)</span><br></pre></td></tr></table></figure>\n\n<p>或者通过子节点数组来完成删除：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取目标元素的父元素var container = document.getElementById(&#x27;container&#x27;)// 获取目标元素var targetNode = container.childNodes[1]// 删除目标元素container.removeChild(targetNode)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4）修改-DOM-元素\"><a href=\"#4）修改-DOM-元素\" class=\"headerlink\" title=\"4）修改 DOM 元素\"></a>4）修改 DOM 元素</h4><p>修改 DOM 元素这个动作可以分很多维度，比如说移动 DOM 元素的位置，修改 DOM 元素的属性等。</p>\n<p><strong>将指定的两个 DOM 元素交换位置，</strong> 已知的 HTML 结构如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DEMO<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>我是标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span>我是内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>   </span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>现在需要调换 title 和 content 的位置，可以考虑 insertBefore 或者 appendChild：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取父元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> container = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;container&#x27;</span>)   </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 获取两个需要被交换的元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> title = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;title&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;content&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 交换两个元素，把 content 置于 title 前面</span></span><br><span class=\"line\">container.<span class=\"title function_\">insertBefore</span>(content, title)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21-use-strict是什么意思-使用它区别是什么？\"><a href=\"#21-use-strict是什么意思-使用它区别是什么？\" class=\"headerlink\" title=\"21. use strict是什么意思 ? 使用它区别是什么？\"></a>21. use strict是什么意思 ? 使用它区别是什么？</h3><p>use strict 是一种 ECMAscript5 添加的（严格模式）运行模式，这种模式使得 Javascript 在更严格的条件下运行。设立严格模式的目的如下：</p>\n<ul>\n<li>消除 Javascript 语法的不合理、不严谨之处，减少怪异行为;</li>\n<li>消除代码运行的不安全之处，保证代码运行的安全；</li>\n<li>提高编译器效率，增加运行速度；</li>\n<li>为未来新版本的 Javascript 做好铺垫。</li>\n</ul>\n<p>区别：</p>\n<ul>\n<li>禁止使用 with 语句。</li>\n<li>禁止 this 关键字指向全局对象。</li>\n<li>对象不能有重名的属性。</li>\n</ul>\n<h3 id=\"22-如何判断一个对象是否属于某个类？\"><a href=\"#22-如何判断一个对象是否属于某个类？\" class=\"headerlink\" title=\"22. 如何判断一个对象是否属于某个类？\"></a>22. 如何判断一个对象是否属于某个类？</h3><ul>\n<li>第一种方式，使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</li>\n<li>第二种方式，通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写。</li>\n<li>第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString() 方法来打印对象的[[Class]] 属性来进行判断。</li>\n</ul>\n<h3 id=\"23-强类型语言和弱类型语言的区别\"><a href=\"#23-强类型语言和弱类型语言的区别\" class=\"headerlink\" title=\"23. 强类型语言和弱类型语言的区别\"></a>23. 强类型语言和弱类型语言的区别</h3><ul>\n<li><strong>强类型语言</strong>：强类型语言也称为强类型定义语言，是一种总是强制类型定义的语言，要求变量的使用要严格符合定义，所有变量都必须先定义后使用。Java和C++等语言都是强制类型定义的，也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。例如你有一个整数，如果不显式地进行转换，你不能将其视为一个字符串。</li>\n<li><strong>弱类型语言</strong>：弱类型语言也称为弱类型定义语言，与强类型定义相反。JavaScript语言就属于弱类型语言。简单理解就是一种变量类型可以被忽略的语言。比如JavaScript是弱类型定义的，在JavaScript中就可以将字符串’12’和整数3进行连接得到字符串’123’，在相加的时候会进行强制类型转换。</li>\n</ul>\n<p>两者对比：强类型语言在速度上可能略逊色于弱类型语言，但是强类型语言带来的严谨性可以有效地帮助避免许多错误。</p>\n<h3 id=\"24-解释性语言和编译型语言的区别\"><a href=\"#24-解释性语言和编译型语言的区别\" class=\"headerlink\" title=\"24. 解释性语言和编译型语言的区别\"></a>24. 解释性语言和编译型语言的区别</h3><p>（1）解释型语言 使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行。是代码在执行时才被解释器一行行动态翻译和执行，而不是在执行之前就完成翻译。解释型语言不需要事先编译，其直接将源代码解释成机器码并立即执行，所以只要某一平台提供了相应的解释器即可运行该程序。其特点总结如下</p>\n<ul>\n<li>解释型语言每次运行都需要将源代码解释称机器码并执行，效率较低；</li>\n<li>只要平台提供相应的解释器，就可以运行源代码，所以可以方便源程序移植；</li>\n<li>JavaScript、Python等属于解释型语言。</li>\n</ul>\n<p>（2）编译型语言 使用专门的编译器，针对特定的平台，将高级语言源代码一次性的编译成可被该平台硬件执行的机器码，并包装成该平台所能识别的可执行性程序的格式。在编译型语言写的程序执行之前，需要一个专门的编译过程，把源代码编译成机器语言的文件，如exe格式的文件，以后要再运行时，直接使用编译结果即可，如直接运行exe文件。因为只需编译一次，以后运行时不需要编译，所以编译型语言执行效率高。其特点总结如下：</p>\n<ul>\n<li>一次性的编译成平台相关的机器语言文件，运行时脱离开发环境，运行效率高；</li>\n<li>与特定平台相关，一般无法移植到其他平台；</li>\n<li>C、C++等属于编译型语言。</li>\n</ul>\n<p><strong>两者主要区别在于：</strong> 前者源程序编译后即可在该平台运行，后者是在运行期间才编译。所以前者运行速度快，后者跨平台性好。</p>\n<h3 id=\"25-for…in和for…of的区别\"><a href=\"#25-for…in和for…of的区别\" class=\"headerlink\" title=\"25. for…in和for…of的区别\"></a>25. for…in和for…of的区别</h3><p>for…of 是ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，和ES3中的for…in的区别如下</p>\n<ul>\n<li>for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；</li>\n<li>for… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；</li>\n<li>对于数组的遍历，for…in 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，for…of 只返回数组的下标对应的属性值；</li>\n</ul>\n<p><strong>总结：</strong> for…in 循环主要是为了遍历对象而生，不适用于遍历数组；for…of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。</p>\n<h3 id=\"26-如何使用for…of遍历对象\"><a href=\"#26-如何使用for…of遍历对象\" class=\"headerlink\" title=\"26. 如何使用for…of遍历对象\"></a>26. 如何使用for…of遍历对象</h3><p>for…of是作为ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，普通的对象用for..of遍历是会报错的。</p>\n<p>如果需要遍历的对象是类数组对象，用Array.from转成数组即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>:<span class=\"string\">&#x27;one&#x27;</span>,</span><br><span class=\"line\">    <span class=\"number\">1</span>:<span class=\"string\">&#x27;two&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">length</span>: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(obj);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">of</span> obj)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(k)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果不是类数组对象，就给对象添加一个[Symbol.iterator]属性，并指向一个迭代器即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法一：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span>:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>] = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">next</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count&lt;keys.<span class=\"property\">length</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> &#123;<span class=\"attr\">value</span>: obj[keys[count++]],<span class=\"attr\">done</span>:<span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> &#123;<span class=\"attr\">value</span>:<span class=\"literal\">undefined</span>,<span class=\"attr\">done</span>:<span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">of</span> obj)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span>:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>] = <span class=\"keyword\">function</span>*()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">of</span> keys)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> [k,obj[k]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> [k,v] <span class=\"keyword\">of</span> obj)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(k,v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"27-ajax、axios、fetch的区别\"><a href=\"#27-ajax、axios、fetch的区别\" class=\"headerlink\" title=\"27. ajax、axios、fetch的区别\"></a>27. ajax、axios、fetch的区别</h3><p><strong>（1）AJAX</strong> Ajax 即“AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。其缺点如下：</p>\n<ul>\n<li>本身是针对MVC编程，不符合前端MVVM的浪潮</li>\n<li>基于原生XHR开发，XHR本身的架构不清晰</li>\n<li>不符合关注分离（Separation of Concerns）的原则</li>\n<li>配置和调用方式非常混乱，而且基于事件的异步模型不友好。</li>\n</ul>\n<p><strong>（2）Fetch</strong> fetch号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象。Fetch是基于promise设计的。Fetch的代码结构比起ajax简单多。<strong>fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象</strong>。</p>\n<p>fetch的优点：</p>\n<ul>\n<li>语法简洁，更加语义化</li>\n<li>基于标准 Promise 实现，支持 async/await</li>\n<li>更加底层，提供的API丰富（request, response）</li>\n<li>脱离了XHR，是ES规范里新的实现方式</li>\n</ul>\n<p>fetch的缺点：</p>\n<ul>\n<li>fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。</li>\n<li>fetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: ‘include’})</li>\n<li>fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费</li>\n<li>fetch没有办法原生监测请求的进度，而XHR可以</li>\n</ul>\n<p><strong>（3）Axios</strong> Axios 是一种基于Promise封装的HTTP客户端，其特点如下：</p>\n<ul>\n<li>浏览器端发起XMLHttpRequests请求</li>\n<li>node端发起http请求</li>\n<li>支持Promise API</li>\n<li>监听请求和返回</li>\n<li>对请求和返回进行转化</li>\n<li>取消请求</li>\n<li>自动转换json数据</li>\n<li>客户端支持抵御XSRF攻击</li>\n</ul>\n<h3 id=\"28-数组的遍历方法有哪些\"><a href=\"#28-数组的遍历方法有哪些\" class=\"headerlink\" title=\"28. 数组的遍历方法有哪些\"></a>28. 数组的遍历方法有哪些</h3><table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>是否改变原数组</strong></th>\n<th><strong>特点</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>forEach()</td>\n<td>否</td>\n<td>数组方法，不改变原数组，没有返回值</td>\n</tr>\n<tr>\n<td>map()</td>\n<td>否</td>\n<td>数组方法，不改变原数组，有返回值，可链式调用</td>\n</tr>\n<tr>\n<td>filter()</td>\n<td>否</td>\n<td>数组方法，过滤数组，返回包含符合条件的元素的数组，可链式调用</td>\n</tr>\n<tr>\n<td>for…of</td>\n<td>否</td>\n<td>for…of遍历具有Iterator迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的obj对象，将异步循环变成同步循环</td>\n</tr>\n<tr>\n<td>every() 和 some()</td>\n<td>否</td>\n<td>数组方法，some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false.</td>\n</tr>\n<tr>\n<td>find() 和 findIndex()</td>\n<td>否</td>\n<td>数组方法，find()返回的是第一个符合条件的值；findIndex()返回的是第一个返回条件的值的索引值</td>\n</tr>\n<tr>\n<td>reduce() 和 reduceRight()</td>\n<td>否</td>\n<td>数组方法，reduce()对数组正序操作；reduceRight()对数组逆序操作</td>\n</tr>\n</tbody></table>\n<p>遍历方法的详细解释：<a href=\"https://link.juejin.cn/?target=https://cuggz.blog.csdn.net/article/details/107649549\">《细数JavaScript中那些遍历和循环》</a></p>\n<h3 id=\"29-forEach和map方法有什么区别\"><a href=\"#29-forEach和map方法有什么区别\" class=\"headerlink\" title=\"29. forEach和map方法有什么区别\"></a>29. forEach和map方法有什么区别</h3><p>这方法都是用来遍历数组的，两者区别如下：</p>\n<ul>\n<li>forEach()方法会针对每一个元素执行提供的函数，对数据的操作会改变原数组，该方法没有返回值；</li>\n<li>map()方法不会改变原数组的值，返回一个新数组，新数组中的值为原数组调用函数处理之后的值；</li>\n</ul>\n<h2 id=\"四、原型与原型链\"><a href=\"#四、原型与原型链\" class=\"headerlink\" title=\"四、原型与原型链\"></a>四、原型与原型链</h2><h3 id=\"1-对原型、原型链的理解\"><a href=\"#1-对原型、原型链的理解\" class=\"headerlink\" title=\"1. 对原型、原型链的理解\"></a>1. 对原型、原型链的理解</h3><p>在JavaScript中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在浏览器中都实现了 <strong>proto</strong> 属性来访问这个属性，但是最好不要使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法来获取对象的原型。</p>\n<p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。</p>\n<p><strong>特点：</strong> JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112915792.png\" alt=\"image-20230610112915792\"></p>\n<h3 id=\"2-原型修改、重写\"><a href=\"#2-原型修改、重写\" class=\"headerlink\" title=\"2. 原型修改、重写\"></a>2. 原型修改、重写</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 修改原型</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span> === p.<span class=\"property\">constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 重写原型</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">getName</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)        <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span> === p.<span class=\"property\">constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到修改原型的时候p的构造函数不是指向Person了，因为直接给Person的原型对象直接用对象赋值时，它的构造函数指向的了根构造函数Object，所以这时候<code>p.constructor === Object</code> ，而不是<code>p.constructor === Person</code>。要想成立，就要用constructor指回来：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">getName</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">p.<span class=\"property\">constructor</span> = <span class=\"title class_\">Person</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)        <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span> === p.<span class=\"property\">constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-原型链指向\"><a href=\"#3-原型链指向\" class=\"headerlink\" title=\"3. 原型链指向\"></a>3. 原型链指向</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.<span class=\"property\">__proto__</span>  <span class=\"comment\">// Person.prototype</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span>  <span class=\"comment\">// Object.prototype</span></span><br><span class=\"line\">p.<span class=\"property\">__proto__</span>.<span class=\"property\">__proto__</span> <span class=\"comment\">//Object.prototype</span></span><br><span class=\"line\">p.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> <span class=\"comment\">// Object.prototype</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> <span class=\"comment\">// Object.prototype</span></span><br><span class=\"line\">p1.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span> <span class=\"comment\">// Person</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span>  <span class=\"comment\">// Person</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-原型链的终点是什么？如何打印出原型链的终点？\"><a href=\"#4-原型链的终点是什么？如何打印出原型链的终点？\" class=\"headerlink\" title=\"4. 原型链的终点是什么？如何打印出原型链的终点？\"></a>4. 原型链的终点是什么？如何打印出原型链的终点？</h3><p>由于<code>Object</code>是构造函数，原型链终点是<code>Object.prototype.__proto__</code>，而<code>Object.prototype.__proto__=== null // true</code>，所以，原型链的终点是<code>null</code>。原型链上的所有原型都是对象，所有的对象最终都是由<code>Object</code>构造的，而<code>Object.prototype</code>的下一级是<code>Object.prototype.__proto__</code>。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112941072.png\" alt=\"image-20230610112941072\"></p>\n<h3 id=\"5-如何获得对象非原型链上的属性？\"><a href=\"#5-如何获得对象非原型链上的属性？\" class=\"headerlink\" title=\"5. 如何获得对象非原型链上的属性？\"></a>5. 如何获得对象非原型链上的属性？</h3><p>使用后<code>hasOwnProperty()</code>方法来判断属性是否属于原型链的属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">iterate</span>(<span class=\"params\">obj</span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> res=[];</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obj.<span class=\"title function_\">hasOwnProperty</span>(key))</span><br><span class=\"line\">           res.<span class=\"title function_\">push</span>(key+<span class=\"string\">&#x27;: &#x27;</span>+obj[key]);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、执行上下文-作用域链-闭包\"><a href=\"#五、执行上下文-作用域链-闭包\" class=\"headerlink\" title=\"五、执行上下文/作用域链/闭包\"></a>五、执行上下文/作用域链/闭包</h2><h3 id=\"1-对闭包的理解\"><a href=\"#1-对闭包的理解\" class=\"headerlink\" title=\"1. 对闭包的理解\"></a>1. 对闭包的理解</h3><p><strong>闭包是指有权访问另一个函数作用域中变量的函数</strong>，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。</p>\n<p>闭包有两个常用的用途；</p>\n<ul>\n<li>闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。</li>\n<li>闭包的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。</li>\n</ul>\n<p>比如，函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"property\">B</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">A</span>()</span><br><span class=\"line\"><span class=\"title function_\">B</span>() <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。经典面试题：循环中使用闭包解决 var 定义函数的问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">  &#125;, i * <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先因为 <code>setTimeout</code> 是个异步函数，所以会先把循环全部执行完毕，这时候 <code>i</code> 就是 6 了，所以会输出一堆 6。解决办法有三种：</p>\n<ul>\n<li>第一种是使用闭包的方式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;  ;(<span class=\"keyword\">function</span>(<span class=\"params\">j</span>) &#123;    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>) &#123;      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j)    &#125;, j * <span class=\"number\">1000</span>)  &#125;)(i)&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上述代码中，首先使用了立即执行函数将 <code>i</code> 传入函数内部，这个时候值就被固定在了参数 <code>j</code> 上面不会改变，当下次执行 <code>timer</code> 这个闭包的时候，就可以使用外部函数的变量 <code>j</code>，从而达到目的。</p>\n<ul>\n<li>第二种就是使用 <code>setTimeout</code> 的第三个参数，这个参数会被当成 <code>timer</code> 函数的参数传入。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\">j</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    i * <span class=\"number\">1000</span>,</span><br><span class=\"line\">    i</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第三种就是使用 <code>let</code> 定义 <code>i</code> 了来解决问题了，这个也是最为推荐的方式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">  &#125;, i * <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-对作用域、作用域链的理解\"><a href=\"#2-对作用域、作用域链的理解\" class=\"headerlink\" title=\"2. 对作用域、作用域链的理解\"></a>2. 对作用域、作用域链的理解</h3><h5 id=\"1）全局作用域和函数作用域\"><a href=\"#1）全局作用域和函数作用域\" class=\"headerlink\" title=\"1）全局作用域和函数作用域\"></a>1）全局作用域和函数作用域</h5><p>（1）全局作用域</p>\n<ul>\n<li>最外层函数和最外层函数外面定义的变量拥有全局作用域</li>\n<li>所有未定义直接赋值的变量自动声明为全局作用域</li>\n<li>所有window对象的属性拥有全局作用域</li>\n<li>全局作用域有很大的弊端，过多的全局作用域变量会污染全局命名空间，容易引起命名冲突。</li>\n</ul>\n<p>（2）函数作用域</p>\n<ul>\n<li>函数作用域声明在函数内部的变零，一般只有固定的代码片段可以访问到</li>\n<li>作用域是分层的，内层作用域可以访问外层作用域，反之不行</li>\n</ul>\n<h5 id=\"2）块级作用域\"><a href=\"#2）块级作用域\" class=\"headerlink\" title=\"2）块级作用域\"></a>2）块级作用域</h5><ul>\n<li>使用ES6中新增的let和const指令可以声明块级作用域，块级作用域可以在函数中创建也可以在一个代码块中的创建（由<code>&#123; &#125;</code>包裹的代码片段）</li>\n<li>let和const声明的变量不会有变量提升，也不可以重复声明</li>\n<li>在循环中比较适合绑定块级作用域，这样就可以把声明的计数器变量限制在循环内部。</li>\n</ul>\n<p><strong>作用域链：</strong> 在当前作用域中查找所需变量，但是该作用域没有这个变量，那这个变量就是自由变量。如果在自己作用域找不到该变量就去父级作用域查找，依次向上级作用域查找，直到访问到window对象就被终止，这一层层的关系就是作用域链。</p>\n<p>作用域链的作用是<strong>保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。</strong></p>\n<p>作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。</p>\n<p>当查找一个变量时，如果当前执行环境中没有找到，可以沿着作用域链向后查找。</p>\n<h3 id=\"3-对执行上下文的理解\"><a href=\"#3-对执行上下文的理解\" class=\"headerlink\" title=\"3. 对执行上下文的理解\"></a>3. 对执行上下文的理解</h3><h5 id=\"1-执行上下文类型\"><a href=\"#1-执行上下文类型\" class=\"headerlink\" title=\"1. 执行上下文类型\"></a>1. 执行上下文类型</h5><p><strong>（1）全局执行上下文</strong></p>\n<p>任何不在函数内部的都是全局执行上下文，它首先会创建一个全局的window对象，并且设置this的值等于这个全局对象，一个程序中只有一个全局执行上下文。</p>\n<p><strong>（2）函数执行上下文</strong></p>\n<p>当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。</p>\n<p><strong>（3）</strong><code>eval</code><strong>函数执行上下文</strong></p>\n<p>执行在eval函数中的代码会有属于他自己的执行上下文，不过eval函数不常使用，不做介绍。</p>\n<h5 id=\"2-执行上下文栈\"><a href=\"#2-执行上下文栈\" class=\"headerlink\" title=\"2. 执行上下文栈\"></a>2. 执行上下文栈</h5><ul>\n<li>JavaScript引擎使用执行上下文栈来管理执行上下文</li>\n<li>当JavaScript执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;Hello World!&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">first</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Inside first function&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">second</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Again inside first function&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">second</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Inside second function&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">first</span>();</span><br><span class=\"line\"><span class=\"comment\">//执行顺序</span></span><br><span class=\"line\"><span class=\"comment\">//先执行second(),在执行first()</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-创建执行上下文\"><a href=\"#3-创建执行上下文\" class=\"headerlink\" title=\"3. 创建执行上下文\"></a>3. 创建执行上下文</h5><p>创建执行上下文有两个阶段：<strong>创建阶段</strong>和<strong>执行阶段</strong></p>\n<p><strong>1）创建阶段</strong></p>\n<p>（1）this绑定</p>\n<ul>\n<li>在全局执行上下文中，this指向全局对象（window对象）</li>\n<li>在函数执行上下文中，this指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined</li>\n</ul>\n<p>（2）创建词法环境组件</p>\n<ul>\n<li>词法环境是一种有<strong>标识符——变量映射</strong>的数据结构，标识符是指变量/函数名，变量是对实际对象或原始数据的引用。</li>\n<li>词法环境的内部有两个组件：<strong>加粗样式</strong>：环境记录器:用来储存变量个函数声明的实际位置<strong>外部环境的引用</strong>：可以访问父级作用域</li>\n</ul>\n<p>（3）创建变量环境组件</p>\n<ul>\n<li>变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。</li>\n</ul>\n<p><strong>2）执行阶段</strong> 此阶段会完成对变量的分配，最后执行完代码。</p>\n<p><strong>简单来说执行上下文就是指：</strong></p>\n<p>在执行一点JS代码之前，需要先解析代码。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。这一步执行完了，才开始正式的执行程序。</p>\n<p>在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。</p>\n<ul>\n<li>全局上下文：变量定义，函数声明</li>\n<li>函数上下文：变量定义，函数声明，<code>this</code>，<code>arguments</code></li>\n</ul>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"excerpt":"<p>JS复习记录</p>","more":"<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112558784.png\" alt=\"image-20230610112558784\"></p>\n<h2 id=\"一、数据类型\"><a href=\"#一、数据类型\" class=\"headerlink\" title=\"一、数据类型\"></a>一、数据类型</h2><h3 id=\"1-JavaScript有哪些数据类型，它们的区别？\"><a href=\"#1-JavaScript有哪些数据类型，它们的区别？\" class=\"headerlink\" title=\"1. JavaScript有哪些数据类型，它们的区别？\"></a>1. JavaScript有哪些数据类型，它们的区别？</h3><p>JavaScript共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。</p>\n<p>其中 Symbol 和 BigInt 是ES6 中新增的数据类型：</p>\n<ul>\n<li>Symbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。</li>\n<li>BigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。</li>\n</ul>\n<p>这些数据可以分为原始数据类型和引用数据类型：</p>\n<ul>\n<li>栈：原始数据类型（Undefined、Null、Boolean、Number、String）</li>\n<li>堆：引用数据类型（对象、数组和函数）</li>\n</ul>\n<p>两种类型的区别在于<strong>存储位置的不同：</strong></p>\n<ul>\n<li>原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</li>\n<li>引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</li>\n</ul>\n<p>堆和栈的概念存在于数据结构和操作系统内存中，在数据结构中：</p>\n<ul>\n<li>在数据结构中，栈中数据的存取方式为先进后出。</li>\n<li>堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。</li>\n</ul>\n<p>在操作系统中，内存被分为栈区和堆区：</p>\n<ul>\n<li>栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li>\n<li>堆区内存一般由开发着分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。</li>\n</ul>\n<h3 id=\"2-数据类型检测的方式有哪些\"><a href=\"#2-数据类型检测的方式有哪些\" class=\"headerlink\" title=\"2. 数据类型检测的方式有哪些\"></a>2. 数据类型检测的方式有哪些</h3><p><strong>（1）typeof</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"number\">2</span>);               <span class=\"comment\">// number</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>);            <span class=\"comment\">// boolean</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;str&#x27;</span>);           <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> []);              <span class=\"comment\">// object    </span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;);    <span class=\"comment\">// function</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> &#123;&#125;);              <span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>);       <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>);            <span class=\"comment\">// object</span></span><br></pre></td></tr></table></figure>\n\n<p>其中数组、对象、null都会被判断为object，其他判断都正确。</p>\n<p><strong>（2）instanceof</strong></p>\n<p><code>instanceof</code>可以正确判断对象的类型，<strong>其内部运行机制是判断在其原型链中能否找到该类型的原型</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Number</span>);                    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">true</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Boolean</span>);                <span class=\"comment\">// false </span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;str&#x27;</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span>);                <span class=\"comment\">// false </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>);                    <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Function</span>);       <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>);                   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，<code>instanceof</code><strong>只能正确判断引用数据类型</strong>，而不能判断基本数据类型。<code>instanceof</code> 运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 <code>prototype</code> 属性。</p>\n<p><strong>（3） constructor</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>((<span class=\"number\">2</span>).<span class=\"property\">constructor</span> === <span class=\"title class_\">Number</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>((<span class=\"literal\">true</span>).<span class=\"property\">constructor</span> === <span class=\"title class_\">Boolean</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>((<span class=\"string\">&#x27;str&#x27;</span>).<span class=\"property\">constructor</span> === <span class=\"title class_\">String</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(([]).<span class=\"property\">constructor</span> === <span class=\"title class_\">Array</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>((<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;).<span class=\"property\">constructor</span> === <span class=\"title class_\">Function</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>((&#123;&#125;).<span class=\"property\">constructor</span> === <span class=\"title class_\">Object</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><code>constructor</code>有两个作用，一是判断数据的类型，二是对象实例通过 <code>constrcutor</code> 对象访问它的构造函数。需要注意，如果创建一个对象来改变它的原型，<code>constructor</code>就不能用来判断数据类型了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Fn</span>(<span class=\"params\"></span>)&#123;&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"title class_\">Fn</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> <span class=\"title class_\">Fn</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f.<span class=\"property\">constructor</span>===<span class=\"title class_\">Fn</span>);    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f.<span class=\"property\">constructor</span>===<span class=\"title class_\">Array</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>（4）Object.prototype.toString.call()</strong></p>\n<p><code>Object.prototype.toString.call()</code> 使用 Object 对象的原型方法 toString 来判断数据类型：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">call</span>(<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">call</span>(<span class=\"literal\">true</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;str&#x27;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">call</span>([]));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">call</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">call</span>(&#123;&#125;));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>));</span><br></pre></td></tr></table></figure>\n\n<p>同样是检测对象obj调用toString方法，obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样，这是为什么？</p>\n<p>这是因为toString是Object的原型方法，而Array、function等<strong>类型作为Object的实例，都重写了toString方法</strong>。不同的对象类型调用toString方法时，根据原型链的知识，调用的是对应的重写之后的toString方法（function类型返回内容为函数体的字符串，Array类型返回元素组成的字符串…），而不会去调用Object上原型toString方法（返回对象的具体类型），所以采用obj.toString()不能得到其对象类型，只能将obj转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用Object原型上的toString方法。</p>\n<h3 id=\"3-判断数组的方式有哪些\"><a href=\"#3-判断数组的方式有哪些\" class=\"headerlink\" title=\"3. 判断数组的方式有哪些\"></a>3. 判断数组的方式有哪些</h3><ul>\n<li>通过Object.prototype.toString.call()做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(obj).<span class=\"title function_\">slice</span>(<span class=\"number\">8</span>,-<span class=\"number\">1</span>) === <span class=\"string\">&#x27;Array&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过原型链做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过ES6的Array.isArray()做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArrray</span>(obj);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过instanceof做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过Array.prototype.isPrototypeOf</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">isPrototypeOf</span>(obj)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-null和undefined区别\"><a href=\"#4-null和undefined区别\" class=\"headerlink\" title=\"4. null和undefined区别\"></a>4. null和undefined区别</h3><p>首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。</p>\n<p>undefined 代表的含义是<strong>未定义</strong>，null 代表的含义是<strong>空对象</strong>。一般变量声明了但还没有定义的时候会返回 undefined，null主要用于赋值给一些可能会返回对象的变量，作为初始化。</p>\n<p>undefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。</p>\n<p>当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 “object”，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。</p>\n<h3 id=\"5-typeof-null-的结果是什么，为什么？\"><a href=\"#5-typeof-null-的结果是什么，为什么？\" class=\"headerlink\" title=\"5. typeof null 的结果是什么，为什么？\"></a>5. typeof null 的结果是什么，为什么？</h3><p>typeof null 的结果是Object。</p>\n<p>在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的 <strong>类型标签(1-3 bits)</strong> 以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">000</span>: object   - 当前存储的数据指向一个对象。</span><br><span class=\"line\">  <span class=\"number\">1</span>: int      - 当前存储的数据是一个 <span class=\"number\">31</span> 位的有符号整数。</span><br><span class=\"line\"><span class=\"number\">010</span>: double   - 当前存储的数据指向一个双精度的浮点数。</span><br><span class=\"line\"><span class=\"number\">100</span>: string   - 当前存储的数据指向一个字符串。</span><br><span class=\"line\"><span class=\"number\">110</span>: boolean  - 当前存储的数据是布尔值。</span><br></pre></td></tr></table></figure>\n\n<p>如果最低位是 1，则类型标签标志位的长度只有一位；如果最低位是 0，则类型标签标志位的长度占三位，为存储其他四种数据类型提供了额外两个 bit 的长度。</p>\n<p>有两种特殊数据类型：</p>\n<ul>\n<li>undefined的值是 (-2)30(一个超出整数范围的数字)；</li>\n<li>null 的值是机器码 NULL 指针(null 指针的值全是 0)</li>\n</ul>\n<p>那也就是说null的类型标签也是000，和Object的类型标签一样，所以会被判定为Object。</p>\n<h3 id=\"6-intanceof-操作符的实现原理及实现\"><a href=\"#6-intanceof-操作符的实现原理及实现\" class=\"headerlink\" title=\"6. intanceof 操作符的实现原理及实现\"></a>6. intanceof 操作符的实现原理及实现</h3><p>instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myInstanceof</span>(<span class=\"params\">left, right</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取对象的原型</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> proto = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(left)</span><br><span class=\"line\">  <span class=\"comment\">// 获取构造函数的 prototype 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> prototype = right.<span class=\"property\"><span class=\"keyword\">prototype</span></span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 判断构造函数的 prototype 对象是否在对象的原型链上</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!proto) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (proto === prototype) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有找到，就继续从其原型上找，Object.getPrototypeOf方法用来获取指定对象的原型</span></span><br><span class=\"line\">    proto = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(proto);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-为什么0-1-0-2-0-3，如何让其相等\"><a href=\"#7-为什么0-1-0-2-0-3，如何让其相等\" class=\"headerlink\" title=\"7. 为什么0.1+0.2 ! == 0.3，如何让其相等\"></a>7. 为什么0.1+0.2 ! == 0.3，如何让其相等</h3><p>在开发过程中遇到类似这样的问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> n1 = <span class=\"number\">0.1</span>, n2 = <span class=\"number\">0.2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n1 + n2)  <span class=\"comment\">// 0.30000000000000004</span></span><br></pre></td></tr></table></figure>\n\n<p>这里得到的不是想要的结果，要想等于0.3，就要把它进行转化：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(n1 + n2).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) <span class=\"comment\">// 注意，toFixed为四舍五入</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toFixed(num)</code> 方法可把 Number 四舍五入为指定小数位数的数字。那为什么会出现这样的结果呢？</p>\n<p>计算机是通过二进制的方式存储数据的，所以计算机计算0.1+0.2的时候，实际上是计算的两个数的二进制的和。0.1的二进制是<code>0.0001100110011001100...</code>（1100循环），0.2的二进制是：<code>0.00110011001100...</code>（1100循环），这两个数的二进制都是无限循环的数。那JavaScript是如何处理无限循环的二进制小数呢？</p>\n<p>一般我们认为数字包括整数和小数，但是在 JavaScript 中只有一种数字类型：Number，它的实现遵循IEEE 754标准，使用64位固定长度来表示，也就是标准的double双精度浮点数。在二进制科学表示法中，双精度浮点数的小数部分最多只能保留52位，再加上前面的1，其实就是保留53位有效数字，剩余的需要舍去，遵从“0舍1入”的原则。</p>\n<p>根据这个原则，0.1和0.2的二进制数相加，再转化为十进制数就是：<code>0.30000000000000004</code>。</p>\n<p>下面看一下<strong>双精度数是如何保存</strong>的： <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0cb225cf71d748a8b2d6a5615e402711~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"></p>\n<ul>\n<li>第一部分（蓝色）：用来存储符号位（sign），用来区分正负数，0表示正数，占用1位</li>\n<li>第二部分（绿色）：用来存储指数（exponent），占用11位</li>\n<li>第三部分（红色）：用来存储小数（fraction），占用52位</li>\n</ul>\n<p>对于0.1，它的二进制为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.00011001100110011001100110011001100110011001100110011001</span> <span class=\"number\">10011.</span>..</span><br></pre></td></tr></table></figure>\n\n<p>转为科学计数法（科学计数法的结果就是浮点数）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.1001100110011001100110011001100110011001100110011001</span>*<span class=\"number\">2</span>^-<span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看出0.1的符号位为0，指数位为-4，小数位为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1001100110011001100110011001100110011001100110011001</span></span><br></pre></td></tr></table></figure>\n\n<p>那么问题又来了，<strong>指数位是负数，该如何保存</strong>呢？</p>\n<p>IEEE标准规定了一个偏移量，对于指数部分，每次都加这个偏移量进行保存，这样即使指数是负数，那么加上这个偏移量也就是正数了。由于JavaScript的数字是双精度数，这里就以双精度数为例，它的指数部分为11位，能表示的范围就是0~2047，IEEE固定<strong>双精度数的偏移量为1023</strong>。</p>\n<ul>\n<li>当指数位不全是0也不全是1时(规格化的数值)，IEEE规定，阶码计算公式为 e-Bias。 此时e最小值是1，则1-1023= -1022，e最大值是2046，则2046-1023=1023，可以看到，这种情况下取值范围是<code>-1022~1013</code>。</li>\n<li>当指数位全部是0的时候(非规格化的数值)，IEEE规定，阶码的计算公式为1-Bias，即1-1023= -1022。</li>\n<li>当指数位全部是1的时候(特殊值)，IEEE规定这个浮点数可用来表示3个特殊值，分别是正无穷，负无穷，NaN。 具体的，小数位不为0的时候表示NaN；小数位为0时，当符号位s=0时表示正无穷，s=1时候表示负无穷。</li>\n</ul>\n<p>对于上面的0.1的指数位为-4，-4+1023 = 1019 转化为二进制就是：<code>1111111011</code>.</p>\n<p>所以，0.1表示为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1111111011</span> <span class=\"number\">1001100110011001100110011001100110011001100110011001</span></span><br></pre></td></tr></table></figure>\n\n<p>说了这么多，是时候该最开始的问题了，如何实现0.1+0.2=0.3呢？</p>\n<p>对于这个问题，一个直接的解决方法就是设置一个误差范围，通常称为“机器精度”。对JavaScript来说，这个值通常为2-52，在ES6中，提供了<code>Number.EPSILON</code>属性，而它的值就是2-52，只要判断<code>0.1+0.2-0.3</code>是否小于<code>Number.EPSILON</code>，如果小于，就可以判断为0.1+0.2 ===0.3</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">numberepsilon</span>(<span class=\"params\">arg1,arg2</span>)&#123;                   </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(arg1 - arg2) &lt; <span class=\"title class_\">Number</span>.<span class=\"property\">EPSILON</span>;        </span><br><span class=\"line\">&#125;        </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">numberepsilon</span>(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>, <span class=\"number\">0.3</span>)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-如何获取安全的-undefined-值？\"><a href=\"#8-如何获取安全的-undefined-值？\" class=\"headerlink\" title=\"8. 如何获取安全的 undefined 值？\"></a>8. 如何获取安全的 undefined 值？</h3><p>因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。表达式 void ___ 没有返回值，因此返回结果是 undefined。void 并不改变表达式的结果，只是让表达式不返回值。因此可以用 void 0 来获得 undefined。</p>\n<h3 id=\"9-typeof-NaN-的结果是什么？\"><a href=\"#9-typeof-NaN-的结果是什么？\" class=\"headerlink\" title=\"9. typeof NaN 的结果是什么？\"></a>9. typeof NaN 的结果是什么？</h3><p>NaN 指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel value，有特殊用途的常规值），用于指出数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"title class_\">NaN</span>; <span class=\"comment\">// &quot;number&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>NaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN !== NaN 为 true。</p>\n<h3 id=\"10-isNaN-和-Number-isNaN-函数的区别？\"><a href=\"#10-isNaN-和-Number-isNaN-函数的区别？\" class=\"headerlink\" title=\"10. isNaN 和 Number.isNaN 函数的区别？\"></a>10. isNaN 和 Number.isNaN 函数的区别？</h3><ul>\n<li>函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会返回 true ，会影响 NaN 的判断。</li>\n<li>函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN 的判断更为准确。</li>\n</ul>\n<h3 id=\"12-其他值到字符串的转换规则？\"><a href=\"#12-其他值到字符串的转换规则？\" class=\"headerlink\" title=\"12. 其他值到字符串的转换规则？\"></a>12. 其他值到字符串的转换规则？</h3><ul>\n<li>Null 和 Undefined 类型 ，null 转换为 “null”，undefined 转换为 “undefined”，</li>\n<li>Boolean 类型，true 转换为 “true”，false 转换为 “false”。</li>\n<li>Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。</li>\n<li>Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。</li>\n<li>对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()）来返回内部属性 [[Class]] 的值，如”[object Object]”。如果对象有自己的 toString() 方法，字符串化时就会调用该方法并使用其返回值。</li>\n</ul>\n<h3 id=\"13-其他值到数字值的转换规则？\"><a href=\"#13-其他值到数字值的转换规则？\" class=\"headerlink\" title=\"13. 其他值到数字值的转换规则？\"></a>13. 其他值到数字值的转换规则？</h3><ul>\n<li>Undefined 类型的值转换为 NaN。</li>\n<li>Null 类型的值转换为 0。</li>\n<li>Boolean 类型的值，true 转换为 1，false 转换为 0。</li>\n<li>String 类型的值转换如同使用 Number() 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。</li>\n<li>Symbol 类型的值不能转换为数字，会报错。</li>\n<li>对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。</li>\n</ul>\n<p>为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。</p>\n<p>如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。</p>\n<h3 id=\"14-其他值到布尔类型的值的转换规则？\"><a href=\"#14-其他值到布尔类型的值的转换规则？\" class=\"headerlink\" title=\"14. 其他值到布尔类型的值的转换规则？\"></a>14. 其他值到布尔类型的值的转换规则？</h3><p>以下这些是假值： • undefined • null • false • +0、-0 和 NaN • “”</p>\n<p>假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。</p>\n<h3 id=\"15-和-amp-amp-操作符的返回值？\"><a href=\"#15-和-amp-amp-操作符的返回值？\" class=\"headerlink\" title=\"15. || 和 &amp;&amp; 操作符的返回值？\"></a>15. || 和 &amp;&amp; 操作符的返回值？</h3><p>|| 和 &amp;&amp; 首先会对第一个操作数执行条件判断，如果其不是布尔值就先强制转换为布尔类型，然后再执行条件判断。</p>\n<ul>\n<li>对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。</li>\n<li>&amp;&amp; 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。</li>\n</ul>\n<p>|| 和 &amp;&amp; 返回它们其中一个操作数的值，而非条件判断的结果</p>\n<h3 id=\"16-Object-is-与比较操作符-“-”、“-”-的区别？\"><a href=\"#16-Object-is-与比较操作符-“-”、“-”-的区别？\" class=\"headerlink\" title=\"16. Object.is() 与比较操作符 “===”、“==” 的区别？\"></a>16. Object.is() 与比较操作符 “===”、“==” 的区别？</h3><ul>\n<li>使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。</li>\n<li>使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。</li>\n<li>使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的。</li>\n</ul>\n<h3 id=\"17-什么是-JavaScript-中的包装类型？\"><a href=\"#17-什么是-JavaScript-中的包装类型？\" class=\"headerlink\" title=\"17. 什么是 JavaScript 中的包装类型？\"></a>17. 什么是 JavaScript 中的包装类型？</h3><p>在 JavaScript 中，基本类型是没有属性和方法的，但是为了便于操作基本类型的值，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">a.<span class=\"property\">length</span>; <span class=\"comment\">// 3</span></span><br><span class=\"line\">a.<span class=\"title function_\">toUpperCase</span>(); <span class=\"comment\">// &quot;ABC&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>在访问<code>&#39;abc&#39;.length</code>时，JavaScript 将<code>&#39;abc&#39;</code>在后台转换成<code>String(&#39;abc&#39;)</code>，然后再访问其<code>length</code>属性。</p>\n<p>JavaScript也可以使用<code>Object</code>函数显式地将基本类型转换为包装类型：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>(a) <span class=\"comment\">// String &#123;&quot;abc&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以使用<code>valueOf</code>方法将包装类型倒转成基本类型：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"title class_\">Object</span>(a)</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = b.<span class=\"title function_\">valueOf</span>() <span class=\"comment\">// &#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>看看如下代码会打印出什么：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>( <span class=\"literal\">false</span> );</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!a) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"string\">&quot;Oops&quot;</span> ); <span class=\"comment\">// never runs</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>答案是什么都不会打印，因为虽然包裹的基本类型是<code>false</code>，但是<code>false</code>被包裹成包装类型后就成了对象，所以其非值为<code>false</code>，所以循环体中的内容不会运行。</p>\n<h3 id=\"18-JavaScript-中如何进行隐式类型转换？\"><a href=\"#18-JavaScript-中如何进行隐式类型转换？\" class=\"headerlink\" title=\"18. JavaScript 中如何进行隐式类型转换？\"></a>18. JavaScript 中如何进行隐式类型转换？</h3><p>首先要介绍<code>ToPrimitive</code>方法，这是 JavaScript 中每个值隐含的自带的方法，用来将值 （无论是基本类型值还是对象）转换为基本类型值。如果值为基本类型，则直接返回值本身；如果值为对象，其看起来大概是这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@obj</span> 需要转换的对象</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@type</span> 期望的结果类型</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"title class_\">ToPrimitive</span>(obj,type)</span><br></pre></td></tr></table></figure>\n\n<p><code>type</code>的值为<code>number</code>或者<code>string</code>。</p>\n<p><strong>（1）当</strong><code>type</code><strong>为</strong><code>number</code><strong>时规则如下：</strong></p>\n<ul>\n<li>调用<code>obj</code>的<code>valueOf</code>方法，如果为原始值，则返回，否则下一步；</li>\n<li>调用<code>obj</code>的<code>toString</code>方法，后续同上；</li>\n<li>抛出<code>TypeError</code> 异常。</li>\n</ul>\n<p><strong>（2）当</strong><code>type</code><strong>为</strong><code>string</code><strong>时规则如下：</strong></p>\n<ul>\n<li>调用<code>obj</code>的<code>toString</code>方法，如果为原始值，则返回，否则下一步；</li>\n<li>调用<code>obj</code>的<code>valueOf</code>方法，后续同上；</li>\n<li>抛出<code>TypeError</code> 异常。</li>\n</ul>\n<p>可以看出两者的主要区别在于调用<code>toString</code>和<code>valueOf</code>的先后顺序。默认情况下：</p>\n<ul>\n<li>如果对象为 Date 对象，则<code>type</code>默认为<code>string</code>；</li>\n<li>其他情况下，<code>type</code>默认为<code>number</code>。</li>\n</ul>\n<p>总结上面的规则，对于 Date 以外的对象，转换为基本类型的大概规则可以概括为一个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">objToNumber</span> = value =&gt; <span class=\"title class_\">Number</span>(value.<span class=\"title function_\">valueOf</span>().<span class=\"title function_\">toString</span>())</span><br><span class=\"line\"><span class=\"title function_\">objToNumber</span>([]) === <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"title function_\">objToNumber</span>(&#123;&#125;) === <span class=\"title class_\">NaN</span></span><br></pre></td></tr></table></figure>\n\n<p>而 JavaScript 中的隐式类型转换主要发生在<code>+、-、*、/</code>以及<code>==、&gt;、&lt;</code>这些运算符之间。而这些运算符只能操作基本类型值，所以在进行这些运算前的第一步就是将两边的值用<code>ToPrimitive</code>转换成基本类型，再进行操作。</p>\n<p>以下是基本类型的值在不同操作符的情况下隐式转换的规则 （对于对象，其会被<code>ToPrimitive</code>转换成基本类型，所以最终还是要应用基本类型转换规则）：</p>\n<ol>\n<li><code>+</code><strong>操作符</strong> <code>+</code>操作符的两边有至少一个<code>string</code>类型变量时，两边的变量都会被隐式转换为字符串；其他情况下两边的变量都会被转换为数字。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> + <span class=\"string\">&#x27;23&#x27;</span> <span class=\"comment\">// &#x27;123&#x27;</span></span><br><span class=\"line\"> <span class=\"number\">1</span> + <span class=\"literal\">false</span> <span class=\"comment\">// 1 </span></span><br><span class=\"line\"> <span class=\"number\">1</span> + <span class=\"title class_\">Symbol</span>() <span class=\"comment\">// Uncaught TypeError: Cannot convert a Symbol value to a number</span></span><br><span class=\"line\"> <span class=\"string\">&#x27;1&#x27;</span> + <span class=\"literal\">false</span> <span class=\"comment\">// &#x27;1false&#x27;</span></span><br><span class=\"line\"> <span class=\"literal\">false</span> + <span class=\"literal\">true</span> <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>-</code>、<code>*</code>、<code>\\</code><strong>操作符</strong></li>\n</ol>\n<p><code>NaN</code>也是一个数字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> * <span class=\"string\">&#x27;23&#x27;</span> <span class=\"comment\">// 23</span></span><br><span class=\"line\"> <span class=\"number\">1</span> * <span class=\"literal\">false</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\"> <span class=\"number\">1</span> / <span class=\"string\">&#x27;aa&#x27;</span> <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>对于</strong><code>==</code><strong>操作符</strong></li>\n</ol>\n<p>操作符两边的值都尽量转成<code>number</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span> == <span class=\"literal\">true</span> <span class=\"comment\">// false, 3 转为number为3，true转为number为1</span></span><br><span class=\"line\"><span class=\"string\">&#x27;0&#x27;</span> == <span class=\"literal\">false</span> <span class=\"comment\">//true, &#x27;0&#x27;转为number为0，false转为number为0</span></span><br><span class=\"line\"><span class=\"string\">&#x27;0&#x27;</span> == <span class=\"number\">0</span> <span class=\"comment\">// &#x27;0&#x27;转为number为0</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>对于</strong><code>&lt;</code><strong>和</strong><code>&gt;</code><strong>比较符</strong></li>\n</ol>\n<p>如果两边都是字符串，则比较字母表顺序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;ca&#x27;</span> &lt; <span class=\"string\">&#x27;bd&#x27;</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"string\">&#x27;a&#x27;</span> &lt; <span class=\"string\">&#x27;b&#x27;</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>其他情况下，转换为数字再比较：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;12&#x27;</span> &lt; <span class=\"number\">13</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">false</span> &gt; -<span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>以上说的是基本类型的隐式转换，而对象会被<code>ToPrimitive</code>转换为基本类型再进行转换：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;</span><br><span class=\"line\">a &gt; <span class=\"number\">2</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>其对比过程如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.<span class=\"title function_\">valueOf</span>() <span class=\"comment\">// &#123;&#125;, 上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步</span></span><br><span class=\"line\">a.<span class=\"title function_\">toString</span>() <span class=\"comment\">// &quot;[object Object]&quot;，现在是一个字符串了</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>(a.<span class=\"title function_\">toString</span>()) <span class=\"comment\">// NaN，根据上面 &lt; 和 &gt; 操作符的规则，要转换成数字</span></span><br><span class=\"line\"><span class=\"title class_\">NaN</span> &gt; <span class=\"number\">2</span> <span class=\"comment\">//false，得出比较结果</span></span><br></pre></td></tr></table></figure>\n\n<p>又比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;Jack&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123;<span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;</span><br><span class=\"line\">a + b <span class=\"comment\">// &quot;[object Object][object Object]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>运算过程如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.<span class=\"title function_\">valueOf</span>() <span class=\"comment\">// &#123;&#125;，上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步</span></span><br><span class=\"line\">a.<span class=\"title function_\">toString</span>() <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\">b.<span class=\"title function_\">valueOf</span>() <span class=\"comment\">// 同理</span></span><br><span class=\"line\">b.<span class=\"title function_\">toString</span>() <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\">a + b <span class=\"comment\">// &quot;[object Object][object Object]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19-操作符什么时候用于字符串的拼接？\"><a href=\"#19-操作符什么时候用于字符串的拼接？\" class=\"headerlink\" title=\"19. + 操作符什么时候用于字符串的拼接？\"></a>19. <code>+</code> 操作符什么时候用于字符串的拼接？</h3><p>根据 ES5 规范，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。</p>\n<p>简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字加法。</p>\n<p>那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。</p>\n<h3 id=\"20-为什么会有BigInt的提案？\"><a href=\"#20-为什么会有BigInt的提案？\" class=\"headerlink\" title=\"20. 为什么会有BigInt的提案？\"></a>20. 为什么会有<strong>BigInt</strong>的提案？</h3><p>JavaScript中Number.MAX_SAFE_INTEGER表示最⼤安全数字，计算结果是9007199254740991，即在这个数范围内不会出现精度丢失（⼩数除外）。但是⼀旦超过这个范围，js就会出现计算不准确的情况，这在⼤数计算的时候不得不依靠⼀些第三⽅库进⾏解决，因此官⽅提出了BigInt来解决此问题。</p>\n<h3 id=\"21-object-assign和扩展运算法是深拷贝还是浅拷贝，两者区别\"><a href=\"#21-object-assign和扩展运算法是深拷贝还是浅拷贝，两者区别\" class=\"headerlink\" title=\"21. object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别\"></a>21. object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别</h3><p>扩展运算符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> outObj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">inObj</span>: &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> newObj = &#123;...outObj&#125;</span><br><span class=\"line\">newObj.<span class=\"property\">inObj</span>.<span class=\"property\">a</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(outObj) <span class=\"comment\">// &#123;inObj: &#123;a: 2, b: 2&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Object.assign():</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> outObj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">inObj</span>: &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> newObj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, outObj)</span><br><span class=\"line\">newObj.<span class=\"property\">inObj</span>.<span class=\"property\">a</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(outObj) <span class=\"comment\">// &#123;inObj: &#123;a: 2, b: 2&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，两者都是浅拷贝。</p>\n<ul>\n<li>Object.assign()方法接收的第一个参数作为目标对象，后面的所有参数作为源对象。然后把所有的源对象合并到目标对象中。它会修改了一个对象，因此会触发 ES6 setter。</li>\n<li>扩展操作符（…）使用它时，数组或对象中的每一个值都会被拷贝到一个新的数组或对象中。它不复制继承的属性或类的属性，但是它会复制ES6的 symbols 属性。</li>\n</ul>\n<h2 id=\"二、ES6\"><a href=\"#二、ES6\" class=\"headerlink\" title=\"二、ES6\"></a>二、ES6</h2><h3 id=\"1-let、const、var的区别\"><a href=\"#1-let、const、var的区别\" class=\"headerlink\" title=\"1. let、const、var的区别\"></a>1. let、const、var的区别</h3><p><strong>（1）块级作用域：</strong> 块作用域由 <code>&#123; &#125;</code>包括，let和const具有块级作用域，var不存在块级作用域。块级作用域解决了ES5中的两个问题：</p>\n<ul>\n<li>内层变量可能覆盖外层变量</li>\n<li>用来计数的循环变量泄露为全局变量</li>\n</ul>\n<p><strong>（2）变量提升：</strong> var存在变量提升，let和const不存在变量提升，即在变量只能在声明之后使用，否在会报错。</p>\n<p><strong>（3）给全局添加属性：</strong> 浏览器的全局对象是window，Node的全局对象是global。var声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。</p>\n<p><strong>（4）重复声明：</strong> var声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const和let不允许重复声明变量。</p>\n<p><strong>（5）暂时性死区：</strong> 在使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为<strong>暂时性死区</strong>。使用var声明的变量不存在暂时性死区。</p>\n<p><strong>（6）初始值设置：</strong> 在变量声明时，var 和 let 可以不用设置初始值。而const声明变量必须设置初始值。</p>\n<p><strong>（7）指针指向：</strong> let和const都是ES6新增的用于创建变量的语法。 let创建的变量是可以更改指针指向（可以重新赋值）。但const声明的变量是不允许改变指针的指向。</p>\n<table>\n<thead>\n<tr>\n<th><strong>区别</strong></th>\n<th><strong>var</strong></th>\n<th><strong>let</strong></th>\n<th><strong>const</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>是否有块级作用域</td>\n<td>×</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>是否存在变量提升</td>\n<td>✔️</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>是否添加全局属性</td>\n<td>✔️</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>能否重复声明变量</td>\n<td>✔️</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>是否存在暂时性死区</td>\n<td>×</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>是否必须设置初始值</td>\n<td>×</td>\n<td>×</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>能否改变指针指向</td>\n<td>✔️</td>\n<td>✔️</td>\n<td>×</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-const对象的属性可以修改吗\"><a href=\"#2-const对象的属性可以修改吗\" class=\"headerlink\" title=\"2. const对象的属性可以修改吗\"></a>2. const对象的属性可以修改吗</h3><p>const保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。对于基本类型的数据（数值、字符串、布尔值），其值就保存在变量指向的那个内存地址，因此等同于常量。</p>\n<p>但对于引用类型的数据（主要是对象和数组）来说，变量指向数据的内存地址，保存的只是一个指针，const只能保证这个指针是固定不变的，至于它指向的数据结构是不是可变的，就完全不能控制了。</p>\n<h3 id=\"3-如果new一个箭头函数的会怎么样\"><a href=\"#3-如果new一个箭头函数的会怎么样\" class=\"headerlink\" title=\"3. 如果new一个箭头函数的会怎么样\"></a>3. 如果new一个箭头函数的会怎么样</h3><p>箭头函数是ES6中的提出来的，它没有prototype，也没有自己的this指向，更不可以使用arguments参数，所以不能New一个箭头函数。</p>\n<p>new操作符的实现步骤如下：</p>\n<ol>\n<li>创建一个对象</li>\n<li>将构造函数的作用域赋给新对象（也就是将对象的__proto__属性指向构造函数的prototype属性）</li>\n<li>指向构造函数中的代码，构造函数中的this指向该对象（也就是为这个对象添加属性和方法）</li>\n<li>返回新的对象</li>\n</ol>\n<p>所以，上面的第二、三步，箭头函数都是没有办法执行的。</p>\n<h3 id=\"4-箭头函数与普通函数的区别\"><a href=\"#4-箭头函数与普通函数的区别\" class=\"headerlink\" title=\"4. 箭头函数与普通函数的区别\"></a>4. 箭头函数与普通函数的区别</h3><p><strong>（1）箭头函数比普通函数更加简洁</strong></p>\n<ul>\n<li>如果没有参数，就直接写一个空括号即可</li>\n<li>如果只有一个参数，可以省去参数的括号</li>\n<li>如果有多个参数，用逗号分割</li>\n<li>如果函数体的返回值只有一句，可以省略大括号</li>\n<li>如果函数体不需要返回值，且只有一句话，可以给这个语句前面加一个void关键字。最常见的就是调用一个函数：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">fn</span> = (<span class=\"params\"></span>) =&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">doesNotReturn</span>();</span><br></pre></td></tr></table></figure>\n\n<p><strong>（2）箭头函数没有自己的this</strong></p>\n<p>箭头函数不会创建自己的this， 所以它没有自己的this，它只会在自己作用域的上一层继承this。所以箭头函数中this的指向在它在定义时已经确定了，之后不会改变。</p>\n<p><strong>（3）箭头函数继承来的this指向永远不会改变</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"string\">&#x27;GLOBAL&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"string\">&#x27;OBJ&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">id</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">id</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.<span class=\"title function_\">a</span>();    <span class=\"comment\">// &#x27;OBJ&#x27;</span></span><br><span class=\"line\">obj.<span class=\"title function_\">b</span>();    <span class=\"comment\">// &#x27;GLOBAL&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> obj.<span class=\"title function_\">a</span>()  <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> obj.<span class=\"title function_\">b</span>()  <span class=\"comment\">// Uncaught TypeError: obj.b is not a constructor</span></span><br></pre></td></tr></table></figure>\n\n<p>对象obj的方法b是使用箭头函数定义的，这个函数中的this就永远指向它定义时所处的全局执行环境中的this，即便这个函数是作为对象obj的方法调用，this依旧指向Window对象。需要注意，定义对象的大括号<code>&#123;&#125;</code>是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中。</p>\n<p><strong>（4）call()、apply()、bind()等方法不能改变箭头函数中this的指向</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"string\">&#x27;Global&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">fun1</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">id</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">fun1</span>();                     <span class=\"comment\">// &#x27;Global&#x27;</span></span><br><span class=\"line\">fun1.<span class=\"title function_\">call</span>(&#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;Obj&#x27;</span>&#125;);     <span class=\"comment\">// &#x27;Global&#x27;</span></span><br><span class=\"line\">fun1.<span class=\"title function_\">apply</span>(&#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;Obj&#x27;</span>&#125;);    <span class=\"comment\">// &#x27;Global&#x27;</span></span><br><span class=\"line\">fun1.<span class=\"title function_\">bind</span>(&#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;Obj&#x27;</span>&#125;)();   <span class=\"comment\">// &#x27;Global&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>（5）箭头函数不能作为构造函数使用</strong></p>\n<p>构造函数在new的步骤在上面已经说过了，实际上第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，且this指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。</p>\n<p><strong>（6）箭头函数没有自己的arguments</strong></p>\n<p>箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是它外层函数的arguments值。</p>\n<p><strong>（7）箭头函数没有prototype</strong></p>\n<p><strong>（8）箭头函数不能用作Generator函数，不能使用yeild关键字</strong></p>\n<h3 id=\"5-箭头函数的this指向哪⾥？\"><a href=\"#5-箭头函数的this指向哪⾥？\" class=\"headerlink\" title=\"5. 箭头函数的this指向哪⾥？\"></a>5. 箭头函数的<strong>this</strong>指向哪⾥？</h3><p>箭头函数不同于传统JavaScript中的函数，箭头函数并没有属于⾃⼰的this，它所谓的this是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值，并且由于没有属于⾃⼰的this，所以是不会被new调⽤的，这个所谓的this也不会被改变。</p>\n<p>可以⽤Babel理解⼀下箭头函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; </span><br><span class=\"line\">  <span class=\"title function_\">getArrow</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123; </span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span> === obj); </span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>转化后：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5，由 Babel 转译</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; </span><br><span class=\"line\">   <span class=\"attr\">getArrow</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">getArrow</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">     <span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>; </span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(_this === obj); </span><br><span class=\"line\">     &#125;; </span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-扩展运算符的作用及使用场景\"><a href=\"#6-扩展运算符的作用及使用场景\" class=\"headerlink\" title=\"6. 扩展运算符的作用及使用场景\"></a>6. 扩展运算符的作用及使用场景</h3><p><strong>（1）对象扩展运算符</strong></p>\n<p>对象的扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bar = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> baz = &#123; ...bar &#125;; <span class=\"comment\">// &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上述方法实际上等价于:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bar = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> baz = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, bar); <span class=\"comment\">// &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Object.assign</code>方法用于对象的合并，将源对象<code>（source）</code>的所有可枚举属性，复制到目标对象<code>（target）</code>。<code>Object.assign</code>方法的第一个参数是目标对象，后面的参数都是源对象。(<strong>如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性</strong>)。</p>\n<p>同样，如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bar = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> baz = &#123;...bar, ...&#123;<span class=\"attr\">a</span>:<span class=\"number\">2</span>, <span class=\"attr\">b</span>: <span class=\"number\">4</span>&#125;&#125;;  <span class=\"comment\">// &#123;a: 2, b: 4&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>利用上述特性就可以很方便的修改对象的部分属性。在<code>redux</code>中的<code>reducer</code>函数规定必须是<strong>一个纯函数</strong>，<code>reducer</code>中的<code>state</code>对象要求不能直接修改，可以通过扩展运算符把修改路径的对象都复制一遍，然后产生一个新的对象返回。</p>\n<p>需要注意：<strong>扩展运算符对对象实例的拷贝属于浅拷贝</strong>。</p>\n<p><strong>（2）数组扩展运算符</strong></p>\n<p>数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(...[<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"comment\">// 1 [2, 3, 4] 5</span></span><br></pre></td></tr></table></figure>\n\n<p>下面是数组的扩展运算符的应用：</p>\n<ul>\n<li><strong>将数组转换为参数序列</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"title function_\">add</span>(...numbers) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>复制数组</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [...arr1];</span><br></pre></td></tr></table></figure>\n\n<p>要记住：<strong>扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中</strong>，这里参数对象是个数组，数组里面的所有对象都是基础数据类型，将所有基础数据类型重新拷贝到新的数组中。</p>\n<ul>\n<li><strong>合并数组</strong></li>\n</ul>\n<p>如果想在数组内合并数组，可以这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>];<span class=\"keyword\">const</span> arr2 = [<span class=\"string\">&#x27;one&#x27;</span>, ...arr1, <span class=\"string\">&#x27;four&#x27;</span>, <span class=\"string\">&#x27;five&#x27;</span>];<span class=\"comment\">// [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>扩展运算符与解构赋值结合起来，用于生成数组</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];first <span class=\"comment\">// 1rest  // [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意：<strong>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [...rest, last] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];         <span class=\"comment\">// 报错const [first, ...rest, last] = [1, 2, 3, 4, 5];  // 报错</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>将字符串转为真正的数组</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...<span class=\"string\">&#x27;hello&#x27;</span>]    <span class=\"comment\">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组</strong></li>\n</ul>\n<p>比较常见的应用是可以将某些数据结构转为数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// arguments对象</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = [...<span class=\"variable language_\">arguments</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用于替换<code>es5</code>中的<code>Array.prototype.slice.call(arguments)</code>写法。</p>\n<ul>\n<li><strong>使用</strong><code>Math</code><strong>函数获取数组中特定的值</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">9</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(...numbers); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(...numbers); <span class=\"comment\">// 9</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-对对象与数组的解构的理解\"><a href=\"#8-对对象与数组的解构的理解\" class=\"headerlink\" title=\"8. 对对象与数组的解构的理解\"></a>8. 对对象与数组的解构的理解</h3><p>解构是 ES6 提供的一种新的提取数据的模式，这种模式能够从对象或数组里有针对性地拿到想要的数值。 <strong>1）数组的解构</strong> 在解构数组时，以元素的位置为匹配条件来提取想要的数据的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<p>最终，a、b、c分别被赋予了数组第0、1、2个索引位的值：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112704625.png\" alt=\"image-20230610112704625\"></p>\n<p>数组里的0、1、2索引位的元素值，精准地被映射到了左侧的第0、1、2个变量里去，这就是数组解构的工作模式。还可以通过给左侧变量数组设置空占位的方式，实现对数组中某几个元素的精准提取：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a,,c] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<p>通过把中间位留空，可以顺利地把数组第一位和最后一位的值赋给 a、c 两个变量： </p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112753402.png\" alt=\"image-20230610112753402\"></p>\n<p><strong>2）对象的解构</strong> 对象解构比数组结构稍微复杂一些，也更显强大。在解构对象时，是以属性的名称为匹配条件，来提取想要的数据的。现在定义一个对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stu = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bob&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">24</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假如想要解构它的两个自有属性，可以这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; name, age &#125; = stu</span><br></pre></td></tr></table></figure>\n\n<p>这样就得到了 name 和 age 两个和 stu 平级的变量：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112810838.png\" alt=\"image-20230610112810838\"></p>\n<p>注意，对象解构严格以属性名作为定位依据，所以就算调换了 name 和 age 的位置，结果也是一样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; age, name &#125; = stu</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-如何提取高度嵌套的对象里的指定属性？\"><a href=\"#9-如何提取高度嵌套的对象里的指定属性？\" class=\"headerlink\" title=\"9. 如何提取高度嵌套的对象里的指定属性？\"></a>9. <strong>如何提取高度嵌套的对象里的指定属性？</strong></h3><p>有时会遇到一些嵌套程度非常深的对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> school = &#123;</span><br><span class=\"line\">   <span class=\"attr\">classes</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">stu</span>: &#123;</span><br><span class=\"line\">         <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bob&#x27;</span>,</span><br><span class=\"line\">         <span class=\"attr\">age</span>: <span class=\"number\">24</span>,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>像此处的 name 这个变量，嵌套了四层，此时如果仍然尝试老方法来提取它：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; name &#125; = school</span><br></pre></td></tr></table></figure>\n\n<p>显然是不奏效的，因为 school 这个对象本身是没有 name 这个属性的，name 位于 school 对象的“儿子的儿子”对象里面。要想把 name 提取出来，一种比较笨的方法是逐层解构：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; classes &#125; = school</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; stu &#125; = classes</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; name &#125; = stu</span><br><span class=\"line\">name <span class=\"comment\">// &#x27;Bob&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是还有一种更标准的做法，可以用一行代码来解决这个问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"attr\">classes</span>: &#123; <span class=\"attr\">stu</span>: &#123; name &#125; &#125;&#125; = school</span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name)  <span class=\"comment\">// &#x27;Bob&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以在解构出来的变量名右侧，通过冒号+{目标属性名}这种形式，进一步解构它，一直解构到拿到目标数据为止。</p>\n<h3 id=\"10-对-rest-参数的理解\"><a href=\"#10-对-rest-参数的理解\" class=\"headerlink\" title=\"10. 对 rest 参数的理解\"></a>10. 对 rest 参数的理解</h3><p>扩展运算符被用在函数形参上时，<strong>它还可以把一个分离的参数序列整合成一个数组</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mutiple</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> args) &#123;</span><br><span class=\"line\">    result *= val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">mutiple</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// 24</span></span><br></pre></td></tr></table></figure>\n\n<p>这里，传入 mutiple 的是四个分离的参数，但是如果在 mutiple 函数里尝试输出 args 的值，会发现它是一个数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mutiple</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">mutiple</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n\n<p>这就是 … rest运算符的又一层威力了，它可以把函数的多个入参收敛进一个数组里。这一点<strong>经常用于获取函数的多余参数，或者像上面这样处理函数参数个数不确定的情况。</strong></p>\n<h3 id=\"11-ES6中模板语法与字符串处理\"><a href=\"#11-ES6中模板语法与字符串处理\" class=\"headerlink\" title=\"11. ES6中模板语法与字符串处理\"></a>11. ES6中模板语法与字符串处理</h3><p>ES6 提出了“模板语法”的概念。在 ES6 以前，拼接字符串是很麻烦的事情：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;css&#x27;</span>   </span><br><span class=\"line\"><span class=\"keyword\">var</span> career = <span class=\"string\">&#x27;coder&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">var</span> hobby = [<span class=\"string\">&#x27;coding&#x27;</span>, <span class=\"string\">&#x27;writing&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> finalString = <span class=\"string\">&#x27;my name is &#x27;</span> + name + <span class=\"string\">&#x27;, I work as a &#x27;</span> + career + <span class=\"string\">&#x27;, I love &#x27;</span> + hobby[<span class=\"number\">0</span>] + <span class=\"string\">&#x27; and &#x27;</span> + hobby[<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>仅仅几个变量，写了这么多加号，还要时刻小心里面的空格和标点符号有没有跟错地方。但是有了模板字符串，拼接难度直线下降：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;css&#x27;</span>   </span><br><span class=\"line\"><span class=\"keyword\">var</span> career = <span class=\"string\">&#x27;coder&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">var</span> hobby = [<span class=\"string\">&#x27;coding&#x27;</span>, <span class=\"string\">&#x27;writing&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> finalString = <span class=\"string\">`my name is <span class=\"subst\">$&#123;name&#125;</span>, I work as a <span class=\"subst\">$&#123;career&#125;</span> I love <span class=\"subst\">$&#123;hobby[<span class=\"number\">0</span>]&#125;</span> and <span class=\"subst\">$&#123;hobby[<span class=\"number\">1</span>]&#125;</span>`</span></span><br></pre></td></tr></table></figure>\n\n<p>字符串不仅更容易拼了，也更易读了，代码整体的质量都变高了。这就是模板字符串的第一个优势——允许用${}的方式嵌入变量。但这还不是问题的关键，模板字符串的关键优势有两个：</p>\n<ul>\n<li>在模板字符串中，空格、缩进、换行都会被保留</li>\n<li>模板字符串完全支持“运算”式的表达式，可以在${}里完成一些计算</li>\n</ul>\n<p>基于第一点，可以在模板字符串里无障碍地直接写 html 代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&lt;li&gt;列表项1&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&lt;li&gt;列表项2&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t&lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message); <span class=\"comment\">// 正确输出，不存在报错</span></span><br></pre></td></tr></table></figure>\n\n<p>基于第二点，可以把一些简单的计算和调用丢进 ${} 来做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> finalString = <span class=\"string\">`<span class=\"subst\">$&#123;a&#125;</span> + <span class=\"subst\">$&#123;b&#125;</span> = <span class=\"subst\">$&#123;a+b&#125;</span>`</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(finalString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 输出 &#x27;1 + 2 = 3&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>除了模板语法外， ES6中还新增了一系列的字符串方法用于提升开发效率：</p>\n<p>（1）<strong>存在性判定</strong>：在过去，当判断一个字符/字符串是否在某字符串中时，只能用 indexOf &gt; -1 来做。现在 ES6 提供了三个方法：includes、startsWith、endsWith，它们都会返回一个布尔值来告诉你是否存在。</p>\n<ul>\n<li><strong>includes</strong>：判断字符串与子串的包含关系：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> son = <span class=\"string\">&#x27;haha&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">const</span> father = <span class=\"string\">&#x27;xixi haha hehe&#x27;</span></span><br><span class=\"line\">father.<span class=\"title function_\">includes</span>(son) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>startsWith</strong>：判断字符串是否以某个/某串字符开头：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> father = <span class=\"string\">&#x27;xixi haha hehe&#x27;</span></span><br><span class=\"line\">father.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;haha&#x27;</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">father.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;xixi&#x27;</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>endsWith</strong>：判断字符串是否以某个/某串字符结尾：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> father = <span class=\"string\">&#x27;xixi haha hehe&#x27;</span></span><br><span class=\"line\">  father.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;hehe&#x27;</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）<strong>自动重复</strong>：可以使用 repeat 方法来使同一个字符串输出多次（被连续复制多次）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sourceCode = <span class=\"string\">&#x27;repeat for 3 times;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> repeated = sourceCode.<span class=\"title function_\">repeat</span>(<span class=\"number\">3</span>) </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(repeated) <span class=\"comment\">// repeat for 3 times;repeat for 3 times;repeat for 3 times;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、JavaScript基础\"><a href=\"#三、JavaScript基础\" class=\"headerlink\" title=\"三、JavaScript基础\"></a>三、JavaScript基础</h2><h3 id=\"1-new操作符的实现原理\"><a href=\"#1-new操作符的实现原理\" class=\"headerlink\" title=\"1. new操作符的实现原理\"></a>1. new操作符的实现原理</h3><p><strong>new操作符的执行过程：</strong></p>\n<p>（1）首先创建了一个新的空对象</p>\n<p>（2）设置原型，将对象的原型设置为函数的 prototype 对象。</p>\n<p>（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）</p>\n<p>（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</p>\n<p>具体实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">objectFactory</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObject = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> constructor = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">shift</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 判断参数是否是一个函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> constructor !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;type error&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 新建一个空对象，对象的原型为构造函数的 prototype 对象</span></span><br><span class=\"line\">  newObject = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(constructor.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\">  <span class=\"comment\">// 将 this 指向新建对象，并执行函数</span></span><br><span class=\"line\">  result = constructor.<span class=\"title function_\">apply</span>(newObject, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 判断返回对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> flag = result &amp;&amp; (<span class=\"keyword\">typeof</span> result === <span class=\"string\">&quot;object&quot;</span> || <span class=\"keyword\">typeof</span> result === <span class=\"string\">&quot;function&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 判断返回结果</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> flag ? result : newObject;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用方法</span></span><br><span class=\"line\"><span class=\"title function_\">objectFactory</span>(构造函数, 初始化参数);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-map和Object的区别\"><a href=\"#2-map和Object的区别\" class=\"headerlink\" title=\"2. map和Object的区别\"></a>2. map和Object的区别</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>Map</th>\n<th>Object</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>意外的键</td>\n<td>Map默认情况不包含任何键，只包含显式插入的键。</td>\n<td>Object 有一个原型, 原型链上的键名有可能和自己在对象上的设置的键名产生冲突。</td>\n</tr>\n<tr>\n<td>键的类型</td>\n<td>Map的键可以是任意值，包括函数、对象或任意基本类型。</td>\n<td>Object 的键必须是 String 或是Symbol。</td>\n</tr>\n<tr>\n<td>键的顺序</td>\n<td>Map 中的 key 是有序的。因此，当迭代的时候， Map 对象以插入的顺序返回键值。</td>\n<td>Object 的键是无序的</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>Map 的键值对个数可以轻易地通过size 属性获取</td>\n<td>Object 的键值对个数只能手动计算</td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>Map 是 iterable 的，所以可以直接被迭代。</td>\n<td>迭代Object需要以某种方式获取它的键然后才能迭代。</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>在频繁增删键值对的场景下表现更好。</td>\n<td>在频繁添加和删除键值对的场景下未作出优化。</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-map和weakMap的区别\"><a href=\"#3-map和weakMap的区别\" class=\"headerlink\" title=\"3. map和weakMap的区别\"></a>3. map和weakMap的区别</h3><p><strong>（1）Map</strong> map本质上就是键值对的集合，但是普通的Object中的键值对中的键只能是字符串。而ES6提供的Map数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的Hash结构。如果Map的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。</p>\n<p>实际上Map是一个数组，它的每一个数据也都是一个数组，其形式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = [</span><br><span class=\"line\">     [<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;张三&quot;</span>],</span><br><span class=\"line\">     [<span class=\"string\">&quot;age&quot;</span>,<span class=\"number\">18</span>],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>Map数据结构有以下操作方法：</p>\n<ul>\n<li><strong>size</strong>： <code>map.size</code> 返回Map结构的成员总数。</li>\n<li>**set(key,value)**：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）</li>\n<li>**get(key)**：该方法读取key对应的键值，如果找不到key，返回undefined。</li>\n<li>**has(key)**：该方法返回一个布尔值，表示某个键是否在当前Map对象中。</li>\n<li>**delete(key)**：该方法删除某个键，返回true，如果删除失败，返回false。</li>\n<li>**clear()**：map.clear()清除所有成员，没有返回值。</li>\n</ul>\n<p>Map结构原生提供是三个遍历器生成函数和一个遍历方法</p>\n<ul>\n<li>keys()：返回键名的遍历器。</li>\n<li>values()：返回键值的遍历器。</li>\n<li>entries()：返回所有成员的遍历器。</li>\n<li>forEach()：遍历Map的所有成员。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>([</span><br><span class=\"line\">     [<span class=\"string\">&quot;foo&quot;</span>,<span class=\"number\">1</span>],</span><br><span class=\"line\">     [<span class=\"string\">&quot;bar&quot;</span>,<span class=\"number\">2</span>],</span><br><span class=\"line\">])</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> map.<span class=\"title function_\">keys</span>())&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key);  <span class=\"comment\">// foo bar</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> map.<span class=\"title function_\">values</span>())&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value); <span class=\"comment\">// 1 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> items <span class=\"keyword\">of</span> map.<span class=\"title function_\">entries</span>())&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(items);  <span class=\"comment\">// [&quot;foo&quot;,1]  [&quot;bar&quot;,2]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">map.<span class=\"title function_\">forEach</span>( <span class=\"function\">(<span class=\"params\">value,key,map</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key,value); <span class=\"comment\">// foo 1    bar 2</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>（2）WeakMap</strong> WeakMap 对象也是一组键值对的集合，其中的键是弱引用的。<strong>其键必须是对象</strong>，原始数据类型不能作为key值，而值可以是任意的。</p>\n<p>该对象也有以下几种方法：</p>\n<ul>\n<li>**set(key,value)**：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）</li>\n<li>**get(key)**：该方法读取key对应的键值，如果找不到key，返回undefined。</li>\n<li>**has(key)**：该方法返回一个布尔值，表示某个键是否在当前Map对象中。</li>\n<li>**delete(key)**：该方法删除某个键，返回true，如果删除失败，返回false。</li>\n</ul>\n<p>其clear()方法已经被弃用，所以可以通过创建一个空的WeakMap并替换原对象来实现清除。</p>\n<p>WeakMap的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。</p>\n<p>而WeakMap的<strong>键名所引用的对象都是弱引用</strong>，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的<strong>键名对象和所对应的键值对会自动消失，不用手动删除引用</strong>。</p>\n<p><strong>总结：</strong></p>\n<ul>\n<li>Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</li>\n<li>WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null 除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。</li>\n</ul>\n<h3 id=\"4-JavaScript有哪些内置对象\"><a href=\"#4-JavaScript有哪些内置对象\" class=\"headerlink\" title=\"4. JavaScript有哪些内置对象\"></a>4. JavaScript有哪些内置对象</h3><p>全局的对象（ global objects ）或称标准内置对象，不要和 “全局对象（global object）” 混淆。这里说的全局的对象是说在 全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。</p>\n<p><strong>标准内置对象的分类：</strong></p>\n<p>（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。例如 Infinity、NaN、undefined、null 字面量</p>\n<p>（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。例如 eval()、parseFloat()、parseInt() 等</p>\n<p>（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。例如 Object、Function、Boolean、Symbol、Error 等</p>\n<p>（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。例如 Number、Math、Date</p>\n<p>（5）字符串，用来表示和操作字符串的对象。例如 String、RegExp</p>\n<p>（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array</p>\n<p>（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。 例如 Map、Set、WeakMap、WeakSet</p>\n<p>（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。 例如 SIMD 等</p>\n<p>（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。例如 JSON 等</p>\n<p>（10）控制抽象对象 例如 Promise、Generator 等</p>\n<p>（11）反射。例如 Reflect、Proxy</p>\n<p>（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。例如 Intl、Intl.Collator 等</p>\n<p>（13）WebAssembly</p>\n<p>（14）其他。例如 arguments</p>\n<p><strong>总结：</strong> js 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js 定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。一般经常用到的如全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构造函数如 Date、Object 等，还有提供数学计算的单体内置对象如 Math 对象。</p>\n<h3 id=\"5-常用的正则表达式有哪些？\"><a href=\"#5-常用的正则表达式有哪些？\" class=\"headerlink\" title=\"5. 常用的正则表达式有哪些？\"></a>5. 常用的正则表达式有哪些？</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// （1）匹配 16 进制颜色值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// （2）匹配日期，如 yyyy-mm-dd 格式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^[0-9]&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// （3）匹配 qq 号</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^[1-9][0-9]&#123;4,10&#125;$/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// （4）手机号码正则</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^1[34578]\\d&#123;9&#125;$/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// （5）用户名正则</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> regex = <span class=\"regexp\">/^[a-zA-Z\\$][a-zA-Z0-9_\\$]&#123;4,16&#125;$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-对JSON的理解\"><a href=\"#6-对JSON的理解\" class=\"headerlink\" title=\"6. 对JSON的理解\"></a>6. 对JSON的理解</h3><p>JSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。</p>\n<p>在项目开发中，使用 JSON 作为前后端数据交换的方式。在前端通过将一个符合 JSON 格式的数据结构序列化为 JSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。</p>\n<p>因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是应该注意的是 JSON 和 js 中的对象不是一回事，JSON 中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。</p>\n<p>在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，</p>\n<ul>\n<li>JSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，可以调用这个函数将数据对象转化为 JSON 格式的字符串。</li>\n<li>JSON.parse() 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当从后端接收到 JSON 格式的字符串时，可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。</li>\n</ul>\n<h3 id=\"7-JavaScript脚本延迟加载的方式有哪些？\"><a href=\"#7-JavaScript脚本延迟加载的方式有哪些？\" class=\"headerlink\" title=\"7. JavaScript脚本延迟加载的方式有哪些？\"></a>7. JavaScript脚本延迟加载的方式有哪些？</h3><p>延迟加载就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。</p>\n<p>一般有以下几种方式：</p>\n<ul>\n<li><strong>defer 属性：</strong> 给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。</li>\n<li><strong>async 属性：</strong> 给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。</li>\n<li><strong>动态创建 DOM 方式：</strong> 动态创建 DOM 标签的方式，可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。</li>\n<li><strong>使用 setTimeout 延迟方法：</strong> 设置一个定时器来延迟加载js脚本文件</li>\n<li><strong>让 JS 最后加载：</strong> 将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。</li>\n</ul>\n<h3 id=\"8-JavaScript-类数组对象的定义？\"><a href=\"#8-JavaScript-类数组对象的定义？\" class=\"headerlink\" title=\"8. JavaScript 类数组对象的定义？\"></a>8. JavaScript 类数组对象的定义？</h3><p>一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。</p>\n<p>常见的类数组转换为数组的方法有这样几种：</p>\n<p>（1）通过 call 调用数组的 slice 方法来实现转换</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(arrayLike);</span><br></pre></td></tr></table></figure>\n\n<p>（2）通过 call 调用数组的 splice 方法来实现转换</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">splice</span>.<span class=\"title function_\">call</span>(arrayLike, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>（3）通过 apply 调用数组的 concat 方法来实现转换</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">concat</span>.<span class=\"title function_\">apply</span>([], arrayLike);</span><br></pre></td></tr></table></figure>\n\n<p>（4）通过 Array.from 方法来实现转换</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(arrayLike);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-数组有哪些原生方法？\"><a href=\"#9-数组有哪些原生方法？\" class=\"headerlink\" title=\"9. 数组有哪些原生方法？\"></a>9. 数组有哪些原生方法？</h3><ul>\n<li>数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。</li>\n<li>数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。</li>\n<li>数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。</li>\n<li>数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。</li>\n<li>数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。</li>\n<li>数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法</li>\n<li>数组归并方法 reduce() 和 reduceRight() 方法</li>\n</ul>\n<h3 id=\"10-Unicode、UTF-8、UTF-16、UTF-32的区别？\"><a href=\"#10-Unicode、UTF-8、UTF-16、UTF-32的区别？\" class=\"headerlink\" title=\"10. Unicode、UTF-8、UTF-16、UTF-32的区别？\"></a>10. <strong>Unicode、UTF-8、UTF-16、UTF-32的区别？</strong></h3><h4 id=\"（1）Unicode\"><a href=\"#（1）Unicode\" class=\"headerlink\" title=\"（1）Unicode\"></a>（1）Unicode</h4><p>在说<code>Unicode</code>之前需要先了解一下<code>ASCII</code>码：ASCII 码（<code>American Standard Code for Information Interchange</code>）称为美国标准信息交换码。</p>\n<ul>\n<li>它是基于拉丁字母的一套电脑编码系统。</li>\n<li>它定义了一个用于代表常见字符的字典。</li>\n<li>它包含了”A-Z”(包含大小写)，数据”0-9” 以及一些常见的符号。</li>\n<li>它是专门为英语而设计的，有128个编码，对其他语言无能为力</li>\n</ul>\n<p><code>ASCII</code>码可以表示的编码有限，要想表示其他语言的编码，还是要使用<code>Unicode</code>来表示，可以说<code>Unicode</code>是<code>ASCII</code> 的超集。</p>\n<p><code>Unicode</code>全称 <code>Unicode Translation Format</code>，又叫做统一码、万国码、单一码。<code>Unicode</code> 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p>\n<p><code>Unicode</code>的实现方式（也就是编码方式）有很多种，常见的是<strong>UTF-8</strong>、<strong>UTF-16</strong>、<strong>UTF-32</strong>和<strong>USC-2</strong>。</p>\n<h4 id=\"（2）UTF-8\"><a href=\"#（2）UTF-8\" class=\"headerlink\" title=\"（2）UTF-8\"></a>（2）UTF-8</h4><p><code>UTF-8</code>是使用最广泛的<code>Unicode</code>编码方式，它是一种可变长的编码方式，可以是1—4个字节不等，它可以完全兼容<code>ASCII</code>码的128个字符。</p>\n<p><strong>注意：</strong> <code>UTF-8</code> 是一种编码方式，<code>Unicode</code>是一个字符集合。</p>\n<p><code>UTF-8</code>的编码规则：</p>\n<ul>\n<li>对于<strong>单字节</strong>的符号，字节的第一位为0，后面的7位为这个字符的<code>Unicode</code>编码，因此对于英文字母，它的<code>Unicode</code>编码和<code>ACSII</code>编码一样。</li>\n<li>对于<strong>n字节</strong>的符号，第一个字节的前n位都是1，第n+1位设为0，后面字节的前两位一律设为10，剩下的没有提及的二进制位，全部为这个符号的<code>Unicode</code>码 。</li>\n</ul>\n<p>来看一下具体的<code>Unicode</code>编号范围与对应的<code>UTF-8</code>二进制格式 ：</p>\n<table>\n<thead>\n<tr>\n<th>编码范围（编号对应的十进制数）</th>\n<th>二进制格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x00—0x7F （0-127）</td>\n<td>0xxxxxxx</td>\n</tr>\n<tr>\n<td>0x80—0x7FF （128-2047）</td>\n<td>110xxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>0x800—0xFFFF  （2048-65535）</td>\n<td>1110xxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>0x10000—0x10FFFF  （65536以上）</td>\n<td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n</tbody></table>\n<p>那该如何通过具体的<code>Unicode</code>编码，进行具体的<code>UTF-8</code>编码呢？<strong>步骤如下：</strong></p>\n<ul>\n<li>找到该<code>Unicode</code>编码的所在的编号范围，进而找到与之对应的二进制格式</li>\n<li>将<code>Unicode</code>编码转换为二进制数（去掉最高位的0）</li>\n<li>将二进制数从右往左一次填入二进制格式的<code>X</code>中，如果有<code>X</code>未填，就设为0</li>\n</ul>\n<p>来看一个实际的例子： “<strong>马</strong>” 字的<code>Unicode</code>编码是：<code>0x9A6C</code>，整数编号是<code>39532</code> （1）首选确定了该字符在第三个范围内，它的格式是 <code>1110xxxx 10xxxxxx 10xxxxxx</code> （2）39532对应的二进制数为<code>1001 1010 0110 1100</code> （3）将二进制数填入X中，结果是：<code>11101001 10101001 10101100</code></p>\n<h4 id=\"（3）UTF-16\"><a href=\"#（3）UTF-16\" class=\"headerlink\" title=\"（3）UTF-16\"></a>（3）UTF-16</h4><p><strong>1. 平面的概念</strong></p>\n<p>在了解<code>UTF-16</code>之前，先看一下<strong>平面</strong>的概念： <code>Unicode</code>编码中有很多很多的字符，它并不是一次性定义的，而是分区进行定义的，每个区存放<strong>65536</strong>（216）个字符，这称为一个<strong>平面</strong>，目前总共有17 个平面。</p>\n<p>最前面的一个平面称为<strong>基本平面</strong>，它的码点从<strong>0 — 216-1</strong>，写成16进制就是<code>U+0000 — U+FFFF</code>，那剩下的16个平面就是<strong>辅助平面</strong>，码点范围是 <code>U+10000—U+10FFFF</code>。</p>\n<p><strong>2. UTF-16 概念：</strong></p>\n<p><code>UTF-16</code>也是<code>Unicode</code>编码集的一种编码形式，把<code>Unicode</code>字符集的抽象码位映射为16位长的整数（即码元）的序列，用于数据存储或传递。<code>Unicode</code>字符的码位需要1个或者2个16位长的码元来表示，因此<code>UTF-16</code>也是用变长字节表示的。</p>\n<p><strong>3. UTF-16 编码规则：</strong></p>\n<ul>\n<li>编号在 <code>U+0000—U+FFFF</code> 的字符（常用字符集），直接用两个字节表示。</li>\n<li>编号在 <code>U+10000—U+10FFFF</code> 之间的字符，需要用四个字节表示。</li>\n</ul>\n<p><strong>4. 编码识别</strong></p>\n<p>那么问题来了，当遇到两个字节时，怎么知道是把它当做一个字符还是和后面的两个字节一起当做一个字符呢？</p>\n<p><code>UTF-16</code> 编码肯定也考虑到了这个问题，在基本平面内，从 <code>U+D800 — U+DFFF</code> 是一个空段，也就是说这个区间的码点不对应任何的字符，因此这些空段就可以用来映射辅助平面的字符。</p>\n<p>辅助平面共有 <strong>220</strong> 个字符位，因此表示这些字符至少需要 20 个二进制位。<code>UTF-16</code> 将这 20 个二进制位分成两半，前 10 位映射在 <code>U+D800 — U+DBFF</code>，称为<strong>高位</strong>（H），后 10 位映射在 <code>U+DC00 — U+DFFF</code>，称为<strong>低位</strong>（L）。这就相当于，将一个辅助平面的字符拆成了两个基本平面的字符来表示。</p>\n<p>因此，当遇到两个字节时，发现它的码点在 <code>U+D800 —U+DBFF</code>之间，就可以知道，它后面的两个字节的码点应该在 <code>U+DC00 — U+DFFF</code> 之间，这四个字节必须放在一起进行解读。</p>\n<p><strong>5. 举例说明</strong></p>\n<p>以 “<strong>𡠀</strong>“ 字为例，它的 <code>Unicode</code> 码点为 <code>0x21800</code>，该码点超出了基本平面的范围，因此需要用四个字节来表示，步骤如下：</p>\n<ul>\n<li>首先计算超出部分的结果：<code>0x21800 - 0x10000</code></li>\n<li>将上面的计算结果转为20位的二进制数，不足20位就在前面补0，结果为：<code>0001000110 0000000000</code></li>\n<li>将得到的两个10位二进制数分别对应到两个区间中</li>\n<li><code>U+D800</code> 对应的二进制数为 <code>1101100000000000</code>， 将<code>0001000110</code>填充在它的后10 个二进制位，得到 <code>1101100001000110</code>，转成 16 进制数为 <code>0xD846</code>。同理，低位为 <code>0xDC00</code>，所以这个字的<code>UTF-16</code> 编码为 <code>0xD846 0xDC00</code></li>\n</ul>\n<h4 id=\"（4）-UTF-32\"><a href=\"#（4）-UTF-32\" class=\"headerlink\" title=\"（4） UTF-32\"></a>（4） UTF-32</h4><p><code>UTF-32</code> 就是字符所对应编号的整数二进制形式，每个字符占四个字节，这个是直接进行转换的。该编码方式占用的储存空间较多，所以使用较少。</p>\n<p>比如“<strong>马</strong>” 字的Unicode编号是：<code>U+9A6C</code>，整数编号是<code>39532</code>，直接转化为二进制：<code>1001 1010 0110 1100</code>，这就是它的UTF-32编码。</p>\n<h4 id=\"（5）总结\"><a href=\"#（5）总结\" class=\"headerlink\" title=\"（5）总结\"></a>（5）总结</h4><p><strong>Unicode、UTF-8、UTF-16、UTF-32有什么区别？</strong></p>\n<ul>\n<li><code>Unicode</code> 是编码字符集（字符集），而<code>UTF-8</code>、<code>UTF-16</code>、<code>UTF-32</code>是字符集编码（编码规则）；</li>\n<li><code>UTF-16</code> 使用变长码元序列的编码方式，相较于定长码元序列的<code>UTF-32</code>算法更复杂，甚至比同样是变长码元序列的<code>UTF-8</code>也更为复杂，因为其引入了独特的<strong>代理对</strong>这样的代理机制；</li>\n<li><code>UTF-8</code>需要判断每个字节中的开头标志信息，所以如果某个字节在传送过程中出错了，就会导致后面的字节也会解析出错；而<code>UTF-16</code>不会判断开头标志，即使错也只会错一个字符，所以容错能力教强；</li>\n<li>如果字符内容全部英文或英文与其他文字混合，但英文占绝大部分，那么用<code>UTF-8</code>就比<code>UTF-16</code>节省了很多空间；而如果字符内容全部是中文这样类似的字符或者混合字符中中文占绝大多数，那么<code>UTF-16</code>就占优势了，可以节省很多空间；</li>\n</ul>\n<h3 id=\"11-常见的位运算符有哪些？其计算规则是什么？\"><a href=\"#11-常见的位运算符有哪些？其计算规则是什么？\" class=\"headerlink\" title=\"11. 常见的位运算符有哪些？其计算规则是什么？\"></a>11. 常见的位运算符有哪些？其计算规则是什么？</h3><p>现代计算机中数据都是以二进制的形式存储的，即0、1两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。</p>\n<p>常见的位运算有以下几种：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>运算规则</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&amp;</code></td>\n<td>与</td>\n<td>两个位都为1时，结果才为1</td>\n<td></td>\n</tr>\n<tr>\n<td>`</td>\n<td>`</td>\n<td>或</td>\n<td>两个位都为0时，结果才为0</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>异或</td>\n<td>两个位相同为0，相异为1</td>\n<td></td>\n</tr>\n<tr>\n<td><code>~</code></td>\n<td>取反</td>\n<td>0变1，1变0</td>\n<td></td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td>左移</td>\n<td>各二进制位全部左移若干位，高位丢弃，低位补0</td>\n<td></td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code></td>\n<td>右移</td>\n<td>各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃</td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"1-按位与运算符（-amp-）\"><a href=\"#1-按位与运算符（-amp-）\" class=\"headerlink\" title=\"1. 按位与运算符（&amp;）\"></a>1. 按位与运算符（&amp;）</h4><p><strong>定义：</strong> 参加运算的两个数据<strong>按二进制位</strong>进行“与”运算。 <strong>运算规则：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> &amp; <span class=\"number\">0</span> = <span class=\"number\">0</span>  </span><br><span class=\"line\"><span class=\"number\">0</span> &amp; <span class=\"number\">1</span> = <span class=\"number\">0</span>  </span><br><span class=\"line\"><span class=\"number\">1</span> &amp; <span class=\"number\">0</span> = <span class=\"number\">0</span>  </span><br><span class=\"line\"><span class=\"number\">1</span> &amp; <span class=\"number\">1</span> = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：两位同时为1，结果才为1，否则结果为0。 例如：3&amp;5 即：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0000</span> <span class=\"number\">0011</span> </span><br><span class=\"line\">   <span class=\"number\">0000</span> <span class=\"number\">0101</span> </span><br><span class=\"line\"> = <span class=\"number\">0000</span> <span class=\"number\">0001</span></span><br></pre></td></tr></table></figure>\n\n<p>因此 3&amp;5 的值为1。 注意：负数按补码形式参加按位与运算。</p>\n<p><strong>用途：</strong></p>\n<p><strong>（1）判断奇偶</strong></p>\n<p>只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用<code>if ((i &amp; 1) == 0)</code>代替<code>if (i % 2 == 0)</code>来判断a是不是偶数。</p>\n<p><strong>（2）清零</strong></p>\n<p>如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。</p>\n<h4 id=\"2-按位或运算符（-）\"><a href=\"#2-按位或运算符（-）\" class=\"headerlink\" title=\"2. 按位或运算符（|）\"></a>2. 按位或运算符（|）</h4><p><strong>定义：</strong> 参加运算的两个对象按二进制位进行“或”运算。</p>\n<p><strong>运算规则：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> | <span class=\"number\">0</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">0</span> | <span class=\"number\">1</span> = <span class=\"number\">1</span>  </span><br><span class=\"line\"><span class=\"number\">1</span> | <span class=\"number\">0</span> = <span class=\"number\">1</span>  </span><br><span class=\"line\"><span class=\"number\">1</span> | <span class=\"number\">1</span> = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：参加运算的两个对象只要有一个为1，其值为1。 例如：3|5即：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0000</span> <span class=\"number\">0011</span></span><br><span class=\"line\">  <span class=\"number\">0000</span> <span class=\"number\">0101</span> </span><br><span class=\"line\">= <span class=\"number\">0000</span> <span class=\"number\">0111</span></span><br></pre></td></tr></table></figure>\n\n<p>因此，3|5的值为7。 注意：负数按补码形式参加按位或运算。</p>\n<h4 id=\"3-异或运算符（-）\"><a href=\"#3-异或运算符（-）\" class=\"headerlink\" title=\"3. 异或运算符（^）\"></a>3. 异或运算符（^）</h4><p><strong>定义：</strong> 参加运算的两个数据按二进制位进行“异或”运算。</p>\n<p><strong>运算规则：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> ^ <span class=\"number\">0</span> = <span class=\"number\">0</span>  </span><br><span class=\"line\"><span class=\"number\">0</span> ^ <span class=\"number\">1</span> = <span class=\"number\">1</span>  </span><br><span class=\"line\"><span class=\"number\">1</span> ^ <span class=\"number\">0</span> = <span class=\"number\">1</span>  </span><br><span class=\"line\"><span class=\"number\">1</span> ^ <span class=\"number\">1</span> = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：参加运算的两个对象，如果两个相应位相同为0，相异为1。 例如：3|5即：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0000</span> <span class=\"number\">0011</span></span><br><span class=\"line\">  <span class=\"number\">0000</span> <span class=\"number\">0101</span> </span><br><span class=\"line\">= <span class=\"number\">0000</span> <span class=\"number\">0110</span></span><br></pre></td></tr></table></figure>\n\n<p>因此，3^5的值为6。 异或运算的性质:</p>\n<ul>\n<li>交换律：<code>(a^b)^c == a^(b^c)</code></li>\n<li>结合律：<code>(a + b)^c == a^b + b^c</code></li>\n<li>对于任何数x，都有 <code>x^x=0，x^0=x</code></li>\n<li>自反性: <code>a^b^b=a^0=a</code>;</li>\n</ul>\n<h4 id=\"4-取反运算符\"><a href=\"#4-取反运算符\" class=\"headerlink\" title=\"4. 取反运算符 (~)\"></a>4. 取反运算符 (~)</h4><p><strong>定义：</strong> 参加运算的一个数据按二进制进行“取反”运算。</p>\n<p><strong>运算规则：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ <span class=\"number\">1</span> = <span class=\"number\">0</span>~ <span class=\"number\">0</span> = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：对一个二进制数按位取反，即将0变1，1变0。 例如：~6 即：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0000</span> <span class=\"number\">0110</span>= <span class=\"number\">1111</span> <span class=\"number\">1001</span></span><br></pre></td></tr></table></figure>\n\n<p>在计算机中，正数用原码表示，负数使用补码存储，首先看最高位，最高位1表示负数，0表示正数。此计算机二进制码为负数，最高位为符号位。 当发现按位取反为负数时，就<strong>直接取其补码</strong>，变为十进制：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0000</span> <span class=\"number\">0110</span>   = <span class=\"number\">1111</span> <span class=\"number\">1001</span>反码：<span class=\"number\">1000</span> <span class=\"number\">0110</span>补码：<span class=\"number\">1000</span> <span class=\"number\">0111</span></span><br></pre></td></tr></table></figure>\n\n<p>因此，~6的值为-7。</p>\n<h4 id=\"5-左移运算符（-lt-lt-）\"><a href=\"#5-左移运算符（-lt-lt-）\" class=\"headerlink\" title=\"5. 左移运算符（&lt;&lt;）\"></a>5. 左移运算符（&lt;&lt;）</h4><p><strong>定义：</strong> 将一个运算对象的各二进制位全部左移若干位，左边的二进制位丢弃，右边补0。 设 a=1010 1110，a = a&lt;&lt; 2 将a的二进制位左移2位、右补0，即得a=1011 1000。 若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。</p>\n<h4 id=\"6-右移运算符（-gt-gt-）\"><a href=\"#6-右移运算符（-gt-gt-）\" class=\"headerlink\" title=\"6. 右移运算符（&gt;&gt;）\"></a>6. 右移运算符（&gt;&gt;）</h4><p><strong>定义：</strong> 将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。 例如：a=a&gt;&gt;2 将a的二进制位右移2位，左补0 或者 左补1得看被移数是正还是负。 操作数每右移一位，相当于该数除以2。</p>\n<h4 id=\"7-原码、补码、反码\"><a href=\"#7-原码、补码、反码\" class=\"headerlink\" title=\"7. 原码、补码、反码\"></a>7. 原码、补码、反码</h4><p>上面提到了补码、反码等知识，这里就补充一下。 计算机中的<strong>有符号数</strong>有三种表示方法，即原码、反码和补码。三种表示方法均有符号位和数值位两部分，符号位都是用0表示“正”，用1表示“负”，而数值位，三种表示方法各不相同。</p>\n<p><strong>（1）原码</strong></p>\n<p>原码就是一个数的二进制数。例如：10的原码为0000 1010</p>\n<p><strong>（2）反码</strong></p>\n<ul>\n<li>正数的反码与原码相同，如：10 反码为 0000 1010</li>\n<li>负数的反码为除符号位，按位取反，即0变1，1变0。</li>\n</ul>\n<p>例如：-10</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原码：<span class=\"number\">1000</span> <span class=\"number\">1010</span></span><br><span class=\"line\">反码：<span class=\"number\">1111</span> <span class=\"number\">0101</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>（3）补码</strong></p>\n<ul>\n<li>正数的补码与原码相同，如：10 补码为 0000 1010</li>\n<li>负数的补码是原码除符号位外的所有位取反即0变1，1变0，然后加1，也就是反码加1。</li>\n</ul>\n<p>例如：-10</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原码：<span class=\"number\">1000</span> <span class=\"number\">1010</span></span><br><span class=\"line\">反码：<span class=\"number\">1111</span> <span class=\"number\">0101</span></span><br><span class=\"line\">补码：<span class=\"number\">1111</span> <span class=\"number\">0110</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-为什么函数的-arguments-参数是类数组而不是数组？如何遍历类数组\"><a href=\"#12-为什么函数的-arguments-参数是类数组而不是数组？如何遍历类数组\" class=\"headerlink\" title=\"12. 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?\"></a>12. 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?</h3><p><code>arguments</code>是一个对象，它的属性是从 0 开始依次递增的数字，还有<code>callee</code>和<code>length</code>等属性，与数组相似；但是它却没有数组常见的方法属性，如<code>forEach</code>, <code>reduce</code>等，所以叫它们类数组。</p>\n<p>要遍历类数组，有三个方法：</p>\n<p>（1）将数组的方法应用到类数组上，这时候就可以使用<code>call</code>和<code>apply</code>方法，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">  <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">forEach</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（2）使用Array.from方法将类数组转化成数组：‌</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">  <span class=\"keyword\">const</span> arrArgs = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"variable language_\">arguments</span>) </span><br><span class=\"line\">  arrArgs.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（3）使用展开运算符将类数组转化成数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">    <span class=\"keyword\">const</span> arrArgs = [...<span class=\"variable language_\">arguments</span>] </span><br><span class=\"line\">    arrArgs.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)) </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-什么是-DOM-和-BOM？\"><a href=\"#13-什么是-DOM-和-BOM？\" class=\"headerlink\" title=\"13. 什么是 DOM 和 BOM？\"></a>13. 什么是 DOM 和 BOM？</h3><ul>\n<li>DOM 指的是文档对象模型，它指的是把文档当做一个对象，这个对象主要定义了处理网页内容的方法和接口。</li>\n<li>BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。</li>\n</ul>\n<h3 id=\"14-对类数组对象的理解，如何转化为数组\"><a href=\"#14-对类数组对象的理解，如何转化为数组\" class=\"headerlink\" title=\"14. 对类数组对象的理解，如何转化为数组\"></a>14. 对类数组对象的理解，如何转化为数组</h3><p>一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，函数参数也可以被看作是类数组对象，因为它含有 length属性值，代表可接收的参数个数。</p>\n<p>常见的类数组转换为数组的方法有这样几种：</p>\n<ul>\n<li>通过 call 调用数组的 slice 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(arrayLike);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过 call 调用数组的 splice 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">splice</span>.<span class=\"title function_\">call</span>(arrayLike, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过 apply 调用数组的 concat 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">concat</span>.<span class=\"title function_\">apply</span>([], arrayLike);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过 Array.from 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(arrayLike);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-escape、encodeURI、encodeURIComponent-的区别\"><a href=\"#15-escape、encodeURI、encodeURIComponent-的区别\" class=\"headerlink\" title=\"15. escape、encodeURI、encodeURIComponent 的区别\"></a>15. escape、encodeURI、encodeURIComponent 的区别</h3><ul>\n<li>encodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。</li>\n<li>encodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。</li>\n<li>escape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 %u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。</li>\n</ul>\n<h3 id=\"16-对AJAX的理解，实现一个AJAX请求\"><a href=\"#16-对AJAX的理解，实现一个AJAX请求\" class=\"headerlink\" title=\"16. 对AJAX的理解，实现一个AJAX请求\"></a>16. 对AJAX的理解，实现一个AJAX请求</h3><p>AJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。</p>\n<p>创建AJAX请求的步骤：</p>\n<ul>\n<li><strong>创建一个 XMLHttpRequest 对象。</strong></li>\n<li>在这个对象上<strong>使用 open 方法创建一个 HTTP 请求</strong>，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。</li>\n<li>在发起请求前，可以为这个对象<strong>添加一些信息和监听函数</strong>。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。</li>\n<li>当对象的属性和监听函数设置完成后，最后调<strong>用 sent 方法来向服务器发起请求</strong>，可以传入参数作为发送的数据体。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SERVER_URL</span> = <span class=\"string\">&quot;/server&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\"><span class=\"comment\">// 创建 Http 请求</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置状态监听函数</span></span><br><span class=\"line\">xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> !== <span class=\"number\">4</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 当请求成功时</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">handle</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">response</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">statusText</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 设置请求失败时的监听函数</span></span><br><span class=\"line\">xhr.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">statusText</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 设置请求头信息</span></span><br><span class=\"line\">xhr.<span class=\"property\">responseType</span> = <span class=\"string\">&quot;json&quot;</span>;</span><br><span class=\"line\">xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Accept&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 发送 Http 请求</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>使用Promise封装AJAX：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise 封装实现：</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getJSON</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个 promise 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 新建一个 http 请求</span></span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 设置状态的监听函数</span></span><br><span class=\"line\">    xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> !== <span class=\"number\">4</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 当请求成功或失败时，改变 promise 的状态</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">response</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">statusText</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 设置错误监听函数</span></span><br><span class=\"line\">    xhr.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">statusText</span>));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 设置响应的数据类型</span></span><br><span class=\"line\">    xhr.<span class=\"property\">responseType</span> = <span class=\"string\">&quot;json&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 设置请求头信息</span></span><br><span class=\"line\">    xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Accept&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 发送 http 请求</span></span><br><span class=\"line\">    xhr.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-JavaScript为什么要进行变量提升，它导致了什么问题？\"><a href=\"#17-JavaScript为什么要进行变量提升，它导致了什么问题？\" class=\"headerlink\" title=\"17. JavaScript为什么要进行变量提升，它导致了什么问题？\"></a>17. JavaScript为什么要进行变量提升，它导致了什么问题？</h3><p>变量提升的表现是，无论在函数中何处位置声明的变量，好像都被提升到了函数的首部，可以在变量声明前访问到而不会报错。</p>\n<p>造成变量声明提升的<strong>本质原因</strong>是 js 引擎在代码执行前有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象。当访问一个变量时，会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性，它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。</p>\n<p>首先要知道，JS在拿到一个变量或者一个函数的时候，会有两步操作，即解析和执行。</p>\n<ul>\n<li><p>在解析阶段</p>\n<p>，JS会检查语法，并对函数进行预编译。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。</p>\n<ul>\n<li>全局上下文：变量定义，函数声明</li>\n<li>函数上下文：变量定义，函数声明，this，arguments</li>\n</ul>\n</li>\n<li><p><strong>在执行阶段</strong>，就是按照代码的顺序依次执行。</p>\n</li>\n</ul>\n<p>那为什么会进行变量提升呢？主要有以下两个原因：</p>\n<ul>\n<li>提高性能</li>\n<li>容错性更好</li>\n</ul>\n<p><strong>（1）提高性能</strong> 在JS代码执行之前，会进行语法检查和预编译，并且这一操作只进行一次。这么做就是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新解析一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。</p>\n<p>在解析的过程中，还会为函数生成预编译代码。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，去除注释、不必要的空白等。这样做的好处就是每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量，创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。</p>\n<p><strong>（2）容错性更好</strong></p>\n<p>变量提升可以在一定程度上提高JS的容错性，看下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span>;<span class=\"keyword\">var</span> a;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br></pre></td></tr></table></figure>\n\n<p>如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。</p>\n<p>虽然，在可以开发过程中，可以完全避免这样写，但是有时代码很复杂的时候。可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。</p>\n<p><strong>总结：</strong></p>\n<ul>\n<li>解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间</li>\n<li>声明提升还可以提高JS代码的容错性，使一些不规范的代码也可以正常执行</li>\n</ul>\n<p>变量提升虽然有一些优点，但是他也会造成一定的问题，在ES6中提出了let、const来定义变量，它们就没有变量提升的机制。下面看一下变量提升可能会导致的问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> tmp = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn</span>();  <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个函数中，原本是要打印出外层的tmp变量，但是因为变量提升的问题，内层定义的tmp被提到函数内部的最顶部，相当于覆盖了外层的tmp，所以打印结果为undefined。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; tmp.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 11</span></span><br></pre></td></tr></table></figure>\n\n<p>由于遍历时定义的i会变量提升成为一个全局变量，在函数结束之后不会被销毁，所以打印出来11。</p>\n<h3 id=\"18-什么是尾调用，使用尾调用有什么好处？\"><a href=\"#18-什么是尾调用，使用尾调用有什么好处？\" class=\"headerlink\" title=\"18. 什么是尾调用，使用尾调用有什么好处？\"></a>18. 什么是尾调用，使用尾调用有什么好处？</h3><p>尾调用指的是函数的最后一步调用另一个函数。代码执行是基于执行栈的，所以当在一个函数里调用另一个函数时，会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这时可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。</p>\n<h3 id=\"19-ES6模块与CommonJS模块有什么异同？\"><a href=\"#19-ES6模块与CommonJS模块有什么异同？\" class=\"headerlink\" title=\"19.  ES6模块与CommonJS模块有什么异同？\"></a>19.  <strong>ES6</strong>模块与<strong>CommonJS</strong>模块有什么异同？</h3><p>ES6 Module和CommonJS模块的区别：</p>\n<ul>\n<li>CommonJS是对模块的浅拷⻉，ES6 Module是对模块的引⽤，即ES6 Module只存只读，不能改变其值，也就是指针指向不能变，类似const；</li>\n<li>import的接⼝是read-only（只读状态），不能修改其变量值。 即不能修改其变量的指针指向，但可以改变变量内部指针指向，可以对commonJS对重新赋值（改变指针指向），但是对ES6 Module赋值会编译报错。</li>\n</ul>\n<p>ES6 Module和CommonJS模块的共同点：</p>\n<ul>\n<li>CommonJS和ES6 Module都可以对引⼊的对象进⾏赋值，即对对象内部属性的值进⾏改变。</li>\n</ul>\n<h3 id=\"20-常见的DOM操作有哪些\"><a href=\"#20-常见的DOM操作有哪些\" class=\"headerlink\" title=\"20. 常见的DOM操作有哪些\"></a>20. 常见的DOM操作有哪些</h3><h4 id=\"1）DOM-节点的获取\"><a href=\"#1）DOM-节点的获取\" class=\"headerlink\" title=\"1）DOM 节点的获取\"></a>1）DOM 节点的获取</h4><p>DOM 节点的获取的API及使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getElementById <span class=\"comment\">// 按照 id 查询</span></span><br><span class=\"line\">getElementsByTagName <span class=\"comment\">// 按照标签名查询</span></span><br><span class=\"line\">getElementsByClassName <span class=\"comment\">// 按照类名查询</span></span><br><span class=\"line\">querySelectorAll <span class=\"comment\">// 按照 css 选择器查询</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按照 id 查询</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> imooc = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;imooc&#x27;</span>) <span class=\"comment\">// 查询到 id 为 imooc 的元素</span></span><br><span class=\"line\"><span class=\"comment\">// 按照标签名查询</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pList = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;p&#x27;</span>)  <span class=\"comment\">// 查询到标签为 p 的集合</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(divList.<span class=\"property\">length</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(divList[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"comment\">// 按照类名查询</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moocList = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByClassName</span>(<span class=\"string\">&#x27;mooc&#x27;</span>) <span class=\"comment\">// 查询到类名为 mooc 的集合</span></span><br><span class=\"line\"><span class=\"comment\">// 按照 css 选择器查询</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pList = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;.mooc&#x27;</span>) <span class=\"comment\">// 查询到类名为 mooc 的集合</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2）DOM-节点的创建\"><a href=\"#2）DOM-节点的创建\" class=\"headerlink\" title=\"2）DOM 节点的创建\"></a>2）DOM 节点的创建</h4><p><strong>创建一个新节点，并把它添加到指定节点的后面。</strong> 已知的 HTML 结构如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DEMO<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>我是标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>   </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>要求添加一个有内容的 span 节点到 id 为 title 的节点后面，做法就是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先获取父节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> container = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;container&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 创建新节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> targetSpan = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;span&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 设置 span 节点的内容</span></span><br><span class=\"line\">targetSpan.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;hello world&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 把新创建的元素塞进父节点里去</span></span><br><span class=\"line\">container.<span class=\"title function_\">appendChild</span>(targetSpan)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3）DOM-节点的删除\"><a href=\"#3）DOM-节点的删除\" class=\"headerlink\" title=\"3）DOM 节点的删除\"></a>3）DOM 节点的删除</h4><p><strong>删除指定的 DOM 节点，</strong> 已知的 HTML 结构如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DEMO<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>我是标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>   </span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>需要删除 id 为 title 的元素，做法是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取目标元素的父元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> container = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;container&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 获取目标元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> targetNode = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;title&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 删除目标元素</span></span><br><span class=\"line\">container.<span class=\"title function_\">removeChild</span>(targetNode)</span><br></pre></td></tr></table></figure>\n\n<p>或者通过子节点数组来完成删除：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取目标元素的父元素var container = document.getElementById(&#x27;container&#x27;)// 获取目标元素var targetNode = container.childNodes[1]// 删除目标元素container.removeChild(targetNode)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4）修改-DOM-元素\"><a href=\"#4）修改-DOM-元素\" class=\"headerlink\" title=\"4）修改 DOM 元素\"></a>4）修改 DOM 元素</h4><p>修改 DOM 元素这个动作可以分很多维度，比如说移动 DOM 元素的位置，修改 DOM 元素的属性等。</p>\n<p><strong>将指定的两个 DOM 元素交换位置，</strong> 已知的 HTML 结构如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>DEMO<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span> </span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>我是标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span>我是内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>   </span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>现在需要调换 title 和 content 的位置，可以考虑 insertBefore 或者 appendChild：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取父元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> container = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;container&#x27;</span>)   </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 获取两个需要被交换的元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> title = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;title&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;content&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 交换两个元素，把 content 置于 title 前面</span></span><br><span class=\"line\">container.<span class=\"title function_\">insertBefore</span>(content, title)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21-use-strict是什么意思-使用它区别是什么？\"><a href=\"#21-use-strict是什么意思-使用它区别是什么？\" class=\"headerlink\" title=\"21. use strict是什么意思 ? 使用它区别是什么？\"></a>21. use strict是什么意思 ? 使用它区别是什么？</h3><p>use strict 是一种 ECMAscript5 添加的（严格模式）运行模式，这种模式使得 Javascript 在更严格的条件下运行。设立严格模式的目的如下：</p>\n<ul>\n<li>消除 Javascript 语法的不合理、不严谨之处，减少怪异行为;</li>\n<li>消除代码运行的不安全之处，保证代码运行的安全；</li>\n<li>提高编译器效率，增加运行速度；</li>\n<li>为未来新版本的 Javascript 做好铺垫。</li>\n</ul>\n<p>区别：</p>\n<ul>\n<li>禁止使用 with 语句。</li>\n<li>禁止 this 关键字指向全局对象。</li>\n<li>对象不能有重名的属性。</li>\n</ul>\n<h3 id=\"22-如何判断一个对象是否属于某个类？\"><a href=\"#22-如何判断一个对象是否属于某个类？\" class=\"headerlink\" title=\"22. 如何判断一个对象是否属于某个类？\"></a>22. 如何判断一个对象是否属于某个类？</h3><ul>\n<li>第一种方式，使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</li>\n<li>第二种方式，通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写。</li>\n<li>第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString() 方法来打印对象的[[Class]] 属性来进行判断。</li>\n</ul>\n<h3 id=\"23-强类型语言和弱类型语言的区别\"><a href=\"#23-强类型语言和弱类型语言的区别\" class=\"headerlink\" title=\"23. 强类型语言和弱类型语言的区别\"></a>23. 强类型语言和弱类型语言的区别</h3><ul>\n<li><strong>强类型语言</strong>：强类型语言也称为强类型定义语言，是一种总是强制类型定义的语言，要求变量的使用要严格符合定义，所有变量都必须先定义后使用。Java和C++等语言都是强制类型定义的，也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。例如你有一个整数，如果不显式地进行转换，你不能将其视为一个字符串。</li>\n<li><strong>弱类型语言</strong>：弱类型语言也称为弱类型定义语言，与强类型定义相反。JavaScript语言就属于弱类型语言。简单理解就是一种变量类型可以被忽略的语言。比如JavaScript是弱类型定义的，在JavaScript中就可以将字符串’12’和整数3进行连接得到字符串’123’，在相加的时候会进行强制类型转换。</li>\n</ul>\n<p>两者对比：强类型语言在速度上可能略逊色于弱类型语言，但是强类型语言带来的严谨性可以有效地帮助避免许多错误。</p>\n<h3 id=\"24-解释性语言和编译型语言的区别\"><a href=\"#24-解释性语言和编译型语言的区别\" class=\"headerlink\" title=\"24. 解释性语言和编译型语言的区别\"></a>24. 解释性语言和编译型语言的区别</h3><p>（1）解释型语言 使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行。是代码在执行时才被解释器一行行动态翻译和执行，而不是在执行之前就完成翻译。解释型语言不需要事先编译，其直接将源代码解释成机器码并立即执行，所以只要某一平台提供了相应的解释器即可运行该程序。其特点总结如下</p>\n<ul>\n<li>解释型语言每次运行都需要将源代码解释称机器码并执行，效率较低；</li>\n<li>只要平台提供相应的解释器，就可以运行源代码，所以可以方便源程序移植；</li>\n<li>JavaScript、Python等属于解释型语言。</li>\n</ul>\n<p>（2）编译型语言 使用专门的编译器，针对特定的平台，将高级语言源代码一次性的编译成可被该平台硬件执行的机器码，并包装成该平台所能识别的可执行性程序的格式。在编译型语言写的程序执行之前，需要一个专门的编译过程，把源代码编译成机器语言的文件，如exe格式的文件，以后要再运行时，直接使用编译结果即可，如直接运行exe文件。因为只需编译一次，以后运行时不需要编译，所以编译型语言执行效率高。其特点总结如下：</p>\n<ul>\n<li>一次性的编译成平台相关的机器语言文件，运行时脱离开发环境，运行效率高；</li>\n<li>与特定平台相关，一般无法移植到其他平台；</li>\n<li>C、C++等属于编译型语言。</li>\n</ul>\n<p><strong>两者主要区别在于：</strong> 前者源程序编译后即可在该平台运行，后者是在运行期间才编译。所以前者运行速度快，后者跨平台性好。</p>\n<h3 id=\"25-for…in和for…of的区别\"><a href=\"#25-for…in和for…of的区别\" class=\"headerlink\" title=\"25. for…in和for…of的区别\"></a>25. for…in和for…of的区别</h3><p>for…of 是ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，和ES3中的for…in的区别如下</p>\n<ul>\n<li>for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；</li>\n<li>for… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；</li>\n<li>对于数组的遍历，for…in 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，for…of 只返回数组的下标对应的属性值；</li>\n</ul>\n<p><strong>总结：</strong> for…in 循环主要是为了遍历对象而生，不适用于遍历数组；for…of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。</p>\n<h3 id=\"26-如何使用for…of遍历对象\"><a href=\"#26-如何使用for…of遍历对象\" class=\"headerlink\" title=\"26. 如何使用for…of遍历对象\"></a>26. 如何使用for…of遍历对象</h3><p>for…of是作为ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，普通的对象用for..of遍历是会报错的。</p>\n<p>如果需要遍历的对象是类数组对象，用Array.from转成数组即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>:<span class=\"string\">&#x27;one&#x27;</span>,</span><br><span class=\"line\">    <span class=\"number\">1</span>:<span class=\"string\">&#x27;two&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">length</span>: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(obj);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">of</span> obj)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(k)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果不是类数组对象，就给对象添加一个[Symbol.iterator]属性，并指向一个迭代器即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法一：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span>:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>] = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">next</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count&lt;keys.<span class=\"property\">length</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> &#123;<span class=\"attr\">value</span>: obj[keys[count++]],<span class=\"attr\">done</span>:<span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> &#123;<span class=\"attr\">value</span>:<span class=\"literal\">undefined</span>,<span class=\"attr\">done</span>:<span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">of</span> obj)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span>:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>] = <span class=\"keyword\">function</span>*()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">of</span> keys)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> [k,obj[k]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> [k,v] <span class=\"keyword\">of</span> obj)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(k,v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"27-ajax、axios、fetch的区别\"><a href=\"#27-ajax、axios、fetch的区别\" class=\"headerlink\" title=\"27. ajax、axios、fetch的区别\"></a>27. ajax、axios、fetch的区别</h3><p><strong>（1）AJAX</strong> Ajax 即“AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。其缺点如下：</p>\n<ul>\n<li>本身是针对MVC编程，不符合前端MVVM的浪潮</li>\n<li>基于原生XHR开发，XHR本身的架构不清晰</li>\n<li>不符合关注分离（Separation of Concerns）的原则</li>\n<li>配置和调用方式非常混乱，而且基于事件的异步模型不友好。</li>\n</ul>\n<p><strong>（2）Fetch</strong> fetch号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象。Fetch是基于promise设计的。Fetch的代码结构比起ajax简单多。<strong>fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象</strong>。</p>\n<p>fetch的优点：</p>\n<ul>\n<li>语法简洁，更加语义化</li>\n<li>基于标准 Promise 实现，支持 async/await</li>\n<li>更加底层，提供的API丰富（request, response）</li>\n<li>脱离了XHR，是ES规范里新的实现方式</li>\n</ul>\n<p>fetch的缺点：</p>\n<ul>\n<li>fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。</li>\n<li>fetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: ‘include’})</li>\n<li>fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费</li>\n<li>fetch没有办法原生监测请求的进度，而XHR可以</li>\n</ul>\n<p><strong>（3）Axios</strong> Axios 是一种基于Promise封装的HTTP客户端，其特点如下：</p>\n<ul>\n<li>浏览器端发起XMLHttpRequests请求</li>\n<li>node端发起http请求</li>\n<li>支持Promise API</li>\n<li>监听请求和返回</li>\n<li>对请求和返回进行转化</li>\n<li>取消请求</li>\n<li>自动转换json数据</li>\n<li>客户端支持抵御XSRF攻击</li>\n</ul>\n<h3 id=\"28-数组的遍历方法有哪些\"><a href=\"#28-数组的遍历方法有哪些\" class=\"headerlink\" title=\"28. 数组的遍历方法有哪些\"></a>28. 数组的遍历方法有哪些</h3><table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>是否改变原数组</strong></th>\n<th><strong>特点</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>forEach()</td>\n<td>否</td>\n<td>数组方法，不改变原数组，没有返回值</td>\n</tr>\n<tr>\n<td>map()</td>\n<td>否</td>\n<td>数组方法，不改变原数组，有返回值，可链式调用</td>\n</tr>\n<tr>\n<td>filter()</td>\n<td>否</td>\n<td>数组方法，过滤数组，返回包含符合条件的元素的数组，可链式调用</td>\n</tr>\n<tr>\n<td>for…of</td>\n<td>否</td>\n<td>for…of遍历具有Iterator迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的obj对象，将异步循环变成同步循环</td>\n</tr>\n<tr>\n<td>every() 和 some()</td>\n<td>否</td>\n<td>数组方法，some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false.</td>\n</tr>\n<tr>\n<td>find() 和 findIndex()</td>\n<td>否</td>\n<td>数组方法，find()返回的是第一个符合条件的值；findIndex()返回的是第一个返回条件的值的索引值</td>\n</tr>\n<tr>\n<td>reduce() 和 reduceRight()</td>\n<td>否</td>\n<td>数组方法，reduce()对数组正序操作；reduceRight()对数组逆序操作</td>\n</tr>\n</tbody></table>\n<p>遍历方法的详细解释：<a href=\"https://link.juejin.cn/?target=https://cuggz.blog.csdn.net/article/details/107649549\">《细数JavaScript中那些遍历和循环》</a></p>\n<h3 id=\"29-forEach和map方法有什么区别\"><a href=\"#29-forEach和map方法有什么区别\" class=\"headerlink\" title=\"29. forEach和map方法有什么区别\"></a>29. forEach和map方法有什么区别</h3><p>这方法都是用来遍历数组的，两者区别如下：</p>\n<ul>\n<li>forEach()方法会针对每一个元素执行提供的函数，对数据的操作会改变原数组，该方法没有返回值；</li>\n<li>map()方法不会改变原数组的值，返回一个新数组，新数组中的值为原数组调用函数处理之后的值；</li>\n</ul>\n<h2 id=\"四、原型与原型链\"><a href=\"#四、原型与原型链\" class=\"headerlink\" title=\"四、原型与原型链\"></a>四、原型与原型链</h2><h3 id=\"1-对原型、原型链的理解\"><a href=\"#1-对原型、原型链的理解\" class=\"headerlink\" title=\"1. 对原型、原型链的理解\"></a>1. 对原型、原型链的理解</h3><p>在JavaScript中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在浏览器中都实现了 <strong>proto</strong> 属性来访问这个属性，但是最好不要使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法来获取对象的原型。</p>\n<p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。</p>\n<p><strong>特点：</strong> JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112915792.png\" alt=\"image-20230610112915792\"></p>\n<h3 id=\"2-原型修改、重写\"><a href=\"#2-原型修改、重写\" class=\"headerlink\" title=\"2. 原型修改、重写\"></a>2. 原型修改、重写</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 修改原型</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span> === p.<span class=\"property\">constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 重写原型</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">getName</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)        <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span> === p.<span class=\"property\">constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到修改原型的时候p的构造函数不是指向Person了，因为直接给Person的原型对象直接用对象赋值时，它的构造函数指向的了根构造函数Object，所以这时候<code>p.constructor === Object</code> ，而不是<code>p.constructor === Person</code>。要想成立，就要用constructor指回来：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">getName</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">p.<span class=\"property\">constructor</span> = <span class=\"title class_\">Person</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)        <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span> === p.<span class=\"property\">constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-原型链指向\"><a href=\"#3-原型链指向\" class=\"headerlink\" title=\"3. 原型链指向\"></a>3. 原型链指向</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.<span class=\"property\">__proto__</span>  <span class=\"comment\">// Person.prototype</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span>  <span class=\"comment\">// Object.prototype</span></span><br><span class=\"line\">p.<span class=\"property\">__proto__</span>.<span class=\"property\">__proto__</span> <span class=\"comment\">//Object.prototype</span></span><br><span class=\"line\">p.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> <span class=\"comment\">// Object.prototype</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> <span class=\"comment\">// Object.prototype</span></span><br><span class=\"line\">p1.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span> <span class=\"comment\">// Person</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span>  <span class=\"comment\">// Person</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-原型链的终点是什么？如何打印出原型链的终点？\"><a href=\"#4-原型链的终点是什么？如何打印出原型链的终点？\" class=\"headerlink\" title=\"4. 原型链的终点是什么？如何打印出原型链的终点？\"></a>4. 原型链的终点是什么？如何打印出原型链的终点？</h3><p>由于<code>Object</code>是构造函数，原型链终点是<code>Object.prototype.__proto__</code>，而<code>Object.prototype.__proto__=== null // true</code>，所以，原型链的终点是<code>null</code>。原型链上的所有原型都是对象，所有的对象最终都是由<code>Object</code>构造的，而<code>Object.prototype</code>的下一级是<code>Object.prototype.__proto__</code>。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230610112941072.png\" alt=\"image-20230610112941072\"></p>\n<h3 id=\"5-如何获得对象非原型链上的属性？\"><a href=\"#5-如何获得对象非原型链上的属性？\" class=\"headerlink\" title=\"5. 如何获得对象非原型链上的属性？\"></a>5. 如何获得对象非原型链上的属性？</h3><p>使用后<code>hasOwnProperty()</code>方法来判断属性是否属于原型链的属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">iterate</span>(<span class=\"params\">obj</span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> res=[];</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obj.<span class=\"title function_\">hasOwnProperty</span>(key))</span><br><span class=\"line\">           res.<span class=\"title function_\">push</span>(key+<span class=\"string\">&#x27;: &#x27;</span>+obj[key]);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、执行上下文-作用域链-闭包\"><a href=\"#五、执行上下文-作用域链-闭包\" class=\"headerlink\" title=\"五、执行上下文/作用域链/闭包\"></a>五、执行上下文/作用域链/闭包</h2><h3 id=\"1-对闭包的理解\"><a href=\"#1-对闭包的理解\" class=\"headerlink\" title=\"1. 对闭包的理解\"></a>1. 对闭包的理解</h3><p><strong>闭包是指有权访问另一个函数作用域中变量的函数</strong>，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。</p>\n<p>闭包有两个常用的用途；</p>\n<ul>\n<li>闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。</li>\n<li>闭包的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。</li>\n</ul>\n<p>比如，函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"property\">B</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">A</span>()</span><br><span class=\"line\"><span class=\"title function_\">B</span>() <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<p>在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。经典面试题：循环中使用闭包解决 var 定义函数的问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">  &#125;, i * <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先因为 <code>setTimeout</code> 是个异步函数，所以会先把循环全部执行完毕，这时候 <code>i</code> 就是 6 了，所以会输出一堆 6。解决办法有三种：</p>\n<ul>\n<li>第一种是使用闭包的方式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;  ;(<span class=\"keyword\">function</span>(<span class=\"params\">j</span>) &#123;    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>) &#123;      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j)    &#125;, j * <span class=\"number\">1000</span>)  &#125;)(i)&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上述代码中，首先使用了立即执行函数将 <code>i</code> 传入函数内部，这个时候值就被固定在了参数 <code>j</code> 上面不会改变，当下次执行 <code>timer</code> 这个闭包的时候，就可以使用外部函数的变量 <code>j</code>，从而达到目的。</p>\n<ul>\n<li>第二种就是使用 <code>setTimeout</code> 的第三个参数，这个参数会被当成 <code>timer</code> 函数的参数传入。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\">j</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    i * <span class=\"number\">1000</span>,</span><br><span class=\"line\">    i</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第三种就是使用 <code>let</code> 定义 <code>i</code> 了来解决问题了，这个也是最为推荐的方式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">  &#125;, i * <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-对作用域、作用域链的理解\"><a href=\"#2-对作用域、作用域链的理解\" class=\"headerlink\" title=\"2. 对作用域、作用域链的理解\"></a>2. 对作用域、作用域链的理解</h3><h5 id=\"1）全局作用域和函数作用域\"><a href=\"#1）全局作用域和函数作用域\" class=\"headerlink\" title=\"1）全局作用域和函数作用域\"></a>1）全局作用域和函数作用域</h5><p>（1）全局作用域</p>\n<ul>\n<li>最外层函数和最外层函数外面定义的变量拥有全局作用域</li>\n<li>所有未定义直接赋值的变量自动声明为全局作用域</li>\n<li>所有window对象的属性拥有全局作用域</li>\n<li>全局作用域有很大的弊端，过多的全局作用域变量会污染全局命名空间，容易引起命名冲突。</li>\n</ul>\n<p>（2）函数作用域</p>\n<ul>\n<li>函数作用域声明在函数内部的变零，一般只有固定的代码片段可以访问到</li>\n<li>作用域是分层的，内层作用域可以访问外层作用域，反之不行</li>\n</ul>\n<h5 id=\"2）块级作用域\"><a href=\"#2）块级作用域\" class=\"headerlink\" title=\"2）块级作用域\"></a>2）块级作用域</h5><ul>\n<li>使用ES6中新增的let和const指令可以声明块级作用域，块级作用域可以在函数中创建也可以在一个代码块中的创建（由<code>&#123; &#125;</code>包裹的代码片段）</li>\n<li>let和const声明的变量不会有变量提升，也不可以重复声明</li>\n<li>在循环中比较适合绑定块级作用域，这样就可以把声明的计数器变量限制在循环内部。</li>\n</ul>\n<p><strong>作用域链：</strong> 在当前作用域中查找所需变量，但是该作用域没有这个变量，那这个变量就是自由变量。如果在自己作用域找不到该变量就去父级作用域查找，依次向上级作用域查找，直到访问到window对象就被终止，这一层层的关系就是作用域链。</p>\n<p>作用域链的作用是<strong>保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。</strong></p>\n<p>作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。</p>\n<p>当查找一个变量时，如果当前执行环境中没有找到，可以沿着作用域链向后查找。</p>\n<h3 id=\"3-对执行上下文的理解\"><a href=\"#3-对执行上下文的理解\" class=\"headerlink\" title=\"3. 对执行上下文的理解\"></a>3. 对执行上下文的理解</h3><h5 id=\"1-执行上下文类型\"><a href=\"#1-执行上下文类型\" class=\"headerlink\" title=\"1. 执行上下文类型\"></a>1. 执行上下文类型</h5><p><strong>（1）全局执行上下文</strong></p>\n<p>任何不在函数内部的都是全局执行上下文，它首先会创建一个全局的window对象，并且设置this的值等于这个全局对象，一个程序中只有一个全局执行上下文。</p>\n<p><strong>（2）函数执行上下文</strong></p>\n<p>当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。</p>\n<p><strong>（3）</strong><code>eval</code><strong>函数执行上下文</strong></p>\n<p>执行在eval函数中的代码会有属于他自己的执行上下文，不过eval函数不常使用，不做介绍。</p>\n<h5 id=\"2-执行上下文栈\"><a href=\"#2-执行上下文栈\" class=\"headerlink\" title=\"2. 执行上下文栈\"></a>2. 执行上下文栈</h5><ul>\n<li>JavaScript引擎使用执行上下文栈来管理执行上下文</li>\n<li>当JavaScript执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;Hello World!&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">first</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Inside first function&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">second</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Again inside first function&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">second</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Inside second function&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">first</span>();</span><br><span class=\"line\"><span class=\"comment\">//执行顺序</span></span><br><span class=\"line\"><span class=\"comment\">//先执行second(),在执行first()</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-创建执行上下文\"><a href=\"#3-创建执行上下文\" class=\"headerlink\" title=\"3. 创建执行上下文\"></a>3. 创建执行上下文</h5><p>创建执行上下文有两个阶段：<strong>创建阶段</strong>和<strong>执行阶段</strong></p>\n<p><strong>1）创建阶段</strong></p>\n<p>（1）this绑定</p>\n<ul>\n<li>在全局执行上下文中，this指向全局对象（window对象）</li>\n<li>在函数执行上下文中，this指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined</li>\n</ul>\n<p>（2）创建词法环境组件</p>\n<ul>\n<li>词法环境是一种有<strong>标识符——变量映射</strong>的数据结构，标识符是指变量/函数名，变量是对实际对象或原始数据的引用。</li>\n<li>词法环境的内部有两个组件：<strong>加粗样式</strong>：环境记录器:用来储存变量个函数声明的实际位置<strong>外部环境的引用</strong>：可以访问父级作用域</li>\n</ul>\n<p>（3）创建变量环境组件</p>\n<ul>\n<li>变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。</li>\n</ul>\n<p><strong>2）执行阶段</strong> 此阶段会完成对变量的分配，最后执行完代码。</p>\n<p><strong>简单来说执行上下文就是指：</strong></p>\n<p>在执行一点JS代码之前，需要先解析代码。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。这一步执行完了，才开始正式的执行程序。</p>\n<p>在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。</p>\n<ul>\n<li>全局上下文：变量定义，函数声明</li>\n<li>函数上下文：变量定义，函数声明，<code>this</code>，<code>arguments</code></li>\n</ul>"},{"title":"react复习","keywords":"react复习","description":"react复习","top_img":"https://raw.githubusercontent.com/why862555625/images/main/images/77.jpg","sticky":"数值越大越靠前","cover":"https://raw.githubusercontent.com/why862555625/images/main/images/77.jpg","comments":1,"abbrlink":"667b4089","date":"2023-05-26T07:57:36.000Z","updated":"2023-05-26T07:57:36.000Z","_content":"\n\n\n摘要\n\n<!-- more -->\n","source":"_posts/js/react复习.md","raw":"---\ntitle: react复习\ntags:\n  - JS\n  - 前端\ncategories: 面试\nkeywords: react复习\ndescription: react复习\ntop_img: 'https://raw.githubusercontent.com/why862555625/images/main/images/77.jpg'\nsticky: 数值越大越靠前\ncover: 'https://raw.githubusercontent.com/why862555625/images/main/images/77.jpg'\ncomments: false评论\nabbrlink: 667b4089\ndate: 2023-05-26 15:57:36\nupdated: 2023-05-26 15:57:36\n---\n\n\n\n摘要\n\n<!-- more -->\n","slug":"js/react复习","published":1,"layout":"post","photos":[],"link":"","_id":"clipg0871000hrgwh05km1gem","content":"<p>摘要</p>\n<span id=\"more\"></span>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"excerpt":"<p>摘要</p>","more":""},{"title":"前端安全问题","keywords":"JS,前端","description":"前端安全问题","top_img":"https://raw.githubusercontent.com/why862555625/images/main/images/00.jpg","sticky":"数值越大越靠前","cover":"https://raw.githubusercontent.com/why862555625/images/main/images/00.jpg","comments":1,"abbrlink":"ab232981","date":"2023-05-26T07:55:26.000Z","updated":"2023-05-26T07:55:26.000Z","_content":"\n\n\n摘要\n\n<!-- more -->\n","source":"_posts/js/前端安全问题.md","raw":"---\ntitle: 前端安全问题\ntags:\n  - JS\n  - 前端\ncategories: 面试\nkeywords: 'JS,前端'\ndescription: 前端安全问题\ntop_img: \"https://raw.githubusercontent.com/why862555625/images/main/images/00.jpg\"\nsticky: 数值越大越靠前\ncover: 'https://raw.githubusercontent.com/why862555625/images/main/images/00.jpg'\ncomments: false评论\nabbrlink: ab232981\ndate: 2023-05-26 15:55:26\nupdated: 2023-05-26 15:55:26\n---\n\n\n\n摘要\n\n<!-- more -->\n","slug":"js/前端安全问题","published":1,"layout":"post","photos":[],"link":"","_id":"clipg0872000mrgwhck06fane","content":"<p>摘要</p>\n<span id=\"more\"></span>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"excerpt":"<p>摘要</p>","more":""},{"title":"前端工程化","keywords":"前端工程化","description":"前端工程化","top_img":"https://raw.githubusercontent.com/why862555625/images/main/images/00.jpg","sticky":"数值越大越靠前","cover":"https://raw.githubusercontent.com/why862555625/images/main/images/00.jpg","comments":1,"abbrlink":"7db00131","date":"2023-05-26T07:59:17.000Z","updated":"2023-05-26T07:59:17.000Z","_content":"前端工程化\n<!-- more -->\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/js/前端工程化.md","raw":"---\ntitle: 前端工程化\ntags:\n  - 前端\ncategories: 面试\nkeywords: 前端工程化\ndescription: 前端工程化\ntop_img: 'https://raw.githubusercontent.com/why862555625/images/main/images/00.jpg'\nsticky: 数值越大越靠前\ncover: 'https://raw.githubusercontent.com/why862555625/images/main/images/00.jpg'\ncomments: false评论\nabbrlink: 7db00131\ndate: 2023-05-26 15:59:17\nupdated: 2023-05-26 15:59:17\n---\n前端工程化\n<!-- more -->\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"js/前端工程化","published":1,"layout":"post","photos":[],"link":"","_id":"clipg0873000prgwhgb9z4ap9","content":"<p>前端工程化</p>\n<span id=\"more\"></span>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"excerpt":"<p>前端工程化</p>","more":""},{"title":"js面试手写","keywords":"面试，JS","description":"js面试手写","top_img":"https://raw.githubusercontent.com/why862555625/images/main/images/99.jpg","sticky":"数值越大越靠前","cover":"https://raw.githubusercontent.com/why862555625/images/main/images/99.jpg","comments":1,"abbrlink":"a09ef191","date":"2023-06-07T05:58:38.000Z","updated":"2023-06-07T05:58:38.000Z","_content":"\njs面试手写\n\n<!-- more -->\n\n## 一、JavaScript 基础\n\n![image-20230607140248211](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230607140248211.png)\n\n### 1. 手写 Object.create\n\n思路：将传入的对象作为原型\n\n```javascript\nfunction create(obj) {\n  function F() {}\n  F.prototype = obj\n  return new F()\n}\n```\n\n### 2. 手写 instanceof 方法\n\ninstanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n\n实现步骤：\n\n1. 首先获取类型的原型\n2. 然后获得对象的原型\n3. 然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为 `null`，因为原型链最终为 `null`\n\n具体实现：\n\n```javascript\nfunction myInstanceof(left, right) {\n  let proto = Object.getPrototypeOf(left), // 获取对象的原型\n      prototype = right.prototype; // 获取构造函数的 prototype 对象\n\n  // 判断构造函数的 prototype 对象是否在对象的原型链上\n  while (true) {\n    if (!proto) return false;\n    if (proto === prototype) return true;\n\n    proto = Object.getPrototypeOf(proto);\n  }\n}\n```\n\n### 3. 手写 new 操作符\n\n在调用 `new` 的过程中会发生以上四件事情：\n\n（1）首先创建了一个新的空对象\n\n（2）设置原型，将对象的原型设置为函数的 prototype 对象。\n\n（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）\n\n（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\n\n```javascript\nfunction objectFactory() {\n  let newObject = null;\n  let constructor = Array.prototype.shift.call(arguments);\n  let result = null;\n  // 判断参数是否是一个函数\n  if (typeof constructor !== \"function\") {\n    console.error(\"type error\");\n    return;\n  }\n  // 新建一个空对象，对象的原型为构造函数的 prototype 对象\n  newObject = Object.create(constructor.prototype);\n  // 将 this 指向新建对象，并执行函数\n  result = constructor.apply(newObject, arguments);\n  // 判断返回对象\n  let flag = result && (typeof result === \"object\" || typeof result === \"function\");\n  // 判断返回结果\n  return flag ? result : newObject;\n}\n// 使用方法\nobjectFactory(构造函数, 初始化参数);\n```\n\n### 4. 手写 Promise\n\n#### 常见 Promise 面试题\n\n首先，我们以常见的 Promise 面试题为切入点，我们看看面试官们都爱考什么：\n\n1. Promise 解决了什么问题？\n2. Promise 的业界实现都有哪些？\n3. Promise 常用的 API 有哪些？\n4. 能不能手写一个符合 Promise/A+ 规范的 Promise?\n5. Promise 在事件循环中的执行过程是怎样的？\n6. Promise 有什么缺陷，可以如何解决？\n\n这几个问题由浅入深，我们一个一个来看：\n\n#### Promise 出现的原因 & 业界实现\n\n在 Promise 出现以前，在我们处理多个异步请求嵌套时，代码往往是这样的。。。\n\n```js\nlet fs = require('fs')\n\nfs.readFile('./name.txt','utf8',function(err,data){\n  fs.readFile(data, 'utf8',function(err,data){\n    fs.readFile(data,'utf8',function(err,data){\n      console.log(data);\n    })\n  })\n})\n```\n\n为了拿到回调的结果，我们必须一层一层的嵌套，可以说是相当恶心了。而且基本上我们还要对每次请求的结果进行一系列的处理，使得代码变的更加难以阅读和难以维护，这就是传说中臭名昭著的**回调地狱**～产生**回调地狱**的原因归结起来有两点：\n\n1.**嵌套调用**，第一个函数的输出往往是第二个函数的输入；\n\n2.**处理多个异步请求并发**，开发时往往需要同步请求最终的结果。\n\n原因分析出来后，那么问题的解决思路就很清晰了：\n\n1.**消灭嵌套调用**：通过 Promise 的链式调用可以解决；\n\n2.**合并多个任务的请求结果**：使用 Promise.all 获取合并多个任务的错误处理。\n\nPromise 正是用一种更加友好的代码组织方式，解决了异步嵌套的问题。\n\n我们来看看上面的例子用 Promise 实现是什么样的：\n\n```js\nlet fs = require('fs')\n\nfunction read(filename) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(filename, 'utf8', (err, data) => {\n      if (err) reject(err);\n      resolve(data);\n    })\n  })\n}\n\nread('./name.txt').then((data)=>{\n  return read(data) \n}).then((data)=>{\n  return read(data)  \n}).then((data)=>{\n    console.log(data);\n},err=>{\n    console.log(err);\n})\n```\n\n臃肿的嵌套变得线性多了有木有？没错，他就是我们的异步神器 Promise！\n\n让我们再次回归刚才的问题，**Promise 为我们解决了什么问题？**在传统的异步编程中，如果异步之间存在依赖关系，就需要通过层层嵌套回调的方式满足这种依赖，如果嵌套层数过多，可读性和可以维护性都会变得很差，产生所谓的“回调地狱”，而 Promise 将嵌套调用改为链式调用，增加了可阅读性和可维护性。也就是说，Promise 解决的是异步编码风格的问题。**那 Promise 的业界实现都有哪些呢？**业界比较著名的实现 Promise 的类库有 bluebird、Q、ES6-Promise。\n\n#### 从零开始，手写 Promise\n\n##### Promise/A+\n\n我们想要手写一个 Promise，就要遵循 [Promise/A+](https://link.zhihu.com/?target=https%3A//promisesaplus.com/) 规范，业界所有 Promise 的类库都遵循这个规范。\n\n其实 Promise/A+ 规范对如何实现一个符合标准的 Promise 类库已经阐述的很详细了。每一行代码在 Promise/A+ 规范中都有迹可循，所以在下面的实现的过程中，我会尽可能的将代码和 Promise/A+ 规范一一对应起来。\n\n下面开始步入正题啦～\n\n#### 基础版 Promise\n\n我们先来回顾下最简单的 Promise 使用方式：\n\n```js\nconst p1 = new Promise((resolve, reject) => {\n  console.log('create a promise');\n  resolve('成功了');\n})\n\nconsole.log(\"after new promise\");\n\nconst p2 = p1.then(data => {\n  console.log(data)\n  throw new Error('失败了')\n})\n\nconst p3 = p2.then(data => {\n  console.log('success', data)\n}, err => {\n  console.log('faild', err)\n})\n```\n\n控制台输出：\n\n```js\n\"create a promise\"\n\"after new promise\"\n\"成功了\"\n\"faild Error: 失败了\"\n```\n\n- 首先我们在调用 Promise 时，会返回一个 Promise 对象。\n- 构建 Promise 对象时，需要传入一个 **executor 函数**，Promise 的主要业务流程都在 executor 函数中执行。\n- 如果运行在 excutor 函数中的业务执行成功了，会调用 resolve 函数；如果执行失败了，则调用 reject 函数。\n- Promise 的状态不可逆，同时调用 resolve 函数和 reject 函数，默认会采取第一次调用的结果。\n\n以上简单介绍了 Promise 的一些主要的使用方法，结合 [Promise/A+](https://link.zhihu.com/?target=https%3A//promisesaplus.com/) 规范，我们可以分析出 Promise 的基本特征：\n\n1. promise 有三个状态：`pending`，`fulfilled`，or `rejected`；「规范 Promise/A+ 2.1」\n2. `new promise`时， 需要传递一个`executor()`执行器，执行器立即执行；\n3. `executor`接受两个参数，分别是`resolve`和`reject`；\n4. promise 的默认状态是 `pending`；\n5. promise 有一个`value`保存成功状态的值，可以是`undefined/thenable/promise`；「规范 Promise/A+ 1.3」\n6. promise 有一个`reason`保存失败状态的值；「规范 Promise/A+ 1.5」\n7. promise 只能从`pending`到`rejected`, 或者从`pending`到`fulfilled`，状态一旦确认，就不会再改变；\n8. promise 必须有一个`then`方法，then 接收两个参数，分别是 promise 成功的回调 onFulfilled, 和 promise 失败的回调 onRejected；「规范 Promise/A+ 2.2」\n9. 如果调用 then 时，promise 已经成功，则执行`onFulfilled`，参数是`promise`的`value`；\n10. 如果调用 then 时，promise 已经失败，那么执行`onRejected`, 参数是`promise`的`reason`；\n11. 如果 then 中抛出了异常，那么就会把这个异常作为参数，传递给下一个 then 的失败的回调`onRejected`；\n\n按照上面的特征，我们试着勾勒下 Promise 的形状：\n\n```js\n// 三个状态：PENDING、FULFILLED、REJECTED\nconst PENDING = 'PENDING';\nconst FULFILLED = 'FULFILLED';\nconst REJECTED = 'REJECTED';\n\nclass Promise {\n  constructor(executor) {\n    // 默认状态为 PENDING\n    this.status = PENDING;\n    // 存放成功状态的值，默认为 undefined\n    this.value = undefined;\n    // 存放失败状态的值，默认为 undefined\n    this.reason = undefined;\n\n    // 调用此方法就是成功\n    let resolve = (value) => {\n      // 状态为 PENDING 时才可以更新状态，防止 executor 中调用了两次 resovle/reject 方法\n      if(this.status ===  PENDING) {\n        this.status = FULFILLED;\n        this.value = value;\n      }\n    } \n\n    // 调用此方法就是失败\n    let reject = (reason) => {\n      // 状态为 PENDING 时才可以更新状态，防止 executor 中调用了两次 resovle/reject 方法\n      if(this.status ===  PENDING) {\n        this.status = REJECTED;\n        this.reason = reason;\n      }\n    }\n\n    try {\n      // 立即执行，将 resolve 和 reject 函数传给使用者  \n      executor(resolve,reject)\n    } catch (error) {\n      // 发生异常时执行失败逻辑\n      reject(error)\n    }\n  }\n\n  // 包含一个 then 方法，并接收两个参数 onFulfilled、onRejected\n  then(onFulfilled, onRejected) {\n    if (this.status === FULFILLED) {\n      onFulfilled(this.value)\n    }\n\n    if (this.status === REJECTED) {\n      onRejected(this.reason)\n    }\n  }\n}\n```\n\n写完代码我们可以测试一下：\n\n```js\nconst promise = new Promise((resolve, reject) => {\n  resolve('成功');\n}).then(\n  (data) => {\n    console.log('success', data)\n  },\n  (err) => {\n    console.log('faild', err)\n  }\n)\n```\n\n控制台输出：\n\n```js\n\"success 成功\"\n```\n\n现在我们已经实现了一个基础版的 Promise，但是还不要高兴的太早噢，这里我们只处理了同步操作的 promise。如果在 `executor()`中传入一个异步操作的话呢，我们试一下：\n\n```js\nconst promise = new Promise((resolve, reject) => {\n  // 传入一个异步操作\n  setTimeout(() => {\n    resolve('成功');\n  },1000);\n}).then(\n  (data) => {\n    console.log('success', data)\n  },\n  (err) => {\n    console.log('faild', err)\n  }\n)\n```\n\n执行测试脚本后发现，promise 没有任何返回。\n\n因为 promise 调用 then 方法时，当前的 promise 并没有成功，一直处于 pending 状态。所以如果当调用 then 方法时，当前状态是 pending，我们需要先将成功和失败的回调分别存放起来，在`executor()`的异步任务被执行时，触发 resolve 或 reject，依次调用成功或失败的回调。\n\n结合这个思路，我们优化一下代码：\n\n```js\nconst PENDING = 'PENDING';\nconst FULFILLED = 'FULFILLED';\nconst REJECTED = 'REJECTED';\n\nclass Promise {\n  constructor(executor) {\n    this.status = PENDING;\n    this.value = undefined;\n    this.reason = undefined;\n    // 存放成功的回调\n    this.onResolvedCallbacks = [];\n    // 存放失败的回调\n    this.onRejectedCallbacks= [];\n\n    let resolve = (value) => {\n      if(this.status ===  PENDING) {\n        this.status = FULFILLED;\n        this.value = value;\n        // 依次将对应的函数执行\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    } \n\n    let reject = (reason) => {\n      if(this.status ===  PENDING) {\n        this.status = REJECTED;\n        this.reason = reason;\n        // 依次将对应的函数执行\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    }\n\n    try {\n      executor(resolve,reject)\n    } catch (error) {\n      reject(error)\n    }\n  }\n\n  then(onFulfilled, onRejected) {\n    if (this.status === FULFILLED) {\n      onFulfilled(this.value)\n    }\n\n    if (this.status === REJECTED) {\n      onRejected(this.reason)\n    }\n\n    if (this.status === PENDING) {\n      // 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行\n      this.onResolvedCallbacks.push(() => {\n        onFulfilled(this.value)\n      });\n\n      // 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行\n      this.onRejectedCallbacks.push(()=> {\n        onRejected(this.reason);\n      })\n    }\n  }\n}\n```\n\n测试一下：\n\n```js\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('成功');\n  },1000);\n}).then(\n  (data) => {\n    console.log('success', data)\n  },\n  (err) => {\n    console.log('faild', err)\n  }\n)\n```\n\n控制台等待 `1s` 后输出：\n\n```js\n\"success 成功\"\n```\n\nok！大功告成，异步问题已经解决了！\n\n熟悉设计模式的同学，应该意识到了这其实是一个**发布订阅模式**，这种`收集依赖 -> 触发通知 -> 取出依赖执行`的方式，被广泛运用于发布订阅模式的实现。\n\n#### then 的链式调用&值穿透特性\n\n我们都知道，promise 的优势在于可以链式调用。在我们使用 Promise 的时候，当 then 函数中 return 了一个值，不管是什么值，我们都能在下一个 then 中获取到，这就是所谓的**then 的链式调用**。而且，当我们不在 then 中放入参数，例：`promise.then().then()`，那么其后面的 then 依旧可以得到之前 then 返回的值，这就是所谓的**值的穿透**。那具体如何实现呢？简单思考一下，如果每次调用 then 的时候，我们都重新创建一个 promise 对象，并把上一个 then 的返回结果传给这个新的 promise 的 then 方法，不就可以一直 then 下去了么？那我们来试着实现一下。这也是手写 Promise 源码的重中之重，所以，打起精神来，重头戏来咯！\n\n有了上面的想法，我们再结合 [Promise/A+](https://link.zhihu.com/?target=https%3A//promisesaplus.com/) 规范梳理一下思路：\n\n1. then 的参数 `onFulfilled` 和 `onRejected` 可以缺省，如果 `onFulfilled` 或者 `onRejected`不是函数，将其忽略，且依旧可以在下面的 then 中获取到之前返回的值；「规范 Promise/A+ 2.2.1、2.2.1.1、2.2.1.2」\n2. promise 可以 then 多次，每次执行完 promise.then 方法后返回的都是一个“新的promise\"；「规范 Promise/A+ 2.2.7」\n3. 如果 then 的返回值 x 是一个普通值，那么就会把这个结果作为参数，传递给下一个 then 的成功的回调中；\n4. 如果 then 中抛出了异常，那么就会把这个异常作为参数，传递给下一个 then 的失败的回调中；「规范 Promise/A+ 2.2.7.2」\n5. 如果 then 的返回值 x 是一个 promise，那么会等这个 promise 执行完，promise 如果成功，就走下一个 then 的成功；如果失败，就走下一个 then 的失败；如果抛出异常，就走下一个 then 的失败；「规范 Promise/A+ 2.2.7.3、2.2.7.4」\n6. 如果 then 的返回值 x 和 promise 是同一个引用对象，造成循环引用，则抛出异常，把异常传递给下一个 then 的失败的回调中；「规范 Promise/A+ 2.3.1」\n7. 如果 then 的返回值 x 是一个 promise，且 x 同时调用 resolve 函数和 reject 函数，则第一次调用优先，其他所有调用被忽略；「规范 Promise/A+ 2.3.3.3.3」\n\n我们将代码补充完整：\n\n```js\nconst PENDING = 'PENDING';\nconst FULFILLED = 'FULFILLED';\nconst REJECTED = 'REJECTED';\n\nconst resolvePromise = (promise2, x, resolve, reject) => {\n  // 自己等待自己完成是错误的实现，用一个类型错误，结束掉 promise  Promise/A+ 2.3.1\n  if (promise2 === x) { \n    return reject(new TypeError('Chaining cycle detected for promise #<Promise>'))\n  }\n  // Promise/A+ 2.3.3.3.3 只能调用一次\n  let called;\n  // 后续的条件要严格判断 保证代码能和别的库一起使用\n  if ((typeof x === 'object' && x != null) || typeof x === 'function') { \n    try {\n      // 为了判断 resolve 过的就不用再 reject 了（比如 reject 和 resolve 同时调用的时候）  Promise/A+ 2.3.3.1\n      let then = x.then;\n      if (typeof then === 'function') { \n        // 不要写成 x.then，直接 then.call 就可以了 因为 x.then 会再次取值，Object.defineProperty  Promise/A+ 2.3.3.3\n        then.call(x, y => { // 根据 promise 的状态决定是成功还是失败\n          if (called) return;\n          called = true;\n          // 递归解析的过程（因为可能 promise 中还有 promise） Promise/A+ 2.3.3.3.1\n          resolvePromise(promise2, y, resolve, reject); \n        }, r => {\n          // 只要失败就失败 Promise/A+ 2.3.3.3.2\n          if (called) return;\n          called = true;\n          reject(r);\n        });\n      } else {\n        // 如果 x.then 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.3.4\n        resolve(x);\n      }\n    } catch (e) {\n      // Promise/A+ 2.3.3.2\n      if (called) return;\n      called = true;\n      reject(e)\n    }\n  } else {\n    // 如果 x 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.4  \n    resolve(x)\n  }\n}\n\nclass Promise {\n  constructor(executor) {\n    this.status = PENDING;\n    this.value = undefined;\n    this.reason = undefined;\n    this.onResolvedCallbacks = [];\n    this.onRejectedCallbacks= [];\n\n    let resolve = (value) => {\n      if(this.status ===  PENDING) {\n        this.status = FULFILLED;\n        this.value = value;\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    } \n\n    let reject = (reason) => {\n      if(this.status ===  PENDING) {\n        this.status = REJECTED;\n        this.reason = reason;\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    }\n\n    try {\n      executor(resolve,reject)\n    } catch (error) {\n      reject(error)\n    }\n  }\n\n  then(onFulfilled, onRejected) {\n    //解决 onFufilled，onRejected 没有传值的问题\n    //Promise/A+ 2.2.1 / Promise/A+ 2.2.5 / Promise/A+ 2.2.7.3 / Promise/A+ 2.2.7.4\n    onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : v => v;\n    //因为错误的值要让后面访问到，所以这里也要跑出个错误，不然会在之后 then 的 resolve 中捕获\n    onRejected = typeof onRejected === 'function' ? onRejected : err => { throw err };\n    // 每次调用 then 都返回一个新的 promise  Promise/A+ 2.2.7\n    let promise2 = new Promise((resolve, reject) => {\n      if (this.status === FULFILLED) {\n        //Promise/A+ 2.2.2\n        //Promise/A+ 2.2.4 --- setTimeout\n        setTimeout(() => {\n          try {\n            //Promise/A+ 2.2.7.1\n            let x = onFulfilled(this.value);\n            // x可能是一个proimise\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            //Promise/A+ 2.2.7.2\n            reject(e)\n          }\n        }, 0);\n      }\n\n      if (this.status === REJECTED) {\n        //Promise/A+ 2.2.3\n        setTimeout(() => {\n          try {\n            let x = onRejected(this.reason);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e)\n          }\n        }, 0);\n      }\n\n      if (this.status === PENDING) {\n        this.onResolvedCallbacks.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onFulfilled(this.value);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (e) {\n              reject(e)\n            }\n          }, 0);\n        });\n\n        this.onRejectedCallbacks.push(()=> {\n          setTimeout(() => {\n            try {\n              let x = onRejected(this.reason);\n              resolvePromise(promise2, x, resolve, reject)\n            } catch (e) {\n              reject(e)\n            }\n          }, 0);\n        });\n      }\n    });\n\n    return promise2;\n  }\n}\n```\n\n测试一下：\n\n```js\nconst promise = new Promise((resolve, reject) => {\n  reject('失败');\n}).then().then().then(data=>{\n  console.log(data);\n},err=>{\n  console.log('err',err);\n})\n```\n\n控制台输出：\n\n```js\n\"失败 err\"\n```\n\n至此，我们已经完成了 promise 最关键的部分：then 的链式调用和值的穿透。搞清楚了 then 的链式调用和值的穿透，你也就搞清楚了 Promise。\n\n#### 测试 Promise 是否符合规范\n\nPromise/A+规范提供了一个专门的测试脚本，可以测试所编写的代码是否符合Promise/A+的规范。\n\n首先，在 promise 实现的代码中，增加以下代码:\n\n```js\nPromise.defer = Promise.deferred = function () {\n  let dfd = {};\n  dfd.promise = new Promise((resolve,reject)=>{\n      dfd.resolve = resolve;\n      dfd.reject = reject;\n  })\n  return dfd;\n}\n```\n\n安装测试脚本:\n\n```js\nnpm install -g promises-aplus-tests\n```\n\n如果当前的 promise 源码的文件名为 promise.js\n\n那么在对应的目录执行以下命令:\n\n```js\npromises-aplus-tests promise.js\n```\n\npromises-aplus-tests 中共有 872 条测试用例。以上代码，可以完美通过所有用例。\n\n**感谢小伙伴的提醒，由于文章中使用 setTimeout 实现 promise 的异步，会对大家造成误解。所以这里添加一些标注:**\n\n由于原生的 Promise 是V8引擎提供的微任务，我们无法还原V8引擎的实现，所以这里使用 setTimeout 模拟异步，所以原生的是微任务，这里是宏任务。\n\nPromise A+ 规范3.1 中也提到了：这可以通过“宏任务”机制（例如setTimeout或setImmediate）或“微任务”机制（例如MutatonObserver或）来实现process.nextTick。\n\n如果你想实现 promise 的微任务，可以 mutationObserver 替代 seiTimeout 来实现微任务。\n\n有小伙伴说可以使用 queueMicrotask 实现微任务，我也查阅了一些资料，是可以的。不过 queueMicrotask 兼容性不是很好，IE 下完全不支持。据我所知 queueMicrotask 的 polyfill 是基于 promise 实现的，如果不支持 promise 会转成 setTimeout。\n\n总的来说，queueMicrotask 和 mutationObserver 都可以实现微任务机制，不过更建议有执念的小伙伴用 mutationObserver 实现一下，没有执念的小伙伴了解 promise 的微任务机制就好了～\n\n### Promise 的 API\n\n虽然上述的 promise 源码已经符合 Promise/A+ 的规范，但是原生的 Promise 还提供了一些其他方法，如:\n\n- Promise.resolve()\n- Promise.reject()\n- Promise.prototype.catch()\n- Promise.prototype.finally()\n- Promise.all()\n- Promise.race(）\n\n下面具体说一下每个方法的实现:\n\n#### Promise.resolve\n\n默认产生一个成功的 promise。\n\n```js\nstatic resolve(data){\n  return new Promise((resolve,reject)=>{\n    resolve(data);\n  })\n}\n```\n\n这里需要注意的是，**promise.resolve 是具备等待功能的**。如果参数是 promise 会等待这个 promise 解析完毕，在向下执行，所以这里需要在 resolve 方法中做一个小小的处理：\n\n```js\nlet resolve = (value) => {\n  // ======新增逻辑======\n  // 如果 value 是一个promise，那我们的库中应该也要实现一个递归解析\n  if(value instanceof Promise){\n      // 递归解析 \n      return value.then(resolve,reject)\n  }\n  // ===================\n  if(this.status ===  PENDING) {\n    this.status = FULFILLED;\n    this.value = value;\n    this.onResolvedCallbacks.forEach(fn=>fn());\n  }\n}\n```\n\n测试一下：\n\n```js\nPromise.resolve(new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('ok');\n  }, 3000);\n})).then(data=>{\n  console.log(data,'success')\n}).catch(err=>{\n  console.log(err,'error')\n})\n```\n\n控制台等待 `3s` 后输出：\n\n```js\n\"ok success\"\n```\n\n#### Promise.reject\n\n默认产生一个失败的 promise，Promise.reject 是直接将值变成错误结果。\n\n```js\nstatic reject(reason){\n  return new Promise((resolve,reject)=>{\n    reject(reason);\n  })\n}\n```\n\n#### Promise.prototype.catch\n\nPromise.prototype.catch 用来捕获 promise 的异常，**就相当于一个没有成功的 then**。\n\n```js\nPromise.prototype.catch = function(errCallback){\n  return this.then(null,errCallback)\n}\n```\n\n#### Promise.prototype.finally\n\nfinally 表示不是最终的意思，而是无论如何都会执行的意思。 如果返回一个 promise 会等待这个 promise 也执行完毕。如果返回的是成功的 promise，会采用上一次的结果；如果返回的是失败的 promise，会用这个失败的结果，传到 catch 中。\n\n```js\nPromise.prototype.finally = function(callback) {\n  return this.then((value)=>{\n    return Promise.resolve(callback()).then(()=>value)\n  },(reason)=>{\n    return Promise.resolve(callback()).then(()=>{throw reason})\n  })  \n}\n```\n\n测试一下：\n\n```js\nPromise.resolve(456).finally(()=>{\n  return new Promise((resolve,reject)=>{\n    setTimeout(() => {\n        resolve(123)\n    }, 3000);\n  })\n}).then(data=>{\n  console.log(data,'success')\n}).catch(err=>{\n  console.log(err,'error')\n})\n```\n\n控制台等待 `3s` 后输出：\n\n```js\n\"456 success\"\n```\n\n#### Promise.all\n\npromise.all 是解决并发问题的，多个异步并发获取最终的结果（如果有一个失败则失败）。\n\n```js\nPromise.all = function(values) {\n  if (!Array.isArray(values)) {\n    const type = typeof values;\n    return new TypeError(`TypeError: ${type} ${values} is not iterable`)\n  }\n  return new Promise((resolve, reject) => {\n    let resultArr = [];\n    let orderIndex = 0;\n    const processResultByKey = (value, index) => {\n      resultArr[index] = value;\n      if (++orderIndex === values.length) {\n          resolve(resultArr)\n      }\n    }\n    for (let i = 0; i < values.length; i++) {\n      let value = values[i];\n      if (value && typeof value.then === 'function') {\n        value.then((value) => {\n          processResultByKey(value, i);\n        }, reject);\n      } else {\n        processResultByKey(value, i);\n      }\n    }\n  });\n}\n```\n\n测试一下：\n\n```js\nlet p1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('ok1');\n  }, 1000);\n})\n\nlet p2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    reject('ok2');\n  }, 1000);\n})\n\nPromise.all([1,2,3,p1,p2]).then(data => {\n  console.log('resolve', data);\n}, err => {\n  console.log('reject', err);\n})\n```\n\n控制台等待 `1s` 后输出：\n\n```js\n\"resolve [ 1, 2, 3, 'ok1', 'ok2' ]\"\n```\n\n#### Promise.race\n\nPromise.race 用来处理多个请求，采用最快的（谁先完成用谁的）。\n\n```js\nPromise.race = function(promises) {\n  return new Promise((resolve, reject) => {\n    // 一起执行就是for循环\n    for (let i = 0; i < promises.length; i++) {\n      let val = promises[i];\n      if (val && typeof val.then === 'function') {\n        val.then(resolve, reject);\n      } else { // 普通值\n        resolve(val)\n      }\n    }\n  });\n}\n```\n\n特别需要注意的是：因为**Promise 是没有中断方法的**，xhr.abort()、ajax 有自己的中断方法，axios 是基于 ajax 实现的；fetch 基于 promise，所以他的请求是无法中断的。\n\n这也是 promise 存在的缺陷，我们可以使用 race 来自己封装中断方法：\n\n```js\nfunction wrap(promise) {\n  // 在这里包装一个 promise，可以控制原来的promise是成功还是失败\n  let abort;\n  let newPromise = new Promise((resolve, reject) => { // defer 方法\n      abort = reject;\n  });\n  let p = Promise.race([promise, newPromise]); // 任何一个先成功或者失败 就可以获取到结果\n  p.abort = abort;\n  return p;\n}\n\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => { // 模拟的接口调用 ajax 肯定有超时设置\n      resolve('成功');\n  }, 1000);\n});\n\nlet newPromise = wrap(promise);\n\nsetTimeout(() => {\n  // 超过3秒 就算超时 应该让 proimise 走到失败态\n  newPromise.abort('超时了');\n}, 3000);\n\nnewPromise.then((data => {\n    console.log('成功的结果' + data)\n})).catch(e => {\n    console.log('失败的结果' + e)\n})\n```\n\n控制台等待 `1s` 后输出：\n\n```js\n\"成功的结果成功\"\n```\n\n#### promisify\n\npromisify 是把一个 node 中的 api 转换成 promise 的写法。 在 node 版本 12.18 以上，已经支持了原生的 promisify 方法：`const fs = require('fs').promises`。\n\n```js\nconst promisify = (fn) => { // 典型的高阶函数 参数是函数 返回值是函数 \n  return (...args)=>{\n    return new Promise((resolve,reject)=>{\n      fn(...args,function (err,data) { // node中的回调函数的参数 第一个永远是error\n        if(err) return reject(err);\n        resolve(data);\n      })\n    });\n  }\n}\n```\n\n如果想要把 node 中所有的 api 都转换成 promise 的写法呢：\n\n```js\nconst promisifyAll = (target) =>{\n  Reflect.ownKeys(target).forEach(key=>{\n    if(typeof target[key] === 'function'){\n      // 默认会将原有的方法 全部增加一个 Async 后缀 变成 promise 写法\n      target[key+'Async'] = promisify(target[key]);\n    }\n  });\n  return target;\n}\n```\n\n### 5. 手写防抖函数\n\n函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。\n\n```javascript\n// 函数防抖的实现\nfunction debounce(fn, wait) {\n  let timer = null;\n\n  return function() {\n    let context = this,\n        args = arguments;\n\n    // 如果此时存在定时器的话，则取消之前的定时器重新记时\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n\n    // 设置定时器，使事件间隔指定事件后执行\n    timer = setTimeout(() => {\n      fn.apply(context, args);\n    }, wait);\n  };\n}\n```\n\n### 6. 手写节流函数\n\n函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。\n\n```javascript\n// 函数节流的实现;\nfunction throttle(fn, delay) {\n  let curTime = Date.now();\n\n  return function() {\n    let context = this,\n        args = arguments,\n        nowTime = Date.now();\n\n    // 如果两次时间间隔超过了指定时间，则执行函数。\n    if (nowTime - curTime >= delay) {\n      curTime = Date.now();\n      return fn.apply(context, args);\n    }\n  };\n}\n```\n\n### 7. 手写类型判断函数\n\n```javascript\nfunction getType(value) {\n  // 判断数据是 null 的情况\n  if (value === null) {\n    return value + \"\";\n  }\n  // 判断数据是引用类型的情况\n  if (typeof value === \"object\") {\n    let valueClass = Object.prototype.toString.call(value),\n      type = valueClass.split(\" \")[1].split(\"\");\n    type.pop();\n    return type.join(\"\").toLowerCase();\n  } else {\n    // 判断数据是基本数据类型的情况和函数的情况\n    return typeof value;\n  }\n}\n```\n\n### 8. 手写 call 函数\n\ncall 函数的实现步骤：\n\n1. 判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n2. 判断传入上下文对象是否存在，如果不存在，则设置为 window 。\n3. 处理传入的参数，截取第一个参数后的所有参数。\n4. 将函数作为上下文对象的一个属性。\n5. 使用上下文对象来调用这个方法，并保存返回结果。\n6. 删除刚才新增的属性。\n7. 返回结果。\n\n```javascript\n// call函数实现\nFunction.prototype.myCall = function(context) {\n  // 判断调用对象\n  if (typeof this !== \"function\") {\n    console.error(\"type error\");\n  }\n  // 获取参数\n  let args = [...arguments].slice(1),\n      result = null;\n  // 判断 context 是否传入，如果未传入则设置为 window\n  context = context || window;\n  // 将调用函数设为对象的方法\n  context.fn = this;\n  // 调用函数\n  result = context.fn(...args);\n  // 将属性删除\n  delete context.fn;\n  return result;\n};\n```\n\n### 9. 手写 apply 函数\n\napply 函数的实现步骤：\n\n1. 判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n2. 判断传入上下文对象是否存在，如果不存在，则设置为 window 。\n3. 将函数作为上下文对象的一个属性。\n4. 判断参数值是否传入\n5. 使用上下文对象来调用这个方法，并保存返回结果。\n6. 删除刚才新增的属性\n7. 返回结果\n\n```javascript\n// apply 函数实现\nFunction.prototype.myApply = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== \"function\") {\n    throw new TypeError(\"Error\");\n  }\n  let result = null;\n  // 判断 context 是否存在，如果未传入则为 window\n  context = context || window;\n  // 将函数设为对象的方法\n  context.fn = this;\n  // 调用方法\n  if (arguments[1]) {\n    result = context.fn(...arguments[1]);\n  } else {\n    result = context.fn();\n  }\n  // 将属性删除\n  delete context.fn;\n  return result;\n};\n```\n\n### 10. 手写 bind 函数\n\nbind 函数的实现步骤：\n\n1. 判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n2. 保存当前函数的引用，获取其余传入参数值。\n3. 创建一个函数返回\n4. 函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。\n\n```javascript\n// bind 函数实现\nFunction.prototype.myBind = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== \"function\") {\n    throw new TypeError(\"Error\");\n  }\n  // 获取参数\n  var args = [...arguments].slice(1),\n      fn = this;\n  return function Fn() {\n    // 根据调用方式，传入不同绑定值\n    return fn.apply(\n      this instanceof Fn ? this : context,\n      args.concat(...arguments)\n    );\n  };\n};\n```\n\n### 11. 函数柯里化的实现\n\n函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。\n\n```javascript\nfunction curry(fn, args) {\n  // 获取函数需要的参数长度\n  let length = fn.length;\n\n  args = args || [];\n\n  return function() {\n    let subArgs = args.slice(0);\n\n    // 拼接得到现有的所有参数\n    for (let i = 0; i < arguments.length; i++) {\n      subArgs.push(arguments[i]);\n    }\n\n    // 判断参数的长度是否已经满足函数所需参数的长度\n    if (subArgs.length >= length) {\n      // 如果满足，执行函数\n      return fn.apply(this, subArgs);\n    } else {\n      // 如果不满足，递归返回科里化的函数，等待参数的传入\n      return curry.call(this, fn, subArgs);\n    }\n  };\n}\n\n// es6 实现\nfunction curry(fn, ...args) {\n  return fn.length <= args.length ? fn(...args) : curry.bind(null, fn, ...args);\n}\n```\n\n### 12. 实现AJAX请求\n\nAJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。\n\n创建AJAX请求的步骤：\n\n- **创建一个 XMLHttpRequest 对象。**\n- 在这个对象上**使用 open 方法创建一个 HTTP 请求**，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。\n- 在发起请求前，可以为这个对象**添加一些信息和监听函数**。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。\n- 当对象的属性和监听函数设置完成后，最后调**用 sent 方法来向服务器发起请求**，可以传入参数作为发送的数据体。\n\n```javascript\nconst SERVER_URL = \"/server\";\nlet xhr = new XMLHttpRequest();\n// 创建 Http 请求\nxhr.open(\"GET\", SERVER_URL, true);\n// 设置状态监听函数\nxhr.onreadystatechange = function() {\n  if (this.readyState !== 4) return;\n  // 当请求成功时\n  if (this.status === 200) {\n    handle(this.response);\n  } else {\n    console.error(this.statusText);\n  }\n};\n// 设置请求失败时的监听函数\nxhr.onerror = function() {\n  console.error(this.statusText);\n};\n// 设置请求头信息\nxhr.responseType = \"json\";\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n// 发送 Http 请求\nxhr.send(null);\n```\n\n### 13. 使用Promise封装AJAX请求\n\n```javascript\n// promise 封装实现：\nfunction getJSON(url) {\n  // 创建一个 promise 对象\n  let promise = new Promise(function(resolve, reject) {\n    let xhr = new XMLHttpRequest();\n    // 新建一个 http 请求\n    xhr.open(\"GET\", url, true);\n    // 设置状态的监听函数\n    xhr.onreadystatechange = function() {\n      if (this.readyState !== 4) return;\n      // 当请求成功或失败时，改变 promise 的状态\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n    // 设置错误监听函数\n    xhr.onerror = function() {\n      reject(new Error(this.statusText));\n    };\n    // 设置响应的数据类型\n    xhr.responseType = \"json\";\n    // 设置请求头信息\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n    // 发送 http 请求\n    xhr.send(null);\n  });\n  return promise;\n}\n```\n\n### 14. 实现浅拷贝\n\n浅拷贝是指，一个新的对象对原始对象的属性值进行精确地拷贝，如果拷贝的是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是内存地址。如果其中一个对象的引用内存地址发生改变，另一个对象也会发生变化。\n\n#### （1）Object.assign()\n\n`Object.assign()`是ES6中对象的拷贝方法，接受的第一个参数是目标对象，其余参数是源对象，用法：`Object.assign(target, source_1, ···)`，该方法可以实现浅拷贝，也可以实现一维对象的深拷贝。\n\n**注意：**\n\n- 如果目标对象和源对象有同名属性，或者多个源对象有同名属性，则后面的属性会覆盖前面的属性。\n- 如果该函数只有一个参数，当参数为对象时，直接返回该对象；当参数不是对象时，会先将参数转为对象然后返回。\n- 因为`null` 和 `undefined` 不能转化为对象，所以第一个参数不能为`null`或 `undefined`，会报错。\n\n```javascript\nlet target = {a: 1};\nlet object2 = {b: 2};\nlet object3 = {c: 3};\nObject.assign(target,object2,object3);  \nconsole.log(target);  // {a: 1, b: 2, c: 3}\n```\n\n#### （2）扩展运算符\n\n使用扩展运算符可以在构造字面量对象的时候，进行属性的拷贝。语法：`let cloneObj = { ...obj };`\n\n```javascript\nlet obj1 = {a:1,b:{c:1}}\nlet obj2 = {...obj1};\nobj1.a = 2;\nconsole.log(obj1); //{a:2,b:{c:1}}\nconsole.log(obj2); //{a:1,b:{c:1}}\nobj1.b.c = 2;\nconsole.log(obj1); //{a:2,b:{c:2}}\nconsole.log(obj2); //{a:1,b:{c:2}}\n```\n\n#### （3）数组方法实现数组浅拷贝\n\n###### **1）Array.prototype.slice**\n\n- `slice()`方法是JavaScript数组的一个方法，这个方法可以从已有数组中返回选定的元素：用法：`array.slice(start, end)`，该方法不会改变原始数组。\n- 该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。\n\n```javascript\nlet arr = [1,2,3,4];\nconsole.log(arr.slice()); // [1,2,3,4]\nconsole.log(arr.slice() === arr); //false\n```\n\n###### **2）Array.prototype.concat**\n\n- `concat()` 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。\n- 该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。\n\n```javascript\nlet arr = [1,2,3,4];\nconsole.log(arr.concat()); // [1,2,3,4]\nconsole.log(arr.concat() === arr); //false\n```\n\n#### （4）手写实现浅拷贝\n\n```javascript\n// 浅拷贝的实现;\n\nfunction shallowCopy(object) {\n  // 只拷贝对象\n  if (!object || typeof object !== \"object\") return;\n\n  // 根据 object 的类型判断是新建一个数组还是对象\n  let newObject = Array.isArray(object) ? [] : {};\n\n  // 遍历 object，并且判断是 object 的属性才拷贝\n  for (let key in object) {\n    if (object.hasOwnProperty(key)) {\n      newObject[key] = object[key];\n    }\n  }\n\n  return newObject;\n}// 浅拷贝的实现;\n\nfunction shallowCopy(object) {\n  // 只拷贝对象\n  if (!object || typeof object !== \"object\") return;\n\n  // 根据 object 的类型判断是新建一个数组还是对象\n  let newObject = Array.isArray(object) ? [] : {};\n\n  // 遍历 object，并且判断是 object 的属性才拷贝\n  for (let key in object) {\n    if (object.hasOwnProperty(key)) {\n      newObject[key] = object[key];\n    }\n  }\n\n  return newObject;\n}// 浅拷贝的实现;\nfunction shallowCopy(object) {\n  // 只拷贝对象\n  if (!object || typeof object !== \"object\") return;\n  // 根据 object 的类型判断是新建一个数组还是对象\n  let newObject = Array.isArray(object) ? [] : {};\n  // 遍历 object，并且判断是 object 的属性才拷贝\n  for (let key in object) {\n    if (object.hasOwnProperty(key)) {\n      newObject[key] = object[key];\n    }\n  }\n  return newObject;\n}\n```\n\n### 15. 实现深拷贝\n\n- **浅拷贝：** 浅拷贝指的是将一个对象的属性值复制到另一个对象，如果有的属性的值为引用类型的话，那么会将这个引用的地址复制给对象，因此两个对象会有同一个引用类型的引用。浅拷贝可以使用  Object.assign 和展开运算符来实现。\n- **深拷贝：** 深拷贝相对浅拷贝而言，如果遇到属性值为引用类型的时候，它新建一个引用类型并将对应的值复制给它，因此对象获得的一个新的引用类型而不是一个原有类型的引用。深拷贝对于一些对象可以使用 JSON 的两个函数来实现，但是由于 JSON 的对象格式比 js 的对象格式更加严格，所以如果属性值里边出现函数或者 Symbol 类型的值时，会转换失败\n\n#### （1）JSON.stringify()\n\n- `JSON.parse(JSON.stringify(obj))`是目前比较常用的深拷贝方法之一，它的原理就是利用`JSON.stringify` 将`js`对象序列化（JSON字符串），再使用`JSON.parse`来反序列化(还原)`js`对象。\n- 这个方法可以简单粗暴的实现深拷贝，但是还存在问题，拷贝的对象中如果有函数，undefined，symbol，当使用过`JSON.stringify()`进行处理之后，都会消失。\n\n```javascript\nlet obj1 = {  a: 0,\n              b: {\n                 c: 0\n                 }\n            };\nlet obj2 = JSON.parse(JSON.stringify(obj1));\nobj1.a = 1;\nobj1.b.c = 1;\nconsole.log(obj1); // {a: 1, b: {c: 1}}\nconsole.log(obj2); // {a: 0, b: {c: 0}}\n```\n\n#### （2）函数库lodash的_.cloneDeep方法\n\n该函数库也有提供_.cloneDeep用来做 Deep Copy\n\n```javascript\nvar _ = require('lodash');\nvar obj1 = {\n    a: 1,\n    b: { f: { g: 1 } },\n    c: [1, 2, 3]\n};\nvar obj2 = _.cloneDeep(obj1);\nconsole.log(obj1.b.f === obj2.b.f);// false\n```\n\n#### （3）手写实现深拷贝函数\n\n```javascript\n// 深拷贝的实现\nfunction deepCopy(object) {\n  if (!object || typeof object !== \"object\") return;\n\n  let newObject = Array.isArray(object) ? [] : {};\n\n  for (let key in object) {\n    if (object.hasOwnProperty(key)) {\n      newObject[key] =\n        typeof object[key] === \"object\" ? deepCopy(object[key]) : object[key];\n    }\n  }\n\n  return newObject;\n}\n```\n\n## 二、数据处理\n\n### 1. 实现日期格式化函数\n\n输入：\n\n```javascript\ndateFormat(new Date('2020-12-01'), 'yyyy/MM/dd') // 2020/12/01\ndateFormat(new Date('2020-04-01'), 'yyyy/MM/dd') // 2020/04/01\ndateFormat(new Date('2020-04-01'), 'yyyy年MM月dd日') // 2020年04月01日\nconst dateFormat = (dateInput, format)=>{\n    var day = dateInput.getDate() \n    var month = dateInput.getMonth() + 1  \n    var year = dateInput.getFullYear()   \n    format = format.replace(/yyyy/, year)\n    format = format.replace(/MM/,month)\n    format = format.replace(/dd/,day)\n    return format\n}\n```\n\n### 2. 交换a,b的值，不能用临时变量\n\n巧妙的利用两个数的和、差：\n\n```javascript\na = a + b\nb = a - b\na = a - b\n```\n\n### 3. 实现数组的乱序输出\n\n主要的实现思路就是：\n\n- 取出数组的第一个元素，随机产生一个索引值，将该第一个元素和这个索引对应的元素进行交换。\n- 第二次取出数据数组第二个元素，随机产生一个除了索引为1的之外的索引值，并将第二个元素与该索引值对应的元素进行交换\n- 按照上面的规律执行，直到遍历完成\n\n```javascript\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nfor (var i = 0; i < arr.length; i++) {\n  const randomIndex = Math.round(Math.random() * (arr.length - 1 - i)) + i;\n  [arr[i], arr[randomIndex]] = [arr[randomIndex], arr[i]];\n}\nconsole.log(arr)\n```\n\n还有一方法就是倒序遍历：\n\n```javascript\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nlet length = arr.length,\n    randomIndex,\n    temp;\n  while (length) {\n    randomIndex = Math.floor(Math.random() * length--);\n    temp = arr[length];\n    arr[length] = arr[randomIndex];\n    arr[randomIndex] = temp;\n  }\nconsole.log(arr)\n```\n\n### 4. 实现数组元素求和\n\n- arr=[1,2,3,4,5,6,7,8,9,10]，求和\n\n```javascript\nlet arr=[1,2,3,4,5,6,7,8,9,10]\nlet sum = arr.reduce( (total,i) => total += i,0);\nconsole.log(sum);\n```\n\n- arr=[1,2,3,[[4,5],6],7,8,9]，求和\n\n```javascript\nvar = arr=[1,2,3,[[4,5],6],7,8,9]\nlet arr= arr.toString().split(',').reduce( (total,i) => total += Number(i),0);\nconsole.log(arr);\n```\n\n递归实现：\n\n```javascript\nlet arr = [1, 2, 3, 4, 5, 6] \n\nfunction add(arr) {\n    if (arr.length == 1) return arr[0] \n    return arr[0] + add(arr.slice(1)) \n}\nconsole.log(add(arr)) // 21\n```\n\n### 5. 实现数组的扁平化\n\n**（1）递归实现**\n\n普通的递归思路很容易理解，就是通过循环递归的方式，一项一项地去遍历，如果每一项还是一个数组，那么就继续往下遍历，利用递归程序的方法，来实现数组的每一项的连接：\n\n```javascript\nlet arr = [1, [2, [3, 4, 5]]];\nfunction flatten(arr) {\n  let result = [];\n\n  for(let i = 0; i < arr.length; i++) {\n    if(Array.isArray(arr[i])) {\n      result = result.concat(flatten(arr[i]));\n    } else {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\nflatten(arr);  //  [1, 2, 3, 4，5]\n```\n\n**（2）reduce 函数迭代**\n\n从上面普通的递归函数中可以看出，其实就是对数组的每一项进行处理，那么其实也可以用reduce 来实现数组的拼接，从而简化第一种方法的代码，改造后的代码如下所示：\n\n```javascript\nlet arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n    return arr.reduce(function(prev, next){\n        return prev.concat(Array.isArray(next) ? flatten(next) : next)\n    }, [])\n}\nconsole.log(flatten(arr));//  [1, 2, 3, 4，5]\n```\n\n**（3）扩展运算符实现**\n\n这个方法的实现，采用了扩展运算符和 some 的方法，两者共同使用，达到数组扁平化的目的：\n\n```javascript\nlet arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n    while (arr.some(item => Array.isArray(item))) {\n        arr = [].concat(...arr);\n    }\n    return arr;\n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n```\n\n**（4）split 和 toString**\n\n可以通过 split 和 toString 两个方法来共同实现数组扁平化，由于数组会默认带一个 toString 的方法，所以可以把数组直接转换成逗号分隔的字符串，然后再用 split 方法把字符串重新转换为数组，如下面的代码所示：\n\n```javascript\nlet arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n    return arr.toString().split(',');\n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n```\n\n通过这两个方法可以将多维数组直接转换成逗号连接的字符串，然后再重新分隔成数组。\n\n**（5）ES6 中的 flat**\n\n我们还可以直接调用 ES6 中的 flat 方法来实现数组扁平化。flat 方法的语法：`arr.flat([depth])`\n\n其中 depth 是 flat 的参数，depth 是可以传递数组的展开深度（默认不填、数值是 1），即展开一层数组。如果层数不确定，参数可以传进 Infinity，代表不论多少层都要展开：\n\n```javascript\nlet arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n  return arr.flat(Infinity);\n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n```\n\n可以看出，一个嵌套了两层的数组，通过将 flat 方法的参数设置为 Infinity，达到了我们预期的效果。其实同样也可以设置成 2，也能实现这样的效果。在编程过程中，如果数组的嵌套层数不确定，最好直接使用 Infinity，可以达到扁平化。 **（6）正则和 JSON 方法** 在第4种方法中已经使用 toString 方法，其中仍然采用了将 JSON.stringify 的方法先转换为字符串，然后通过正则表达式过滤掉字符串中的数组的方括号，最后再利用 JSON.parse 把它转换成数组：\n\n```javascript\nlet arr = [1, [2, [3, [4, 5]]], 6];\nfunction flatten(arr) {\n  let str = JSON.stringify(arr);\n  str = str.replace(/(\\[|\\])/g, '');\n  str = '[' + str + ']';\n  return JSON.parse(str); \n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n```\n\n### 6. 实现数组去重\n\n给定某无序数组，要求去除数组中的重复数字并且返回新的无重复数组。\n\nES6方法（使用数据结构集合）：\n\n```javascript\nconst array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];\n\nArray.from(new Set(array)); // [1, 2, 3, 5, 9, 8]\n```\n\nES5方法：使用map存储不重复的数字\n\n```javascript\nconst array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];\n\nuniqueArray(array); // [1, 2, 3, 5, 9, 8]\n\nfunction uniqueArray(array) {\n  let map = {};\n  let res = [];\n  for(var i = 0; i < array.length; i++) {\n    if(!map.hasOwnProperty([array[i]])) {\n      map[array[i]] = 1;\n      res.push(array[i]);\n    }\n  }\n  return res;\n}\n```\n\n### 7. 实现数组的flat方法\n\n```javascript\nfunction _flat(arr, depth) {\n  if(!Array.isArray(arr) || depth <= 0) {\n    return arr;\n  }\n  return arr.reduce((prev, cur) => {\n    if (Array.isArray(cur)) {\n      return prev.concat(_flat(cur, depth - 1))\n    } else {\n      return prev.concat(cur);\n    }\n  }, []);\n}\n```\n\n### 8. 实现数组的push方法\n\n```javascript\nlet arr = [];\nArray.prototype.push = function() {\n\tfor( let i = 0 ; i < arguments.length ; i++){\n\t\tthis[this.length] = arguments[i] ;\n\t}\n\treturn this.length;\n}\n```\n\n### 9. 实现数组的filter方法\n\n```javascript\nArray.prototype._filter = function(fn) {\n    if (typeof fn !== \"function\") {\n        throw Error('参数必须是一个函数');\n    }\n    const res = [];\n    for (let i = 0, len = this.length; i < len; i++) {\n        fn(this[i]) && res.push(this[i]);\n    }\n    return res;\n}\n```\n\n### 10. 实现数组的map方法\n\n```javascript\nArray.prototype._map = function(fn) {\n   if (typeof fn !== \"function\") {\n        throw Error('参数必须是一个函数');\n    }\n    const res = [];\n    for (let i = 0, len = this.length; i < len; i++) {\n        res.push(fn(this[i]));\n    }\n    return res;\n}\n```\n\n### 11. 实现字符串的repeat方法\n\n输入字符串s，以及其重复的次数，输出重复的结果，例如输入abc，2，输出abcabc。\n\n```javascript\nfunction repeat(s, n) {\n    return (new Array(n + 1)).join(s);\n}\n```\n\n递归：\n\n```javascript\nfunction repeat(s, n) {\n    return (n > 0) ? s.concat(repeat(s, --n)) : \"\";\n}\n```\n\n### 12. 实现字符串翻转\n\n在字符串的原型链上添加一个方法，实现字符串翻转：\n\n```javascript\nString.prototype._reverse = function(a){\n    return a.split(\"\").reverse().join(\"\");\n}\nvar obj = new String();\nvar res = obj._reverse ('hello');\nconsole.log(res);    // olleh\n```\n\n需要注意的是，必须通过实例化对象之后再去调用定义的方法，不然找不到该方法。\n\n### 13. 将数字每千分位用逗号隔开\n\n**数字有小数版本：**\n\n```javascript\nlet format = n => {\n    let num = n.toString() // 转成字符串\n    let decimals = ''\n        // 判断是否有小数\n    num.indexOf('.') > -1 ? decimals = num.split('.')[1] : decimals\n    let len = num.length\n    if (len <= 3) {\n        return num\n    } else {\n        let temp = ''\n        let remainder = len % 3\n        decimals ? temp = '.' + decimals : temp\n        if (remainder > 0) { // 不是3的整数倍\n            return num.slice(0, remainder) + ',' + num.slice(remainder, len).match(/\\d{3}/g).join(',') + temp\n        } else { // 是3的整数倍\n            return num.slice(0, len).match(/\\d{3}/g).join(',') + temp \n        }\n    }\n}\nformat(12323.33)  // '12,323.33'\n```\n\n**数字无小数版本：**\n\n```javascript\nlet format = n => {\n    let num = n.toString() \n    let len = num.length\n    if (len <= 3) {\n        return num\n    } else {\n        let remainder = len % 3\n        if (remainder > 0) { // 不是3的整数倍\n            return num.slice(0, remainder) + ',' + num.slice(remainder, len).match(/\\d{3}/g).join(',') \n        } else { // 是3的整数倍\n            return num.slice(0, len).match(/\\d{3}/g).join(',') \n        }\n    }\n}\nformat(1232323)  // '1,232,323'\n```\n\n### 14. 实现非负大整数相加\n\nJavaScript对数值有范围的限制，限制如下：\n\n```javascript\nNumber.MAX_VALUE // 1.7976931348623157e+308\nNumber.MAX_SAFE_INTEGER // 9007199254740991\nNumber.MIN_VALUE // 5e-324\nNumber.MIN_SAFE_INTEGER // -9007199254740991\n```\n\n如果想要对一个超大的整数(`> Number.MAX_SAFE_INTEGER`)进行加法运算，但是又想输出一般形式，那么使用 + 是无法达到的，一旦数字超过 `Number.MAX_SAFE_INTEGER` 数字会被立即转换为科学计数法，并且数字精度相比以前将会有误差。\n\n实现一个算法进行大数的相加：\n\n```javascript\nfunction sumBigNumber(a, b) {\n  let res = '';\n  let temp = 0;\n  \n  a = a.split('');\n  b = b.split('');\n  \n  while (a.length || b.length || temp) {\n    temp += ~~a.pop() + ~~b.pop();\n    res = (temp % 10) + res;\n    temp  = temp > 9\n  }\n  return res.replace(/^0+/, '');\n}\n```\n\n其主要的思路如下：\n\n- 首先用字符串的方式来保存大数，这样数字在数学表示上就不会发生变化\n- 初始化res，temp来保存中间的计算结果，并将两个字符串转化为数组，以便进行每一位的加法运算\n- 将两个数组的对应的位进行相加，两个数相加的结果可能大于10，所以可能要仅为，对10进行取余操作，将结果保存在当前位\n- 判断当前位是否大于9，也就是是否会进位，若是则将temp赋值为true，因为在加法运算中，true会自动隐式转化为1，以便于下一次相加\n- 重复上述操作，直至计算结束\n\n### 13. 实现 add(1)(2)(3)\n\n函数柯里化概念： 柯里化（Currying）是把接受多个参数的函数转变为接受一个单一参数的函数，并且返回接受余下的参数且返回结果的新函数的技术。\n\n1）粗暴版\n\n```javascript\nfunction add (a) {\nreturn function (b) {\n \treturn function (c) {\n      return a + b + c;\n \t}\n}\n}\nconsole.log(add(1)(2)(3)); // 6\n```\n\n2）柯里化解决方案\n\n- 参数长度固定\n\n```javascript\nvar add = function (m) {\n  var temp = function (n) {\n    return add(m + n);\n  }\n  temp.toString = function () {\n    return m;\n  }\n  return temp;\n};\nconsole.log(add(3)(4)(5)); // 12\nconsole.log(add(3)(6)(9)(25)); // 43\n```\n\n对于add(3)(4)(5)，其执行过程如下：\n\n1. 先执行add(3)，此时m=3，并且返回temp函数；\n2. 执行temp(4)，这个函数内执行add(m+n)，n是此次传进来的数值4，m值还是上一步中的3，所以add(m+n)=add(3+4)=add(7)，此时m=7，并且返回temp函数\n3. 执行temp(5)，这个函数内执行add(m+n)，n是此次传进来的数值5，m值还是上一步中的7，所以add(m+n)=add(7+5)=add(12)，此时m=12，并且返回temp函数\n4. 由于后面没有传入参数，等于返回的temp函数不被执行而是打印，了解JS的朋友都知道对象的toString是修改对象转换字符串的方法，因此代码中temp函数的toString函数return m值，而m值是最后一步执行函数时的值m=12，所以返回值是12。\n\n- 参数长度不固定\n\n```javascript\nfunction add (...args) {\n    //求和\n    return args.reduce((a, b) => a + b)\n}\nfunction currying (fn) {\n    let args = []\n    return function temp (...newArgs) {\n        if (newArgs.length) {\n            args = [\n                ...args,\n                ...newArgs\n            ]\n            return temp\n        } else {\n            let val = fn.apply(this, args)\n            args = [] //保证再次调用时清空\n            return val\n        }\n    }\n}\nlet addCurry = currying(add)\nconsole.log(addCurry(1)(2)(3)(4, 5)())  //15\nconsole.log(addCurry(1)(2)(3, 4, 5)())  //15\nconsole.log(addCurry(1)(2, 3, 4, 5)())  //15\n```\n\n### 14. 实现类数组转化为数组\n\n类数组转换为数组的方法有这样几种：\n\n- 通过 call 调用数组的 slice 方法来实现转换\n\n```javascript\nArray.prototype.slice.call(arrayLike);\n```\n\n- 通过 call 调用数组的 splice 方法来实现转换\n\n```javascript\nArray.prototype.splice.call(arrayLike, 0);\n```\n\n- 通过 apply 调用数组的 concat 方法来实现转换\n\n```javascript\nArray.prototype.concat.apply([], arrayLike);\n```\n\n- 通过 Array.from 方法来实现转换\n\n```javascript\nArray.from(arrayLike);\n```\n\n### 15. 使用 reduce 求和\n\narr = [1,2,3,4,5,6,7,8,9,10]，求和\n\n```javascript\nlet arr = [1,2,3,4,5,6,7,8,9,10]\narr.reduce((prev, cur) => { return prev + cur }, 0)\n```\n\narr = [1,2,3,[[4,5],6],7,8,9]，求和\n\n```javascript\nlet arr = [1,2,3,4,5,6,7,8,9,10]\narr.flat(Infinity).reduce((prev, cur) => { return prev + cur }, 0)\n```\n\narr = [{a:1, b:3}, {a:2, b:3, c:4}, {a:3}]，求和\n\n```javascript\nlet arr = [{a:9, b:3, c:4}, {a:1, b:3}, {a:3}] \n\narr.reduce((prev, cur) => {\n    return prev + cur[\"a\"];\n}, 0)\n```\n\n### 16. 将js对象转化为树形结构\n\n```javascript\n// 转换前：\nsource = [{\n            id: 1,\n            pid: 0,\n            name: 'body'\n          }, {\n            id: 2,\n            pid: 1,\n            name: 'title'\n          }, {\n            id: 3,\n            pid: 2,\n            name: 'div'\n          }]\n// 转换为: \ntree = [{\n          id: 1,\n          pid: 0,\n          name: 'body',\n          children: [{\n            id: 2,\n            pid: 1,\n            name: 'title',\n            children: [{\n              id: 3,\n              pid: 1,\n              name: 'div'\n            }]\n          }\n        }]\n```\n\n代码实现：\n\n```javascript\nfunction jsonToTree(data) {\n  // 初始化结果数组，并判断输入数据的格式\n  let result = []\n  if(!Array.isArray(data)) {\n    return result\n  }\n  // 使用map，将当前对象的id与当前对象对应存储起来\n  let map = {};\n  data.forEach(item => {\n    map[item.id] = item;\n  });\n  // \n  data.forEach(item => {\n    let parent = map[item.pid];\n    if(parent) {\n      (parent.children || (parent.children = [])).push(item);\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n}\n```\n\n### 17. 使用ES5和ES6求函数参数的和\n\nES5：\n\n```javascript\nfunction sum() {\n    let sum = 0\n    Array.prototype.forEach.call(arguments, function(item) {\n        sum += item * 1\n    })\n    return sum\n}\n```\n\nES6：\n\n```javascript\nfunction sum(...nums) {\n    let sum = 0\n    nums.forEach(function(item) {\n        sum += item * 1\n    })\n    return sum\n}\n```\n\n### 18. 解析 URL Params 为对象\n\n```javascript\nlet url = 'http://www.domain.com/?user=anonymous&id=123&id=456&city=%E5%8C%97%E4%BA%AC&enabled';\nparseParam(url)\n/* 结果\n{ user: 'anonymous',\n  id: [ 123, 456 ], // 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型\n  city: '北京', // 中文需解码\n  enabled: true, // 未指定值得 key 约定为 true\n}\n*/\nfunction parseParam(url) {\n  const paramsStr = /.+\\?(.+)$/.exec(url)[1]; // 将 ? 后面的字符串取出来\n  const paramsArr = paramsStr.split('&'); // 将字符串以 & 分割后存到数组中\n  let paramsObj = {};\n  // 将 params 存到对象中\n  paramsArr.forEach(param => {\n    if (/=/.test(param)) { // 处理有 value 的参数\n      let [key, val] = param.split('='); // 分割 key 和 value\n      val = decodeURIComponent(val); // 解码\n      val = /^\\d+$/.test(val) ? parseFloat(val) : val; // 判断是否转为数字\n      if (paramsObj.hasOwnProperty(key)) { // 如果对象有 key，则添加一个值\n        paramsObj[key] = [].concat(paramsObj[key], val);\n      } else { // 如果对象没有这个 key，创建 key 并设置值\n        paramsObj[key] = val;\n      }\n    } else { // 处理没有 value 的参数\n      paramsObj[param] = true;\n    }\n  })\n  return paramsObj;\n}\n```\n\n## 三、场景应用\n\n### 1. 循环打印红黄绿\n\n下面来看一道比较典型的问题，通过这个问题来对比几种异步编程方法：**红灯 3s 亮一次，绿灯 1s 亮一次，黄灯 2s 亮一次；如何让三个灯不断交替重复亮灯？**\n\n三个亮灯函数：\n\n```javascript\nfunction red() {\n    console.log('red');\n}\nfunction green() {\n    console.log('green');\n}\nfunction yellow() {\n    console.log('yellow');\n}\n```\n\n这道题复杂的地方在于**需要“交替重复”亮灯**，而不是“亮完一次”就结束了。\n\n#### （1）用 callback 实现\n\n```javascript\nconst task = (timer, light, callback) => {\n    setTimeout(() => {\n        if (light === 'red') {\n            red()\n        }\n        else if (light === 'green') {\n            green()\n        }\n        else if (light === 'yellow') {\n            yellow()\n        }\n        callback()\n    }, timer)\n}\ntask(3000, 'red', () => {\n    task(2000, 'green', () => {\n        task(1000, 'yellow', Function.prototype)\n    })\n})\n```\n\n这里存在一个 bug：代码只是完成了一次流程，执行后红黄绿灯分别只亮一次。该如何让它交替重复进行呢？\n\n上面提到过递归，可以递归亮灯的一个周期：\n\n```javascript\nconst step = () => {\n    task(3000, 'red', () => {\n        task(2000, 'green', () => {\n            task(1000, 'yellow', step)\n        })\n    })\n}\nstep()\n```\n\n**注意看黄灯亮的回调里又再次调用了 step 方法** 以完成循环亮灯。\n\n#### （2）用 promise 实现\n\n```javascript\nconst task = (timer, light) => \n    new Promise((resolve, reject) => {\n        setTimeout(() => {\n            if (light === 'red') {\n                red()\n            }\n            else if (light === 'green') {\n                green()\n            }\n            else if (light === 'yellow') {\n                yellow()\n            }\n            resolve()\n        }, timer)\n    })\nconst step = () => {\n    task(3000, 'red')\n        .then(() => task(2000, 'green'))\n        .then(() => task(2100, 'yellow'))\n        .then(step)\n}\nstep()\n```\n\n这里将回调移除，在一次亮灯结束后，resolve 当前 promise，并依然使用递归进行。\n\n#### （3）用 async/await 实现\n\n```javascript\nconst taskRunner =  async () => {\n    await task(3000, 'red')\n    await task(2000, 'green')\n    await task(2100, 'yellow')\n    taskRunner()\n}\ntaskRunner()\n```\n\n### 2. 实现每隔一秒打印 1,2,3,4\n\n```javascript\n// 使用闭包实现\nfor (var i = 0; i < 5; i++) {\n  (function(i) {\n    setTimeout(function() {\n      console.log(i);\n    }, i * 1000);\n  })(i);\n}\n// 使用 let 块级作用域\nfor (let i = 0; i < 5; i++) {\n  setTimeout(function() {\n    console.log(i);\n  }, i * 1000);\n}\n```\n\n### 3. 小孩报数问题\n\n有30个小孩儿，编号从1-30，围成一圈依此报数，1、2、3 数到 3 的小孩儿退出这个圈， 然后下一个小孩 重新报数 1、2、3，问最后剩下的那个小孩儿的编号是多少?\n\n```javascript\nfunction childNum(num, count){\n    let allplayer = [];    \n    for(let i = 0; i < num; i++){\n        allplayer[i] = i + 1;\n    }\n    \n    let exitCount = 0;    // 离开人数\n    let counter = 0;      // 记录报数\n    let curIndex = 0;     // 当前下标\n    \n    while(exitCount < num - 1){\n        if(allplayer[curIndex] !== 0) counter++;    \n        \n        if(counter == count){\n            allplayer[curIndex] = 0;                 \n            counter = 0;\n            exitCount++;  \n        }\n        curIndex++;\n        if(curIndex == num){\n            curIndex = 0               \n        };           \n    }    \n    for(i = 0; i < num; i++){\n        if(allplayer[i] !== 0){\n            return allplayer[i]\n        }      \n    }\n}\nchildNum(30, 3)\n```\n\n### 4. 用Promise实现图片的异步加载\n\n```javascript\nlet imageAsync=(url)=>{\n            return new Promise((resolve,reject)=>{\n                let img = new Image();\n                img.src = url;\n                img.οnlοad=()=>{\n                    console.log(`图片请求成功，此处进行通用操作`);\n                    resolve(image);\n                }\n                img.οnerrοr=(err)=>{\n                    console.log(`失败，此处进行失败的通用操作`);\n                    reject(err);\n                }\n            })\n        }\n        \nimageAsync(\"url\").then(()=>{\n    console.log(\"加载成功\");\n}).catch((error)=>{\n    console.log(\"加载失败\");\n})\n```\n\n### 5. 实现发布-订阅模式\n\n```javascript\nclass EventCenter{\n  // 1. 定义事件容器，用来装事件数组\n\tlet handlers = {}\n\n  // 2. 添加事件方法，参数：事件名 事件方法\n  addEventListener(type, handler) {\n    // 创建新数组容器\n    if (!this.handlers[type]) {\n      this.handlers[type] = []\n    }\n    // 存入事件\n    this.handlers[type].push(handler)\n  }\n\n  // 3. 触发事件，参数：事件名 事件参数\n  dispatchEvent(type, params) {\n    // 若没有注册该事件则抛出错误\n    if (!this.handlers[type]) {\n      return new Error('该事件未注册')\n    }\n    // 触发事件\n    this.handlers[type].forEach(handler => {\n      handler(...params)\n    })\n  }\n\n  // 4. 事件移除，参数：事件名 要删除事件，若无第二个参数则删除该事件的订阅和发布\n  removeEventListener(type, handler) {\n    if (!this.handlers[type]) {\n      return new Error('事件无效')\n    }\n    if (!handler) {\n      // 移除事件\n      delete this.handlers[type]\n    } else {\n      const index = this.handlers[type].findIndex(el => el === handler)\n      if (index === -1) {\n        return new Error('无该绑定事件')\n      }\n      // 移除事件\n      this.handlers[type].splice(index, 1)\n      if (this.handlers[type].length === 0) {\n        delete this.handlers[type]\n      }\n    }\n  }\n}\n```\n\n### 6. 查找文章中出现频率最高的单词\n\n```javascript\nfunction findMostWord(article) {\n  // 合法性判断\n  if (!article) return;\n  // 参数处理\n  article = article.trim().toLowerCase();\n  let wordList = article.match(/[a-z]+/g),\n    visited = [],\n    maxNum = 0,\n    maxWord = \"\";\n  article = \" \" + wordList.join(\"  \") + \" \";\n  // 遍历判断单词出现次数\n  wordList.forEach(function(item) {\n    if (visited.indexOf(item) < 0) {\n      // 加入 visited \n      visited.push(item);\n      let word = new RegExp(\" \" + item + \" \", \"g\"),\n        num = article.match(word).length;\n      if (num > maxNum) {\n        maxNum = num;\n        maxWord = item;\n      }\n    }\n  });\n  return maxWord + \"  \" + maxNum;\n}\n```\n\n### 7. 封装异步的fetch，使用async await方式来使用\n\n```javascript\n(async () => {\n    class HttpRequestUtil {\n        async get(url) {\n            const res = await fetch(url);\n            const data = await res.json();\n            return data;\n        }\n        async post(url, data) {\n            const res = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            });\n            const result = await res.json();\n            return result;\n        }\n        async put(url, data) {\n            const res = await fetch(url, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                data: JSON.stringify(data)\n            });\n            const result = await res.json();\n            return result;\n        }\n        async delete(url, data) {\n            const res = await fetch(url, {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                data: JSON.stringify(data)\n            });\n            const result = await res.json();\n            return result;\n        }\n    }\n    const httpRequestUtil = new HttpRequestUtil();\n    const res = await httpRequestUtil.get('http://golderbrother.cn/');\n    console.log(res);\n})();\n```\n\n### 8. 实现prototype继承\n\n所谓的原型链继承就是让新实例的原型等于父类的实例：\n\n```javascript\n//父方法\nfunction SupperFunction(flag1){\n    this.flag1 = flag1;\n}\n\n//子方法\nfunction SubFunction(flag2){\n    this.flag2 = flag2;\n}\n\n//父实例\nvar superInstance = new SupperFunction(true);\n\n//子继承父\nSubFunction.prototype = superInstance;\n\n//子实例\nvar subInstance = new SubFunction(false);\n//子调用自己和父的属性\nsubInstance.flag1;   // true\nsubInstance.flag2;   // false\n```\n\n### 9. 实现双向数据绑定\n\n```javascript\nlet obj = {}\nlet input = document.getElementById('input')\nlet span = document.getElementById('span')\n// 数据劫持\nObject.defineProperty(obj, 'text', {\n  configurable: true,\n  enumerable: true,\n  get() {\n    console.log('获取数据了')\n  },\n  set(newVal) {\n    console.log('数据更新了')\n    input.value = newVal\n    span.innerHTML = newVal\n  }\n})\n// 输入监听\ninput.addEventListener('keyup', function(e) {\n  obj.text = e.target.value\n})\n```\n\n### 10. 实现简单路由\n\n```javascript\n// hash路由\nclass Route{\n  constructor(){\n    // 路由存储对象\n    this.routes = {}\n    // 当前hash\n    this.currentHash = ''\n    // 绑定this，避免监听时this指向改变\n    this.freshRoute = this.freshRoute.bind(this)\n    // 监听\n    window.addEventListener('load', this.freshRoute, false)\n    window.addEventListener('hashchange', this.freshRoute, false)\n  }\n  // 存储\n  storeRoute (path, cb) {\n    this.routes[path] = cb || function () {}\n  }\n  // 更新\n  freshRoute () {\n    this.currentHash = location.hash.slice(1) || '/'\n    this.routes[this.currentHash]()\n  }\n}\n```\n\n### 11. 实现斐波那契数列\n\n```javascript\n// 递归\nfunction fn (n){\n    if(n==0) return 0\n    if(n==1) return 1\n    return fn(n-2)+fn(n-1)\n}\n// 优化\nfunction fibonacci2(n) {\n    const arr = [1, 1, 2];\n    const arrLen = arr.length;\n\n    if (n <= arrLen) {\n        return arr[n];\n    }\n\n    for (let i = arrLen; i < n; i++) {\n        arr.push(arr[i - 1] + arr[ i - 2]);\n    }\n\n    return arr[arr.length - 1];\n}\n// 非递归\nfunction fn(n) {\n    let pre1 = 1;\n    let pre2 = 1;\n    let current = 2;\n\n    if (n <= 2) {\n        return current;\n    }\n\n    for (let i = 2; i < n; i++) {\n        pre1 = pre2;\n        pre2 = current;\n        current = pre1 + pre2;\n    }\n\n    return current;\n}\n```\n\n### 12. 字符串出现的不重复最长长度\n\n用一个滑动窗口装没有重复的字符，枚举字符记录最大值即可。用 map 维护字符的索引，遇到相同的字符，把左边界移动过去即可。挪动的过程中记录最大长度：\n\n```javascript\nvar lengthOfLongestSubstring = function (s) {\n    let map = new Map();\n    let i = -1\n    let res = 0\n    let n = s.length\n    for (let j = 0; j < n; j++) {\n        if (map.has(s[j])) {\n            i = Math.max(i, map.get(s[j]))\n        }\n        res = Math.max(res, j - i)\n        map.set(s[j], j)\n    }\n    return res\n};\n```\n\n### 13. 使用 setTimeout 实现 setInterval\n\nsetInterval 的作用是每隔一段指定时间执行一个函数，但是这个执行不是真的到了时间立即执行，它真正的作用是每隔一段时间将事件加入事件队列中去，只有当当前的执行栈为空的时候，才能去从事件队列中取出事件执行。所以可能会出现这样的情况，就是当前执行栈执行的时间很长，导致事件队列里边积累多个定时器加入的事件，当执行栈结束的时候，这些事件会依次执行，因此就不能到间隔一段时间执行的效果。\n\n针对 setInterval 的这个缺点，我们可以使用 setTimeout 递归调用来模拟 setInterval，这样我们就确保了只有一个事件结束了，我们才会触发下一个定时器事件，这样解决了 setInterval 的问题。\n\n实现思路是使用递归函数，不断地去执行 setTimeout 从而达到 setInterval 的效果\n\n```javascript\nfunction mySetInterval(fn, timeout) {\n  // 控制器，控制定时器是否继续执行\n  var timer = {\n    flag: true\n  };\n  // 设置递归函数，模拟定时器执行。\n  function interval() {\n    if (timer.flag) {\n      fn();\n      setTimeout(interval, timeout);\n    }\n  }\n  // 启动定时器\n  setTimeout(interval, timeout);\n  // 返回控制器\n  return timer;\n}\n```\n\n### 14. 实现 jsonp\n\n```javascript\n// 动态的加载js文件\nfunction addScript(src) {\n  const script = document.createElement('script');\n  script.src = src;\n  script.type = \"text/javascript\";\n  document.body.appendChild(script);\n}\naddScript(\"http://xxx.xxx.com/xxx.js?callback=handleRes\");\n// 设置一个全局的callback函数来接收回调结果\nfunction handleRes(res) {\n  console.log(res);\n}\n// 接口返回的数据格式\nhandleRes({a: 1, b: 2});\n```\n\n### 15. 判断对象是否存在循环引用\n\n循环引用对象本来没有什么问题，但是序列化的时候就会发生问题，比如调用`JSON.stringify()`对该类对象进行序列化，就会报错: `Converting circular structure to JSON.`\n\n下面方法可以用来判断一个对象中是否已存在循环引用：\n\n```javascript\nconst isCycleObject = (obj,parent) => {\n    const parentArr = parent || [obj];\n    for(let i in obj) {\n        if(typeof obj[i] === 'object') {\n            let flag = false;\n            parentArr.forEach((pObj) => {\n                if(pObj === obj[i]){\n                    flag = true;\n                }\n            })\n            if(flag) return true;\n            flag = isCycleObject(obj[i],[...parentArr,obj[i]]);\n            if(flag) return true;\n        }\n    }\n    return false;\n}\n\nconst a = 1;\nconst b = {a};\nconst c = {b};\nconst o = {d:{a:3},c}\no.c.b.aa = a;\n\nconsole.log(isCycleObject(o)\n```\n\n查找有序二维数组的目标值：\n\n```javascript\nvar findNumberIn2DArray = function(matrix, target) {\n    if (matrix == null || matrix.length == 0) {\n        return false;\n    }\n    let row = 0;\n    let column = matrix[0].length - 1;\n    while (row < matrix.length && column >= 0) {\n        if (matrix[row][column] == target) {\n            return true;\n        } else if (matrix[row][column] > target) {\n            column--;\n        } else {\n            row++;\n        }\n    }\n    return false;\n};\n```\n\n二维数组斜向打印：\n\n```javascript\nfunction printMatrix(arr){\n  let m = arr.length, n = arr[0].length\n\tlet res = []\n  \n  // 左上角，从0 到 n - 1 列进行打印\n  for (let k = 0; k < n; k++) {\n    for (let i = 0, j = k; i < m && j >= 0; i++, j--) {\n      res.push(arr[i][j]);\n    }\n  }\n\n  // 右下角，从1 到 n - 1 行进行打印\n  for (let k = 1; k < m; k++) {\n    for (let i = k, j = n - 1; i < m && j >= 0; i++, j--) {\n      res.push(arr[i][j]);\n    }\n  }\n  return res\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/js/js面试手写.md","raw":"---\ntitle: js面试手写\ntags:\n  - 面试\ncategories: 面试\nkeywords: 面试，JS\ndescription: js面试手写\ntop_img: 'https://raw.githubusercontent.com/why862555625/images/main/images/99.jpg'\nsticky: 数值越大越靠前\ncover: 'https://raw.githubusercontent.com/why862555625/images/main/images/99.jpg'\ncomments: false评论\nabbrlink: a09ef191\ndate: 2023-06-07 13:58:38\nupdated: 2023-06-07 13:58:38\n---\n\njs面试手写\n\n<!-- more -->\n\n## 一、JavaScript 基础\n\n![image-20230607140248211](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230607140248211.png)\n\n### 1. 手写 Object.create\n\n思路：将传入的对象作为原型\n\n```javascript\nfunction create(obj) {\n  function F() {}\n  F.prototype = obj\n  return new F()\n}\n```\n\n### 2. 手写 instanceof 方法\n\ninstanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n\n实现步骤：\n\n1. 首先获取类型的原型\n2. 然后获得对象的原型\n3. 然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为 `null`，因为原型链最终为 `null`\n\n具体实现：\n\n```javascript\nfunction myInstanceof(left, right) {\n  let proto = Object.getPrototypeOf(left), // 获取对象的原型\n      prototype = right.prototype; // 获取构造函数的 prototype 对象\n\n  // 判断构造函数的 prototype 对象是否在对象的原型链上\n  while (true) {\n    if (!proto) return false;\n    if (proto === prototype) return true;\n\n    proto = Object.getPrototypeOf(proto);\n  }\n}\n```\n\n### 3. 手写 new 操作符\n\n在调用 `new` 的过程中会发生以上四件事情：\n\n（1）首先创建了一个新的空对象\n\n（2）设置原型，将对象的原型设置为函数的 prototype 对象。\n\n（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）\n\n（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\n\n```javascript\nfunction objectFactory() {\n  let newObject = null;\n  let constructor = Array.prototype.shift.call(arguments);\n  let result = null;\n  // 判断参数是否是一个函数\n  if (typeof constructor !== \"function\") {\n    console.error(\"type error\");\n    return;\n  }\n  // 新建一个空对象，对象的原型为构造函数的 prototype 对象\n  newObject = Object.create(constructor.prototype);\n  // 将 this 指向新建对象，并执行函数\n  result = constructor.apply(newObject, arguments);\n  // 判断返回对象\n  let flag = result && (typeof result === \"object\" || typeof result === \"function\");\n  // 判断返回结果\n  return flag ? result : newObject;\n}\n// 使用方法\nobjectFactory(构造函数, 初始化参数);\n```\n\n### 4. 手写 Promise\n\n#### 常见 Promise 面试题\n\n首先，我们以常见的 Promise 面试题为切入点，我们看看面试官们都爱考什么：\n\n1. Promise 解决了什么问题？\n2. Promise 的业界实现都有哪些？\n3. Promise 常用的 API 有哪些？\n4. 能不能手写一个符合 Promise/A+ 规范的 Promise?\n5. Promise 在事件循环中的执行过程是怎样的？\n6. Promise 有什么缺陷，可以如何解决？\n\n这几个问题由浅入深，我们一个一个来看：\n\n#### Promise 出现的原因 & 业界实现\n\n在 Promise 出现以前，在我们处理多个异步请求嵌套时，代码往往是这样的。。。\n\n```js\nlet fs = require('fs')\n\nfs.readFile('./name.txt','utf8',function(err,data){\n  fs.readFile(data, 'utf8',function(err,data){\n    fs.readFile(data,'utf8',function(err,data){\n      console.log(data);\n    })\n  })\n})\n```\n\n为了拿到回调的结果，我们必须一层一层的嵌套，可以说是相当恶心了。而且基本上我们还要对每次请求的结果进行一系列的处理，使得代码变的更加难以阅读和难以维护，这就是传说中臭名昭著的**回调地狱**～产生**回调地狱**的原因归结起来有两点：\n\n1.**嵌套调用**，第一个函数的输出往往是第二个函数的输入；\n\n2.**处理多个异步请求并发**，开发时往往需要同步请求最终的结果。\n\n原因分析出来后，那么问题的解决思路就很清晰了：\n\n1.**消灭嵌套调用**：通过 Promise 的链式调用可以解决；\n\n2.**合并多个任务的请求结果**：使用 Promise.all 获取合并多个任务的错误处理。\n\nPromise 正是用一种更加友好的代码组织方式，解决了异步嵌套的问题。\n\n我们来看看上面的例子用 Promise 实现是什么样的：\n\n```js\nlet fs = require('fs')\n\nfunction read(filename) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(filename, 'utf8', (err, data) => {\n      if (err) reject(err);\n      resolve(data);\n    })\n  })\n}\n\nread('./name.txt').then((data)=>{\n  return read(data) \n}).then((data)=>{\n  return read(data)  \n}).then((data)=>{\n    console.log(data);\n},err=>{\n    console.log(err);\n})\n```\n\n臃肿的嵌套变得线性多了有木有？没错，他就是我们的异步神器 Promise！\n\n让我们再次回归刚才的问题，**Promise 为我们解决了什么问题？**在传统的异步编程中，如果异步之间存在依赖关系，就需要通过层层嵌套回调的方式满足这种依赖，如果嵌套层数过多，可读性和可以维护性都会变得很差，产生所谓的“回调地狱”，而 Promise 将嵌套调用改为链式调用，增加了可阅读性和可维护性。也就是说，Promise 解决的是异步编码风格的问题。**那 Promise 的业界实现都有哪些呢？**业界比较著名的实现 Promise 的类库有 bluebird、Q、ES6-Promise。\n\n#### 从零开始，手写 Promise\n\n##### Promise/A+\n\n我们想要手写一个 Promise，就要遵循 [Promise/A+](https://link.zhihu.com/?target=https%3A//promisesaplus.com/) 规范，业界所有 Promise 的类库都遵循这个规范。\n\n其实 Promise/A+ 规范对如何实现一个符合标准的 Promise 类库已经阐述的很详细了。每一行代码在 Promise/A+ 规范中都有迹可循，所以在下面的实现的过程中，我会尽可能的将代码和 Promise/A+ 规范一一对应起来。\n\n下面开始步入正题啦～\n\n#### 基础版 Promise\n\n我们先来回顾下最简单的 Promise 使用方式：\n\n```js\nconst p1 = new Promise((resolve, reject) => {\n  console.log('create a promise');\n  resolve('成功了');\n})\n\nconsole.log(\"after new promise\");\n\nconst p2 = p1.then(data => {\n  console.log(data)\n  throw new Error('失败了')\n})\n\nconst p3 = p2.then(data => {\n  console.log('success', data)\n}, err => {\n  console.log('faild', err)\n})\n```\n\n控制台输出：\n\n```js\n\"create a promise\"\n\"after new promise\"\n\"成功了\"\n\"faild Error: 失败了\"\n```\n\n- 首先我们在调用 Promise 时，会返回一个 Promise 对象。\n- 构建 Promise 对象时，需要传入一个 **executor 函数**，Promise 的主要业务流程都在 executor 函数中执行。\n- 如果运行在 excutor 函数中的业务执行成功了，会调用 resolve 函数；如果执行失败了，则调用 reject 函数。\n- Promise 的状态不可逆，同时调用 resolve 函数和 reject 函数，默认会采取第一次调用的结果。\n\n以上简单介绍了 Promise 的一些主要的使用方法，结合 [Promise/A+](https://link.zhihu.com/?target=https%3A//promisesaplus.com/) 规范，我们可以分析出 Promise 的基本特征：\n\n1. promise 有三个状态：`pending`，`fulfilled`，or `rejected`；「规范 Promise/A+ 2.1」\n2. `new promise`时， 需要传递一个`executor()`执行器，执行器立即执行；\n3. `executor`接受两个参数，分别是`resolve`和`reject`；\n4. promise 的默认状态是 `pending`；\n5. promise 有一个`value`保存成功状态的值，可以是`undefined/thenable/promise`；「规范 Promise/A+ 1.3」\n6. promise 有一个`reason`保存失败状态的值；「规范 Promise/A+ 1.5」\n7. promise 只能从`pending`到`rejected`, 或者从`pending`到`fulfilled`，状态一旦确认，就不会再改变；\n8. promise 必须有一个`then`方法，then 接收两个参数，分别是 promise 成功的回调 onFulfilled, 和 promise 失败的回调 onRejected；「规范 Promise/A+ 2.2」\n9. 如果调用 then 时，promise 已经成功，则执行`onFulfilled`，参数是`promise`的`value`；\n10. 如果调用 then 时，promise 已经失败，那么执行`onRejected`, 参数是`promise`的`reason`；\n11. 如果 then 中抛出了异常，那么就会把这个异常作为参数，传递给下一个 then 的失败的回调`onRejected`；\n\n按照上面的特征，我们试着勾勒下 Promise 的形状：\n\n```js\n// 三个状态：PENDING、FULFILLED、REJECTED\nconst PENDING = 'PENDING';\nconst FULFILLED = 'FULFILLED';\nconst REJECTED = 'REJECTED';\n\nclass Promise {\n  constructor(executor) {\n    // 默认状态为 PENDING\n    this.status = PENDING;\n    // 存放成功状态的值，默认为 undefined\n    this.value = undefined;\n    // 存放失败状态的值，默认为 undefined\n    this.reason = undefined;\n\n    // 调用此方法就是成功\n    let resolve = (value) => {\n      // 状态为 PENDING 时才可以更新状态，防止 executor 中调用了两次 resovle/reject 方法\n      if(this.status ===  PENDING) {\n        this.status = FULFILLED;\n        this.value = value;\n      }\n    } \n\n    // 调用此方法就是失败\n    let reject = (reason) => {\n      // 状态为 PENDING 时才可以更新状态，防止 executor 中调用了两次 resovle/reject 方法\n      if(this.status ===  PENDING) {\n        this.status = REJECTED;\n        this.reason = reason;\n      }\n    }\n\n    try {\n      // 立即执行，将 resolve 和 reject 函数传给使用者  \n      executor(resolve,reject)\n    } catch (error) {\n      // 发生异常时执行失败逻辑\n      reject(error)\n    }\n  }\n\n  // 包含一个 then 方法，并接收两个参数 onFulfilled、onRejected\n  then(onFulfilled, onRejected) {\n    if (this.status === FULFILLED) {\n      onFulfilled(this.value)\n    }\n\n    if (this.status === REJECTED) {\n      onRejected(this.reason)\n    }\n  }\n}\n```\n\n写完代码我们可以测试一下：\n\n```js\nconst promise = new Promise((resolve, reject) => {\n  resolve('成功');\n}).then(\n  (data) => {\n    console.log('success', data)\n  },\n  (err) => {\n    console.log('faild', err)\n  }\n)\n```\n\n控制台输出：\n\n```js\n\"success 成功\"\n```\n\n现在我们已经实现了一个基础版的 Promise，但是还不要高兴的太早噢，这里我们只处理了同步操作的 promise。如果在 `executor()`中传入一个异步操作的话呢，我们试一下：\n\n```js\nconst promise = new Promise((resolve, reject) => {\n  // 传入一个异步操作\n  setTimeout(() => {\n    resolve('成功');\n  },1000);\n}).then(\n  (data) => {\n    console.log('success', data)\n  },\n  (err) => {\n    console.log('faild', err)\n  }\n)\n```\n\n执行测试脚本后发现，promise 没有任何返回。\n\n因为 promise 调用 then 方法时，当前的 promise 并没有成功，一直处于 pending 状态。所以如果当调用 then 方法时，当前状态是 pending，我们需要先将成功和失败的回调分别存放起来，在`executor()`的异步任务被执行时，触发 resolve 或 reject，依次调用成功或失败的回调。\n\n结合这个思路，我们优化一下代码：\n\n```js\nconst PENDING = 'PENDING';\nconst FULFILLED = 'FULFILLED';\nconst REJECTED = 'REJECTED';\n\nclass Promise {\n  constructor(executor) {\n    this.status = PENDING;\n    this.value = undefined;\n    this.reason = undefined;\n    // 存放成功的回调\n    this.onResolvedCallbacks = [];\n    // 存放失败的回调\n    this.onRejectedCallbacks= [];\n\n    let resolve = (value) => {\n      if(this.status ===  PENDING) {\n        this.status = FULFILLED;\n        this.value = value;\n        // 依次将对应的函数执行\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    } \n\n    let reject = (reason) => {\n      if(this.status ===  PENDING) {\n        this.status = REJECTED;\n        this.reason = reason;\n        // 依次将对应的函数执行\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    }\n\n    try {\n      executor(resolve,reject)\n    } catch (error) {\n      reject(error)\n    }\n  }\n\n  then(onFulfilled, onRejected) {\n    if (this.status === FULFILLED) {\n      onFulfilled(this.value)\n    }\n\n    if (this.status === REJECTED) {\n      onRejected(this.reason)\n    }\n\n    if (this.status === PENDING) {\n      // 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行\n      this.onResolvedCallbacks.push(() => {\n        onFulfilled(this.value)\n      });\n\n      // 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行\n      this.onRejectedCallbacks.push(()=> {\n        onRejected(this.reason);\n      })\n    }\n  }\n}\n```\n\n测试一下：\n\n```js\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('成功');\n  },1000);\n}).then(\n  (data) => {\n    console.log('success', data)\n  },\n  (err) => {\n    console.log('faild', err)\n  }\n)\n```\n\n控制台等待 `1s` 后输出：\n\n```js\n\"success 成功\"\n```\n\nok！大功告成，异步问题已经解决了！\n\n熟悉设计模式的同学，应该意识到了这其实是一个**发布订阅模式**，这种`收集依赖 -> 触发通知 -> 取出依赖执行`的方式，被广泛运用于发布订阅模式的实现。\n\n#### then 的链式调用&值穿透特性\n\n我们都知道，promise 的优势在于可以链式调用。在我们使用 Promise 的时候，当 then 函数中 return 了一个值，不管是什么值，我们都能在下一个 then 中获取到，这就是所谓的**then 的链式调用**。而且，当我们不在 then 中放入参数，例：`promise.then().then()`，那么其后面的 then 依旧可以得到之前 then 返回的值，这就是所谓的**值的穿透**。那具体如何实现呢？简单思考一下，如果每次调用 then 的时候，我们都重新创建一个 promise 对象，并把上一个 then 的返回结果传给这个新的 promise 的 then 方法，不就可以一直 then 下去了么？那我们来试着实现一下。这也是手写 Promise 源码的重中之重，所以，打起精神来，重头戏来咯！\n\n有了上面的想法，我们再结合 [Promise/A+](https://link.zhihu.com/?target=https%3A//promisesaplus.com/) 规范梳理一下思路：\n\n1. then 的参数 `onFulfilled` 和 `onRejected` 可以缺省，如果 `onFulfilled` 或者 `onRejected`不是函数，将其忽略，且依旧可以在下面的 then 中获取到之前返回的值；「规范 Promise/A+ 2.2.1、2.2.1.1、2.2.1.2」\n2. promise 可以 then 多次，每次执行完 promise.then 方法后返回的都是一个“新的promise\"；「规范 Promise/A+ 2.2.7」\n3. 如果 then 的返回值 x 是一个普通值，那么就会把这个结果作为参数，传递给下一个 then 的成功的回调中；\n4. 如果 then 中抛出了异常，那么就会把这个异常作为参数，传递给下一个 then 的失败的回调中；「规范 Promise/A+ 2.2.7.2」\n5. 如果 then 的返回值 x 是一个 promise，那么会等这个 promise 执行完，promise 如果成功，就走下一个 then 的成功；如果失败，就走下一个 then 的失败；如果抛出异常，就走下一个 then 的失败；「规范 Promise/A+ 2.2.7.3、2.2.7.4」\n6. 如果 then 的返回值 x 和 promise 是同一个引用对象，造成循环引用，则抛出异常，把异常传递给下一个 then 的失败的回调中；「规范 Promise/A+ 2.3.1」\n7. 如果 then 的返回值 x 是一个 promise，且 x 同时调用 resolve 函数和 reject 函数，则第一次调用优先，其他所有调用被忽略；「规范 Promise/A+ 2.3.3.3.3」\n\n我们将代码补充完整：\n\n```js\nconst PENDING = 'PENDING';\nconst FULFILLED = 'FULFILLED';\nconst REJECTED = 'REJECTED';\n\nconst resolvePromise = (promise2, x, resolve, reject) => {\n  // 自己等待自己完成是错误的实现，用一个类型错误，结束掉 promise  Promise/A+ 2.3.1\n  if (promise2 === x) { \n    return reject(new TypeError('Chaining cycle detected for promise #<Promise>'))\n  }\n  // Promise/A+ 2.3.3.3.3 只能调用一次\n  let called;\n  // 后续的条件要严格判断 保证代码能和别的库一起使用\n  if ((typeof x === 'object' && x != null) || typeof x === 'function') { \n    try {\n      // 为了判断 resolve 过的就不用再 reject 了（比如 reject 和 resolve 同时调用的时候）  Promise/A+ 2.3.3.1\n      let then = x.then;\n      if (typeof then === 'function') { \n        // 不要写成 x.then，直接 then.call 就可以了 因为 x.then 会再次取值，Object.defineProperty  Promise/A+ 2.3.3.3\n        then.call(x, y => { // 根据 promise 的状态决定是成功还是失败\n          if (called) return;\n          called = true;\n          // 递归解析的过程（因为可能 promise 中还有 promise） Promise/A+ 2.3.3.3.1\n          resolvePromise(promise2, y, resolve, reject); \n        }, r => {\n          // 只要失败就失败 Promise/A+ 2.3.3.3.2\n          if (called) return;\n          called = true;\n          reject(r);\n        });\n      } else {\n        // 如果 x.then 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.3.4\n        resolve(x);\n      }\n    } catch (e) {\n      // Promise/A+ 2.3.3.2\n      if (called) return;\n      called = true;\n      reject(e)\n    }\n  } else {\n    // 如果 x 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.4  \n    resolve(x)\n  }\n}\n\nclass Promise {\n  constructor(executor) {\n    this.status = PENDING;\n    this.value = undefined;\n    this.reason = undefined;\n    this.onResolvedCallbacks = [];\n    this.onRejectedCallbacks= [];\n\n    let resolve = (value) => {\n      if(this.status ===  PENDING) {\n        this.status = FULFILLED;\n        this.value = value;\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    } \n\n    let reject = (reason) => {\n      if(this.status ===  PENDING) {\n        this.status = REJECTED;\n        this.reason = reason;\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    }\n\n    try {\n      executor(resolve,reject)\n    } catch (error) {\n      reject(error)\n    }\n  }\n\n  then(onFulfilled, onRejected) {\n    //解决 onFufilled，onRejected 没有传值的问题\n    //Promise/A+ 2.2.1 / Promise/A+ 2.2.5 / Promise/A+ 2.2.7.3 / Promise/A+ 2.2.7.4\n    onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : v => v;\n    //因为错误的值要让后面访问到，所以这里也要跑出个错误，不然会在之后 then 的 resolve 中捕获\n    onRejected = typeof onRejected === 'function' ? onRejected : err => { throw err };\n    // 每次调用 then 都返回一个新的 promise  Promise/A+ 2.2.7\n    let promise2 = new Promise((resolve, reject) => {\n      if (this.status === FULFILLED) {\n        //Promise/A+ 2.2.2\n        //Promise/A+ 2.2.4 --- setTimeout\n        setTimeout(() => {\n          try {\n            //Promise/A+ 2.2.7.1\n            let x = onFulfilled(this.value);\n            // x可能是一个proimise\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            //Promise/A+ 2.2.7.2\n            reject(e)\n          }\n        }, 0);\n      }\n\n      if (this.status === REJECTED) {\n        //Promise/A+ 2.2.3\n        setTimeout(() => {\n          try {\n            let x = onRejected(this.reason);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e)\n          }\n        }, 0);\n      }\n\n      if (this.status === PENDING) {\n        this.onResolvedCallbacks.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onFulfilled(this.value);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (e) {\n              reject(e)\n            }\n          }, 0);\n        });\n\n        this.onRejectedCallbacks.push(()=> {\n          setTimeout(() => {\n            try {\n              let x = onRejected(this.reason);\n              resolvePromise(promise2, x, resolve, reject)\n            } catch (e) {\n              reject(e)\n            }\n          }, 0);\n        });\n      }\n    });\n\n    return promise2;\n  }\n}\n```\n\n测试一下：\n\n```js\nconst promise = new Promise((resolve, reject) => {\n  reject('失败');\n}).then().then().then(data=>{\n  console.log(data);\n},err=>{\n  console.log('err',err);\n})\n```\n\n控制台输出：\n\n```js\n\"失败 err\"\n```\n\n至此，我们已经完成了 promise 最关键的部分：then 的链式调用和值的穿透。搞清楚了 then 的链式调用和值的穿透，你也就搞清楚了 Promise。\n\n#### 测试 Promise 是否符合规范\n\nPromise/A+规范提供了一个专门的测试脚本，可以测试所编写的代码是否符合Promise/A+的规范。\n\n首先，在 promise 实现的代码中，增加以下代码:\n\n```js\nPromise.defer = Promise.deferred = function () {\n  let dfd = {};\n  dfd.promise = new Promise((resolve,reject)=>{\n      dfd.resolve = resolve;\n      dfd.reject = reject;\n  })\n  return dfd;\n}\n```\n\n安装测试脚本:\n\n```js\nnpm install -g promises-aplus-tests\n```\n\n如果当前的 promise 源码的文件名为 promise.js\n\n那么在对应的目录执行以下命令:\n\n```js\npromises-aplus-tests promise.js\n```\n\npromises-aplus-tests 中共有 872 条测试用例。以上代码，可以完美通过所有用例。\n\n**感谢小伙伴的提醒，由于文章中使用 setTimeout 实现 promise 的异步，会对大家造成误解。所以这里添加一些标注:**\n\n由于原生的 Promise 是V8引擎提供的微任务，我们无法还原V8引擎的实现，所以这里使用 setTimeout 模拟异步，所以原生的是微任务，这里是宏任务。\n\nPromise A+ 规范3.1 中也提到了：这可以通过“宏任务”机制（例如setTimeout或setImmediate）或“微任务”机制（例如MutatonObserver或）来实现process.nextTick。\n\n如果你想实现 promise 的微任务，可以 mutationObserver 替代 seiTimeout 来实现微任务。\n\n有小伙伴说可以使用 queueMicrotask 实现微任务，我也查阅了一些资料，是可以的。不过 queueMicrotask 兼容性不是很好，IE 下完全不支持。据我所知 queueMicrotask 的 polyfill 是基于 promise 实现的，如果不支持 promise 会转成 setTimeout。\n\n总的来说，queueMicrotask 和 mutationObserver 都可以实现微任务机制，不过更建议有执念的小伙伴用 mutationObserver 实现一下，没有执念的小伙伴了解 promise 的微任务机制就好了～\n\n### Promise 的 API\n\n虽然上述的 promise 源码已经符合 Promise/A+ 的规范，但是原生的 Promise 还提供了一些其他方法，如:\n\n- Promise.resolve()\n- Promise.reject()\n- Promise.prototype.catch()\n- Promise.prototype.finally()\n- Promise.all()\n- Promise.race(）\n\n下面具体说一下每个方法的实现:\n\n#### Promise.resolve\n\n默认产生一个成功的 promise。\n\n```js\nstatic resolve(data){\n  return new Promise((resolve,reject)=>{\n    resolve(data);\n  })\n}\n```\n\n这里需要注意的是，**promise.resolve 是具备等待功能的**。如果参数是 promise 会等待这个 promise 解析完毕，在向下执行，所以这里需要在 resolve 方法中做一个小小的处理：\n\n```js\nlet resolve = (value) => {\n  // ======新增逻辑======\n  // 如果 value 是一个promise，那我们的库中应该也要实现一个递归解析\n  if(value instanceof Promise){\n      // 递归解析 \n      return value.then(resolve,reject)\n  }\n  // ===================\n  if(this.status ===  PENDING) {\n    this.status = FULFILLED;\n    this.value = value;\n    this.onResolvedCallbacks.forEach(fn=>fn());\n  }\n}\n```\n\n测试一下：\n\n```js\nPromise.resolve(new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('ok');\n  }, 3000);\n})).then(data=>{\n  console.log(data,'success')\n}).catch(err=>{\n  console.log(err,'error')\n})\n```\n\n控制台等待 `3s` 后输出：\n\n```js\n\"ok success\"\n```\n\n#### Promise.reject\n\n默认产生一个失败的 promise，Promise.reject 是直接将值变成错误结果。\n\n```js\nstatic reject(reason){\n  return new Promise((resolve,reject)=>{\n    reject(reason);\n  })\n}\n```\n\n#### Promise.prototype.catch\n\nPromise.prototype.catch 用来捕获 promise 的异常，**就相当于一个没有成功的 then**。\n\n```js\nPromise.prototype.catch = function(errCallback){\n  return this.then(null,errCallback)\n}\n```\n\n#### Promise.prototype.finally\n\nfinally 表示不是最终的意思，而是无论如何都会执行的意思。 如果返回一个 promise 会等待这个 promise 也执行完毕。如果返回的是成功的 promise，会采用上一次的结果；如果返回的是失败的 promise，会用这个失败的结果，传到 catch 中。\n\n```js\nPromise.prototype.finally = function(callback) {\n  return this.then((value)=>{\n    return Promise.resolve(callback()).then(()=>value)\n  },(reason)=>{\n    return Promise.resolve(callback()).then(()=>{throw reason})\n  })  \n}\n```\n\n测试一下：\n\n```js\nPromise.resolve(456).finally(()=>{\n  return new Promise((resolve,reject)=>{\n    setTimeout(() => {\n        resolve(123)\n    }, 3000);\n  })\n}).then(data=>{\n  console.log(data,'success')\n}).catch(err=>{\n  console.log(err,'error')\n})\n```\n\n控制台等待 `3s` 后输出：\n\n```js\n\"456 success\"\n```\n\n#### Promise.all\n\npromise.all 是解决并发问题的，多个异步并发获取最终的结果（如果有一个失败则失败）。\n\n```js\nPromise.all = function(values) {\n  if (!Array.isArray(values)) {\n    const type = typeof values;\n    return new TypeError(`TypeError: ${type} ${values} is not iterable`)\n  }\n  return new Promise((resolve, reject) => {\n    let resultArr = [];\n    let orderIndex = 0;\n    const processResultByKey = (value, index) => {\n      resultArr[index] = value;\n      if (++orderIndex === values.length) {\n          resolve(resultArr)\n      }\n    }\n    for (let i = 0; i < values.length; i++) {\n      let value = values[i];\n      if (value && typeof value.then === 'function') {\n        value.then((value) => {\n          processResultByKey(value, i);\n        }, reject);\n      } else {\n        processResultByKey(value, i);\n      }\n    }\n  });\n}\n```\n\n测试一下：\n\n```js\nlet p1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('ok1');\n  }, 1000);\n})\n\nlet p2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    reject('ok2');\n  }, 1000);\n})\n\nPromise.all([1,2,3,p1,p2]).then(data => {\n  console.log('resolve', data);\n}, err => {\n  console.log('reject', err);\n})\n```\n\n控制台等待 `1s` 后输出：\n\n```js\n\"resolve [ 1, 2, 3, 'ok1', 'ok2' ]\"\n```\n\n#### Promise.race\n\nPromise.race 用来处理多个请求，采用最快的（谁先完成用谁的）。\n\n```js\nPromise.race = function(promises) {\n  return new Promise((resolve, reject) => {\n    // 一起执行就是for循环\n    for (let i = 0; i < promises.length; i++) {\n      let val = promises[i];\n      if (val && typeof val.then === 'function') {\n        val.then(resolve, reject);\n      } else { // 普通值\n        resolve(val)\n      }\n    }\n  });\n}\n```\n\n特别需要注意的是：因为**Promise 是没有中断方法的**，xhr.abort()、ajax 有自己的中断方法，axios 是基于 ajax 实现的；fetch 基于 promise，所以他的请求是无法中断的。\n\n这也是 promise 存在的缺陷，我们可以使用 race 来自己封装中断方法：\n\n```js\nfunction wrap(promise) {\n  // 在这里包装一个 promise，可以控制原来的promise是成功还是失败\n  let abort;\n  let newPromise = new Promise((resolve, reject) => { // defer 方法\n      abort = reject;\n  });\n  let p = Promise.race([promise, newPromise]); // 任何一个先成功或者失败 就可以获取到结果\n  p.abort = abort;\n  return p;\n}\n\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => { // 模拟的接口调用 ajax 肯定有超时设置\n      resolve('成功');\n  }, 1000);\n});\n\nlet newPromise = wrap(promise);\n\nsetTimeout(() => {\n  // 超过3秒 就算超时 应该让 proimise 走到失败态\n  newPromise.abort('超时了');\n}, 3000);\n\nnewPromise.then((data => {\n    console.log('成功的结果' + data)\n})).catch(e => {\n    console.log('失败的结果' + e)\n})\n```\n\n控制台等待 `1s` 后输出：\n\n```js\n\"成功的结果成功\"\n```\n\n#### promisify\n\npromisify 是把一个 node 中的 api 转换成 promise 的写法。 在 node 版本 12.18 以上，已经支持了原生的 promisify 方法：`const fs = require('fs').promises`。\n\n```js\nconst promisify = (fn) => { // 典型的高阶函数 参数是函数 返回值是函数 \n  return (...args)=>{\n    return new Promise((resolve,reject)=>{\n      fn(...args,function (err,data) { // node中的回调函数的参数 第一个永远是error\n        if(err) return reject(err);\n        resolve(data);\n      })\n    });\n  }\n}\n```\n\n如果想要把 node 中所有的 api 都转换成 promise 的写法呢：\n\n```js\nconst promisifyAll = (target) =>{\n  Reflect.ownKeys(target).forEach(key=>{\n    if(typeof target[key] === 'function'){\n      // 默认会将原有的方法 全部增加一个 Async 后缀 变成 promise 写法\n      target[key+'Async'] = promisify(target[key]);\n    }\n  });\n  return target;\n}\n```\n\n### 5. 手写防抖函数\n\n函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。\n\n```javascript\n// 函数防抖的实现\nfunction debounce(fn, wait) {\n  let timer = null;\n\n  return function() {\n    let context = this,\n        args = arguments;\n\n    // 如果此时存在定时器的话，则取消之前的定时器重新记时\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n\n    // 设置定时器，使事件间隔指定事件后执行\n    timer = setTimeout(() => {\n      fn.apply(context, args);\n    }, wait);\n  };\n}\n```\n\n### 6. 手写节流函数\n\n函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。\n\n```javascript\n// 函数节流的实现;\nfunction throttle(fn, delay) {\n  let curTime = Date.now();\n\n  return function() {\n    let context = this,\n        args = arguments,\n        nowTime = Date.now();\n\n    // 如果两次时间间隔超过了指定时间，则执行函数。\n    if (nowTime - curTime >= delay) {\n      curTime = Date.now();\n      return fn.apply(context, args);\n    }\n  };\n}\n```\n\n### 7. 手写类型判断函数\n\n```javascript\nfunction getType(value) {\n  // 判断数据是 null 的情况\n  if (value === null) {\n    return value + \"\";\n  }\n  // 判断数据是引用类型的情况\n  if (typeof value === \"object\") {\n    let valueClass = Object.prototype.toString.call(value),\n      type = valueClass.split(\" \")[1].split(\"\");\n    type.pop();\n    return type.join(\"\").toLowerCase();\n  } else {\n    // 判断数据是基本数据类型的情况和函数的情况\n    return typeof value;\n  }\n}\n```\n\n### 8. 手写 call 函数\n\ncall 函数的实现步骤：\n\n1. 判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n2. 判断传入上下文对象是否存在，如果不存在，则设置为 window 。\n3. 处理传入的参数，截取第一个参数后的所有参数。\n4. 将函数作为上下文对象的一个属性。\n5. 使用上下文对象来调用这个方法，并保存返回结果。\n6. 删除刚才新增的属性。\n7. 返回结果。\n\n```javascript\n// call函数实现\nFunction.prototype.myCall = function(context) {\n  // 判断调用对象\n  if (typeof this !== \"function\") {\n    console.error(\"type error\");\n  }\n  // 获取参数\n  let args = [...arguments].slice(1),\n      result = null;\n  // 判断 context 是否传入，如果未传入则设置为 window\n  context = context || window;\n  // 将调用函数设为对象的方法\n  context.fn = this;\n  // 调用函数\n  result = context.fn(...args);\n  // 将属性删除\n  delete context.fn;\n  return result;\n};\n```\n\n### 9. 手写 apply 函数\n\napply 函数的实现步骤：\n\n1. 判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n2. 判断传入上下文对象是否存在，如果不存在，则设置为 window 。\n3. 将函数作为上下文对象的一个属性。\n4. 判断参数值是否传入\n5. 使用上下文对象来调用这个方法，并保存返回结果。\n6. 删除刚才新增的属性\n7. 返回结果\n\n```javascript\n// apply 函数实现\nFunction.prototype.myApply = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== \"function\") {\n    throw new TypeError(\"Error\");\n  }\n  let result = null;\n  // 判断 context 是否存在，如果未传入则为 window\n  context = context || window;\n  // 将函数设为对象的方法\n  context.fn = this;\n  // 调用方法\n  if (arguments[1]) {\n    result = context.fn(...arguments[1]);\n  } else {\n    result = context.fn();\n  }\n  // 将属性删除\n  delete context.fn;\n  return result;\n};\n```\n\n### 10. 手写 bind 函数\n\nbind 函数的实现步骤：\n\n1. 判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n2. 保存当前函数的引用，获取其余传入参数值。\n3. 创建一个函数返回\n4. 函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。\n\n```javascript\n// bind 函数实现\nFunction.prototype.myBind = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== \"function\") {\n    throw new TypeError(\"Error\");\n  }\n  // 获取参数\n  var args = [...arguments].slice(1),\n      fn = this;\n  return function Fn() {\n    // 根据调用方式，传入不同绑定值\n    return fn.apply(\n      this instanceof Fn ? this : context,\n      args.concat(...arguments)\n    );\n  };\n};\n```\n\n### 11. 函数柯里化的实现\n\n函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。\n\n```javascript\nfunction curry(fn, args) {\n  // 获取函数需要的参数长度\n  let length = fn.length;\n\n  args = args || [];\n\n  return function() {\n    let subArgs = args.slice(0);\n\n    // 拼接得到现有的所有参数\n    for (let i = 0; i < arguments.length; i++) {\n      subArgs.push(arguments[i]);\n    }\n\n    // 判断参数的长度是否已经满足函数所需参数的长度\n    if (subArgs.length >= length) {\n      // 如果满足，执行函数\n      return fn.apply(this, subArgs);\n    } else {\n      // 如果不满足，递归返回科里化的函数，等待参数的传入\n      return curry.call(this, fn, subArgs);\n    }\n  };\n}\n\n// es6 实现\nfunction curry(fn, ...args) {\n  return fn.length <= args.length ? fn(...args) : curry.bind(null, fn, ...args);\n}\n```\n\n### 12. 实现AJAX请求\n\nAJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。\n\n创建AJAX请求的步骤：\n\n- **创建一个 XMLHttpRequest 对象。**\n- 在这个对象上**使用 open 方法创建一个 HTTP 请求**，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。\n- 在发起请求前，可以为这个对象**添加一些信息和监听函数**。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。\n- 当对象的属性和监听函数设置完成后，最后调**用 sent 方法来向服务器发起请求**，可以传入参数作为发送的数据体。\n\n```javascript\nconst SERVER_URL = \"/server\";\nlet xhr = new XMLHttpRequest();\n// 创建 Http 请求\nxhr.open(\"GET\", SERVER_URL, true);\n// 设置状态监听函数\nxhr.onreadystatechange = function() {\n  if (this.readyState !== 4) return;\n  // 当请求成功时\n  if (this.status === 200) {\n    handle(this.response);\n  } else {\n    console.error(this.statusText);\n  }\n};\n// 设置请求失败时的监听函数\nxhr.onerror = function() {\n  console.error(this.statusText);\n};\n// 设置请求头信息\nxhr.responseType = \"json\";\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n// 发送 Http 请求\nxhr.send(null);\n```\n\n### 13. 使用Promise封装AJAX请求\n\n```javascript\n// promise 封装实现：\nfunction getJSON(url) {\n  // 创建一个 promise 对象\n  let promise = new Promise(function(resolve, reject) {\n    let xhr = new XMLHttpRequest();\n    // 新建一个 http 请求\n    xhr.open(\"GET\", url, true);\n    // 设置状态的监听函数\n    xhr.onreadystatechange = function() {\n      if (this.readyState !== 4) return;\n      // 当请求成功或失败时，改变 promise 的状态\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n    // 设置错误监听函数\n    xhr.onerror = function() {\n      reject(new Error(this.statusText));\n    };\n    // 设置响应的数据类型\n    xhr.responseType = \"json\";\n    // 设置请求头信息\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n    // 发送 http 请求\n    xhr.send(null);\n  });\n  return promise;\n}\n```\n\n### 14. 实现浅拷贝\n\n浅拷贝是指，一个新的对象对原始对象的属性值进行精确地拷贝，如果拷贝的是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是内存地址。如果其中一个对象的引用内存地址发生改变，另一个对象也会发生变化。\n\n#### （1）Object.assign()\n\n`Object.assign()`是ES6中对象的拷贝方法，接受的第一个参数是目标对象，其余参数是源对象，用法：`Object.assign(target, source_1, ···)`，该方法可以实现浅拷贝，也可以实现一维对象的深拷贝。\n\n**注意：**\n\n- 如果目标对象和源对象有同名属性，或者多个源对象有同名属性，则后面的属性会覆盖前面的属性。\n- 如果该函数只有一个参数，当参数为对象时，直接返回该对象；当参数不是对象时，会先将参数转为对象然后返回。\n- 因为`null` 和 `undefined` 不能转化为对象，所以第一个参数不能为`null`或 `undefined`，会报错。\n\n```javascript\nlet target = {a: 1};\nlet object2 = {b: 2};\nlet object3 = {c: 3};\nObject.assign(target,object2,object3);  \nconsole.log(target);  // {a: 1, b: 2, c: 3}\n```\n\n#### （2）扩展运算符\n\n使用扩展运算符可以在构造字面量对象的时候，进行属性的拷贝。语法：`let cloneObj = { ...obj };`\n\n```javascript\nlet obj1 = {a:1,b:{c:1}}\nlet obj2 = {...obj1};\nobj1.a = 2;\nconsole.log(obj1); //{a:2,b:{c:1}}\nconsole.log(obj2); //{a:1,b:{c:1}}\nobj1.b.c = 2;\nconsole.log(obj1); //{a:2,b:{c:2}}\nconsole.log(obj2); //{a:1,b:{c:2}}\n```\n\n#### （3）数组方法实现数组浅拷贝\n\n###### **1）Array.prototype.slice**\n\n- `slice()`方法是JavaScript数组的一个方法，这个方法可以从已有数组中返回选定的元素：用法：`array.slice(start, end)`，该方法不会改变原始数组。\n- 该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。\n\n```javascript\nlet arr = [1,2,3,4];\nconsole.log(arr.slice()); // [1,2,3,4]\nconsole.log(arr.slice() === arr); //false\n```\n\n###### **2）Array.prototype.concat**\n\n- `concat()` 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。\n- 该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。\n\n```javascript\nlet arr = [1,2,3,4];\nconsole.log(arr.concat()); // [1,2,3,4]\nconsole.log(arr.concat() === arr); //false\n```\n\n#### （4）手写实现浅拷贝\n\n```javascript\n// 浅拷贝的实现;\n\nfunction shallowCopy(object) {\n  // 只拷贝对象\n  if (!object || typeof object !== \"object\") return;\n\n  // 根据 object 的类型判断是新建一个数组还是对象\n  let newObject = Array.isArray(object) ? [] : {};\n\n  // 遍历 object，并且判断是 object 的属性才拷贝\n  for (let key in object) {\n    if (object.hasOwnProperty(key)) {\n      newObject[key] = object[key];\n    }\n  }\n\n  return newObject;\n}// 浅拷贝的实现;\n\nfunction shallowCopy(object) {\n  // 只拷贝对象\n  if (!object || typeof object !== \"object\") return;\n\n  // 根据 object 的类型判断是新建一个数组还是对象\n  let newObject = Array.isArray(object) ? [] : {};\n\n  // 遍历 object，并且判断是 object 的属性才拷贝\n  for (let key in object) {\n    if (object.hasOwnProperty(key)) {\n      newObject[key] = object[key];\n    }\n  }\n\n  return newObject;\n}// 浅拷贝的实现;\nfunction shallowCopy(object) {\n  // 只拷贝对象\n  if (!object || typeof object !== \"object\") return;\n  // 根据 object 的类型判断是新建一个数组还是对象\n  let newObject = Array.isArray(object) ? [] : {};\n  // 遍历 object，并且判断是 object 的属性才拷贝\n  for (let key in object) {\n    if (object.hasOwnProperty(key)) {\n      newObject[key] = object[key];\n    }\n  }\n  return newObject;\n}\n```\n\n### 15. 实现深拷贝\n\n- **浅拷贝：** 浅拷贝指的是将一个对象的属性值复制到另一个对象，如果有的属性的值为引用类型的话，那么会将这个引用的地址复制给对象，因此两个对象会有同一个引用类型的引用。浅拷贝可以使用  Object.assign 和展开运算符来实现。\n- **深拷贝：** 深拷贝相对浅拷贝而言，如果遇到属性值为引用类型的时候，它新建一个引用类型并将对应的值复制给它，因此对象获得的一个新的引用类型而不是一个原有类型的引用。深拷贝对于一些对象可以使用 JSON 的两个函数来实现，但是由于 JSON 的对象格式比 js 的对象格式更加严格，所以如果属性值里边出现函数或者 Symbol 类型的值时，会转换失败\n\n#### （1）JSON.stringify()\n\n- `JSON.parse(JSON.stringify(obj))`是目前比较常用的深拷贝方法之一，它的原理就是利用`JSON.stringify` 将`js`对象序列化（JSON字符串），再使用`JSON.parse`来反序列化(还原)`js`对象。\n- 这个方法可以简单粗暴的实现深拷贝，但是还存在问题，拷贝的对象中如果有函数，undefined，symbol，当使用过`JSON.stringify()`进行处理之后，都会消失。\n\n```javascript\nlet obj1 = {  a: 0,\n              b: {\n                 c: 0\n                 }\n            };\nlet obj2 = JSON.parse(JSON.stringify(obj1));\nobj1.a = 1;\nobj1.b.c = 1;\nconsole.log(obj1); // {a: 1, b: {c: 1}}\nconsole.log(obj2); // {a: 0, b: {c: 0}}\n```\n\n#### （2）函数库lodash的_.cloneDeep方法\n\n该函数库也有提供_.cloneDeep用来做 Deep Copy\n\n```javascript\nvar _ = require('lodash');\nvar obj1 = {\n    a: 1,\n    b: { f: { g: 1 } },\n    c: [1, 2, 3]\n};\nvar obj2 = _.cloneDeep(obj1);\nconsole.log(obj1.b.f === obj2.b.f);// false\n```\n\n#### （3）手写实现深拷贝函数\n\n```javascript\n// 深拷贝的实现\nfunction deepCopy(object) {\n  if (!object || typeof object !== \"object\") return;\n\n  let newObject = Array.isArray(object) ? [] : {};\n\n  for (let key in object) {\n    if (object.hasOwnProperty(key)) {\n      newObject[key] =\n        typeof object[key] === \"object\" ? deepCopy(object[key]) : object[key];\n    }\n  }\n\n  return newObject;\n}\n```\n\n## 二、数据处理\n\n### 1. 实现日期格式化函数\n\n输入：\n\n```javascript\ndateFormat(new Date('2020-12-01'), 'yyyy/MM/dd') // 2020/12/01\ndateFormat(new Date('2020-04-01'), 'yyyy/MM/dd') // 2020/04/01\ndateFormat(new Date('2020-04-01'), 'yyyy年MM月dd日') // 2020年04月01日\nconst dateFormat = (dateInput, format)=>{\n    var day = dateInput.getDate() \n    var month = dateInput.getMonth() + 1  \n    var year = dateInput.getFullYear()   \n    format = format.replace(/yyyy/, year)\n    format = format.replace(/MM/,month)\n    format = format.replace(/dd/,day)\n    return format\n}\n```\n\n### 2. 交换a,b的值，不能用临时变量\n\n巧妙的利用两个数的和、差：\n\n```javascript\na = a + b\nb = a - b\na = a - b\n```\n\n### 3. 实现数组的乱序输出\n\n主要的实现思路就是：\n\n- 取出数组的第一个元素，随机产生一个索引值，将该第一个元素和这个索引对应的元素进行交换。\n- 第二次取出数据数组第二个元素，随机产生一个除了索引为1的之外的索引值，并将第二个元素与该索引值对应的元素进行交换\n- 按照上面的规律执行，直到遍历完成\n\n```javascript\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nfor (var i = 0; i < arr.length; i++) {\n  const randomIndex = Math.round(Math.random() * (arr.length - 1 - i)) + i;\n  [arr[i], arr[randomIndex]] = [arr[randomIndex], arr[i]];\n}\nconsole.log(arr)\n```\n\n还有一方法就是倒序遍历：\n\n```javascript\nvar arr = [1,2,3,4,5,6,7,8,9,10];\nlet length = arr.length,\n    randomIndex,\n    temp;\n  while (length) {\n    randomIndex = Math.floor(Math.random() * length--);\n    temp = arr[length];\n    arr[length] = arr[randomIndex];\n    arr[randomIndex] = temp;\n  }\nconsole.log(arr)\n```\n\n### 4. 实现数组元素求和\n\n- arr=[1,2,3,4,5,6,7,8,9,10]，求和\n\n```javascript\nlet arr=[1,2,3,4,5,6,7,8,9,10]\nlet sum = arr.reduce( (total,i) => total += i,0);\nconsole.log(sum);\n```\n\n- arr=[1,2,3,[[4,5],6],7,8,9]，求和\n\n```javascript\nvar = arr=[1,2,3,[[4,5],6],7,8,9]\nlet arr= arr.toString().split(',').reduce( (total,i) => total += Number(i),0);\nconsole.log(arr);\n```\n\n递归实现：\n\n```javascript\nlet arr = [1, 2, 3, 4, 5, 6] \n\nfunction add(arr) {\n    if (arr.length == 1) return arr[0] \n    return arr[0] + add(arr.slice(1)) \n}\nconsole.log(add(arr)) // 21\n```\n\n### 5. 实现数组的扁平化\n\n**（1）递归实现**\n\n普通的递归思路很容易理解，就是通过循环递归的方式，一项一项地去遍历，如果每一项还是一个数组，那么就继续往下遍历，利用递归程序的方法，来实现数组的每一项的连接：\n\n```javascript\nlet arr = [1, [2, [3, 4, 5]]];\nfunction flatten(arr) {\n  let result = [];\n\n  for(let i = 0; i < arr.length; i++) {\n    if(Array.isArray(arr[i])) {\n      result = result.concat(flatten(arr[i]));\n    } else {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\nflatten(arr);  //  [1, 2, 3, 4，5]\n```\n\n**（2）reduce 函数迭代**\n\n从上面普通的递归函数中可以看出，其实就是对数组的每一项进行处理，那么其实也可以用reduce 来实现数组的拼接，从而简化第一种方法的代码，改造后的代码如下所示：\n\n```javascript\nlet arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n    return arr.reduce(function(prev, next){\n        return prev.concat(Array.isArray(next) ? flatten(next) : next)\n    }, [])\n}\nconsole.log(flatten(arr));//  [1, 2, 3, 4，5]\n```\n\n**（3）扩展运算符实现**\n\n这个方法的实现，采用了扩展运算符和 some 的方法，两者共同使用，达到数组扁平化的目的：\n\n```javascript\nlet arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n    while (arr.some(item => Array.isArray(item))) {\n        arr = [].concat(...arr);\n    }\n    return arr;\n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n```\n\n**（4）split 和 toString**\n\n可以通过 split 和 toString 两个方法来共同实现数组扁平化，由于数组会默认带一个 toString 的方法，所以可以把数组直接转换成逗号分隔的字符串，然后再用 split 方法把字符串重新转换为数组，如下面的代码所示：\n\n```javascript\nlet arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n    return arr.toString().split(',');\n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n```\n\n通过这两个方法可以将多维数组直接转换成逗号连接的字符串，然后再重新分隔成数组。\n\n**（5）ES6 中的 flat**\n\n我们还可以直接调用 ES6 中的 flat 方法来实现数组扁平化。flat 方法的语法：`arr.flat([depth])`\n\n其中 depth 是 flat 的参数，depth 是可以传递数组的展开深度（默认不填、数值是 1），即展开一层数组。如果层数不确定，参数可以传进 Infinity，代表不论多少层都要展开：\n\n```javascript\nlet arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n  return arr.flat(Infinity);\n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n```\n\n可以看出，一个嵌套了两层的数组，通过将 flat 方法的参数设置为 Infinity，达到了我们预期的效果。其实同样也可以设置成 2，也能实现这样的效果。在编程过程中，如果数组的嵌套层数不确定，最好直接使用 Infinity，可以达到扁平化。 **（6）正则和 JSON 方法** 在第4种方法中已经使用 toString 方法，其中仍然采用了将 JSON.stringify 的方法先转换为字符串，然后通过正则表达式过滤掉字符串中的数组的方括号，最后再利用 JSON.parse 把它转换成数组：\n\n```javascript\nlet arr = [1, [2, [3, [4, 5]]], 6];\nfunction flatten(arr) {\n  let str = JSON.stringify(arr);\n  str = str.replace(/(\\[|\\])/g, '');\n  str = '[' + str + ']';\n  return JSON.parse(str); \n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n```\n\n### 6. 实现数组去重\n\n给定某无序数组，要求去除数组中的重复数字并且返回新的无重复数组。\n\nES6方法（使用数据结构集合）：\n\n```javascript\nconst array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];\n\nArray.from(new Set(array)); // [1, 2, 3, 5, 9, 8]\n```\n\nES5方法：使用map存储不重复的数字\n\n```javascript\nconst array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];\n\nuniqueArray(array); // [1, 2, 3, 5, 9, 8]\n\nfunction uniqueArray(array) {\n  let map = {};\n  let res = [];\n  for(var i = 0; i < array.length; i++) {\n    if(!map.hasOwnProperty([array[i]])) {\n      map[array[i]] = 1;\n      res.push(array[i]);\n    }\n  }\n  return res;\n}\n```\n\n### 7. 实现数组的flat方法\n\n```javascript\nfunction _flat(arr, depth) {\n  if(!Array.isArray(arr) || depth <= 0) {\n    return arr;\n  }\n  return arr.reduce((prev, cur) => {\n    if (Array.isArray(cur)) {\n      return prev.concat(_flat(cur, depth - 1))\n    } else {\n      return prev.concat(cur);\n    }\n  }, []);\n}\n```\n\n### 8. 实现数组的push方法\n\n```javascript\nlet arr = [];\nArray.prototype.push = function() {\n\tfor( let i = 0 ; i < arguments.length ; i++){\n\t\tthis[this.length] = arguments[i] ;\n\t}\n\treturn this.length;\n}\n```\n\n### 9. 实现数组的filter方法\n\n```javascript\nArray.prototype._filter = function(fn) {\n    if (typeof fn !== \"function\") {\n        throw Error('参数必须是一个函数');\n    }\n    const res = [];\n    for (let i = 0, len = this.length; i < len; i++) {\n        fn(this[i]) && res.push(this[i]);\n    }\n    return res;\n}\n```\n\n### 10. 实现数组的map方法\n\n```javascript\nArray.prototype._map = function(fn) {\n   if (typeof fn !== \"function\") {\n        throw Error('参数必须是一个函数');\n    }\n    const res = [];\n    for (let i = 0, len = this.length; i < len; i++) {\n        res.push(fn(this[i]));\n    }\n    return res;\n}\n```\n\n### 11. 实现字符串的repeat方法\n\n输入字符串s，以及其重复的次数，输出重复的结果，例如输入abc，2，输出abcabc。\n\n```javascript\nfunction repeat(s, n) {\n    return (new Array(n + 1)).join(s);\n}\n```\n\n递归：\n\n```javascript\nfunction repeat(s, n) {\n    return (n > 0) ? s.concat(repeat(s, --n)) : \"\";\n}\n```\n\n### 12. 实现字符串翻转\n\n在字符串的原型链上添加一个方法，实现字符串翻转：\n\n```javascript\nString.prototype._reverse = function(a){\n    return a.split(\"\").reverse().join(\"\");\n}\nvar obj = new String();\nvar res = obj._reverse ('hello');\nconsole.log(res);    // olleh\n```\n\n需要注意的是，必须通过实例化对象之后再去调用定义的方法，不然找不到该方法。\n\n### 13. 将数字每千分位用逗号隔开\n\n**数字有小数版本：**\n\n```javascript\nlet format = n => {\n    let num = n.toString() // 转成字符串\n    let decimals = ''\n        // 判断是否有小数\n    num.indexOf('.') > -1 ? decimals = num.split('.')[1] : decimals\n    let len = num.length\n    if (len <= 3) {\n        return num\n    } else {\n        let temp = ''\n        let remainder = len % 3\n        decimals ? temp = '.' + decimals : temp\n        if (remainder > 0) { // 不是3的整数倍\n            return num.slice(0, remainder) + ',' + num.slice(remainder, len).match(/\\d{3}/g).join(',') + temp\n        } else { // 是3的整数倍\n            return num.slice(0, len).match(/\\d{3}/g).join(',') + temp \n        }\n    }\n}\nformat(12323.33)  // '12,323.33'\n```\n\n**数字无小数版本：**\n\n```javascript\nlet format = n => {\n    let num = n.toString() \n    let len = num.length\n    if (len <= 3) {\n        return num\n    } else {\n        let remainder = len % 3\n        if (remainder > 0) { // 不是3的整数倍\n            return num.slice(0, remainder) + ',' + num.slice(remainder, len).match(/\\d{3}/g).join(',') \n        } else { // 是3的整数倍\n            return num.slice(0, len).match(/\\d{3}/g).join(',') \n        }\n    }\n}\nformat(1232323)  // '1,232,323'\n```\n\n### 14. 实现非负大整数相加\n\nJavaScript对数值有范围的限制，限制如下：\n\n```javascript\nNumber.MAX_VALUE // 1.7976931348623157e+308\nNumber.MAX_SAFE_INTEGER // 9007199254740991\nNumber.MIN_VALUE // 5e-324\nNumber.MIN_SAFE_INTEGER // -9007199254740991\n```\n\n如果想要对一个超大的整数(`> Number.MAX_SAFE_INTEGER`)进行加法运算，但是又想输出一般形式，那么使用 + 是无法达到的，一旦数字超过 `Number.MAX_SAFE_INTEGER` 数字会被立即转换为科学计数法，并且数字精度相比以前将会有误差。\n\n实现一个算法进行大数的相加：\n\n```javascript\nfunction sumBigNumber(a, b) {\n  let res = '';\n  let temp = 0;\n  \n  a = a.split('');\n  b = b.split('');\n  \n  while (a.length || b.length || temp) {\n    temp += ~~a.pop() + ~~b.pop();\n    res = (temp % 10) + res;\n    temp  = temp > 9\n  }\n  return res.replace(/^0+/, '');\n}\n```\n\n其主要的思路如下：\n\n- 首先用字符串的方式来保存大数，这样数字在数学表示上就不会发生变化\n- 初始化res，temp来保存中间的计算结果，并将两个字符串转化为数组，以便进行每一位的加法运算\n- 将两个数组的对应的位进行相加，两个数相加的结果可能大于10，所以可能要仅为，对10进行取余操作，将结果保存在当前位\n- 判断当前位是否大于9，也就是是否会进位，若是则将temp赋值为true，因为在加法运算中，true会自动隐式转化为1，以便于下一次相加\n- 重复上述操作，直至计算结束\n\n### 13. 实现 add(1)(2)(3)\n\n函数柯里化概念： 柯里化（Currying）是把接受多个参数的函数转变为接受一个单一参数的函数，并且返回接受余下的参数且返回结果的新函数的技术。\n\n1）粗暴版\n\n```javascript\nfunction add (a) {\nreturn function (b) {\n \treturn function (c) {\n      return a + b + c;\n \t}\n}\n}\nconsole.log(add(1)(2)(3)); // 6\n```\n\n2）柯里化解决方案\n\n- 参数长度固定\n\n```javascript\nvar add = function (m) {\n  var temp = function (n) {\n    return add(m + n);\n  }\n  temp.toString = function () {\n    return m;\n  }\n  return temp;\n};\nconsole.log(add(3)(4)(5)); // 12\nconsole.log(add(3)(6)(9)(25)); // 43\n```\n\n对于add(3)(4)(5)，其执行过程如下：\n\n1. 先执行add(3)，此时m=3，并且返回temp函数；\n2. 执行temp(4)，这个函数内执行add(m+n)，n是此次传进来的数值4，m值还是上一步中的3，所以add(m+n)=add(3+4)=add(7)，此时m=7，并且返回temp函数\n3. 执行temp(5)，这个函数内执行add(m+n)，n是此次传进来的数值5，m值还是上一步中的7，所以add(m+n)=add(7+5)=add(12)，此时m=12，并且返回temp函数\n4. 由于后面没有传入参数，等于返回的temp函数不被执行而是打印，了解JS的朋友都知道对象的toString是修改对象转换字符串的方法，因此代码中temp函数的toString函数return m值，而m值是最后一步执行函数时的值m=12，所以返回值是12。\n\n- 参数长度不固定\n\n```javascript\nfunction add (...args) {\n    //求和\n    return args.reduce((a, b) => a + b)\n}\nfunction currying (fn) {\n    let args = []\n    return function temp (...newArgs) {\n        if (newArgs.length) {\n            args = [\n                ...args,\n                ...newArgs\n            ]\n            return temp\n        } else {\n            let val = fn.apply(this, args)\n            args = [] //保证再次调用时清空\n            return val\n        }\n    }\n}\nlet addCurry = currying(add)\nconsole.log(addCurry(1)(2)(3)(4, 5)())  //15\nconsole.log(addCurry(1)(2)(3, 4, 5)())  //15\nconsole.log(addCurry(1)(2, 3, 4, 5)())  //15\n```\n\n### 14. 实现类数组转化为数组\n\n类数组转换为数组的方法有这样几种：\n\n- 通过 call 调用数组的 slice 方法来实现转换\n\n```javascript\nArray.prototype.slice.call(arrayLike);\n```\n\n- 通过 call 调用数组的 splice 方法来实现转换\n\n```javascript\nArray.prototype.splice.call(arrayLike, 0);\n```\n\n- 通过 apply 调用数组的 concat 方法来实现转换\n\n```javascript\nArray.prototype.concat.apply([], arrayLike);\n```\n\n- 通过 Array.from 方法来实现转换\n\n```javascript\nArray.from(arrayLike);\n```\n\n### 15. 使用 reduce 求和\n\narr = [1,2,3,4,5,6,7,8,9,10]，求和\n\n```javascript\nlet arr = [1,2,3,4,5,6,7,8,9,10]\narr.reduce((prev, cur) => { return prev + cur }, 0)\n```\n\narr = [1,2,3,[[4,5],6],7,8,9]，求和\n\n```javascript\nlet arr = [1,2,3,4,5,6,7,8,9,10]\narr.flat(Infinity).reduce((prev, cur) => { return prev + cur }, 0)\n```\n\narr = [{a:1, b:3}, {a:2, b:3, c:4}, {a:3}]，求和\n\n```javascript\nlet arr = [{a:9, b:3, c:4}, {a:1, b:3}, {a:3}] \n\narr.reduce((prev, cur) => {\n    return prev + cur[\"a\"];\n}, 0)\n```\n\n### 16. 将js对象转化为树形结构\n\n```javascript\n// 转换前：\nsource = [{\n            id: 1,\n            pid: 0,\n            name: 'body'\n          }, {\n            id: 2,\n            pid: 1,\n            name: 'title'\n          }, {\n            id: 3,\n            pid: 2,\n            name: 'div'\n          }]\n// 转换为: \ntree = [{\n          id: 1,\n          pid: 0,\n          name: 'body',\n          children: [{\n            id: 2,\n            pid: 1,\n            name: 'title',\n            children: [{\n              id: 3,\n              pid: 1,\n              name: 'div'\n            }]\n          }\n        }]\n```\n\n代码实现：\n\n```javascript\nfunction jsonToTree(data) {\n  // 初始化结果数组，并判断输入数据的格式\n  let result = []\n  if(!Array.isArray(data)) {\n    return result\n  }\n  // 使用map，将当前对象的id与当前对象对应存储起来\n  let map = {};\n  data.forEach(item => {\n    map[item.id] = item;\n  });\n  // \n  data.forEach(item => {\n    let parent = map[item.pid];\n    if(parent) {\n      (parent.children || (parent.children = [])).push(item);\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n}\n```\n\n### 17. 使用ES5和ES6求函数参数的和\n\nES5：\n\n```javascript\nfunction sum() {\n    let sum = 0\n    Array.prototype.forEach.call(arguments, function(item) {\n        sum += item * 1\n    })\n    return sum\n}\n```\n\nES6：\n\n```javascript\nfunction sum(...nums) {\n    let sum = 0\n    nums.forEach(function(item) {\n        sum += item * 1\n    })\n    return sum\n}\n```\n\n### 18. 解析 URL Params 为对象\n\n```javascript\nlet url = 'http://www.domain.com/?user=anonymous&id=123&id=456&city=%E5%8C%97%E4%BA%AC&enabled';\nparseParam(url)\n/* 结果\n{ user: 'anonymous',\n  id: [ 123, 456 ], // 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型\n  city: '北京', // 中文需解码\n  enabled: true, // 未指定值得 key 约定为 true\n}\n*/\nfunction parseParam(url) {\n  const paramsStr = /.+\\?(.+)$/.exec(url)[1]; // 将 ? 后面的字符串取出来\n  const paramsArr = paramsStr.split('&'); // 将字符串以 & 分割后存到数组中\n  let paramsObj = {};\n  // 将 params 存到对象中\n  paramsArr.forEach(param => {\n    if (/=/.test(param)) { // 处理有 value 的参数\n      let [key, val] = param.split('='); // 分割 key 和 value\n      val = decodeURIComponent(val); // 解码\n      val = /^\\d+$/.test(val) ? parseFloat(val) : val; // 判断是否转为数字\n      if (paramsObj.hasOwnProperty(key)) { // 如果对象有 key，则添加一个值\n        paramsObj[key] = [].concat(paramsObj[key], val);\n      } else { // 如果对象没有这个 key，创建 key 并设置值\n        paramsObj[key] = val;\n      }\n    } else { // 处理没有 value 的参数\n      paramsObj[param] = true;\n    }\n  })\n  return paramsObj;\n}\n```\n\n## 三、场景应用\n\n### 1. 循环打印红黄绿\n\n下面来看一道比较典型的问题，通过这个问题来对比几种异步编程方法：**红灯 3s 亮一次，绿灯 1s 亮一次，黄灯 2s 亮一次；如何让三个灯不断交替重复亮灯？**\n\n三个亮灯函数：\n\n```javascript\nfunction red() {\n    console.log('red');\n}\nfunction green() {\n    console.log('green');\n}\nfunction yellow() {\n    console.log('yellow');\n}\n```\n\n这道题复杂的地方在于**需要“交替重复”亮灯**，而不是“亮完一次”就结束了。\n\n#### （1）用 callback 实现\n\n```javascript\nconst task = (timer, light, callback) => {\n    setTimeout(() => {\n        if (light === 'red') {\n            red()\n        }\n        else if (light === 'green') {\n            green()\n        }\n        else if (light === 'yellow') {\n            yellow()\n        }\n        callback()\n    }, timer)\n}\ntask(3000, 'red', () => {\n    task(2000, 'green', () => {\n        task(1000, 'yellow', Function.prototype)\n    })\n})\n```\n\n这里存在一个 bug：代码只是完成了一次流程，执行后红黄绿灯分别只亮一次。该如何让它交替重复进行呢？\n\n上面提到过递归，可以递归亮灯的一个周期：\n\n```javascript\nconst step = () => {\n    task(3000, 'red', () => {\n        task(2000, 'green', () => {\n            task(1000, 'yellow', step)\n        })\n    })\n}\nstep()\n```\n\n**注意看黄灯亮的回调里又再次调用了 step 方法** 以完成循环亮灯。\n\n#### （2）用 promise 实现\n\n```javascript\nconst task = (timer, light) => \n    new Promise((resolve, reject) => {\n        setTimeout(() => {\n            if (light === 'red') {\n                red()\n            }\n            else if (light === 'green') {\n                green()\n            }\n            else if (light === 'yellow') {\n                yellow()\n            }\n            resolve()\n        }, timer)\n    })\nconst step = () => {\n    task(3000, 'red')\n        .then(() => task(2000, 'green'))\n        .then(() => task(2100, 'yellow'))\n        .then(step)\n}\nstep()\n```\n\n这里将回调移除，在一次亮灯结束后，resolve 当前 promise，并依然使用递归进行。\n\n#### （3）用 async/await 实现\n\n```javascript\nconst taskRunner =  async () => {\n    await task(3000, 'red')\n    await task(2000, 'green')\n    await task(2100, 'yellow')\n    taskRunner()\n}\ntaskRunner()\n```\n\n### 2. 实现每隔一秒打印 1,2,3,4\n\n```javascript\n// 使用闭包实现\nfor (var i = 0; i < 5; i++) {\n  (function(i) {\n    setTimeout(function() {\n      console.log(i);\n    }, i * 1000);\n  })(i);\n}\n// 使用 let 块级作用域\nfor (let i = 0; i < 5; i++) {\n  setTimeout(function() {\n    console.log(i);\n  }, i * 1000);\n}\n```\n\n### 3. 小孩报数问题\n\n有30个小孩儿，编号从1-30，围成一圈依此报数，1、2、3 数到 3 的小孩儿退出这个圈， 然后下一个小孩 重新报数 1、2、3，问最后剩下的那个小孩儿的编号是多少?\n\n```javascript\nfunction childNum(num, count){\n    let allplayer = [];    \n    for(let i = 0; i < num; i++){\n        allplayer[i] = i + 1;\n    }\n    \n    let exitCount = 0;    // 离开人数\n    let counter = 0;      // 记录报数\n    let curIndex = 0;     // 当前下标\n    \n    while(exitCount < num - 1){\n        if(allplayer[curIndex] !== 0) counter++;    \n        \n        if(counter == count){\n            allplayer[curIndex] = 0;                 \n            counter = 0;\n            exitCount++;  \n        }\n        curIndex++;\n        if(curIndex == num){\n            curIndex = 0               \n        };           \n    }    \n    for(i = 0; i < num; i++){\n        if(allplayer[i] !== 0){\n            return allplayer[i]\n        }      \n    }\n}\nchildNum(30, 3)\n```\n\n### 4. 用Promise实现图片的异步加载\n\n```javascript\nlet imageAsync=(url)=>{\n            return new Promise((resolve,reject)=>{\n                let img = new Image();\n                img.src = url;\n                img.οnlοad=()=>{\n                    console.log(`图片请求成功，此处进行通用操作`);\n                    resolve(image);\n                }\n                img.οnerrοr=(err)=>{\n                    console.log(`失败，此处进行失败的通用操作`);\n                    reject(err);\n                }\n            })\n        }\n        \nimageAsync(\"url\").then(()=>{\n    console.log(\"加载成功\");\n}).catch((error)=>{\n    console.log(\"加载失败\");\n})\n```\n\n### 5. 实现发布-订阅模式\n\n```javascript\nclass EventCenter{\n  // 1. 定义事件容器，用来装事件数组\n\tlet handlers = {}\n\n  // 2. 添加事件方法，参数：事件名 事件方法\n  addEventListener(type, handler) {\n    // 创建新数组容器\n    if (!this.handlers[type]) {\n      this.handlers[type] = []\n    }\n    // 存入事件\n    this.handlers[type].push(handler)\n  }\n\n  // 3. 触发事件，参数：事件名 事件参数\n  dispatchEvent(type, params) {\n    // 若没有注册该事件则抛出错误\n    if (!this.handlers[type]) {\n      return new Error('该事件未注册')\n    }\n    // 触发事件\n    this.handlers[type].forEach(handler => {\n      handler(...params)\n    })\n  }\n\n  // 4. 事件移除，参数：事件名 要删除事件，若无第二个参数则删除该事件的订阅和发布\n  removeEventListener(type, handler) {\n    if (!this.handlers[type]) {\n      return new Error('事件无效')\n    }\n    if (!handler) {\n      // 移除事件\n      delete this.handlers[type]\n    } else {\n      const index = this.handlers[type].findIndex(el => el === handler)\n      if (index === -1) {\n        return new Error('无该绑定事件')\n      }\n      // 移除事件\n      this.handlers[type].splice(index, 1)\n      if (this.handlers[type].length === 0) {\n        delete this.handlers[type]\n      }\n    }\n  }\n}\n```\n\n### 6. 查找文章中出现频率最高的单词\n\n```javascript\nfunction findMostWord(article) {\n  // 合法性判断\n  if (!article) return;\n  // 参数处理\n  article = article.trim().toLowerCase();\n  let wordList = article.match(/[a-z]+/g),\n    visited = [],\n    maxNum = 0,\n    maxWord = \"\";\n  article = \" \" + wordList.join(\"  \") + \" \";\n  // 遍历判断单词出现次数\n  wordList.forEach(function(item) {\n    if (visited.indexOf(item) < 0) {\n      // 加入 visited \n      visited.push(item);\n      let word = new RegExp(\" \" + item + \" \", \"g\"),\n        num = article.match(word).length;\n      if (num > maxNum) {\n        maxNum = num;\n        maxWord = item;\n      }\n    }\n  });\n  return maxWord + \"  \" + maxNum;\n}\n```\n\n### 7. 封装异步的fetch，使用async await方式来使用\n\n```javascript\n(async () => {\n    class HttpRequestUtil {\n        async get(url) {\n            const res = await fetch(url);\n            const data = await res.json();\n            return data;\n        }\n        async post(url, data) {\n            const res = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            });\n            const result = await res.json();\n            return result;\n        }\n        async put(url, data) {\n            const res = await fetch(url, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                data: JSON.stringify(data)\n            });\n            const result = await res.json();\n            return result;\n        }\n        async delete(url, data) {\n            const res = await fetch(url, {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                data: JSON.stringify(data)\n            });\n            const result = await res.json();\n            return result;\n        }\n    }\n    const httpRequestUtil = new HttpRequestUtil();\n    const res = await httpRequestUtil.get('http://golderbrother.cn/');\n    console.log(res);\n})();\n```\n\n### 8. 实现prototype继承\n\n所谓的原型链继承就是让新实例的原型等于父类的实例：\n\n```javascript\n//父方法\nfunction SupperFunction(flag1){\n    this.flag1 = flag1;\n}\n\n//子方法\nfunction SubFunction(flag2){\n    this.flag2 = flag2;\n}\n\n//父实例\nvar superInstance = new SupperFunction(true);\n\n//子继承父\nSubFunction.prototype = superInstance;\n\n//子实例\nvar subInstance = new SubFunction(false);\n//子调用自己和父的属性\nsubInstance.flag1;   // true\nsubInstance.flag2;   // false\n```\n\n### 9. 实现双向数据绑定\n\n```javascript\nlet obj = {}\nlet input = document.getElementById('input')\nlet span = document.getElementById('span')\n// 数据劫持\nObject.defineProperty(obj, 'text', {\n  configurable: true,\n  enumerable: true,\n  get() {\n    console.log('获取数据了')\n  },\n  set(newVal) {\n    console.log('数据更新了')\n    input.value = newVal\n    span.innerHTML = newVal\n  }\n})\n// 输入监听\ninput.addEventListener('keyup', function(e) {\n  obj.text = e.target.value\n})\n```\n\n### 10. 实现简单路由\n\n```javascript\n// hash路由\nclass Route{\n  constructor(){\n    // 路由存储对象\n    this.routes = {}\n    // 当前hash\n    this.currentHash = ''\n    // 绑定this，避免监听时this指向改变\n    this.freshRoute = this.freshRoute.bind(this)\n    // 监听\n    window.addEventListener('load', this.freshRoute, false)\n    window.addEventListener('hashchange', this.freshRoute, false)\n  }\n  // 存储\n  storeRoute (path, cb) {\n    this.routes[path] = cb || function () {}\n  }\n  // 更新\n  freshRoute () {\n    this.currentHash = location.hash.slice(1) || '/'\n    this.routes[this.currentHash]()\n  }\n}\n```\n\n### 11. 实现斐波那契数列\n\n```javascript\n// 递归\nfunction fn (n){\n    if(n==0) return 0\n    if(n==1) return 1\n    return fn(n-2)+fn(n-1)\n}\n// 优化\nfunction fibonacci2(n) {\n    const arr = [1, 1, 2];\n    const arrLen = arr.length;\n\n    if (n <= arrLen) {\n        return arr[n];\n    }\n\n    for (let i = arrLen; i < n; i++) {\n        arr.push(arr[i - 1] + arr[ i - 2]);\n    }\n\n    return arr[arr.length - 1];\n}\n// 非递归\nfunction fn(n) {\n    let pre1 = 1;\n    let pre2 = 1;\n    let current = 2;\n\n    if (n <= 2) {\n        return current;\n    }\n\n    for (let i = 2; i < n; i++) {\n        pre1 = pre2;\n        pre2 = current;\n        current = pre1 + pre2;\n    }\n\n    return current;\n}\n```\n\n### 12. 字符串出现的不重复最长长度\n\n用一个滑动窗口装没有重复的字符，枚举字符记录最大值即可。用 map 维护字符的索引，遇到相同的字符，把左边界移动过去即可。挪动的过程中记录最大长度：\n\n```javascript\nvar lengthOfLongestSubstring = function (s) {\n    let map = new Map();\n    let i = -1\n    let res = 0\n    let n = s.length\n    for (let j = 0; j < n; j++) {\n        if (map.has(s[j])) {\n            i = Math.max(i, map.get(s[j]))\n        }\n        res = Math.max(res, j - i)\n        map.set(s[j], j)\n    }\n    return res\n};\n```\n\n### 13. 使用 setTimeout 实现 setInterval\n\nsetInterval 的作用是每隔一段指定时间执行一个函数，但是这个执行不是真的到了时间立即执行，它真正的作用是每隔一段时间将事件加入事件队列中去，只有当当前的执行栈为空的时候，才能去从事件队列中取出事件执行。所以可能会出现这样的情况，就是当前执行栈执行的时间很长，导致事件队列里边积累多个定时器加入的事件，当执行栈结束的时候，这些事件会依次执行，因此就不能到间隔一段时间执行的效果。\n\n针对 setInterval 的这个缺点，我们可以使用 setTimeout 递归调用来模拟 setInterval，这样我们就确保了只有一个事件结束了，我们才会触发下一个定时器事件，这样解决了 setInterval 的问题。\n\n实现思路是使用递归函数，不断地去执行 setTimeout 从而达到 setInterval 的效果\n\n```javascript\nfunction mySetInterval(fn, timeout) {\n  // 控制器，控制定时器是否继续执行\n  var timer = {\n    flag: true\n  };\n  // 设置递归函数，模拟定时器执行。\n  function interval() {\n    if (timer.flag) {\n      fn();\n      setTimeout(interval, timeout);\n    }\n  }\n  // 启动定时器\n  setTimeout(interval, timeout);\n  // 返回控制器\n  return timer;\n}\n```\n\n### 14. 实现 jsonp\n\n```javascript\n// 动态的加载js文件\nfunction addScript(src) {\n  const script = document.createElement('script');\n  script.src = src;\n  script.type = \"text/javascript\";\n  document.body.appendChild(script);\n}\naddScript(\"http://xxx.xxx.com/xxx.js?callback=handleRes\");\n// 设置一个全局的callback函数来接收回调结果\nfunction handleRes(res) {\n  console.log(res);\n}\n// 接口返回的数据格式\nhandleRes({a: 1, b: 2});\n```\n\n### 15. 判断对象是否存在循环引用\n\n循环引用对象本来没有什么问题，但是序列化的时候就会发生问题，比如调用`JSON.stringify()`对该类对象进行序列化，就会报错: `Converting circular structure to JSON.`\n\n下面方法可以用来判断一个对象中是否已存在循环引用：\n\n```javascript\nconst isCycleObject = (obj,parent) => {\n    const parentArr = parent || [obj];\n    for(let i in obj) {\n        if(typeof obj[i] === 'object') {\n            let flag = false;\n            parentArr.forEach((pObj) => {\n                if(pObj === obj[i]){\n                    flag = true;\n                }\n            })\n            if(flag) return true;\n            flag = isCycleObject(obj[i],[...parentArr,obj[i]]);\n            if(flag) return true;\n        }\n    }\n    return false;\n}\n\nconst a = 1;\nconst b = {a};\nconst c = {b};\nconst o = {d:{a:3},c}\no.c.b.aa = a;\n\nconsole.log(isCycleObject(o)\n```\n\n查找有序二维数组的目标值：\n\n```javascript\nvar findNumberIn2DArray = function(matrix, target) {\n    if (matrix == null || matrix.length == 0) {\n        return false;\n    }\n    let row = 0;\n    let column = matrix[0].length - 1;\n    while (row < matrix.length && column >= 0) {\n        if (matrix[row][column] == target) {\n            return true;\n        } else if (matrix[row][column] > target) {\n            column--;\n        } else {\n            row++;\n        }\n    }\n    return false;\n};\n```\n\n二维数组斜向打印：\n\n```javascript\nfunction printMatrix(arr){\n  let m = arr.length, n = arr[0].length\n\tlet res = []\n  \n  // 左上角，从0 到 n - 1 列进行打印\n  for (let k = 0; k < n; k++) {\n    for (let i = 0, j = k; i < m && j >= 0; i++, j--) {\n      res.push(arr[i][j]);\n    }\n  }\n\n  // 右下角，从1 到 n - 1 行进行打印\n  for (let k = 1; k < m; k++) {\n    for (let i = k, j = n - 1; i < m && j >= 0; i++, j--) {\n      res.push(arr[i][j]);\n    }\n  }\n  return res\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"js/js面试手写","published":1,"layout":"post","photos":[],"link":"","_id":"clipg0874000vrgwh5cdea81g","content":"<p>js面试手写</p>\n<span id=\"more\"></span>\n\n<h2 id=\"一、JavaScript-基础\"><a href=\"#一、JavaScript-基础\" class=\"headerlink\" title=\"一、JavaScript 基础\"></a>一、JavaScript 基础</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230607140248211.png\" alt=\"image-20230607140248211\"></p>\n<h3 id=\"1-手写-Object-create\"><a href=\"#1-手写-Object-create\" class=\"headerlink\" title=\"1. 手写 Object.create\"></a>1. 手写 Object.create</h3><p>思路：将传入的对象作为原型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">create</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">F</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  F.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = obj</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">F</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-手写-instanceof-方法\"><a href=\"#2-手写-instanceof-方法\" class=\"headerlink\" title=\"2. 手写 instanceof 方法\"></a>2. 手写 instanceof 方法</h3><p>instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</p>\n<p>实现步骤：</p>\n<ol>\n<li>首先获取类型的原型</li>\n<li>然后获得对象的原型</li>\n<li>然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为 <code>null</code>，因为原型链最终为 <code>null</code></li>\n</ol>\n<p>具体实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myInstanceof</span>(<span class=\"params\">left, right</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> proto = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(left), <span class=\"comment\">// 获取对象的原型</span></span><br><span class=\"line\">      prototype = right.<span class=\"property\"><span class=\"keyword\">prototype</span></span>; <span class=\"comment\">// 获取构造函数的 prototype 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 判断构造函数的 prototype 对象是否在对象的原型链上</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!proto) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (proto === prototype) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    proto = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(proto);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-手写-new-操作符\"><a href=\"#3-手写-new-操作符\" class=\"headerlink\" title=\"3. 手写 new 操作符\"></a>3. 手写 new 操作符</h3><p>在调用 <code>new</code> 的过程中会发生以上四件事情：</p>\n<p>（1）首先创建了一个新的空对象</p>\n<p>（2）设置原型，将对象的原型设置为函数的 prototype 对象。</p>\n<p>（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）</p>\n<p>（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">objectFactory</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObject = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> constructor = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">shift</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 判断参数是否是一个函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> constructor !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;type error&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 新建一个空对象，对象的原型为构造函数的 prototype 对象</span></span><br><span class=\"line\">  newObject = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(constructor.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\">  <span class=\"comment\">// 将 this 指向新建对象，并执行函数</span></span><br><span class=\"line\">  result = constructor.<span class=\"title function_\">apply</span>(newObject, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 判断返回对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> flag = result &amp;&amp; (<span class=\"keyword\">typeof</span> result === <span class=\"string\">&quot;object&quot;</span> || <span class=\"keyword\">typeof</span> result === <span class=\"string\">&quot;function&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 判断返回结果</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> flag ? result : newObject;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用方法</span></span><br><span class=\"line\"><span class=\"title function_\">objectFactory</span>(构造函数, 初始化参数);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-手写-Promise\"><a href=\"#4-手写-Promise\" class=\"headerlink\" title=\"4. 手写 Promise\"></a>4. 手写 Promise</h3><h4 id=\"常见-Promise-面试题\"><a href=\"#常见-Promise-面试题\" class=\"headerlink\" title=\"常见 Promise 面试题\"></a>常见 Promise 面试题</h4><p>首先，我们以常见的 Promise 面试题为切入点，我们看看面试官们都爱考什么：</p>\n<ol>\n<li>Promise 解决了什么问题？</li>\n<li>Promise 的业界实现都有哪些？</li>\n<li>Promise 常用的 API 有哪些？</li>\n<li>能不能手写一个符合 Promise/A+ 规范的 Promise?</li>\n<li>Promise 在事件循环中的执行过程是怎样的？</li>\n<li>Promise 有什么缺陷，可以如何解决？</li>\n</ol>\n<p>这几个问题由浅入深，我们一个一个来看：</p>\n<h4 id=\"Promise-出现的原因-amp-业界实现\"><a href=\"#Promise-出现的原因-amp-业界实现\" class=\"headerlink\" title=\"Promise 出现的原因 &amp; 业界实现\"></a>Promise 出现的原因 &amp; 业界实现</h4><p>在 Promise 出现以前，在我们处理多个异步请求嵌套时，代码往往是这样的。。。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./name.txt&#x27;</span>,<span class=\"string\">&#x27;utf8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)&#123;</span><br><span class=\"line\">  fs.<span class=\"title function_\">readFile</span>(data, <span class=\"string\">&#x27;utf8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)&#123;</span><br><span class=\"line\">    fs.<span class=\"title function_\">readFile</span>(data,<span class=\"string\">&#x27;utf8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>为了拿到回调的结果，我们必须一层一层的嵌套，可以说是相当恶心了。而且基本上我们还要对每次请求的结果进行一系列的处理，使得代码变的更加难以阅读和难以维护，这就是传说中臭名昭著的<strong>回调地狱</strong>～产生<strong>回调地狱</strong>的原因归结起来有两点：</p>\n<p>1.<strong>嵌套调用</strong>，第一个函数的输出往往是第二个函数的输入；</p>\n<p>2.<strong>处理多个异步请求并发</strong>，开发时往往需要同步请求最终的结果。</p>\n<p>原因分析出来后，那么问题的解决思路就很清晰了：</p>\n<p>1.<strong>消灭嵌套调用</strong>：通过 Promise 的链式调用可以解决；</p>\n<p>2.<strong>合并多个任务的请求结果</strong>：使用 Promise.all 获取合并多个任务的错误处理。</p>\n<p>Promise 正是用一种更加友好的代码组织方式，解决了异步嵌套的问题。</p>\n<p>我们来看看上面的例子用 Promise 实现是什么样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">read</span>(<span class=\"params\">filename</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    fs.<span class=\"title function_\">readFile</span>(filename, <span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(data);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">read</span>(<span class=\"string\">&#x27;./name.txt&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">read</span>(data) </span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">read</span>(data)  </span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>臃肿的嵌套变得线性多了有木有？没错，他就是我们的异步神器 Promise！</p>\n<p>让我们再次回归刚才的问题，<strong>Promise 为我们解决了什么问题？</strong>在传统的异步编程中，如果异步之间存在依赖关系，就需要通过层层嵌套回调的方式满足这种依赖，如果嵌套层数过多，可读性和可以维护性都会变得很差，产生所谓的“回调地狱”，而 Promise 将嵌套调用改为链式调用，增加了可阅读性和可维护性。也就是说，Promise 解决的是异步编码风格的问题。<strong>那 Promise 的业界实现都有哪些呢？</strong>业界比较著名的实现 Promise 的类库有 bluebird、Q、ES6-Promise。</p>\n<h4 id=\"从零开始，手写-Promise\"><a href=\"#从零开始，手写-Promise\" class=\"headerlink\" title=\"从零开始，手写 Promise\"></a>从零开始，手写 Promise</h4><h5 id=\"Promise-A\"><a href=\"#Promise-A\" class=\"headerlink\" title=\"Promise/A+\"></a>Promise/A+</h5><p>我们想要手写一个 Promise，就要遵循 <a href=\"https://link.zhihu.com/?target=https://promisesaplus.com/\">Promise/A+</a> 规范，业界所有 Promise 的类库都遵循这个规范。</p>\n<p>其实 Promise/A+ 规范对如何实现一个符合标准的 Promise 类库已经阐述的很详细了。每一行代码在 Promise/A+ 规范中都有迹可循，所以在下面的实现的过程中，我会尽可能的将代码和 Promise/A+ 规范一一对应起来。</p>\n<p>下面开始步入正题啦～</p>\n<h4 id=\"基础版-Promise\"><a href=\"#基础版-Promise\" class=\"headerlink\" title=\"基础版 Promise\"></a>基础版 Promise</h4><p>我们先来回顾下最简单的 Promise 使用方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;create a promise&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功了&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;after new promise&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;失败了&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p3 = p2.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>, data)</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;faild&#x27;</span>, err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;create a promise&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;after new promise&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;成功了&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;faild Error: 失败了&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先我们在调用 Promise 时，会返回一个 Promise 对象。</li>\n<li>构建 Promise 对象时，需要传入一个 <strong>executor 函数</strong>，Promise 的主要业务流程都在 executor 函数中执行。</li>\n<li>如果运行在 excutor 函数中的业务执行成功了，会调用 resolve 函数；如果执行失败了，则调用 reject 函数。</li>\n<li>Promise 的状态不可逆，同时调用 resolve 函数和 reject 函数，默认会采取第一次调用的结果。</li>\n</ul>\n<p>以上简单介绍了 Promise 的一些主要的使用方法，结合 <a href=\"https://link.zhihu.com/?target=https://promisesaplus.com/\">Promise/A+</a> 规范，我们可以分析出 Promise 的基本特征：</p>\n<ol>\n<li>promise 有三个状态：<code>pending</code>，<code>fulfilled</code>，or <code>rejected</code>；「规范 Promise/A+ 2.1」</li>\n<li><code>new promise</code>时， 需要传递一个<code>executor()</code>执行器，执行器立即执行；</li>\n<li><code>executor</code>接受两个参数，分别是<code>resolve</code>和<code>reject</code>；</li>\n<li>promise 的默认状态是 <code>pending</code>；</li>\n<li>promise 有一个<code>value</code>保存成功状态的值，可以是<code>undefined/thenable/promise</code>；「规范 Promise/A+ 1.3」</li>\n<li>promise 有一个<code>reason</code>保存失败状态的值；「规范 Promise/A+ 1.5」</li>\n<li>promise 只能从<code>pending</code>到<code>rejected</code>, 或者从<code>pending</code>到<code>fulfilled</code>，状态一旦确认，就不会再改变；</li>\n<li>promise 必须有一个<code>then</code>方法，then 接收两个参数，分别是 promise 成功的回调 onFulfilled, 和 promise 失败的回调 onRejected；「规范 Promise/A+ 2.2」</li>\n<li>如果调用 then 时，promise 已经成功，则执行<code>onFulfilled</code>，参数是<code>promise</code>的<code>value</code>；</li>\n<li>如果调用 then 时，promise 已经失败，那么执行<code>onRejected</code>, 参数是<code>promise</code>的<code>reason</code>；</li>\n<li>如果 then 中抛出了异常，那么就会把这个异常作为参数，传递给下一个 then 的失败的回调<code>onRejected</code>；</li>\n</ol>\n<p>按照上面的特征，我们试着勾勒下 Promise 的形状：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 三个状态：PENDING、FULFILLED、REJECTED</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;PENDING&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&#x27;FULFILLED&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;REJECTED&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认状态为 PENDING</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 存放成功状态的值，默认为 undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 存放失败状态的值，默认为 undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用此方法就是成功</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 状态为 PENDING 时才可以更新状态，防止 executor 中调用了两次 resovle/reject 方法</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> ===  <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用此方法就是失败</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">reject</span> = (<span class=\"params\">reason</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 状态为 PENDING 时才可以更新状态，防止 executor 中调用了两次 resovle/reject 方法</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> ===  <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 立即执行，将 resolve 和 reject 函数传给使用者  </span></span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(resolve,reject)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 发生异常时执行失败逻辑</span></span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 包含一个 then 方法，并接收两个参数 onFulfilled、onRejected</span></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写完代码我们可以测试一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>, data)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;faild&#x27;</span>, err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;success 成功&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>现在我们已经实现了一个基础版的 Promise，但是还不要高兴的太早噢，这里我们只处理了同步操作的 promise。如果在 <code>executor()</code>中传入一个异步操作的话呢，我们试一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 传入一个异步操作</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>);</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>, data)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;faild&#x27;</span>, err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>执行测试脚本后发现，promise 没有任何返回。</p>\n<p>因为 promise 调用 then 方法时，当前的 promise 并没有成功，一直处于 pending 状态。所以如果当调用 then 方法时，当前状态是 pending，我们需要先将成功和失败的回调分别存放起来，在<code>executor()</code>的异步任务被执行时，触发 resolve 或 reject，依次调用成功或失败的回调。</p>\n<p>结合这个思路，我们优化一下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;PENDING&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&#x27;FULFILLED&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;REJECTED&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 存放成功的回调</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span> = [];</span><br><span class=\"line\">    <span class=\"comment\">// 存放失败的回调</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>= [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> ===  <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"comment\">// 依次将对应的函数执行</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span><span class=\"title function_\">fn</span>());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">reject</span> = (<span class=\"params\">reason</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> ===  <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">        <span class=\"comment\">// 依次将对应的函数执行</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span><span class=\"title function_\">fn</span>());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(resolve,reject)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">push</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>);</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>, data)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;faild&#x27;</span>, err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>控制台等待 <code>1s</code> 后输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;success 成功&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>ok！大功告成，异步问题已经解决了！</p>\n<p>熟悉设计模式的同学，应该意识到了这其实是一个<strong>发布订阅模式</strong>，这种<code>收集依赖 -&gt; 触发通知 -&gt; 取出依赖执行</code>的方式，被广泛运用于发布订阅模式的实现。</p>\n<h4 id=\"then-的链式调用-amp-值穿透特性\"><a href=\"#then-的链式调用-amp-值穿透特性\" class=\"headerlink\" title=\"then 的链式调用&amp;值穿透特性\"></a>then 的链式调用&amp;值穿透特性</h4><p>我们都知道，promise 的优势在于可以链式调用。在我们使用 Promise 的时候，当 then 函数中 return 了一个值，不管是什么值，我们都能在下一个 then 中获取到，这就是所谓的<strong>then 的链式调用</strong>。而且，当我们不在 then 中放入参数，例：<code>promise.then().then()</code>，那么其后面的 then 依旧可以得到之前 then 返回的值，这就是所谓的<strong>值的穿透</strong>。那具体如何实现呢？简单思考一下，如果每次调用 then 的时候，我们都重新创建一个 promise 对象，并把上一个 then 的返回结果传给这个新的 promise 的 then 方法，不就可以一直 then 下去了么？那我们来试着实现一下。这也是手写 Promise 源码的重中之重，所以，打起精神来，重头戏来咯！</p>\n<p>有了上面的想法，我们再结合 <a href=\"https://link.zhihu.com/?target=https://promisesaplus.com/\">Promise/A+</a> 规范梳理一下思路：</p>\n<ol>\n<li>then 的参数 <code>onFulfilled</code> 和 <code>onRejected</code> 可以缺省，如果 <code>onFulfilled</code> 或者 <code>onRejected</code>不是函数，将其忽略，且依旧可以在下面的 then 中获取到之前返回的值；「规范 Promise/A+ 2.2.1、2.2.1.1、2.2.1.2」</li>\n<li>promise 可以 then 多次，每次执行完 promise.then 方法后返回的都是一个“新的promise”；「规范 Promise/A+ 2.2.7」</li>\n<li>如果 then 的返回值 x 是一个普通值，那么就会把这个结果作为参数，传递给下一个 then 的成功的回调中；</li>\n<li>如果 then 中抛出了异常，那么就会把这个异常作为参数，传递给下一个 then 的失败的回调中；「规范 Promise/A+ 2.2.7.2」</li>\n<li>如果 then 的返回值 x 是一个 promise，那么会等这个 promise 执行完，promise 如果成功，就走下一个 then 的成功；如果失败，就走下一个 then 的失败；如果抛出异常，就走下一个 then 的失败；「规范 Promise/A+ 2.2.7.3、2.2.7.4」</li>\n<li>如果 then 的返回值 x 和 promise 是同一个引用对象，造成循环引用，则抛出异常，把异常传递给下一个 then 的失败的回调中；「规范 Promise/A+ 2.3.1」</li>\n<li>如果 then 的返回值 x 是一个 promise，且 x 同时调用 resolve 函数和 reject 函数，则第一次调用优先，其他所有调用被忽略；「规范 Promise/A+ 2.3.3.3.3」</li>\n</ol>\n<p>我们将代码补充完整：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;PENDING&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&#x27;FULFILLED&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;REJECTED&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">resolvePromise</span> = (<span class=\"params\">promise2, x, resolve, reject</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 自己等待自己完成是错误的实现，用一个类型错误，结束掉 promise  Promise/A+ 2.3.1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promise2 === x) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Promise/A+ 2.3.3.3.3 只能调用一次</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> called;</span><br><span class=\"line\">  <span class=\"comment\">// 后续的条件要严格判断 保证代码能和别的库一起使用</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((<span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; x != <span class=\"literal\">null</span>) || <span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;function&#x27;</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 为了判断 resolve 过的就不用再 reject 了（比如 reject 和 resolve 同时调用的时候）  Promise/A+ 2.3.3.1</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> then = x.<span class=\"property\">then</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">&#x27;function&#x27;</span>) &#123; </span><br><span class=\"line\">        <span class=\"comment\">// 不要写成 x.then，直接 then.call 就可以了 因为 x.then 会再次取值，Object.defineProperty  Promise/A+ 2.3.3.3</span></span><br><span class=\"line\">        then.<span class=\"title function_\">call</span>(x, <span class=\"function\"><span class=\"params\">y</span> =&gt;</span> &#123; <span class=\"comment\">// 根据 promise 的状态决定是成功还是失败</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"comment\">// 递归解析的过程（因为可能 promise 中还有 promise） Promise/A+ 2.3.3.3.1</span></span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(promise2, y, resolve, reject); </span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"params\">r</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 只要失败就失败 Promise/A+ 2.3.3.3.2</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(r);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 x.then 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.3.4</span></span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Promise/A+ 2.3.3.2</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 x 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.4  </span></span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(x)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span> = [];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>= [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> ===  <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span><span class=\"title function_\">fn</span>());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">reject</span> = (<span class=\"params\">reason</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> ===  <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span><span class=\"title function_\">fn</span>());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(resolve,reject)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//解决 onFufilled，onRejected 没有传值的问题</span></span><br><span class=\"line\">    <span class=\"comment\">//Promise/A+ 2.2.1 / Promise/A+ 2.2.5 / Promise/A+ 2.2.7.3 / Promise/A+ 2.2.7.4</span></span><br><span class=\"line\">    onFulfilled = <span class=\"keyword\">typeof</span> onFulfilled === <span class=\"string\">&#x27;function&#x27;</span> ? onFulfilled : <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v;</span><br><span class=\"line\">    <span class=\"comment\">//因为错误的值要让后面访问到，所以这里也要跑出个错误，不然会在之后 then 的 resolve 中捕获</span></span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">&#x27;function&#x27;</span> ? onRejected : <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> err &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 每次调用 then 都返回一个新的 promise  Promise/A+ 2.2.7</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Promise/A+ 2.2.2</span></span><br><span class=\"line\">        <span class=\"comment\">//Promise/A+ 2.2.4 --- setTimeout</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Promise/A+ 2.2.7.1</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">            <span class=\"comment\">// x可能是一个proimise</span></span><br><span class=\"line\">            <span class=\"title function_\">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Promise/A+ 2.2.7.2</span></span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Promise/A+ 2.2.3</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">            <span class=\"title function_\">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">push</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;失败&#x27;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>().<span class=\"title function_\">then</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;err&#x27;</span>,err);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;失败 err&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>至此，我们已经完成了 promise 最关键的部分：then 的链式调用和值的穿透。搞清楚了 then 的链式调用和值的穿透，你也就搞清楚了 Promise。</p>\n<h4 id=\"测试-Promise-是否符合规范\"><a href=\"#测试-Promise-是否符合规范\" class=\"headerlink\" title=\"测试 Promise 是否符合规范\"></a>测试 Promise 是否符合规范</h4><p>Promise/A+规范提供了一个专门的测试脚本，可以测试所编写的代码是否符合Promise/A+的规范。</p>\n<p>首先，在 promise 实现的代码中，增加以下代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">defer</span> = <span class=\"title class_\">Promise</span>.<span class=\"property\">deferred</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dfd = &#123;&#125;;</span><br><span class=\"line\">  dfd.<span class=\"property\">promise</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      dfd.<span class=\"property\">resolve</span> = resolve;</span><br><span class=\"line\">      dfd.<span class=\"property\">reject</span> = reject;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dfd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>安装测试脚本:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g promises-aplus-tests</span><br></pre></td></tr></table></figure>\n\n<p>如果当前的 promise 源码的文件名为 promise.js</p>\n<p>那么在对应的目录执行以下命令:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promises-aplus-tests promise.<span class=\"property\">js</span></span><br></pre></td></tr></table></figure>\n\n<p>promises-aplus-tests 中共有 872 条测试用例。以上代码，可以完美通过所有用例。</p>\n<p><strong>感谢小伙伴的提醒，由于文章中使用 setTimeout 实现 promise 的异步，会对大家造成误解。所以这里添加一些标注:</strong></p>\n<p>由于原生的 Promise 是V8引擎提供的微任务，我们无法还原V8引擎的实现，所以这里使用 setTimeout 模拟异步，所以原生的是微任务，这里是宏任务。</p>\n<p>Promise A+ 规范3.1 中也提到了：这可以通过“宏任务”机制（例如setTimeout或setImmediate）或“微任务”机制（例如MutatonObserver或）来实现process.nextTick。</p>\n<p>如果你想实现 promise 的微任务，可以 mutationObserver 替代 seiTimeout 来实现微任务。</p>\n<p>有小伙伴说可以使用 queueMicrotask 实现微任务，我也查阅了一些资料，是可以的。不过 queueMicrotask 兼容性不是很好，IE 下完全不支持。据我所知 queueMicrotask 的 polyfill 是基于 promise 实现的，如果不支持 promise 会转成 setTimeout。</p>\n<p>总的来说，queueMicrotask 和 mutationObserver 都可以实现微任务机制，不过更建议有执念的小伙伴用 mutationObserver 实现一下，没有执念的小伙伴了解 promise 的微任务机制就好了～</p>\n<h3 id=\"Promise-的-API\"><a href=\"#Promise-的-API\" class=\"headerlink\" title=\"Promise 的 API\"></a>Promise 的 API</h3><p>虽然上述的 promise 源码已经符合 Promise/A+ 的规范，但是原生的 Promise 还提供了一些其他方法，如:</p>\n<ul>\n<li>Promise.resolve()</li>\n<li>Promise.reject()</li>\n<li>Promise.prototype.catch()</li>\n<li>Promise.prototype.finally()</li>\n<li>Promise.all()</li>\n<li>Promise.race(）</li>\n</ul>\n<p>下面具体说一下每个方法的实现:</p>\n<h4 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve\"></a>Promise.resolve</h4><p>默认产生一个成功的 promise。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"title function_\">resolve</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(data);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里需要注意的是，<strong>promise.resolve 是具备等待功能的</strong>。如果参数是 promise 会等待这个 promise 解析完毕，在向下执行，所以这里需要在 resolve 方法中做一个小小的处理：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ======新增逻辑======</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果 value 是一个promise，那我们的库中应该也要实现一个递归解析</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(value <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Promise</span>)&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 递归解析 </span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> value.<span class=\"title function_\">then</span>(resolve,reject)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ===================</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> ===  <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span><span class=\"title function_\">fn</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;ok&#x27;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;)).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&#x27;success&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err,<span class=\"string\">&#x27;error&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>控制台等待 <code>3s</code> 后输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;ok success&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject\"></a>Promise.reject</h4><p>默认产生一个失败的 promise，Promise.reject 是直接将值变成错误结果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(reason);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch\"></a>Promise.prototype.catch</h4><p>Promise.prototype.catch 用来捕获 promise 的异常，<strong>就相当于一个没有成功的 then</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">catch</span> = <span class=\"keyword\">function</span>(<span class=\"params\">errCallback</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">null</span>,errCallback)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Promise-prototype-finally\"><a href=\"#Promise-prototype-finally\" class=\"headerlink\" title=\"Promise.prototype.finally\"></a>Promise.prototype.finally</h4><p>finally 表示不是最终的意思，而是无论如何都会执行的意思。 如果返回一个 promise 会等待这个 promise 也执行完毕。如果返回的是成功的 promise，会采用上一次的结果；如果返回的是失败的 promise，会用这个失败的结果，传到 catch 中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">finally</span> = <span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">callback</span>()).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>value)</span><br><span class=\"line\">  &#125;,<span class=\"function\">(<span class=\"params\">reason</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">callback</span>()).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;<span class=\"keyword\">throw</span> reason&#125;)</span><br><span class=\"line\">  &#125;)  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">456</span>).<span class=\"title function_\">finally</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&#x27;success&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err,<span class=\"string\">&#x27;error&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>控制台等待 <code>3s</code> 后输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;456 success&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h4><p>promise.all 是解决并发问题的，多个异步并发获取最终的结果（如果有一个失败则失败）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">all</span> = <span class=\"keyword\">function</span>(<span class=\"params\">values</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(values)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = <span class=\"keyword\">typeof</span> values;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">`TypeError: <span class=\"subst\">$&#123;type&#125;</span> <span class=\"subst\">$&#123;values&#125;</span> is not iterable`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultArr = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> orderIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">processResultByKey</span> = (<span class=\"params\">value, index</span>) =&gt; &#123;</span><br><span class=\"line\">      resultArr[index] = value;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (++orderIndex === values.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(resultArr)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; values.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> value = values[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &amp;&amp; <span class=\"keyword\">typeof</span> value.<span class=\"property\">then</span> === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        value.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">processResultByKey</span>(value, i);</span><br><span class=\"line\">        &#125;, reject);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">processResultByKey</span>(value, i);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;ok1&#x27;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;ok2&#x27;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,p1,p2]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;resolve&#x27;</span>, data);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;reject&#x27;</span>, err);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>控制台等待 <code>1s</code> 后输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;resolve [ 1, 2, 3, &#x27;ok1&#x27;, &#x27;ok2&#x27; ]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h4><p>Promise.race 用来处理多个请求，采用最快的（谁先完成用谁的）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">race</span> = <span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 一起执行就是for循环</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> val = promises[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val &amp;&amp; <span class=\"keyword\">typeof</span> val.<span class=\"property\">then</span> === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        val.<span class=\"title function_\">then</span>(resolve, reject);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 普通值</span></span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(val)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>特别需要注意的是：因为<strong>Promise 是没有中断方法的</strong>，xhr.abort()、ajax 有自己的中断方法，axios 是基于 ajax 实现的；fetch 基于 promise，所以他的请求是无法中断的。</p>\n<p>这也是 promise 存在的缺陷，我们可以使用 race 来自己封装中断方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">wrap</span>(<span class=\"params\">promise</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在这里包装一个 promise，可以控制原来的promise是成功还是失败</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> abort;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; <span class=\"comment\">// defer 方法</span></span><br><span class=\"line\">      abort = reject;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>([promise, newPromise]); <span class=\"comment\">// 任何一个先成功或者失败 就可以获取到结果</span></span><br><span class=\"line\">  p.<span class=\"property\">abort</span> = abort;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">// 模拟的接口调用 ajax 肯定有超时设置</span></span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newPromise = <span class=\"title function_\">wrap</span>(promise);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 超过3秒 就算超时 应该让 proimise 走到失败态</span></span><br><span class=\"line\">  newPromise.<span class=\"title function_\">abort</span>(<span class=\"string\">&#x27;超时了&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">newPromise.<span class=\"title function_\">then</span>((<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;成功的结果&#x27;</span> + data)</span><br><span class=\"line\">&#125;)).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;失败的结果&#x27;</span> + e)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>控制台等待 <code>1s</code> 后输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;成功的结果成功&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"promisify\"><a href=\"#promisify\" class=\"headerlink\" title=\"promisify\"></a>promisify</h4><p>promisify 是把一个 node 中的 api 转换成 promise 的写法。 在 node 版本 12.18 以上，已经支持了原生的 promisify 方法：<code>const fs = require(&#39;fs&#39;).promises</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">promisify</span> = (<span class=\"params\">fn</span>) =&gt; &#123; <span class=\"comment\">// 典型的高阶函数 参数是函数 返回值是函数 </span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"title function_\">fn</span>(...args,<span class=\"keyword\">function</span> (<span class=\"params\">err,data</span>) &#123; <span class=\"comment\">// node中的回调函数的参数 第一个永远是error</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(data);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果想要把 node 中所有的 api 都转换成 promise 的写法呢：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">promisifyAll</span> = (<span class=\"params\">target</span>) =&gt;&#123;</span><br><span class=\"line\">  <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(target).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> target[key] === <span class=\"string\">&#x27;function&#x27;</span>)&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 默认会将原有的方法 全部增加一个 Async 后缀 变成 promise 写法</span></span><br><span class=\"line\">      target[key+<span class=\"string\">&#x27;Async&#x27;</span>] = <span class=\"title function_\">promisify</span>(target[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-手写防抖函数\"><a href=\"#5-手写防抖函数\" class=\"headerlink\" title=\"5. 手写防抖函数\"></a>5. 手写防抖函数</h3><p>函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数防抖的实现</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">        args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果此时存在定时器的话，则取消之前的定时器重新记时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">      timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置定时器，使事件间隔指定事件后执行</span></span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">    &#125;, wait);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-手写节流函数\"><a href=\"#6-手写节流函数\" class=\"headerlink\" title=\"6. 手写节流函数\"></a>6. 手写节流函数</h3><p>函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数节流的实现;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fn, delay</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">        args = <span class=\"variable language_\">arguments</span>,</span><br><span class=\"line\">        nowTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果两次时间间隔超过了指定时间，则执行函数。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nowTime - curTime &gt;= delay) &#123;</span><br><span class=\"line\">      curTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-手写类型判断函数\"><a href=\"#7-手写类型判断函数\" class=\"headerlink\" title=\"7. 手写类型判断函数\"></a>7. 手写类型判断函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getType</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断数据是 null 的情况</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value + <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 判断数据是引用类型的情况</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valueClass = <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(value),</span><br><span class=\"line\">      type = valueClass.<span class=\"title function_\">split</span>(<span class=\"string\">&quot; &quot;</span>)[<span class=\"number\">1</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    type.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> type.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断数据是基本数据类型的情况和函数的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-手写-call-函数\"><a href=\"#8-手写-call-函数\" class=\"headerlink\" title=\"8. 手写 call 函数\"></a>8. 手写 call 函数</h3><p>call 函数的实现步骤：</p>\n<ol>\n<li>判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>\n<li>处理传入的参数，截取第一个参数后的所有参数。</li>\n<li>将函数作为上下文对象的一个属性。</li>\n<li>使用上下文对象来调用这个方法，并保存返回结果。</li>\n<li>删除刚才新增的属性。</li>\n<li>返回结果。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// call函数实现</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myCall</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断调用对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;type error&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 获取参数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = [...<span class=\"variable language_\">arguments</span>].<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>),</span><br><span class=\"line\">      result = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 判断 context 是否传入，如果未传入则设置为 window</span></span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 将调用函数设为对象的方法</span></span><br><span class=\"line\">  context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 调用函数</span></span><br><span class=\"line\">  result = context.<span class=\"title function_\">fn</span>(...args);</span><br><span class=\"line\">  <span class=\"comment\">// 将属性删除</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-手写-apply-函数\"><a href=\"#9-手写-apply-函数\" class=\"headerlink\" title=\"9. 手写 apply 函数\"></a>9. 手写 apply 函数</h3><p>apply 函数的实现步骤：</p>\n<ol>\n<li>判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>\n<li>将函数作为上下文对象的一个属性。</li>\n<li>判断参数值是否传入</li>\n<li>使用上下文对象来调用这个方法，并保存返回结果。</li>\n<li>删除刚才新增的属性</li>\n<li>返回结果</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// apply 函数实现</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myApply</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断调用对象是否为函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&quot;Error&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 判断 context 是否存在，如果未传入则为 window</span></span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 将函数设为对象的方法</span></span><br><span class=\"line\">  context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">arguments</span>[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    result = context.<span class=\"title function_\">fn</span>(...<span class=\"variable language_\">arguments</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    result = context.<span class=\"title function_\">fn</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 将属性删除</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-手写-bind-函数\"><a href=\"#10-手写-bind-函数\" class=\"headerlink\" title=\"10. 手写 bind 函数\"></a>10. 手写 bind 函数</h3><p>bind 函数的实现步骤：</p>\n<ol>\n<li>判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>保存当前函数的引用，获取其余传入参数值。</li>\n<li>创建一个函数返回</li>\n<li>函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bind 函数实现</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myBind</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断调用对象是否为函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&quot;Error&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 获取参数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = [...<span class=\"variable language_\">arguments</span>].<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>),</span><br><span class=\"line\">      fn = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据调用方式，传入不同绑定值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(</span><br><span class=\"line\">      <span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Fn</span> ? <span class=\"variable language_\">this</span> : context,</span><br><span class=\"line\">      args.<span class=\"title function_\">concat</span>(...<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-函数柯里化的实现\"><a href=\"#11-函数柯里化的实现\" class=\"headerlink\" title=\"11. 函数柯里化的实现\"></a>11. 函数柯里化的实现</h3><p>函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curry</span>(<span class=\"params\">fn, args</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取函数需要的参数长度</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = fn.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  args = args || [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subArgs = args.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 拼接得到现有的所有参数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      subArgs.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断参数的长度是否已经满足函数所需参数的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (subArgs.<span class=\"property\">length</span> &gt;= length) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果满足，执行函数</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, subArgs);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果不满足，递归返回科里化的函数，等待参数的传入</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> curry.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, fn, subArgs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6 实现</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curry</span>(<span class=\"params\">fn, ...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn.<span class=\"property\">length</span> &lt;= args.<span class=\"property\">length</span> ? <span class=\"title function_\">fn</span>(...args) : curry.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, fn, ...args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-实现AJAX请求\"><a href=\"#12-实现AJAX请求\" class=\"headerlink\" title=\"12. 实现AJAX请求\"></a>12. 实现AJAX请求</h3><p>AJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。</p>\n<p>创建AJAX请求的步骤：</p>\n<ul>\n<li><strong>创建一个 XMLHttpRequest 对象。</strong></li>\n<li>在这个对象上<strong>使用 open 方法创建一个 HTTP 请求</strong>，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。</li>\n<li>在发起请求前，可以为这个对象<strong>添加一些信息和监听函数</strong>。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。</li>\n<li>当对象的属性和监听函数设置完成后，最后调<strong>用 sent 方法来向服务器发起请求</strong>，可以传入参数作为发送的数据体。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SERVER_URL</span> = <span class=\"string\">&quot;/server&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\"><span class=\"comment\">// 创建 Http 请求</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"variable constant_\">SERVER_URL</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置状态监听函数</span></span><br><span class=\"line\">xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> !== <span class=\"number\">4</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 当请求成功时</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">handle</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">response</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">statusText</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 设置请求失败时的监听函数</span></span><br><span class=\"line\">xhr.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">statusText</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 设置请求头信息</span></span><br><span class=\"line\">xhr.<span class=\"property\">responseType</span> = <span class=\"string\">&quot;json&quot;</span>;</span><br><span class=\"line\">xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Accept&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 发送 Http 请求</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-使用Promise封装AJAX请求\"><a href=\"#13-使用Promise封装AJAX请求\" class=\"headerlink\" title=\"13. 使用Promise封装AJAX请求\"></a>13. 使用Promise封装AJAX请求</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise 封装实现：</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getJSON</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个 promise 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 新建一个 http 请求</span></span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 设置状态的监听函数</span></span><br><span class=\"line\">    xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> !== <span class=\"number\">4</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 当请求成功或失败时，改变 promise 的状态</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">response</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">statusText</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 设置错误监听函数</span></span><br><span class=\"line\">    xhr.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">statusText</span>));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 设置响应的数据类型</span></span><br><span class=\"line\">    xhr.<span class=\"property\">responseType</span> = <span class=\"string\">&quot;json&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 设置请求头信息</span></span><br><span class=\"line\">    xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Accept&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 发送 http 请求</span></span><br><span class=\"line\">    xhr.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-实现浅拷贝\"><a href=\"#14-实现浅拷贝\" class=\"headerlink\" title=\"14. 实现浅拷贝\"></a>14. 实现浅拷贝</h3><p>浅拷贝是指，一个新的对象对原始对象的属性值进行精确地拷贝，如果拷贝的是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是内存地址。如果其中一个对象的引用内存地址发生改变，另一个对象也会发生变化。</p>\n<h4 id=\"（1）Object-assign\"><a href=\"#（1）Object-assign\" class=\"headerlink\" title=\"（1）Object.assign()\"></a>（1）Object.assign()</h4><p><code>Object.assign()</code>是ES6中对象的拷贝方法，接受的第一个参数是目标对象，其余参数是源对象，用法：<code>Object.assign(target, source_1, ···)</code>，该方法可以实现浅拷贝，也可以实现一维对象的深拷贝。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>如果目标对象和源对象有同名属性，或者多个源对象有同名属性，则后面的属性会覆盖前面的属性。</li>\n<li>如果该函数只有一个参数，当参数为对象时，直接返回该对象；当参数不是对象时，会先将参数转为对象然后返回。</li>\n<li>因为<code>null</code> 和 <code>undefined</code> 不能转化为对象，所以第一个参数不能为<code>null</code>或 <code>undefined</code>，会报错。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> target = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> object2 = &#123;<span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> object3 = &#123;<span class=\"attr\">c</span>: <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(target,object2,object3);  </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(target);  <span class=\"comment\">// &#123;a: 1, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）扩展运算符\"><a href=\"#（2）扩展运算符\" class=\"headerlink\" title=\"（2）扩展运算符\"></a>（2）扩展运算符</h4><p>使用扩展运算符可以在构造字面量对象的时候，进行属性的拷贝。语法：<code>let cloneObj = &#123; ...obj &#125;;</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:&#123;<span class=\"attr\">c</span>:<span class=\"number\">1</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;...obj1&#125;;</span><br><span class=\"line\">obj1.<span class=\"property\">a</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1); <span class=\"comment\">//&#123;a:2,b:&#123;c:1&#125;&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj2); <span class=\"comment\">//&#123;a:1,b:&#123;c:1&#125;&#125;</span></span><br><span class=\"line\">obj1.<span class=\"property\">b</span>.<span class=\"property\">c</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1); <span class=\"comment\">//&#123;a:2,b:&#123;c:2&#125;&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj2); <span class=\"comment\">//&#123;a:1,b:&#123;c:2&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（3）数组方法实现数组浅拷贝\"><a href=\"#（3）数组方法实现数组浅拷贝\" class=\"headerlink\" title=\"（3）数组方法实现数组浅拷贝\"></a>（3）数组方法实现数组浅拷贝</h4><h6 id=\"1）Array-prototype-slice\"><a href=\"#1）Array-prototype-slice\" class=\"headerlink\" title=\"1）Array.prototype.slice\"></a><strong>1）Array.prototype.slice</strong></h6><ul>\n<li><code>slice()</code>方法是JavaScript数组的一个方法，这个方法可以从已有数组中返回选定的元素：用法：<code>array.slice(start, end)</code>，该方法不会改变原始数组。</li>\n<li>该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">slice</span>()); <span class=\"comment\">// [1,2,3,4]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">slice</span>() === arr); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2）Array-prototype-concat\"><a href=\"#2）Array-prototype-concat\" class=\"headerlink\" title=\"2）Array.prototype.concat\"></a><strong>2）Array.prototype.concat</strong></h6><ul>\n<li><code>concat()</code> 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</li>\n<li>该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">concat</span>()); <span class=\"comment\">// [1,2,3,4]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">concat</span>() === arr); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（4）手写实现浅拷贝\"><a href=\"#（4）手写实现浅拷贝\" class=\"headerlink\" title=\"（4）手写实现浅拷贝\"></a>（4）手写实现浅拷贝</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 浅拷贝的实现;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">shallowCopy</span>(<span class=\"params\">object</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只拷贝对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!object || <span class=\"keyword\">typeof</span> object !== <span class=\"string\">&quot;object&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 根据 object 的类型判断是新建一个数组还是对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObject = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(object) ? [] : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历 object，并且判断是 object 的属性才拷贝</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> object) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      newObject[key] = object[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newObject;</span><br><span class=\"line\">&#125;<span class=\"comment\">// 浅拷贝的实现;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">shallowCopy</span>(<span class=\"params\">object</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只拷贝对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!object || <span class=\"keyword\">typeof</span> object !== <span class=\"string\">&quot;object&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 根据 object 的类型判断是新建一个数组还是对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObject = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(object) ? [] : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历 object，并且判断是 object 的属性才拷贝</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> object) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      newObject[key] = object[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newObject;</span><br><span class=\"line\">&#125;<span class=\"comment\">// 浅拷贝的实现;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">shallowCopy</span>(<span class=\"params\">object</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只拷贝对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!object || <span class=\"keyword\">typeof</span> object !== <span class=\"string\">&quot;object&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 根据 object 的类型判断是新建一个数组还是对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObject = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(object) ? [] : &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历 object，并且判断是 object 的属性才拷贝</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> object) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      newObject[key] = object[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-实现深拷贝\"><a href=\"#15-实现深拷贝\" class=\"headerlink\" title=\"15. 实现深拷贝\"></a>15. 实现深拷贝</h3><ul>\n<li><strong>浅拷贝：</strong> 浅拷贝指的是将一个对象的属性值复制到另一个对象，如果有的属性的值为引用类型的话，那么会将这个引用的地址复制给对象，因此两个对象会有同一个引用类型的引用。浅拷贝可以使用  Object.assign 和展开运算符来实现。</li>\n<li><strong>深拷贝：</strong> 深拷贝相对浅拷贝而言，如果遇到属性值为引用类型的时候，它新建一个引用类型并将对应的值复制给它，因此对象获得的一个新的引用类型而不是一个原有类型的引用。深拷贝对于一些对象可以使用 JSON 的两个函数来实现，但是由于 JSON 的对象格式比 js 的对象格式更加严格，所以如果属性值里边出现函数或者 Symbol 类型的值时，会转换失败</li>\n</ul>\n<h4 id=\"（1）JSON-stringify\"><a href=\"#（1）JSON-stringify\" class=\"headerlink\" title=\"（1）JSON.stringify()\"></a>（1）JSON.stringify()</h4><ul>\n<li><code>JSON.parse(JSON.stringify(obj))</code>是目前比较常用的深拷贝方法之一，它的原理就是利用<code>JSON.stringify</code> 将<code>js</code>对象序列化（JSON字符串），再使用<code>JSON.parse</code>来反序列化(还原)<code>js</code>对象。</li>\n<li>这个方法可以简单粗暴的实现深拷贝，但是还存在问题，拷贝的对象中如果有函数，undefined，symbol，当使用过<code>JSON.stringify()</code>进行处理之后，都会消失。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;  <span class=\"attr\">a</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">              <span class=\"attr\">b</span>: &#123;</span><br><span class=\"line\">                 <span class=\"attr\">c</span>: <span class=\"number\">0</span></span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj1));</span><br><span class=\"line\">obj1.<span class=\"property\">a</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">obj1.<span class=\"property\">b</span>.<span class=\"property\">c</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1); <span class=\"comment\">// &#123;a: 1, b: &#123;c: 1&#125;&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj2); <span class=\"comment\">// &#123;a: 0, b: &#123;c: 0&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）函数库lodash的-cloneDeep方法\"><a href=\"#（2）函数库lodash的-cloneDeep方法\" class=\"headerlink\" title=\"（2）函数库lodash的_.cloneDeep方法\"></a>（2）函数库lodash的_.cloneDeep方法</h4><p>该函数库也有提供_.cloneDeep用来做 Deep Copy</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: &#123; <span class=\"attr\">f</span>: &#123; <span class=\"attr\">g</span>: <span class=\"number\">1</span> &#125; &#125;,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = _.<span class=\"title function_\">cloneDeep</span>(obj1);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1.<span class=\"property\">b</span>.<span class=\"property\">f</span> === obj2.<span class=\"property\">b</span>.<span class=\"property\">f</span>);<span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（3）手写实现深拷贝函数\"><a href=\"#（3）手写实现深拷贝函数\" class=\"headerlink\" title=\"（3）手写实现深拷贝函数\"></a>（3）手写实现深拷贝函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 深拷贝的实现</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepCopy</span>(<span class=\"params\">object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!object || <span class=\"keyword\">typeof</span> object !== <span class=\"string\">&quot;object&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObject = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(object) ? [] : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> object) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      newObject[key] =</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> object[key] === <span class=\"string\">&quot;object&quot;</span> ? <span class=\"title function_\">deepCopy</span>(object[key]) : object[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、数据处理\"><a href=\"#二、数据处理\" class=\"headerlink\" title=\"二、数据处理\"></a>二、数据处理</h2><h3 id=\"1-实现日期格式化函数\"><a href=\"#1-实现日期格式化函数\" class=\"headerlink\" title=\"1. 实现日期格式化函数\"></a>1. 实现日期格式化函数</h3><p>输入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">dateFormat</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&#x27;2020-12-01&#x27;</span>), <span class=\"string\">&#x27;yyyy/MM/dd&#x27;</span>) <span class=\"comment\">// 2020/12/01</span></span><br><span class=\"line\"><span class=\"title function_\">dateFormat</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&#x27;2020-04-01&#x27;</span>), <span class=\"string\">&#x27;yyyy/MM/dd&#x27;</span>) <span class=\"comment\">// 2020/04/01</span></span><br><span class=\"line\"><span class=\"title function_\">dateFormat</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&#x27;2020-04-01&#x27;</span>), <span class=\"string\">&#x27;yyyy年MM月dd日&#x27;</span>) <span class=\"comment\">// 2020年04月01日</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">dateFormat</span> = (<span class=\"params\">dateInput, format</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> day = dateInput.<span class=\"title function_\">getDate</span>() </span><br><span class=\"line\">    <span class=\"keyword\">var</span> month = dateInput.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> year = dateInput.<span class=\"title function_\">getFullYear</span>()   </span><br><span class=\"line\">    format = format.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/yyyy/</span>, year)</span><br><span class=\"line\">    format = format.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/MM/</span>,month)</span><br><span class=\"line\">    format = format.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/dd/</span>,day)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> format</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-交换a-b的值，不能用临时变量\"><a href=\"#2-交换a-b的值，不能用临时变量\" class=\"headerlink\" title=\"2. 交换a,b的值，不能用临时变量\"></a>2. 交换a,b的值，不能用临时变量</h3><p>巧妙的利用两个数的和、差：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = a + b</span><br><span class=\"line\">b = a - b</span><br><span class=\"line\">a = a - b</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-实现数组的乱序输出\"><a href=\"#3-实现数组的乱序输出\" class=\"headerlink\" title=\"3. 实现数组的乱序输出\"></a>3. 实现数组的乱序输出</h3><p>主要的实现思路就是：</p>\n<ul>\n<li>取出数组的第一个元素，随机产生一个索引值，将该第一个元素和这个索引对应的元素进行交换。</li>\n<li>第二次取出数据数组第二个元素，随机产生一个除了索引为1的之外的索引值，并将第二个元素与该索引值对应的元素进行交换</li>\n<li>按照上面的规律执行，直到遍历完成</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> randomIndex = <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * (arr.<span class=\"property\">length</span> - <span class=\"number\">1</span> - i)) + i;</span><br><span class=\"line\">  [arr[i], arr[randomIndex]] = [arr[randomIndex], arr[i]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr)</span><br></pre></td></tr></table></figure>\n\n<p>还有一方法就是倒序遍历：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> length = arr.<span class=\"property\">length</span>,</span><br><span class=\"line\">    randomIndex,</span><br><span class=\"line\">    temp;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (length) &#123;</span><br><span class=\"line\">    randomIndex = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * length--);</span><br><span class=\"line\">    temp = arr[length];</span><br><span class=\"line\">    arr[length] = arr[randomIndex];</span><br><span class=\"line\">    arr[randomIndex] = temp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-实现数组元素求和\"><a href=\"#4-实现数组元素求和\" class=\"headerlink\" title=\"4. 实现数组元素求和\"></a>4. 实现数组元素求和</h3><ul>\n<li>arr=[1,2,3,4,5,6,7,8,9,10]，求和</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = arr.<span class=\"title function_\">reduce</span>( <span class=\"function\">(<span class=\"params\">total,i</span>) =&gt;</span> total += i,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>arr=[1,2,3,[[4,5],6],7,8,9]，求和</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> = arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[[<span class=\"number\">4</span>,<span class=\"number\">5</span>],<span class=\"number\">6</span>],<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr= arr.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>).<span class=\"title function_\">reduce</span>( <span class=\"function\">(<span class=\"params\">total,i</span>) =&gt;</span> total += <span class=\"title class_\">Number</span>(i),<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr);</span><br></pre></td></tr></table></figure>\n\n<p>递归实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.<span class=\"property\">length</span> == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>] </span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>] + <span class=\"title function_\">add</span>(arr.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(arr)) <span class=\"comment\">// 21</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-实现数组的扁平化\"><a href=\"#5-实现数组的扁平化\" class=\"headerlink\" title=\"5. 实现数组的扁平化\"></a>5. 实现数组的扁平化</h3><p><strong>（1）递归实现</strong></p>\n<p>普通的递归思路很容易理解，就是通过循环递归的方式，一项一项地去遍历，如果每一项还是一个数组，那么就继续往下遍历，利用递归程序的方法，来实现数组的每一项的连接：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]]];</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flatten</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(arr[i])) &#123;</span><br><span class=\"line\">      result = result.<span class=\"title function_\">concat</span>(<span class=\"title function_\">flatten</span>(arr[i]));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">flatten</span>(arr);  <span class=\"comment\">//  [1, 2, 3, 4，5]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>（2）reduce 函数迭代</strong></p>\n<p>从上面普通的递归函数中可以看出，其实就是对数组的每一项进行处理，那么其实也可以用reduce 来实现数组的拼接，从而简化第一种方法的代码，改造后的代码如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]];</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flatten</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.<span class=\"title function_\">reduce</span>(<span class=\"keyword\">function</span>(<span class=\"params\">prev, next</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prev.<span class=\"title function_\">concat</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(next) ? <span class=\"title function_\">flatten</span>(next) : next)</span><br><span class=\"line\">    &#125;, [])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">flatten</span>(arr));<span class=\"comment\">//  [1, 2, 3, 4，5]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>（3）扩展运算符实现</strong></p>\n<p>这个方法的实现，采用了扩展运算符和 some 的方法，两者共同使用，达到数组扁平化的目的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]];</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flatten</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (arr.<span class=\"title function_\">some</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(item))) &#123;</span><br><span class=\"line\">        arr = [].<span class=\"title function_\">concat</span>(...arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">flatten</span>(arr)); <span class=\"comment\">//  [1, 2, 3, 4，5]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>（4）split 和 toString</strong></p>\n<p>可以通过 split 和 toString 两个方法来共同实现数组扁平化，由于数组会默认带一个 toString 的方法，所以可以把数组直接转换成逗号分隔的字符串，然后再用 split 方法把字符串重新转换为数组，如下面的代码所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]];</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flatten</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">flatten</span>(arr)); <span class=\"comment\">//  [1, 2, 3, 4，5]</span></span><br></pre></td></tr></table></figure>\n\n<p>通过这两个方法可以将多维数组直接转换成逗号连接的字符串，然后再重新分隔成数组。</p>\n<p><strong>（5）ES6 中的 flat</strong></p>\n<p>我们还可以直接调用 ES6 中的 flat 方法来实现数组扁平化。flat 方法的语法：<code>arr.flat([depth])</code></p>\n<p>其中 depth 是 flat 的参数，depth 是可以传递数组的展开深度（默认不填、数值是 1），即展开一层数组。如果层数不确定，参数可以传进 Infinity，代表不论多少层都要展开：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]];</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flatten</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.<span class=\"title function_\">flat</span>(<span class=\"title class_\">Infinity</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">flatten</span>(arr)); <span class=\"comment\">//  [1, 2, 3, 4，5]</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看出，一个嵌套了两层的数组，通过将 flat 方法的参数设置为 Infinity，达到了我们预期的效果。其实同样也可以设置成 2，也能实现这样的效果。在编程过程中，如果数组的嵌套层数不确定，最好直接使用 Infinity，可以达到扁平化。 <strong>（6）正则和 JSON 方法</strong> 在第4种方法中已经使用 toString 方法，其中仍然采用了将 JSON.stringify 的方法先转换为字符串，然后通过正则表达式过滤掉字符串中的数组的方括号，最后再利用 JSON.parse 把它转换成数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]], <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flatten</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr);</span><br><span class=\"line\">  str = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/(\\[|\\])/g</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  str = <span class=\"string\">&#x27;[&#x27;</span> + str + <span class=\"string\">&#x27;]&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(str); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">flatten</span>(arr)); <span class=\"comment\">//  [1, 2, 3, 4，5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-实现数组去重\"><a href=\"#6-实现数组去重\" class=\"headerlink\" title=\"6. 实现数组去重\"></a>6. 实现数组去重</h3><p>给定某无序数组，要求去除数组中的重复数字并且返回新的无重复数组。</p>\n<p>ES6方法（使用数据结构集合）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(array)); <span class=\"comment\">// [1, 2, 3, 5, 9, 8]</span></span><br></pre></td></tr></table></figure>\n\n<p>ES5方法：使用map存储不重复的数字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">uniqueArray</span>(array); <span class=\"comment\">// [1, 2, 3, 5, 9, 8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">uniqueArray</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> map = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; array.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!map.<span class=\"title function_\">hasOwnProperty</span>([array[i]])) &#123;</span><br><span class=\"line\">      map[array[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(array[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-实现数组的flat方法\"><a href=\"#7-实现数组的flat方法\" class=\"headerlink\" title=\"7. 实现数组的flat方法\"></a>7. 实现数组的flat方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_flat</span>(<span class=\"params\">arr, depth</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(arr) || depth &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(cur)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> prev.<span class=\"title function_\">concat</span>(<span class=\"title function_\">_flat</span>(cur, depth - <span class=\"number\">1</span>))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> prev.<span class=\"title function_\">concat</span>(cur);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-实现数组的push方法\"><a href=\"#8-实现数组的push方法\" class=\"headerlink\" title=\"8. 实现数组的push方法\"></a>8. 实现数组的push方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span> ; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">length</span>] = <span class=\"variable language_\">arguments</span>[i] ;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-实现数组的filter方法\"><a href=\"#9-实现数组的filter方法\" class=\"headerlink\" title=\"9. 实现数组的filter方法\"></a>9. 实现数组的filter方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_filter</span> = <span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;参数必须是一个函数&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>[i]) &amp;&amp; res.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-实现数组的map方法\"><a href=\"#10-实现数组的map方法\" class=\"headerlink\" title=\"10. 实现数组的map方法\"></a>10. 实现数组的map方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_map</span> = <span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;参数必须是一个函数&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">push</span>(<span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>[i]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-实现字符串的repeat方法\"><a href=\"#11-实现字符串的repeat方法\" class=\"headerlink\" title=\"11. 实现字符串的repeat方法\"></a>11. 实现字符串的repeat方法</h3><p>输入字符串s，以及其重复的次数，输出重复的结果，例如输入abc，2，输出abcabc。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">repeat</span>(<span class=\"params\">s, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(n + <span class=\"number\">1</span>)).<span class=\"title function_\">join</span>(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>递归：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">repeat</span>(<span class=\"params\">s, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n &gt; <span class=\"number\">0</span>) ? s.<span class=\"title function_\">concat</span>(<span class=\"title function_\">repeat</span>(s, --n)) : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-实现字符串翻转\"><a href=\"#12-实现字符串翻转\" class=\"headerlink\" title=\"12. 实现字符串翻转\"></a>12. 实现字符串翻转</h3><p>在字符串的原型链上添加一个方法，实现字符串翻转：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">String</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_reverse</span> = <span class=\"keyword\">function</span>(<span class=\"params\">a</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> res = obj.<span class=\"property\">_reverse</span> (<span class=\"string\">&#x27;hello&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);    <span class=\"comment\">// olleh</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，必须通过实例化对象之后再去调用定义的方法，不然找不到该方法。</p>\n<h3 id=\"13-将数字每千分位用逗号隔开\"><a href=\"#13-将数字每千分位用逗号隔开\" class=\"headerlink\" title=\"13. 将数字每千分位用逗号隔开\"></a>13. 将数字每千分位用逗号隔开</h3><p><strong>数字有小数版本：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">format</span> = n =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = n.<span class=\"title function_\">toString</span>() <span class=\"comment\">// 转成字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> decimals = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">// 判断是否有小数</span></span><br><span class=\"line\">    num.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;.&#x27;</span>) &gt; -<span class=\"number\">1</span> ? decimals = num.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>)[<span class=\"number\">1</span>] : decimals</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = num.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> remainder = len % <span class=\"number\">3</span></span><br><span class=\"line\">        decimals ? temp = <span class=\"string\">&#x27;.&#x27;</span> + decimals : temp</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (remainder &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 不是3的整数倍</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> num.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, remainder) + <span class=\"string\">&#x27;,&#x27;</span> + num.<span class=\"title function_\">slice</span>(remainder, len).<span class=\"title function_\">match</span>(<span class=\"regexp\">/\\d&#123;3&#125;/g</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) + temp</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 是3的整数倍</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> num.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, len).<span class=\"title function_\">match</span>(<span class=\"regexp\">/\\d&#123;3&#125;/g</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) + temp </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">format</span>(<span class=\"number\">12323.33</span>)  <span class=\"comment\">// &#x27;12,323.33&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>数字无小数版本：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">format</span> = n =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = n.<span class=\"title function_\">toString</span>() </span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = num.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> remainder = len % <span class=\"number\">3</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (remainder &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 不是3的整数倍</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> num.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, remainder) + <span class=\"string\">&#x27;,&#x27;</span> + num.<span class=\"title function_\">slice</span>(remainder, len).<span class=\"title function_\">match</span>(<span class=\"regexp\">/\\d&#123;3&#125;/g</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 是3的整数倍</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> num.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, len).<span class=\"title function_\">match</span>(<span class=\"regexp\">/\\d&#123;3&#125;/g</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">format</span>(<span class=\"number\">1232323</span>)  <span class=\"comment\">// &#x27;1,232,323&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-实现非负大整数相加\"><a href=\"#14-实现非负大整数相加\" class=\"headerlink\" title=\"14. 实现非负大整数相加\"></a>14. 实现非负大整数相加</h3><p>JavaScript对数值有范围的限制，限制如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">MAX_VALUE</span> <span class=\"comment\">// 1.7976931348623157e+308</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">MAX_SAFE_INTEGER</span> <span class=\"comment\">// 9007199254740991</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">MIN_VALUE</span> <span class=\"comment\">// 5e-324</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">MIN_SAFE_INTEGER</span> <span class=\"comment\">// -9007199254740991</span></span><br></pre></td></tr></table></figure>\n\n<p>如果想要对一个超大的整数(<code>&gt; Number.MAX_SAFE_INTEGER</code>)进行加法运算，但是又想输出一般形式，那么使用 + 是无法达到的，一旦数字超过 <code>Number.MAX_SAFE_INTEGER</code> 数字会被立即转换为科学计数法，并且数字精度相比以前将会有误差。</p>\n<p>实现一个算法进行大数的相加：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sumBigNumber</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  a = a.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  b = b.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (a.<span class=\"property\">length</span> || b.<span class=\"property\">length</span> || temp) &#123;</span><br><span class=\"line\">    temp += ~~a.<span class=\"title function_\">pop</span>() + ~~b.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    res = (temp % <span class=\"number\">10</span>) + res;</span><br><span class=\"line\">    temp  = temp &gt; <span class=\"number\">9</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^0+/</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其主要的思路如下：</p>\n<ul>\n<li>首先用字符串的方式来保存大数，这样数字在数学表示上就不会发生变化</li>\n<li>初始化res，temp来保存中间的计算结果，并将两个字符串转化为数组，以便进行每一位的加法运算</li>\n<li>将两个数组的对应的位进行相加，两个数相加的结果可能大于10，所以可能要仅为，对10进行取余操作，将结果保存在当前位</li>\n<li>判断当前位是否大于9，也就是是否会进位，若是则将temp赋值为true，因为在加法运算中，true会自动隐式转化为1，以便于下一次相加</li>\n<li>重复上述操作，直至计算结束</li>\n</ul>\n<h3 id=\"13-实现-add-1-2-3\"><a href=\"#13-实现-add-1-2-3\" class=\"headerlink\" title=\"13. 实现 add(1)(2)(3)\"></a>13. 实现 add(1)(2)(3)</h3><p>函数柯里化概念： 柯里化（Currying）是把接受多个参数的函数转变为接受一个单一参数的函数，并且返回接受余下的参数且返回结果的新函数的技术。</p>\n<p>1）粗暴版</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span> (a) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">b</span>) &#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">c</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n<p>2）柯里化解决方案</p>\n<ul>\n<li>参数长度固定</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"keyword\">function</span> (<span class=\"params\">m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> temp = <span class=\"keyword\">function</span> (<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">add</span>(m + n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  temp.<span class=\"property\">toString</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)(<span class=\"number\">5</span>)); <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">3</span>)(<span class=\"number\">6</span>)(<span class=\"number\">9</span>)(<span class=\"number\">25</span>)); <span class=\"comment\">// 43</span></span><br></pre></td></tr></table></figure>\n\n<p>对于add(3)(4)(5)，其执行过程如下：</p>\n<ol>\n<li>先执行add(3)，此时m=3，并且返回temp函数；</li>\n<li>执行temp(4)，这个函数内执行add(m+n)，n是此次传进来的数值4，m值还是上一步中的3，所以add(m+n)=add(3+4)=add(7)，此时m=7，并且返回temp函数</li>\n<li>执行temp(5)，这个函数内执行add(m+n)，n是此次传进来的数值5，m值还是上一步中的7，所以add(m+n)=add(7+5)=add(12)，此时m=12，并且返回temp函数</li>\n<li>由于后面没有传入参数，等于返回的temp函数不被执行而是打印，了解JS的朋友都知道对象的toString是修改对象转换字符串的方法，因此代码中temp函数的toString函数return m值，而m值是最后一步执行函数时的值m=12，所以返回值是12。</li>\n</ol>\n<ul>\n<li>参数长度不固定</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span> (...args) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//求和</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> args.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">currying</span> (fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = []</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">temp</span> (...newArgs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newArgs.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">            args = [</span><br><span class=\"line\">                ...args,</span><br><span class=\"line\">                ...newArgs</span><br><span class=\"line\">            ]</span><br><span class=\"line\">            <span class=\"keyword\">return</span> temp</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> val = fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">            args = [] <span class=\"comment\">//保证再次调用时清空</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> val</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> addCurry = <span class=\"title function_\">currying</span>(add)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">addCurry</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>, <span class=\"number\">5</span>)())  <span class=\"comment\">//15</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">addCurry</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)())  <span class=\"comment\">//15</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">addCurry</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)())  <span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-实现类数组转化为数组\"><a href=\"#14-实现类数组转化为数组\" class=\"headerlink\" title=\"14. 实现类数组转化为数组\"></a>14. 实现类数组转化为数组</h3><p>类数组转换为数组的方法有这样几种：</p>\n<ul>\n<li>通过 call 调用数组的 slice 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(arrayLike);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过 call 调用数组的 splice 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">splice</span>.<span class=\"title function_\">call</span>(arrayLike, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过 apply 调用数组的 concat 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">concat</span>.<span class=\"title function_\">apply</span>([], arrayLike);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过 Array.from 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(arrayLike);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-使用-reduce-求和\"><a href=\"#15-使用-reduce-求和\" class=\"headerlink\" title=\"15. 使用 reduce 求和\"></a>15. 使用 reduce 求和</h3><p>arr = [1,2,3,4,5,6,7,8,9,10]，求和</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\">arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev, cur</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> prev + cur &#125;, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<p>arr = [1,2,3,[[4,5],6],7,8,9]，求和</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\">arr.<span class=\"title function_\">flat</span>(<span class=\"title class_\">Infinity</span>).<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev, cur</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> prev + cur &#125;, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<p>arr = [{a:1, b:3}, {a:2, b:3, c:4}, {a:3}]，求和</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">9</span>, <span class=\"attr\">b</span>:<span class=\"number\">3</span>, <span class=\"attr\">c</span>:<span class=\"number\">4</span>&#125;, &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">3</span>&#125;, &#123;<span class=\"attr\">a</span>:<span class=\"number\">3</span>&#125;] </span><br><span class=\"line\"></span><br><span class=\"line\">arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> prev + cur[<span class=\"string\">&quot;a&quot;</span>];</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-将js对象转化为树形结构\"><a href=\"#16-将js对象转化为树形结构\" class=\"headerlink\" title=\"16. 将js对象转化为树形结构\"></a>16. 将js对象转化为树形结构</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转换前：</span></span><br><span class=\"line\">source = [&#123;</span><br><span class=\"line\">            <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">pid</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;body&#x27;</span></span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">            <span class=\"attr\">id</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">            <span class=\"attr\">pid</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;title&#x27;</span></span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">            <span class=\"attr\">id</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">            <span class=\"attr\">pid</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;div&#x27;</span></span><br><span class=\"line\">          &#125;]</span><br><span class=\"line\"><span class=\"comment\">// 转换为: </span></span><br><span class=\"line\">tree = [&#123;</span><br><span class=\"line\">          <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">          <span class=\"attr\">pid</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">&#x27;body&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">children</span>: [&#123;</span><br><span class=\"line\">            <span class=\"attr\">id</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">            <span class=\"attr\">pid</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;title&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">children</span>: [&#123;</span><br><span class=\"line\">              <span class=\"attr\">id</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">              <span class=\"attr\">pid</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">              <span class=\"attr\">name</span>: <span class=\"string\">&#x27;div&#x27;</span></span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;]</span><br></pre></td></tr></table></figure>\n\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">jsonToTree</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化结果数组，并判断输入数据的格式</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(data)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 使用map，将当前对象的id与当前对象对应存储起来</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> map = &#123;&#125;;</span><br><span class=\"line\">  data.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    map[item.<span class=\"property\">id</span>] = item;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// </span></span><br><span class=\"line\">  data.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> parent = map[item.<span class=\"property\">pid</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(parent) &#123;</span><br><span class=\"line\">      (parent.<span class=\"property\">children</span> || (parent.<span class=\"property\">children</span> = [])).<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-使用ES5和ES6求函数参数的和\"><a href=\"#17-使用ES5和ES6求函数参数的和\" class=\"headerlink\" title=\"17. 使用ES5和ES6求函数参数的和\"></a>17. 使用ES5和ES6求函数参数的和</h3><p>ES5：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">forEach</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"keyword\">function</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">        sum += item * <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ES6：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">...nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">    nums.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">        sum += item * <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-解析-URL-Params-为对象\"><a href=\"#18-解析-URL-Params-为对象\" class=\"headerlink\" title=\"18. 解析 URL Params 为对象\"></a>18. 解析 URL Params 为对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">&#x27;http://www.domain.com/?user=anonymous&amp;id=123&amp;id=456&amp;city=%E5%8C%97%E4%BA%AC&amp;enabled&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">parseParam</span>(url)</span><br><span class=\"line\"><span class=\"comment\">/* 结果</span></span><br><span class=\"line\"><span class=\"comment\">&#123; user: &#x27;anonymous&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">  id: [ 123, 456 ], // 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型</span></span><br><span class=\"line\"><span class=\"comment\">  city: &#x27;北京&#x27;, // 中文需解码</span></span><br><span class=\"line\"><span class=\"comment\">  enabled: true, // 未指定值得 key 约定为 true</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parseParam</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> paramsStr = <span class=\"regexp\">/.+\\?(.+)$/</span>.<span class=\"title function_\">exec</span>(url)[<span class=\"number\">1</span>]; <span class=\"comment\">// 将 ? 后面的字符串取出来</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> paramsArr = paramsStr.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&amp;&#x27;</span>); <span class=\"comment\">// 将字符串以 &amp; 分割后存到数组中</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> paramsObj = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 将 params 存到对象中</span></span><br><span class=\"line\">  paramsArr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">param</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/=/</span>.<span class=\"title function_\">test</span>(param)) &#123; <span class=\"comment\">// 处理有 value 的参数</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> [key, val] = param.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;=&#x27;</span>); <span class=\"comment\">// 分割 key 和 value</span></span><br><span class=\"line\">      val = <span class=\"built_in\">decodeURIComponent</span>(val); <span class=\"comment\">// 解码</span></span><br><span class=\"line\">      val = <span class=\"regexp\">/^\\d+$/</span>.<span class=\"title function_\">test</span>(val) ? <span class=\"built_in\">parseFloat</span>(val) : val; <span class=\"comment\">// 判断是否转为数字</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (paramsObj.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123; <span class=\"comment\">// 如果对象有 key，则添加一个值</span></span><br><span class=\"line\">        paramsObj[key] = [].<span class=\"title function_\">concat</span>(paramsObj[key], val);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果对象没有这个 key，创建 key 并设置值</span></span><br><span class=\"line\">        paramsObj[key] = val;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 处理没有 value 的参数</span></span><br><span class=\"line\">      paramsObj[param] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> paramsObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、场景应用\"><a href=\"#三、场景应用\" class=\"headerlink\" title=\"三、场景应用\"></a>三、场景应用</h2><h3 id=\"1-循环打印红黄绿\"><a href=\"#1-循环打印红黄绿\" class=\"headerlink\" title=\"1. 循环打印红黄绿\"></a>1. 循环打印红黄绿</h3><p>下面来看一道比较典型的问题，通过这个问题来对比几种异步编程方法：<strong>红灯 3s 亮一次，绿灯 1s 亮一次，黄灯 2s 亮一次；如何让三个灯不断交替重复亮灯？</strong></p>\n<p>三个亮灯函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">red</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;red&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">green</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;green&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">yellow</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;yellow&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这道题复杂的地方在于<strong>需要“交替重复”亮灯</strong>，而不是“亮完一次”就结束了。</p>\n<h4 id=\"（1）用-callback-实现\"><a href=\"#（1）用-callback-实现\" class=\"headerlink\" title=\"（1）用 callback 实现\"></a>（1）用 callback 实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">task</span> = (<span class=\"params\">timer, light, callback</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (light === <span class=\"string\">&#x27;red&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">red</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (light === <span class=\"string\">&#x27;green&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">green</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (light === <span class=\"string\">&#x27;yellow&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">yellow</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">    &#125;, timer)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">task</span>(<span class=\"number\">3000</span>, <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">task</span>(<span class=\"number\">2000</span>, <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">task</span>(<span class=\"number\">1000</span>, <span class=\"string\">&#x27;yellow&#x27;</span>, <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这里存在一个 bug：代码只是完成了一次流程，执行后红黄绿灯分别只亮一次。该如何让它交替重复进行呢？</p>\n<p>上面提到过递归，可以递归亮灯的一个周期：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">step</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">task</span>(<span class=\"number\">3000</span>, <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">task</span>(<span class=\"number\">2000</span>, <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">task</span>(<span class=\"number\">1000</span>, <span class=\"string\">&#x27;yellow&#x27;</span>, step)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">step</span>()</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意看黄灯亮的回调里又再次调用了 step 方法</strong> 以完成循环亮灯。</p>\n<h4 id=\"（2）用-promise-实现\"><a href=\"#（2）用-promise-实现\" class=\"headerlink\" title=\"（2）用 promise 实现\"></a>（2）用 promise 实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">task</span> = (<span class=\"params\">timer, light</span>) =&gt; </span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (light === <span class=\"string\">&#x27;red&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">red</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (light === <span class=\"string\">&#x27;green&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">green</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (light === <span class=\"string\">&#x27;yellow&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">yellow</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">        &#125;, timer)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">step</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">task</span>(<span class=\"number\">3000</span>, <span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">task</span>(<span class=\"number\">2000</span>, <span class=\"string\">&#x27;green&#x27;</span>))</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">task</span>(<span class=\"number\">2100</span>, <span class=\"string\">&#x27;yellow&#x27;</span>))</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(step)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">step</span>()</span><br></pre></td></tr></table></figure>\n\n<p>这里将回调移除，在一次亮灯结束后，resolve 当前 promise，并依然使用递归进行。</p>\n<h4 id=\"（3）用-async-await-实现\"><a href=\"#（3）用-async-await-实现\" class=\"headerlink\" title=\"（3）用 async/await 实现\"></a>（3）用 async/await 实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">taskRunner</span> =  <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">task</span>(<span class=\"number\">3000</span>, <span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">task</span>(<span class=\"number\">2000</span>, <span class=\"string\">&#x27;green&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">task</span>(<span class=\"number\">2100</span>, <span class=\"string\">&#x27;yellow&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">taskRunner</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">taskRunner</span>()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-实现每隔一秒打印-1-2-3-4\"><a href=\"#2-实现每隔一秒打印-1-2-3-4\" class=\"headerlink\" title=\"2. 实现每隔一秒打印 1,2,3,4\"></a>2. 实现每隔一秒打印 1,2,3,4</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用闭包实现</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  (<span class=\"keyword\">function</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">    &#125;, i * <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用 let 块级作用域</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">  &#125;, i * <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-小孩报数问题\"><a href=\"#3-小孩报数问题\" class=\"headerlink\" title=\"3. 小孩报数问题\"></a>3. 小孩报数问题</h3><p>有30个小孩儿，编号从1-30，围成一圈依此报数，1、2、3 数到 3 的小孩儿退出这个圈， 然后下一个小孩 重新报数 1、2、3，问最后剩下的那个小孩儿的编号是多少?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">childNum</span>(<span class=\"params\">num, count</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> allplayer = [];    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; num; i++)&#123;</span><br><span class=\"line\">        allplayer[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> exitCount = <span class=\"number\">0</span>;    <span class=\"comment\">// 离开人数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> counter = <span class=\"number\">0</span>;      <span class=\"comment\">// 记录报数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> curIndex = <span class=\"number\">0</span>;     <span class=\"comment\">// 当前下标</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(exitCount &lt; num - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(allplayer[curIndex] !== <span class=\"number\">0</span>) counter++;    </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(counter == count)&#123;</span><br><span class=\"line\">            allplayer[curIndex] = <span class=\"number\">0</span>;                 </span><br><span class=\"line\">            counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">            exitCount++;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        curIndex++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(curIndex == num)&#123;</span><br><span class=\"line\">            curIndex = <span class=\"number\">0</span>               </span><br><span class=\"line\">        &#125;;           </span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; num; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(allplayer[i] !== <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> allplayer[i]</span><br><span class=\"line\">        &#125;      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">childNum</span>(<span class=\"number\">30</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-用Promise实现图片的异步加载\"><a href=\"#4-用Promise实现图片的异步加载\" class=\"headerlink\" title=\"4. 用Promise实现图片的异步加载\"></a>4. 用Promise实现图片的异步加载</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">imageAsync</span>=(<span class=\"params\">url</span>)=&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\">                img.<span class=\"property\">src</span> = url;</span><br><span class=\"line\">                img.οnlοad=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`图片请求成功，此处进行通用操作`</span>);</span><br><span class=\"line\">                    <span class=\"title function_\">resolve</span>(image);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                img.οnerrοr=<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`失败，此处进行失败的通用操作`</span>);</span><br><span class=\"line\">                    <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"title function_\">imageAsync</span>(<span class=\"string\">&quot;url&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;加载成功&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;加载失败&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-实现发布-订阅模式\"><a href=\"#5-实现发布-订阅模式\" class=\"headerlink\" title=\"5. 实现发布-订阅模式\"></a>5. 实现发布-订阅模式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EventCenter</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1. 定义事件容器，用来装事件数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> handlers = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2. 添加事件方法，参数：事件名 事件方法</span></span><br><span class=\"line\">  <span class=\"title function_\">addEventListener</span>(<span class=\"params\">type, handler</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建新数组容器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type]) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type] = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 存入事件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type].<span class=\"title function_\">push</span>(handler)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3. 触发事件，参数：事件名 事件参数</span></span><br><span class=\"line\">  <span class=\"title function_\">dispatchEvent</span>(<span class=\"params\">type, params</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 若没有注册该事件则抛出错误</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;该事件未注册&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 触发事件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type].<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">handler</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">handler</span>(...params)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 4. 事件移除，参数：事件名 要删除事件，若无第二个参数则删除该事件的订阅和发布</span></span><br><span class=\"line\">  <span class=\"title function_\">removeEventListener</span>(<span class=\"params\">type, handler</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;事件无效&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!handler) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 移除事件</span></span><br><span class=\"line\">      <span class=\"keyword\">delete</span> <span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type]</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> index = <span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type].<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el === handler)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;无该绑定事件&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 移除事件</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type].<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type].<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-查找文章中出现频率最高的单词\"><a href=\"#6-查找文章中出现频率最高的单词\" class=\"headerlink\" title=\"6. 查找文章中出现频率最高的单词\"></a>6. 查找文章中出现频率最高的单词</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findMostWord</span>(<span class=\"params\">article</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 合法性判断</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!article) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 参数处理</span></span><br><span class=\"line\">  article = article.<span class=\"title function_\">trim</span>().<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> wordList = article.<span class=\"title function_\">match</span>(<span class=\"regexp\">/[a-z]+/g</span>),</span><br><span class=\"line\">    visited = [],</span><br><span class=\"line\">    maxNum = <span class=\"number\">0</span>,</span><br><span class=\"line\">    maxWord = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  article = <span class=\"string\">&quot; &quot;</span> + wordList.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;  &quot;</span>) + <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历判断单词出现次数</span></span><br><span class=\"line\">  wordList.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (visited.<span class=\"title function_\">indexOf</span>(item) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 加入 visited </span></span><br><span class=\"line\">      visited.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> word = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot; &quot;</span> + item + <span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;g&quot;</span>),</span><br><span class=\"line\">        num = article.<span class=\"title function_\">match</span>(word).<span class=\"property\">length</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (num &gt; maxNum) &#123;</span><br><span class=\"line\">        maxNum = num;</span><br><span class=\"line\">        maxWord = item;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> maxWord + <span class=\"string\">&quot;  &quot;</span> + maxNum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-封装异步的fetch，使用async-await方式来使用\"><a href=\"#7-封装异步的fetch，使用async-await方式来使用\" class=\"headerlink\" title=\"7. 封装异步的fetch，使用async await方式来使用\"></a>7. 封装异步的fetch，使用async await方式来使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">HttpRequestUtil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"title function_\">get</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(url);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> res.<span class=\"title function_\">json</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"title function_\">post</span>(<span class=\"params\">url, data</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(url, &#123;</span><br><span class=\"line\">                <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(data)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> res.<span class=\"title function_\">json</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"title function_\">put</span>(<span class=\"params\">url, data</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(url, &#123;</span><br><span class=\"line\">                <span class=\"attr\">method</span>: <span class=\"string\">&#x27;PUT&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">data</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(data)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> res.<span class=\"title function_\">json</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"title function_\">delete</span>(<span class=\"params\">url, data</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(url, &#123;</span><br><span class=\"line\">                <span class=\"attr\">method</span>: <span class=\"string\">&#x27;DELETE&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">data</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(data)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> res.<span class=\"title function_\">json</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> httpRequestUtil = <span class=\"keyword\">new</span> <span class=\"title class_\">HttpRequestUtil</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> httpRequestUtil.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://golderbrother.cn/&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-实现prototype继承\"><a href=\"#8-实现prototype继承\" class=\"headerlink\" title=\"8. 实现prototype继承\"></a>8. 实现prototype继承</h3><p>所谓的原型链继承就是让新实例的原型等于父类的实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父方法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SupperFunction</span>(<span class=\"params\">flag1</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">flag1</span> = flag1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子方法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SubFunction</span>(<span class=\"params\">flag2</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">flag2</span> = flag2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//父实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> superInstance = <span class=\"keyword\">new</span> <span class=\"title class_\">SupperFunction</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子继承父</span></span><br><span class=\"line\"><span class=\"title class_\">SubFunction</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = superInstance;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> subInstance = <span class=\"keyword\">new</span> <span class=\"title class_\">SubFunction</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">//子调用自己和父的属性</span></span><br><span class=\"line\">subInstance.<span class=\"property\">flag1</span>;   <span class=\"comment\">// true</span></span><br><span class=\"line\">subInstance.<span class=\"property\">flag2</span>;   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-实现双向数据绑定\"><a href=\"#9-实现双向数据绑定\" class=\"headerlink\" title=\"9. 实现双向数据绑定\"></a>9. 实现双向数据绑定</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> input = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;input&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> span = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;span&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 数据劫持</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, <span class=\"string\">&#x27;text&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;获取数据了&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">set</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;数据更新了&#x27;</span>)</span><br><span class=\"line\">    input.<span class=\"property\">value</span> = newVal</span><br><span class=\"line\">    span.<span class=\"property\">innerHTML</span> = newVal</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 输入监听</span></span><br><span class=\"line\">input.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keyup&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  obj.<span class=\"property\">text</span> = e.<span class=\"property\">target</span>.<span class=\"property\">value</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-实现简单路由\"><a href=\"#10-实现简单路由\" class=\"headerlink\" title=\"10. 实现简单路由\"></a>10. 实现简单路由</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hash路由</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Route</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 路由存储对象</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">routes</span> = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当前hash</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">currentHash</span> = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// 绑定this，避免监听时this指向改变</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">freshRoute</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">freshRoute</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 监听</span></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;load&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">freshRoute</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;hashchange&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">freshRoute</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 存储</span></span><br><span class=\"line\">  storeRoute (path, cb) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">routes</span>[path] = cb || <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 更新</span></span><br><span class=\"line\">  freshRoute () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">currentHash</span> = location.<span class=\"property\">hash</span>.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>) || <span class=\"string\">&#x27;/&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">routes</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">currentHash</span>]()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-实现斐波那契数列\"><a href=\"#11-实现斐波那契数列\" class=\"headerlink\" title=\"11. 实现斐波那契数列\"></a>11. 实现斐波那契数列</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span> (n)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>(n-<span class=\"number\">2</span>)+<span class=\"title function_\">fn</span>(n-<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 优化</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fibonacci2</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arrLen = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= arrLen) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = arrLen; i &lt; n; i++) &#123;</span><br><span class=\"line\">        arr.<span class=\"title function_\">push</span>(arr[i - <span class=\"number\">1</span>] + arr[ i - <span class=\"number\">2</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 非递归</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        pre1 = pre2;</span><br><span class=\"line\">        pre2 = current;</span><br><span class=\"line\">        current = pre1 + pre2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-字符串出现的不重复最长长度\"><a href=\"#12-字符串出现的不重复最长长度\" class=\"headerlink\" title=\"12. 字符串出现的不重复最长长度\"></a>12. 字符串出现的不重复最长长度</h3><p>用一个滑动窗口装没有重复的字符，枚举字符记录最大值即可。用 map 维护字符的索引，遇到相同的字符，把左边界移动过去即可。挪动的过程中记录最大长度：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLongestSubstring = <span class=\"keyword\">function</span> (<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = s.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.<span class=\"title function_\">has</span>(s[j])) &#123;</span><br><span class=\"line\">            i = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(i, map.<span class=\"title function_\">get</span>(s[j]))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(res, j - i)</span><br><span class=\"line\">        map.<span class=\"title function_\">set</span>(s[j], j)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-使用-setTimeout-实现-setInterval\"><a href=\"#13-使用-setTimeout-实现-setInterval\" class=\"headerlink\" title=\"13. 使用 setTimeout 实现 setInterval\"></a>13. 使用 setTimeout 实现 setInterval</h3><p>setInterval 的作用是每隔一段指定时间执行一个函数，但是这个执行不是真的到了时间立即执行，它真正的作用是每隔一段时间将事件加入事件队列中去，只有当当前的执行栈为空的时候，才能去从事件队列中取出事件执行。所以可能会出现这样的情况，就是当前执行栈执行的时间很长，导致事件队列里边积累多个定时器加入的事件，当执行栈结束的时候，这些事件会依次执行，因此就不能到间隔一段时间执行的效果。</p>\n<p>针对 setInterval 的这个缺点，我们可以使用 setTimeout 递归调用来模拟 setInterval，这样我们就确保了只有一个事件结束了，我们才会触发下一个定时器事件，这样解决了 setInterval 的问题。</p>\n<p>实现思路是使用递归函数，不断地去执行 setTimeout 从而达到 setInterval 的效果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mySetInterval</span>(<span class=\"params\">fn, timeout</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 控制器，控制定时器是否继续执行</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer = &#123;</span><br><span class=\"line\">    <span class=\"attr\">flag</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 设置递归函数，模拟定时器执行。</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">interval</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer.<span class=\"property\">flag</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(interval, timeout);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 启动定时器</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(interval, timeout);</span><br><span class=\"line\">  <span class=\"comment\">// 返回控制器</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> timer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-实现-jsonp\"><a href=\"#14-实现-jsonp\" class=\"headerlink\" title=\"14. 实现 jsonp\"></a>14. 实现 jsonp</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 动态的加载js文件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addScript</span>(<span class=\"params\">src</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">  script.<span class=\"property\">src</span> = src;</span><br><span class=\"line\">  script.<span class=\"property\">type</span> = <span class=\"string\">&quot;text/javascript&quot;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(script);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">addScript</span>(<span class=\"string\">&quot;http://xxx.xxx.com/xxx.js?callback=handleRes&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置一个全局的callback函数来接收回调结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleRes</span>(<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 接口返回的数据格式</span></span><br><span class=\"line\"><span class=\"title function_\">handleRes</span>(&#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-判断对象是否存在循环引用\"><a href=\"#15-判断对象是否存在循环引用\" class=\"headerlink\" title=\"15. 判断对象是否存在循环引用\"></a>15. 判断对象是否存在循环引用</h3><p>循环引用对象本来没有什么问题，但是序列化的时候就会发生问题，比如调用<code>JSON.stringify()</code>对该类对象进行序列化，就会报错: <code>Converting circular structure to JSON.</code></p>\n<p>下面方法可以用来判断一个对象中是否已存在循环引用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isCycleObject</span> = (<span class=\"params\">obj,parent</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentArr = parent || [obj];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> obj[i] === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            parentArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">pObj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pObj === obj[i])&#123;</span><br><span class=\"line\">                    flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            flag = <span class=\"title function_\">isCycleObject</span>(obj[i],[...parentArr,obj[i]]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = &#123;a&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> c = &#123;b&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> o = &#123;<span class=\"attr\">d</span>:&#123;<span class=\"attr\">a</span>:<span class=\"number\">3</span>&#125;,c&#125;</span><br><span class=\"line\">o.<span class=\"property\">c</span>.<span class=\"property\">b</span>.<span class=\"property\">aa</span> = a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isCycleObject</span>(o)</span><br></pre></td></tr></table></figure>\n\n<p>查找有序二维数组的目标值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> findNumberIn2DArray = <span class=\"keyword\">function</span>(<span class=\"params\">matrix, target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matrix == <span class=\"literal\">null</span> || matrix.<span class=\"property\">length</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> row = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> column = matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (row &lt; matrix.<span class=\"property\">length</span> &amp;&amp; column &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (matrix[row][column] == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (matrix[row][column] &gt; target) &#123;</span><br><span class=\"line\">            column--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            row++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>二维数组斜向打印：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printMatrix</span>(<span class=\"params\">arr</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> m = arr.<span class=\"property\">length</span>, n = arr[<span class=\"number\">0</span>].<span class=\"property\">length</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 左上角，从0 到 n - 1 列进行打印</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k = <span class=\"number\">0</span>; k &lt; n; k++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = k; i &lt; m &amp;&amp; j &gt;= <span class=\"number\">0</span>; i++, j--) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(arr[i][j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 右下角，从1 到 n - 1 行进行打印</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k = <span class=\"number\">1</span>; k &lt; m; k++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = k, j = n - <span class=\"number\">1</span>; i &lt; m &amp;&amp; j &gt;= <span class=\"number\">0</span>; i++, j--) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(arr[i][j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"excerpt":"<p>js面试手写</p>","more":"<h2 id=\"一、JavaScript-基础\"><a href=\"#一、JavaScript-基础\" class=\"headerlink\" title=\"一、JavaScript 基础\"></a>一、JavaScript 基础</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230607140248211.png\" alt=\"image-20230607140248211\"></p>\n<h3 id=\"1-手写-Object-create\"><a href=\"#1-手写-Object-create\" class=\"headerlink\" title=\"1. 手写 Object.create\"></a>1. 手写 Object.create</h3><p>思路：将传入的对象作为原型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">create</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">F</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  F.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = obj</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">F</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-手写-instanceof-方法\"><a href=\"#2-手写-instanceof-方法\" class=\"headerlink\" title=\"2. 手写 instanceof 方法\"></a>2. 手写 instanceof 方法</h3><p>instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</p>\n<p>实现步骤：</p>\n<ol>\n<li>首先获取类型的原型</li>\n<li>然后获得对象的原型</li>\n<li>然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为 <code>null</code>，因为原型链最终为 <code>null</code></li>\n</ol>\n<p>具体实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myInstanceof</span>(<span class=\"params\">left, right</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> proto = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(left), <span class=\"comment\">// 获取对象的原型</span></span><br><span class=\"line\">      prototype = right.<span class=\"property\"><span class=\"keyword\">prototype</span></span>; <span class=\"comment\">// 获取构造函数的 prototype 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 判断构造函数的 prototype 对象是否在对象的原型链上</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!proto) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (proto === prototype) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    proto = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(proto);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-手写-new-操作符\"><a href=\"#3-手写-new-操作符\" class=\"headerlink\" title=\"3. 手写 new 操作符\"></a>3. 手写 new 操作符</h3><p>在调用 <code>new</code> 的过程中会发生以上四件事情：</p>\n<p>（1）首先创建了一个新的空对象</p>\n<p>（2）设置原型，将对象的原型设置为函数的 prototype 对象。</p>\n<p>（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）</p>\n<p>（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">objectFactory</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObject = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> constructor = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">shift</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 判断参数是否是一个函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> constructor !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;type error&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 新建一个空对象，对象的原型为构造函数的 prototype 对象</span></span><br><span class=\"line\">  newObject = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(constructor.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\">  <span class=\"comment\">// 将 this 指向新建对象，并执行函数</span></span><br><span class=\"line\">  result = constructor.<span class=\"title function_\">apply</span>(newObject, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 判断返回对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> flag = result &amp;&amp; (<span class=\"keyword\">typeof</span> result === <span class=\"string\">&quot;object&quot;</span> || <span class=\"keyword\">typeof</span> result === <span class=\"string\">&quot;function&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 判断返回结果</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> flag ? result : newObject;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用方法</span></span><br><span class=\"line\"><span class=\"title function_\">objectFactory</span>(构造函数, 初始化参数);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-手写-Promise\"><a href=\"#4-手写-Promise\" class=\"headerlink\" title=\"4. 手写 Promise\"></a>4. 手写 Promise</h3><h4 id=\"常见-Promise-面试题\"><a href=\"#常见-Promise-面试题\" class=\"headerlink\" title=\"常见 Promise 面试题\"></a>常见 Promise 面试题</h4><p>首先，我们以常见的 Promise 面试题为切入点，我们看看面试官们都爱考什么：</p>\n<ol>\n<li>Promise 解决了什么问题？</li>\n<li>Promise 的业界实现都有哪些？</li>\n<li>Promise 常用的 API 有哪些？</li>\n<li>能不能手写一个符合 Promise/A+ 规范的 Promise?</li>\n<li>Promise 在事件循环中的执行过程是怎样的？</li>\n<li>Promise 有什么缺陷，可以如何解决？</li>\n</ol>\n<p>这几个问题由浅入深，我们一个一个来看：</p>\n<h4 id=\"Promise-出现的原因-amp-业界实现\"><a href=\"#Promise-出现的原因-amp-业界实现\" class=\"headerlink\" title=\"Promise 出现的原因 &amp; 业界实现\"></a>Promise 出现的原因 &amp; 业界实现</h4><p>在 Promise 出现以前，在我们处理多个异步请求嵌套时，代码往往是这样的。。。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./name.txt&#x27;</span>,<span class=\"string\">&#x27;utf8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)&#123;</span><br><span class=\"line\">  fs.<span class=\"title function_\">readFile</span>(data, <span class=\"string\">&#x27;utf8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)&#123;</span><br><span class=\"line\">    fs.<span class=\"title function_\">readFile</span>(data,<span class=\"string\">&#x27;utf8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>为了拿到回调的结果，我们必须一层一层的嵌套，可以说是相当恶心了。而且基本上我们还要对每次请求的结果进行一系列的处理，使得代码变的更加难以阅读和难以维护，这就是传说中臭名昭著的<strong>回调地狱</strong>～产生<strong>回调地狱</strong>的原因归结起来有两点：</p>\n<p>1.<strong>嵌套调用</strong>，第一个函数的输出往往是第二个函数的输入；</p>\n<p>2.<strong>处理多个异步请求并发</strong>，开发时往往需要同步请求最终的结果。</p>\n<p>原因分析出来后，那么问题的解决思路就很清晰了：</p>\n<p>1.<strong>消灭嵌套调用</strong>：通过 Promise 的链式调用可以解决；</p>\n<p>2.<strong>合并多个任务的请求结果</strong>：使用 Promise.all 获取合并多个任务的错误处理。</p>\n<p>Promise 正是用一种更加友好的代码组织方式，解决了异步嵌套的问题。</p>\n<p>我们来看看上面的例子用 Promise 实现是什么样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">read</span>(<span class=\"params\">filename</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    fs.<span class=\"title function_\">readFile</span>(filename, <span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(data);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">read</span>(<span class=\"string\">&#x27;./name.txt&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">read</span>(data) </span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">read</span>(data)  </span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>臃肿的嵌套变得线性多了有木有？没错，他就是我们的异步神器 Promise！</p>\n<p>让我们再次回归刚才的问题，<strong>Promise 为我们解决了什么问题？</strong>在传统的异步编程中，如果异步之间存在依赖关系，就需要通过层层嵌套回调的方式满足这种依赖，如果嵌套层数过多，可读性和可以维护性都会变得很差，产生所谓的“回调地狱”，而 Promise 将嵌套调用改为链式调用，增加了可阅读性和可维护性。也就是说，Promise 解决的是异步编码风格的问题。<strong>那 Promise 的业界实现都有哪些呢？</strong>业界比较著名的实现 Promise 的类库有 bluebird、Q、ES6-Promise。</p>\n<h4 id=\"从零开始，手写-Promise\"><a href=\"#从零开始，手写-Promise\" class=\"headerlink\" title=\"从零开始，手写 Promise\"></a>从零开始，手写 Promise</h4><h5 id=\"Promise-A\"><a href=\"#Promise-A\" class=\"headerlink\" title=\"Promise/A+\"></a>Promise/A+</h5><p>我们想要手写一个 Promise，就要遵循 <a href=\"https://link.zhihu.com/?target=https://promisesaplus.com/\">Promise/A+</a> 规范，业界所有 Promise 的类库都遵循这个规范。</p>\n<p>其实 Promise/A+ 规范对如何实现一个符合标准的 Promise 类库已经阐述的很详细了。每一行代码在 Promise/A+ 规范中都有迹可循，所以在下面的实现的过程中，我会尽可能的将代码和 Promise/A+ 规范一一对应起来。</p>\n<p>下面开始步入正题啦～</p>\n<h4 id=\"基础版-Promise\"><a href=\"#基础版-Promise\" class=\"headerlink\" title=\"基础版 Promise\"></a>基础版 Promise</h4><p>我们先来回顾下最简单的 Promise 使用方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;create a promise&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功了&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;after new promise&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = p1.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;失败了&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p3 = p2.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>, data)</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;faild&#x27;</span>, err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;create a promise&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;after new promise&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;成功了&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;faild Error: 失败了&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先我们在调用 Promise 时，会返回一个 Promise 对象。</li>\n<li>构建 Promise 对象时，需要传入一个 <strong>executor 函数</strong>，Promise 的主要业务流程都在 executor 函数中执行。</li>\n<li>如果运行在 excutor 函数中的业务执行成功了，会调用 resolve 函数；如果执行失败了，则调用 reject 函数。</li>\n<li>Promise 的状态不可逆，同时调用 resolve 函数和 reject 函数，默认会采取第一次调用的结果。</li>\n</ul>\n<p>以上简单介绍了 Promise 的一些主要的使用方法，结合 <a href=\"https://link.zhihu.com/?target=https://promisesaplus.com/\">Promise/A+</a> 规范，我们可以分析出 Promise 的基本特征：</p>\n<ol>\n<li>promise 有三个状态：<code>pending</code>，<code>fulfilled</code>，or <code>rejected</code>；「规范 Promise/A+ 2.1」</li>\n<li><code>new promise</code>时， 需要传递一个<code>executor()</code>执行器，执行器立即执行；</li>\n<li><code>executor</code>接受两个参数，分别是<code>resolve</code>和<code>reject</code>；</li>\n<li>promise 的默认状态是 <code>pending</code>；</li>\n<li>promise 有一个<code>value</code>保存成功状态的值，可以是<code>undefined/thenable/promise</code>；「规范 Promise/A+ 1.3」</li>\n<li>promise 有一个<code>reason</code>保存失败状态的值；「规范 Promise/A+ 1.5」</li>\n<li>promise 只能从<code>pending</code>到<code>rejected</code>, 或者从<code>pending</code>到<code>fulfilled</code>，状态一旦确认，就不会再改变；</li>\n<li>promise 必须有一个<code>then</code>方法，then 接收两个参数，分别是 promise 成功的回调 onFulfilled, 和 promise 失败的回调 onRejected；「规范 Promise/A+ 2.2」</li>\n<li>如果调用 then 时，promise 已经成功，则执行<code>onFulfilled</code>，参数是<code>promise</code>的<code>value</code>；</li>\n<li>如果调用 then 时，promise 已经失败，那么执行<code>onRejected</code>, 参数是<code>promise</code>的<code>reason</code>；</li>\n<li>如果 then 中抛出了异常，那么就会把这个异常作为参数，传递给下一个 then 的失败的回调<code>onRejected</code>；</li>\n</ol>\n<p>按照上面的特征，我们试着勾勒下 Promise 的形状：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 三个状态：PENDING、FULFILLED、REJECTED</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;PENDING&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&#x27;FULFILLED&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;REJECTED&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认状态为 PENDING</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 存放成功状态的值，默认为 undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 存放失败状态的值，默认为 undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用此方法就是成功</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 状态为 PENDING 时才可以更新状态，防止 executor 中调用了两次 resovle/reject 方法</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> ===  <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用此方法就是失败</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">reject</span> = (<span class=\"params\">reason</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 状态为 PENDING 时才可以更新状态，防止 executor 中调用了两次 resovle/reject 方法</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> ===  <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 立即执行，将 resolve 和 reject 函数传给使用者  </span></span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(resolve,reject)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 发生异常时执行失败逻辑</span></span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 包含一个 then 方法，并接收两个参数 onFulfilled、onRejected</span></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写完代码我们可以测试一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>, data)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;faild&#x27;</span>, err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;success 成功&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>现在我们已经实现了一个基础版的 Promise，但是还不要高兴的太早噢，这里我们只处理了同步操作的 promise。如果在 <code>executor()</code>中传入一个异步操作的话呢，我们试一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 传入一个异步操作</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>);</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>, data)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;faild&#x27;</span>, err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>执行测试脚本后发现，promise 没有任何返回。</p>\n<p>因为 promise 调用 then 方法时，当前的 promise 并没有成功，一直处于 pending 状态。所以如果当调用 then 方法时，当前状态是 pending，我们需要先将成功和失败的回调分别存放起来，在<code>executor()</code>的异步任务被执行时，触发 resolve 或 reject，依次调用成功或失败的回调。</p>\n<p>结合这个思路，我们优化一下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;PENDING&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&#x27;FULFILLED&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;REJECTED&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 存放成功的回调</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span> = [];</span><br><span class=\"line\">    <span class=\"comment\">// 存放失败的回调</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>= [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> ===  <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"comment\">// 依次将对应的函数执行</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span><span class=\"title function_\">fn</span>());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">reject</span> = (<span class=\"params\">reason</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> ===  <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">        <span class=\"comment\">// 依次将对应的函数执行</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span><span class=\"title function_\">fn</span>());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(resolve,reject)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果promise的状态是 pending，需要将 onFulfilled 和 onRejected 函数存放起来，等待状态确定后，再依次将对应的函数执行</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">push</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>);</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;success&#x27;</span>, data)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;faild&#x27;</span>, err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>控制台等待 <code>1s</code> 后输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;success 成功&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>ok！大功告成，异步问题已经解决了！</p>\n<p>熟悉设计模式的同学，应该意识到了这其实是一个<strong>发布订阅模式</strong>，这种<code>收集依赖 -&gt; 触发通知 -&gt; 取出依赖执行</code>的方式，被广泛运用于发布订阅模式的实现。</p>\n<h4 id=\"then-的链式调用-amp-值穿透特性\"><a href=\"#then-的链式调用-amp-值穿透特性\" class=\"headerlink\" title=\"then 的链式调用&amp;值穿透特性\"></a>then 的链式调用&amp;值穿透特性</h4><p>我们都知道，promise 的优势在于可以链式调用。在我们使用 Promise 的时候，当 then 函数中 return 了一个值，不管是什么值，我们都能在下一个 then 中获取到，这就是所谓的<strong>then 的链式调用</strong>。而且，当我们不在 then 中放入参数，例：<code>promise.then().then()</code>，那么其后面的 then 依旧可以得到之前 then 返回的值，这就是所谓的<strong>值的穿透</strong>。那具体如何实现呢？简单思考一下，如果每次调用 then 的时候，我们都重新创建一个 promise 对象，并把上一个 then 的返回结果传给这个新的 promise 的 then 方法，不就可以一直 then 下去了么？那我们来试着实现一下。这也是手写 Promise 源码的重中之重，所以，打起精神来，重头戏来咯！</p>\n<p>有了上面的想法，我们再结合 <a href=\"https://link.zhihu.com/?target=https://promisesaplus.com/\">Promise/A+</a> 规范梳理一下思路：</p>\n<ol>\n<li>then 的参数 <code>onFulfilled</code> 和 <code>onRejected</code> 可以缺省，如果 <code>onFulfilled</code> 或者 <code>onRejected</code>不是函数，将其忽略，且依旧可以在下面的 then 中获取到之前返回的值；「规范 Promise/A+ 2.2.1、2.2.1.1、2.2.1.2」</li>\n<li>promise 可以 then 多次，每次执行完 promise.then 方法后返回的都是一个“新的promise”；「规范 Promise/A+ 2.2.7」</li>\n<li>如果 then 的返回值 x 是一个普通值，那么就会把这个结果作为参数，传递给下一个 then 的成功的回调中；</li>\n<li>如果 then 中抛出了异常，那么就会把这个异常作为参数，传递给下一个 then 的失败的回调中；「规范 Promise/A+ 2.2.7.2」</li>\n<li>如果 then 的返回值 x 是一个 promise，那么会等这个 promise 执行完，promise 如果成功，就走下一个 then 的成功；如果失败，就走下一个 then 的失败；如果抛出异常，就走下一个 then 的失败；「规范 Promise/A+ 2.2.7.3、2.2.7.4」</li>\n<li>如果 then 的返回值 x 和 promise 是同一个引用对象，造成循环引用，则抛出异常，把异常传递给下一个 then 的失败的回调中；「规范 Promise/A+ 2.3.1」</li>\n<li>如果 then 的返回值 x 是一个 promise，且 x 同时调用 resolve 函数和 reject 函数，则第一次调用优先，其他所有调用被忽略；「规范 Promise/A+ 2.3.3.3.3」</li>\n</ol>\n<p>我们将代码补充完整：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;PENDING&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&#x27;FULFILLED&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;REJECTED&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">resolvePromise</span> = (<span class=\"params\">promise2, x, resolve, reject</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 自己等待自己完成是错误的实现，用一个类型错误，结束掉 promise  Promise/A+ 2.3.1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promise2 === x) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Promise/A+ 2.3.3.3.3 只能调用一次</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> called;</span><br><span class=\"line\">  <span class=\"comment\">// 后续的条件要严格判断 保证代码能和别的库一起使用</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((<span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; x != <span class=\"literal\">null</span>) || <span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;function&#x27;</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 为了判断 resolve 过的就不用再 reject 了（比如 reject 和 resolve 同时调用的时候）  Promise/A+ 2.3.3.1</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> then = x.<span class=\"property\">then</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">&#x27;function&#x27;</span>) &#123; </span><br><span class=\"line\">        <span class=\"comment\">// 不要写成 x.then，直接 then.call 就可以了 因为 x.then 会再次取值，Object.defineProperty  Promise/A+ 2.3.3.3</span></span><br><span class=\"line\">        then.<span class=\"title function_\">call</span>(x, <span class=\"function\"><span class=\"params\">y</span> =&gt;</span> &#123; <span class=\"comment\">// 根据 promise 的状态决定是成功还是失败</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"comment\">// 递归解析的过程（因为可能 promise 中还有 promise） Promise/A+ 2.3.3.3.1</span></span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(promise2, y, resolve, reject); </span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"params\">r</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 只要失败就失败 Promise/A+ 2.3.3.3.2</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(r);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 x.then 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.3.4</span></span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Promise/A+ 2.3.3.2</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 x 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.4  </span></span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(x)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span> = [];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>= [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> ===  <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span><span class=\"title function_\">fn</span>());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">reject</span> = (<span class=\"params\">reason</span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> ===  <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span><span class=\"title function_\">fn</span>());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(resolve,reject)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//解决 onFufilled，onRejected 没有传值的问题</span></span><br><span class=\"line\">    <span class=\"comment\">//Promise/A+ 2.2.1 / Promise/A+ 2.2.5 / Promise/A+ 2.2.7.3 / Promise/A+ 2.2.7.4</span></span><br><span class=\"line\">    onFulfilled = <span class=\"keyword\">typeof</span> onFulfilled === <span class=\"string\">&#x27;function&#x27;</span> ? onFulfilled : <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v;</span><br><span class=\"line\">    <span class=\"comment\">//因为错误的值要让后面访问到，所以这里也要跑出个错误，不然会在之后 then 的 resolve 中捕获</span></span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">&#x27;function&#x27;</span> ? onRejected : <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> err &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 每次调用 then 都返回一个新的 promise  Promise/A+ 2.2.7</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Promise/A+ 2.2.2</span></span><br><span class=\"line\">        <span class=\"comment\">//Promise/A+ 2.2.4 --- setTimeout</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Promise/A+ 2.2.7.1</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">            <span class=\"comment\">// x可能是一个proimise</span></span><br><span class=\"line\">            <span class=\"title function_\">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Promise/A+ 2.2.7.2</span></span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Promise/A+ 2.2.3</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">            <span class=\"title function_\">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">push</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">              <span class=\"title function_\">resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;失败&#x27;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>().<span class=\"title function_\">then</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;err&#x27;</span>,err);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;失败 err&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>至此，我们已经完成了 promise 最关键的部分：then 的链式调用和值的穿透。搞清楚了 then 的链式调用和值的穿透，你也就搞清楚了 Promise。</p>\n<h4 id=\"测试-Promise-是否符合规范\"><a href=\"#测试-Promise-是否符合规范\" class=\"headerlink\" title=\"测试 Promise 是否符合规范\"></a>测试 Promise 是否符合规范</h4><p>Promise/A+规范提供了一个专门的测试脚本，可以测试所编写的代码是否符合Promise/A+的规范。</p>\n<p>首先，在 promise 实现的代码中，增加以下代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">defer</span> = <span class=\"title class_\">Promise</span>.<span class=\"property\">deferred</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dfd = &#123;&#125;;</span><br><span class=\"line\">  dfd.<span class=\"property\">promise</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      dfd.<span class=\"property\">resolve</span> = resolve;</span><br><span class=\"line\">      dfd.<span class=\"property\">reject</span> = reject;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dfd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>安装测试脚本:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g promises-aplus-tests</span><br></pre></td></tr></table></figure>\n\n<p>如果当前的 promise 源码的文件名为 promise.js</p>\n<p>那么在对应的目录执行以下命令:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promises-aplus-tests promise.<span class=\"property\">js</span></span><br></pre></td></tr></table></figure>\n\n<p>promises-aplus-tests 中共有 872 条测试用例。以上代码，可以完美通过所有用例。</p>\n<p><strong>感谢小伙伴的提醒，由于文章中使用 setTimeout 实现 promise 的异步，会对大家造成误解。所以这里添加一些标注:</strong></p>\n<p>由于原生的 Promise 是V8引擎提供的微任务，我们无法还原V8引擎的实现，所以这里使用 setTimeout 模拟异步，所以原生的是微任务，这里是宏任务。</p>\n<p>Promise A+ 规范3.1 中也提到了：这可以通过“宏任务”机制（例如setTimeout或setImmediate）或“微任务”机制（例如MutatonObserver或）来实现process.nextTick。</p>\n<p>如果你想实现 promise 的微任务，可以 mutationObserver 替代 seiTimeout 来实现微任务。</p>\n<p>有小伙伴说可以使用 queueMicrotask 实现微任务，我也查阅了一些资料，是可以的。不过 queueMicrotask 兼容性不是很好，IE 下完全不支持。据我所知 queueMicrotask 的 polyfill 是基于 promise 实现的，如果不支持 promise 会转成 setTimeout。</p>\n<p>总的来说，queueMicrotask 和 mutationObserver 都可以实现微任务机制，不过更建议有执念的小伙伴用 mutationObserver 实现一下，没有执念的小伙伴了解 promise 的微任务机制就好了～</p>\n<h3 id=\"Promise-的-API\"><a href=\"#Promise-的-API\" class=\"headerlink\" title=\"Promise 的 API\"></a>Promise 的 API</h3><p>虽然上述的 promise 源码已经符合 Promise/A+ 的规范，但是原生的 Promise 还提供了一些其他方法，如:</p>\n<ul>\n<li>Promise.resolve()</li>\n<li>Promise.reject()</li>\n<li>Promise.prototype.catch()</li>\n<li>Promise.prototype.finally()</li>\n<li>Promise.all()</li>\n<li>Promise.race(）</li>\n</ul>\n<p>下面具体说一下每个方法的实现:</p>\n<h4 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve\"></a>Promise.resolve</h4><p>默认产生一个成功的 promise。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"title function_\">resolve</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(data);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里需要注意的是，<strong>promise.resolve 是具备等待功能的</strong>。如果参数是 promise 会等待这个 promise 解析完毕，在向下执行，所以这里需要在 resolve 方法中做一个小小的处理：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ======新增逻辑======</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果 value 是一个promise，那我们的库中应该也要实现一个递归解析</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(value <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Promise</span>)&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 递归解析 </span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> value.<span class=\"title function_\">then</span>(resolve,reject)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ===================</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> ===  <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span><span class=\"title function_\">fn</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;ok&#x27;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;)).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&#x27;success&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err,<span class=\"string\">&#x27;error&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>控制台等待 <code>3s</code> 后输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;ok success&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Promise-reject\"><a href=\"#Promise-reject\" class=\"headerlink\" title=\"Promise.reject\"></a>Promise.reject</h4><p>默认产生一个失败的 promise，Promise.reject 是直接将值变成错误结果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(reason);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Promise-prototype-catch\"><a href=\"#Promise-prototype-catch\" class=\"headerlink\" title=\"Promise.prototype.catch\"></a>Promise.prototype.catch</h4><p>Promise.prototype.catch 用来捕获 promise 的异常，<strong>就相当于一个没有成功的 then</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">catch</span> = <span class=\"keyword\">function</span>(<span class=\"params\">errCallback</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">null</span>,errCallback)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Promise-prototype-finally\"><a href=\"#Promise-prototype-finally\" class=\"headerlink\" title=\"Promise.prototype.finally\"></a>Promise.prototype.finally</h4><p>finally 表示不是最终的意思，而是无论如何都会执行的意思。 如果返回一个 promise 会等待这个 promise 也执行完毕。如果返回的是成功的 promise，会采用上一次的结果；如果返回的是失败的 promise，会用这个失败的结果，传到 catch 中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">finally</span> = <span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">callback</span>()).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>value)</span><br><span class=\"line\">  &#125;,<span class=\"function\">(<span class=\"params\">reason</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">callback</span>()).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;<span class=\"keyword\">throw</span> reason&#125;)</span><br><span class=\"line\">  &#125;)  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">456</span>).<span class=\"title function_\">finally</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&#x27;success&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err,<span class=\"string\">&#x27;error&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>控制台等待 <code>3s</code> 后输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;456 success&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h4><p>promise.all 是解决并发问题的，多个异步并发获取最终的结果（如果有一个失败则失败）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">all</span> = <span class=\"keyword\">function</span>(<span class=\"params\">values</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(values)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = <span class=\"keyword\">typeof</span> values;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">`TypeError: <span class=\"subst\">$&#123;type&#125;</span> <span class=\"subst\">$&#123;values&#125;</span> is not iterable`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultArr = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> orderIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">processResultByKey</span> = (<span class=\"params\">value, index</span>) =&gt; &#123;</span><br><span class=\"line\">      resultArr[index] = value;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (++orderIndex === values.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(resultArr)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; values.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> value = values[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &amp;&amp; <span class=\"keyword\">typeof</span> value.<span class=\"property\">then</span> === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        value.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">processResultByKey</span>(value, i);</span><br><span class=\"line\">        &#125;, reject);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">processResultByKey</span>(value, i);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;ok1&#x27;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;ok2&#x27;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,p1,p2]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;resolve&#x27;</span>, data);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;reject&#x27;</span>, err);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>控制台等待 <code>1s</code> 后输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;resolve [ 1, 2, 3, &#x27;ok1&#x27;, &#x27;ok2&#x27; ]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h4><p>Promise.race 用来处理多个请求，采用最快的（谁先完成用谁的）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">race</span> = <span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 一起执行就是for循环</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> val = promises[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val &amp;&amp; <span class=\"keyword\">typeof</span> val.<span class=\"property\">then</span> === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        val.<span class=\"title function_\">then</span>(resolve, reject);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 普通值</span></span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(val)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>特别需要注意的是：因为<strong>Promise 是没有中断方法的</strong>，xhr.abort()、ajax 有自己的中断方法，axios 是基于 ajax 实现的；fetch 基于 promise，所以他的请求是无法中断的。</p>\n<p>这也是 promise 存在的缺陷，我们可以使用 race 来自己封装中断方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">wrap</span>(<span class=\"params\">promise</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在这里包装一个 promise，可以控制原来的promise是成功还是失败</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> abort;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; <span class=\"comment\">// defer 方法</span></span><br><span class=\"line\">      abort = reject;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>([promise, newPromise]); <span class=\"comment\">// 任何一个先成功或者失败 就可以获取到结果</span></span><br><span class=\"line\">  p.<span class=\"property\">abort</span> = abort;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">// 模拟的接口调用 ajax 肯定有超时设置</span></span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;成功&#x27;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newPromise = <span class=\"title function_\">wrap</span>(promise);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 超过3秒 就算超时 应该让 proimise 走到失败态</span></span><br><span class=\"line\">  newPromise.<span class=\"title function_\">abort</span>(<span class=\"string\">&#x27;超时了&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">newPromise.<span class=\"title function_\">then</span>((<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;成功的结果&#x27;</span> + data)</span><br><span class=\"line\">&#125;)).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;失败的结果&#x27;</span> + e)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>控制台等待 <code>1s</code> 后输出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;成功的结果成功&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"promisify\"><a href=\"#promisify\" class=\"headerlink\" title=\"promisify\"></a>promisify</h4><p>promisify 是把一个 node 中的 api 转换成 promise 的写法。 在 node 版本 12.18 以上，已经支持了原生的 promisify 方法：<code>const fs = require(&#39;fs&#39;).promises</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">promisify</span> = (<span class=\"params\">fn</span>) =&gt; &#123; <span class=\"comment\">// 典型的高阶函数 参数是函数 返回值是函数 </span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"title function_\">fn</span>(...args,<span class=\"keyword\">function</span> (<span class=\"params\">err,data</span>) &#123; <span class=\"comment\">// node中的回调函数的参数 第一个永远是error</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(data);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果想要把 node 中所有的 api 都转换成 promise 的写法呢：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">promisifyAll</span> = (<span class=\"params\">target</span>) =&gt;&#123;</span><br><span class=\"line\">  <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(target).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> target[key] === <span class=\"string\">&#x27;function&#x27;</span>)&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 默认会将原有的方法 全部增加一个 Async 后缀 变成 promise 写法</span></span><br><span class=\"line\">      target[key+<span class=\"string\">&#x27;Async&#x27;</span>] = <span class=\"title function_\">promisify</span>(target[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-手写防抖函数\"><a href=\"#5-手写防抖函数\" class=\"headerlink\" title=\"5. 手写防抖函数\"></a>5. 手写防抖函数</h3><p>函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数防抖的实现</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">        args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果此时存在定时器的话，则取消之前的定时器重新记时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">      timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置定时器，使事件间隔指定事件后执行</span></span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">    &#125;, wait);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-手写节流函数\"><a href=\"#6-手写节流函数\" class=\"headerlink\" title=\"6. 手写节流函数\"></a>6. 手写节流函数</h3><p>函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数节流的实现;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fn, delay</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">        args = <span class=\"variable language_\">arguments</span>,</span><br><span class=\"line\">        nowTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果两次时间间隔超过了指定时间，则执行函数。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nowTime - curTime &gt;= delay) &#123;</span><br><span class=\"line\">      curTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-手写类型判断函数\"><a href=\"#7-手写类型判断函数\" class=\"headerlink\" title=\"7. 手写类型判断函数\"></a>7. 手写类型判断函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getType</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断数据是 null 的情况</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value + <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 判断数据是引用类型的情况</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> valueClass = <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(value),</span><br><span class=\"line\">      type = valueClass.<span class=\"title function_\">split</span>(<span class=\"string\">&quot; &quot;</span>)[<span class=\"number\">1</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    type.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> type.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断数据是基本数据类型的情况和函数的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-手写-call-函数\"><a href=\"#8-手写-call-函数\" class=\"headerlink\" title=\"8. 手写 call 函数\"></a>8. 手写 call 函数</h3><p>call 函数的实现步骤：</p>\n<ol>\n<li>判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>\n<li>处理传入的参数，截取第一个参数后的所有参数。</li>\n<li>将函数作为上下文对象的一个属性。</li>\n<li>使用上下文对象来调用这个方法，并保存返回结果。</li>\n<li>删除刚才新增的属性。</li>\n<li>返回结果。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// call函数实现</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myCall</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断调用对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;type error&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 获取参数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = [...<span class=\"variable language_\">arguments</span>].<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>),</span><br><span class=\"line\">      result = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 判断 context 是否传入，如果未传入则设置为 window</span></span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 将调用函数设为对象的方法</span></span><br><span class=\"line\">  context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 调用函数</span></span><br><span class=\"line\">  result = context.<span class=\"title function_\">fn</span>(...args);</span><br><span class=\"line\">  <span class=\"comment\">// 将属性删除</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-手写-apply-函数\"><a href=\"#9-手写-apply-函数\" class=\"headerlink\" title=\"9. 手写 apply 函数\"></a>9. 手写 apply 函数</h3><p>apply 函数的实现步骤：</p>\n<ol>\n<li>判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>\n<li>将函数作为上下文对象的一个属性。</li>\n<li>判断参数值是否传入</li>\n<li>使用上下文对象来调用这个方法，并保存返回结果。</li>\n<li>删除刚才新增的属性</li>\n<li>返回结果</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// apply 函数实现</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myApply</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断调用对象是否为函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&quot;Error&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 判断 context 是否存在，如果未传入则为 window</span></span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 将函数设为对象的方法</span></span><br><span class=\"line\">  context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">arguments</span>[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    result = context.<span class=\"title function_\">fn</span>(...<span class=\"variable language_\">arguments</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    result = context.<span class=\"title function_\">fn</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 将属性删除</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-手写-bind-函数\"><a href=\"#10-手写-bind-函数\" class=\"headerlink\" title=\"10. 手写 bind 函数\"></a>10. 手写 bind 函数</h3><p>bind 函数的实现步骤：</p>\n<ol>\n<li>判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>保存当前函数的引用，获取其余传入参数值。</li>\n<li>创建一个函数返回</li>\n<li>函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bind 函数实现</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myBind</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断调用对象是否为函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&quot;Error&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 获取参数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = [...<span class=\"variable language_\">arguments</span>].<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>),</span><br><span class=\"line\">      fn = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据调用方式，传入不同绑定值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(</span><br><span class=\"line\">      <span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Fn</span> ? <span class=\"variable language_\">this</span> : context,</span><br><span class=\"line\">      args.<span class=\"title function_\">concat</span>(...<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-函数柯里化的实现\"><a href=\"#11-函数柯里化的实现\" class=\"headerlink\" title=\"11. 函数柯里化的实现\"></a>11. 函数柯里化的实现</h3><p>函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curry</span>(<span class=\"params\">fn, args</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取函数需要的参数长度</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = fn.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  args = args || [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subArgs = args.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 拼接得到现有的所有参数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      subArgs.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断参数的长度是否已经满足函数所需参数的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (subArgs.<span class=\"property\">length</span> &gt;= length) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果满足，执行函数</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, subArgs);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果不满足，递归返回科里化的函数，等待参数的传入</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> curry.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, fn, subArgs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6 实现</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curry</span>(<span class=\"params\">fn, ...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn.<span class=\"property\">length</span> &lt;= args.<span class=\"property\">length</span> ? <span class=\"title function_\">fn</span>(...args) : curry.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, fn, ...args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-实现AJAX请求\"><a href=\"#12-实现AJAX请求\" class=\"headerlink\" title=\"12. 实现AJAX请求\"></a>12. 实现AJAX请求</h3><p>AJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。</p>\n<p>创建AJAX请求的步骤：</p>\n<ul>\n<li><strong>创建一个 XMLHttpRequest 对象。</strong></li>\n<li>在这个对象上<strong>使用 open 方法创建一个 HTTP 请求</strong>，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。</li>\n<li>在发起请求前，可以为这个对象<strong>添加一些信息和监听函数</strong>。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。</li>\n<li>当对象的属性和监听函数设置完成后，最后调<strong>用 sent 方法来向服务器发起请求</strong>，可以传入参数作为发送的数据体。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SERVER_URL</span> = <span class=\"string\">&quot;/server&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\"><span class=\"comment\">// 创建 Http 请求</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"variable constant_\">SERVER_URL</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置状态监听函数</span></span><br><span class=\"line\">xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> !== <span class=\"number\">4</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 当请求成功时</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">handle</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">response</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">statusText</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 设置请求失败时的监听函数</span></span><br><span class=\"line\">xhr.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">statusText</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 设置请求头信息</span></span><br><span class=\"line\">xhr.<span class=\"property\">responseType</span> = <span class=\"string\">&quot;json&quot;</span>;</span><br><span class=\"line\">xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Accept&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 发送 Http 请求</span></span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-使用Promise封装AJAX请求\"><a href=\"#13-使用Promise封装AJAX请求\" class=\"headerlink\" title=\"13. 使用Promise封装AJAX请求\"></a>13. 使用Promise封装AJAX请求</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise 封装实现：</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getJSON</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个 promise 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 新建一个 http 请求</span></span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 设置状态的监听函数</span></span><br><span class=\"line\">    xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">readyState</span> !== <span class=\"number\">4</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 当请求成功或失败时，改变 promise 的状态</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">response</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">statusText</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 设置错误监听函数</span></span><br><span class=\"line\">    xhr.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">statusText</span>));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 设置响应的数据类型</span></span><br><span class=\"line\">    xhr.<span class=\"property\">responseType</span> = <span class=\"string\">&quot;json&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 设置请求头信息</span></span><br><span class=\"line\">    xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Accept&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 发送 http 请求</span></span><br><span class=\"line\">    xhr.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-实现浅拷贝\"><a href=\"#14-实现浅拷贝\" class=\"headerlink\" title=\"14. 实现浅拷贝\"></a>14. 实现浅拷贝</h3><p>浅拷贝是指，一个新的对象对原始对象的属性值进行精确地拷贝，如果拷贝的是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是内存地址。如果其中一个对象的引用内存地址发生改变，另一个对象也会发生变化。</p>\n<h4 id=\"（1）Object-assign\"><a href=\"#（1）Object-assign\" class=\"headerlink\" title=\"（1）Object.assign()\"></a>（1）Object.assign()</h4><p><code>Object.assign()</code>是ES6中对象的拷贝方法，接受的第一个参数是目标对象，其余参数是源对象，用法：<code>Object.assign(target, source_1, ···)</code>，该方法可以实现浅拷贝，也可以实现一维对象的深拷贝。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>如果目标对象和源对象有同名属性，或者多个源对象有同名属性，则后面的属性会覆盖前面的属性。</li>\n<li>如果该函数只有一个参数，当参数为对象时，直接返回该对象；当参数不是对象时，会先将参数转为对象然后返回。</li>\n<li>因为<code>null</code> 和 <code>undefined</code> 不能转化为对象，所以第一个参数不能为<code>null</code>或 <code>undefined</code>，会报错。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> target = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> object2 = &#123;<span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> object3 = &#123;<span class=\"attr\">c</span>: <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(target,object2,object3);  </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(target);  <span class=\"comment\">// &#123;a: 1, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）扩展运算符\"><a href=\"#（2）扩展运算符\" class=\"headerlink\" title=\"（2）扩展运算符\"></a>（2）扩展运算符</h4><p>使用扩展运算符可以在构造字面量对象的时候，进行属性的拷贝。语法：<code>let cloneObj = &#123; ...obj &#125;;</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:&#123;<span class=\"attr\">c</span>:<span class=\"number\">1</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;...obj1&#125;;</span><br><span class=\"line\">obj1.<span class=\"property\">a</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1); <span class=\"comment\">//&#123;a:2,b:&#123;c:1&#125;&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj2); <span class=\"comment\">//&#123;a:1,b:&#123;c:1&#125;&#125;</span></span><br><span class=\"line\">obj1.<span class=\"property\">b</span>.<span class=\"property\">c</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1); <span class=\"comment\">//&#123;a:2,b:&#123;c:2&#125;&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj2); <span class=\"comment\">//&#123;a:1,b:&#123;c:2&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（3）数组方法实现数组浅拷贝\"><a href=\"#（3）数组方法实现数组浅拷贝\" class=\"headerlink\" title=\"（3）数组方法实现数组浅拷贝\"></a>（3）数组方法实现数组浅拷贝</h4><h6 id=\"1）Array-prototype-slice\"><a href=\"#1）Array-prototype-slice\" class=\"headerlink\" title=\"1）Array.prototype.slice\"></a><strong>1）Array.prototype.slice</strong></h6><ul>\n<li><code>slice()</code>方法是JavaScript数组的一个方法，这个方法可以从已有数组中返回选定的元素：用法：<code>array.slice(start, end)</code>，该方法不会改变原始数组。</li>\n<li>该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">slice</span>()); <span class=\"comment\">// [1,2,3,4]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">slice</span>() === arr); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2）Array-prototype-concat\"><a href=\"#2）Array-prototype-concat\" class=\"headerlink\" title=\"2）Array.prototype.concat\"></a><strong>2）Array.prototype.concat</strong></h6><ul>\n<li><code>concat()</code> 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</li>\n<li>该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">concat</span>()); <span class=\"comment\">// [1,2,3,4]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">concat</span>() === arr); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（4）手写实现浅拷贝\"><a href=\"#（4）手写实现浅拷贝\" class=\"headerlink\" title=\"（4）手写实现浅拷贝\"></a>（4）手写实现浅拷贝</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 浅拷贝的实现;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">shallowCopy</span>(<span class=\"params\">object</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只拷贝对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!object || <span class=\"keyword\">typeof</span> object !== <span class=\"string\">&quot;object&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 根据 object 的类型判断是新建一个数组还是对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObject = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(object) ? [] : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历 object，并且判断是 object 的属性才拷贝</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> object) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      newObject[key] = object[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newObject;</span><br><span class=\"line\">&#125;<span class=\"comment\">// 浅拷贝的实现;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">shallowCopy</span>(<span class=\"params\">object</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只拷贝对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!object || <span class=\"keyword\">typeof</span> object !== <span class=\"string\">&quot;object&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 根据 object 的类型判断是新建一个数组还是对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObject = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(object) ? [] : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历 object，并且判断是 object 的属性才拷贝</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> object) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      newObject[key] = object[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newObject;</span><br><span class=\"line\">&#125;<span class=\"comment\">// 浅拷贝的实现;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">shallowCopy</span>(<span class=\"params\">object</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只拷贝对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!object || <span class=\"keyword\">typeof</span> object !== <span class=\"string\">&quot;object&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 根据 object 的类型判断是新建一个数组还是对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObject = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(object) ? [] : &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历 object，并且判断是 object 的属性才拷贝</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> object) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      newObject[key] = object[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-实现深拷贝\"><a href=\"#15-实现深拷贝\" class=\"headerlink\" title=\"15. 实现深拷贝\"></a>15. 实现深拷贝</h3><ul>\n<li><strong>浅拷贝：</strong> 浅拷贝指的是将一个对象的属性值复制到另一个对象，如果有的属性的值为引用类型的话，那么会将这个引用的地址复制给对象，因此两个对象会有同一个引用类型的引用。浅拷贝可以使用  Object.assign 和展开运算符来实现。</li>\n<li><strong>深拷贝：</strong> 深拷贝相对浅拷贝而言，如果遇到属性值为引用类型的时候，它新建一个引用类型并将对应的值复制给它，因此对象获得的一个新的引用类型而不是一个原有类型的引用。深拷贝对于一些对象可以使用 JSON 的两个函数来实现，但是由于 JSON 的对象格式比 js 的对象格式更加严格，所以如果属性值里边出现函数或者 Symbol 类型的值时，会转换失败</li>\n</ul>\n<h4 id=\"（1）JSON-stringify\"><a href=\"#（1）JSON-stringify\" class=\"headerlink\" title=\"（1）JSON.stringify()\"></a>（1）JSON.stringify()</h4><ul>\n<li><code>JSON.parse(JSON.stringify(obj))</code>是目前比较常用的深拷贝方法之一，它的原理就是利用<code>JSON.stringify</code> 将<code>js</code>对象序列化（JSON字符串），再使用<code>JSON.parse</code>来反序列化(还原)<code>js</code>对象。</li>\n<li>这个方法可以简单粗暴的实现深拷贝，但是还存在问题，拷贝的对象中如果有函数，undefined，symbol，当使用过<code>JSON.stringify()</code>进行处理之后，都会消失。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;  <span class=\"attr\">a</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">              <span class=\"attr\">b</span>: &#123;</span><br><span class=\"line\">                 <span class=\"attr\">c</span>: <span class=\"number\">0</span></span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj1));</span><br><span class=\"line\">obj1.<span class=\"property\">a</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">obj1.<span class=\"property\">b</span>.<span class=\"property\">c</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1); <span class=\"comment\">// &#123;a: 1, b: &#123;c: 1&#125;&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj2); <span class=\"comment\">// &#123;a: 0, b: &#123;c: 0&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）函数库lodash的-cloneDeep方法\"><a href=\"#（2）函数库lodash的-cloneDeep方法\" class=\"headerlink\" title=\"（2）函数库lodash的_.cloneDeep方法\"></a>（2）函数库lodash的_.cloneDeep方法</h4><p>该函数库也有提供_.cloneDeep用来做 Deep Copy</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;lodash&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: &#123; <span class=\"attr\">f</span>: &#123; <span class=\"attr\">g</span>: <span class=\"number\">1</span> &#125; &#125;,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = _.<span class=\"title function_\">cloneDeep</span>(obj1);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1.<span class=\"property\">b</span>.<span class=\"property\">f</span> === obj2.<span class=\"property\">b</span>.<span class=\"property\">f</span>);<span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（3）手写实现深拷贝函数\"><a href=\"#（3）手写实现深拷贝函数\" class=\"headerlink\" title=\"（3）手写实现深拷贝函数\"></a>（3）手写实现深拷贝函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 深拷贝的实现</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepCopy</span>(<span class=\"params\">object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!object || <span class=\"keyword\">typeof</span> object !== <span class=\"string\">&quot;object&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObject = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(object) ? [] : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> object) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      newObject[key] =</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> object[key] === <span class=\"string\">&quot;object&quot;</span> ? <span class=\"title function_\">deepCopy</span>(object[key]) : object[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、数据处理\"><a href=\"#二、数据处理\" class=\"headerlink\" title=\"二、数据处理\"></a>二、数据处理</h2><h3 id=\"1-实现日期格式化函数\"><a href=\"#1-实现日期格式化函数\" class=\"headerlink\" title=\"1. 实现日期格式化函数\"></a>1. 实现日期格式化函数</h3><p>输入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">dateFormat</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&#x27;2020-12-01&#x27;</span>), <span class=\"string\">&#x27;yyyy/MM/dd&#x27;</span>) <span class=\"comment\">// 2020/12/01</span></span><br><span class=\"line\"><span class=\"title function_\">dateFormat</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&#x27;2020-04-01&#x27;</span>), <span class=\"string\">&#x27;yyyy/MM/dd&#x27;</span>) <span class=\"comment\">// 2020/04/01</span></span><br><span class=\"line\"><span class=\"title function_\">dateFormat</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&#x27;2020-04-01&#x27;</span>), <span class=\"string\">&#x27;yyyy年MM月dd日&#x27;</span>) <span class=\"comment\">// 2020年04月01日</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">dateFormat</span> = (<span class=\"params\">dateInput, format</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> day = dateInput.<span class=\"title function_\">getDate</span>() </span><br><span class=\"line\">    <span class=\"keyword\">var</span> month = dateInput.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> year = dateInput.<span class=\"title function_\">getFullYear</span>()   </span><br><span class=\"line\">    format = format.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/yyyy/</span>, year)</span><br><span class=\"line\">    format = format.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/MM/</span>,month)</span><br><span class=\"line\">    format = format.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/dd/</span>,day)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> format</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-交换a-b的值，不能用临时变量\"><a href=\"#2-交换a-b的值，不能用临时变量\" class=\"headerlink\" title=\"2. 交换a,b的值，不能用临时变量\"></a>2. 交换a,b的值，不能用临时变量</h3><p>巧妙的利用两个数的和、差：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = a + b</span><br><span class=\"line\">b = a - b</span><br><span class=\"line\">a = a - b</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-实现数组的乱序输出\"><a href=\"#3-实现数组的乱序输出\" class=\"headerlink\" title=\"3. 实现数组的乱序输出\"></a>3. 实现数组的乱序输出</h3><p>主要的实现思路就是：</p>\n<ul>\n<li>取出数组的第一个元素，随机产生一个索引值，将该第一个元素和这个索引对应的元素进行交换。</li>\n<li>第二次取出数据数组第二个元素，随机产生一个除了索引为1的之外的索引值，并将第二个元素与该索引值对应的元素进行交换</li>\n<li>按照上面的规律执行，直到遍历完成</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> randomIndex = <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * (arr.<span class=\"property\">length</span> - <span class=\"number\">1</span> - i)) + i;</span><br><span class=\"line\">  [arr[i], arr[randomIndex]] = [arr[randomIndex], arr[i]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr)</span><br></pre></td></tr></table></figure>\n\n<p>还有一方法就是倒序遍历：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> length = arr.<span class=\"property\">length</span>,</span><br><span class=\"line\">    randomIndex,</span><br><span class=\"line\">    temp;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (length) &#123;</span><br><span class=\"line\">    randomIndex = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * length--);</span><br><span class=\"line\">    temp = arr[length];</span><br><span class=\"line\">    arr[length] = arr[randomIndex];</span><br><span class=\"line\">    arr[randomIndex] = temp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-实现数组元素求和\"><a href=\"#4-实现数组元素求和\" class=\"headerlink\" title=\"4. 实现数组元素求和\"></a>4. 实现数组元素求和</h3><ul>\n<li>arr=[1,2,3,4,5,6,7,8,9,10]，求和</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = arr.<span class=\"title function_\">reduce</span>( <span class=\"function\">(<span class=\"params\">total,i</span>) =&gt;</span> total += i,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>arr=[1,2,3,[[4,5],6],7,8,9]，求和</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> = arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[[<span class=\"number\">4</span>,<span class=\"number\">5</span>],<span class=\"number\">6</span>],<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr= arr.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>).<span class=\"title function_\">reduce</span>( <span class=\"function\">(<span class=\"params\">total,i</span>) =&gt;</span> total += <span class=\"title class_\">Number</span>(i),<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr);</span><br></pre></td></tr></table></figure>\n\n<p>递归实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.<span class=\"property\">length</span> == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>] </span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>] + <span class=\"title function_\">add</span>(arr.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(arr)) <span class=\"comment\">// 21</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-实现数组的扁平化\"><a href=\"#5-实现数组的扁平化\" class=\"headerlink\" title=\"5. 实现数组的扁平化\"></a>5. 实现数组的扁平化</h3><p><strong>（1）递归实现</strong></p>\n<p>普通的递归思路很容易理解，就是通过循环递归的方式，一项一项地去遍历，如果每一项还是一个数组，那么就继续往下遍历，利用递归程序的方法，来实现数组的每一项的连接：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]]];</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flatten</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(arr[i])) &#123;</span><br><span class=\"line\">      result = result.<span class=\"title function_\">concat</span>(<span class=\"title function_\">flatten</span>(arr[i]));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">flatten</span>(arr);  <span class=\"comment\">//  [1, 2, 3, 4，5]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>（2）reduce 函数迭代</strong></p>\n<p>从上面普通的递归函数中可以看出，其实就是对数组的每一项进行处理，那么其实也可以用reduce 来实现数组的拼接，从而简化第一种方法的代码，改造后的代码如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]];</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flatten</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.<span class=\"title function_\">reduce</span>(<span class=\"keyword\">function</span>(<span class=\"params\">prev, next</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prev.<span class=\"title function_\">concat</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(next) ? <span class=\"title function_\">flatten</span>(next) : next)</span><br><span class=\"line\">    &#125;, [])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">flatten</span>(arr));<span class=\"comment\">//  [1, 2, 3, 4，5]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>（3）扩展运算符实现</strong></p>\n<p>这个方法的实现，采用了扩展运算符和 some 的方法，两者共同使用，达到数组扁平化的目的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]];</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flatten</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (arr.<span class=\"title function_\">some</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(item))) &#123;</span><br><span class=\"line\">        arr = [].<span class=\"title function_\">concat</span>(...arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">flatten</span>(arr)); <span class=\"comment\">//  [1, 2, 3, 4，5]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>（4）split 和 toString</strong></p>\n<p>可以通过 split 和 toString 两个方法来共同实现数组扁平化，由于数组会默认带一个 toString 的方法，所以可以把数组直接转换成逗号分隔的字符串，然后再用 split 方法把字符串重新转换为数组，如下面的代码所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]];</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flatten</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">flatten</span>(arr)); <span class=\"comment\">//  [1, 2, 3, 4，5]</span></span><br></pre></td></tr></table></figure>\n\n<p>通过这两个方法可以将多维数组直接转换成逗号连接的字符串，然后再重新分隔成数组。</p>\n<p><strong>（5）ES6 中的 flat</strong></p>\n<p>我们还可以直接调用 ES6 中的 flat 方法来实现数组扁平化。flat 方法的语法：<code>arr.flat([depth])</code></p>\n<p>其中 depth 是 flat 的参数，depth 是可以传递数组的展开深度（默认不填、数值是 1），即展开一层数组。如果层数不确定，参数可以传进 Infinity，代表不论多少层都要展开：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]];</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flatten</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.<span class=\"title function_\">flat</span>(<span class=\"title class_\">Infinity</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">flatten</span>(arr)); <span class=\"comment\">//  [1, 2, 3, 4，5]</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看出，一个嵌套了两层的数组，通过将 flat 方法的参数设置为 Infinity，达到了我们预期的效果。其实同样也可以设置成 2，也能实现这样的效果。在编程过程中，如果数组的嵌套层数不确定，最好直接使用 Infinity，可以达到扁平化。 <strong>（6）正则和 JSON 方法</strong> 在第4种方法中已经使用 toString 方法，其中仍然采用了将 JSON.stringify 的方法先转换为字符串，然后通过正则表达式过滤掉字符串中的数组的方括号，最后再利用 JSON.parse 把它转换成数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]], <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flatten</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr);</span><br><span class=\"line\">  str = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/(\\[|\\])/g</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  str = <span class=\"string\">&#x27;[&#x27;</span> + str + <span class=\"string\">&#x27;]&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(str); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">flatten</span>(arr)); <span class=\"comment\">//  [1, 2, 3, 4，5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-实现数组去重\"><a href=\"#6-实现数组去重\" class=\"headerlink\" title=\"6. 实现数组去重\"></a>6. 实现数组去重</h3><p>给定某无序数组，要求去除数组中的重复数字并且返回新的无重复数组。</p>\n<p>ES6方法（使用数据结构集合）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(array)); <span class=\"comment\">// [1, 2, 3, 5, 9, 8]</span></span><br></pre></td></tr></table></figure>\n\n<p>ES5方法：使用map存储不重复的数字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">uniqueArray</span>(array); <span class=\"comment\">// [1, 2, 3, 5, 9, 8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">uniqueArray</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> map = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; array.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!map.<span class=\"title function_\">hasOwnProperty</span>([array[i]])) &#123;</span><br><span class=\"line\">      map[array[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(array[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-实现数组的flat方法\"><a href=\"#7-实现数组的flat方法\" class=\"headerlink\" title=\"7. 实现数组的flat方法\"></a>7. 实现数组的flat方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_flat</span>(<span class=\"params\">arr, depth</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(arr) || depth &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(cur)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> prev.<span class=\"title function_\">concat</span>(<span class=\"title function_\">_flat</span>(cur, depth - <span class=\"number\">1</span>))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> prev.<span class=\"title function_\">concat</span>(cur);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-实现数组的push方法\"><a href=\"#8-实现数组的push方法\" class=\"headerlink\" title=\"8. 实现数组的push方法\"></a>8. 实现数组的push方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span> ; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">length</span>] = <span class=\"variable language_\">arguments</span>[i] ;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-实现数组的filter方法\"><a href=\"#9-实现数组的filter方法\" class=\"headerlink\" title=\"9. 实现数组的filter方法\"></a>9. 实现数组的filter方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_filter</span> = <span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;参数必须是一个函数&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>[i]) &amp;&amp; res.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-实现数组的map方法\"><a href=\"#10-实现数组的map方法\" class=\"headerlink\" title=\"10. 实现数组的map方法\"></a>10. 实现数组的map方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_map</span> = <span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;参数必须是一个函数&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">push</span>(<span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>[i]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-实现字符串的repeat方法\"><a href=\"#11-实现字符串的repeat方法\" class=\"headerlink\" title=\"11. 实现字符串的repeat方法\"></a>11. 实现字符串的repeat方法</h3><p>输入字符串s，以及其重复的次数，输出重复的结果，例如输入abc，2，输出abcabc。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">repeat</span>(<span class=\"params\">s, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(n + <span class=\"number\">1</span>)).<span class=\"title function_\">join</span>(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>递归：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">repeat</span>(<span class=\"params\">s, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n &gt; <span class=\"number\">0</span>) ? s.<span class=\"title function_\">concat</span>(<span class=\"title function_\">repeat</span>(s, --n)) : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-实现字符串翻转\"><a href=\"#12-实现字符串翻转\" class=\"headerlink\" title=\"12. 实现字符串翻转\"></a>12. 实现字符串翻转</h3><p>在字符串的原型链上添加一个方法，实现字符串翻转：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">String</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_reverse</span> = <span class=\"keyword\">function</span>(<span class=\"params\">a</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> res = obj.<span class=\"property\">_reverse</span> (<span class=\"string\">&#x27;hello&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);    <span class=\"comment\">// olleh</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，必须通过实例化对象之后再去调用定义的方法，不然找不到该方法。</p>\n<h3 id=\"13-将数字每千分位用逗号隔开\"><a href=\"#13-将数字每千分位用逗号隔开\" class=\"headerlink\" title=\"13. 将数字每千分位用逗号隔开\"></a>13. 将数字每千分位用逗号隔开</h3><p><strong>数字有小数版本：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">format</span> = n =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = n.<span class=\"title function_\">toString</span>() <span class=\"comment\">// 转成字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> decimals = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">// 判断是否有小数</span></span><br><span class=\"line\">    num.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;.&#x27;</span>) &gt; -<span class=\"number\">1</span> ? decimals = num.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>)[<span class=\"number\">1</span>] : decimals</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = num.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> remainder = len % <span class=\"number\">3</span></span><br><span class=\"line\">        decimals ? temp = <span class=\"string\">&#x27;.&#x27;</span> + decimals : temp</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (remainder &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 不是3的整数倍</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> num.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, remainder) + <span class=\"string\">&#x27;,&#x27;</span> + num.<span class=\"title function_\">slice</span>(remainder, len).<span class=\"title function_\">match</span>(<span class=\"regexp\">/\\d&#123;3&#125;/g</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) + temp</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 是3的整数倍</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> num.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, len).<span class=\"title function_\">match</span>(<span class=\"regexp\">/\\d&#123;3&#125;/g</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) + temp </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">format</span>(<span class=\"number\">12323.33</span>)  <span class=\"comment\">// &#x27;12,323.33&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>数字无小数版本：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">format</span> = n =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = n.<span class=\"title function_\">toString</span>() </span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = num.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> remainder = len % <span class=\"number\">3</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (remainder &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 不是3的整数倍</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> num.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, remainder) + <span class=\"string\">&#x27;,&#x27;</span> + num.<span class=\"title function_\">slice</span>(remainder, len).<span class=\"title function_\">match</span>(<span class=\"regexp\">/\\d&#123;3&#125;/g</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 是3的整数倍</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> num.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, len).<span class=\"title function_\">match</span>(<span class=\"regexp\">/\\d&#123;3&#125;/g</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;,&#x27;</span>) </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">format</span>(<span class=\"number\">1232323</span>)  <span class=\"comment\">// &#x27;1,232,323&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-实现非负大整数相加\"><a href=\"#14-实现非负大整数相加\" class=\"headerlink\" title=\"14. 实现非负大整数相加\"></a>14. 实现非负大整数相加</h3><p>JavaScript对数值有范围的限制，限制如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">MAX_VALUE</span> <span class=\"comment\">// 1.7976931348623157e+308</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">MAX_SAFE_INTEGER</span> <span class=\"comment\">// 9007199254740991</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">MIN_VALUE</span> <span class=\"comment\">// 5e-324</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\">MIN_SAFE_INTEGER</span> <span class=\"comment\">// -9007199254740991</span></span><br></pre></td></tr></table></figure>\n\n<p>如果想要对一个超大的整数(<code>&gt; Number.MAX_SAFE_INTEGER</code>)进行加法运算，但是又想输出一般形式，那么使用 + 是无法达到的，一旦数字超过 <code>Number.MAX_SAFE_INTEGER</code> 数字会被立即转换为科学计数法，并且数字精度相比以前将会有误差。</p>\n<p>实现一个算法进行大数的相加：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sumBigNumber</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  a = a.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  b = b.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (a.<span class=\"property\">length</span> || b.<span class=\"property\">length</span> || temp) &#123;</span><br><span class=\"line\">    temp += ~~a.<span class=\"title function_\">pop</span>() + ~~b.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    res = (temp % <span class=\"number\">10</span>) + res;</span><br><span class=\"line\">    temp  = temp &gt; <span class=\"number\">9</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^0+/</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其主要的思路如下：</p>\n<ul>\n<li>首先用字符串的方式来保存大数，这样数字在数学表示上就不会发生变化</li>\n<li>初始化res，temp来保存中间的计算结果，并将两个字符串转化为数组，以便进行每一位的加法运算</li>\n<li>将两个数组的对应的位进行相加，两个数相加的结果可能大于10，所以可能要仅为，对10进行取余操作，将结果保存在当前位</li>\n<li>判断当前位是否大于9，也就是是否会进位，若是则将temp赋值为true，因为在加法运算中，true会自动隐式转化为1，以便于下一次相加</li>\n<li>重复上述操作，直至计算结束</li>\n</ul>\n<h3 id=\"13-实现-add-1-2-3\"><a href=\"#13-实现-add-1-2-3\" class=\"headerlink\" title=\"13. 实现 add(1)(2)(3)\"></a>13. 实现 add(1)(2)(3)</h3><p>函数柯里化概念： 柯里化（Currying）是把接受多个参数的函数转变为接受一个单一参数的函数，并且返回接受余下的参数且返回结果的新函数的技术。</p>\n<p>1）粗暴版</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span> (a) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">b</span>) &#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">c</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n<p>2）柯里化解决方案</p>\n<ul>\n<li>参数长度固定</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"keyword\">function</span> (<span class=\"params\">m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> temp = <span class=\"keyword\">function</span> (<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">add</span>(m + n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  temp.<span class=\"property\">toString</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)(<span class=\"number\">5</span>)); <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">3</span>)(<span class=\"number\">6</span>)(<span class=\"number\">9</span>)(<span class=\"number\">25</span>)); <span class=\"comment\">// 43</span></span><br></pre></td></tr></table></figure>\n\n<p>对于add(3)(4)(5)，其执行过程如下：</p>\n<ol>\n<li>先执行add(3)，此时m=3，并且返回temp函数；</li>\n<li>执行temp(4)，这个函数内执行add(m+n)，n是此次传进来的数值4，m值还是上一步中的3，所以add(m+n)=add(3+4)=add(7)，此时m=7，并且返回temp函数</li>\n<li>执行temp(5)，这个函数内执行add(m+n)，n是此次传进来的数值5，m值还是上一步中的7，所以add(m+n)=add(7+5)=add(12)，此时m=12，并且返回temp函数</li>\n<li>由于后面没有传入参数，等于返回的temp函数不被执行而是打印，了解JS的朋友都知道对象的toString是修改对象转换字符串的方法，因此代码中temp函数的toString函数return m值，而m值是最后一步执行函数时的值m=12，所以返回值是12。</li>\n</ol>\n<ul>\n<li>参数长度不固定</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span> (...args) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//求和</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> args.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">currying</span> (fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = []</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">temp</span> (...newArgs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newArgs.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">            args = [</span><br><span class=\"line\">                ...args,</span><br><span class=\"line\">                ...newArgs</span><br><span class=\"line\">            ]</span><br><span class=\"line\">            <span class=\"keyword\">return</span> temp</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> val = fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">            args = [] <span class=\"comment\">//保证再次调用时清空</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> val</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> addCurry = <span class=\"title function_\">currying</span>(add)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">addCurry</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>, <span class=\"number\">5</span>)())  <span class=\"comment\">//15</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">addCurry</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)())  <span class=\"comment\">//15</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">addCurry</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)())  <span class=\"comment\">//15</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-实现类数组转化为数组\"><a href=\"#14-实现类数组转化为数组\" class=\"headerlink\" title=\"14. 实现类数组转化为数组\"></a>14. 实现类数组转化为数组</h3><p>类数组转换为数组的方法有这样几种：</p>\n<ul>\n<li>通过 call 调用数组的 slice 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(arrayLike);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过 call 调用数组的 splice 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">splice</span>.<span class=\"title function_\">call</span>(arrayLike, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过 apply 调用数组的 concat 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">concat</span>.<span class=\"title function_\">apply</span>([], arrayLike);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过 Array.from 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(arrayLike);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-使用-reduce-求和\"><a href=\"#15-使用-reduce-求和\" class=\"headerlink\" title=\"15. 使用 reduce 求和\"></a>15. 使用 reduce 求和</h3><p>arr = [1,2,3,4,5,6,7,8,9,10]，求和</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\">arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev, cur</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> prev + cur &#125;, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<p>arr = [1,2,3,[[4,5],6],7,8,9]，求和</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\">arr.<span class=\"title function_\">flat</span>(<span class=\"title class_\">Infinity</span>).<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev, cur</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> prev + cur &#125;, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<p>arr = [{a:1, b:3}, {a:2, b:3, c:4}, {a:3}]，求和</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [&#123;<span class=\"attr\">a</span>:<span class=\"number\">9</span>, <span class=\"attr\">b</span>:<span class=\"number\">3</span>, <span class=\"attr\">c</span>:<span class=\"number\">4</span>&#125;, &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">3</span>&#125;, &#123;<span class=\"attr\">a</span>:<span class=\"number\">3</span>&#125;] </span><br><span class=\"line\"></span><br><span class=\"line\">arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> prev + cur[<span class=\"string\">&quot;a&quot;</span>];</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-将js对象转化为树形结构\"><a href=\"#16-将js对象转化为树形结构\" class=\"headerlink\" title=\"16. 将js对象转化为树形结构\"></a>16. 将js对象转化为树形结构</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转换前：</span></span><br><span class=\"line\">source = [&#123;</span><br><span class=\"line\">            <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">pid</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;body&#x27;</span></span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">            <span class=\"attr\">id</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">            <span class=\"attr\">pid</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;title&#x27;</span></span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">            <span class=\"attr\">id</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">            <span class=\"attr\">pid</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;div&#x27;</span></span><br><span class=\"line\">          &#125;]</span><br><span class=\"line\"><span class=\"comment\">// 转换为: </span></span><br><span class=\"line\">tree = [&#123;</span><br><span class=\"line\">          <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">          <span class=\"attr\">pid</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">&#x27;body&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">children</span>: [&#123;</span><br><span class=\"line\">            <span class=\"attr\">id</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">            <span class=\"attr\">pid</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;title&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">children</span>: [&#123;</span><br><span class=\"line\">              <span class=\"attr\">id</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">              <span class=\"attr\">pid</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">              <span class=\"attr\">name</span>: <span class=\"string\">&#x27;div&#x27;</span></span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;]</span><br></pre></td></tr></table></figure>\n\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">jsonToTree</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化结果数组，并判断输入数据的格式</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(data)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 使用map，将当前对象的id与当前对象对应存储起来</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> map = &#123;&#125;;</span><br><span class=\"line\">  data.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    map[item.<span class=\"property\">id</span>] = item;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// </span></span><br><span class=\"line\">  data.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> parent = map[item.<span class=\"property\">pid</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(parent) &#123;</span><br><span class=\"line\">      (parent.<span class=\"property\">children</span> || (parent.<span class=\"property\">children</span> = [])).<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-使用ES5和ES6求函数参数的和\"><a href=\"#17-使用ES5和ES6求函数参数的和\" class=\"headerlink\" title=\"17. 使用ES5和ES6求函数参数的和\"></a>17. 使用ES5和ES6求函数参数的和</h3><p>ES5：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">forEach</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"keyword\">function</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">        sum += item * <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ES6：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">...nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">    nums.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">        sum += item * <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-解析-URL-Params-为对象\"><a href=\"#18-解析-URL-Params-为对象\" class=\"headerlink\" title=\"18. 解析 URL Params 为对象\"></a>18. 解析 URL Params 为对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">&#x27;http://www.domain.com/?user=anonymous&amp;id=123&amp;id=456&amp;city=%E5%8C%97%E4%BA%AC&amp;enabled&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">parseParam</span>(url)</span><br><span class=\"line\"><span class=\"comment\">/* 结果</span></span><br><span class=\"line\"><span class=\"comment\">&#123; user: &#x27;anonymous&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">  id: [ 123, 456 ], // 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型</span></span><br><span class=\"line\"><span class=\"comment\">  city: &#x27;北京&#x27;, // 中文需解码</span></span><br><span class=\"line\"><span class=\"comment\">  enabled: true, // 未指定值得 key 约定为 true</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parseParam</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> paramsStr = <span class=\"regexp\">/.+\\?(.+)$/</span>.<span class=\"title function_\">exec</span>(url)[<span class=\"number\">1</span>]; <span class=\"comment\">// 将 ? 后面的字符串取出来</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> paramsArr = paramsStr.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&amp;&#x27;</span>); <span class=\"comment\">// 将字符串以 &amp; 分割后存到数组中</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> paramsObj = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 将 params 存到对象中</span></span><br><span class=\"line\">  paramsArr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">param</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/=/</span>.<span class=\"title function_\">test</span>(param)) &#123; <span class=\"comment\">// 处理有 value 的参数</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> [key, val] = param.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;=&#x27;</span>); <span class=\"comment\">// 分割 key 和 value</span></span><br><span class=\"line\">      val = <span class=\"built_in\">decodeURIComponent</span>(val); <span class=\"comment\">// 解码</span></span><br><span class=\"line\">      val = <span class=\"regexp\">/^\\d+$/</span>.<span class=\"title function_\">test</span>(val) ? <span class=\"built_in\">parseFloat</span>(val) : val; <span class=\"comment\">// 判断是否转为数字</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (paramsObj.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123; <span class=\"comment\">// 如果对象有 key，则添加一个值</span></span><br><span class=\"line\">        paramsObj[key] = [].<span class=\"title function_\">concat</span>(paramsObj[key], val);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果对象没有这个 key，创建 key 并设置值</span></span><br><span class=\"line\">        paramsObj[key] = val;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 处理没有 value 的参数</span></span><br><span class=\"line\">      paramsObj[param] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> paramsObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、场景应用\"><a href=\"#三、场景应用\" class=\"headerlink\" title=\"三、场景应用\"></a>三、场景应用</h2><h3 id=\"1-循环打印红黄绿\"><a href=\"#1-循环打印红黄绿\" class=\"headerlink\" title=\"1. 循环打印红黄绿\"></a>1. 循环打印红黄绿</h3><p>下面来看一道比较典型的问题，通过这个问题来对比几种异步编程方法：<strong>红灯 3s 亮一次，绿灯 1s 亮一次，黄灯 2s 亮一次；如何让三个灯不断交替重复亮灯？</strong></p>\n<p>三个亮灯函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">red</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;red&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">green</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;green&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">yellow</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;yellow&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这道题复杂的地方在于<strong>需要“交替重复”亮灯</strong>，而不是“亮完一次”就结束了。</p>\n<h4 id=\"（1）用-callback-实现\"><a href=\"#（1）用-callback-实现\" class=\"headerlink\" title=\"（1）用 callback 实现\"></a>（1）用 callback 实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">task</span> = (<span class=\"params\">timer, light, callback</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (light === <span class=\"string\">&#x27;red&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">red</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (light === <span class=\"string\">&#x27;green&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">green</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (light === <span class=\"string\">&#x27;yellow&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">yellow</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">    &#125;, timer)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">task</span>(<span class=\"number\">3000</span>, <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">task</span>(<span class=\"number\">2000</span>, <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">task</span>(<span class=\"number\">1000</span>, <span class=\"string\">&#x27;yellow&#x27;</span>, <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这里存在一个 bug：代码只是完成了一次流程，执行后红黄绿灯分别只亮一次。该如何让它交替重复进行呢？</p>\n<p>上面提到过递归，可以递归亮灯的一个周期：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">step</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">task</span>(<span class=\"number\">3000</span>, <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">task</span>(<span class=\"number\">2000</span>, <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">task</span>(<span class=\"number\">1000</span>, <span class=\"string\">&#x27;yellow&#x27;</span>, step)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">step</span>()</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意看黄灯亮的回调里又再次调用了 step 方法</strong> 以完成循环亮灯。</p>\n<h4 id=\"（2）用-promise-实现\"><a href=\"#（2）用-promise-实现\" class=\"headerlink\" title=\"（2）用 promise 实现\"></a>（2）用 promise 实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">task</span> = (<span class=\"params\">timer, light</span>) =&gt; </span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (light === <span class=\"string\">&#x27;red&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">red</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (light === <span class=\"string\">&#x27;green&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">green</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (light === <span class=\"string\">&#x27;yellow&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">yellow</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">        &#125;, timer)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">step</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">task</span>(<span class=\"number\">3000</span>, <span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">task</span>(<span class=\"number\">2000</span>, <span class=\"string\">&#x27;green&#x27;</span>))</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">task</span>(<span class=\"number\">2100</span>, <span class=\"string\">&#x27;yellow&#x27;</span>))</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(step)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">step</span>()</span><br></pre></td></tr></table></figure>\n\n<p>这里将回调移除，在一次亮灯结束后，resolve 当前 promise，并依然使用递归进行。</p>\n<h4 id=\"（3）用-async-await-实现\"><a href=\"#（3）用-async-await-实现\" class=\"headerlink\" title=\"（3）用 async/await 实现\"></a>（3）用 async/await 实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">taskRunner</span> =  <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">task</span>(<span class=\"number\">3000</span>, <span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">task</span>(<span class=\"number\">2000</span>, <span class=\"string\">&#x27;green&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">task</span>(<span class=\"number\">2100</span>, <span class=\"string\">&#x27;yellow&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">taskRunner</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">taskRunner</span>()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-实现每隔一秒打印-1-2-3-4\"><a href=\"#2-实现每隔一秒打印-1-2-3-4\" class=\"headerlink\" title=\"2. 实现每隔一秒打印 1,2,3,4\"></a>2. 实现每隔一秒打印 1,2,3,4</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用闭包实现</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  (<span class=\"keyword\">function</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">    &#125;, i * <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用 let 块级作用域</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">  &#125;, i * <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-小孩报数问题\"><a href=\"#3-小孩报数问题\" class=\"headerlink\" title=\"3. 小孩报数问题\"></a>3. 小孩报数问题</h3><p>有30个小孩儿，编号从1-30，围成一圈依此报数，1、2、3 数到 3 的小孩儿退出这个圈， 然后下一个小孩 重新报数 1、2、3，问最后剩下的那个小孩儿的编号是多少?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">childNum</span>(<span class=\"params\">num, count</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> allplayer = [];    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; num; i++)&#123;</span><br><span class=\"line\">        allplayer[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> exitCount = <span class=\"number\">0</span>;    <span class=\"comment\">// 离开人数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> counter = <span class=\"number\">0</span>;      <span class=\"comment\">// 记录报数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> curIndex = <span class=\"number\">0</span>;     <span class=\"comment\">// 当前下标</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(exitCount &lt; num - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(allplayer[curIndex] !== <span class=\"number\">0</span>) counter++;    </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(counter == count)&#123;</span><br><span class=\"line\">            allplayer[curIndex] = <span class=\"number\">0</span>;                 </span><br><span class=\"line\">            counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">            exitCount++;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        curIndex++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(curIndex == num)&#123;</span><br><span class=\"line\">            curIndex = <span class=\"number\">0</span>               </span><br><span class=\"line\">        &#125;;           </span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; num; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(allplayer[i] !== <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> allplayer[i]</span><br><span class=\"line\">        &#125;      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">childNum</span>(<span class=\"number\">30</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-用Promise实现图片的异步加载\"><a href=\"#4-用Promise实现图片的异步加载\" class=\"headerlink\" title=\"4. 用Promise实现图片的异步加载\"></a>4. 用Promise实现图片的异步加载</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">imageAsync</span>=(<span class=\"params\">url</span>)=&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span><br><span class=\"line\">                img.<span class=\"property\">src</span> = url;</span><br><span class=\"line\">                img.οnlοad=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`图片请求成功，此处进行通用操作`</span>);</span><br><span class=\"line\">                    <span class=\"title function_\">resolve</span>(image);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                img.οnerrοr=<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`失败，此处进行失败的通用操作`</span>);</span><br><span class=\"line\">                    <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"title function_\">imageAsync</span>(<span class=\"string\">&quot;url&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;加载成功&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;加载失败&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-实现发布-订阅模式\"><a href=\"#5-实现发布-订阅模式\" class=\"headerlink\" title=\"5. 实现发布-订阅模式\"></a>5. 实现发布-订阅模式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EventCenter</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1. 定义事件容器，用来装事件数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> handlers = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2. 添加事件方法，参数：事件名 事件方法</span></span><br><span class=\"line\">  <span class=\"title function_\">addEventListener</span>(<span class=\"params\">type, handler</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建新数组容器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type]) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type] = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 存入事件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type].<span class=\"title function_\">push</span>(handler)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3. 触发事件，参数：事件名 事件参数</span></span><br><span class=\"line\">  <span class=\"title function_\">dispatchEvent</span>(<span class=\"params\">type, params</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 若没有注册该事件则抛出错误</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;该事件未注册&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 触发事件</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type].<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">handler</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">handler</span>(...params)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 4. 事件移除，参数：事件名 要删除事件，若无第二个参数则删除该事件的订阅和发布</span></span><br><span class=\"line\">  <span class=\"title function_\">removeEventListener</span>(<span class=\"params\">type, handler</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;事件无效&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!handler) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 移除事件</span></span><br><span class=\"line\">      <span class=\"keyword\">delete</span> <span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type]</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> index = <span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type].<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el === handler)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;无该绑定事件&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 移除事件</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type].<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type].<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"variable language_\">this</span>.<span class=\"property\">handlers</span>[type]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-查找文章中出现频率最高的单词\"><a href=\"#6-查找文章中出现频率最高的单词\" class=\"headerlink\" title=\"6. 查找文章中出现频率最高的单词\"></a>6. 查找文章中出现频率最高的单词</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findMostWord</span>(<span class=\"params\">article</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 合法性判断</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!article) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 参数处理</span></span><br><span class=\"line\">  article = article.<span class=\"title function_\">trim</span>().<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> wordList = article.<span class=\"title function_\">match</span>(<span class=\"regexp\">/[a-z]+/g</span>),</span><br><span class=\"line\">    visited = [],</span><br><span class=\"line\">    maxNum = <span class=\"number\">0</span>,</span><br><span class=\"line\">    maxWord = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  article = <span class=\"string\">&quot; &quot;</span> + wordList.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;  &quot;</span>) + <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历判断单词出现次数</span></span><br><span class=\"line\">  wordList.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (visited.<span class=\"title function_\">indexOf</span>(item) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 加入 visited </span></span><br><span class=\"line\">      visited.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> word = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&quot; &quot;</span> + item + <span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;g&quot;</span>),</span><br><span class=\"line\">        num = article.<span class=\"title function_\">match</span>(word).<span class=\"property\">length</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (num &gt; maxNum) &#123;</span><br><span class=\"line\">        maxNum = num;</span><br><span class=\"line\">        maxWord = item;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> maxWord + <span class=\"string\">&quot;  &quot;</span> + maxNum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-封装异步的fetch，使用async-await方式来使用\"><a href=\"#7-封装异步的fetch，使用async-await方式来使用\" class=\"headerlink\" title=\"7. 封装异步的fetch，使用async await方式来使用\"></a>7. 封装异步的fetch，使用async await方式来使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">HttpRequestUtil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"title function_\">get</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(url);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> res.<span class=\"title function_\">json</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"title function_\">post</span>(<span class=\"params\">url, data</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(url, &#123;</span><br><span class=\"line\">                <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(data)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> res.<span class=\"title function_\">json</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"title function_\">put</span>(<span class=\"params\">url, data</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(url, &#123;</span><br><span class=\"line\">                <span class=\"attr\">method</span>: <span class=\"string\">&#x27;PUT&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">data</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(data)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> res.<span class=\"title function_\">json</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"title function_\">delete</span>(<span class=\"params\">url, data</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(url, &#123;</span><br><span class=\"line\">                <span class=\"attr\">method</span>: <span class=\"string\">&#x27;DELETE&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">data</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(data)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> res.<span class=\"title function_\">json</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> httpRequestUtil = <span class=\"keyword\">new</span> <span class=\"title class_\">HttpRequestUtil</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> httpRequestUtil.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://golderbrother.cn/&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-实现prototype继承\"><a href=\"#8-实现prototype继承\" class=\"headerlink\" title=\"8. 实现prototype继承\"></a>8. 实现prototype继承</h3><p>所谓的原型链继承就是让新实例的原型等于父类的实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父方法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SupperFunction</span>(<span class=\"params\">flag1</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">flag1</span> = flag1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子方法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SubFunction</span>(<span class=\"params\">flag2</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">flag2</span> = flag2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//父实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> superInstance = <span class=\"keyword\">new</span> <span class=\"title class_\">SupperFunction</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子继承父</span></span><br><span class=\"line\"><span class=\"title class_\">SubFunction</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = superInstance;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> subInstance = <span class=\"keyword\">new</span> <span class=\"title class_\">SubFunction</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">//子调用自己和父的属性</span></span><br><span class=\"line\">subInstance.<span class=\"property\">flag1</span>;   <span class=\"comment\">// true</span></span><br><span class=\"line\">subInstance.<span class=\"property\">flag2</span>;   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-实现双向数据绑定\"><a href=\"#9-实现双向数据绑定\" class=\"headerlink\" title=\"9. 实现双向数据绑定\"></a>9. 实现双向数据绑定</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> input = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;input&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> span = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;span&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 数据劫持</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, <span class=\"string\">&#x27;text&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;获取数据了&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">set</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;数据更新了&#x27;</span>)</span><br><span class=\"line\">    input.<span class=\"property\">value</span> = newVal</span><br><span class=\"line\">    span.<span class=\"property\">innerHTML</span> = newVal</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 输入监听</span></span><br><span class=\"line\">input.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keyup&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  obj.<span class=\"property\">text</span> = e.<span class=\"property\">target</span>.<span class=\"property\">value</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-实现简单路由\"><a href=\"#10-实现简单路由\" class=\"headerlink\" title=\"10. 实现简单路由\"></a>10. 实现简单路由</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hash路由</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Route</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 路由存储对象</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">routes</span> = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当前hash</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">currentHash</span> = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">// 绑定this，避免监听时this指向改变</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">freshRoute</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">freshRoute</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 监听</span></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;load&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">freshRoute</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;hashchange&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">freshRoute</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 存储</span></span><br><span class=\"line\">  storeRoute (path, cb) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">routes</span>[path] = cb || <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 更新</span></span><br><span class=\"line\">  freshRoute () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">currentHash</span> = location.<span class=\"property\">hash</span>.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>) || <span class=\"string\">&#x27;/&#x27;</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">routes</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">currentHash</span>]()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-实现斐波那契数列\"><a href=\"#11-实现斐波那契数列\" class=\"headerlink\" title=\"11. 实现斐波那契数列\"></a>11. 实现斐波那契数列</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span> (n)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>(n-<span class=\"number\">2</span>)+<span class=\"title function_\">fn</span>(n-<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 优化</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fibonacci2</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arrLen = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= arrLen) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = arrLen; i &lt; n; i++) &#123;</span><br><span class=\"line\">        arr.<span class=\"title function_\">push</span>(arr[i - <span class=\"number\">1</span>] + arr[ i - <span class=\"number\">2</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 非递归</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        pre1 = pre2;</span><br><span class=\"line\">        pre2 = current;</span><br><span class=\"line\">        current = pre1 + pre2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-字符串出现的不重复最长长度\"><a href=\"#12-字符串出现的不重复最长长度\" class=\"headerlink\" title=\"12. 字符串出现的不重复最长长度\"></a>12. 字符串出现的不重复最长长度</h3><p>用一个滑动窗口装没有重复的字符，枚举字符记录最大值即可。用 map 维护字符的索引，遇到相同的字符，把左边界移动过去即可。挪动的过程中记录最大长度：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLongestSubstring = <span class=\"keyword\">function</span> (<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = s.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.<span class=\"title function_\">has</span>(s[j])) &#123;</span><br><span class=\"line\">            i = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(i, map.<span class=\"title function_\">get</span>(s[j]))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(res, j - i)</span><br><span class=\"line\">        map.<span class=\"title function_\">set</span>(s[j], j)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-使用-setTimeout-实现-setInterval\"><a href=\"#13-使用-setTimeout-实现-setInterval\" class=\"headerlink\" title=\"13. 使用 setTimeout 实现 setInterval\"></a>13. 使用 setTimeout 实现 setInterval</h3><p>setInterval 的作用是每隔一段指定时间执行一个函数，但是这个执行不是真的到了时间立即执行，它真正的作用是每隔一段时间将事件加入事件队列中去，只有当当前的执行栈为空的时候，才能去从事件队列中取出事件执行。所以可能会出现这样的情况，就是当前执行栈执行的时间很长，导致事件队列里边积累多个定时器加入的事件，当执行栈结束的时候，这些事件会依次执行，因此就不能到间隔一段时间执行的效果。</p>\n<p>针对 setInterval 的这个缺点，我们可以使用 setTimeout 递归调用来模拟 setInterval，这样我们就确保了只有一个事件结束了，我们才会触发下一个定时器事件，这样解决了 setInterval 的问题。</p>\n<p>实现思路是使用递归函数，不断地去执行 setTimeout 从而达到 setInterval 的效果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mySetInterval</span>(<span class=\"params\">fn, timeout</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 控制器，控制定时器是否继续执行</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer = &#123;</span><br><span class=\"line\">    <span class=\"attr\">flag</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 设置递归函数，模拟定时器执行。</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">interval</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer.<span class=\"property\">flag</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(interval, timeout);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 启动定时器</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(interval, timeout);</span><br><span class=\"line\">  <span class=\"comment\">// 返回控制器</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> timer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-实现-jsonp\"><a href=\"#14-实现-jsonp\" class=\"headerlink\" title=\"14. 实现 jsonp\"></a>14. 实现 jsonp</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 动态的加载js文件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addScript</span>(<span class=\"params\">src</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">  script.<span class=\"property\">src</span> = src;</span><br><span class=\"line\">  script.<span class=\"property\">type</span> = <span class=\"string\">&quot;text/javascript&quot;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(script);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">addScript</span>(<span class=\"string\">&quot;http://xxx.xxx.com/xxx.js?callback=handleRes&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置一个全局的callback函数来接收回调结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleRes</span>(<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 接口返回的数据格式</span></span><br><span class=\"line\"><span class=\"title function_\">handleRes</span>(&#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-判断对象是否存在循环引用\"><a href=\"#15-判断对象是否存在循环引用\" class=\"headerlink\" title=\"15. 判断对象是否存在循环引用\"></a>15. 判断对象是否存在循环引用</h3><p>循环引用对象本来没有什么问题，但是序列化的时候就会发生问题，比如调用<code>JSON.stringify()</code>对该类对象进行序列化，就会报错: <code>Converting circular structure to JSON.</code></p>\n<p>下面方法可以用来判断一个对象中是否已存在循环引用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isCycleObject</span> = (<span class=\"params\">obj,parent</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentArr = parent || [obj];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> obj[i] === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            parentArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">pObj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pObj === obj[i])&#123;</span><br><span class=\"line\">                    flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            flag = <span class=\"title function_\">isCycleObject</span>(obj[i],[...parentArr,obj[i]]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = &#123;a&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> c = &#123;b&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> o = &#123;<span class=\"attr\">d</span>:&#123;<span class=\"attr\">a</span>:<span class=\"number\">3</span>&#125;,c&#125;</span><br><span class=\"line\">o.<span class=\"property\">c</span>.<span class=\"property\">b</span>.<span class=\"property\">aa</span> = a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isCycleObject</span>(o)</span><br></pre></td></tr></table></figure>\n\n<p>查找有序二维数组的目标值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> findNumberIn2DArray = <span class=\"keyword\">function</span>(<span class=\"params\">matrix, target</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matrix == <span class=\"literal\">null</span> || matrix.<span class=\"property\">length</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> row = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> column = matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (row &lt; matrix.<span class=\"property\">length</span> &amp;&amp; column &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (matrix[row][column] == target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (matrix[row][column] &gt; target) &#123;</span><br><span class=\"line\">            column--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            row++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>二维数组斜向打印：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printMatrix</span>(<span class=\"params\">arr</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> m = arr.<span class=\"property\">length</span>, n = arr[<span class=\"number\">0</span>].<span class=\"property\">length</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 左上角，从0 到 n - 1 列进行打印</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k = <span class=\"number\">0</span>; k &lt; n; k++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, j = k; i &lt; m &amp;&amp; j &gt;= <span class=\"number\">0</span>; i++, j--) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(arr[i][j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 右下角，从1 到 n - 1 行进行打印</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k = <span class=\"number\">1</span>; k &lt; m; k++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = k, j = n - <span class=\"number\">1</span>; i &lt; m &amp;&amp; j &gt;= <span class=\"number\">0</span>; i++, j--) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(arr[i][j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"算法复习","keywords":"JS","description":"算法总结","top_img":"https://raw.githubusercontent.com/why862555625/images/main/images/112.jpg","sticky":"数值越大越靠前","cover":"https://raw.githubusercontent.com/why862555625/images/main/images/112.jpg","comments":1,"abbrlink":"fa264d8c","date":"2023-05-31T12:18:34.000Z","updated":"2023-05-31T12:18:34.000Z","_content":"\n\n\n算法复习\n\n<!-- more -->\n\n# 链表\n\n## 1. \n\n\n\n![image-20230531202054172](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531202054172.png)\n\n由于会直接返回翻转链表，最后一个就是翻转后的链表头。因此只需要保留前一个链表，让后一个链表不停的指向前一个链表就可以。\n\n```js\nfunction ReverseList(pHead)\n{\n    let pred =null;\n    while(pHead){\n        [pHead.next,pred,pHead] = [pred,pHead,pHead.next]\n    }\n    return pred\n}\n```\n\n## 2.\n\n\n\n![image-20230531225422160](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531225422160.png)\n\n首先将中间需要翻转的那段拿出来单独翻转，可以将这段的最后一个设为null作为翻转结束的标志。然后将这段在插回来就可以了\n\n\n\n```js\nfunction reverse(head) {\n    let pre = null;\n    let cur = head;\n    let next;\n    while(cur) {\n        next = cur.next;\n        cur.next = pre;\n         \n        pre = cur;\n        cur = next;\n    }\n    return [pre, head];\n}\nfunction reverseBetween( head ,  m ,  n ) {\n    // 增加一个origin方便返回最终结果 origin.next\n    // 因为head也有可能被翻转了\n    const origin = { next: head };\n    head = origin;\n    let left, right;\n    let i = 0;\n    for(; i < m - 1; i++) {\n        head = head.next;\n    }\n    left = head;\n    for(; i < n; i++) {\n        head = head.next;\n    }\n    right = head.next;\n    head.next = null;\n    const [ start, end ] = reverse(left.next);\n    left.next = start;\n    end.next = right;\n    return  origin.next\n}\nmodule.exports = {\n    reverseBetween : reverseBetween\n};\n```\n\n\n\n## 3. \n\n![image-20230531232244456](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531232244456.png)\n\n和上一题类似 只需要翻转前记录下前一个节点 和后一个节点  然后拼接起来就可以\n\n```js\nfunction reverse(head) {\n    let pre = null;\n    let cur = head;\n    while(cur) {\n        [cur.next,pre,cur] = [pre,cur,cur.next]\n    }\n    return [pre, head];\n}\nfunction reverseKGroup(head, k) {\n    if(!head||!head.next||k ==1) return head\n    let result ={'next':head},\n    num = 0,\n    //记录前一个翻转列表的尾结点\n    prev = result\n    //记录下一个翻转开始节点\n    nextNode = head\n    while(head){\n        if(num+1 == k){\n            //此时head为这一次翻转列表的最后一个节点  需要记录一下下一个翻转周期的开始节点\n            let temp = head.next\n            head.next = null\n            let [start,end] = reverse(nextNode)\n            nextNode  = temp\n            prev.next = start\n            prev = end\n            num = 0\n            if(!nextNode){break}\n            head = nextNode.next\n        }else{\n            head = head.next\n        }\n        num ++\n    }\n    if(num){\n        //如果还有剩余 补充到末尾\n        prev.next = nextNode\n    }\n    return result.next\n}\nmodule.exports = {\n    reverseKGroup: reverseKGroup,\n};\n\n```\n\n## 4.\n\n![image-20230601125414404](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230601125414404.png)\n\n双指针遍历 小的放到新链表中、由于是引用不会增加额外空间\n\n```ts\nexport function Merge(pHead1: ListNode, pHead2: ListNode): ListNode {\n    // write code here\n    let result = new ListNode(-1)\n    let cur = result\n    while(pHead1&&pHead2){\n        if(pHead1.val>pHead2.val){\n            cur .next = pHead2\n            pHead2 =pHead2.next\n\n        }else{\n            cur .next = pHead1\n            pHead1 =pHead1.next\n        }\n        cur = cur.next\n\n    }\n    if(pHead1) \n            cur .next = pHead1\n    if(pHead2) \n            cur .next = pHead2\n    return result.next\n}\n```\n\n## 5.\n\n","source":"_posts/js/算法练习.md","raw":"---\ntitle: 算法复习\ntags:\n  - JS\ncategories: 面试\nkeywords: JS\ndescription: 算法总结\ntop_img: 'https://raw.githubusercontent.com/why862555625/images/main/images/112.jpg'\nsticky: 数值越大越靠前\ncover: 'https://raw.githubusercontent.com/why862555625/images/main/images/112.jpg'\ncomments: false评论\nabbrlink: fa264d8c\ndate: 2023-05-31 20:18:34\nupdated: 2023-05-31 20:18:34\n---\n\n\n\n算法复习\n\n<!-- more -->\n\n# 链表\n\n## 1. \n\n\n\n![image-20230531202054172](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531202054172.png)\n\n由于会直接返回翻转链表，最后一个就是翻转后的链表头。因此只需要保留前一个链表，让后一个链表不停的指向前一个链表就可以。\n\n```js\nfunction ReverseList(pHead)\n{\n    let pred =null;\n    while(pHead){\n        [pHead.next,pred,pHead] = [pred,pHead,pHead.next]\n    }\n    return pred\n}\n```\n\n## 2.\n\n\n\n![image-20230531225422160](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531225422160.png)\n\n首先将中间需要翻转的那段拿出来单独翻转，可以将这段的最后一个设为null作为翻转结束的标志。然后将这段在插回来就可以了\n\n\n\n```js\nfunction reverse(head) {\n    let pre = null;\n    let cur = head;\n    let next;\n    while(cur) {\n        next = cur.next;\n        cur.next = pre;\n         \n        pre = cur;\n        cur = next;\n    }\n    return [pre, head];\n}\nfunction reverseBetween( head ,  m ,  n ) {\n    // 增加一个origin方便返回最终结果 origin.next\n    // 因为head也有可能被翻转了\n    const origin = { next: head };\n    head = origin;\n    let left, right;\n    let i = 0;\n    for(; i < m - 1; i++) {\n        head = head.next;\n    }\n    left = head;\n    for(; i < n; i++) {\n        head = head.next;\n    }\n    right = head.next;\n    head.next = null;\n    const [ start, end ] = reverse(left.next);\n    left.next = start;\n    end.next = right;\n    return  origin.next\n}\nmodule.exports = {\n    reverseBetween : reverseBetween\n};\n```\n\n\n\n## 3. \n\n![image-20230531232244456](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531232244456.png)\n\n和上一题类似 只需要翻转前记录下前一个节点 和后一个节点  然后拼接起来就可以\n\n```js\nfunction reverse(head) {\n    let pre = null;\n    let cur = head;\n    while(cur) {\n        [cur.next,pre,cur] = [pre,cur,cur.next]\n    }\n    return [pre, head];\n}\nfunction reverseKGroup(head, k) {\n    if(!head||!head.next||k ==1) return head\n    let result ={'next':head},\n    num = 0,\n    //记录前一个翻转列表的尾结点\n    prev = result\n    //记录下一个翻转开始节点\n    nextNode = head\n    while(head){\n        if(num+1 == k){\n            //此时head为这一次翻转列表的最后一个节点  需要记录一下下一个翻转周期的开始节点\n            let temp = head.next\n            head.next = null\n            let [start,end] = reverse(nextNode)\n            nextNode  = temp\n            prev.next = start\n            prev = end\n            num = 0\n            if(!nextNode){break}\n            head = nextNode.next\n        }else{\n            head = head.next\n        }\n        num ++\n    }\n    if(num){\n        //如果还有剩余 补充到末尾\n        prev.next = nextNode\n    }\n    return result.next\n}\nmodule.exports = {\n    reverseKGroup: reverseKGroup,\n};\n\n```\n\n## 4.\n\n![image-20230601125414404](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230601125414404.png)\n\n双指针遍历 小的放到新链表中、由于是引用不会增加额外空间\n\n```ts\nexport function Merge(pHead1: ListNode, pHead2: ListNode): ListNode {\n    // write code here\n    let result = new ListNode(-1)\n    let cur = result\n    while(pHead1&&pHead2){\n        if(pHead1.val>pHead2.val){\n            cur .next = pHead2\n            pHead2 =pHead2.next\n\n        }else{\n            cur .next = pHead1\n            pHead1 =pHead1.next\n        }\n        cur = cur.next\n\n    }\n    if(pHead1) \n            cur .next = pHead1\n    if(pHead2) \n            cur .next = pHead2\n    return result.next\n}\n```\n\n## 5.\n\n","slug":"js/算法练习","published":1,"layout":"post","photos":[],"link":"","_id":"clipg0875000yrgwhacvn9sey","content":"<p>算法复习</p>\n<span id=\"more\"></span>\n\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531202054172.png\" alt=\"image-20230531202054172\"></p>\n<p>由于会直接返回翻转链表，最后一个就是翻转后的链表头。因此只需要保留前一个链表，让后一个链表不停的指向前一个链表就可以。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ReverseList</span>(<span class=\"params\">pHead</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pred =<span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pHead)&#123;</span><br><span class=\"line\">        [pHead.<span class=\"property\">next</span>,pred,pHead] = [pred,pHead,pHead.<span class=\"property\">next</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pred</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531225422160.png\" alt=\"image-20230531225422160\"></p>\n<p>首先将中间需要翻转的那段拿出来单独翻转，可以将这段的最后一个设为null作为翻转结束的标志。然后将这段在插回来就可以了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur) &#123;</span><br><span class=\"line\">        next = cur.<span class=\"property\">next</span>;</span><br><span class=\"line\">        cur.<span class=\"property\">next</span> = pre;</span><br><span class=\"line\">         </span><br><span class=\"line\">        pre = cur;</span><br><span class=\"line\">        cur = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [pre, head];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseBetween</span>(<span class=\"params\"> head ,  m ,  n </span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 增加一个origin方便返回最终结果 origin.next</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为head也有可能被翻转了</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> origin = &#123; <span class=\"attr\">next</span>: head &#125;;</span><br><span class=\"line\">    head = origin;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left, right;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; i &lt; m - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        head = head.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    left = head;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; i &lt; n; i++) &#123;</span><br><span class=\"line\">        head = head.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    right = head.<span class=\"property\">next</span>;</span><br><span class=\"line\">    head.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [ start, end ] = <span class=\"title function_\">reverse</span>(left.<span class=\"property\">next</span>);</span><br><span class=\"line\">    left.<span class=\"property\">next</span> = start;</span><br><span class=\"line\">    end.<span class=\"property\">next</span> = right;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  origin.<span class=\"property\">next</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    reverseBetween : reverseBetween</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531232244456.png\" alt=\"image-20230531232244456\"></p>\n<p>和上一题类似 只需要翻转前记录下前一个节点 和后一个节点  然后拼接起来就可以</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur) &#123;</span><br><span class=\"line\">        [cur.<span class=\"property\">next</span>,pre,cur] = [pre,cur,cur.<span class=\"property\">next</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [pre, head];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseKGroup</span>(<span class=\"params\">head, k</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head||!head.<span class=\"property\">next</span>||k ==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result =&#123;<span class=\"string\">&#x27;next&#x27;</span>:head&#125;,</span><br><span class=\"line\">    num = <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\">//记录前一个翻转列表的尾结点</span></span><br><span class=\"line\">    prev = result</span><br><span class=\"line\">    <span class=\"comment\">//记录下一个翻转开始节点</span></span><br><span class=\"line\">    nextNode = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(head)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num+<span class=\"number\">1</span> == k)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//此时head为这一次翻转列表的最后一个节点  需要记录一下下一个翻转周期的开始节点</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = head.<span class=\"property\">next</span></span><br><span class=\"line\">            head.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> [start,end] = <span class=\"title function_\">reverse</span>(nextNode)</span><br><span class=\"line\">            nextNode  = temp</span><br><span class=\"line\">            prev.<span class=\"property\">next</span> = start</span><br><span class=\"line\">            prev = end</span><br><span class=\"line\">            num = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!nextNode)&#123;<span class=\"keyword\">break</span>&#125;</span><br><span class=\"line\">            head = nextNode.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            head = head.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        num ++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果还有剩余 补充到末尾</span></span><br><span class=\"line\">        prev.<span class=\"property\">next</span> = nextNode</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.<span class=\"property\">next</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">reverseKGroup</span>: reverseKGroup,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230601125414404.png\" alt=\"image-20230601125414404\"></p>\n<p>双指针遍历 小的放到新链表中、由于是引用不会增加额外空间</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Merge</span>(<span class=\"params\">pHead1: ListNode, pHead2: ListNode</span>): <span class=\"title class_\">ListNode</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// write code here</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = result</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pHead1&amp;&amp;pHead2)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pHead1.<span class=\"property\">val</span>&gt;pHead2.<span class=\"property\">val</span>)&#123;</span><br><span class=\"line\">            cur .<span class=\"property\">next</span> = pHead2</span><br><span class=\"line\">            pHead2 =pHead2.<span class=\"property\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cur .<span class=\"property\">next</span> = pHead1</span><br><span class=\"line\">            pHead1 =pHead1.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur = cur.<span class=\"property\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pHead1) </span><br><span class=\"line\">            cur .<span class=\"property\">next</span> = pHead1</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pHead2) </span><br><span class=\"line\">            cur .<span class=\"property\">next</span> = pHead2</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.<span class=\"property\">next</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5.\"></a>5.</h2>","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"excerpt":"<p>算法复习</p>","more":"<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531202054172.png\" alt=\"image-20230531202054172\"></p>\n<p>由于会直接返回翻转链表，最后一个就是翻转后的链表头。因此只需要保留前一个链表，让后一个链表不停的指向前一个链表就可以。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ReverseList</span>(<span class=\"params\">pHead</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pred =<span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pHead)&#123;</span><br><span class=\"line\">        [pHead.<span class=\"property\">next</span>,pred,pHead] = [pred,pHead,pHead.<span class=\"property\">next</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pred</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531225422160.png\" alt=\"image-20230531225422160\"></p>\n<p>首先将中间需要翻转的那段拿出来单独翻转，可以将这段的最后一个设为null作为翻转结束的标志。然后将这段在插回来就可以了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur) &#123;</span><br><span class=\"line\">        next = cur.<span class=\"property\">next</span>;</span><br><span class=\"line\">        cur.<span class=\"property\">next</span> = pre;</span><br><span class=\"line\">         </span><br><span class=\"line\">        pre = cur;</span><br><span class=\"line\">        cur = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [pre, head];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseBetween</span>(<span class=\"params\"> head ,  m ,  n </span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 增加一个origin方便返回最终结果 origin.next</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为head也有可能被翻转了</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> origin = &#123; <span class=\"attr\">next</span>: head &#125;;</span><br><span class=\"line\">    head = origin;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left, right;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; i &lt; m - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        head = head.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    left = head;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; i &lt; n; i++) &#123;</span><br><span class=\"line\">        head = head.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    right = head.<span class=\"property\">next</span>;</span><br><span class=\"line\">    head.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [ start, end ] = <span class=\"title function_\">reverse</span>(left.<span class=\"property\">next</span>);</span><br><span class=\"line\">    left.<span class=\"property\">next</span> = start;</span><br><span class=\"line\">    end.<span class=\"property\">next</span> = right;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  origin.<span class=\"property\">next</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    reverseBetween : reverseBetween</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531232244456.png\" alt=\"image-20230531232244456\"></p>\n<p>和上一题类似 只需要翻转前记录下前一个节点 和后一个节点  然后拼接起来就可以</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur) &#123;</span><br><span class=\"line\">        [cur.<span class=\"property\">next</span>,pre,cur] = [pre,cur,cur.<span class=\"property\">next</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [pre, head];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseKGroup</span>(<span class=\"params\">head, k</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head||!head.<span class=\"property\">next</span>||k ==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result =&#123;<span class=\"string\">&#x27;next&#x27;</span>:head&#125;,</span><br><span class=\"line\">    num = <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\">//记录前一个翻转列表的尾结点</span></span><br><span class=\"line\">    prev = result</span><br><span class=\"line\">    <span class=\"comment\">//记录下一个翻转开始节点</span></span><br><span class=\"line\">    nextNode = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(head)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num+<span class=\"number\">1</span> == k)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//此时head为这一次翻转列表的最后一个节点  需要记录一下下一个翻转周期的开始节点</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = head.<span class=\"property\">next</span></span><br><span class=\"line\">            head.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> [start,end] = <span class=\"title function_\">reverse</span>(nextNode)</span><br><span class=\"line\">            nextNode  = temp</span><br><span class=\"line\">            prev.<span class=\"property\">next</span> = start</span><br><span class=\"line\">            prev = end</span><br><span class=\"line\">            num = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!nextNode)&#123;<span class=\"keyword\">break</span>&#125;</span><br><span class=\"line\">            head = nextNode.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            head = head.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        num ++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果还有剩余 补充到末尾</span></span><br><span class=\"line\">        prev.<span class=\"property\">next</span> = nextNode</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.<span class=\"property\">next</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">reverseKGroup</span>: reverseKGroup,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230601125414404.png\" alt=\"image-20230601125414404\"></p>\n<p>双指针遍历 小的放到新链表中、由于是引用不会增加额外空间</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Merge</span>(<span class=\"params\">pHead1: ListNode, pHead2: ListNode</span>): <span class=\"title class_\">ListNode</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// write code here</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = result</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pHead1&amp;&amp;pHead2)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pHead1.<span class=\"property\">val</span>&gt;pHead2.<span class=\"property\">val</span>)&#123;</span><br><span class=\"line\">            cur .<span class=\"property\">next</span> = pHead2</span><br><span class=\"line\">            pHead2 =pHead2.<span class=\"property\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cur .<span class=\"property\">next</span> = pHead1</span><br><span class=\"line\">            pHead1 =pHead1.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur = cur.<span class=\"property\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pHead1) </span><br><span class=\"line\">            cur .<span class=\"property\">next</span> = pHead1</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pHead2) </span><br><span class=\"line\">            cur .<span class=\"property\">next</span> = pHead2</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.<span class=\"property\">next</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5.\"></a>5.</h2>"},{"title":"算法总结","keywords":"JS","description":"算法总结","top_img":"https://raw.githubusercontent.com/why862555625/images/main/images/00.jpg","sticky":"数值越大越靠前","cover":"https://raw.githubusercontent.com/why862555625/images/main/images/00.jpg","comments":1,"abbrlink":"1213ac56","date":"2023-05-31T12:18:34.000Z","updated":"2023-05-31T12:18:34.000Z","_content":"\n\n\n算法总结\n\n<!-- more -->\n\n# 1. 动态规划\n\n#### 传统递归 vs. DP\n\n先用一个被大佬们举例举到烂的🌰，这个栗子很烂，但是真的**很香**：必须着重**强调**.\n\n**《斐波那契（Fibonacci）数列的第n项》**\n\n**举荐理由：**在我自己看来Fibonacci是动态规划设计中的入门级案例，就好比说编程中的“hello world”，大数据中的“word count”.\n\nFibonacci几乎完美的诠释了**动态规划带来的思想和技巧**然而没有任何其他的要考虑的细枝末节，这种很清晰的方法看起来很适合整个的动态规划的思维方式，很适合入门来进行的思考方式.\n\n接下来咱们先来看题目：\n\n```题目\n题目复制代码写一个函数，输入n，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：\n\nF(0) = 0, F(1) = 1\nF(N) = F(N - 1) + F(N - 2), 其中 N > 1.\n斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。\n```\n\n比较一下传统递归解法和动态规划思想下的解决对比\n\n#### 1. 先 递归解决\n\n传统对于这种题目的思考方式会利用递归求解，做起来比较简单，就是不断的去递归调用，看下面代码：\n\n```js\nlet i = 0;\nfunction fib_recur(N){\n    console.log(i)\n    if N <= 1:\n        return N\n    return fib_recur(N-1) + fib_recur(N-2)  # 递归输出  \n}\n```\n\n输出的结果：\n\n```python\nF( 1 ) =  3\nF( 2 ) =  2\nF( 3 ) =  1\nF( 4 ) =  0\nF( 5 ) =  1\nF( 6 ) =  2\nF( 7 ) =  1\nF( 8 ) =  0\n```\n\n**重复计算**\n\n明显可以看到，总计 8 次的计算过程中，相同的计算结果有三对进行了**重复计算**（下图中同色项，不包含灰色），也就是说在递归的过程中，把曾经计算过的项进行了**又一次的重复计算**，这样对于时间效率是比较低的，唯一的好处可能就是代码看起来比较好懂，但是终归不是一个好的算法设计方法。\n\n代码中，在计算N的时候就去递归计算 `fib(N-1) + fib(N-2)`，那么，这种情况下的计算过程中。会是下面图中的一个计算过程。\n\n可以发现，会有相当一部分的重复计算，这样对于时间都是重复的消耗。\n\n> 参考图中相同颜色的项，比如说粉色的重复计算、黄色的重复计算等\n>\n> 注意：递归中没有对空间进行了增加，始终都是同样的长度，仅仅是不断的弹出和压入\n\n![image-20230605114156368](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114156368.png)\n\n为了更好的说明这种重复计算带来时间效率的低下。再比如说，相比上述图中的计算节点，再增加一个节点的计算，增加计算F(5)，那么由于递归的计算方式，会有更多的项（下图中线框中部分）进行了重复的计算。在计算`F(5)`的时候，会递归调用`F(4)`和`F(3)`，而在下图中，计算`F(4)`的时候，又会完整的去计算`F(3)`。这样，如果N很大的话，会有更大的时间消耗.\n\n这样，这棵树的规模进行进行成倍增加，时间复杂度很明显的进行了成倍的扩张。对于时间上来说是很恐怖的.\n\n时间复杂度带来的低效率严重超过了代码的可读性，所以我们可以想办法将**过去计算**过的节点**进行保存**。这样，我们就会用到下面要说的动态规划思想带来的时间上的高效.\n\n![image-20230605114342318](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114342318.png)\n\n> 时间复杂度：o(2**n) ---> 指数级\n>\n> 空间复杂度：o(n)\n\n#### 2. 后 动态规划解决\n\n**大概解释一下字面意思：**\n\n**动态规划：我们不直接去解决问题，而是在每一步解决问题的时候，达到每一步的最优情况。换句话说，就是在每一步解决问题过程中，利用过去的状态**以及**当前状态**的情况而达到一个当前的最优状态.\n\n**规划：在一般解决该类问题的时候，会有一个“填表格”的过程，无论是简单情况下的\\**一维表格**还是复杂一点的**二维表格**，都是以**开辟空间换时间**的思想，以争取最佳的时间效率. （保存过程中间值，方便后续直接使用）.\n\n**动态：**用上面的案例来说，递归解决过程中的每一步都会从基本问题不断的“自顶向下”去求解，在每一步骤中，会有相同的计算逻辑进行了重复的计算。相比于递归思想，动态规划思想增加了对历史上计算结果的保存，逐步记录下中间的计算结果，在每一步求得最优值.\n\n因此，动态规划可以避免重复计算，达到了时间上的最优，从O(2N)O(2^N)O(2N)指数级变为O(N)O(N)O(N)常数级别，相较于开辟的一段内存空间存放中间过程值的开销，是非常值得的.\n\n**那么，接下来咱们依照动态规划的思路进行对Fibonacci进行下解决**\n\n依据题中的规则：\n\nF(0) = 0, F(1) = 1\n\nF(N) = F(N - 1) + F(N - 2),  when N > 1\n\n那么，👇👇F(N) 的值只与他的前两个状态有关系👇👇\n\na. 初始化值 : F(0) = 0, F(1) = 1 b. 想要计算得到F(2)， 那么F(2) = F(0) + F(1)   -->  保存 F(2) c. 想要计算得到F(3)， 那么F(3) = F(2) + F(1)   -->  保存 F(3) d. 想要计算得到F(3)， 那么F(4) = F(3) + F(2)   -->  保存 F(4)\n\n利用动态规划思想，以一维数组辅助实现的Fibonacci，看下图\n\n![image-20230605114740415](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114740415.png)\n\n是不是很简单的思路，仅仅靠保存过程中的一些值就能很简单的利用循环就可以实现了，没必要用递归反复计算进行实现。\n\n想要计算得到第 n 个值的多少？那么，以下几点是我们必须要做到的\n\n​\ta. **定义一个一维数组**   --->  一般用dp来命名\n\n​\tb. **动态方程的设定**   --->  题中的F(N) = F(N - 1) + F(N - 2)\n\n​\tc. **初始化数值**   --->  F(0) = 0和F(1) = 1\n\n上述的 a、b 和 c 点就是动态规划思想的几个核心要素\n\n下面来看下要实现的代码（代码中，用dp来代替上面的F()）\n\n```python\nclass Solution(object):\n    def fib(self, N):\n        if N == 0:\n            return 0\n        dp = [0 for _ in range(N+1)] # 1定义dp[i]保存第i个计算得到的数值\n        dp[0] = 0   \t# 2初始化\n        dp[1] = 1\t\t\t# 2初始化\n        for i in range(2, N+1):\t# 3动态方程实现，由于0和1都实现了赋值，现在需要从第2个位置开始赋值\n            dp[i] = dp[i - 1] + dp[i - 2]\n       \n        print dp\t\t # 记录计算过程中的次数，与上述递归形成对比\n        return dp[N]\n```\n\n输出:\n\n```python\n[0, 1, 1, 2, 3]\n3\n```\n\n以上，最重要的就是1 2 3 点，而执行过程参照**输出**对比递归算法，计算少了很多，同样的计算只计算了一次。\n\n> 时间复杂度：O(N)\n>\n> 空间复杂度：O(N)\n\n介绍了上面的内容了，此处来条分割线吧，针对上述的 **递归 vs. DP**\n\n------\n\n既然动态规划的方案也介绍了，下面咱们再仔细看看，是否有优化的空间，毕竟对于一个算法方案的设计，都有找到其优化点，无论是时间还是空间的效率都想要达到一个理想的值。\n\n#### 3. 动态规划 + 优化\n\n咱们看下这张图解，发现每个计算节点都**只与前两个项有关系**。换句话说，咱们只要保存两个值就好了，计算新的节点值的时候，把新的值赋值给前两个值的第一个就好了\n\n![image-20230605115233956](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115233956.png)\n\n话说只要两个值，现在定义两个变量 dp1 和 dp2。那么，现在咱们一步一步模拟一下：\n\na. 初始化值 : F(0) = 0, F(1) = 1\n\n\n\n![image-20230605115254829](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115254829.png)\n\nb. 想要计算得到F(2)， 那么F(2) = F(0) + F(1) --> 保存 F(2)\n\n 顺带将F(1)赋值给dp1， f(2)赋值给dp2\n\n![image-20230605115319902](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115319902.png)\n\nc. 想要计算得到F(3)， 那么F(3) = F(2) + F(1) --> 保存 F(3)\n\n 顺带将F(2)赋值给dp1， F(3)赋值给dp2\n\n![image-20230605115336720](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115336720.png)\n\nd. 想要计算得到F(3)， 那么F(4) = F(3) + F(2) --> 保存 F(4)\n\n 顺带将F(3)赋值给dp1， F(4)赋值给dp2\n\n![image-20230605115356096](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115356096.png)\n\n至此为止，整个过程仅仅用到了两个变量来存储过程中产生的值，也就之前没有优化的空间效率得到了优化\n\n咱们把代码也贴一下吧，供参考\n\n```python\nclass Solution(object):\n    def fib_dp1(self, N):\n        if N == 0: return 0\n\n        dp1, dp2 = 0, 1\n\n        for i in range(2, N+1):\n            dp1 = dp1 + dp2\n            dp1, dp2 = dp2, dp1\n\n        return dp2\n```\n\n看起来是不是更加简洁了。\n\n三点说明：**1.定义dp数组 2.动态方程 3.初始化数值**\n\n这也说明了为什么用**斐波那契数列**来引入**动态规划**的，因为斐波那契数列本身就明确的告诉你动态方程是什么，初始化的值是什么，所以好好的体会这种思想，尤其是从传统递归 -> 动态规划的思想解决，再到优化的方面，很值得深思。\n\n那接下来，咱们就找几个有代表性的栗子来尝尝鲜\n\n![image-20230605115624586](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115624586.png)\n\n## 二、动态规划四大解题步骤处理问题\n\n上面用斐波那契数列问题，引出了下面的几点，在这里再详细赘述一下\n\n在后面的案例中将会尽量严格按照这几个步骤进行解决问题\n\n> 步骤一：定义dp数组的含义\n>\n> 步骤二：定义状态转移方程\n>\n> 步骤三：初始化过程转移的初始值\n>\n> 步骤四：可优化点(可选)\n\n#### 步骤一：定义dp数组的含义\n\n绝大部分情况下，我们需要定义一维数组或者二维数组进行存储在计算过程中产生的最优值，这里为什么是最优值呢？是因为在解决问题过程中，一般情况dp数组用来保存**从开始到当前情况的最优值**，故而保存的是截止到目前的最优值，避免重复计算（这里看起来思维有混乱的同学们，想想上面Fibonacci 递归解法和动态规划的对比）\n\n**所以，dp无论是一维的还是二维的，要想清楚代表什么，一般来说代表的是截止到目前情况下的最优值**\n\n#### 步骤二：定义状态转移方程\n\n什么是动态转移方程？ 如果有一个问题摆在我们面前，然后这个问题在解决的过程中，会发现有很多的重叠的子问题，重叠子结构，而通过这些子问题的解决，最终将会把该问题进行解决\n\n通俗来说，在解决问题过程中，能够发现一个不断解决子问题的动态规律，比如说Fibonacci中的F(N) = F(N - 1) + F(N - 2)，而在其他的可以用动态规划解决的问题中，需要我们自己去发现这样的内在规律。这个是最难的也是最终于要的，只要这一步解决了，接下来我们解决这个问题基本就没问题了.\n\n#### 步骤三：初始化过程转移的初始值\n\n顺着步骤二的思路来，既然动态方程定义好了，是不是需要一个**支点**来撬动它进行不断的计算下去。\n\n那么，这个**支点**就需要我们来初始定义，将动态方程激活，进行计算。举例来说Fibonacci中的F(0) = 0和F(1) = 1，有了这两个值，它的动态方程F(N) = F(N - 1) + F(N - 2)就可以进行下去了\n\n这个就是我们要想好的初始值，实际问题可能还需要我们想想清楚.\n\n#### 步骤四：可优化点(可选)\n\n可优化的这里，最重要的会是dp数组这块，也会有不同问题不同的优化点\n\n在例子中，我们会进行不同的优化.\n\n总之一点，建议大家动笔多画画图，很多细节慢慢就会出现了.\n\n### 案例一：打家劫舍I 「来自leetcode198」\n\n你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n\n给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。\n\n**示例 1:**\n\n```题目\n代码输入: [1,2,3,1]\n输出: 4\n解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n     偷窃到的最高金额 = 1 + 3 = 4 。\n```\n\n**示例2：**\n\n```python\n输入: [2,7,9,3,1]\n输出: 12\n解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。\n     偷窃到的最高金额 = 2 + 9 + 1 = 12 。\n```\n\n把经典案例系列拆分开讨论下吧，咱们首先将「打家劫舍I」来看看\n\n该题可以用动态规划的思想来解决的原因是，在小偷不断偷取的过程中，始终想要偷得的物品价值最大，最优，每一步骤都与之前的偷取情况有关系，而且每一步都要考虑是否能偷，是否会带来最大利益，这就使得我们可以用动态规划的思想来解决问题。  然后严格按照四步骤进行解题.\n\n##### 步骤一： 定义dp数组的含义\n\n​\t之前提到的，dp数组存储的值一般代表截止目前的最优值，在该题目中，我们定义：\n\n​\t**dp[i] 代表到达第 i 个房屋偷得的最高金额，也就是当前最大子序和**\n\n​\t无论房屋有几间，最后我们取到dp数组的最后一个值就求得小偷偷得的最高金额\n\n##### 步骤二：找出关系元素间的动态方程\n\n​\t动态规划解决的问题，一般来说就是解决最优子问题，“自顶向下” 的去不断的计算每一步骤的最优值。\n\n​\t也就是想要得到dp[i]的值，我们必须要知道dp[i-1]，dp[i-2]，dp[i-3] ... 的每一步的最优值，在这个状态转移的过程中，我们必须要想清楚怎么去定义关系式。然而在每一步的计算中，都与前几项有关系，这个固定的关系就是我们要寻找的重叠子问题，也同样是接下来要详细定义的动态方程\n\n​\t该题目中，当小偷到达第 i 个屋子的时候，他的选择有两种：一种是偷，另外一种是不偷， 然后选择价值较大者\n\n​\ta. 偷的情况计算：必然是dp[3] = nums[2] + dp[1]，如果是偷取该屋子的话，相邻屋子是不能偷取的，因此，通项式子是：dp[i] =  nums[i-1] + dp[i-2]\n\n![image-20230605123128436](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605123128436.png)\n\n b. 不偷的情况计算：必然是dp[3] = dp[2]，如果是不偷取该屋子的话，相邻屋子就是其最优值，因此，通项式子是：dp[i] = dp[i-1]\n\n![image-20230605123322989](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605123322989.png)\n\n​\t最后，要想偷得最高金额，那么，必须选取在偷与不偷之间的最大值作为我们是否选取的关键点。即：\n\n​\t**动态方程:** dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])\n\n##### 步骤三：初始化数值设定\n\n​\t初始化: 给没有房子时，dp一个位置，即：dp[0] \t\t1 当size=0时，没有房子，dp[0]=0； \t\t2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]\n\n那么，按照这个思路来整理一下代码：\n\n```python\nclass Solution(object):\n\n    def rob(self, nums):\n      # 1.dp[i] 代表当前最大子序和\n      # 2.动态方程: dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])\n      # 3.初始化: 给没有房子时，dp一个位置，即：dp[0]\n      #   3.1 当size=0时，没有房子，dp[0]=0；\n      #   3.2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]\n      size = len(nums)\n      if size == 0:\n        return 0\n\n      dp = [0 for _ in range(size+1)]\n\n      dp[0] = 0\n      dp[1] = nums[0]\n      for i in range(2, size+1):\n        dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])\n        return dp[size]\n```\n\n> 时间复杂度：O(N)\n>\n> 空间复杂度：O(N)\n\n那下面想想看有没有可优化的地方，尽量的释放一部分计算机资源\n\n##### 步骤四：优化\n\n​\t从 dp[i] = max(dp[i-1], nums[i-1]+dp[i-2]) 关系来看，每一次动态变化，都与前两次状态有关系（dp[i-1], dp[i-2])，而前面的一些值是没有必要留存的.\n\n​\t所以，dp只需要定义两个变量就好，将空间复杂度降为O(1)\n\n```python\nclass Solution(object):\n\n    def rob_o(self, nums):\n        # 依照上面的思路，其实我们用到的数据永远都是dp的dp[i-1]和dp[i-2]两个变量\n        # 因此，我们可以使用两个变量来存放前两个状态值\n        # 空间使用由O(N) -> O(1)\n\n        size = len(nums)\n        if size == 0:\n            return 0\n\n        dp1 = 0\n        dp2 = nums[0]\n        for i in range(2, size+1):\n            dp1 = max(dp2, nums[i-1]+dp1)\n            dp1, dp2 = dp2, dp1\n        return dp2\n```\n\n> 时间复杂度：O(N)\n>\n> 空间复杂度：O(1)\n\n说完《打家劫舍I 》，中间穿插另外一道题目，利用二维dp来解决的一个问题。\n\n最后再说说《打家劫舍II 》和《打家劫舍III》，把这一系列的**打家劫舍**问题搞明白了，相信你对动态规划有一个较为深刻的入门体验\n\n### 案例二：不同路径「来自leetcode62」\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n\n问总共有多少条不同的路径？\n\n![image-20230605130822926](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605130822926.png)\n\n**示例 1:**\n\n```python\n输入: m = 3, n = 2\n输出: 3\n解释:\n从左上角开始，总共有 3 条路径可以到达右下角。\n\n1. 向右 -> 向右 -> 向下\n2. 向右 -> 向下 -> 向右\n3. 向下 -> 向右 -> 向右\n```\n\n**示例 2:**\n\n```python\npython复制代码输入: m = 7, n = 3\n输出: 28\n```\n\n*提示：*\n\n1 <= m, n <= 100 题目数据保证答案小于等于 2 * 10 ^ 9\n\n下面依然按照四个步骤来进行讨论：\n\n##### 步骤一：定义dp数组的含义\n\n​\t当前这道题是从左上角到右下角的，题目中规定只能向右或者向下走，所以我们必须要定义一个二维数组来保存计算过程中的值。所以，这块定义：\n\n​\t**dp[i][j]: 代表到达位置 (i, j) 的所有路径的总数**\n\n​\t即：机器人从左上角到右下角所有路径的总和，dp中每个位置的值代表行走到达 (i, j) 每个位置的总共的路径数\n\n##### 步骤二：找出关系元素间的动态方程\n\n​\t由于题目中规定只能向右或者向下走，所以在机器人行进的时候，只能是向右或向下.\n\n​\t那么，分别讨论下两种情况，想要到达位置(i, j)，可以从位置(i-1, j)或者(i, j-1)出发到达。因此，到达位置(i, j) 的总的路径数一定是 **到达位置(i-1, j)路径数** + **到达位置(i, j-1)路径数**。那么，现在可以定义动态方程：\n\n​\t**动态方程：dp[i][j] = dp[i-1][j] + dp[i][j-1]**\n\n##### 步骤三：初始化数值设定\n\n​\t很明显，在机器人走第 0 行，第 0 列的时候，无论怎么走，都只有 1 种走法。\n\n​\t因此，初始化值的设定，一定是 dp[0..m][1] 或者 dp[1][0..n] 都等于1\n\n​\t因此初始值如下：\n\n​\t**dp[0] [0….n-1] = 1;**  // 机器人一直向右走，第 0 列统统为 1\n\n​\t**dp[0…m-1] [0] = 1;**  // 机器人一直向下走，第 0 列统统为 1\n\n​\t现在，按照这个思路来整理一下代码\n\n```python\nclass Solution(object):\n\n    def uniquePaths1(self, m, n):\n\n        # 初始化表格，由于初始化0行 0列都为1。那么，先全部置为1\n        dp = [[1 for _ in range(m)] for _ in range(n)]\n\n        for i in range(1, n):\n            for j in range(1, m):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n        return dp[n-1][m-1]\n```\n\n上述代码中由于dp[[0..m][1] ][1]或者 dp[1][0..n] 都等于1，所以在定义二维数组dp时候，统统赋初始值为 1\n\n然后从位置(1, 1)开始计算每个位置的总路径数\n\n> 时间复杂度：O(M*N)\n>\n> 空间复杂度：O(M*N)\n\n既然到这里了，下面再想想看有没有可优化的地方\n\n##### 步骤四：优化\n\n​\t可以依照前面的解决的思路，应该也可以从空间上进行一定的优化\n\n​\t参照前面的案例，之前定义的是一维数组dp，优化点是每一步骤都只与前面的两个计算好的数值有关系，然后优化点就是将dp[N] -> dp1和dp2，空间复杂度由 O(N) -> O(1)，如果是很大规模的数据计算的话，空间效率提升了不少.\n\n​\t现在这个例子中的动态方程是**dp[i][j] = dp[i-1][j] + dp[i][j-1]**，很明显，每一步骤中的状态值只与左边相邻的值和上面的值相关。举例（为了方便，用 3*4 来举例）：\n\n![image-20230605131507215](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131507215.png)\n\n​\t这个完整的图片描述中，机器人从左上角的位置(1, 1)开始移动，逐渐每一步都根据动态方程进行前进，明显的可以看出机器人每移动一格，所得到的路径总和只与它的上方和左方数值有关系。也就是我们会发现，机器人移动到第2行的时候，第0行数据完全是没有用的状态。\n\n​\t因此，这个优化点就出来了，在算法设计的时候，dp仅仅定义2行N列的数组就ok了，省去了m-2行的空间开销。这个代码如果大家想明白了请自行设计出来，自己写出来一定会有更加深刻的理解，再强调：多思考，形成潜移默化的思维方式.\n\n​\t看完这个步骤之后，是不是很明显的优化点，为什么上面没有给出大家代码呢？是因为我看到貌似可以继续优化的点（粘住空间优化项了哈哈哈），那就继续在空间开销上做文章。\n\n​\t**引导：**根据上述咱们的优化方案，说道 \"机器人移动到第2行的时候，第0行数据完全是没有用的状态\"，其实当前聪明的读者你想想，再看看，下面的图中（从上图截取过来）。 其实，不仅仅是第 0 行完全没用了，而且在第2 行做移动的时候，移动到位置(i, j)的时候，计算好位置(i, j)，那么接下来，位置(i-1, j)的数据也就没用了。换句话说，边走，第 1 行开始的某些数据也就没用了，还在占着空间\n\n​\t**这块大家一定多想想，多理解，多画图**\n\n\n\n![image-20230605131650290](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131650290.png)\n\n下面按照这种思路，看下图的步骤，也画好了用一维数组进行解决问题，也画出来每一步骤与上图的类比过程：\n\n![image-20230605131721361](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131721361.png)\n\n在这里，有犯困的同学可以自己动手画一画，理解一下，个人感觉是一个很好的思维扩展\n\n接下来，就按照这样的思路进行代码实现，会发现码起来很简单\n\n```python\nclass Solution(object):\n\n    def uniquePaths2(self, m, n):\n        if m > n:\n            m, n = n, m\n\n        dp = [1 for _ in range(m)]\n\n        for i in range(1, n):\n            for j in range(1, m):\n                dp[j] = dp[j] + dp[j-1]\n\n        return dp[m-1]\n```\n\n> 时间复杂度：O(m*n)\n>\n> 空间复杂度：O(min(m ,n))\n\n是不是从思维方面简单干净了许多\n\n搞清楚上面的栗子之后呢，我们将上面的例题进行一个简单的难度增加，说白了，就是在路上打几个阻碍点\n\n来看:\n\n### 案例三：不同路径II 「来自leetcode63」\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n\n现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？\n\n![image-20230605131800138](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131800138.png)\n\n> 说明：m 和 n 的值均不超过 100。\n\n**示例 1:**\n\n```python\n代码输入:\n[\n  [0,0,0],\n  [0,1,0],\n  [0,0,0]\n]\n输出: 2\n解释:\n3x3 网格的正中间有一个障碍物。\n从左上角到右下角一共有 2 条不同的路径：\n\n1. 向右 -> 向右 -> 向下 -> 向下\n2. 向下 -> 向下 -> 向右 -> 向右\n```\n\n**咱们先看一下题中的两个关键点：** 关键点1：只能向右或者向下 关键点2：有障碍物为1， 无障碍物为0\n\n根据 关键点1 和 关键点2 依然按照四个步骤来进行讨论：\n\n##### 步骤一：定义dp数组的含义\n\n这个题目中定义的dp数组是和上一个例题中定义的dp数组的含义是相同的，但由于该题中已经定义有数组obstacleGrid，可以直接利用，无需额外开辟空间 那么，就利用obstacleGrid作为动态规划中存储计算过程中的最优值\n\n##### 步骤二：找出关系元素间的动态方程\n\n参照上一题目，规定动态方程: obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1] 由于机器人在移动过程中有障碍物，那么，对上面动态方程加一些限制条件 a.若当前 obstacleGrid[i][j] 为0。那么，直接计算动态方程下的计算过程 b.若当前 obstacleGrid[i][j] 不为0。那么，直接置该位置的值为0\n\n所以，在进行动态方程遍历的时候，先进行 obstacleGrid[i][j]的判断，再进行动态方程的计算执行\n\n##### 步骤三：初始化数值设定\n\n​\t相比于上一题目，相似的是，在机器人走第 0 行，第 0 列的时候，无论怎么走，都只有 1 种走法 \t但由于有障碍物，那走到障碍物的时候，后面都是走不下去的（下图用第一行来举例）。\n\n![image-20230605131926886](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131926886.png)\n\n​\t所以，初始化第 0 行，第 0 列的时候，障碍物 1 后面的都是不可达的。所以，初始化行和列的逻辑表达：\n\n​\t**该位置是否可达=前一个位置的状态and该位置能否可达 得到能否到达这个位置**\n\n​\t只有前一个位置为1（可达，只有1种方式） ，当前位置为0（无障碍物）这种情况才能到达该位置，然后为该位置设 1 （可达，只有1种方式）\n\n```python\n# 0 行初始化表达式: \nobstacleGrid[0][row] = int(obstacleGrid[0][row] == 0 and obstacleGrid[0][row-1] == 1)\n# 0 列初始化表达式: \nobstacleGrid[clo][0] = int(obstacleGrid[clo][0] == 0 and obstacleGrid[clo-1][0] == 1)\n```\n\n这些都准备就绪之后，按照相关思路进行编码\n\n```python\nclass Solution(object):\n\n    def uniquePathsWithObstacles1(self, obstacleGrid):\n      \t# 行列长度\n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n\n        # 如果在位置(0, 0)，哪里都去不了，直接返回0\n        if obstacleGrid[0][0] == 1:\n            return 0\n\n        # 否则，位置(0, 0)可以到达\n        obstacleGrid[0][0] = 1\n\n        # 初始化 0 列\n        for clo in range(1, m):\n            obstacleGrid[clo][0] = int(obstacleGrid[clo][0] == 0 and obstacleGrid[clo-1][0] == 1)\n\n        # 初始化 0 行\n        for row in range(1, n):\n            obstacleGrid[0][row] = int(obstacleGrid[0][row] == 0 and obstacleGrid[0][row-1] == 1)\n\n        # 从位置(1, 1)根据动态方程开始计算\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 0:\n                    obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1]\n                else:\n                    obstacleGrid[i][j] = 0\n\n        return obstacleGrid[m-1][n-1]\n```\n\n> 时间复杂度: O(mxn)\n>\n> 空间复杂度: O(1)\n\n##### 步骤四：优化\n\n​\t这块的优化先不谈了，这里基本没有什么优化点，之前都是由于自己要开辟内存空间，通过空间的优化来进行，而本题是在给定的数组中进行操作的\n\n有了这几个案例的基础之后，咱们后面把经典的《打家劫舍》系列剩下的两个题目讨论完，就先告一段落，后面也希望以不同的方式与大家多多交流，互相学习\n\n如果有读者看着累了，可以先保存，收藏下来，待消化了前面的内容，方便再回来看看。\n\n### 案例四：打家劫舍II 「来自leetcode213」\n\n你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n\n给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。\n\n**示例 1:**\n\n```python\npython复制代码输入: [2,3,2]\n输出: 3\n解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。\n```\n\n**示例 2:**\n\n```python\npython复制代码输入: [1,2,3,1]\n输出: 4\n解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。\n     偷窃到的最高金额 = 1 + 3 = 4 。\n```\n\n与《打家劫舍I》不同的是，《打家劫舍I》的屋子是线性的，而《打家劫舍II》是环状的，所以要考虑的点会增加一些，因为首位相连接的情况，咱们分为下面三种情况进行设定：\n\na. 不偷首偷尾\n\nb. 偷首不偷尾\n\nc. 首位都不偷 显然，c 种方式损失太大，不会获得最高的金额，故选取 a 和 b。 那么，下面分为两种情况，分别计算不包含首和不包含尾这两种情况来判断小偷哪种方式偷取的金额最高。\n\n下面依然按照之前的四个步骤来进行分析\n\n##### 步骤一： 定义dp数组的含义\n\n​\tdp[i] 代表的含义和之前一致，dp数组存储的值一般代表截止目前的最优值\n\n​\t所以，**dp[i] 代表到达第 i 个房屋偷得的最高金额，也就是当前最大子序和**\n\n​\t但是最后会讨论**不包含首**和**不包含尾**这两种情况下得到的dp数组的最后一位，然后获取其中较大者，就是我们要取得的最高金额\n\n##### 步骤二：找出关系元素间的动态方程\n\n​\t动态方程可参照《打家劫舍I》，有很详细的图解过程，该例子动态方程的变化和之前是完全一致的：\n\n​\t**dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])**\n\n##### 步骤三：初始化设定\n\n​\t初始化: 给没有房子时，dp一个位置，即：dp[0] \t\ta. 当size=0时，没有房子，小偷没办法偷：dp[0]=0； \t\tb. 当size=1时，有一间房子，只要偷即可：dp[1]=nums[0]\n\n![image-20230605150914733](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605150914733.png)\n\n​\t由于屋子首位相连接，所以在计算时候，直接分为两种情况。第一种略过第一个屋子，第二种略过第二个屋子，这样得到的两个数组结果。最后只要比较最后一位数值的大小就ok了。解决！\n\n该例子步骤三之后，感兴趣的同学可以自己写一下代码，和《打家劫舍I》的代码很类似，后面我写了优化后的代码，可能会更加的明白怎么写。咱们直接到步骤四，有了上面的案例，直接来看看优化后的方案:\n\n\n\n##### 步骤四：优化\n\n​\t同样从 dp[i] = max(dp[i-1], nums[i-1]+dp[i-2]) 关系来看，每一次动态变化，都与前两次状态有关系（dp[i-1], dp[i-2])，而前面的一些值是没有必要留存的，只要保存两个变量来保存过程最优值就好.\n\n​\t代码中有详细的注释：\n\n    class Solution(object):\n    def rob(self, nums):\n        # 点睛：与打家劫舍I的区别是屋子围成了一个环\n        #   那么，很明显可以分为三种情况：\n        #   1. 首位都不偷\n        #   2. 偷首不偷尾\n        #   3. 不偷首偷尾\n        # 显然，第1种方式损失太大，选取2、3。\n        # 那么，分为两种情况，分别计算不包含首和不包含尾这两种情况来判断哪个大哪个小\n    \n        # 1.dp[i] 代表当前最大子序和\n        # 2.动态方程: dp[i] = max(dp[i-1] and , nums[i-1]+dp[i-2])\n        # 3.初始化: 给没有房子时，dp一个位置，即：dp[0]\n        #   3.1 当size=0时，没有房子，dp[0]=0；\n        #   3.2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]\n    \n        # 依照《打家劫舍I》的优化方案进行计算\n    \n        # nums处理，分别切割出去首和去尾的子串\n        nums1 = nums[1:]\n        nums2 = nums[:-1]\n    \n        size = len(nums)\n        if size == 0:\n            return 0\n        if size == 1:\n            return nums[0]\n    \n        def handle(size, nums):\n            dp1 = 0\n            dp2 = nums[0]\n            for i in range(2, size+1):\n                dp1 = max(dp2, nums[i-1]+dp1)\n                dp1, dp2 = dp2, dp1\n            return dp2\n    \n        res1 = handle(size-1, nums1)\n        res2 = handle(size-1, nums2)\n    \n        return max(res1, res2)\n\n> 时间复杂度：O(N)\n>\n> 空间复杂度：O(1)\n\n再看看下面小偷遇到的情况，感叹：即使当小偷，也要步步规划才能拿到最高的金额啊...\n\n### 案例五：打家劫舍III 「来自leetcode337」\n\n在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。\n\n计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。\n\n**示例 1:**\n\n```python\n代码输入: [3,2,3,null,3,null,1]\n\n     3\n\t/ \\\n   2   3\n    \\   \\ \n     3   1\n\n输出: 7 \n解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.\n```\n\n**示例 2:**\n\n```python\n输入: [3,4,5,1,3,null,1]\n\n \t 3\n\t/ \\\n   4   5\n  / \\   \\ \n 1   3   1\n输出: 9\n解释: 小偷一晚能够盗取的最高金额 = 4 + 5 = 9.\n```\n\n题目出的很好，但是立马会给人一种小偷也不是好当的的赶脚...\n\n言归正传，咱们先来说说题目本身\n\n《打家劫舍》的小偷从一维线性到环形，再到二维矩形的屋子？是我想简单了，直接就干到树形了，是不是看着很香，而且很想，看下去，研究研究...\n\n来整理几点思路，再来按照四步走：\n\n1.由于房屋是树状的，因此，我们可以使用遍历树的传统方法进行遍历(前序、中序、后续) 2.简单的思路是，从树低进行往上遍历，拿到最优的打劫值。可以选用后续遍历 3.得到每一节点的最优值，最后选取最优的结果\n\n依然按照三个步骤来进行分析（无优化点）\n\n##### 步骤一： 定义dp数组的含义\n\n​\tdp[i]代表该节点及以下打最多的劫（拿到最多的钱）\n\n##### 步骤二：找出关系元素间的动态方程\n\n​\t根据我们每走到一个节点，都会有两种情况，那就是 **偷(1)** 与 **不偷(0)**。我们分开来讨论：\n\n​\ta. 用 **dp[0]** 代表不偷取该节点到目前为止拿到最多的钱，那么儿子节点偷不偷都ok。\n\n​\t\t所以： **dp[0] = max(left[0], left[1]) + max(right[0], right[1])**\n\n​\tb. 用 **dp[1]** 代表偷了该节点到目前为止拿到最多的钱，则儿子节点都不能被偷。\n\n​\t\t所以：**dp[1] = value + left[0] + right[0]**  (value代表该节点的价值)\n\n​\t有看不懂的地方吗？再紧接着解释一下：\n\n​\t\tleft[0]代表不偷取左孩子拿到最高的金额\n\n​\t\tleft[1]代表偷取左孩子拿到最高的金额\n\n​\t\tright[0]代表不偷取右孩子拿到最高的金额\n\n​\t\tright[1]代表偷取右孩子拿到最高的金额\n\n​\t*如果还有不太懂的话，留言或者私信我联系我，随时骚扰我哈*\n\n##### 步骤三：初始化设定\n\n​\t该例子的初始化比较简单，就是当前树的形状为空的时候，直接返回dp[0, 0]\n\n下面贴出完整代码，其中包含**树的初始化**代码 && 一大堆的注释：\n\n```python\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution():\n    def rob(self, root):\n        # 说明：\n        # 1.由于房屋是树状的，因此，我们可以使用遍历树的传统方法进行遍历(前序、中序、后续)\n        # 2.简单的思路是，从树低进行往上遍历，拿到最优的打劫值。可以选用后续遍历\n        # 3.得到每一节点的最优值，最后选取最优的结果\n\n        # 1.dp[i]代表该节点及以下拿到的最多的钱\n        # 2.动态方程：\n        #   2.1 dp[0]代表不偷该节点拿到最多的钱，则儿子节点偷不偷都ok。dp[0] = max(left[0], left[1]) + max(right[0], right[1])\n        #   2.2 dp[1]代表偷了该节点拿到最多的钱，则儿子节点都不能被偷。dp[1] = var + left[0] + right[0]\n        # 3.初始化：当前树的形状为空的时候，直接返回dp[0, 0]\n        def postTrasval(root):\n            dp = [0, 0]\n            if not root:\n                return dp\n            left = postTrasval(root.left)\n            right = postTrasval(root.right)\n\n            dp[0] = max(left[0], left[1]) + max(right[0], right[1])\n            dp[1] = root.val + left[0] + right[0]\n            return dp\n        dp = postTrasval(root)\n        return max(dp[0], dp[1])\nif __name__ == '__main__':\n    # initial tree structure\n    T = TreeNode(3)\n    T.left = TreeNode(2)\n    T.right = TreeNode(3)\n    T.left.right = TreeNode(3)\n    T.right.right = TreeNode(1)\n    # The solution to the Question\n    s = Solution()\n    print(s.rob(T))\n```\n\n\n\n# 2. 递归\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/js/算法总结.md","raw":"---\ntitle: 算法总结\ntags:\n  - JS\ncategories: 面试\nkeywords: JS\ndescription: 算法总结\ntop_img: 'https://raw.githubusercontent.com/why862555625/images/main/images/00.jpg'\nsticky: 数值越大越靠前\ncover: 'https://raw.githubusercontent.com/why862555625/images/main/images/00.jpg'\ncomments: false评论\nabbrlink: 1213ac56\ndate: 2023-05-31 20:18:34\nupdated: 2023-05-31 20:18:34\n---\n\n\n\n算法总结\n\n<!-- more -->\n\n# 1. 动态规划\n\n#### 传统递归 vs. DP\n\n先用一个被大佬们举例举到烂的🌰，这个栗子很烂，但是真的**很香**：必须着重**强调**.\n\n**《斐波那契（Fibonacci）数列的第n项》**\n\n**举荐理由：**在我自己看来Fibonacci是动态规划设计中的入门级案例，就好比说编程中的“hello world”，大数据中的“word count”.\n\nFibonacci几乎完美的诠释了**动态规划带来的思想和技巧**然而没有任何其他的要考虑的细枝末节，这种很清晰的方法看起来很适合整个的动态规划的思维方式，很适合入门来进行的思考方式.\n\n接下来咱们先来看题目：\n\n```题目\n题目复制代码写一个函数，输入n，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：\n\nF(0) = 0, F(1) = 1\nF(N) = F(N - 1) + F(N - 2), 其中 N > 1.\n斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。\n```\n\n比较一下传统递归解法和动态规划思想下的解决对比\n\n#### 1. 先 递归解决\n\n传统对于这种题目的思考方式会利用递归求解，做起来比较简单，就是不断的去递归调用，看下面代码：\n\n```js\nlet i = 0;\nfunction fib_recur(N){\n    console.log(i)\n    if N <= 1:\n        return N\n    return fib_recur(N-1) + fib_recur(N-2)  # 递归输出  \n}\n```\n\n输出的结果：\n\n```python\nF( 1 ) =  3\nF( 2 ) =  2\nF( 3 ) =  1\nF( 4 ) =  0\nF( 5 ) =  1\nF( 6 ) =  2\nF( 7 ) =  1\nF( 8 ) =  0\n```\n\n**重复计算**\n\n明显可以看到，总计 8 次的计算过程中，相同的计算结果有三对进行了**重复计算**（下图中同色项，不包含灰色），也就是说在递归的过程中，把曾经计算过的项进行了**又一次的重复计算**，这样对于时间效率是比较低的，唯一的好处可能就是代码看起来比较好懂，但是终归不是一个好的算法设计方法。\n\n代码中，在计算N的时候就去递归计算 `fib(N-1) + fib(N-2)`，那么，这种情况下的计算过程中。会是下面图中的一个计算过程。\n\n可以发现，会有相当一部分的重复计算，这样对于时间都是重复的消耗。\n\n> 参考图中相同颜色的项，比如说粉色的重复计算、黄色的重复计算等\n>\n> 注意：递归中没有对空间进行了增加，始终都是同样的长度，仅仅是不断的弹出和压入\n\n![image-20230605114156368](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114156368.png)\n\n为了更好的说明这种重复计算带来时间效率的低下。再比如说，相比上述图中的计算节点，再增加一个节点的计算，增加计算F(5)，那么由于递归的计算方式，会有更多的项（下图中线框中部分）进行了重复的计算。在计算`F(5)`的时候，会递归调用`F(4)`和`F(3)`，而在下图中，计算`F(4)`的时候，又会完整的去计算`F(3)`。这样，如果N很大的话，会有更大的时间消耗.\n\n这样，这棵树的规模进行进行成倍增加，时间复杂度很明显的进行了成倍的扩张。对于时间上来说是很恐怖的.\n\n时间复杂度带来的低效率严重超过了代码的可读性，所以我们可以想办法将**过去计算**过的节点**进行保存**。这样，我们就会用到下面要说的动态规划思想带来的时间上的高效.\n\n![image-20230605114342318](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114342318.png)\n\n> 时间复杂度：o(2**n) ---> 指数级\n>\n> 空间复杂度：o(n)\n\n#### 2. 后 动态规划解决\n\n**大概解释一下字面意思：**\n\n**动态规划：我们不直接去解决问题，而是在每一步解决问题的时候，达到每一步的最优情况。换句话说，就是在每一步解决问题过程中，利用过去的状态**以及**当前状态**的情况而达到一个当前的最优状态.\n\n**规划：在一般解决该类问题的时候，会有一个“填表格”的过程，无论是简单情况下的\\**一维表格**还是复杂一点的**二维表格**，都是以**开辟空间换时间**的思想，以争取最佳的时间效率. （保存过程中间值，方便后续直接使用）.\n\n**动态：**用上面的案例来说，递归解决过程中的每一步都会从基本问题不断的“自顶向下”去求解，在每一步骤中，会有相同的计算逻辑进行了重复的计算。相比于递归思想，动态规划思想增加了对历史上计算结果的保存，逐步记录下中间的计算结果，在每一步求得最优值.\n\n因此，动态规划可以避免重复计算，达到了时间上的最优，从O(2N)O(2^N)O(2N)指数级变为O(N)O(N)O(N)常数级别，相较于开辟的一段内存空间存放中间过程值的开销，是非常值得的.\n\n**那么，接下来咱们依照动态规划的思路进行对Fibonacci进行下解决**\n\n依据题中的规则：\n\nF(0) = 0, F(1) = 1\n\nF(N) = F(N - 1) + F(N - 2),  when N > 1\n\n那么，👇👇F(N) 的值只与他的前两个状态有关系👇👇\n\na. 初始化值 : F(0) = 0, F(1) = 1 b. 想要计算得到F(2)， 那么F(2) = F(0) + F(1)   -->  保存 F(2) c. 想要计算得到F(3)， 那么F(3) = F(2) + F(1)   -->  保存 F(3) d. 想要计算得到F(3)， 那么F(4) = F(3) + F(2)   -->  保存 F(4)\n\n利用动态规划思想，以一维数组辅助实现的Fibonacci，看下图\n\n![image-20230605114740415](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114740415.png)\n\n是不是很简单的思路，仅仅靠保存过程中的一些值就能很简单的利用循环就可以实现了，没必要用递归反复计算进行实现。\n\n想要计算得到第 n 个值的多少？那么，以下几点是我们必须要做到的\n\n​\ta. **定义一个一维数组**   --->  一般用dp来命名\n\n​\tb. **动态方程的设定**   --->  题中的F(N) = F(N - 1) + F(N - 2)\n\n​\tc. **初始化数值**   --->  F(0) = 0和F(1) = 1\n\n上述的 a、b 和 c 点就是动态规划思想的几个核心要素\n\n下面来看下要实现的代码（代码中，用dp来代替上面的F()）\n\n```python\nclass Solution(object):\n    def fib(self, N):\n        if N == 0:\n            return 0\n        dp = [0 for _ in range(N+1)] # 1定义dp[i]保存第i个计算得到的数值\n        dp[0] = 0   \t# 2初始化\n        dp[1] = 1\t\t\t# 2初始化\n        for i in range(2, N+1):\t# 3动态方程实现，由于0和1都实现了赋值，现在需要从第2个位置开始赋值\n            dp[i] = dp[i - 1] + dp[i - 2]\n       \n        print dp\t\t # 记录计算过程中的次数，与上述递归形成对比\n        return dp[N]\n```\n\n输出:\n\n```python\n[0, 1, 1, 2, 3]\n3\n```\n\n以上，最重要的就是1 2 3 点，而执行过程参照**输出**对比递归算法，计算少了很多，同样的计算只计算了一次。\n\n> 时间复杂度：O(N)\n>\n> 空间复杂度：O(N)\n\n介绍了上面的内容了，此处来条分割线吧，针对上述的 **递归 vs. DP**\n\n------\n\n既然动态规划的方案也介绍了，下面咱们再仔细看看，是否有优化的空间，毕竟对于一个算法方案的设计，都有找到其优化点，无论是时间还是空间的效率都想要达到一个理想的值。\n\n#### 3. 动态规划 + 优化\n\n咱们看下这张图解，发现每个计算节点都**只与前两个项有关系**。换句话说，咱们只要保存两个值就好了，计算新的节点值的时候，把新的值赋值给前两个值的第一个就好了\n\n![image-20230605115233956](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115233956.png)\n\n话说只要两个值，现在定义两个变量 dp1 和 dp2。那么，现在咱们一步一步模拟一下：\n\na. 初始化值 : F(0) = 0, F(1) = 1\n\n\n\n![image-20230605115254829](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115254829.png)\n\nb. 想要计算得到F(2)， 那么F(2) = F(0) + F(1) --> 保存 F(2)\n\n 顺带将F(1)赋值给dp1， f(2)赋值给dp2\n\n![image-20230605115319902](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115319902.png)\n\nc. 想要计算得到F(3)， 那么F(3) = F(2) + F(1) --> 保存 F(3)\n\n 顺带将F(2)赋值给dp1， F(3)赋值给dp2\n\n![image-20230605115336720](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115336720.png)\n\nd. 想要计算得到F(3)， 那么F(4) = F(3) + F(2) --> 保存 F(4)\n\n 顺带将F(3)赋值给dp1， F(4)赋值给dp2\n\n![image-20230605115356096](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115356096.png)\n\n至此为止，整个过程仅仅用到了两个变量来存储过程中产生的值，也就之前没有优化的空间效率得到了优化\n\n咱们把代码也贴一下吧，供参考\n\n```python\nclass Solution(object):\n    def fib_dp1(self, N):\n        if N == 0: return 0\n\n        dp1, dp2 = 0, 1\n\n        for i in range(2, N+1):\n            dp1 = dp1 + dp2\n            dp1, dp2 = dp2, dp1\n\n        return dp2\n```\n\n看起来是不是更加简洁了。\n\n三点说明：**1.定义dp数组 2.动态方程 3.初始化数值**\n\n这也说明了为什么用**斐波那契数列**来引入**动态规划**的，因为斐波那契数列本身就明确的告诉你动态方程是什么，初始化的值是什么，所以好好的体会这种思想，尤其是从传统递归 -> 动态规划的思想解决，再到优化的方面，很值得深思。\n\n那接下来，咱们就找几个有代表性的栗子来尝尝鲜\n\n![image-20230605115624586](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115624586.png)\n\n## 二、动态规划四大解题步骤处理问题\n\n上面用斐波那契数列问题，引出了下面的几点，在这里再详细赘述一下\n\n在后面的案例中将会尽量严格按照这几个步骤进行解决问题\n\n> 步骤一：定义dp数组的含义\n>\n> 步骤二：定义状态转移方程\n>\n> 步骤三：初始化过程转移的初始值\n>\n> 步骤四：可优化点(可选)\n\n#### 步骤一：定义dp数组的含义\n\n绝大部分情况下，我们需要定义一维数组或者二维数组进行存储在计算过程中产生的最优值，这里为什么是最优值呢？是因为在解决问题过程中，一般情况dp数组用来保存**从开始到当前情况的最优值**，故而保存的是截止到目前的最优值，避免重复计算（这里看起来思维有混乱的同学们，想想上面Fibonacci 递归解法和动态规划的对比）\n\n**所以，dp无论是一维的还是二维的，要想清楚代表什么，一般来说代表的是截止到目前情况下的最优值**\n\n#### 步骤二：定义状态转移方程\n\n什么是动态转移方程？ 如果有一个问题摆在我们面前，然后这个问题在解决的过程中，会发现有很多的重叠的子问题，重叠子结构，而通过这些子问题的解决，最终将会把该问题进行解决\n\n通俗来说，在解决问题过程中，能够发现一个不断解决子问题的动态规律，比如说Fibonacci中的F(N) = F(N - 1) + F(N - 2)，而在其他的可以用动态规划解决的问题中，需要我们自己去发现这样的内在规律。这个是最难的也是最终于要的，只要这一步解决了，接下来我们解决这个问题基本就没问题了.\n\n#### 步骤三：初始化过程转移的初始值\n\n顺着步骤二的思路来，既然动态方程定义好了，是不是需要一个**支点**来撬动它进行不断的计算下去。\n\n那么，这个**支点**就需要我们来初始定义，将动态方程激活，进行计算。举例来说Fibonacci中的F(0) = 0和F(1) = 1，有了这两个值，它的动态方程F(N) = F(N - 1) + F(N - 2)就可以进行下去了\n\n这个就是我们要想好的初始值，实际问题可能还需要我们想想清楚.\n\n#### 步骤四：可优化点(可选)\n\n可优化的这里，最重要的会是dp数组这块，也会有不同问题不同的优化点\n\n在例子中，我们会进行不同的优化.\n\n总之一点，建议大家动笔多画画图，很多细节慢慢就会出现了.\n\n### 案例一：打家劫舍I 「来自leetcode198」\n\n你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n\n给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。\n\n**示例 1:**\n\n```题目\n代码输入: [1,2,3,1]\n输出: 4\n解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n     偷窃到的最高金额 = 1 + 3 = 4 。\n```\n\n**示例2：**\n\n```python\n输入: [2,7,9,3,1]\n输出: 12\n解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。\n     偷窃到的最高金额 = 2 + 9 + 1 = 12 。\n```\n\n把经典案例系列拆分开讨论下吧，咱们首先将「打家劫舍I」来看看\n\n该题可以用动态规划的思想来解决的原因是，在小偷不断偷取的过程中，始终想要偷得的物品价值最大，最优，每一步骤都与之前的偷取情况有关系，而且每一步都要考虑是否能偷，是否会带来最大利益，这就使得我们可以用动态规划的思想来解决问题。  然后严格按照四步骤进行解题.\n\n##### 步骤一： 定义dp数组的含义\n\n​\t之前提到的，dp数组存储的值一般代表截止目前的最优值，在该题目中，我们定义：\n\n​\t**dp[i] 代表到达第 i 个房屋偷得的最高金额，也就是当前最大子序和**\n\n​\t无论房屋有几间，最后我们取到dp数组的最后一个值就求得小偷偷得的最高金额\n\n##### 步骤二：找出关系元素间的动态方程\n\n​\t动态规划解决的问题，一般来说就是解决最优子问题，“自顶向下” 的去不断的计算每一步骤的最优值。\n\n​\t也就是想要得到dp[i]的值，我们必须要知道dp[i-1]，dp[i-2]，dp[i-3] ... 的每一步的最优值，在这个状态转移的过程中，我们必须要想清楚怎么去定义关系式。然而在每一步的计算中，都与前几项有关系，这个固定的关系就是我们要寻找的重叠子问题，也同样是接下来要详细定义的动态方程\n\n​\t该题目中，当小偷到达第 i 个屋子的时候，他的选择有两种：一种是偷，另外一种是不偷， 然后选择价值较大者\n\n​\ta. 偷的情况计算：必然是dp[3] = nums[2] + dp[1]，如果是偷取该屋子的话，相邻屋子是不能偷取的，因此，通项式子是：dp[i] =  nums[i-1] + dp[i-2]\n\n![image-20230605123128436](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605123128436.png)\n\n b. 不偷的情况计算：必然是dp[3] = dp[2]，如果是不偷取该屋子的话，相邻屋子就是其最优值，因此，通项式子是：dp[i] = dp[i-1]\n\n![image-20230605123322989](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605123322989.png)\n\n​\t最后，要想偷得最高金额，那么，必须选取在偷与不偷之间的最大值作为我们是否选取的关键点。即：\n\n​\t**动态方程:** dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])\n\n##### 步骤三：初始化数值设定\n\n​\t初始化: 给没有房子时，dp一个位置，即：dp[0] \t\t1 当size=0时，没有房子，dp[0]=0； \t\t2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]\n\n那么，按照这个思路来整理一下代码：\n\n```python\nclass Solution(object):\n\n    def rob(self, nums):\n      # 1.dp[i] 代表当前最大子序和\n      # 2.动态方程: dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])\n      # 3.初始化: 给没有房子时，dp一个位置，即：dp[0]\n      #   3.1 当size=0时，没有房子，dp[0]=0；\n      #   3.2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]\n      size = len(nums)\n      if size == 0:\n        return 0\n\n      dp = [0 for _ in range(size+1)]\n\n      dp[0] = 0\n      dp[1] = nums[0]\n      for i in range(2, size+1):\n        dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])\n        return dp[size]\n```\n\n> 时间复杂度：O(N)\n>\n> 空间复杂度：O(N)\n\n那下面想想看有没有可优化的地方，尽量的释放一部分计算机资源\n\n##### 步骤四：优化\n\n​\t从 dp[i] = max(dp[i-1], nums[i-1]+dp[i-2]) 关系来看，每一次动态变化，都与前两次状态有关系（dp[i-1], dp[i-2])，而前面的一些值是没有必要留存的.\n\n​\t所以，dp只需要定义两个变量就好，将空间复杂度降为O(1)\n\n```python\nclass Solution(object):\n\n    def rob_o(self, nums):\n        # 依照上面的思路，其实我们用到的数据永远都是dp的dp[i-1]和dp[i-2]两个变量\n        # 因此，我们可以使用两个变量来存放前两个状态值\n        # 空间使用由O(N) -> O(1)\n\n        size = len(nums)\n        if size == 0:\n            return 0\n\n        dp1 = 0\n        dp2 = nums[0]\n        for i in range(2, size+1):\n            dp1 = max(dp2, nums[i-1]+dp1)\n            dp1, dp2 = dp2, dp1\n        return dp2\n```\n\n> 时间复杂度：O(N)\n>\n> 空间复杂度：O(1)\n\n说完《打家劫舍I 》，中间穿插另外一道题目，利用二维dp来解决的一个问题。\n\n最后再说说《打家劫舍II 》和《打家劫舍III》，把这一系列的**打家劫舍**问题搞明白了，相信你对动态规划有一个较为深刻的入门体验\n\n### 案例二：不同路径「来自leetcode62」\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n\n问总共有多少条不同的路径？\n\n![image-20230605130822926](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605130822926.png)\n\n**示例 1:**\n\n```python\n输入: m = 3, n = 2\n输出: 3\n解释:\n从左上角开始，总共有 3 条路径可以到达右下角。\n\n1. 向右 -> 向右 -> 向下\n2. 向右 -> 向下 -> 向右\n3. 向下 -> 向右 -> 向右\n```\n\n**示例 2:**\n\n```python\npython复制代码输入: m = 7, n = 3\n输出: 28\n```\n\n*提示：*\n\n1 <= m, n <= 100 题目数据保证答案小于等于 2 * 10 ^ 9\n\n下面依然按照四个步骤来进行讨论：\n\n##### 步骤一：定义dp数组的含义\n\n​\t当前这道题是从左上角到右下角的，题目中规定只能向右或者向下走，所以我们必须要定义一个二维数组来保存计算过程中的值。所以，这块定义：\n\n​\t**dp[i][j]: 代表到达位置 (i, j) 的所有路径的总数**\n\n​\t即：机器人从左上角到右下角所有路径的总和，dp中每个位置的值代表行走到达 (i, j) 每个位置的总共的路径数\n\n##### 步骤二：找出关系元素间的动态方程\n\n​\t由于题目中规定只能向右或者向下走，所以在机器人行进的时候，只能是向右或向下.\n\n​\t那么，分别讨论下两种情况，想要到达位置(i, j)，可以从位置(i-1, j)或者(i, j-1)出发到达。因此，到达位置(i, j) 的总的路径数一定是 **到达位置(i-1, j)路径数** + **到达位置(i, j-1)路径数**。那么，现在可以定义动态方程：\n\n​\t**动态方程：dp[i][j] = dp[i-1][j] + dp[i][j-1]**\n\n##### 步骤三：初始化数值设定\n\n​\t很明显，在机器人走第 0 行，第 0 列的时候，无论怎么走，都只有 1 种走法。\n\n​\t因此，初始化值的设定，一定是 dp[0..m][1] 或者 dp[1][0..n] 都等于1\n\n​\t因此初始值如下：\n\n​\t**dp[0] [0….n-1] = 1;**  // 机器人一直向右走，第 0 列统统为 1\n\n​\t**dp[0…m-1] [0] = 1;**  // 机器人一直向下走，第 0 列统统为 1\n\n​\t现在，按照这个思路来整理一下代码\n\n```python\nclass Solution(object):\n\n    def uniquePaths1(self, m, n):\n\n        # 初始化表格，由于初始化0行 0列都为1。那么，先全部置为1\n        dp = [[1 for _ in range(m)] for _ in range(n)]\n\n        for i in range(1, n):\n            for j in range(1, m):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n        return dp[n-1][m-1]\n```\n\n上述代码中由于dp[[0..m][1] ][1]或者 dp[1][0..n] 都等于1，所以在定义二维数组dp时候，统统赋初始值为 1\n\n然后从位置(1, 1)开始计算每个位置的总路径数\n\n> 时间复杂度：O(M*N)\n>\n> 空间复杂度：O(M*N)\n\n既然到这里了，下面再想想看有没有可优化的地方\n\n##### 步骤四：优化\n\n​\t可以依照前面的解决的思路，应该也可以从空间上进行一定的优化\n\n​\t参照前面的案例，之前定义的是一维数组dp，优化点是每一步骤都只与前面的两个计算好的数值有关系，然后优化点就是将dp[N] -> dp1和dp2，空间复杂度由 O(N) -> O(1)，如果是很大规模的数据计算的话，空间效率提升了不少.\n\n​\t现在这个例子中的动态方程是**dp[i][j] = dp[i-1][j] + dp[i][j-1]**，很明显，每一步骤中的状态值只与左边相邻的值和上面的值相关。举例（为了方便，用 3*4 来举例）：\n\n![image-20230605131507215](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131507215.png)\n\n​\t这个完整的图片描述中，机器人从左上角的位置(1, 1)开始移动，逐渐每一步都根据动态方程进行前进，明显的可以看出机器人每移动一格，所得到的路径总和只与它的上方和左方数值有关系。也就是我们会发现，机器人移动到第2行的时候，第0行数据完全是没有用的状态。\n\n​\t因此，这个优化点就出来了，在算法设计的时候，dp仅仅定义2行N列的数组就ok了，省去了m-2行的空间开销。这个代码如果大家想明白了请自行设计出来，自己写出来一定会有更加深刻的理解，再强调：多思考，形成潜移默化的思维方式.\n\n​\t看完这个步骤之后，是不是很明显的优化点，为什么上面没有给出大家代码呢？是因为我看到貌似可以继续优化的点（粘住空间优化项了哈哈哈），那就继续在空间开销上做文章。\n\n​\t**引导：**根据上述咱们的优化方案，说道 \"机器人移动到第2行的时候，第0行数据完全是没有用的状态\"，其实当前聪明的读者你想想，再看看，下面的图中（从上图截取过来）。 其实，不仅仅是第 0 行完全没用了，而且在第2 行做移动的时候，移动到位置(i, j)的时候，计算好位置(i, j)，那么接下来，位置(i-1, j)的数据也就没用了。换句话说，边走，第 1 行开始的某些数据也就没用了，还在占着空间\n\n​\t**这块大家一定多想想，多理解，多画图**\n\n\n\n![image-20230605131650290](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131650290.png)\n\n下面按照这种思路，看下图的步骤，也画好了用一维数组进行解决问题，也画出来每一步骤与上图的类比过程：\n\n![image-20230605131721361](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131721361.png)\n\n在这里，有犯困的同学可以自己动手画一画，理解一下，个人感觉是一个很好的思维扩展\n\n接下来，就按照这样的思路进行代码实现，会发现码起来很简单\n\n```python\nclass Solution(object):\n\n    def uniquePaths2(self, m, n):\n        if m > n:\n            m, n = n, m\n\n        dp = [1 for _ in range(m)]\n\n        for i in range(1, n):\n            for j in range(1, m):\n                dp[j] = dp[j] + dp[j-1]\n\n        return dp[m-1]\n```\n\n> 时间复杂度：O(m*n)\n>\n> 空间复杂度：O(min(m ,n))\n\n是不是从思维方面简单干净了许多\n\n搞清楚上面的栗子之后呢，我们将上面的例题进行一个简单的难度增加，说白了，就是在路上打几个阻碍点\n\n来看:\n\n### 案例三：不同路径II 「来自leetcode63」\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n\n现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？\n\n![image-20230605131800138](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131800138.png)\n\n> 说明：m 和 n 的值均不超过 100。\n\n**示例 1:**\n\n```python\n代码输入:\n[\n  [0,0,0],\n  [0,1,0],\n  [0,0,0]\n]\n输出: 2\n解释:\n3x3 网格的正中间有一个障碍物。\n从左上角到右下角一共有 2 条不同的路径：\n\n1. 向右 -> 向右 -> 向下 -> 向下\n2. 向下 -> 向下 -> 向右 -> 向右\n```\n\n**咱们先看一下题中的两个关键点：** 关键点1：只能向右或者向下 关键点2：有障碍物为1， 无障碍物为0\n\n根据 关键点1 和 关键点2 依然按照四个步骤来进行讨论：\n\n##### 步骤一：定义dp数组的含义\n\n这个题目中定义的dp数组是和上一个例题中定义的dp数组的含义是相同的，但由于该题中已经定义有数组obstacleGrid，可以直接利用，无需额外开辟空间 那么，就利用obstacleGrid作为动态规划中存储计算过程中的最优值\n\n##### 步骤二：找出关系元素间的动态方程\n\n参照上一题目，规定动态方程: obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1] 由于机器人在移动过程中有障碍物，那么，对上面动态方程加一些限制条件 a.若当前 obstacleGrid[i][j] 为0。那么，直接计算动态方程下的计算过程 b.若当前 obstacleGrid[i][j] 不为0。那么，直接置该位置的值为0\n\n所以，在进行动态方程遍历的时候，先进行 obstacleGrid[i][j]的判断，再进行动态方程的计算执行\n\n##### 步骤三：初始化数值设定\n\n​\t相比于上一题目，相似的是，在机器人走第 0 行，第 0 列的时候，无论怎么走，都只有 1 种走法 \t但由于有障碍物，那走到障碍物的时候，后面都是走不下去的（下图用第一行来举例）。\n\n![image-20230605131926886](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131926886.png)\n\n​\t所以，初始化第 0 行，第 0 列的时候，障碍物 1 后面的都是不可达的。所以，初始化行和列的逻辑表达：\n\n​\t**该位置是否可达=前一个位置的状态and该位置能否可达 得到能否到达这个位置**\n\n​\t只有前一个位置为1（可达，只有1种方式） ，当前位置为0（无障碍物）这种情况才能到达该位置，然后为该位置设 1 （可达，只有1种方式）\n\n```python\n# 0 行初始化表达式: \nobstacleGrid[0][row] = int(obstacleGrid[0][row] == 0 and obstacleGrid[0][row-1] == 1)\n# 0 列初始化表达式: \nobstacleGrid[clo][0] = int(obstacleGrid[clo][0] == 0 and obstacleGrid[clo-1][0] == 1)\n```\n\n这些都准备就绪之后，按照相关思路进行编码\n\n```python\nclass Solution(object):\n\n    def uniquePathsWithObstacles1(self, obstacleGrid):\n      \t# 行列长度\n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n\n        # 如果在位置(0, 0)，哪里都去不了，直接返回0\n        if obstacleGrid[0][0] == 1:\n            return 0\n\n        # 否则，位置(0, 0)可以到达\n        obstacleGrid[0][0] = 1\n\n        # 初始化 0 列\n        for clo in range(1, m):\n            obstacleGrid[clo][0] = int(obstacleGrid[clo][0] == 0 and obstacleGrid[clo-1][0] == 1)\n\n        # 初始化 0 行\n        for row in range(1, n):\n            obstacleGrid[0][row] = int(obstacleGrid[0][row] == 0 and obstacleGrid[0][row-1] == 1)\n\n        # 从位置(1, 1)根据动态方程开始计算\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 0:\n                    obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1]\n                else:\n                    obstacleGrid[i][j] = 0\n\n        return obstacleGrid[m-1][n-1]\n```\n\n> 时间复杂度: O(mxn)\n>\n> 空间复杂度: O(1)\n\n##### 步骤四：优化\n\n​\t这块的优化先不谈了，这里基本没有什么优化点，之前都是由于自己要开辟内存空间，通过空间的优化来进行，而本题是在给定的数组中进行操作的\n\n有了这几个案例的基础之后，咱们后面把经典的《打家劫舍》系列剩下的两个题目讨论完，就先告一段落，后面也希望以不同的方式与大家多多交流，互相学习\n\n如果有读者看着累了，可以先保存，收藏下来，待消化了前面的内容，方便再回来看看。\n\n### 案例四：打家劫舍II 「来自leetcode213」\n\n你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n\n给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。\n\n**示例 1:**\n\n```python\npython复制代码输入: [2,3,2]\n输出: 3\n解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。\n```\n\n**示例 2:**\n\n```python\npython复制代码输入: [1,2,3,1]\n输出: 4\n解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。\n     偷窃到的最高金额 = 1 + 3 = 4 。\n```\n\n与《打家劫舍I》不同的是，《打家劫舍I》的屋子是线性的，而《打家劫舍II》是环状的，所以要考虑的点会增加一些，因为首位相连接的情况，咱们分为下面三种情况进行设定：\n\na. 不偷首偷尾\n\nb. 偷首不偷尾\n\nc. 首位都不偷 显然，c 种方式损失太大，不会获得最高的金额，故选取 a 和 b。 那么，下面分为两种情况，分别计算不包含首和不包含尾这两种情况来判断小偷哪种方式偷取的金额最高。\n\n下面依然按照之前的四个步骤来进行分析\n\n##### 步骤一： 定义dp数组的含义\n\n​\tdp[i] 代表的含义和之前一致，dp数组存储的值一般代表截止目前的最优值\n\n​\t所以，**dp[i] 代表到达第 i 个房屋偷得的最高金额，也就是当前最大子序和**\n\n​\t但是最后会讨论**不包含首**和**不包含尾**这两种情况下得到的dp数组的最后一位，然后获取其中较大者，就是我们要取得的最高金额\n\n##### 步骤二：找出关系元素间的动态方程\n\n​\t动态方程可参照《打家劫舍I》，有很详细的图解过程，该例子动态方程的变化和之前是完全一致的：\n\n​\t**dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])**\n\n##### 步骤三：初始化设定\n\n​\t初始化: 给没有房子时，dp一个位置，即：dp[0] \t\ta. 当size=0时，没有房子，小偷没办法偷：dp[0]=0； \t\tb. 当size=1时，有一间房子，只要偷即可：dp[1]=nums[0]\n\n![image-20230605150914733](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605150914733.png)\n\n​\t由于屋子首位相连接，所以在计算时候，直接分为两种情况。第一种略过第一个屋子，第二种略过第二个屋子，这样得到的两个数组结果。最后只要比较最后一位数值的大小就ok了。解决！\n\n该例子步骤三之后，感兴趣的同学可以自己写一下代码，和《打家劫舍I》的代码很类似，后面我写了优化后的代码，可能会更加的明白怎么写。咱们直接到步骤四，有了上面的案例，直接来看看优化后的方案:\n\n\n\n##### 步骤四：优化\n\n​\t同样从 dp[i] = max(dp[i-1], nums[i-1]+dp[i-2]) 关系来看，每一次动态变化，都与前两次状态有关系（dp[i-1], dp[i-2])，而前面的一些值是没有必要留存的，只要保存两个变量来保存过程最优值就好.\n\n​\t代码中有详细的注释：\n\n    class Solution(object):\n    def rob(self, nums):\n        # 点睛：与打家劫舍I的区别是屋子围成了一个环\n        #   那么，很明显可以分为三种情况：\n        #   1. 首位都不偷\n        #   2. 偷首不偷尾\n        #   3. 不偷首偷尾\n        # 显然，第1种方式损失太大，选取2、3。\n        # 那么，分为两种情况，分别计算不包含首和不包含尾这两种情况来判断哪个大哪个小\n    \n        # 1.dp[i] 代表当前最大子序和\n        # 2.动态方程: dp[i] = max(dp[i-1] and , nums[i-1]+dp[i-2])\n        # 3.初始化: 给没有房子时，dp一个位置，即：dp[0]\n        #   3.1 当size=0时，没有房子，dp[0]=0；\n        #   3.2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]\n    \n        # 依照《打家劫舍I》的优化方案进行计算\n    \n        # nums处理，分别切割出去首和去尾的子串\n        nums1 = nums[1:]\n        nums2 = nums[:-1]\n    \n        size = len(nums)\n        if size == 0:\n            return 0\n        if size == 1:\n            return nums[0]\n    \n        def handle(size, nums):\n            dp1 = 0\n            dp2 = nums[0]\n            for i in range(2, size+1):\n                dp1 = max(dp2, nums[i-1]+dp1)\n                dp1, dp2 = dp2, dp1\n            return dp2\n    \n        res1 = handle(size-1, nums1)\n        res2 = handle(size-1, nums2)\n    \n        return max(res1, res2)\n\n> 时间复杂度：O(N)\n>\n> 空间复杂度：O(1)\n\n再看看下面小偷遇到的情况，感叹：即使当小偷，也要步步规划才能拿到最高的金额啊...\n\n### 案例五：打家劫舍III 「来自leetcode337」\n\n在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。\n\n计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。\n\n**示例 1:**\n\n```python\n代码输入: [3,2,3,null,3,null,1]\n\n     3\n\t/ \\\n   2   3\n    \\   \\ \n     3   1\n\n输出: 7 \n解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.\n```\n\n**示例 2:**\n\n```python\n输入: [3,4,5,1,3,null,1]\n\n \t 3\n\t/ \\\n   4   5\n  / \\   \\ \n 1   3   1\n输出: 9\n解释: 小偷一晚能够盗取的最高金额 = 4 + 5 = 9.\n```\n\n题目出的很好，但是立马会给人一种小偷也不是好当的的赶脚...\n\n言归正传，咱们先来说说题目本身\n\n《打家劫舍》的小偷从一维线性到环形，再到二维矩形的屋子？是我想简单了，直接就干到树形了，是不是看着很香，而且很想，看下去，研究研究...\n\n来整理几点思路，再来按照四步走：\n\n1.由于房屋是树状的，因此，我们可以使用遍历树的传统方法进行遍历(前序、中序、后续) 2.简单的思路是，从树低进行往上遍历，拿到最优的打劫值。可以选用后续遍历 3.得到每一节点的最优值，最后选取最优的结果\n\n依然按照三个步骤来进行分析（无优化点）\n\n##### 步骤一： 定义dp数组的含义\n\n​\tdp[i]代表该节点及以下打最多的劫（拿到最多的钱）\n\n##### 步骤二：找出关系元素间的动态方程\n\n​\t根据我们每走到一个节点，都会有两种情况，那就是 **偷(1)** 与 **不偷(0)**。我们分开来讨论：\n\n​\ta. 用 **dp[0]** 代表不偷取该节点到目前为止拿到最多的钱，那么儿子节点偷不偷都ok。\n\n​\t\t所以： **dp[0] = max(left[0], left[1]) + max(right[0], right[1])**\n\n​\tb. 用 **dp[1]** 代表偷了该节点到目前为止拿到最多的钱，则儿子节点都不能被偷。\n\n​\t\t所以：**dp[1] = value + left[0] + right[0]**  (value代表该节点的价值)\n\n​\t有看不懂的地方吗？再紧接着解释一下：\n\n​\t\tleft[0]代表不偷取左孩子拿到最高的金额\n\n​\t\tleft[1]代表偷取左孩子拿到最高的金额\n\n​\t\tright[0]代表不偷取右孩子拿到最高的金额\n\n​\t\tright[1]代表偷取右孩子拿到最高的金额\n\n​\t*如果还有不太懂的话，留言或者私信我联系我，随时骚扰我哈*\n\n##### 步骤三：初始化设定\n\n​\t该例子的初始化比较简单，就是当前树的形状为空的时候，直接返回dp[0, 0]\n\n下面贴出完整代码，其中包含**树的初始化**代码 && 一大堆的注释：\n\n```python\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution():\n    def rob(self, root):\n        # 说明：\n        # 1.由于房屋是树状的，因此，我们可以使用遍历树的传统方法进行遍历(前序、中序、后续)\n        # 2.简单的思路是，从树低进行往上遍历，拿到最优的打劫值。可以选用后续遍历\n        # 3.得到每一节点的最优值，最后选取最优的结果\n\n        # 1.dp[i]代表该节点及以下拿到的最多的钱\n        # 2.动态方程：\n        #   2.1 dp[0]代表不偷该节点拿到最多的钱，则儿子节点偷不偷都ok。dp[0] = max(left[0], left[1]) + max(right[0], right[1])\n        #   2.2 dp[1]代表偷了该节点拿到最多的钱，则儿子节点都不能被偷。dp[1] = var + left[0] + right[0]\n        # 3.初始化：当前树的形状为空的时候，直接返回dp[0, 0]\n        def postTrasval(root):\n            dp = [0, 0]\n            if not root:\n                return dp\n            left = postTrasval(root.left)\n            right = postTrasval(root.right)\n\n            dp[0] = max(left[0], left[1]) + max(right[0], right[1])\n            dp[1] = root.val + left[0] + right[0]\n            return dp\n        dp = postTrasval(root)\n        return max(dp[0], dp[1])\nif __name__ == '__main__':\n    # initial tree structure\n    T = TreeNode(3)\n    T.left = TreeNode(2)\n    T.right = TreeNode(3)\n    T.left.right = TreeNode(3)\n    T.right.right = TreeNode(1)\n    # The solution to the Question\n    s = Solution()\n    print(s.rob(T))\n```\n\n\n\n# 2. 递归\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"js/算法总结","published":1,"layout":"post","photos":[],"link":"","_id":"clipg08750013rgwhgmq8avsq","content":"<p>算法总结</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1-动态规划\"><a href=\"#1-动态规划\" class=\"headerlink\" title=\"1. 动态规划\"></a>1. 动态规划</h1><h4 id=\"传统递归-vs-DP\"><a href=\"#传统递归-vs-DP\" class=\"headerlink\" title=\"传统递归 vs. DP\"></a>传统递归 vs. DP</h4><p>先用一个被大佬们举例举到烂的🌰，这个栗子很烂，但是真的<strong>很香</strong>：必须着重<strong>强调</strong>.</p>\n<p><strong>《斐波那契（Fibonacci）数列的第n项》</strong></p>\n<p><strong>举荐理由：</strong>在我自己看来Fibonacci是动态规划设计中的入门级案例，就好比说编程中的“hello world”，大数据中的“word count”.</p>\n<p>Fibonacci几乎完美的诠释了<strong>动态规划带来的思想和技巧</strong>然而没有任何其他的要考虑的细枝末节，这种很清晰的方法看起来很适合整个的动态规划的思维方式，很适合入门来进行的思考方式.</p>\n<p>接下来咱们先来看题目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">题目复制代码写一个函数，输入n，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：</span><br><span class=\"line\"></span><br><span class=\"line\">F(0) = 0, F(1) = 1</span><br><span class=\"line\">F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</span><br><span class=\"line\">斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</span><br></pre></td></tr></table></figure>\n\n<p>比较一下传统递归解法和动态规划思想下的解决对比</p>\n<h4 id=\"1-先-递归解决\"><a href=\"#1-先-递归解决\" class=\"headerlink\" title=\"1. 先 递归解决\"></a>1. 先 递归解决</h4><p>传统对于这种题目的思考方式会利用递归求解，做起来比较简单，就是不断的去递归调用，看下面代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fib_recur</span>(<span class=\"params\">N</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> N &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">fib_recur</span>(N-<span class=\"number\">1</span>) + <span class=\"title function_\">fib_recur</span>(N-<span class=\"number\">2</span>)  # 递归输出  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出的结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F( <span class=\"number\">1</span> ) =  <span class=\"number\">3</span></span><br><span class=\"line\">F( <span class=\"number\">2</span> ) =  <span class=\"number\">2</span></span><br><span class=\"line\">F( <span class=\"number\">3</span> ) =  <span class=\"number\">1</span></span><br><span class=\"line\">F( <span class=\"number\">4</span> ) =  <span class=\"number\">0</span></span><br><span class=\"line\">F( <span class=\"number\">5</span> ) =  <span class=\"number\">1</span></span><br><span class=\"line\">F( <span class=\"number\">6</span> ) =  <span class=\"number\">2</span></span><br><span class=\"line\">F( <span class=\"number\">7</span> ) =  <span class=\"number\">1</span></span><br><span class=\"line\">F( <span class=\"number\">8</span> ) =  <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>重复计算</strong></p>\n<p>明显可以看到，总计 8 次的计算过程中，相同的计算结果有三对进行了<strong>重复计算</strong>（下图中同色项，不包含灰色），也就是说在递归的过程中，把曾经计算过的项进行了<strong>又一次的重复计算</strong>，这样对于时间效率是比较低的，唯一的好处可能就是代码看起来比较好懂，但是终归不是一个好的算法设计方法。</p>\n<p>代码中，在计算N的时候就去递归计算 <code>fib(N-1) + fib(N-2)</code>，那么，这种情况下的计算过程中。会是下面图中的一个计算过程。</p>\n<p>可以发现，会有相当一部分的重复计算，这样对于时间都是重复的消耗。</p>\n<blockquote>\n<p>参考图中相同颜色的项，比如说粉色的重复计算、黄色的重复计算等</p>\n<p>注意：递归中没有对空间进行了增加，始终都是同样的长度，仅仅是不断的弹出和压入</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114156368.png\" alt=\"image-20230605114156368\"></p>\n<p>为了更好的说明这种重复计算带来时间效率的低下。再比如说，相比上述图中的计算节点，再增加一个节点的计算，增加计算F(5)，那么由于递归的计算方式，会有更多的项（下图中线框中部分）进行了重复的计算。在计算<code>F(5)</code>的时候，会递归调用<code>F(4)</code>和<code>F(3)</code>，而在下图中，计算<code>F(4)</code>的时候，又会完整的去计算<code>F(3)</code>。这样，如果N很大的话，会有更大的时间消耗.</p>\n<p>这样，这棵树的规模进行进行成倍增加，时间复杂度很明显的进行了成倍的扩张。对于时间上来说是很恐怖的.</p>\n<p>时间复杂度带来的低效率严重超过了代码的可读性，所以我们可以想办法将<strong>过去计算</strong>过的节点<strong>进行保存</strong>。这样，我们就会用到下面要说的动态规划思想带来的时间上的高效.</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114342318.png\" alt=\"image-20230605114342318\"></p>\n<blockquote>\n<p>时间复杂度：o(2**n) —&gt; 指数级</p>\n<p>空间复杂度：o(n)</p>\n</blockquote>\n<h4 id=\"2-后-动态规划解决\"><a href=\"#2-后-动态规划解决\" class=\"headerlink\" title=\"2. 后 动态规划解决\"></a>2. 后 动态规划解决</h4><p><strong>大概解释一下字面意思：</strong></p>\n<p><strong>动态规划：我们不直接去解决问题，而是在每一步解决问题的时候，达到每一步的最优情况。换句话说，就是在每一步解决问题过程中，利用过去的状态</strong>以及<strong>当前状态</strong>的情况而达到一个当前的最优状态.</p>\n<p><em>*规划：在一般解决该类问题的时候，会有一个“填表格”的过程，无论是简单情况下的**一维表格**还是复杂一点的</em>*二维表格<strong>，都是以</strong>开辟空间换时间**的思想，以争取最佳的时间效率. （保存过程中间值，方便后续直接使用）.</p>\n<p><strong>动态：</strong>用上面的案例来说，递归解决过程中的每一步都会从基本问题不断的“自顶向下”去求解，在每一步骤中，会有相同的计算逻辑进行了重复的计算。相比于递归思想，动态规划思想增加了对历史上计算结果的保存，逐步记录下中间的计算结果，在每一步求得最优值.</p>\n<p>因此，动态规划可以避免重复计算，达到了时间上的最优，从O(2N)O(2^N)O(2N)指数级变为O(N)O(N)O(N)常数级别，相较于开辟的一段内存空间存放中间过程值的开销，是非常值得的.</p>\n<p><strong>那么，接下来咱们依照动态规划的思路进行对Fibonacci进行下解决</strong></p>\n<p>依据题中的规则：</p>\n<p>F(0) = 0, F(1) = 1</p>\n<p>F(N) = F(N - 1) + F(N - 2),  when N &gt; 1</p>\n<p>那么，👇👇F(N) 的值只与他的前两个状态有关系👇👇</p>\n<p>a. 初始化值 : F(0) = 0, F(1) = 1 b. 想要计算得到F(2)， 那么F(2) = F(0) + F(1)   –&gt;  保存 F(2) c. 想要计算得到F(3)， 那么F(3) = F(2) + F(1)   –&gt;  保存 F(3) d. 想要计算得到F(3)， 那么F(4) = F(3) + F(2)   –&gt;  保存 F(4)</p>\n<p>利用动态规划思想，以一维数组辅助实现的Fibonacci，看下图</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114740415.png\" alt=\"image-20230605114740415\"></p>\n<p>是不是很简单的思路，仅仅靠保存过程中的一些值就能很简单的利用循环就可以实现了，没必要用递归反复计算进行实现。</p>\n<p>想要计算得到第 n 个值的多少？那么，以下几点是我们必须要做到的</p>\n<p>​    a. <strong>定义一个一维数组</strong>   —&gt;  一般用dp来命名</p>\n<p>​    b. <strong>动态方程的设定</strong>   —&gt;  题中的F(N) = F(N - 1) + F(N - 2)</p>\n<p>​    c. <strong>初始化数值</strong>   —&gt;  F(0) = 0和F(1) = 1</p>\n<p>上述的 a、b 和 c 点就是动态规划思想的几个核心要素</p>\n<p>下面来看下要实现的代码（代码中，用dp来代替上面的F()）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">fib</span>(<span class=\"params\">self, N</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> N == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        dp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N+<span class=\"number\">1</span>)] <span class=\"comment\"># 1定义dp[i]保存第i个计算得到的数值</span></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>   \t<span class=\"comment\"># 2初始化</span></span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>\t\t\t<span class=\"comment\"># 2初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, N+<span class=\"number\">1</span>):\t<span class=\"comment\"># 3动态方程实现，由于0和1都实现了赋值，现在需要从第2个位置开始赋值</span></span><br><span class=\"line\">            dp[i] = dp[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">2</span>]</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"built_in\">print</span> dp\t\t <span class=\"comment\"># 记录计算过程中的次数，与上述递归形成对比</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[N]</span><br></pre></td></tr></table></figure>\n\n<p>输出:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>以上，最重要的就是1 2 3 点，而执行过程参照<strong>输出</strong>对比递归算法，计算少了很多，同样的计算只计算了一次。</p>\n<blockquote>\n<p>时间复杂度：O(N)</p>\n<p>空间复杂度：O(N)</p>\n</blockquote>\n<p>介绍了上面的内容了，此处来条分割线吧，针对上述的 <strong>递归 vs. DP</strong></p>\n<hr>\n<p>既然动态规划的方案也介绍了，下面咱们再仔细看看，是否有优化的空间，毕竟对于一个算法方案的设计，都有找到其优化点，无论是时间还是空间的效率都想要达到一个理想的值。</p>\n<h4 id=\"3-动态规划-优化\"><a href=\"#3-动态规划-优化\" class=\"headerlink\" title=\"3. 动态规划 + 优化\"></a>3. 动态规划 + 优化</h4><p>咱们看下这张图解，发现每个计算节点都<strong>只与前两个项有关系</strong>。换句话说，咱们只要保存两个值就好了，计算新的节点值的时候，把新的值赋值给前两个值的第一个就好了</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115233956.png\" alt=\"image-20230605115233956\"></p>\n<p>话说只要两个值，现在定义两个变量 dp1 和 dp2。那么，现在咱们一步一步模拟一下：</p>\n<p>a. 初始化值 : F(0) = 0, F(1) = 1</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115254829.png\" alt=\"image-20230605115254829\"></p>\n<p>b. 想要计算得到F(2)， 那么F(2) = F(0) + F(1) –&gt; 保存 F(2)</p>\n<p> 顺带将F(1)赋值给dp1， f(2)赋值给dp2</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115319902.png\" alt=\"image-20230605115319902\"></p>\n<p>c. 想要计算得到F(3)， 那么F(3) = F(2) + F(1) –&gt; 保存 F(3)</p>\n<p> 顺带将F(2)赋值给dp1， F(3)赋值给dp2</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115336720.png\" alt=\"image-20230605115336720\"></p>\n<p>d. 想要计算得到F(3)， 那么F(4) = F(3) + F(2) –&gt; 保存 F(4)</p>\n<p> 顺带将F(3)赋值给dp1， F(4)赋值给dp2</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115356096.png\" alt=\"image-20230605115356096\"></p>\n<p>至此为止，整个过程仅仅用到了两个变量来存储过程中产生的值，也就之前没有优化的空间效率得到了优化</p>\n<p>咱们把代码也贴一下吧，供参考</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">fib_dp1</span>(<span class=\"params\">self, N</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> N == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dp1, dp2 = <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, N+<span class=\"number\">1</span>):</span><br><span class=\"line\">            dp1 = dp1 + dp2</span><br><span class=\"line\">            dp1, dp2 = dp2, dp1</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp2</span><br></pre></td></tr></table></figure>\n\n<p>看起来是不是更加简洁了。</p>\n<p>三点说明：<strong>1.定义dp数组 2.动态方程 3.初始化数值</strong></p>\n<p>这也说明了为什么用<strong>斐波那契数列</strong>来引入<strong>动态规划</strong>的，因为斐波那契数列本身就明确的告诉你动态方程是什么，初始化的值是什么，所以好好的体会这种思想，尤其是从传统递归 -&gt; 动态规划的思想解决，再到优化的方面，很值得深思。</p>\n<p>那接下来，咱们就找几个有代表性的栗子来尝尝鲜</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115624586.png\" alt=\"image-20230605115624586\"></p>\n<h2 id=\"二、动态规划四大解题步骤处理问题\"><a href=\"#二、动态规划四大解题步骤处理问题\" class=\"headerlink\" title=\"二、动态规划四大解题步骤处理问题\"></a>二、动态规划四大解题步骤处理问题</h2><p>上面用斐波那契数列问题，引出了下面的几点，在这里再详细赘述一下</p>\n<p>在后面的案例中将会尽量严格按照这几个步骤进行解决问题</p>\n<blockquote>\n<p>步骤一：定义dp数组的含义</p>\n<p>步骤二：定义状态转移方程</p>\n<p>步骤三：初始化过程转移的初始值</p>\n<p>步骤四：可优化点(可选)</p>\n</blockquote>\n<h4 id=\"步骤一：定义dp数组的含义\"><a href=\"#步骤一：定义dp数组的含义\" class=\"headerlink\" title=\"步骤一：定义dp数组的含义\"></a>步骤一：定义dp数组的含义</h4><p>绝大部分情况下，我们需要定义一维数组或者二维数组进行存储在计算过程中产生的最优值，这里为什么是最优值呢？是因为在解决问题过程中，一般情况dp数组用来保存<strong>从开始到当前情况的最优值</strong>，故而保存的是截止到目前的最优值，避免重复计算（这里看起来思维有混乱的同学们，想想上面Fibonacci 递归解法和动态规划的对比）</p>\n<p><strong>所以，dp无论是一维的还是二维的，要想清楚代表什么，一般来说代表的是截止到目前情况下的最优值</strong></p>\n<h4 id=\"步骤二：定义状态转移方程\"><a href=\"#步骤二：定义状态转移方程\" class=\"headerlink\" title=\"步骤二：定义状态转移方程\"></a>步骤二：定义状态转移方程</h4><p>什么是动态转移方程？ 如果有一个问题摆在我们面前，然后这个问题在解决的过程中，会发现有很多的重叠的子问题，重叠子结构，而通过这些子问题的解决，最终将会把该问题进行解决</p>\n<p>通俗来说，在解决问题过程中，能够发现一个不断解决子问题的动态规律，比如说Fibonacci中的F(N) = F(N - 1) + F(N - 2)，而在其他的可以用动态规划解决的问题中，需要我们自己去发现这样的内在规律。这个是最难的也是最终于要的，只要这一步解决了，接下来我们解决这个问题基本就没问题了.</p>\n<h4 id=\"步骤三：初始化过程转移的初始值\"><a href=\"#步骤三：初始化过程转移的初始值\" class=\"headerlink\" title=\"步骤三：初始化过程转移的初始值\"></a>步骤三：初始化过程转移的初始值</h4><p>顺着步骤二的思路来，既然动态方程定义好了，是不是需要一个<strong>支点</strong>来撬动它进行不断的计算下去。</p>\n<p>那么，这个<strong>支点</strong>就需要我们来初始定义，将动态方程激活，进行计算。举例来说Fibonacci中的F(0) = 0和F(1) = 1，有了这两个值，它的动态方程F(N) = F(N - 1) + F(N - 2)就可以进行下去了</p>\n<p>这个就是我们要想好的初始值，实际问题可能还需要我们想想清楚.</p>\n<h4 id=\"步骤四：可优化点-可选\"><a href=\"#步骤四：可优化点-可选\" class=\"headerlink\" title=\"步骤四：可优化点(可选)\"></a>步骤四：可优化点(可选)</h4><p>可优化的这里，最重要的会是dp数组这块，也会有不同问题不同的优化点</p>\n<p>在例子中，我们会进行不同的优化.</p>\n<p>总之一点，建议大家动笔多画画图，很多细节慢慢就会出现了.</p>\n<h3 id=\"案例一：打家劫舍I-「来自leetcode198」\"><a href=\"#案例一：打家劫舍I-「来自leetcode198」\" class=\"headerlink\" title=\"案例一：打家劫舍I 「来自leetcode198」\"></a>案例一：打家劫舍I 「来自leetcode198」</h3><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码输入: [1,2,3,1]</span><br><span class=\"line\">输出: 4</span><br><span class=\"line\">解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class=\"line\">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例2：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出: <span class=\"number\">12</span></span><br><span class=\"line\">解释: 偷窃 <span class=\"number\">1</span> 号房屋 (金额 = <span class=\"number\">2</span>), 偷窃 <span class=\"number\">3</span> 号房屋 (金额 = <span class=\"number\">9</span>)，接着偷窃 <span class=\"number\">5</span> 号房屋 (金额 = <span class=\"number\">1</span>)。</span><br><span class=\"line\">     偷窃到的最高金额 = <span class=\"number\">2</span> + <span class=\"number\">9</span> + <span class=\"number\">1</span> = <span class=\"number\">12</span> 。</span><br></pre></td></tr></table></figure>\n\n<p>把经典案例系列拆分开讨论下吧，咱们首先将「打家劫舍I」来看看</p>\n<p>该题可以用动态规划的思想来解决的原因是，在小偷不断偷取的过程中，始终想要偷得的物品价值最大，最优，每一步骤都与之前的偷取情况有关系，而且每一步都要考虑是否能偷，是否会带来最大利益，这就使得我们可以用动态规划的思想来解决问题。  然后严格按照四步骤进行解题.</p>\n<h5 id=\"步骤一：-定义dp数组的含义\"><a href=\"#步骤一：-定义dp数组的含义\" class=\"headerlink\" title=\"步骤一： 定义dp数组的含义\"></a>步骤一： 定义dp数组的含义</h5><p>​    之前提到的，dp数组存储的值一般代表截止目前的最优值，在该题目中，我们定义：</p>\n<p>​    <strong>dp[i] 代表到达第 i 个房屋偷得的最高金额，也就是当前最大子序和</strong></p>\n<p>​    无论房屋有几间，最后我们取到dp数组的最后一个值就求得小偷偷得的最高金额</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程\"><a href=\"#步骤二：找出关系元素间的动态方程\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>​    动态规划解决的问题，一般来说就是解决最优子问题，“自顶向下” 的去不断的计算每一步骤的最优值。</p>\n<p>​    也就是想要得到dp[i]的值，我们必须要知道dp[i-1]，dp[i-2]，dp[i-3] … 的每一步的最优值，在这个状态转移的过程中，我们必须要想清楚怎么去定义关系式。然而在每一步的计算中，都与前几项有关系，这个固定的关系就是我们要寻找的重叠子问题，也同样是接下来要详细定义的动态方程</p>\n<p>​    该题目中，当小偷到达第 i 个屋子的时候，他的选择有两种：一种是偷，另外一种是不偷， 然后选择价值较大者</p>\n<p>​    a. 偷的情况计算：必然是dp[3] = nums[2] + dp[1]，如果是偷取该屋子的话，相邻屋子是不能偷取的，因此，通项式子是：dp[i] =  nums[i-1] + dp[i-2]</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605123128436.png\" alt=\"image-20230605123128436\"></p>\n<p> b. 不偷的情况计算：必然是dp[3] = dp[2]，如果是不偷取该屋子的话，相邻屋子就是其最优值，因此，通项式子是：dp[i] = dp[i-1]</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605123322989.png\" alt=\"image-20230605123322989\"></p>\n<p>​    最后，要想偷得最高金额，那么，必须选取在偷与不偷之间的最大值作为我们是否选取的关键点。即：</p>\n<p>​    <strong>动态方程:</strong> dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])</p>\n<h5 id=\"步骤三：初始化数值设定\"><a href=\"#步骤三：初始化数值设定\" class=\"headerlink\" title=\"步骤三：初始化数值设定\"></a>步骤三：初始化数值设定</h5><p>​    初始化: 给没有房子时，dp一个位置，即：dp[0]         1 当size=0时，没有房子，dp[0]=0；         2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]</p>\n<p>那么，按照这个思路来整理一下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">rob</span>(<span class=\"params\">self, nums</span>):</span><br><span class=\"line\">      <span class=\"comment\"># 1.dp[i] 代表当前最大子序和</span></span><br><span class=\"line\">      <span class=\"comment\"># 2.动态方程: dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])</span></span><br><span class=\"line\">      <span class=\"comment\"># 3.初始化: 给没有房子时，dp一个位置，即：dp[0]</span></span><br><span class=\"line\">      <span class=\"comment\">#   3.1 当size=0时，没有房子，dp[0]=0；</span></span><br><span class=\"line\">      <span class=\"comment\">#   3.2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]</span></span><br><span class=\"line\">      size = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> size == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">      dp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(size+<span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">      dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">      dp[<span class=\"number\">1</span>] = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, size+<span class=\"number\">1</span>):</span><br><span class=\"line\">        dp[i] = <span class=\"built_in\">max</span>(dp[i-<span class=\"number\">1</span>], nums[i-<span class=\"number\">1</span>]+dp[i-<span class=\"number\">2</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[size]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时间复杂度：O(N)</p>\n<p>空间复杂度：O(N)</p>\n</blockquote>\n<p>那下面想想看有没有可优化的地方，尽量的释放一部分计算机资源</p>\n<h5 id=\"步骤四：优化\"><a href=\"#步骤四：优化\" class=\"headerlink\" title=\"步骤四：优化\"></a>步骤四：优化</h5><p>​    从 dp[i] = max(dp[i-1], nums[i-1]+dp[i-2]) 关系来看，每一次动态变化，都与前两次状态有关系（dp[i-1], dp[i-2])，而前面的一些值是没有必要留存的.</p>\n<p>​    所以，dp只需要定义两个变量就好，将空间复杂度降为O(1)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">rob_o</span>(<span class=\"params\">self, nums</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 依照上面的思路，其实我们用到的数据永远都是dp的dp[i-1]和dp[i-2]两个变量</span></span><br><span class=\"line\">        <span class=\"comment\"># 因此，我们可以使用两个变量来存放前两个状态值</span></span><br><span class=\"line\">        <span class=\"comment\"># 空间使用由O(N) -&gt; O(1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        size = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> size == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dp1 = <span class=\"number\">0</span></span><br><span class=\"line\">        dp2 = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, size+<span class=\"number\">1</span>):</span><br><span class=\"line\">            dp1 = <span class=\"built_in\">max</span>(dp2, nums[i-<span class=\"number\">1</span>]+dp1)</span><br><span class=\"line\">            dp1, dp2 = dp2, dp1</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp2</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时间复杂度：O(N)</p>\n<p>空间复杂度：O(1)</p>\n</blockquote>\n<p>说完《打家劫舍I 》，中间穿插另外一道题目，利用二维dp来解决的一个问题。</p>\n<p>最后再说说《打家劫舍II 》和《打家劫舍III》，把这一系列的<strong>打家劫舍</strong>问题搞明白了，相信你对动态规划有一个较为深刻的入门体验</p>\n<h3 id=\"案例二：不同路径「来自leetcode62」\"><a href=\"#案例二：不同路径「来自leetcode62」\" class=\"headerlink\" title=\"案例二：不同路径「来自leetcode62」\"></a>案例二：不同路径「来自leetcode62」</h3><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605130822926.png\" alt=\"image-20230605130822926\"></p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: m = <span class=\"number\">3</span>, n = <span class=\"number\">2</span></span><br><span class=\"line\">输出: <span class=\"number\">3</span></span><br><span class=\"line\">解释:</span><br><span class=\"line\">从左上角开始，总共有 <span class=\"number\">3</span> 条路径可以到达右下角。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 向右 -&gt; 向右 -&gt; 向下</span><br><span class=\"line\"><span class=\"number\">2.</span> 向右 -&gt; 向下 -&gt; 向右</span><br><span class=\"line\"><span class=\"number\">3.</span> 向下 -&gt; 向右 -&gt; 向右</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python复制代码输入: m = <span class=\"number\">7</span>, n = <span class=\"number\">3</span></span><br><span class=\"line\">输出: <span class=\"number\">28</span></span><br></pre></td></tr></table></figure>\n\n<p><em>提示：</em></p>\n<p>1 &lt;= m, n &lt;= 100 题目数据保证答案小于等于 2 * 10 ^ 9</p>\n<p>下面依然按照四个步骤来进行讨论：</p>\n<h5 id=\"步骤一：定义dp数组的含义-1\"><a href=\"#步骤一：定义dp数组的含义-1\" class=\"headerlink\" title=\"步骤一：定义dp数组的含义\"></a>步骤一：定义dp数组的含义</h5><p>​    当前这道题是从左上角到右下角的，题目中规定只能向右或者向下走，所以我们必须要定义一个二维数组来保存计算过程中的值。所以，这块定义：</p>\n<p>​    <strong>dp[i][j]: 代表到达位置 (i, j) 的所有路径的总数</strong></p>\n<p>​    即：机器人从左上角到右下角所有路径的总和，dp中每个位置的值代表行走到达 (i, j) 每个位置的总共的路径数</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程-1\"><a href=\"#步骤二：找出关系元素间的动态方程-1\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>​    由于题目中规定只能向右或者向下走，所以在机器人行进的时候，只能是向右或向下.</p>\n<p>​    那么，分别讨论下两种情况，想要到达位置(i, j)，可以从位置(i-1, j)或者(i, j-1)出发到达。因此，到达位置(i, j) 的总的路径数一定是 <strong>到达位置(i-1, j)路径数</strong> + <strong>到达位置(i, j-1)路径数</strong>。那么，现在可以定义动态方程：</p>\n<p>​    <strong>动态方程：dp[i][j] = dp[i-1][j] + dp[i][j-1]</strong></p>\n<h5 id=\"步骤三：初始化数值设定-1\"><a href=\"#步骤三：初始化数值设定-1\" class=\"headerlink\" title=\"步骤三：初始化数值设定\"></a>步骤三：初始化数值设定</h5><p>​    很明显，在机器人走第 0 行，第 0 列的时候，无论怎么走，都只有 1 种走法。</p>\n<p>​    因此，初始化值的设定，一定是 dp[0..m][1] 或者 dp[1][0..n] 都等于1</p>\n<p>​    因此初始值如下：</p>\n<p>​    <strong>dp[0] [0….n-1] = 1;</strong>  // 机器人一直向右走，第 0 列统统为 1</p>\n<p>​    <strong>dp[0…m-1] [0] = 1;</strong>  // 机器人一直向下走，第 0 列统统为 1</p>\n<p>​    现在，按照这个思路来整理一下代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">uniquePaths1</span>(<span class=\"params\">self, m, n</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 初始化表格，由于初始化0行 0列都为1。那么，先全部置为1</span></span><br><span class=\"line\">        dp = [[<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m):</span><br><span class=\"line\">                dp[i][j] = dp[i-<span class=\"number\">1</span>][j] + dp[i][j-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n-<span class=\"number\">1</span>][m-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中由于dp[[0..m][1] ][1]或者 dp[1][0..n] 都等于1，所以在定义二维数组dp时候，统统赋初始值为 1</p>\n<p>然后从位置(1, 1)开始计算每个位置的总路径数</p>\n<blockquote>\n<p>时间复杂度：O(M*N)</p>\n<p>空间复杂度：O(M*N)</p>\n</blockquote>\n<p>既然到这里了，下面再想想看有没有可优化的地方</p>\n<h5 id=\"步骤四：优化-1\"><a href=\"#步骤四：优化-1\" class=\"headerlink\" title=\"步骤四：优化\"></a>步骤四：优化</h5><p>​    可以依照前面的解决的思路，应该也可以从空间上进行一定的优化</p>\n<p>​    参照前面的案例，之前定义的是一维数组dp，优化点是每一步骤都只与前面的两个计算好的数值有关系，然后优化点就是将dp[N] -&gt; dp1和dp2，空间复杂度由 O(N) -&gt; O(1)，如果是很大规模的数据计算的话，空间效率提升了不少.</p>\n<p>​    现在这个例子中的动态方程是**dp[i][j] = dp[i-1][j] + dp[i][j-1]*<em>，很明显，每一步骤中的状态值只与左边相邻的值和上面的值相关。举例（为了方便，用 3</em>4 来举例）：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131507215.png\" alt=\"image-20230605131507215\"></p>\n<p>​    这个完整的图片描述中，机器人从左上角的位置(1, 1)开始移动，逐渐每一步都根据动态方程进行前进，明显的可以看出机器人每移动一格，所得到的路径总和只与它的上方和左方数值有关系。也就是我们会发现，机器人移动到第2行的时候，第0行数据完全是没有用的状态。</p>\n<p>​    因此，这个优化点就出来了，在算法设计的时候，dp仅仅定义2行N列的数组就ok了，省去了m-2行的空间开销。这个代码如果大家想明白了请自行设计出来，自己写出来一定会有更加深刻的理解，再强调：多思考，形成潜移默化的思维方式.</p>\n<p>​    看完这个步骤之后，是不是很明显的优化点，为什么上面没有给出大家代码呢？是因为我看到貌似可以继续优化的点（粘住空间优化项了哈哈哈），那就继续在空间开销上做文章。</p>\n<p>​    <strong>引导：</strong>根据上述咱们的优化方案，说道 “机器人移动到第2行的时候，第0行数据完全是没有用的状态”，其实当前聪明的读者你想想，再看看，下面的图中（从上图截取过来）。 其实，不仅仅是第 0 行完全没用了，而且在第2 行做移动的时候，移动到位置(i, j)的时候，计算好位置(i, j)，那么接下来，位置(i-1, j)的数据也就没用了。换句话说，边走，第 1 行开始的某些数据也就没用了，还在占着空间</p>\n<p>​    <strong>这块大家一定多想想，多理解，多画图</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131650290.png\" alt=\"image-20230605131650290\"></p>\n<p>下面按照这种思路，看下图的步骤，也画好了用一维数组进行解决问题，也画出来每一步骤与上图的类比过程：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131721361.png\" alt=\"image-20230605131721361\"></p>\n<p>在这里，有犯困的同学可以自己动手画一画，理解一下，个人感觉是一个很好的思维扩展</p>\n<p>接下来，就按照这样的思路进行代码实现，会发现码起来很简单</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">uniquePaths2</span>(<span class=\"params\">self, m, n</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> m &gt; n:</span><br><span class=\"line\">            m, n = n, m</span><br><span class=\"line\"></span><br><span class=\"line\">        dp = [<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m):</span><br><span class=\"line\">                dp[j] = dp[j] + dp[j-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时间复杂度：O(m*n)</p>\n<p>空间复杂度：O(min(m ,n))</p>\n</blockquote>\n<p>是不是从思维方面简单干净了许多</p>\n<p>搞清楚上面的栗子之后呢，我们将上面的例题进行一个简单的难度增加，说白了，就是在路上打几个阻碍点</p>\n<p>来看:</p>\n<h3 id=\"案例三：不同路径II-「来自leetcode63」\"><a href=\"#案例三：不同路径II-「来自leetcode63」\" class=\"headerlink\" title=\"案例三：不同路径II 「来自leetcode63」\"></a>案例三：不同路径II 「来自leetcode63」</h3><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>\n<p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131800138.png\" alt=\"image-20230605131800138\"></p>\n<blockquote>\n<p>说明：m 和 n 的值均不超过 100。</p>\n</blockquote>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码输入:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">  [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">  [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">输出: <span class=\"number\">2</span></span><br><span class=\"line\">解释:</span><br><span class=\"line\">3x3 网格的正中间有一个障碍物。</span><br><span class=\"line\">从左上角到右下角一共有 <span class=\"number\">2</span> 条不同的路径：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</span><br><span class=\"line\"><span class=\"number\">2.</span> 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</span><br></pre></td></tr></table></figure>\n\n<p><strong>咱们先看一下题中的两个关键点：</strong> 关键点1：只能向右或者向下 关键点2：有障碍物为1， 无障碍物为0</p>\n<p>根据 关键点1 和 关键点2 依然按照四个步骤来进行讨论：</p>\n<h5 id=\"步骤一：定义dp数组的含义-2\"><a href=\"#步骤一：定义dp数组的含义-2\" class=\"headerlink\" title=\"步骤一：定义dp数组的含义\"></a>步骤一：定义dp数组的含义</h5><p>这个题目中定义的dp数组是和上一个例题中定义的dp数组的含义是相同的，但由于该题中已经定义有数组obstacleGrid，可以直接利用，无需额外开辟空间 那么，就利用obstacleGrid作为动态规划中存储计算过程中的最优值</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程-2\"><a href=\"#步骤二：找出关系元素间的动态方程-2\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>参照上一题目，规定动态方程: obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1] 由于机器人在移动过程中有障碍物，那么，对上面动态方程加一些限制条件 a.若当前 obstacleGrid[i][j] 为0。那么，直接计算动态方程下的计算过程 b.若当前 obstacleGrid[i][j] 不为0。那么，直接置该位置的值为0</p>\n<p>所以，在进行动态方程遍历的时候，先进行 obstacleGrid[i][j]的判断，再进行动态方程的计算执行</p>\n<h5 id=\"步骤三：初始化数值设定-2\"><a href=\"#步骤三：初始化数值设定-2\" class=\"headerlink\" title=\"步骤三：初始化数值设定\"></a>步骤三：初始化数值设定</h5><p>​    相比于上一题目，相似的是，在机器人走第 0 行，第 0 列的时候，无论怎么走，都只有 1 种走法     但由于有障碍物，那走到障碍物的时候，后面都是走不下去的（下图用第一行来举例）。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131926886.png\" alt=\"image-20230605131926886\"></p>\n<p>​    所以，初始化第 0 行，第 0 列的时候，障碍物 1 后面的都是不可达的。所以，初始化行和列的逻辑表达：</p>\n<p>​    <strong>该位置是否可达=前一个位置的状态and该位置能否可达 得到能否到达这个位置</strong></p>\n<p>​    只有前一个位置为1（可达，只有1种方式） ，当前位置为0（无障碍物）这种情况才能到达该位置，然后为该位置设 1 （可达，只有1种方式）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0 行初始化表达式: </span></span><br><span class=\"line\">obstacleGrid[<span class=\"number\">0</span>][row] = <span class=\"built_in\">int</span>(obstacleGrid[<span class=\"number\">0</span>][row] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> obstacleGrid[<span class=\"number\">0</span>][row-<span class=\"number\">1</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\"># 0 列初始化表达式: </span></span><br><span class=\"line\">obstacleGrid[clo][<span class=\"number\">0</span>] = <span class=\"built_in\">int</span>(obstacleGrid[clo][<span class=\"number\">0</span>] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> obstacleGrid[clo-<span class=\"number\">1</span>][<span class=\"number\">0</span>] == <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这些都准备就绪之后，按照相关思路进行编码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">uniquePathsWithObstacles1</span>(<span class=\"params\">self, obstacleGrid</span>):</span><br><span class=\"line\">      \t<span class=\"comment\"># 行列长度</span></span><br><span class=\"line\">        m = <span class=\"built_in\">len</span>(obstacleGrid)</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(obstacleGrid[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果在位置(0, 0)，哪里都去不了，直接返回0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> obstacleGrid[<span class=\"number\">0</span>][<span class=\"number\">0</span>] == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 否则，位置(0, 0)可以到达</span></span><br><span class=\"line\">        obstacleGrid[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 初始化 0 列</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> clo <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m):</span><br><span class=\"line\">            obstacleGrid[clo][<span class=\"number\">0</span>] = <span class=\"built_in\">int</span>(obstacleGrid[clo][<span class=\"number\">0</span>] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> obstacleGrid[clo-<span class=\"number\">1</span>][<span class=\"number\">0</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 初始化 0 行</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            obstacleGrid[<span class=\"number\">0</span>][row] = <span class=\"built_in\">int</span>(obstacleGrid[<span class=\"number\">0</span>][row] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> obstacleGrid[<span class=\"number\">0</span>][row-<span class=\"number\">1</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 从位置(1, 1)根据动态方程开始计算</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> obstacleGrid[i][j] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    obstacleGrid[i][j] = obstacleGrid[i-<span class=\"number\">1</span>][j] + obstacleGrid[i][j-<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    obstacleGrid[i][j] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> obstacleGrid[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时间复杂度: O(mxn)</p>\n<p>空间复杂度: O(1)</p>\n</blockquote>\n<h5 id=\"步骤四：优化-2\"><a href=\"#步骤四：优化-2\" class=\"headerlink\" title=\"步骤四：优化\"></a>步骤四：优化</h5><p>​    这块的优化先不谈了，这里基本没有什么优化点，之前都是由于自己要开辟内存空间，通过空间的优化来进行，而本题是在给定的数组中进行操作的</p>\n<p>有了这几个案例的基础之后，咱们后面把经典的《打家劫舍》系列剩下的两个题目讨论完，就先告一段落，后面也希望以不同的方式与大家多多交流，互相学习</p>\n<p>如果有读者看着累了，可以先保存，收藏下来，待消化了前面的内容，方便再回来看看。</p>\n<h3 id=\"案例四：打家劫舍II-「来自leetcode213」\"><a href=\"#案例四：打家劫舍II-「来自leetcode213」\" class=\"headerlink\" title=\"案例四：打家劫舍II 「来自leetcode213」\"></a>案例四：打家劫舍II 「来自leetcode213」</h3><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python复制代码输入: [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出: <span class=\"number\">3</span></span><br><span class=\"line\">解释: 你不能先偷窃 <span class=\"number\">1</span> 号房屋（金额 = <span class=\"number\">2</span>），然后偷窃 <span class=\"number\">3</span> 号房屋（金额 = <span class=\"number\">2</span>）, 因为他们是相邻的。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python复制代码输入: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出: <span class=\"number\">4</span></span><br><span class=\"line\">解释: 你可以先偷窃 <span class=\"number\">1</span> 号房屋（金额 = <span class=\"number\">1</span>），然后偷窃 <span class=\"number\">3</span> 号房屋（金额 = <span class=\"number\">3</span>）。</span><br><span class=\"line\">     偷窃到的最高金额 = <span class=\"number\">1</span> + <span class=\"number\">3</span> = <span class=\"number\">4</span> 。</span><br></pre></td></tr></table></figure>\n\n<p>与《打家劫舍I》不同的是，《打家劫舍I》的屋子是线性的，而《打家劫舍II》是环状的，所以要考虑的点会增加一些，因为首位相连接的情况，咱们分为下面三种情况进行设定：</p>\n<p>a. 不偷首偷尾</p>\n<p>b. 偷首不偷尾</p>\n<p>c. 首位都不偷 显然，c 种方式损失太大，不会获得最高的金额，故选取 a 和 b。 那么，下面分为两种情况，分别计算不包含首和不包含尾这两种情况来判断小偷哪种方式偷取的金额最高。</p>\n<p>下面依然按照之前的四个步骤来进行分析</p>\n<h5 id=\"步骤一：-定义dp数组的含义-1\"><a href=\"#步骤一：-定义dp数组的含义-1\" class=\"headerlink\" title=\"步骤一： 定义dp数组的含义\"></a>步骤一： 定义dp数组的含义</h5><p>​    dp[i] 代表的含义和之前一致，dp数组存储的值一般代表截止目前的最优值</p>\n<p>​    所以，<strong>dp[i] 代表到达第 i 个房屋偷得的最高金额，也就是当前最大子序和</strong></p>\n<p>​    但是最后会讨论<strong>不包含首</strong>和<strong>不包含尾</strong>这两种情况下得到的dp数组的最后一位，然后获取其中较大者，就是我们要取得的最高金额</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程-3\"><a href=\"#步骤二：找出关系元素间的动态方程-3\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>​    动态方程可参照《打家劫舍I》，有很详细的图解过程，该例子动态方程的变化和之前是完全一致的：</p>\n<p>​    <strong>dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])</strong></p>\n<h5 id=\"步骤三：初始化设定\"><a href=\"#步骤三：初始化设定\" class=\"headerlink\" title=\"步骤三：初始化设定\"></a>步骤三：初始化设定</h5><p>​    初始化: 给没有房子时，dp一个位置，即：dp[0]         a. 当size=0时，没有房子，小偷没办法偷：dp[0]=0；         b. 当size=1时，有一间房子，只要偷即可：dp[1]=nums[0]</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605150914733.png\" alt=\"image-20230605150914733\"></p>\n<p>​    由于屋子首位相连接，所以在计算时候，直接分为两种情况。第一种略过第一个屋子，第二种略过第二个屋子，这样得到的两个数组结果。最后只要比较最后一位数值的大小就ok了。解决！</p>\n<p>该例子步骤三之后，感兴趣的同学可以自己写一下代码，和《打家劫舍I》的代码很类似，后面我写了优化后的代码，可能会更加的明白怎么写。咱们直接到步骤四，有了上面的案例，直接来看看优化后的方案:</p>\n<h5 id=\"步骤四：优化-3\"><a href=\"#步骤四：优化-3\" class=\"headerlink\" title=\"步骤四：优化\"></a>步骤四：优化</h5><p>​    同样从 dp[i] = max(dp[i-1], nums[i-1]+dp[i-2]) 关系来看，每一次动态变化，都与前两次状态有关系（dp[i-1], dp[i-2])，而前面的一些值是没有必要留存的，只要保存两个变量来保存过程最优值就好.</p>\n<p>​    代码中有详细的注释：</p>\n<pre><code>class Solution(object):\ndef rob(self, nums):\n    # 点睛：与打家劫舍I的区别是屋子围成了一个环\n    #   那么，很明显可以分为三种情况：\n    #   1. 首位都不偷\n    #   2. 偷首不偷尾\n    #   3. 不偷首偷尾\n    # 显然，第1种方式损失太大，选取2、3。\n    # 那么，分为两种情况，分别计算不包含首和不包含尾这两种情况来判断哪个大哪个小\n\n    # 1.dp[i] 代表当前最大子序和\n    # 2.动态方程: dp[i] = max(dp[i-1] and , nums[i-1]+dp[i-2])\n    # 3.初始化: 给没有房子时，dp一个位置，即：dp[0]\n    #   3.1 当size=0时，没有房子，dp[0]=0；\n    #   3.2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]\n\n    # 依照《打家劫舍I》的优化方案进行计算\n\n    # nums处理，分别切割出去首和去尾的子串\n    nums1 = nums[1:]\n    nums2 = nums[:-1]\n\n    size = len(nums)\n    if size == 0:\n        return 0\n    if size == 1:\n        return nums[0]\n\n    def handle(size, nums):\n        dp1 = 0\n        dp2 = nums[0]\n        for i in range(2, size+1):\n            dp1 = max(dp2, nums[i-1]+dp1)\n            dp1, dp2 = dp2, dp1\n        return dp2\n\n    res1 = handle(size-1, nums1)\n    res2 = handle(size-1, nums2)\n\n    return max(res1, res2)\n</code></pre>\n<blockquote>\n<p>时间复杂度：O(N)</p>\n<p>空间复杂度：O(1)</p>\n</blockquote>\n<p>再看看下面小偷遇到的情况，感叹：即使当小偷，也要步步规划才能拿到最高的金额啊…</p>\n<h3 id=\"案例五：打家劫舍III-「来自leetcode337」\"><a href=\"#案例五：打家劫舍III-「来自leetcode337」\" class=\"headerlink\" title=\"案例五：打家劫舍III 「来自leetcode337」\"></a>案例五：打家劫舍III 「来自leetcode337」</h3><p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。</p>\n<p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码输入: [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,null,<span class=\"number\">3</span>,null,<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"number\">3</span></span><br><span class=\"line\">\t/ \\</span><br><span class=\"line\">   <span class=\"number\">2</span>   <span class=\"number\">3</span></span><br><span class=\"line\">    \\   \\ </span><br><span class=\"line\">     <span class=\"number\">3</span>   <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出: <span class=\"number\">7</span> </span><br><span class=\"line\">解释: 小偷一晚能够盗取的最高金额 = <span class=\"number\">3</span> + <span class=\"number\">3</span> + <span class=\"number\">1</span> = <span class=\"number\">7.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,null,<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"> \t <span class=\"number\">3</span></span><br><span class=\"line\">\t/ \\</span><br><span class=\"line\">   <span class=\"number\">4</span>   <span class=\"number\">5</span></span><br><span class=\"line\">  / \\   \\ </span><br><span class=\"line\"> <span class=\"number\">1</span>   <span class=\"number\">3</span>   <span class=\"number\">1</span></span><br><span class=\"line\">输出: <span class=\"number\">9</span></span><br><span class=\"line\">解释: 小偷一晚能够盗取的最高金额 = <span class=\"number\">4</span> + <span class=\"number\">5</span> = <span class=\"number\">9.</span></span><br></pre></td></tr></table></figure>\n\n<p>题目出的很好，但是立马会给人一种小偷也不是好当的的赶脚…</p>\n<p>言归正传，咱们先来说说题目本身</p>\n<p>《打家劫舍》的小偷从一维线性到环形，再到二维矩形的屋子？是我想简单了，直接就干到树形了，是不是看着很香，而且很想，看下去，研究研究…</p>\n<p>来整理几点思路，再来按照四步走：</p>\n<p>1.由于房屋是树状的，因此，我们可以使用遍历树的传统方法进行遍历(前序、中序、后续) 2.简单的思路是，从树低进行往上遍历，拿到最优的打劫值。可以选用后续遍历 3.得到每一节点的最优值，最后选取最优的结果</p>\n<p>依然按照三个步骤来进行分析（无优化点）</p>\n<h5 id=\"步骤一：-定义dp数组的含义-2\"><a href=\"#步骤一：-定义dp数组的含义-2\" class=\"headerlink\" title=\"步骤一： 定义dp数组的含义\"></a>步骤一： 定义dp数组的含义</h5><p>​    dp[i]代表该节点及以下打最多的劫（拿到最多的钱）</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程-4\"><a href=\"#步骤二：找出关系元素间的动态方程-4\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>​    根据我们每走到一个节点，都会有两种情况，那就是 <strong>偷(1)</strong> 与 **不偷(0)**。我们分开来讨论：</p>\n<p>​    a. 用 <strong>dp[0]</strong> 代表不偷取该节点到目前为止拿到最多的钱，那么儿子节点偷不偷都ok。</p>\n<p>​        所以： <strong>dp[0] = max(left[0], left[1]) + max(right[0], right[1])</strong></p>\n<p>​    b. 用 <strong>dp[1]</strong> 代表偷了该节点到目前为止拿到最多的钱，则儿子节点都不能被偷。</p>\n<p>​        所以：<strong>dp[1] = value + left[0] + right[0]</strong>  (value代表该节点的价值)</p>\n<p>​    有看不懂的地方吗？再紧接着解释一下：</p>\n<p>​        left[0]代表不偷取左孩子拿到最高的金额</p>\n<p>​        left[1]代表偷取左孩子拿到最高的金额</p>\n<p>​        right[0]代表不偷取右孩子拿到最高的金额</p>\n<p>​        right[1]代表偷取右孩子拿到最高的金额</p>\n<p>​    <em>如果还有不太懂的话，留言或者私信我联系我，随时骚扰我哈</em></p>\n<h5 id=\"步骤三：初始化设定-1\"><a href=\"#步骤三：初始化设定-1\" class=\"headerlink\" title=\"步骤三：初始化设定\"></a>步骤三：初始化设定</h5><p>​    该例子的初始化比较简单，就是当前树的形状为空的时候，直接返回dp[0, 0]</p>\n<p>下面贴出完整代码，其中包含<strong>树的初始化</strong>代码 &amp;&amp; 一大堆的注释：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        self.val = x</span><br><span class=\"line\">        self.left = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.right = <span class=\"literal\">None</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">rob</span>(<span class=\"params\">self, root</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 说明：</span></span><br><span class=\"line\">        <span class=\"comment\"># 1.由于房屋是树状的，因此，我们可以使用遍历树的传统方法进行遍历(前序、中序、后续)</span></span><br><span class=\"line\">        <span class=\"comment\"># 2.简单的思路是，从树低进行往上遍历，拿到最优的打劫值。可以选用后续遍历</span></span><br><span class=\"line\">        <span class=\"comment\"># 3.得到每一节点的最优值，最后选取最优的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 1.dp[i]代表该节点及以下拿到的最多的钱</span></span><br><span class=\"line\">        <span class=\"comment\"># 2.动态方程：</span></span><br><span class=\"line\">        <span class=\"comment\">#   2.1 dp[0]代表不偷该节点拿到最多的钱，则儿子节点偷不偷都ok。dp[0] = max(left[0], left[1]) + max(right[0], right[1])</span></span><br><span class=\"line\">        <span class=\"comment\">#   2.2 dp[1]代表偷了该节点拿到最多的钱，则儿子节点都不能被偷。dp[1] = var + left[0] + right[0]</span></span><br><span class=\"line\">        <span class=\"comment\"># 3.初始化：当前树的形状为空的时候，直接返回dp[0, 0]</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">postTrasval</span>(<span class=\"params\">root</span>):</span><br><span class=\"line\">            dp = [<span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> dp</span><br><span class=\"line\">            left = postTrasval(root.left)</span><br><span class=\"line\">            right = postTrasval(root.right)</span><br><span class=\"line\"></span><br><span class=\"line\">            dp[<span class=\"number\">0</span>] = <span class=\"built_in\">max</span>(left[<span class=\"number\">0</span>], left[<span class=\"number\">1</span>]) + <span class=\"built_in\">max</span>(right[<span class=\"number\">0</span>], right[<span class=\"number\">1</span>])</span><br><span class=\"line\">            dp[<span class=\"number\">1</span>] = root.val + left[<span class=\"number\">0</span>] + right[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dp</span><br><span class=\"line\">        dp = postTrasval(root)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(dp[<span class=\"number\">0</span>], dp[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># initial tree structure</span></span><br><span class=\"line\">    T = TreeNode(<span class=\"number\">3</span>)</span><br><span class=\"line\">    T.left = TreeNode(<span class=\"number\">2</span>)</span><br><span class=\"line\">    T.right = TreeNode(<span class=\"number\">3</span>)</span><br><span class=\"line\">    T.left.right = TreeNode(<span class=\"number\">3</span>)</span><br><span class=\"line\">    T.right.right = TreeNode(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># The solution to the Question</span></span><br><span class=\"line\">    s = Solution()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s.rob(T))</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2-递归\"><a href=\"#2-递归\" class=\"headerlink\" title=\"2. 递归\"></a>2. 递归</h1>","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"excerpt":"<p>算法总结</p>","more":"<h1 id=\"1-动态规划\"><a href=\"#1-动态规划\" class=\"headerlink\" title=\"1. 动态规划\"></a>1. 动态规划</h1><h4 id=\"传统递归-vs-DP\"><a href=\"#传统递归-vs-DP\" class=\"headerlink\" title=\"传统递归 vs. DP\"></a>传统递归 vs. DP</h4><p>先用一个被大佬们举例举到烂的🌰，这个栗子很烂，但是真的<strong>很香</strong>：必须着重<strong>强调</strong>.</p>\n<p><strong>《斐波那契（Fibonacci）数列的第n项》</strong></p>\n<p><strong>举荐理由：</strong>在我自己看来Fibonacci是动态规划设计中的入门级案例，就好比说编程中的“hello world”，大数据中的“word count”.</p>\n<p>Fibonacci几乎完美的诠释了<strong>动态规划带来的思想和技巧</strong>然而没有任何其他的要考虑的细枝末节，这种很清晰的方法看起来很适合整个的动态规划的思维方式，很适合入门来进行的思考方式.</p>\n<p>接下来咱们先来看题目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">题目复制代码写一个函数，输入n，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：</span><br><span class=\"line\"></span><br><span class=\"line\">F(0) = 0, F(1) = 1</span><br><span class=\"line\">F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</span><br><span class=\"line\">斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</span><br></pre></td></tr></table></figure>\n\n<p>比较一下传统递归解法和动态规划思想下的解决对比</p>\n<h4 id=\"1-先-递归解决\"><a href=\"#1-先-递归解决\" class=\"headerlink\" title=\"1. 先 递归解决\"></a>1. 先 递归解决</h4><p>传统对于这种题目的思考方式会利用递归求解，做起来比较简单，就是不断的去递归调用，看下面代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fib_recur</span>(<span class=\"params\">N</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> N &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">fib_recur</span>(N-<span class=\"number\">1</span>) + <span class=\"title function_\">fib_recur</span>(N-<span class=\"number\">2</span>)  # 递归输出  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出的结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F( <span class=\"number\">1</span> ) =  <span class=\"number\">3</span></span><br><span class=\"line\">F( <span class=\"number\">2</span> ) =  <span class=\"number\">2</span></span><br><span class=\"line\">F( <span class=\"number\">3</span> ) =  <span class=\"number\">1</span></span><br><span class=\"line\">F( <span class=\"number\">4</span> ) =  <span class=\"number\">0</span></span><br><span class=\"line\">F( <span class=\"number\">5</span> ) =  <span class=\"number\">1</span></span><br><span class=\"line\">F( <span class=\"number\">6</span> ) =  <span class=\"number\">2</span></span><br><span class=\"line\">F( <span class=\"number\">7</span> ) =  <span class=\"number\">1</span></span><br><span class=\"line\">F( <span class=\"number\">8</span> ) =  <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>重复计算</strong></p>\n<p>明显可以看到，总计 8 次的计算过程中，相同的计算结果有三对进行了<strong>重复计算</strong>（下图中同色项，不包含灰色），也就是说在递归的过程中，把曾经计算过的项进行了<strong>又一次的重复计算</strong>，这样对于时间效率是比较低的，唯一的好处可能就是代码看起来比较好懂，但是终归不是一个好的算法设计方法。</p>\n<p>代码中，在计算N的时候就去递归计算 <code>fib(N-1) + fib(N-2)</code>，那么，这种情况下的计算过程中。会是下面图中的一个计算过程。</p>\n<p>可以发现，会有相当一部分的重复计算，这样对于时间都是重复的消耗。</p>\n<blockquote>\n<p>参考图中相同颜色的项，比如说粉色的重复计算、黄色的重复计算等</p>\n<p>注意：递归中没有对空间进行了增加，始终都是同样的长度，仅仅是不断的弹出和压入</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114156368.png\" alt=\"image-20230605114156368\"></p>\n<p>为了更好的说明这种重复计算带来时间效率的低下。再比如说，相比上述图中的计算节点，再增加一个节点的计算，增加计算F(5)，那么由于递归的计算方式，会有更多的项（下图中线框中部分）进行了重复的计算。在计算<code>F(5)</code>的时候，会递归调用<code>F(4)</code>和<code>F(3)</code>，而在下图中，计算<code>F(4)</code>的时候，又会完整的去计算<code>F(3)</code>。这样，如果N很大的话，会有更大的时间消耗.</p>\n<p>这样，这棵树的规模进行进行成倍增加，时间复杂度很明显的进行了成倍的扩张。对于时间上来说是很恐怖的.</p>\n<p>时间复杂度带来的低效率严重超过了代码的可读性，所以我们可以想办法将<strong>过去计算</strong>过的节点<strong>进行保存</strong>。这样，我们就会用到下面要说的动态规划思想带来的时间上的高效.</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114342318.png\" alt=\"image-20230605114342318\"></p>\n<blockquote>\n<p>时间复杂度：o(2**n) —&gt; 指数级</p>\n<p>空间复杂度：o(n)</p>\n</blockquote>\n<h4 id=\"2-后-动态规划解决\"><a href=\"#2-后-动态规划解决\" class=\"headerlink\" title=\"2. 后 动态规划解决\"></a>2. 后 动态规划解决</h4><p><strong>大概解释一下字面意思：</strong></p>\n<p><strong>动态规划：我们不直接去解决问题，而是在每一步解决问题的时候，达到每一步的最优情况。换句话说，就是在每一步解决问题过程中，利用过去的状态</strong>以及<strong>当前状态</strong>的情况而达到一个当前的最优状态.</p>\n<p><em>*规划：在一般解决该类问题的时候，会有一个“填表格”的过程，无论是简单情况下的**一维表格**还是复杂一点的</em>*二维表格<strong>，都是以</strong>开辟空间换时间**的思想，以争取最佳的时间效率. （保存过程中间值，方便后续直接使用）.</p>\n<p><strong>动态：</strong>用上面的案例来说，递归解决过程中的每一步都会从基本问题不断的“自顶向下”去求解，在每一步骤中，会有相同的计算逻辑进行了重复的计算。相比于递归思想，动态规划思想增加了对历史上计算结果的保存，逐步记录下中间的计算结果，在每一步求得最优值.</p>\n<p>因此，动态规划可以避免重复计算，达到了时间上的最优，从O(2N)O(2^N)O(2N)指数级变为O(N)O(N)O(N)常数级别，相较于开辟的一段内存空间存放中间过程值的开销，是非常值得的.</p>\n<p><strong>那么，接下来咱们依照动态规划的思路进行对Fibonacci进行下解决</strong></p>\n<p>依据题中的规则：</p>\n<p>F(0) = 0, F(1) = 1</p>\n<p>F(N) = F(N - 1) + F(N - 2),  when N &gt; 1</p>\n<p>那么，👇👇F(N) 的值只与他的前两个状态有关系👇👇</p>\n<p>a. 初始化值 : F(0) = 0, F(1) = 1 b. 想要计算得到F(2)， 那么F(2) = F(0) + F(1)   –&gt;  保存 F(2) c. 想要计算得到F(3)， 那么F(3) = F(2) + F(1)   –&gt;  保存 F(3) d. 想要计算得到F(3)， 那么F(4) = F(3) + F(2)   –&gt;  保存 F(4)</p>\n<p>利用动态规划思想，以一维数组辅助实现的Fibonacci，看下图</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114740415.png\" alt=\"image-20230605114740415\"></p>\n<p>是不是很简单的思路，仅仅靠保存过程中的一些值就能很简单的利用循环就可以实现了，没必要用递归反复计算进行实现。</p>\n<p>想要计算得到第 n 个值的多少？那么，以下几点是我们必须要做到的</p>\n<p>​    a. <strong>定义一个一维数组</strong>   —&gt;  一般用dp来命名</p>\n<p>​    b. <strong>动态方程的设定</strong>   —&gt;  题中的F(N) = F(N - 1) + F(N - 2)</p>\n<p>​    c. <strong>初始化数值</strong>   —&gt;  F(0) = 0和F(1) = 1</p>\n<p>上述的 a、b 和 c 点就是动态规划思想的几个核心要素</p>\n<p>下面来看下要实现的代码（代码中，用dp来代替上面的F()）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">fib</span>(<span class=\"params\">self, N</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> N == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        dp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N+<span class=\"number\">1</span>)] <span class=\"comment\"># 1定义dp[i]保存第i个计算得到的数值</span></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>   \t<span class=\"comment\"># 2初始化</span></span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>\t\t\t<span class=\"comment\"># 2初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, N+<span class=\"number\">1</span>):\t<span class=\"comment\"># 3动态方程实现，由于0和1都实现了赋值，现在需要从第2个位置开始赋值</span></span><br><span class=\"line\">            dp[i] = dp[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">2</span>]</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"built_in\">print</span> dp\t\t <span class=\"comment\"># 记录计算过程中的次数，与上述递归形成对比</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[N]</span><br></pre></td></tr></table></figure>\n\n<p>输出:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>以上，最重要的就是1 2 3 点，而执行过程参照<strong>输出</strong>对比递归算法，计算少了很多，同样的计算只计算了一次。</p>\n<blockquote>\n<p>时间复杂度：O(N)</p>\n<p>空间复杂度：O(N)</p>\n</blockquote>\n<p>介绍了上面的内容了，此处来条分割线吧，针对上述的 <strong>递归 vs. DP</strong></p>\n<hr>\n<p>既然动态规划的方案也介绍了，下面咱们再仔细看看，是否有优化的空间，毕竟对于一个算法方案的设计，都有找到其优化点，无论是时间还是空间的效率都想要达到一个理想的值。</p>\n<h4 id=\"3-动态规划-优化\"><a href=\"#3-动态规划-优化\" class=\"headerlink\" title=\"3. 动态规划 + 优化\"></a>3. 动态规划 + 优化</h4><p>咱们看下这张图解，发现每个计算节点都<strong>只与前两个项有关系</strong>。换句话说，咱们只要保存两个值就好了，计算新的节点值的时候，把新的值赋值给前两个值的第一个就好了</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115233956.png\" alt=\"image-20230605115233956\"></p>\n<p>话说只要两个值，现在定义两个变量 dp1 和 dp2。那么，现在咱们一步一步模拟一下：</p>\n<p>a. 初始化值 : F(0) = 0, F(1) = 1</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115254829.png\" alt=\"image-20230605115254829\"></p>\n<p>b. 想要计算得到F(2)， 那么F(2) = F(0) + F(1) –&gt; 保存 F(2)</p>\n<p> 顺带将F(1)赋值给dp1， f(2)赋值给dp2</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115319902.png\" alt=\"image-20230605115319902\"></p>\n<p>c. 想要计算得到F(3)， 那么F(3) = F(2) + F(1) –&gt; 保存 F(3)</p>\n<p> 顺带将F(2)赋值给dp1， F(3)赋值给dp2</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115336720.png\" alt=\"image-20230605115336720\"></p>\n<p>d. 想要计算得到F(3)， 那么F(4) = F(3) + F(2) –&gt; 保存 F(4)</p>\n<p> 顺带将F(3)赋值给dp1， F(4)赋值给dp2</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115356096.png\" alt=\"image-20230605115356096\"></p>\n<p>至此为止，整个过程仅仅用到了两个变量来存储过程中产生的值，也就之前没有优化的空间效率得到了优化</p>\n<p>咱们把代码也贴一下吧，供参考</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">fib_dp1</span>(<span class=\"params\">self, N</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> N == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dp1, dp2 = <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, N+<span class=\"number\">1</span>):</span><br><span class=\"line\">            dp1 = dp1 + dp2</span><br><span class=\"line\">            dp1, dp2 = dp2, dp1</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp2</span><br></pre></td></tr></table></figure>\n\n<p>看起来是不是更加简洁了。</p>\n<p>三点说明：<strong>1.定义dp数组 2.动态方程 3.初始化数值</strong></p>\n<p>这也说明了为什么用<strong>斐波那契数列</strong>来引入<strong>动态规划</strong>的，因为斐波那契数列本身就明确的告诉你动态方程是什么，初始化的值是什么，所以好好的体会这种思想，尤其是从传统递归 -&gt; 动态规划的思想解决，再到优化的方面，很值得深思。</p>\n<p>那接下来，咱们就找几个有代表性的栗子来尝尝鲜</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115624586.png\" alt=\"image-20230605115624586\"></p>\n<h2 id=\"二、动态规划四大解题步骤处理问题\"><a href=\"#二、动态规划四大解题步骤处理问题\" class=\"headerlink\" title=\"二、动态规划四大解题步骤处理问题\"></a>二、动态规划四大解题步骤处理问题</h2><p>上面用斐波那契数列问题，引出了下面的几点，在这里再详细赘述一下</p>\n<p>在后面的案例中将会尽量严格按照这几个步骤进行解决问题</p>\n<blockquote>\n<p>步骤一：定义dp数组的含义</p>\n<p>步骤二：定义状态转移方程</p>\n<p>步骤三：初始化过程转移的初始值</p>\n<p>步骤四：可优化点(可选)</p>\n</blockquote>\n<h4 id=\"步骤一：定义dp数组的含义\"><a href=\"#步骤一：定义dp数组的含义\" class=\"headerlink\" title=\"步骤一：定义dp数组的含义\"></a>步骤一：定义dp数组的含义</h4><p>绝大部分情况下，我们需要定义一维数组或者二维数组进行存储在计算过程中产生的最优值，这里为什么是最优值呢？是因为在解决问题过程中，一般情况dp数组用来保存<strong>从开始到当前情况的最优值</strong>，故而保存的是截止到目前的最优值，避免重复计算（这里看起来思维有混乱的同学们，想想上面Fibonacci 递归解法和动态规划的对比）</p>\n<p><strong>所以，dp无论是一维的还是二维的，要想清楚代表什么，一般来说代表的是截止到目前情况下的最优值</strong></p>\n<h4 id=\"步骤二：定义状态转移方程\"><a href=\"#步骤二：定义状态转移方程\" class=\"headerlink\" title=\"步骤二：定义状态转移方程\"></a>步骤二：定义状态转移方程</h4><p>什么是动态转移方程？ 如果有一个问题摆在我们面前，然后这个问题在解决的过程中，会发现有很多的重叠的子问题，重叠子结构，而通过这些子问题的解决，最终将会把该问题进行解决</p>\n<p>通俗来说，在解决问题过程中，能够发现一个不断解决子问题的动态规律，比如说Fibonacci中的F(N) = F(N - 1) + F(N - 2)，而在其他的可以用动态规划解决的问题中，需要我们自己去发现这样的内在规律。这个是最难的也是最终于要的，只要这一步解决了，接下来我们解决这个问题基本就没问题了.</p>\n<h4 id=\"步骤三：初始化过程转移的初始值\"><a href=\"#步骤三：初始化过程转移的初始值\" class=\"headerlink\" title=\"步骤三：初始化过程转移的初始值\"></a>步骤三：初始化过程转移的初始值</h4><p>顺着步骤二的思路来，既然动态方程定义好了，是不是需要一个<strong>支点</strong>来撬动它进行不断的计算下去。</p>\n<p>那么，这个<strong>支点</strong>就需要我们来初始定义，将动态方程激活，进行计算。举例来说Fibonacci中的F(0) = 0和F(1) = 1，有了这两个值，它的动态方程F(N) = F(N - 1) + F(N - 2)就可以进行下去了</p>\n<p>这个就是我们要想好的初始值，实际问题可能还需要我们想想清楚.</p>\n<h4 id=\"步骤四：可优化点-可选\"><a href=\"#步骤四：可优化点-可选\" class=\"headerlink\" title=\"步骤四：可优化点(可选)\"></a>步骤四：可优化点(可选)</h4><p>可优化的这里，最重要的会是dp数组这块，也会有不同问题不同的优化点</p>\n<p>在例子中，我们会进行不同的优化.</p>\n<p>总之一点，建议大家动笔多画画图，很多细节慢慢就会出现了.</p>\n<h3 id=\"案例一：打家劫舍I-「来自leetcode198」\"><a href=\"#案例一：打家劫舍I-「来自leetcode198」\" class=\"headerlink\" title=\"案例一：打家劫舍I 「来自leetcode198」\"></a>案例一：打家劫舍I 「来自leetcode198」</h3><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码输入: [1,2,3,1]</span><br><span class=\"line\">输出: 4</span><br><span class=\"line\">解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class=\"line\">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例2：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出: <span class=\"number\">12</span></span><br><span class=\"line\">解释: 偷窃 <span class=\"number\">1</span> 号房屋 (金额 = <span class=\"number\">2</span>), 偷窃 <span class=\"number\">3</span> 号房屋 (金额 = <span class=\"number\">9</span>)，接着偷窃 <span class=\"number\">5</span> 号房屋 (金额 = <span class=\"number\">1</span>)。</span><br><span class=\"line\">     偷窃到的最高金额 = <span class=\"number\">2</span> + <span class=\"number\">9</span> + <span class=\"number\">1</span> = <span class=\"number\">12</span> 。</span><br></pre></td></tr></table></figure>\n\n<p>把经典案例系列拆分开讨论下吧，咱们首先将「打家劫舍I」来看看</p>\n<p>该题可以用动态规划的思想来解决的原因是，在小偷不断偷取的过程中，始终想要偷得的物品价值最大，最优，每一步骤都与之前的偷取情况有关系，而且每一步都要考虑是否能偷，是否会带来最大利益，这就使得我们可以用动态规划的思想来解决问题。  然后严格按照四步骤进行解题.</p>\n<h5 id=\"步骤一：-定义dp数组的含义\"><a href=\"#步骤一：-定义dp数组的含义\" class=\"headerlink\" title=\"步骤一： 定义dp数组的含义\"></a>步骤一： 定义dp数组的含义</h5><p>​    之前提到的，dp数组存储的值一般代表截止目前的最优值，在该题目中，我们定义：</p>\n<p>​    <strong>dp[i] 代表到达第 i 个房屋偷得的最高金额，也就是当前最大子序和</strong></p>\n<p>​    无论房屋有几间，最后我们取到dp数组的最后一个值就求得小偷偷得的最高金额</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程\"><a href=\"#步骤二：找出关系元素间的动态方程\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>​    动态规划解决的问题，一般来说就是解决最优子问题，“自顶向下” 的去不断的计算每一步骤的最优值。</p>\n<p>​    也就是想要得到dp[i]的值，我们必须要知道dp[i-1]，dp[i-2]，dp[i-3] … 的每一步的最优值，在这个状态转移的过程中，我们必须要想清楚怎么去定义关系式。然而在每一步的计算中，都与前几项有关系，这个固定的关系就是我们要寻找的重叠子问题，也同样是接下来要详细定义的动态方程</p>\n<p>​    该题目中，当小偷到达第 i 个屋子的时候，他的选择有两种：一种是偷，另外一种是不偷， 然后选择价值较大者</p>\n<p>​    a. 偷的情况计算：必然是dp[3] = nums[2] + dp[1]，如果是偷取该屋子的话，相邻屋子是不能偷取的，因此，通项式子是：dp[i] =  nums[i-1] + dp[i-2]</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605123128436.png\" alt=\"image-20230605123128436\"></p>\n<p> b. 不偷的情况计算：必然是dp[3] = dp[2]，如果是不偷取该屋子的话，相邻屋子就是其最优值，因此，通项式子是：dp[i] = dp[i-1]</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605123322989.png\" alt=\"image-20230605123322989\"></p>\n<p>​    最后，要想偷得最高金额，那么，必须选取在偷与不偷之间的最大值作为我们是否选取的关键点。即：</p>\n<p>​    <strong>动态方程:</strong> dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])</p>\n<h5 id=\"步骤三：初始化数值设定\"><a href=\"#步骤三：初始化数值设定\" class=\"headerlink\" title=\"步骤三：初始化数值设定\"></a>步骤三：初始化数值设定</h5><p>​    初始化: 给没有房子时，dp一个位置，即：dp[0]         1 当size=0时，没有房子，dp[0]=0；         2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]</p>\n<p>那么，按照这个思路来整理一下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">rob</span>(<span class=\"params\">self, nums</span>):</span><br><span class=\"line\">      <span class=\"comment\"># 1.dp[i] 代表当前最大子序和</span></span><br><span class=\"line\">      <span class=\"comment\"># 2.动态方程: dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])</span></span><br><span class=\"line\">      <span class=\"comment\"># 3.初始化: 给没有房子时，dp一个位置，即：dp[0]</span></span><br><span class=\"line\">      <span class=\"comment\">#   3.1 当size=0时，没有房子，dp[0]=0；</span></span><br><span class=\"line\">      <span class=\"comment\">#   3.2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]</span></span><br><span class=\"line\">      size = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> size == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">      dp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(size+<span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">      dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">      dp[<span class=\"number\">1</span>] = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, size+<span class=\"number\">1</span>):</span><br><span class=\"line\">        dp[i] = <span class=\"built_in\">max</span>(dp[i-<span class=\"number\">1</span>], nums[i-<span class=\"number\">1</span>]+dp[i-<span class=\"number\">2</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[size]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时间复杂度：O(N)</p>\n<p>空间复杂度：O(N)</p>\n</blockquote>\n<p>那下面想想看有没有可优化的地方，尽量的释放一部分计算机资源</p>\n<h5 id=\"步骤四：优化\"><a href=\"#步骤四：优化\" class=\"headerlink\" title=\"步骤四：优化\"></a>步骤四：优化</h5><p>​    从 dp[i] = max(dp[i-1], nums[i-1]+dp[i-2]) 关系来看，每一次动态变化，都与前两次状态有关系（dp[i-1], dp[i-2])，而前面的一些值是没有必要留存的.</p>\n<p>​    所以，dp只需要定义两个变量就好，将空间复杂度降为O(1)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">rob_o</span>(<span class=\"params\">self, nums</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 依照上面的思路，其实我们用到的数据永远都是dp的dp[i-1]和dp[i-2]两个变量</span></span><br><span class=\"line\">        <span class=\"comment\"># 因此，我们可以使用两个变量来存放前两个状态值</span></span><br><span class=\"line\">        <span class=\"comment\"># 空间使用由O(N) -&gt; O(1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        size = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> size == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dp1 = <span class=\"number\">0</span></span><br><span class=\"line\">        dp2 = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, size+<span class=\"number\">1</span>):</span><br><span class=\"line\">            dp1 = <span class=\"built_in\">max</span>(dp2, nums[i-<span class=\"number\">1</span>]+dp1)</span><br><span class=\"line\">            dp1, dp2 = dp2, dp1</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp2</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时间复杂度：O(N)</p>\n<p>空间复杂度：O(1)</p>\n</blockquote>\n<p>说完《打家劫舍I 》，中间穿插另外一道题目，利用二维dp来解决的一个问题。</p>\n<p>最后再说说《打家劫舍II 》和《打家劫舍III》，把这一系列的<strong>打家劫舍</strong>问题搞明白了，相信你对动态规划有一个较为深刻的入门体验</p>\n<h3 id=\"案例二：不同路径「来自leetcode62」\"><a href=\"#案例二：不同路径「来自leetcode62」\" class=\"headerlink\" title=\"案例二：不同路径「来自leetcode62」\"></a>案例二：不同路径「来自leetcode62」</h3><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605130822926.png\" alt=\"image-20230605130822926\"></p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: m = <span class=\"number\">3</span>, n = <span class=\"number\">2</span></span><br><span class=\"line\">输出: <span class=\"number\">3</span></span><br><span class=\"line\">解释:</span><br><span class=\"line\">从左上角开始，总共有 <span class=\"number\">3</span> 条路径可以到达右下角。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 向右 -&gt; 向右 -&gt; 向下</span><br><span class=\"line\"><span class=\"number\">2.</span> 向右 -&gt; 向下 -&gt; 向右</span><br><span class=\"line\"><span class=\"number\">3.</span> 向下 -&gt; 向右 -&gt; 向右</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python复制代码输入: m = <span class=\"number\">7</span>, n = <span class=\"number\">3</span></span><br><span class=\"line\">输出: <span class=\"number\">28</span></span><br></pre></td></tr></table></figure>\n\n<p><em>提示：</em></p>\n<p>1 &lt;= m, n &lt;= 100 题目数据保证答案小于等于 2 * 10 ^ 9</p>\n<p>下面依然按照四个步骤来进行讨论：</p>\n<h5 id=\"步骤一：定义dp数组的含义-1\"><a href=\"#步骤一：定义dp数组的含义-1\" class=\"headerlink\" title=\"步骤一：定义dp数组的含义\"></a>步骤一：定义dp数组的含义</h5><p>​    当前这道题是从左上角到右下角的，题目中规定只能向右或者向下走，所以我们必须要定义一个二维数组来保存计算过程中的值。所以，这块定义：</p>\n<p>​    <strong>dp[i][j]: 代表到达位置 (i, j) 的所有路径的总数</strong></p>\n<p>​    即：机器人从左上角到右下角所有路径的总和，dp中每个位置的值代表行走到达 (i, j) 每个位置的总共的路径数</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程-1\"><a href=\"#步骤二：找出关系元素间的动态方程-1\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>​    由于题目中规定只能向右或者向下走，所以在机器人行进的时候，只能是向右或向下.</p>\n<p>​    那么，分别讨论下两种情况，想要到达位置(i, j)，可以从位置(i-1, j)或者(i, j-1)出发到达。因此，到达位置(i, j) 的总的路径数一定是 <strong>到达位置(i-1, j)路径数</strong> + <strong>到达位置(i, j-1)路径数</strong>。那么，现在可以定义动态方程：</p>\n<p>​    <strong>动态方程：dp[i][j] = dp[i-1][j] + dp[i][j-1]</strong></p>\n<h5 id=\"步骤三：初始化数值设定-1\"><a href=\"#步骤三：初始化数值设定-1\" class=\"headerlink\" title=\"步骤三：初始化数值设定\"></a>步骤三：初始化数值设定</h5><p>​    很明显，在机器人走第 0 行，第 0 列的时候，无论怎么走，都只有 1 种走法。</p>\n<p>​    因此，初始化值的设定，一定是 dp[0..m][1] 或者 dp[1][0..n] 都等于1</p>\n<p>​    因此初始值如下：</p>\n<p>​    <strong>dp[0] [0….n-1] = 1;</strong>  // 机器人一直向右走，第 0 列统统为 1</p>\n<p>​    <strong>dp[0…m-1] [0] = 1;</strong>  // 机器人一直向下走，第 0 列统统为 1</p>\n<p>​    现在，按照这个思路来整理一下代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">uniquePaths1</span>(<span class=\"params\">self, m, n</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 初始化表格，由于初始化0行 0列都为1。那么，先全部置为1</span></span><br><span class=\"line\">        dp = [[<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m):</span><br><span class=\"line\">                dp[i][j] = dp[i-<span class=\"number\">1</span>][j] + dp[i][j-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n-<span class=\"number\">1</span>][m-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中由于dp[[0..m][1] ][1]或者 dp[1][0..n] 都等于1，所以在定义二维数组dp时候，统统赋初始值为 1</p>\n<p>然后从位置(1, 1)开始计算每个位置的总路径数</p>\n<blockquote>\n<p>时间复杂度：O(M*N)</p>\n<p>空间复杂度：O(M*N)</p>\n</blockquote>\n<p>既然到这里了，下面再想想看有没有可优化的地方</p>\n<h5 id=\"步骤四：优化-1\"><a href=\"#步骤四：优化-1\" class=\"headerlink\" title=\"步骤四：优化\"></a>步骤四：优化</h5><p>​    可以依照前面的解决的思路，应该也可以从空间上进行一定的优化</p>\n<p>​    参照前面的案例，之前定义的是一维数组dp，优化点是每一步骤都只与前面的两个计算好的数值有关系，然后优化点就是将dp[N] -&gt; dp1和dp2，空间复杂度由 O(N) -&gt; O(1)，如果是很大规模的数据计算的话，空间效率提升了不少.</p>\n<p>​    现在这个例子中的动态方程是**dp[i][j] = dp[i-1][j] + dp[i][j-1]*<em>，很明显，每一步骤中的状态值只与左边相邻的值和上面的值相关。举例（为了方便，用 3</em>4 来举例）：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131507215.png\" alt=\"image-20230605131507215\"></p>\n<p>​    这个完整的图片描述中，机器人从左上角的位置(1, 1)开始移动，逐渐每一步都根据动态方程进行前进，明显的可以看出机器人每移动一格，所得到的路径总和只与它的上方和左方数值有关系。也就是我们会发现，机器人移动到第2行的时候，第0行数据完全是没有用的状态。</p>\n<p>​    因此，这个优化点就出来了，在算法设计的时候，dp仅仅定义2行N列的数组就ok了，省去了m-2行的空间开销。这个代码如果大家想明白了请自行设计出来，自己写出来一定会有更加深刻的理解，再强调：多思考，形成潜移默化的思维方式.</p>\n<p>​    看完这个步骤之后，是不是很明显的优化点，为什么上面没有给出大家代码呢？是因为我看到貌似可以继续优化的点（粘住空间优化项了哈哈哈），那就继续在空间开销上做文章。</p>\n<p>​    <strong>引导：</strong>根据上述咱们的优化方案，说道 “机器人移动到第2行的时候，第0行数据完全是没有用的状态”，其实当前聪明的读者你想想，再看看，下面的图中（从上图截取过来）。 其实，不仅仅是第 0 行完全没用了，而且在第2 行做移动的时候，移动到位置(i, j)的时候，计算好位置(i, j)，那么接下来，位置(i-1, j)的数据也就没用了。换句话说，边走，第 1 行开始的某些数据也就没用了，还在占着空间</p>\n<p>​    <strong>这块大家一定多想想，多理解，多画图</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131650290.png\" alt=\"image-20230605131650290\"></p>\n<p>下面按照这种思路，看下图的步骤，也画好了用一维数组进行解决问题，也画出来每一步骤与上图的类比过程：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131721361.png\" alt=\"image-20230605131721361\"></p>\n<p>在这里，有犯困的同学可以自己动手画一画，理解一下，个人感觉是一个很好的思维扩展</p>\n<p>接下来，就按照这样的思路进行代码实现，会发现码起来很简单</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">uniquePaths2</span>(<span class=\"params\">self, m, n</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> m &gt; n:</span><br><span class=\"line\">            m, n = n, m</span><br><span class=\"line\"></span><br><span class=\"line\">        dp = [<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m):</span><br><span class=\"line\">                dp[j] = dp[j] + dp[j-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时间复杂度：O(m*n)</p>\n<p>空间复杂度：O(min(m ,n))</p>\n</blockquote>\n<p>是不是从思维方面简单干净了许多</p>\n<p>搞清楚上面的栗子之后呢，我们将上面的例题进行一个简单的难度增加，说白了，就是在路上打几个阻碍点</p>\n<p>来看:</p>\n<h3 id=\"案例三：不同路径II-「来自leetcode63」\"><a href=\"#案例三：不同路径II-「来自leetcode63」\" class=\"headerlink\" title=\"案例三：不同路径II 「来自leetcode63」\"></a>案例三：不同路径II 「来自leetcode63」</h3><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>\n<p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131800138.png\" alt=\"image-20230605131800138\"></p>\n<blockquote>\n<p>说明：m 和 n 的值均不超过 100。</p>\n</blockquote>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码输入:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">  [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">  [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">输出: <span class=\"number\">2</span></span><br><span class=\"line\">解释:</span><br><span class=\"line\">3x3 网格的正中间有一个障碍物。</span><br><span class=\"line\">从左上角到右下角一共有 <span class=\"number\">2</span> 条不同的路径：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</span><br><span class=\"line\"><span class=\"number\">2.</span> 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</span><br></pre></td></tr></table></figure>\n\n<p><strong>咱们先看一下题中的两个关键点：</strong> 关键点1：只能向右或者向下 关键点2：有障碍物为1， 无障碍物为0</p>\n<p>根据 关键点1 和 关键点2 依然按照四个步骤来进行讨论：</p>\n<h5 id=\"步骤一：定义dp数组的含义-2\"><a href=\"#步骤一：定义dp数组的含义-2\" class=\"headerlink\" title=\"步骤一：定义dp数组的含义\"></a>步骤一：定义dp数组的含义</h5><p>这个题目中定义的dp数组是和上一个例题中定义的dp数组的含义是相同的，但由于该题中已经定义有数组obstacleGrid，可以直接利用，无需额外开辟空间 那么，就利用obstacleGrid作为动态规划中存储计算过程中的最优值</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程-2\"><a href=\"#步骤二：找出关系元素间的动态方程-2\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>参照上一题目，规定动态方程: obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1] 由于机器人在移动过程中有障碍物，那么，对上面动态方程加一些限制条件 a.若当前 obstacleGrid[i][j] 为0。那么，直接计算动态方程下的计算过程 b.若当前 obstacleGrid[i][j] 不为0。那么，直接置该位置的值为0</p>\n<p>所以，在进行动态方程遍历的时候，先进行 obstacleGrid[i][j]的判断，再进行动态方程的计算执行</p>\n<h5 id=\"步骤三：初始化数值设定-2\"><a href=\"#步骤三：初始化数值设定-2\" class=\"headerlink\" title=\"步骤三：初始化数值设定\"></a>步骤三：初始化数值设定</h5><p>​    相比于上一题目，相似的是，在机器人走第 0 行，第 0 列的时候，无论怎么走，都只有 1 种走法     但由于有障碍物，那走到障碍物的时候，后面都是走不下去的（下图用第一行来举例）。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131926886.png\" alt=\"image-20230605131926886\"></p>\n<p>​    所以，初始化第 0 行，第 0 列的时候，障碍物 1 后面的都是不可达的。所以，初始化行和列的逻辑表达：</p>\n<p>​    <strong>该位置是否可达=前一个位置的状态and该位置能否可达 得到能否到达这个位置</strong></p>\n<p>​    只有前一个位置为1（可达，只有1种方式） ，当前位置为0（无障碍物）这种情况才能到达该位置，然后为该位置设 1 （可达，只有1种方式）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0 行初始化表达式: </span></span><br><span class=\"line\">obstacleGrid[<span class=\"number\">0</span>][row] = <span class=\"built_in\">int</span>(obstacleGrid[<span class=\"number\">0</span>][row] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> obstacleGrid[<span class=\"number\">0</span>][row-<span class=\"number\">1</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\"># 0 列初始化表达式: </span></span><br><span class=\"line\">obstacleGrid[clo][<span class=\"number\">0</span>] = <span class=\"built_in\">int</span>(obstacleGrid[clo][<span class=\"number\">0</span>] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> obstacleGrid[clo-<span class=\"number\">1</span>][<span class=\"number\">0</span>] == <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这些都准备就绪之后，按照相关思路进行编码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">uniquePathsWithObstacles1</span>(<span class=\"params\">self, obstacleGrid</span>):</span><br><span class=\"line\">      \t<span class=\"comment\"># 行列长度</span></span><br><span class=\"line\">        m = <span class=\"built_in\">len</span>(obstacleGrid)</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(obstacleGrid[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果在位置(0, 0)，哪里都去不了，直接返回0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> obstacleGrid[<span class=\"number\">0</span>][<span class=\"number\">0</span>] == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 否则，位置(0, 0)可以到达</span></span><br><span class=\"line\">        obstacleGrid[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 初始化 0 列</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> clo <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m):</span><br><span class=\"line\">            obstacleGrid[clo][<span class=\"number\">0</span>] = <span class=\"built_in\">int</span>(obstacleGrid[clo][<span class=\"number\">0</span>] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> obstacleGrid[clo-<span class=\"number\">1</span>][<span class=\"number\">0</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 初始化 0 行</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            obstacleGrid[<span class=\"number\">0</span>][row] = <span class=\"built_in\">int</span>(obstacleGrid[<span class=\"number\">0</span>][row] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> obstacleGrid[<span class=\"number\">0</span>][row-<span class=\"number\">1</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 从位置(1, 1)根据动态方程开始计算</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> obstacleGrid[i][j] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    obstacleGrid[i][j] = obstacleGrid[i-<span class=\"number\">1</span>][j] + obstacleGrid[i][j-<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    obstacleGrid[i][j] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> obstacleGrid[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时间复杂度: O(mxn)</p>\n<p>空间复杂度: O(1)</p>\n</blockquote>\n<h5 id=\"步骤四：优化-2\"><a href=\"#步骤四：优化-2\" class=\"headerlink\" title=\"步骤四：优化\"></a>步骤四：优化</h5><p>​    这块的优化先不谈了，这里基本没有什么优化点，之前都是由于自己要开辟内存空间，通过空间的优化来进行，而本题是在给定的数组中进行操作的</p>\n<p>有了这几个案例的基础之后，咱们后面把经典的《打家劫舍》系列剩下的两个题目讨论完，就先告一段落，后面也希望以不同的方式与大家多多交流，互相学习</p>\n<p>如果有读者看着累了，可以先保存，收藏下来，待消化了前面的内容，方便再回来看看。</p>\n<h3 id=\"案例四：打家劫舍II-「来自leetcode213」\"><a href=\"#案例四：打家劫舍II-「来自leetcode213」\" class=\"headerlink\" title=\"案例四：打家劫舍II 「来自leetcode213」\"></a>案例四：打家劫舍II 「来自leetcode213」</h3><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python复制代码输入: [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出: <span class=\"number\">3</span></span><br><span class=\"line\">解释: 你不能先偷窃 <span class=\"number\">1</span> 号房屋（金额 = <span class=\"number\">2</span>），然后偷窃 <span class=\"number\">3</span> 号房屋（金额 = <span class=\"number\">2</span>）, 因为他们是相邻的。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python复制代码输入: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出: <span class=\"number\">4</span></span><br><span class=\"line\">解释: 你可以先偷窃 <span class=\"number\">1</span> 号房屋（金额 = <span class=\"number\">1</span>），然后偷窃 <span class=\"number\">3</span> 号房屋（金额 = <span class=\"number\">3</span>）。</span><br><span class=\"line\">     偷窃到的最高金额 = <span class=\"number\">1</span> + <span class=\"number\">3</span> = <span class=\"number\">4</span> 。</span><br></pre></td></tr></table></figure>\n\n<p>与《打家劫舍I》不同的是，《打家劫舍I》的屋子是线性的，而《打家劫舍II》是环状的，所以要考虑的点会增加一些，因为首位相连接的情况，咱们分为下面三种情况进行设定：</p>\n<p>a. 不偷首偷尾</p>\n<p>b. 偷首不偷尾</p>\n<p>c. 首位都不偷 显然，c 种方式损失太大，不会获得最高的金额，故选取 a 和 b。 那么，下面分为两种情况，分别计算不包含首和不包含尾这两种情况来判断小偷哪种方式偷取的金额最高。</p>\n<p>下面依然按照之前的四个步骤来进行分析</p>\n<h5 id=\"步骤一：-定义dp数组的含义-1\"><a href=\"#步骤一：-定义dp数组的含义-1\" class=\"headerlink\" title=\"步骤一： 定义dp数组的含义\"></a>步骤一： 定义dp数组的含义</h5><p>​    dp[i] 代表的含义和之前一致，dp数组存储的值一般代表截止目前的最优值</p>\n<p>​    所以，<strong>dp[i] 代表到达第 i 个房屋偷得的最高金额，也就是当前最大子序和</strong></p>\n<p>​    但是最后会讨论<strong>不包含首</strong>和<strong>不包含尾</strong>这两种情况下得到的dp数组的最后一位，然后获取其中较大者，就是我们要取得的最高金额</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程-3\"><a href=\"#步骤二：找出关系元素间的动态方程-3\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>​    动态方程可参照《打家劫舍I》，有很详细的图解过程，该例子动态方程的变化和之前是完全一致的：</p>\n<p>​    <strong>dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])</strong></p>\n<h5 id=\"步骤三：初始化设定\"><a href=\"#步骤三：初始化设定\" class=\"headerlink\" title=\"步骤三：初始化设定\"></a>步骤三：初始化设定</h5><p>​    初始化: 给没有房子时，dp一个位置，即：dp[0]         a. 当size=0时，没有房子，小偷没办法偷：dp[0]=0；         b. 当size=1时，有一间房子，只要偷即可：dp[1]=nums[0]</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605150914733.png\" alt=\"image-20230605150914733\"></p>\n<p>​    由于屋子首位相连接，所以在计算时候，直接分为两种情况。第一种略过第一个屋子，第二种略过第二个屋子，这样得到的两个数组结果。最后只要比较最后一位数值的大小就ok了。解决！</p>\n<p>该例子步骤三之后，感兴趣的同学可以自己写一下代码，和《打家劫舍I》的代码很类似，后面我写了优化后的代码，可能会更加的明白怎么写。咱们直接到步骤四，有了上面的案例，直接来看看优化后的方案:</p>\n<h5 id=\"步骤四：优化-3\"><a href=\"#步骤四：优化-3\" class=\"headerlink\" title=\"步骤四：优化\"></a>步骤四：优化</h5><p>​    同样从 dp[i] = max(dp[i-1], nums[i-1]+dp[i-2]) 关系来看，每一次动态变化，都与前两次状态有关系（dp[i-1], dp[i-2])，而前面的一些值是没有必要留存的，只要保存两个变量来保存过程最优值就好.</p>\n<p>​    代码中有详细的注释：</p>\n<pre><code>class Solution(object):\ndef rob(self, nums):\n    # 点睛：与打家劫舍I的区别是屋子围成了一个环\n    #   那么，很明显可以分为三种情况：\n    #   1. 首位都不偷\n    #   2. 偷首不偷尾\n    #   3. 不偷首偷尾\n    # 显然，第1种方式损失太大，选取2、3。\n    # 那么，分为两种情况，分别计算不包含首和不包含尾这两种情况来判断哪个大哪个小\n\n    # 1.dp[i] 代表当前最大子序和\n    # 2.动态方程: dp[i] = max(dp[i-1] and , nums[i-1]+dp[i-2])\n    # 3.初始化: 给没有房子时，dp一个位置，即：dp[0]\n    #   3.1 当size=0时，没有房子，dp[0]=0；\n    #   3.2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]\n\n    # 依照《打家劫舍I》的优化方案进行计算\n\n    # nums处理，分别切割出去首和去尾的子串\n    nums1 = nums[1:]\n    nums2 = nums[:-1]\n\n    size = len(nums)\n    if size == 0:\n        return 0\n    if size == 1:\n        return nums[0]\n\n    def handle(size, nums):\n        dp1 = 0\n        dp2 = nums[0]\n        for i in range(2, size+1):\n            dp1 = max(dp2, nums[i-1]+dp1)\n            dp1, dp2 = dp2, dp1\n        return dp2\n\n    res1 = handle(size-1, nums1)\n    res2 = handle(size-1, nums2)\n\n    return max(res1, res2)\n</code></pre>\n<blockquote>\n<p>时间复杂度：O(N)</p>\n<p>空间复杂度：O(1)</p>\n</blockquote>\n<p>再看看下面小偷遇到的情况，感叹：即使当小偷，也要步步规划才能拿到最高的金额啊…</p>\n<h3 id=\"案例五：打家劫舍III-「来自leetcode337」\"><a href=\"#案例五：打家劫舍III-「来自leetcode337」\" class=\"headerlink\" title=\"案例五：打家劫舍III 「来自leetcode337」\"></a>案例五：打家劫舍III 「来自leetcode337」</h3><p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。</p>\n<p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码输入: [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,null,<span class=\"number\">3</span>,null,<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"number\">3</span></span><br><span class=\"line\">\t/ \\</span><br><span class=\"line\">   <span class=\"number\">2</span>   <span class=\"number\">3</span></span><br><span class=\"line\">    \\   \\ </span><br><span class=\"line\">     <span class=\"number\">3</span>   <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出: <span class=\"number\">7</span> </span><br><span class=\"line\">解释: 小偷一晚能够盗取的最高金额 = <span class=\"number\">3</span> + <span class=\"number\">3</span> + <span class=\"number\">1</span> = <span class=\"number\">7.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,null,<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"> \t <span class=\"number\">3</span></span><br><span class=\"line\">\t/ \\</span><br><span class=\"line\">   <span class=\"number\">4</span>   <span class=\"number\">5</span></span><br><span class=\"line\">  / \\   \\ </span><br><span class=\"line\"> <span class=\"number\">1</span>   <span class=\"number\">3</span>   <span class=\"number\">1</span></span><br><span class=\"line\">输出: <span class=\"number\">9</span></span><br><span class=\"line\">解释: 小偷一晚能够盗取的最高金额 = <span class=\"number\">4</span> + <span class=\"number\">5</span> = <span class=\"number\">9.</span></span><br></pre></td></tr></table></figure>\n\n<p>题目出的很好，但是立马会给人一种小偷也不是好当的的赶脚…</p>\n<p>言归正传，咱们先来说说题目本身</p>\n<p>《打家劫舍》的小偷从一维线性到环形，再到二维矩形的屋子？是我想简单了，直接就干到树形了，是不是看着很香，而且很想，看下去，研究研究…</p>\n<p>来整理几点思路，再来按照四步走：</p>\n<p>1.由于房屋是树状的，因此，我们可以使用遍历树的传统方法进行遍历(前序、中序、后续) 2.简单的思路是，从树低进行往上遍历，拿到最优的打劫值。可以选用后续遍历 3.得到每一节点的最优值，最后选取最优的结果</p>\n<p>依然按照三个步骤来进行分析（无优化点）</p>\n<h5 id=\"步骤一：-定义dp数组的含义-2\"><a href=\"#步骤一：-定义dp数组的含义-2\" class=\"headerlink\" title=\"步骤一： 定义dp数组的含义\"></a>步骤一： 定义dp数组的含义</h5><p>​    dp[i]代表该节点及以下打最多的劫（拿到最多的钱）</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程-4\"><a href=\"#步骤二：找出关系元素间的动态方程-4\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>​    根据我们每走到一个节点，都会有两种情况，那就是 <strong>偷(1)</strong> 与 **不偷(0)**。我们分开来讨论：</p>\n<p>​    a. 用 <strong>dp[0]</strong> 代表不偷取该节点到目前为止拿到最多的钱，那么儿子节点偷不偷都ok。</p>\n<p>​        所以： <strong>dp[0] = max(left[0], left[1]) + max(right[0], right[1])</strong></p>\n<p>​    b. 用 <strong>dp[1]</strong> 代表偷了该节点到目前为止拿到最多的钱，则儿子节点都不能被偷。</p>\n<p>​        所以：<strong>dp[1] = value + left[0] + right[0]</strong>  (value代表该节点的价值)</p>\n<p>​    有看不懂的地方吗？再紧接着解释一下：</p>\n<p>​        left[0]代表不偷取左孩子拿到最高的金额</p>\n<p>​        left[1]代表偷取左孩子拿到最高的金额</p>\n<p>​        right[0]代表不偷取右孩子拿到最高的金额</p>\n<p>​        right[1]代表偷取右孩子拿到最高的金额</p>\n<p>​    <em>如果还有不太懂的话，留言或者私信我联系我，随时骚扰我哈</em></p>\n<h5 id=\"步骤三：初始化设定-1\"><a href=\"#步骤三：初始化设定-1\" class=\"headerlink\" title=\"步骤三：初始化设定\"></a>步骤三：初始化设定</h5><p>​    该例子的初始化比较简单，就是当前树的形状为空的时候，直接返回dp[0, 0]</p>\n<p>下面贴出完整代码，其中包含<strong>树的初始化</strong>代码 &amp;&amp; 一大堆的注释：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        self.val = x</span><br><span class=\"line\">        self.left = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.right = <span class=\"literal\">None</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">rob</span>(<span class=\"params\">self, root</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 说明：</span></span><br><span class=\"line\">        <span class=\"comment\"># 1.由于房屋是树状的，因此，我们可以使用遍历树的传统方法进行遍历(前序、中序、后续)</span></span><br><span class=\"line\">        <span class=\"comment\"># 2.简单的思路是，从树低进行往上遍历，拿到最优的打劫值。可以选用后续遍历</span></span><br><span class=\"line\">        <span class=\"comment\"># 3.得到每一节点的最优值，最后选取最优的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 1.dp[i]代表该节点及以下拿到的最多的钱</span></span><br><span class=\"line\">        <span class=\"comment\"># 2.动态方程：</span></span><br><span class=\"line\">        <span class=\"comment\">#   2.1 dp[0]代表不偷该节点拿到最多的钱，则儿子节点偷不偷都ok。dp[0] = max(left[0], left[1]) + max(right[0], right[1])</span></span><br><span class=\"line\">        <span class=\"comment\">#   2.2 dp[1]代表偷了该节点拿到最多的钱，则儿子节点都不能被偷。dp[1] = var + left[0] + right[0]</span></span><br><span class=\"line\">        <span class=\"comment\"># 3.初始化：当前树的形状为空的时候，直接返回dp[0, 0]</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">postTrasval</span>(<span class=\"params\">root</span>):</span><br><span class=\"line\">            dp = [<span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> dp</span><br><span class=\"line\">            left = postTrasval(root.left)</span><br><span class=\"line\">            right = postTrasval(root.right)</span><br><span class=\"line\"></span><br><span class=\"line\">            dp[<span class=\"number\">0</span>] = <span class=\"built_in\">max</span>(left[<span class=\"number\">0</span>], left[<span class=\"number\">1</span>]) + <span class=\"built_in\">max</span>(right[<span class=\"number\">0</span>], right[<span class=\"number\">1</span>])</span><br><span class=\"line\">            dp[<span class=\"number\">1</span>] = root.val + left[<span class=\"number\">0</span>] + right[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dp</span><br><span class=\"line\">        dp = postTrasval(root)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(dp[<span class=\"number\">0</span>], dp[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># initial tree structure</span></span><br><span class=\"line\">    T = TreeNode(<span class=\"number\">3</span>)</span><br><span class=\"line\">    T.left = TreeNode(<span class=\"number\">2</span>)</span><br><span class=\"line\">    T.right = TreeNode(<span class=\"number\">3</span>)</span><br><span class=\"line\">    T.left.right = TreeNode(<span class=\"number\">3</span>)</span><br><span class=\"line\">    T.right.right = TreeNode(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># The solution to the Question</span></span><br><span class=\"line\">    s = Solution()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s.rob(T))</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2-递归\"><a href=\"#2-递归\" class=\"headerlink\" title=\"2. 递归\"></a>2. 递归</h1>"},{"title":"网络","keywords":"网络","description":"网络","top_img":"https://raw.githubusercontent.com/why862555625/images/main/images/14.jpg","sticky":"数值越大越靠前","cover":"https://raw.githubusercontent.com/why862555625/images/main/images/14.jpg","comments":1,"abbrlink":"50daec4","date":"2023-05-26T07:56:47.000Z","updated":"2023-05-26T07:56:47.000Z","_content":"\n\n\n摘要\n\n<!-- more -->\n","source":"_posts/js/网络.md","raw":"---\ntitle: 网络\ntags:\n  - 网络\ncategories: 面试\nkeywords: 网络\ndescription: 网络\ntop_img: 'https://raw.githubusercontent.com/why862555625/images/main/images/14.jpg'\nsticky: 数值越大越靠前\ncover: 'https://raw.githubusercontent.com/why862555625/images/main/images/14.jpg'\ncomments: false评论\nabbrlink: 50daec4\ndate: 2023-05-26 15:56:47\nupdated: 2023-05-26 15:56:47\n---\n\n\n\n摘要\n\n<!-- more -->\n","slug":"js/网络","published":1,"layout":"post","photos":[],"link":"","_id":"clipg08760016rgwhh1p57gvw","content":"<p>摘要</p>\n<span id=\"more\"></span>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"excerpt":"<p>摘要</p>","more":""},{"title":"vue复习","keywords":"vue复习","description":"vue复习","top_img":"设置false不显示顶部图片","sticky":"数值越大越靠前","cover":"https://raw.githubusercontent.com/why862555625/images/main/images/15.jpg","comments":1,"abbrlink":"c9a941a3","date":"2023-05-26T07:38:34.000Z","updated":"2023-05-26T07:38:34.000Z","_content":"\n\n\nvue复习\n\n<!-- more -->\n\n### MVVM模型？\n\nMVVM，是`Model-View-ViewModel`的简写，其本质是`MVC`模型的升级版。其中 `Model` 代表数据模型，`View` 代表看到的页面，`ViewModel`是`View`和`Model`之间的桥梁，数据会绑定到`ViewModel`层并自动将数据渲染到页面中，视图变化的时候会通知`ViewModel`层更新数据。以前是通过操作`DOM`来更新视图，现在是`数据驱动视图`。\n\n### Vue的生命周期\n\nVue 的生命周期可以分为8个阶段：创建前后、挂载前后、更新前后、销毁前后，以及一些特殊场景的生命周期。Vue 3 中还新增了是3个用于调试和服务端渲染的场景。\n\n| Vue 2中的生命周期钩子 | Vue 3选项式API的生命周期选项 | Vue 3 组合API中生命周期钩子 | 描述                                                   |\n| --------------------- | ---------------------------- | --------------------------- | ------------------------------------------------------ |\n| `beforeCreate`        | `beforeCreate`               | `setup()`                   | 创建前，此时`data`和 `methods`的数据都还没有初始化     |\n| `created`             | `created`                    | `setup()`                   | 创建后，`data`中有值，尚未挂载，可以进行一些`Ajax`请求 |\n| `beforeMount`         | `beforeMount`                | `onBeforeMount`             | 挂载前，会找到虚拟`DOM`，编译成`Render`                |\n| `mounted`             | `mounted`                    | `onMounted`                 | 挂载后，`DOM`已创建，可用于获取访问数据和`DOM`元素     |\n| `beforeUpdate`        | `beforeUpdate`               | `onBeforeUpdate`            | 更新前，可用于获取更新前各种状态                       |\n| `updated`             | `updated`                    | `onUpdated`                 | 更新后，所有状态已是最新                               |\n| `beforeDestroy`       | `beforeUnmount`              | `onBeforeUnmount`           | 销毁前，可用于一些定时器或订阅的取消                   |\n| `destroyed`           | `unmounted`                  | `onUnmounted`               | 销毁后，可用于一些定时器或订阅的取消                   |\n| `activated`           | `activated`                  | `onActivated`               | `keep-alive`缓存的组件激活时                           |\n| `deactivated`         | `deactivated`                | `onDeactivated`             | `keep-alive`缓存的组件停用时                           |\n| `errorCaptured`       | `errorCaptured`              | `onErrorCaptured`           | 捕获一个来自子孙组件的错误时调用                       |\n| —                     | `renderTracked`              | `onRenderTracked`           | 调试钩子，响应式依赖被收集时调用                       |\n| —                     | `renderTriggered`            | `onRenderTriggered`         | 调试钩子，响应式依赖被触发时调用                       |\n| —                     | `serverPrefetch`             | `onServerPrefetch`          | 组件实例在服务器上被渲染前调用                         |\n\n**关于Vue 3中的生命周期建议阅读官方文档!!!!**\n\n[组合式 API：生命周期钩子--官方文档](https://link.juejin.cn/?target=https%3A%2F%2Fcn.vuejs.org%2Fapi%2Fcomposition-api-lifecycle.html)\n[选项式 API：生命周期选项--官方文档](https://link.juejin.cn/?target=https%3A%2F%2Fcn.vuejs.org%2Fapi%2Foptions-lifecycle.html)\n\n**父子组件的生命周期：**\n\n- `加载渲染阶段`：父 beforeCreate -> 父 created -> 父 beforeMount -> 子 beforeCreate -> 子 created -> 子 beforeMount -> 子 mounted -> 父 mounted\n- `更新阶段`：父 beforeUpdate -> 子 beforeUpdate -> 子 updated -> 父 updated\n- `销毁阶段`：父 beforeDestroy -> 子 beforeDestroy -> 子 destroyed -> 父 destroyed\n\n### Vue.$nextTick\n\n**在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。**\n\n`nextTick` 是 Vue 提供的一个全局 API，由于 Vue 的异步更新策略，导致我们对数据修改后不会直接体现在 DOM 上，此时如果想要立即获取更新后的 DOM 状态，就需要借助该方法。\n\nVue 在更新 DOM 时是异步执行的。当数据发生变化，Vue 将开启一个异步更新队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 `watcher` 被多次触发，只会被推入队列一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。`nextTick`方法会在队列中加入一个回调函数，确保该函数在前面的 DOM 操作完成后才调用。\n\n使用场景：\n\n1. 如果想要在修改数据后立刻得到更新后的`DOM`结构，可以使用`Vue.nextTick()`\n2. 在`created`生命周期中进行`DOM`操作\n\n### Vue 实例挂载过程中发生了什么？\n\n挂载过程指的是 `app.mount()`过程，这是一个初始化过程，整体上做了两件事情：`初始化`和`建立更新机制`。\n\n初始化会创建组件实例、初始化组件状态、创建各种响应式数据。\n\n建立更新机制这一步会立即执行一次组件的更新函数，这会首次执行组件渲染函数并执行`patch`将`vnode` 转换为 `dom`； 同时首次执行渲染函数会创建它内部响应式数据和组件更新函数之间的依赖关系，这使得以后数据发生变化时会执行对应的更新函数。\n\n### Vue 的模版编译原理\n\nVue 中有个独特的编译器模块，称为`compiler`，它的主要作用是将用户编写的`template`编译为js中可执行的`render`函数。\n 在Vue 中，编译器会先对`template`进行解析，这一步称为`parse`，结束之后得到一个JS对象，称之为`抽象语法树AST`；然后是对`AST`进行深加工的转换过程，这一步称为`transform`，最后将前面得到的`AST`生成JS代码，也就是`render`函数。\n\n### Vue 的响应式原理\n\n1. Vue 2 中的数据响应式会根据数据类型做不同的处理。如果是对象，则通过\n\n   ```\n   Object.defineProperty(obj,key,descriptor)\n   ```\n\n   拦截对象属性访问，当数据被访问或改变时，感知并作出反应；如果是数组，则通过覆盖数组原型的方法，扩展它的7个变更方法（push、pop、shift、unshift、splice、sort、reverse），使这些方法可以额外的做更新通知，从而做出响应。\n\n   缺点：\n\n   - 初始化时的递归遍历会造成性能损失；\n   - 通知更新过程需要维护大量 `dep` 实例和 `watcher` 实例，额外占用内存较多；\n   - 新增或删除对象属性无法拦截，需要通过 `Vue.set` 及 `delete` 这样的 API 才能生效；\n   - 对于`ES6`中新产生的`Map`、`Set`这些数据结构不支持。\n\n2. Vue 3 中利用`ES6`的`Proxy`机制代理需要响应化的数据。可以同时支持对象和数组，动态属性增、删都可以拦截，新增数据结构均支持，对象嵌套属性运行时递归，用到时才代理，也不需要维护特别多的依赖关系，性能取得很大进步。\n\n### 虚拟DOM\n\n1. 概念：\n    虚拟DOM，顾名思义就是虚拟的DOM对象，它本身就是一个JS对象，只不过是通过不同的属性去描述一个视图结构。\n2. 虚拟DOM的好处：\n    (1) 性能提升\n    直接操作DOM是有限制的，一个真实元素上有很多属性，如果直接对其进行操作，同时会对很多额外的属性内容进行了操作，这是没有必要的。如果将这些操作转移到JS对象上，就会简单很多。另外，操作DOM的代价是比较昂贵的，频繁的操作DOM容易引起页面的重绘和回流。如果通过抽象VNode进行中间处理，可以有效减少直接操作DOM次数，从而减少页面的重绘和回流。\n    (2) 方便跨平台实现\n    同一VNode节点可以渲染成不同平台上对应的内容，比如：渲染在浏览器是DOM元素节点，渲染在Native（iOS、Android）变为对应的控件。Vue 3 中允许开发者基于VNode实现自定义渲染器（renderer），以便于针对不同平台进行渲染。\n3. 结构：\n    没有统一的标准，一般包括`tag`、`props`、`children`三项。\n    `tag`：必选。就是标签，也可以是组件，或者函数。\n    `props`：非必选。就是这个标签上的属性和方法。\n    `children`：非必选。就是这个标签的内容或者子节点。如果是文本节点就是字符串；如果有子节点就是数组。换句话说，如果判断`children`是字符串的话，就表示一定是文本节点，这个节点肯定没有子元素。\n\n### diff 算法\n\n由于目前`Vue3`对于性能的优化做了很多的处理，所以其在更新时并不会对所有的节点都进行`diff`更新。目前会进行`diff`更新的有以下两种情况：\n\n- `v-for`容器节点\n- 自写的`render()`函数\n\n还有一种特殊情况会进行无`diff`的按序更新，这种更新是全替换模式，非常耗时：\n\n- 无`key`值的`v-for`语句，此时会打上`UNKEYED_FRAGMENT`标记\n\n注意，`Vue3`没有主动提供片段这个功能，仅会在出现以下写法时会生成片段：\n\n- 一个组件有多个根节点，会生成一个片段包裹，此时其为稳定片段(`STABLE_FRAGMENT`)\n- `v-for`语句，会生成一个片段包裹\n- `v-if`语句，有多个子节点或不为单个文本节点，会生成一个片段包裹(`STABLE_FRAGMENT`)\n\n> 本文上述论点都是基于浏览器环境，非*NodeJS*环境(*SSR*)。文中提供的代码进行了**适当的简化**。\n\n在我们使用`template`的情况下，更新基本上会通过`block`进行更新——即节点自更新\n\n#### diff 更新\n\n##### VUE2\n\n![image-20230528150909234](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528150909234.png)\n\n\n\n![image-20230528150936549](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528150936549.png)\n\n\n\n![image-20230528151019742](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151019742.png)\n\n\n\n![image-20230528151119230](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151119230.png)\n\n第一次对比后结果\n\n![image-20230528151309763](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151309763.png)\n\n第二次\n\n![image-20230528151400771](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151400771.png)\n\n第三次\n\n![image-20230528151428703](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151428703.png)\n\n最后整理\n\n![image-20230528151504941](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151504941.png)\n\n##### VUE3\n\n`diff`更新调用的内部的`patchKeyedChildren`方法，其大致流程分为三步：\n\n1. 对比新旧节点头部相同指针的节点，相同则进行`diff`，不同则跳转下一步。\n2. 对比新旧节点尾部指针指向节点，相同则进行`diff`，不同则跳转下一步。\n3. 此时剩余新旧节点，可能存在乱序、已移除或新增的情况，进行特殊处理来更新。\n\n下面是函数最开始做的初始化，其中`c1/c2`分别代表新旧节点的子节点数组；`i`表示两个新旧节点指向同步的指针，它们是同步的；`e1/e2`分别代表指向两个子节点数组尾部的指针：\n\n```js\nlet i = 0\nconst l2 = c2.length\n\n// 变更前节点的尾下标\nlet e1 = c1.length - 1 // prev ending index\n\n// 变更后节点的尾下标\nlet e2 = l2 - 1 // next ending index\n```\n\n其中`patch()`函数用于对节点进行更新，`isSameVNodeType()`函数用于判断两个节点是否具有相同的类型，此时其需要满足类型一样且`key`值相等。\n\n> 这里的类型指，例如组件，则其为组件的配置对象，元素则为元素的标记。\n\n\n\n#### 1. 对比头部等位指针节点\n\n首先其会从头部指针开始，对比新旧节点是否相同：\n\n```js\njs复制代码// 1. sync from start\n// 1. 从开始位置同步\n// (a b) c\n// (a b) d e\nwhile (i <= e1 && i <= e2) {\n  const n1 = c1[i]\n  const n2 = c2[i]\n\n  // 节点没有发生变更时，进行patch\n  if (isSameVNodeType(n1, n2)) {\n    patch(n1, n2)\n    // 不同节点时，立刻结束\n  } else {\n    break\n  }\n  i++\n}\n```\n\n注释中给出了一个例子，即如果存在下图的新旧队列：\n\n![image-20230527224906472](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527224906472.png)\n\n由于此时两个指针的`VNode`相同，那么可以复用则直接进行`patch()`更新。之后指针向右移动一位，对比两个数组下标为 `1` 的位置：\n\n![image-20230527225018797](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225018797.png)\n\n同样的，节点相同，进行更新然后指针向后移动：\n\n![image-20230527225137121](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225137121.png)\n\n\n\n此时两个节点不一样了，那么本次头部对比到此结束。到此我们排除了头部位置可复用的节点，接下来那么肯定是排除尾部位置的可复用节点。\n\n### 2. 对比尾部等位指针节点\n\n尾部的可复用节点检查方法与头部一样，唯一一点不同的是，它们有各自的指针分别指向子节点数组尾部。所以此时要使用两个指针`e1/e2`。\n\n以此时要使用两个指针`e1/e2`。\n\n```js\njs复制代码// 2. sync from end\n// 2. 从尾部位置开始查找\n// a (b c)\n// d e (b c)\nwhile (i <= e1 && i <= e2) {\n  const n1 = c1[e1]\n  const n2 = c2[e2]\n  if (isSameVNodeType(n1, n2)) {\n    patch(n1, n2)\n  } else {\n    break\n  }\n  e1--\n  e2--\n}\n```\n\n还是按注释中的例子放图：\n\n![image-20230527225256542](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225256542.png)\n\n当前指针指向节点相同，节点可复用，直接更新，同时指针向前一起移动：\n\n![image-20230527225417598](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225417598.png)\n\n当前指针指向节点相同，节点可复用，直接更新，同时指针向前一起移动：\n\n![](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225513256.png)\n\n\n\n此时，两个指针指向节点不再相同，停止此处的对比。\n\n------\n\n经过前两步的处理，新旧队列已经进一步缩短了，此时剩下的节点就可能存在下面三种情况：\n\n- 有新增的节点\n- 有节点被删除了\n- 相同的节点，但是移动了位置\n\n在实际的场景中，那么就只能存在下面三种剩余情况：\n\n- 仅有新增的节点(此时一定`i > e1`)\n- 仅进行了节点删除(此时一定`i > e2`)\n- 乱序的，一定有移动的节点，其中可能包含新增或有删除的节点(此时一定有`i <= e2`且`i <= e1`)\n\n`Vue`按处理的简易程度，`Vue`先对前两种情况进行了单独的处理，再对三种混有的情况进行了处理。\n\n#### 3.1 处理新增的节点的单独情况\n\n判断新增的节点是以旧队列为基准，那么此时的情况是这样的：\n\n![image-20230527230120660](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230120660.png)\n\n\n\n或新增的节点在首部：\n\n![image-20230527230226562](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230226562.png)\n\n\n\n此时会存在这样的情况`e1 < i`且`e2 >= i`，那么我们只需要更新`e1 => i`间的节点即可，于是有了这些代码：\n\n```js\n// 3. common sequence + mount\n// 3. 有新增的节点时\n// (a b)\n// (a b) c\n// i = 2, e1 = 1, e2 = 2\n// (a b)\n// c (a b)\n// i = 0, e1 = -1, e2 = 0\nif (i <= e2) {\n  if (i > e1) {\n    //  当前节点后面的节点\n    const nextPos = e2 + 1\n\n    // 我们要以这个节点为锚点在其之前添加元素，没有则添加到父节点最后\n    const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor\n    while (i <= e2) {\n      patch(null, c2[i])\n      i++\n    }\n  }\n}\n```\n\n#### 3.2 处理删除节点的单独情况\n\n如果没有存在仅有新增节点的情况，那么其会判断是否是仅进行删除节点的情况，此时可能出现下图的两种情况：\n\n删除节点在尾部：\n\n![](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230416959.png)\n\n\n\n删除节点在尾部：\n\n![image-20230527230458558](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230458558.png)\n\n\n\n此时`i > e2`，那么我们只需要将旧节点数组中`i => e1`之间的所有节点删除即可(下面的`else if`语句承接上面)：\n\n```js\njs复制代码// 4. common sequence + unmount\n// 4. 节点移除\n// (a b) c\n// (a b)\n// i = 2, e1 = 2, e2 = 1\n// a (b c)\n// (b c)\n// i = 0, e1 = 0, e2 = -1\nelse if (i > e2) {\n  while (i <= e1) {\n    // 移除原节点\n    unmount(c1[i])\n    i++\n  }\n}\n```\n\n#### 3.3 乱序，但一定有移动的节点的情况\n\n最后一种情况就是比较复杂的情况，此时`Vue`做的处理是，先查看旧节点序列在变为新节点序列后，旧节点序列中是否有些节点还是按现在的顺序排列的(可以间断)，此时只对其余变更的节点进行操作，就能进行最小幅度的`DOM`操作了。\n\n> 此时相对于求旧节点的最长递增序列，这里你可以会想到为什么不求最小编辑距离，因为最小编辑距离的时间复杂度在大多数情况下比它高\n\n##### 3.3.1 建立新节点 key 与其下标的映射\n\n首先，`Vue`先将新节点数组进行遍历，将它们有`key`值的节点与其在新节点数组中的下标建立映射，存储在`keyToNewIndexMap`中，方便在复用时查找：\n\n```js\nconst s1 = i // prev starting index\nconst s2 = i // next starting index\n\n// 5.1 build key:index map for newChildren\n// 5.1 生成一个key map\nconst keyToNewIndexMap = new Map()\n\n// 遍历新节点，乱序的部分，将这些具有key的节点存入map\nfor (i = s2; i <= e2; i++) {\n  const nextChild = c2[i]\n  if (nextChild.key != null) {\n    keyToNewIndexMap.set(nextChild.key, i)\n  }\n}\n```\n\n##### 3.3.2 移除新节点队列中不存在的旧节点并更新复用节点\n\n之后，遍历旧节点数组，通过刚刚建立的`Map`，如果当前旧节点在新节点数组中已经不存在了，那么说明要移除了。\n\n整个过程比较复杂，因为要预先做处理，为后续是否需要移动节点做准备：\n\n```js\n// 5.2 loop through old children left to be patched and try to patch\n// matching nodes & remove nodes that are no longer present\n// 5.2 遍历旧节点，patch匹配的节点，移除不再在节点\nlet j\n\n// 当前处理过的节点数\nlet patched = 0\n\n// 需要patch的节点数\nconst toBePatched = e2 - s2 + 1\n\n// 是否需要移动节点\nlet moved = false\n\n// used to track whether any node has moved\n// 记录节点是否已经移动\nlet maxNewIndexSoFar = 0\n\n// works as Map<newIndex, oldIndex>\n// Note that oldIndex is offset by +1\n// and oldIndex = 0 is a special value indicating the new node has\n// no corresponding old node.\n// 注意旧下标的值都会+1，因为0表示没有对应的旧节点\n// used for determining longest stable subsequence\n// 新下标与旧下标的map\n// 这里的新下标以s2位置为0下标，而旧下标为旧下标值 +１\nconst newIndexToOldIndexMap = new Array(toBePatched)\n\n// 初始化值为0\nfor (i = 0; i < toBePatched; i++) newIndexToOldIndexMap[i] = 0\n```\n\n这里我说明下三个变量，首先是`newIndexToOldIndexMap`，其用来记录节点的新坐标到旧坐标的映射(当然是节点可复用的情况下)。为了后续计算最长递增子序列，所以其新坐标以`s2`为起点，长度为当前需要处理的节点总数，并且其存入的旧节点下标要在原值的基础上`+ 1`(因为`0`表示当前节点没有对应的旧节点)。举个例子，有如下图一样的更新序列：\n\n![image-20230527230956800](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230956800.png)\n\n那么节点`e`存入`newIndexToOldIndexMap`后为：\n\n```js\n// 展示，不是赋值语句\nnewIndexToOldIndexMap = [4, 0, 0, 0]\n```\n\n其余全部节点存入后为：\n\n```js\n// 展示，不是赋值语句\nnewIndexToOldIndexMap = [4, 3, 2, 0]\n```\n\n`moved`变量则是表示是否有节点需要移动，其判定要基于`maxNewIndexSoFar`的值。\n\n`maxNewIndexSoFar`表示当前可复用节点距离`s2`(即第一个乱序节点的最远距离)。如果有对应可以复用的节点，那么在每次迭代处理节点时，如果当前节点所处位置距离`s2`距离超过`maxNewIndexSoFar`，那么`maxNewIndexSoFar`会更新为当前节点在新队列中的下标；当其小于`maxNewIndexSoFar`时，就会标记`moved = true`。\n\n```js\n// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，\n// 那么每次都会进入该if语句\nif (newIndex >= maxNewIndexSoFar) {\n  // 当前节点未移动，更新下标\n  maxNewIndexSoFar = newIndex\n\n  // 如果进入该else语句说明有节点之前节点交叉了\n} else {\n  moved = true\n}\n```\n\n想象一下，如果节点在新旧序列中，都是按照相同的顺序递增，那么`maxNewIndexSoFar`也会一直递增，即每次迭代`newIndex >= maxNewIndexSoFar`，那么就不需要移动节点；但是如果某次迭代，`newIndex < maxNewIndexSoFar`，那么说明当前节点由之前靠后的位置移动了现在靠前的位置。\n\n就拿刚刚乱序的图举例，第一次迭代`c`节点的`newIndex = 4`，则`maxNewIndexSoFar = 4`；第二次迭代`d`节点时，其`newIndex = 3`，此时`newIndex < maxNewIndexSoFar`，说明`c/d`节点之间的位置在新旧发生了交叉，所以我们至少需要移动它们其中一个节点。\n\n理解了这个道理，现在我们可以正式看看这段代码了。由于要卸载节点，那么本次遍历要以`s1 <-> e1`之间的节点为基准进行遍历，整体遍历代码如下：\n\n```js\n// 遍历旧节点\nfor (i = s1; i <= e1; i++) {\n  // 当前下标的旧节点\n  const prevChild = c1[i]\n\n  // 当前patch的节点数超过新节点中要patch的总数时，执行unmount操作\n  // 直接进行卸载操作，因为多余的节点不需要了\n  if (patched >= toBePatched) {\n    // all new children have been patched so this can only be a removal\n    unmount(prevChild)\n    continue\n  }\n\n  // 尝试寻找是否有对应的新节点\n  let newIndex\n\n  // 旧节点具有key时，获取相同key值节点所处的下标\n  if (prevChild.key != null) {\n    newIndex = keyToNewIndexMap.get(prevChild.key)\n\n    // 没有key时则找相同类型的节点是否存在\n  } else {\n    // key-less node, try to locate a key-less node of the same type\n    // 当前查找范围为新节点中需要patch的节点之间\n    for (j = s2; j <= e2; j++) {\n      if (\n        // 0表示对应下标下当前还未有节点(注意当前是以s2为0下标基准)\n        // 这里确认当前新下标位置未有对应的旧下标，防止是已在map中的节点\n\n        newIndexToOldIndexMap[j - s2] === 0 &&\n        isSameVNodeType(prevChild, c2[j])\n      ) {\n        newIndex = j\n        break\n      }\n    }\n  }\n\n  // 没找到对应节点时说明该节点已经不存在了，直接进行unmount\n  if (newIndex === undefined) {\n    unmount(prevChild)\n\n    // 找到时进行位置移动操作，并patch\n  } else {\n    // 将旧节点位置下标+1后存入，新节点以s2为起点，即0坐标\n    newIndexToOldIndexMap[newIndex - s2] = i + 1\n\n    // 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，\n    // 那么每次都会进入该if语句\n    if (newIndex >= maxNewIndexSoFar) {\n      // 当前节点未移动，更新下标\n      maxNewIndexSoFar = newIndex\n\n      // 如果进入该else语句说明有节点之前节点交叉了\n    } else {\n      moved = true\n    }\n\n    // patch该节点\n    patch(prevChild, c2[newIndex])\n    patched++\n  }\n}\n```\n\n首先当当前可复用的节点复用时，会使`patched`值`+1`，当复用的节点超过乱序的新节点长度时，那么其余的节点肯定是要卸载的节点(因为新节点序列都处理完毕了)：\n\n```js\nif (patched >= toBePatched) {\n    // all new children have been patched so this can only be a removal\n    unmount(prevChild)\n    continue\n  }\n```\n\n之后，`Vue`尝试寻找一下当前旧节点是否被复用，即它被移动到了新节点序列的其他位置。首先如果当前节点有`key`值，那么其会尝试直接从刚刚的`keyToNewIndexMap`中查找；如果没有找到，那么其会遍历当前所有的新节点序列，依次对比是否与当前节点相同，在复合同类型节点时对其进行复用。\n\n```js\n// 尝试寻找是否有对应的新节点\nlet newIndex\n\n// 旧节点具有 key 时，获取相同 key 值节点所处的下标\nif (prevChild.key != null) {\n  newIndex = keyToNewIndexMap.get(prevChild.key)\n\n  // 没有key时则找相同类型的节点是否存在\n} else {\n  // key-less node, try to locate a key-less node of the same type\n  // 当前查找范围为新节点中需要 patch 的节点之间\n  for (j = s2; j <= e2; j++) {\n    if (\n      // 0 表示对应下标下当前还未有节点(注意当前是以 s2 为 0 下标基准)\n      // 这里确认当前新下标位置未有对应的旧下标，防止是已在 map 中的节点\n      newIndexToOldIndexMap[j - s2] === 0 &&\n      isSameVNodeType(prevChild, c2[j])\n    ) {\n      newIndex = j\n      break\n    }\n  }\n}\n```\n\n在直接通过类型查找复用节点时，其存在一个`newIndexToOldIndexMap[j - s2] === 0`条件，它表示当前新节点下标未有对应的旧节点(`0`表示没有，在之后的代码中，如果查找到对应的`newIndex`，其会存入`newIndexToOldIndexMap`中)。这样可以防止新旧节点被重复复用或已被处理再次被处理。\n\n到此，对于旧节点的`newIndex`是否被查找到就会出现两种情况了：\n\n1. 没有，说明当前节点已删除了，移除该`DOM`节点\n2. 有，复用，**更新节点属性**\n\n```js\n// 没找到对应节点时说明该节点已经不存在了，直接进行unmount\nif (newIndex === undefined) {\n  unmount(prevChild)\n\n  // 找到时进行位置移动操作，并patch\n} else {\n  // 将旧节点位置下标+1后存入，新节点以s2为起点，即0坐标\n  newIndexToOldIndexMap[newIndex - s2] = i + 1\n\n  // 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，\n  // 那么每次都会进入该if语句\n  if (newIndex >= maxNewIndexSoFar) {\n    // 当前节点未移动，更新下标\n    maxNewIndexSoFar = newIndex\n\n    // 如果进入该else语句说明有节点之前节点交叉了\n  } else {\n    moved = true\n  }\n\n  // patch该节点\n  patch(prevChild, c2[newIndex])\n  patched++\n}\n```\n\n在复用的情况下，有我们刚刚提到的[计算节点交叉(是否需要移动)](#332-移除新节点队列中不存在的旧节点并更新复用节点)的场景：\n\n```js\n// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，\n// 那么每次都会进入该if语句\nif (newIndex >= maxNewIndexSoFar) {\n  // 当前节点未移动，更新下标\n  maxNewIndexSoFar = newIndex\n\n  // 如果进入该else语句说明有节点之前节点交叉了\n} else {\n  moved = true\n}\n```\n\n这里就不赘述了。\n\n> 注意，这里对复用的节点进行了`patch()`更新，那么后面就只用进行移动即可，而不需要更新了。\n\n#### 3.3.3 处理新增节点与移动的节点\n\n到此为止，就只有新增节点与移动节点的情况没有处理了。\n\n首先其会需要移动节点时(`moved = true`)根据刚刚创建的`newIndexToOldIndexMap`生成一个最长递增的新节点序列`increasingNewIndexSequence`。\n\n```js\njs复制代码// 5.3 move and mount\n// 5.3 移动与mount\n// generate longest stable subsequence only when nodes have moved\n// 有节点需要移动，生成长期稳定的子序列，仅对移动过的节点处理\nconst increasingNewIndexSequence = moved\n  ? // 获取最长递增子序列的下标数组\n    getSequence(newIndexToOldIndexMap)\n  : EMPTY_ARR\n```\n\n那么这个序列的作用是什么？它就是用来**辅助移动节点**，而且是在最小次数下移动节点。由于`newIndexToOldIndexMap`是根据新旧节点之间的映射创建的，其**下标天然代表乱序的新节点数组的顺序**，而且其对应下标中存储的元素也代表该新节点复用的旧节点的下标，那么这里我们就可以看到两个序列：\n\n1. 新节点下标组成的序列(**递增**的，因为我们以它为基准创建的数组)\n2. `newIndexToOldIndexMap`中旧节点下标组成的序列，可能递增也可能乱序\n\n> 关于如何求[最长递增子序列](https://link.juejin.cn?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FLongest_increasing_subsequence)，请单独自行学习，这里就不说明了。\n\n此时倘若旧节点下标组成的序列**也**呈现递增趋势，那么我们便可以操作那些非递增的节点来达到变更为新节点序列的目的。并且这个递增的序列越长，那么我们要操作(移动)的节点就越少。比如下图的情况：\n\n![image-20230528124733993](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124733993.png)\n\n从图中观察，我们可以清楚的看到`c/d`两个节点在前后都保持了递增的关系，那么此时我们只需要移动`e`节点与创建`h`节点即可。\n\n此时其`newIndexToOldIndexMap`为：\n\n```js\njs复制代码newIndexToOldIndexMap = [4, 2, 3, 0]\n\n// 该数组返回的是对应的元素在newIndexToOldIndexMap的下标\n// 而并非实际的旧节点下标\nincreasingNewIndexSequence = [1, 2]\n```\n\n可以看到`2、3`节点与新节点的下标的**递增关系保持一致**，其最长递增子序列(`increasingNewIndexSequence`)为`[1, 2]`，此时我们只需要操作`4/0`两个节点即可。\n\n> `increasingNewIndexSequence`返回的结果为对应的元素在 `newIndexToOldIndexMap`的下标而并非实际的旧节点下标\n\n明白了这个现在我们来看其具体处理的代码：\n\n```js\n// 获取递增序列的尾坐标\nj = increasingNewIndexSequence.length - 1\n\n// looping backwards so that we can use last patched node as anchor\n// 向后循环，这样我们可以用上一个patch过了的节点做锚点\nfor (i = toBePatched - 1; i >= 0; i--) {\n  // 当前要处理的新节点下标及其节点\n  const nextIndex = s2 + i\n  const nextChild = c2[nextIndex]\n\n  // 获取其后一个节点，如果没有则获取其父节点\n  const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor\n\n  // 如果当前新旧节点Map中未找到当前位置新节点的旧节点信息，\n  // 说明是新增节点\n  if (newIndexToOldIndexMap[i] === 0) {\n    // mount new\n    patch(null, nextChild)\n\n    // moved说明有节点需要移动，通过塑造一个递增序列，处于递增序列的节点就可以\n    // 不进行移动，只移动其余节点，这样就减少了节点的移动\n  } else if (moved) {\n    // 如果存在以下情况则移动：\n    // 1. 没有稳定的子序列\n    // 2. 当前节点不在这个稳定的子序列中\n    // move if:\n    // There is no stable subsequence (e.g. a reverse)\n    // OR current node is not among the stable sequence\n    if (j < 0 || i !== increasingNewIndexSequence[j]) {\n      move(nextChild, container, anchor)\n    } else {\n      j--\n    }\n  }\n}\n```\n\n本次遍历以新节点的乱序序列(`s2 <-> e2`)为基准，逆向进行遍历。逆向的原因是因为其在新增节点或更新节点时，可以以后面已经操作过的节点为锚点进行更新(想象一下`Node.insertBefore()/Node.appendChild()`的参数)。\n\n每次遍历会出现三种情况：\n\n- 当前节点未有对应的旧节点下标，则说明是新增节点\n- 该节点需要移动，进行移动\n- 该节点与旧节点序列都保持递增顺序，直接跳过即可(实际反应在代码里面就是没做任何处理)\n\n> 情况`2`与`3`在完整的迭代中是互斥的，两者不会同时出现在整个迭代流程中。\n\n第一种情况，比较简单，这里就不解释了：\n\n```js\n// 如果当前新旧节点Map中未找到当前位置新节点的旧节点信息，\n// 说明是新增节点\nif (newIndexToOldIndexMap[i] === 0) {\n  // mount new\n  patch(null, nextChild\n}\n```\n\n第二种情况要判定`moved = true`，它的原理[之前我们已经解释过了](#332-移除新节点队列中不存在的旧节点并更新复用节点)。这里我们要关注的是它的函数体。根据我们刚刚对递增子序列的理解，那么其应该会在以下情况移动或不移动节点：\n\n- 当前节点处于最长递增子序列中 —— 跳过\n- 当前节点不存在最长递增子序列中 —— 移动\n  - 递增序列已经没有需要跳过的节点了但任存在节点需要更新(实际和不存在的情况一样)\n  - 当前节点不存在最长递增子序列\n\n```js\n// 如果存在以下情况则移动：\n// 1. 没有稳定的子序列(实际和情况2一致，反序时会返回任意一个节点作为最长序列)\n// 2. 当前节点不在这个稳定的子序列中\n// move if:\n// There is no stable subsequence (e.g. a reverse)\n// OR current node is not among the stable sequence\nif (j < 0 || i !== increasingNewIndexSequence[j]) {\n  // 将当前节点移动到锚点节点前或容器节点最后(没有锚点时)\n  move(nextChild, container, anchor)\n} else {\n  j--\n}\n```\n\n![image-20230528124834143](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124834143.png)\n\n在第二次更新中，发现`d`节点存在于单调增序列中，所以本次更新可以跳过：\n\n![image-20230528124910205](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124910205.png)\n\n同理`c`节点也一样，这里就不放图了，处理完`c`节点后此时为这样\n\n![image-20230528124931580](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124931580.png)\n\n此时`e`节点可复用，则将其移动到新`c`节点前即可。\n\n到此为止，上图的`diff`就结束了。\n\n对于第三种情况，由于复用的节点在前后都保持了递增的关系，所以此时我们不需要再重复对节点进行处理，所以遇到复用的节点时直接跳过即可：\n\n![image-20230528125006064](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528125006064.png)\n\n到此为止全部节点的更新就已经完毕了。\n\n### 为什么组件中的 data 是一个函数？\n\n在 new Vue() 中，可以是函数也可以是对象，因为根实例只有一个，不会产生数据污染。\n\n在组件中，data 必须为函数，目的是为了防止多个组件实例对象之间共用一个 data，产生数据污染；而采用函数的形式，initData 时会将其作为工厂函数都会返回全新的 data 对象。\n\n### Vue 中组件间的通信方式？\n\n1. 父子组件通信：\n\n   父向子传递数据是通过`props`，子向父是通过`$emit`触发事件；通过父链/子链也可以通信（`$parent`/`$children`）；`ref`也可以访问组件实例；`provide`/`inject`；`$attrs`/`$listeners`。\n\n2. 兄弟组件通信：\n\n   全局事件总线`EventBus`、`Vuex`。\n\n3. 跨层级组件通信：\n\n   全局事件总线`EventBus`、`Vuex`、`provide`/`inject`。\n\n### v-show 和 v-if 的区别？\n\n1. 控制手段不同。`v-show`是通过给元素添加 css 属性`display: none`，但元素仍然存在；而`v-if`控制元素显示或隐藏是将元素整个添加或删除。\n2. 编译过程不同。`v-if`切换有一个局部编译/卸载的过程，切换过程中合适的销毁和重建内部的事件监听和子组件；`v-show`只是简单的基于 css 切换。\n3. 编译条件不同。`v-if`是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建，渲染条件为假时，并不做操作，直到为真才渲染。\n4. 触发生命周期不同。`v-show`由 false 变为 true 的时候不会触发组件的生命周期；`v-if`由 false 变为 true 的时候，触发组件的`beforeCreate`、`created`、`beforeMount`、`mounted`钩子，由 true 变为 false 的时候触发组件的`beforeDestory`、`destoryed`钩子。\n5. 性能消耗不同。`v-if`有更高的切换消耗；`v-show`有更高的初始渲染消耗。\n\n使用场景：\n 如果需要非常频繁地切换，则使用`v-show`较好，如：手风琴菜单，tab 页签等； 如果在运行时条件很少改变，则使用`v-if`较好，如：用户登录之后，根据权限不同来显示不同的内容。\n\n### computed 和 watch 的区别？\n\n- `computed`计算属性，依赖其它属性计算值，内部任一依赖项的变化都会重新执行该函数，计算属性有缓存，多次重复使用计算属性时会从缓存中获取返回值，计算属性必须要有`return`关键词。\n- `watch`侦听到某一数据的变化从而触发函数。当数据为对象类型时，对象中的属性值变化时需要使用深度侦听`deep`属性，也可在页面第一次加载时使用立即侦听`immdiate`属性。\n\n运用场景：\n 计算属性一般用在模板渲染中，某个值是依赖其它响应对象甚至是计算属性而来；而侦听属性适用于观测某个值的变化去完成一段复杂的业务逻辑。\n\n### v-if 和 v-for 为什么不建议放在一起使用？\n\nVue 2 中，`v-for`的优先级比`v-if`高，这意味着`v-if`将分别重复运行于每一个`v-for`循环中。如果要遍历的数组很大，而真正要展示的数据很少时，将造成很大的性能浪费。\n\nVue 3 中，则完全相反，`v-if`的优先级高于`v-for`，所以`v-if`执行时，它调用的变量还不存在，会导致异常。\n\n通常有两种情况导致要这样做：\n\n- 为了过滤列表中的项目，比如：`v-for = \"user in users\" v-if = \"user.active\"`。这种情况，可以定义一个计算属性，让其返回过滤后的列表即可。\n- 为了避免渲染本该被隐藏的列表，比如`v-for = \"user in users\"  v-if = \"showUsersFlag\"`。这种情况，可以将`v-if`移至容器元素上或在外面包一层`template`即可。\n\n### Vue 2中的set方法？\n\n[`set`是Vue 2中的一个全局API](https://link.juejin.cn?target=https%3A%2F%2Fv2.cn.vuejs.org%2Fv2%2Fapi%2F%23Vue-set)。可手动添加响应式数据，解决数据变化视图未更新问题。当在项目中直接设置数组的某一项的值，或者直接设置对象的某个属性值，会发现页面并没有更新。这是因为`Object.defineProperty()`的限制，监听不到数据变化，可通过`this.$set(数组或对象，数组下标或对象的属性名，更新后的值)`解决。\n\n### keep-alive 是什么？\n\n- 作用：实现组件缓存，保持组件的状态，避免反复渲染导致的性能问题。\n- 工作原理：Vue.js 内部将 DOM 节点，抽象成了一个个的 VNode 节点，`keep-alive`组件的缓存也是基于 VNode 节点的。它将满足条件的组件在 cache 对象中缓存起来，重新渲染的时候再将 VNode 节点从 cache 对象中取出并渲染。\n- 可以设置以下属性：\n   ① `include`：字符串或正则，只有名称匹配的组件会被缓存。\n   ② `exclude`：字符串或正则，任何名称匹配的组件都不会被缓存。\n   ③ `max`：数字，最多可以缓存多少组件实例。\n   匹配首先检查组件的`name`选项，如果`name`选项不可用，则匹配它的局部注册名称（父组件 components选项的键值），匿名组件不能被匹配。\n\n如果同时使用了`include`、`exclude`，那么`exclude`的优先级高于`include`。\n\n设置了`keep-alive`缓存的组件，会多出两个生命周期钩子：`activated`、`deactivated`。\n 首次进入组件时：beforeCreate --> created --> beforeMount --> mounted --> activated --> beforeUpdate --> updated --> deactivated\n 再次进入组件时：activated --> beforeUpdate --> updated --> deactivated\n\n### mixin\n\n`mixin`（混入）， 它提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。\n\n使用场景： 不同组件中经常会用到一些相同或相似的代码，这些代码的功能相对独立。可以通过mixin 将相同或相似的代码提出来。\n\n缺点：\n\n1. 变量来源不明确\n2. 多 mixin 可能会造成命名冲突（解决方式：Vue 3的组合API）\n3. mixin 和组件出现多对多的关系，使项目复杂度变高。\n\n### 插槽\n\n`slot`插槽，一般在组件内部使用，封装组件时，在组件内部不确定该位置是以何种形式的元素展示时，可以通过`slot`占据这个位置，该位置的元素需要父组件以内容形式传递过来。`slot`分为：\n\n- `默认插槽`：子组件用`<slot>`标签来确定渲染的位置，标签里面可以放`DOM`结构作为后备内容，当父组件在使用的时候，可以直接在子组件的标签内写入内容，该部分内容将插入子组件的`<slot>`标签位置。如果父组件使用的时候没有往插槽传入内容，后备内容就会显示在页面。\n- `具名插槽`：子组件用`name`属性来表示插槽的名字，没有指定`name`的插槽，会有隐含的名称叫做 `default`。父组件中在使用时在默认插槽的基础上通过`v-slot`指令指定元素需要放在哪个插槽中，`v-slot`值为子组件插槽`name`属性值。使用`v-slot`指令指定元素放在哪个插槽中，必须配合`<template>`元素，且一个`<template>`元素只能对应一个预留的插槽，即不能多个`<template>` 元素都使用`v-slot`指令指定相同的插槽。`v-slot`的简写是`#`，例如`v-slot:header`可以简写为`#header`。\n- 作用域插槽：子组件在<slot>标签上绑定props数据，以将子组件数据传给父组件使用。父组件获取插槽绑定 props 数据的方法：\n  1. scope=\"接收的变量名\"：`<template scope=\"接收的变量名\">`\n  2. slot-scope=\"接收的变量名\"：`<template slot-scope=\"接收的变量名\">`\n  3. v-slot:插槽名=\"接收的变量名\"：`<template v-slot:插槽名=\"接收的变量名\">`\n\n### Vue 中的修饰符有哪些？\n\n在Vue 中，修饰符处理了许多 DOM 事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理。Vue中修饰符分为以下几种：\n\n1. 表单修饰符\n    `lazy` 填完信息，光标离开标签的时候，才会将值赋予给value，也就是在`change`事件之后再进行信息同步。\n    `number` 自动将用户输入值转化为数值类型，但如果这个值无法被`parseFloat`解析，则会返回原来的值。\n    `trim` 自动过滤用户输入的首尾空格，而中间的空格不会被过滤。\n\n2. 事件修饰符\n    `stop` 阻止了事件冒泡，相当于调用了`event.stopPropagation`方法。\n    `prevent` 阻止了事件的默认行为，相当于调用了`event.preventDefault`方法。\n    `self` 只当在 `event.target` 是当前元素自身时触发处理函数。\n    `once` 绑定了事件以后只能触发一次，第二次就不会触发。\n    `capture` 使用事件捕获模式，即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理。\n    `passive` 告诉浏览器你不想阻止事件的默认行为。\n    `native` 让组件变成像`html`内置标签那样监听根元素的原生事件，否则组件上使用 `v-on` 只会监听自定义事件。\n\n3. 鼠标按键修饰符\n    `left` 左键点击。\n    `right` 右键点击。\n    `middle` 中键点击。\n\n4. 键值修饰符\n\n   键盘修饰符是用来修饰键盘事件（onkeyup，onkeydown）的，有如下：keyCode\n\n   存在很多，但vue为我们提供了别名，分为以下两种：\n\n   - 普通键（enter、tab、delete、space、esc、up...）\n   - 系统修饰键（ctrl、alt、meta、shift...）\n\n### 对 SPA 的理解？\n\n1. 概念：\n    `SPA（Single-page  application）`，即单页面应用，它是一种网络应用程序或网站的模型，通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换时打断用户体验。在`SPA`中，所有必要的代码（HTML、JavaScript 和 CSS）都通过单个页面的加载而检索，或者根据需要（通常是响应用户操作）动态装载适当的资源并添加到页面。页面在任何时间点都不会重新加载，也不会将控制转移到其他页面。举个例子，就像一个杯子，上午装的是牛奶，中午装的是咖啡，下午装的是茶，变得始终是内容，杯子始终不变。\n\n2. `SPA`与`MPA`的区别：\n    `MPA（Muti-page application）`，即多页面应用。在`MPA`中，每个页面都是一个主页面，都是独立的，每当访问一个页面时，都需要重新加载 Html、CSS、JS 文件，公共文件则根据需求按需加载。\n\n   |                 | SPA                       | MPA                                 |\n   | --------------- | ------------------------- | ----------------------------------- |\n   | 组成            | 一个主页面和多个页面片段  | 多个主页面                          |\n   | url模式         | hash模式                  | history模式                         |\n   | SEO搜索引擎优化 | 难实现，可使用SSR方式改善 | 容易实现                            |\n   | 数据传递        | 容易                      | 通过url、cookie、localStorage等传递 |\n   | 页面切换        | 速度快，用户体验良好      | 切换加载资源，速度慢，用户体验差    |\n   | 维护成本        | 相对容易                  | 相对复杂                            |\n\n3. `SPA`的优缺点：\n    优点：\n\n   - 具有桌面应用的即时性、网站的可移植性和可访问性\n   - 用户体验好、快，内容的改变不需要重新加载整个页面\n   - 良好的前后端分离，分工更明确\n\n   缺点：\n\n   - 不利于搜索引擎的抓取\n   - 首次渲染速度相对较慢\n\n### 双向绑定？\n\n1. 概念：\n    Vue 中双向绑定是一个指令`v-model`，可以绑定一个响应式数据到视图，同时视图的变化能改变该值。`v-model`是语法糖，默认情况下相当于`:value`和`@input`，使用`v-model`可以减少大量繁琐的事件处理代码，提高开发效率。\n2. 使用：\n    通常在表单项上使用`v-model`，还可以在自定义组件上使用，表示某个值的输入和输出控制。\n3. 原理：\n    `v-model`是一个指令，双向绑定实际上是Vue 的编译器完成的，通过输出包含`v-model`模版的组件渲染函数，实际上还是`value`属性的绑定及`input`事件监听，事件回调函数中会做相应变量的更新操作。\n\n### 子组件是否可以直接改变父组件的数据？\n\n1. 所有的`prop`都遵循着单项绑定原则，`props`因父组件的更新而变化，自然地将新状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。\n    另外，每次父组件更新后，所有的子组件中的`props`都会被更新为最新值，这就意味着不应该子组件中去修改一个`prop`，若这么做了，Vue 会在控制台上抛出警告。\n2. 实际开发过程中通常有两个场景导致要修改prop：\n   - `prop`被用于传入初始值，而子组件想在之后将其作为一个局部数据属性。这种情况下，最好是新定义一个局部数据属性，从`props`获取初始值即可。\n   - 需要对传入的`prop`值做进一步转换。最好是基于该`prop`值定义一个计算属性。\n3. 实践中，如果确实要更改父组件属性，应`emit`一个事件让父组件变更。当对象或数组作为`props`被传入时，虽然子组件无法更改`props`绑定，但仍然**可以**更改对象或数组内部的值。这是因为JS的对象和数组是按引用传递，而对于 Vue 来说，禁止这样的改动虽然可能，但是有很大的性能损耗，比较得不偿失。\n\n### router 和 route 的区别？\n\n1. `$router`是VueRouter的实例对象，是一个全局的路由对象，包含了所有路由的对象和属性。\n2. `$route`是一个跳转的路由对象，可以认为是当前组件的路由管理，指当前激活的路由对象，包含当前url解析得到的数据，可以从对象里获取一些数据，如：name，path，params，query等。\n\n\n\n### vue-router 的路由传参方式？\n\n1. 声明式导航 `router-link`：\n\n```js\n<router-link :to=\"'/users?userId:1'\"></router-link>\n<router-link :to=\"{ name: 'users', params: { userId: 1 } }\"></router-link>\n<router-link :to=\"{ path: '/users', query: { userId: 1 } }\"></router-link>\n```\n\n1. 编程式导航 router-push：\n\n   - 通过`params`传参\n\n   ```js\n   this.$router.push({\n       name: 'users',\n       params: {\n           userId: 1\n       }\n   });\n   // 路由配置\n   {\n       path: '/users',\n       name: 'users',\n       component: User\n   }\n   // 跳转后获取路由参数\n   this.$route.params.userId // 为 1\n   ```\n\n   - 通过`query`传参\n\n   ```php\n   this.$router.push({\n       path: '/users',\n       query: {\n           userId: 1\n       } \n   });\n   // 路由配置\n   {\n       path: '/users',\n       name: 'users',\n       component: User\n   }\n   // 跳转后获取路由参数\n   this.$route.query.userId\n   ```\n\n   - 动态路由\n\n   ```js\n   this.$router.push('/users/${userId}');\n   // 路由配置\n   {\n       path: '/users/:userId',\n       name: 'users',\n       component: User\n   }\n   // 跳转后获取路由参数\n   this.$route.params.userId\n   ```\n\n\n\n### Vue Router中的常用路由模式和原理？\n\n1. hash 模式：\n\n- `location.hash`的值就是url中 `#` 后面的东西。它的特点在于：hash虽然出现url中，但不会被包含在HTTP请求中，对后端完全没有影响，因此改变hash不会重新加载页面。\n- 可以为hash的改变添加监听事件`window.addEventListener(\"hashchange\", funcRef, false)`，每一次改变`hash (window.location.hash)`，都会在浏览器的访问历史中增加一个记录，利用hash的以上特点，就可以实现**前端路由更新视图但不重新请求页面**的功能了。\n   特点：兼容性好但是不美观\n\n1. history 模式：\n    利用 HTML5 History Interface 中新增的`pushState()`和`replaceState()`方法。\n    这两个方法应用于浏览器的历史记录栈，在当前已有的`back`、`forward`、`go` 的基础上(使用`popState()`方法)，他们提供了对历史记录进行修改的功能。\n    这两个方法有个共同点：当调用他们修改浏览器历史记录栈后，虽然当前url改变了，但浏览器不会刷新页面，这就为单页面应用前端路由“更新视图但不重新请求页面”提供了基础\n    特点：虽然美观，但是刷新会出现 404 需要后端进行配置。\n\n### 动态路由？\n\n很多时候，我们需要将给定匹配模式的路由映射到同一个组件，这种情况就需要定义动态路由。例如，我们有一个 User组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用`动态路径参数（dynamic segment）`来达到这个效果：`{path: '/user/:id', compenent: User}`，其中`:id`就是动态路径参数。\n\n### 对Vuex的理解？\n\n1. 概念：\n    Vuex 是 Vue 专用的状态管理库，它以全局方式集中管理应用的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n2. 解决的问题：\n    Vuex 主要解决的问题是多组件之间状态共享。利用各种通信方式，虽然也能够实现状态共享，但是往往需要在多个组件之间保持状态的一致性，这种模式很容易出问题，也会使程序逻辑变得复杂。Vuex 通过把组件的共享状态抽取出来，以全局单例模式管理，这样任何组件都能用一致的方式获取和修改状态，响应式的数据也能够保证简洁的单向流动，使代码变得更具结构化且易于维护。\n3. 什么时候用:\n    Vuex 并非是必须的，它能够管理状态，但同时也带来更多的概念和框架。如果我们不打算开发大型单页应用或应用里没有大量全局的状态需要维护，完全没有使用Vuex的必要，一个简单的 store 模式就够了。反之，Vuex将是自然而然的选择。\n4. 用法：\n    Vuex 将全局状态放入`state`对象中，它本身是一颗状态树，组件中使用`store`实例的`state`访问这些状态；然后用配套的`mutation`方法修改这些状态，并且只能用`mutation`修改状态，在组件中调用`commit`方法提交`mutation`；如果应用中有异步操作或复杂逻辑组合，需要编写`action`，执行结束如果有状态修改仍需提交`mutation`，组件中通过`dispatch`派发`action`。最后是模块化，通过`modules`选项组织拆分出去的各个子模块，在访问状态（state）时需注意添加子模块的名称，如果子模块有设置`namespace`，那么提交`mutation`和派发`action`时还需要额外的命名空间前缀。\n\n### 页面刷新后Vuex 状态丢失怎么解决？\n\nVuex 只是在内存中保存状态，刷新后就会丢失，如果要持久化就需要保存起来。\n\n`localStorage`就很合适，提交`mutation`的时候同时存入`localStorage`，在`store`中把值取出来作为`state`的初始值即可。\n\n也可以使用第三方插件，推荐使用`vuex-persist`插件，它是为 Vuex 持久化储存而生的一个插件，不需要你手动存取`storage`，而是直接将状态保存至 `cookie` 或者 `localStorage`中。\n\n### 关于 Vue SSR 的理解？\n\n`SSR`即`服务端渲染（Server Side Render）`，就是将 Vue 在客户端把标签渲染成 html 的工作放在服务端完成，然后再把 html 直接返回给客户端。\n\n- 优点：\n   有着更好的 SEO，并且首屏加载速度更快。\n- 缺点：\n   开发条件会受限制，服务器端渲染只支持 beforeCreate 和 created 两个钩子，当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于 Node.js 的运行环境。服务器会有更大的负载需求。\n\n### 了解哪些 Vue 的性能优化方法？\n\n- 路由懒加载。有效拆分应用大小，访问时才异步加载。\n- `keep-alive`缓存页面。避免重复创建组件实例，且能保留缓存组件状态。\n- `v-for`遍历避免同时使用`v-if`。实际上在 Vue 3 中已经是一个错误用法了。\n- 长列表性能优化，可采用虚拟列表。\n- `v-once`。不再变化的数据使用`v-once`。\n- 事件销毁。组件销毁后把全局变量和定时器销毁。\n- 图片懒加载。\n- 第三方插件按需引入。\n- 子组件分割。较重的状态组件适合拆分。\n- 服务端渲染。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/js/vue复习.md","raw":"---\ntitle: vue复习\ntags:\n  - vue\n  - JS\ncategories: 面试\nkeywords: vue复习\ndescription: vue复习\ntop_img: 设置false不显示顶部图片\nsticky: 数值越大越靠前\ncover: \"https://raw.githubusercontent.com/why862555625/images/main/images/15.jpg\"\ncomments: false评论\nabbrlink: c9a941a3\ndate: 2023-05-26 15:38:34\nupdated: 2023-05-26 15:38:34\n---\n\n\n\nvue复习\n\n<!-- more -->\n\n### MVVM模型？\n\nMVVM，是`Model-View-ViewModel`的简写，其本质是`MVC`模型的升级版。其中 `Model` 代表数据模型，`View` 代表看到的页面，`ViewModel`是`View`和`Model`之间的桥梁，数据会绑定到`ViewModel`层并自动将数据渲染到页面中，视图变化的时候会通知`ViewModel`层更新数据。以前是通过操作`DOM`来更新视图，现在是`数据驱动视图`。\n\n### Vue的生命周期\n\nVue 的生命周期可以分为8个阶段：创建前后、挂载前后、更新前后、销毁前后，以及一些特殊场景的生命周期。Vue 3 中还新增了是3个用于调试和服务端渲染的场景。\n\n| Vue 2中的生命周期钩子 | Vue 3选项式API的生命周期选项 | Vue 3 组合API中生命周期钩子 | 描述                                                   |\n| --------------------- | ---------------------------- | --------------------------- | ------------------------------------------------------ |\n| `beforeCreate`        | `beforeCreate`               | `setup()`                   | 创建前，此时`data`和 `methods`的数据都还没有初始化     |\n| `created`             | `created`                    | `setup()`                   | 创建后，`data`中有值，尚未挂载，可以进行一些`Ajax`请求 |\n| `beforeMount`         | `beforeMount`                | `onBeforeMount`             | 挂载前，会找到虚拟`DOM`，编译成`Render`                |\n| `mounted`             | `mounted`                    | `onMounted`                 | 挂载后，`DOM`已创建，可用于获取访问数据和`DOM`元素     |\n| `beforeUpdate`        | `beforeUpdate`               | `onBeforeUpdate`            | 更新前，可用于获取更新前各种状态                       |\n| `updated`             | `updated`                    | `onUpdated`                 | 更新后，所有状态已是最新                               |\n| `beforeDestroy`       | `beforeUnmount`              | `onBeforeUnmount`           | 销毁前，可用于一些定时器或订阅的取消                   |\n| `destroyed`           | `unmounted`                  | `onUnmounted`               | 销毁后，可用于一些定时器或订阅的取消                   |\n| `activated`           | `activated`                  | `onActivated`               | `keep-alive`缓存的组件激活时                           |\n| `deactivated`         | `deactivated`                | `onDeactivated`             | `keep-alive`缓存的组件停用时                           |\n| `errorCaptured`       | `errorCaptured`              | `onErrorCaptured`           | 捕获一个来自子孙组件的错误时调用                       |\n| —                     | `renderTracked`              | `onRenderTracked`           | 调试钩子，响应式依赖被收集时调用                       |\n| —                     | `renderTriggered`            | `onRenderTriggered`         | 调试钩子，响应式依赖被触发时调用                       |\n| —                     | `serverPrefetch`             | `onServerPrefetch`          | 组件实例在服务器上被渲染前调用                         |\n\n**关于Vue 3中的生命周期建议阅读官方文档!!!!**\n\n[组合式 API：生命周期钩子--官方文档](https://link.juejin.cn/?target=https%3A%2F%2Fcn.vuejs.org%2Fapi%2Fcomposition-api-lifecycle.html)\n[选项式 API：生命周期选项--官方文档](https://link.juejin.cn/?target=https%3A%2F%2Fcn.vuejs.org%2Fapi%2Foptions-lifecycle.html)\n\n**父子组件的生命周期：**\n\n- `加载渲染阶段`：父 beforeCreate -> 父 created -> 父 beforeMount -> 子 beforeCreate -> 子 created -> 子 beforeMount -> 子 mounted -> 父 mounted\n- `更新阶段`：父 beforeUpdate -> 子 beforeUpdate -> 子 updated -> 父 updated\n- `销毁阶段`：父 beforeDestroy -> 子 beforeDestroy -> 子 destroyed -> 父 destroyed\n\n### Vue.$nextTick\n\n**在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。**\n\n`nextTick` 是 Vue 提供的一个全局 API，由于 Vue 的异步更新策略，导致我们对数据修改后不会直接体现在 DOM 上，此时如果想要立即获取更新后的 DOM 状态，就需要借助该方法。\n\nVue 在更新 DOM 时是异步执行的。当数据发生变化，Vue 将开启一个异步更新队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 `watcher` 被多次触发，只会被推入队列一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。`nextTick`方法会在队列中加入一个回调函数，确保该函数在前面的 DOM 操作完成后才调用。\n\n使用场景：\n\n1. 如果想要在修改数据后立刻得到更新后的`DOM`结构，可以使用`Vue.nextTick()`\n2. 在`created`生命周期中进行`DOM`操作\n\n### Vue 实例挂载过程中发生了什么？\n\n挂载过程指的是 `app.mount()`过程，这是一个初始化过程，整体上做了两件事情：`初始化`和`建立更新机制`。\n\n初始化会创建组件实例、初始化组件状态、创建各种响应式数据。\n\n建立更新机制这一步会立即执行一次组件的更新函数，这会首次执行组件渲染函数并执行`patch`将`vnode` 转换为 `dom`； 同时首次执行渲染函数会创建它内部响应式数据和组件更新函数之间的依赖关系，这使得以后数据发生变化时会执行对应的更新函数。\n\n### Vue 的模版编译原理\n\nVue 中有个独特的编译器模块，称为`compiler`，它的主要作用是将用户编写的`template`编译为js中可执行的`render`函数。\n 在Vue 中，编译器会先对`template`进行解析，这一步称为`parse`，结束之后得到一个JS对象，称之为`抽象语法树AST`；然后是对`AST`进行深加工的转换过程，这一步称为`transform`，最后将前面得到的`AST`生成JS代码，也就是`render`函数。\n\n### Vue 的响应式原理\n\n1. Vue 2 中的数据响应式会根据数据类型做不同的处理。如果是对象，则通过\n\n   ```\n   Object.defineProperty(obj,key,descriptor)\n   ```\n\n   拦截对象属性访问，当数据被访问或改变时，感知并作出反应；如果是数组，则通过覆盖数组原型的方法，扩展它的7个变更方法（push、pop、shift、unshift、splice、sort、reverse），使这些方法可以额外的做更新通知，从而做出响应。\n\n   缺点：\n\n   - 初始化时的递归遍历会造成性能损失；\n   - 通知更新过程需要维护大量 `dep` 实例和 `watcher` 实例，额外占用内存较多；\n   - 新增或删除对象属性无法拦截，需要通过 `Vue.set` 及 `delete` 这样的 API 才能生效；\n   - 对于`ES6`中新产生的`Map`、`Set`这些数据结构不支持。\n\n2. Vue 3 中利用`ES6`的`Proxy`机制代理需要响应化的数据。可以同时支持对象和数组，动态属性增、删都可以拦截，新增数据结构均支持，对象嵌套属性运行时递归，用到时才代理，也不需要维护特别多的依赖关系，性能取得很大进步。\n\n### 虚拟DOM\n\n1. 概念：\n    虚拟DOM，顾名思义就是虚拟的DOM对象，它本身就是一个JS对象，只不过是通过不同的属性去描述一个视图结构。\n2. 虚拟DOM的好处：\n    (1) 性能提升\n    直接操作DOM是有限制的，一个真实元素上有很多属性，如果直接对其进行操作，同时会对很多额外的属性内容进行了操作，这是没有必要的。如果将这些操作转移到JS对象上，就会简单很多。另外，操作DOM的代价是比较昂贵的，频繁的操作DOM容易引起页面的重绘和回流。如果通过抽象VNode进行中间处理，可以有效减少直接操作DOM次数，从而减少页面的重绘和回流。\n    (2) 方便跨平台实现\n    同一VNode节点可以渲染成不同平台上对应的内容，比如：渲染在浏览器是DOM元素节点，渲染在Native（iOS、Android）变为对应的控件。Vue 3 中允许开发者基于VNode实现自定义渲染器（renderer），以便于针对不同平台进行渲染。\n3. 结构：\n    没有统一的标准，一般包括`tag`、`props`、`children`三项。\n    `tag`：必选。就是标签，也可以是组件，或者函数。\n    `props`：非必选。就是这个标签上的属性和方法。\n    `children`：非必选。就是这个标签的内容或者子节点。如果是文本节点就是字符串；如果有子节点就是数组。换句话说，如果判断`children`是字符串的话，就表示一定是文本节点，这个节点肯定没有子元素。\n\n### diff 算法\n\n由于目前`Vue3`对于性能的优化做了很多的处理，所以其在更新时并不会对所有的节点都进行`diff`更新。目前会进行`diff`更新的有以下两种情况：\n\n- `v-for`容器节点\n- 自写的`render()`函数\n\n还有一种特殊情况会进行无`diff`的按序更新，这种更新是全替换模式，非常耗时：\n\n- 无`key`值的`v-for`语句，此时会打上`UNKEYED_FRAGMENT`标记\n\n注意，`Vue3`没有主动提供片段这个功能，仅会在出现以下写法时会生成片段：\n\n- 一个组件有多个根节点，会生成一个片段包裹，此时其为稳定片段(`STABLE_FRAGMENT`)\n- `v-for`语句，会生成一个片段包裹\n- `v-if`语句，有多个子节点或不为单个文本节点，会生成一个片段包裹(`STABLE_FRAGMENT`)\n\n> 本文上述论点都是基于浏览器环境，非*NodeJS*环境(*SSR*)。文中提供的代码进行了**适当的简化**。\n\n在我们使用`template`的情况下，更新基本上会通过`block`进行更新——即节点自更新\n\n#### diff 更新\n\n##### VUE2\n\n![image-20230528150909234](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528150909234.png)\n\n\n\n![image-20230528150936549](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528150936549.png)\n\n\n\n![image-20230528151019742](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151019742.png)\n\n\n\n![image-20230528151119230](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151119230.png)\n\n第一次对比后结果\n\n![image-20230528151309763](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151309763.png)\n\n第二次\n\n![image-20230528151400771](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151400771.png)\n\n第三次\n\n![image-20230528151428703](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151428703.png)\n\n最后整理\n\n![image-20230528151504941](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151504941.png)\n\n##### VUE3\n\n`diff`更新调用的内部的`patchKeyedChildren`方法，其大致流程分为三步：\n\n1. 对比新旧节点头部相同指针的节点，相同则进行`diff`，不同则跳转下一步。\n2. 对比新旧节点尾部指针指向节点，相同则进行`diff`，不同则跳转下一步。\n3. 此时剩余新旧节点，可能存在乱序、已移除或新增的情况，进行特殊处理来更新。\n\n下面是函数最开始做的初始化，其中`c1/c2`分别代表新旧节点的子节点数组；`i`表示两个新旧节点指向同步的指针，它们是同步的；`e1/e2`分别代表指向两个子节点数组尾部的指针：\n\n```js\nlet i = 0\nconst l2 = c2.length\n\n// 变更前节点的尾下标\nlet e1 = c1.length - 1 // prev ending index\n\n// 变更后节点的尾下标\nlet e2 = l2 - 1 // next ending index\n```\n\n其中`patch()`函数用于对节点进行更新，`isSameVNodeType()`函数用于判断两个节点是否具有相同的类型，此时其需要满足类型一样且`key`值相等。\n\n> 这里的类型指，例如组件，则其为组件的配置对象，元素则为元素的标记。\n\n\n\n#### 1. 对比头部等位指针节点\n\n首先其会从头部指针开始，对比新旧节点是否相同：\n\n```js\njs复制代码// 1. sync from start\n// 1. 从开始位置同步\n// (a b) c\n// (a b) d e\nwhile (i <= e1 && i <= e2) {\n  const n1 = c1[i]\n  const n2 = c2[i]\n\n  // 节点没有发生变更时，进行patch\n  if (isSameVNodeType(n1, n2)) {\n    patch(n1, n2)\n    // 不同节点时，立刻结束\n  } else {\n    break\n  }\n  i++\n}\n```\n\n注释中给出了一个例子，即如果存在下图的新旧队列：\n\n![image-20230527224906472](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527224906472.png)\n\n由于此时两个指针的`VNode`相同，那么可以复用则直接进行`patch()`更新。之后指针向右移动一位，对比两个数组下标为 `1` 的位置：\n\n![image-20230527225018797](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225018797.png)\n\n同样的，节点相同，进行更新然后指针向后移动：\n\n![image-20230527225137121](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225137121.png)\n\n\n\n此时两个节点不一样了，那么本次头部对比到此结束。到此我们排除了头部位置可复用的节点，接下来那么肯定是排除尾部位置的可复用节点。\n\n### 2. 对比尾部等位指针节点\n\n尾部的可复用节点检查方法与头部一样，唯一一点不同的是，它们有各自的指针分别指向子节点数组尾部。所以此时要使用两个指针`e1/e2`。\n\n以此时要使用两个指针`e1/e2`。\n\n```js\njs复制代码// 2. sync from end\n// 2. 从尾部位置开始查找\n// a (b c)\n// d e (b c)\nwhile (i <= e1 && i <= e2) {\n  const n1 = c1[e1]\n  const n2 = c2[e2]\n  if (isSameVNodeType(n1, n2)) {\n    patch(n1, n2)\n  } else {\n    break\n  }\n  e1--\n  e2--\n}\n```\n\n还是按注释中的例子放图：\n\n![image-20230527225256542](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225256542.png)\n\n当前指针指向节点相同，节点可复用，直接更新，同时指针向前一起移动：\n\n![image-20230527225417598](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225417598.png)\n\n当前指针指向节点相同，节点可复用，直接更新，同时指针向前一起移动：\n\n![](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225513256.png)\n\n\n\n此时，两个指针指向节点不再相同，停止此处的对比。\n\n------\n\n经过前两步的处理，新旧队列已经进一步缩短了，此时剩下的节点就可能存在下面三种情况：\n\n- 有新增的节点\n- 有节点被删除了\n- 相同的节点，但是移动了位置\n\n在实际的场景中，那么就只能存在下面三种剩余情况：\n\n- 仅有新增的节点(此时一定`i > e1`)\n- 仅进行了节点删除(此时一定`i > e2`)\n- 乱序的，一定有移动的节点，其中可能包含新增或有删除的节点(此时一定有`i <= e2`且`i <= e1`)\n\n`Vue`按处理的简易程度，`Vue`先对前两种情况进行了单独的处理，再对三种混有的情况进行了处理。\n\n#### 3.1 处理新增的节点的单独情况\n\n判断新增的节点是以旧队列为基准，那么此时的情况是这样的：\n\n![image-20230527230120660](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230120660.png)\n\n\n\n或新增的节点在首部：\n\n![image-20230527230226562](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230226562.png)\n\n\n\n此时会存在这样的情况`e1 < i`且`e2 >= i`，那么我们只需要更新`e1 => i`间的节点即可，于是有了这些代码：\n\n```js\n// 3. common sequence + mount\n// 3. 有新增的节点时\n// (a b)\n// (a b) c\n// i = 2, e1 = 1, e2 = 2\n// (a b)\n// c (a b)\n// i = 0, e1 = -1, e2 = 0\nif (i <= e2) {\n  if (i > e1) {\n    //  当前节点后面的节点\n    const nextPos = e2 + 1\n\n    // 我们要以这个节点为锚点在其之前添加元素，没有则添加到父节点最后\n    const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor\n    while (i <= e2) {\n      patch(null, c2[i])\n      i++\n    }\n  }\n}\n```\n\n#### 3.2 处理删除节点的单独情况\n\n如果没有存在仅有新增节点的情况，那么其会判断是否是仅进行删除节点的情况，此时可能出现下图的两种情况：\n\n删除节点在尾部：\n\n![](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230416959.png)\n\n\n\n删除节点在尾部：\n\n![image-20230527230458558](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230458558.png)\n\n\n\n此时`i > e2`，那么我们只需要将旧节点数组中`i => e1`之间的所有节点删除即可(下面的`else if`语句承接上面)：\n\n```js\njs复制代码// 4. common sequence + unmount\n// 4. 节点移除\n// (a b) c\n// (a b)\n// i = 2, e1 = 2, e2 = 1\n// a (b c)\n// (b c)\n// i = 0, e1 = 0, e2 = -1\nelse if (i > e2) {\n  while (i <= e1) {\n    // 移除原节点\n    unmount(c1[i])\n    i++\n  }\n}\n```\n\n#### 3.3 乱序，但一定有移动的节点的情况\n\n最后一种情况就是比较复杂的情况，此时`Vue`做的处理是，先查看旧节点序列在变为新节点序列后，旧节点序列中是否有些节点还是按现在的顺序排列的(可以间断)，此时只对其余变更的节点进行操作，就能进行最小幅度的`DOM`操作了。\n\n> 此时相对于求旧节点的最长递增序列，这里你可以会想到为什么不求最小编辑距离，因为最小编辑距离的时间复杂度在大多数情况下比它高\n\n##### 3.3.1 建立新节点 key 与其下标的映射\n\n首先，`Vue`先将新节点数组进行遍历，将它们有`key`值的节点与其在新节点数组中的下标建立映射，存储在`keyToNewIndexMap`中，方便在复用时查找：\n\n```js\nconst s1 = i // prev starting index\nconst s2 = i // next starting index\n\n// 5.1 build key:index map for newChildren\n// 5.1 生成一个key map\nconst keyToNewIndexMap = new Map()\n\n// 遍历新节点，乱序的部分，将这些具有key的节点存入map\nfor (i = s2; i <= e2; i++) {\n  const nextChild = c2[i]\n  if (nextChild.key != null) {\n    keyToNewIndexMap.set(nextChild.key, i)\n  }\n}\n```\n\n##### 3.3.2 移除新节点队列中不存在的旧节点并更新复用节点\n\n之后，遍历旧节点数组，通过刚刚建立的`Map`，如果当前旧节点在新节点数组中已经不存在了，那么说明要移除了。\n\n整个过程比较复杂，因为要预先做处理，为后续是否需要移动节点做准备：\n\n```js\n// 5.2 loop through old children left to be patched and try to patch\n// matching nodes & remove nodes that are no longer present\n// 5.2 遍历旧节点，patch匹配的节点，移除不再在节点\nlet j\n\n// 当前处理过的节点数\nlet patched = 0\n\n// 需要patch的节点数\nconst toBePatched = e2 - s2 + 1\n\n// 是否需要移动节点\nlet moved = false\n\n// used to track whether any node has moved\n// 记录节点是否已经移动\nlet maxNewIndexSoFar = 0\n\n// works as Map<newIndex, oldIndex>\n// Note that oldIndex is offset by +1\n// and oldIndex = 0 is a special value indicating the new node has\n// no corresponding old node.\n// 注意旧下标的值都会+1，因为0表示没有对应的旧节点\n// used for determining longest stable subsequence\n// 新下标与旧下标的map\n// 这里的新下标以s2位置为0下标，而旧下标为旧下标值 +１\nconst newIndexToOldIndexMap = new Array(toBePatched)\n\n// 初始化值为0\nfor (i = 0; i < toBePatched; i++) newIndexToOldIndexMap[i] = 0\n```\n\n这里我说明下三个变量，首先是`newIndexToOldIndexMap`，其用来记录节点的新坐标到旧坐标的映射(当然是节点可复用的情况下)。为了后续计算最长递增子序列，所以其新坐标以`s2`为起点，长度为当前需要处理的节点总数，并且其存入的旧节点下标要在原值的基础上`+ 1`(因为`0`表示当前节点没有对应的旧节点)。举个例子，有如下图一样的更新序列：\n\n![image-20230527230956800](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230956800.png)\n\n那么节点`e`存入`newIndexToOldIndexMap`后为：\n\n```js\n// 展示，不是赋值语句\nnewIndexToOldIndexMap = [4, 0, 0, 0]\n```\n\n其余全部节点存入后为：\n\n```js\n// 展示，不是赋值语句\nnewIndexToOldIndexMap = [4, 3, 2, 0]\n```\n\n`moved`变量则是表示是否有节点需要移动，其判定要基于`maxNewIndexSoFar`的值。\n\n`maxNewIndexSoFar`表示当前可复用节点距离`s2`(即第一个乱序节点的最远距离)。如果有对应可以复用的节点，那么在每次迭代处理节点时，如果当前节点所处位置距离`s2`距离超过`maxNewIndexSoFar`，那么`maxNewIndexSoFar`会更新为当前节点在新队列中的下标；当其小于`maxNewIndexSoFar`时，就会标记`moved = true`。\n\n```js\n// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，\n// 那么每次都会进入该if语句\nif (newIndex >= maxNewIndexSoFar) {\n  // 当前节点未移动，更新下标\n  maxNewIndexSoFar = newIndex\n\n  // 如果进入该else语句说明有节点之前节点交叉了\n} else {\n  moved = true\n}\n```\n\n想象一下，如果节点在新旧序列中，都是按照相同的顺序递增，那么`maxNewIndexSoFar`也会一直递增，即每次迭代`newIndex >= maxNewIndexSoFar`，那么就不需要移动节点；但是如果某次迭代，`newIndex < maxNewIndexSoFar`，那么说明当前节点由之前靠后的位置移动了现在靠前的位置。\n\n就拿刚刚乱序的图举例，第一次迭代`c`节点的`newIndex = 4`，则`maxNewIndexSoFar = 4`；第二次迭代`d`节点时，其`newIndex = 3`，此时`newIndex < maxNewIndexSoFar`，说明`c/d`节点之间的位置在新旧发生了交叉，所以我们至少需要移动它们其中一个节点。\n\n理解了这个道理，现在我们可以正式看看这段代码了。由于要卸载节点，那么本次遍历要以`s1 <-> e1`之间的节点为基准进行遍历，整体遍历代码如下：\n\n```js\n// 遍历旧节点\nfor (i = s1; i <= e1; i++) {\n  // 当前下标的旧节点\n  const prevChild = c1[i]\n\n  // 当前patch的节点数超过新节点中要patch的总数时，执行unmount操作\n  // 直接进行卸载操作，因为多余的节点不需要了\n  if (patched >= toBePatched) {\n    // all new children have been patched so this can only be a removal\n    unmount(prevChild)\n    continue\n  }\n\n  // 尝试寻找是否有对应的新节点\n  let newIndex\n\n  // 旧节点具有key时，获取相同key值节点所处的下标\n  if (prevChild.key != null) {\n    newIndex = keyToNewIndexMap.get(prevChild.key)\n\n    // 没有key时则找相同类型的节点是否存在\n  } else {\n    // key-less node, try to locate a key-less node of the same type\n    // 当前查找范围为新节点中需要patch的节点之间\n    for (j = s2; j <= e2; j++) {\n      if (\n        // 0表示对应下标下当前还未有节点(注意当前是以s2为0下标基准)\n        // 这里确认当前新下标位置未有对应的旧下标，防止是已在map中的节点\n\n        newIndexToOldIndexMap[j - s2] === 0 &&\n        isSameVNodeType(prevChild, c2[j])\n      ) {\n        newIndex = j\n        break\n      }\n    }\n  }\n\n  // 没找到对应节点时说明该节点已经不存在了，直接进行unmount\n  if (newIndex === undefined) {\n    unmount(prevChild)\n\n    // 找到时进行位置移动操作，并patch\n  } else {\n    // 将旧节点位置下标+1后存入，新节点以s2为起点，即0坐标\n    newIndexToOldIndexMap[newIndex - s2] = i + 1\n\n    // 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，\n    // 那么每次都会进入该if语句\n    if (newIndex >= maxNewIndexSoFar) {\n      // 当前节点未移动，更新下标\n      maxNewIndexSoFar = newIndex\n\n      // 如果进入该else语句说明有节点之前节点交叉了\n    } else {\n      moved = true\n    }\n\n    // patch该节点\n    patch(prevChild, c2[newIndex])\n    patched++\n  }\n}\n```\n\n首先当当前可复用的节点复用时，会使`patched`值`+1`，当复用的节点超过乱序的新节点长度时，那么其余的节点肯定是要卸载的节点(因为新节点序列都处理完毕了)：\n\n```js\nif (patched >= toBePatched) {\n    // all new children have been patched so this can only be a removal\n    unmount(prevChild)\n    continue\n  }\n```\n\n之后，`Vue`尝试寻找一下当前旧节点是否被复用，即它被移动到了新节点序列的其他位置。首先如果当前节点有`key`值，那么其会尝试直接从刚刚的`keyToNewIndexMap`中查找；如果没有找到，那么其会遍历当前所有的新节点序列，依次对比是否与当前节点相同，在复合同类型节点时对其进行复用。\n\n```js\n// 尝试寻找是否有对应的新节点\nlet newIndex\n\n// 旧节点具有 key 时，获取相同 key 值节点所处的下标\nif (prevChild.key != null) {\n  newIndex = keyToNewIndexMap.get(prevChild.key)\n\n  // 没有key时则找相同类型的节点是否存在\n} else {\n  // key-less node, try to locate a key-less node of the same type\n  // 当前查找范围为新节点中需要 patch 的节点之间\n  for (j = s2; j <= e2; j++) {\n    if (\n      // 0 表示对应下标下当前还未有节点(注意当前是以 s2 为 0 下标基准)\n      // 这里确认当前新下标位置未有对应的旧下标，防止是已在 map 中的节点\n      newIndexToOldIndexMap[j - s2] === 0 &&\n      isSameVNodeType(prevChild, c2[j])\n    ) {\n      newIndex = j\n      break\n    }\n  }\n}\n```\n\n在直接通过类型查找复用节点时，其存在一个`newIndexToOldIndexMap[j - s2] === 0`条件，它表示当前新节点下标未有对应的旧节点(`0`表示没有，在之后的代码中，如果查找到对应的`newIndex`，其会存入`newIndexToOldIndexMap`中)。这样可以防止新旧节点被重复复用或已被处理再次被处理。\n\n到此，对于旧节点的`newIndex`是否被查找到就会出现两种情况了：\n\n1. 没有，说明当前节点已删除了，移除该`DOM`节点\n2. 有，复用，**更新节点属性**\n\n```js\n// 没找到对应节点时说明该节点已经不存在了，直接进行unmount\nif (newIndex === undefined) {\n  unmount(prevChild)\n\n  // 找到时进行位置移动操作，并patch\n} else {\n  // 将旧节点位置下标+1后存入，新节点以s2为起点，即0坐标\n  newIndexToOldIndexMap[newIndex - s2] = i + 1\n\n  // 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，\n  // 那么每次都会进入该if语句\n  if (newIndex >= maxNewIndexSoFar) {\n    // 当前节点未移动，更新下标\n    maxNewIndexSoFar = newIndex\n\n    // 如果进入该else语句说明有节点之前节点交叉了\n  } else {\n    moved = true\n  }\n\n  // patch该节点\n  patch(prevChild, c2[newIndex])\n  patched++\n}\n```\n\n在复用的情况下，有我们刚刚提到的[计算节点交叉(是否需要移动)](#332-移除新节点队列中不存在的旧节点并更新复用节点)的场景：\n\n```js\n// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，\n// 那么每次都会进入该if语句\nif (newIndex >= maxNewIndexSoFar) {\n  // 当前节点未移动，更新下标\n  maxNewIndexSoFar = newIndex\n\n  // 如果进入该else语句说明有节点之前节点交叉了\n} else {\n  moved = true\n}\n```\n\n这里就不赘述了。\n\n> 注意，这里对复用的节点进行了`patch()`更新，那么后面就只用进行移动即可，而不需要更新了。\n\n#### 3.3.3 处理新增节点与移动的节点\n\n到此为止，就只有新增节点与移动节点的情况没有处理了。\n\n首先其会需要移动节点时(`moved = true`)根据刚刚创建的`newIndexToOldIndexMap`生成一个最长递增的新节点序列`increasingNewIndexSequence`。\n\n```js\njs复制代码// 5.3 move and mount\n// 5.3 移动与mount\n// generate longest stable subsequence only when nodes have moved\n// 有节点需要移动，生成长期稳定的子序列，仅对移动过的节点处理\nconst increasingNewIndexSequence = moved\n  ? // 获取最长递增子序列的下标数组\n    getSequence(newIndexToOldIndexMap)\n  : EMPTY_ARR\n```\n\n那么这个序列的作用是什么？它就是用来**辅助移动节点**，而且是在最小次数下移动节点。由于`newIndexToOldIndexMap`是根据新旧节点之间的映射创建的，其**下标天然代表乱序的新节点数组的顺序**，而且其对应下标中存储的元素也代表该新节点复用的旧节点的下标，那么这里我们就可以看到两个序列：\n\n1. 新节点下标组成的序列(**递增**的，因为我们以它为基准创建的数组)\n2. `newIndexToOldIndexMap`中旧节点下标组成的序列，可能递增也可能乱序\n\n> 关于如何求[最长递增子序列](https://link.juejin.cn?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FLongest_increasing_subsequence)，请单独自行学习，这里就不说明了。\n\n此时倘若旧节点下标组成的序列**也**呈现递增趋势，那么我们便可以操作那些非递增的节点来达到变更为新节点序列的目的。并且这个递增的序列越长，那么我们要操作(移动)的节点就越少。比如下图的情况：\n\n![image-20230528124733993](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124733993.png)\n\n从图中观察，我们可以清楚的看到`c/d`两个节点在前后都保持了递增的关系，那么此时我们只需要移动`e`节点与创建`h`节点即可。\n\n此时其`newIndexToOldIndexMap`为：\n\n```js\njs复制代码newIndexToOldIndexMap = [4, 2, 3, 0]\n\n// 该数组返回的是对应的元素在newIndexToOldIndexMap的下标\n// 而并非实际的旧节点下标\nincreasingNewIndexSequence = [1, 2]\n```\n\n可以看到`2、3`节点与新节点的下标的**递增关系保持一致**，其最长递增子序列(`increasingNewIndexSequence`)为`[1, 2]`，此时我们只需要操作`4/0`两个节点即可。\n\n> `increasingNewIndexSequence`返回的结果为对应的元素在 `newIndexToOldIndexMap`的下标而并非实际的旧节点下标\n\n明白了这个现在我们来看其具体处理的代码：\n\n```js\n// 获取递增序列的尾坐标\nj = increasingNewIndexSequence.length - 1\n\n// looping backwards so that we can use last patched node as anchor\n// 向后循环，这样我们可以用上一个patch过了的节点做锚点\nfor (i = toBePatched - 1; i >= 0; i--) {\n  // 当前要处理的新节点下标及其节点\n  const nextIndex = s2 + i\n  const nextChild = c2[nextIndex]\n\n  // 获取其后一个节点，如果没有则获取其父节点\n  const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor\n\n  // 如果当前新旧节点Map中未找到当前位置新节点的旧节点信息，\n  // 说明是新增节点\n  if (newIndexToOldIndexMap[i] === 0) {\n    // mount new\n    patch(null, nextChild)\n\n    // moved说明有节点需要移动，通过塑造一个递增序列，处于递增序列的节点就可以\n    // 不进行移动，只移动其余节点，这样就减少了节点的移动\n  } else if (moved) {\n    // 如果存在以下情况则移动：\n    // 1. 没有稳定的子序列\n    // 2. 当前节点不在这个稳定的子序列中\n    // move if:\n    // There is no stable subsequence (e.g. a reverse)\n    // OR current node is not among the stable sequence\n    if (j < 0 || i !== increasingNewIndexSequence[j]) {\n      move(nextChild, container, anchor)\n    } else {\n      j--\n    }\n  }\n}\n```\n\n本次遍历以新节点的乱序序列(`s2 <-> e2`)为基准，逆向进行遍历。逆向的原因是因为其在新增节点或更新节点时，可以以后面已经操作过的节点为锚点进行更新(想象一下`Node.insertBefore()/Node.appendChild()`的参数)。\n\n每次遍历会出现三种情况：\n\n- 当前节点未有对应的旧节点下标，则说明是新增节点\n- 该节点需要移动，进行移动\n- 该节点与旧节点序列都保持递增顺序，直接跳过即可(实际反应在代码里面就是没做任何处理)\n\n> 情况`2`与`3`在完整的迭代中是互斥的，两者不会同时出现在整个迭代流程中。\n\n第一种情况，比较简单，这里就不解释了：\n\n```js\n// 如果当前新旧节点Map中未找到当前位置新节点的旧节点信息，\n// 说明是新增节点\nif (newIndexToOldIndexMap[i] === 0) {\n  // mount new\n  patch(null, nextChild\n}\n```\n\n第二种情况要判定`moved = true`，它的原理[之前我们已经解释过了](#332-移除新节点队列中不存在的旧节点并更新复用节点)。这里我们要关注的是它的函数体。根据我们刚刚对递增子序列的理解，那么其应该会在以下情况移动或不移动节点：\n\n- 当前节点处于最长递增子序列中 —— 跳过\n- 当前节点不存在最长递增子序列中 —— 移动\n  - 递增序列已经没有需要跳过的节点了但任存在节点需要更新(实际和不存在的情况一样)\n  - 当前节点不存在最长递增子序列\n\n```js\n// 如果存在以下情况则移动：\n// 1. 没有稳定的子序列(实际和情况2一致，反序时会返回任意一个节点作为最长序列)\n// 2. 当前节点不在这个稳定的子序列中\n// move if:\n// There is no stable subsequence (e.g. a reverse)\n// OR current node is not among the stable sequence\nif (j < 0 || i !== increasingNewIndexSequence[j]) {\n  // 将当前节点移动到锚点节点前或容器节点最后(没有锚点时)\n  move(nextChild, container, anchor)\n} else {\n  j--\n}\n```\n\n![image-20230528124834143](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124834143.png)\n\n在第二次更新中，发现`d`节点存在于单调增序列中，所以本次更新可以跳过：\n\n![image-20230528124910205](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124910205.png)\n\n同理`c`节点也一样，这里就不放图了，处理完`c`节点后此时为这样\n\n![image-20230528124931580](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124931580.png)\n\n此时`e`节点可复用，则将其移动到新`c`节点前即可。\n\n到此为止，上图的`diff`就结束了。\n\n对于第三种情况，由于复用的节点在前后都保持了递增的关系，所以此时我们不需要再重复对节点进行处理，所以遇到复用的节点时直接跳过即可：\n\n![image-20230528125006064](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528125006064.png)\n\n到此为止全部节点的更新就已经完毕了。\n\n### 为什么组件中的 data 是一个函数？\n\n在 new Vue() 中，可以是函数也可以是对象，因为根实例只有一个，不会产生数据污染。\n\n在组件中，data 必须为函数，目的是为了防止多个组件实例对象之间共用一个 data，产生数据污染；而采用函数的形式，initData 时会将其作为工厂函数都会返回全新的 data 对象。\n\n### Vue 中组件间的通信方式？\n\n1. 父子组件通信：\n\n   父向子传递数据是通过`props`，子向父是通过`$emit`触发事件；通过父链/子链也可以通信（`$parent`/`$children`）；`ref`也可以访问组件实例；`provide`/`inject`；`$attrs`/`$listeners`。\n\n2. 兄弟组件通信：\n\n   全局事件总线`EventBus`、`Vuex`。\n\n3. 跨层级组件通信：\n\n   全局事件总线`EventBus`、`Vuex`、`provide`/`inject`。\n\n### v-show 和 v-if 的区别？\n\n1. 控制手段不同。`v-show`是通过给元素添加 css 属性`display: none`，但元素仍然存在；而`v-if`控制元素显示或隐藏是将元素整个添加或删除。\n2. 编译过程不同。`v-if`切换有一个局部编译/卸载的过程，切换过程中合适的销毁和重建内部的事件监听和子组件；`v-show`只是简单的基于 css 切换。\n3. 编译条件不同。`v-if`是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建，渲染条件为假时，并不做操作，直到为真才渲染。\n4. 触发生命周期不同。`v-show`由 false 变为 true 的时候不会触发组件的生命周期；`v-if`由 false 变为 true 的时候，触发组件的`beforeCreate`、`created`、`beforeMount`、`mounted`钩子，由 true 变为 false 的时候触发组件的`beforeDestory`、`destoryed`钩子。\n5. 性能消耗不同。`v-if`有更高的切换消耗；`v-show`有更高的初始渲染消耗。\n\n使用场景：\n 如果需要非常频繁地切换，则使用`v-show`较好，如：手风琴菜单，tab 页签等； 如果在运行时条件很少改变，则使用`v-if`较好，如：用户登录之后，根据权限不同来显示不同的内容。\n\n### computed 和 watch 的区别？\n\n- `computed`计算属性，依赖其它属性计算值，内部任一依赖项的变化都会重新执行该函数，计算属性有缓存，多次重复使用计算属性时会从缓存中获取返回值，计算属性必须要有`return`关键词。\n- `watch`侦听到某一数据的变化从而触发函数。当数据为对象类型时，对象中的属性值变化时需要使用深度侦听`deep`属性，也可在页面第一次加载时使用立即侦听`immdiate`属性。\n\n运用场景：\n 计算属性一般用在模板渲染中，某个值是依赖其它响应对象甚至是计算属性而来；而侦听属性适用于观测某个值的变化去完成一段复杂的业务逻辑。\n\n### v-if 和 v-for 为什么不建议放在一起使用？\n\nVue 2 中，`v-for`的优先级比`v-if`高，这意味着`v-if`将分别重复运行于每一个`v-for`循环中。如果要遍历的数组很大，而真正要展示的数据很少时，将造成很大的性能浪费。\n\nVue 3 中，则完全相反，`v-if`的优先级高于`v-for`，所以`v-if`执行时，它调用的变量还不存在，会导致异常。\n\n通常有两种情况导致要这样做：\n\n- 为了过滤列表中的项目，比如：`v-for = \"user in users\" v-if = \"user.active\"`。这种情况，可以定义一个计算属性，让其返回过滤后的列表即可。\n- 为了避免渲染本该被隐藏的列表，比如`v-for = \"user in users\"  v-if = \"showUsersFlag\"`。这种情况，可以将`v-if`移至容器元素上或在外面包一层`template`即可。\n\n### Vue 2中的set方法？\n\n[`set`是Vue 2中的一个全局API](https://link.juejin.cn?target=https%3A%2F%2Fv2.cn.vuejs.org%2Fv2%2Fapi%2F%23Vue-set)。可手动添加响应式数据，解决数据变化视图未更新问题。当在项目中直接设置数组的某一项的值，或者直接设置对象的某个属性值，会发现页面并没有更新。这是因为`Object.defineProperty()`的限制，监听不到数据变化，可通过`this.$set(数组或对象，数组下标或对象的属性名，更新后的值)`解决。\n\n### keep-alive 是什么？\n\n- 作用：实现组件缓存，保持组件的状态，避免反复渲染导致的性能问题。\n- 工作原理：Vue.js 内部将 DOM 节点，抽象成了一个个的 VNode 节点，`keep-alive`组件的缓存也是基于 VNode 节点的。它将满足条件的组件在 cache 对象中缓存起来，重新渲染的时候再将 VNode 节点从 cache 对象中取出并渲染。\n- 可以设置以下属性：\n   ① `include`：字符串或正则，只有名称匹配的组件会被缓存。\n   ② `exclude`：字符串或正则，任何名称匹配的组件都不会被缓存。\n   ③ `max`：数字，最多可以缓存多少组件实例。\n   匹配首先检查组件的`name`选项，如果`name`选项不可用，则匹配它的局部注册名称（父组件 components选项的键值），匿名组件不能被匹配。\n\n如果同时使用了`include`、`exclude`，那么`exclude`的优先级高于`include`。\n\n设置了`keep-alive`缓存的组件，会多出两个生命周期钩子：`activated`、`deactivated`。\n 首次进入组件时：beforeCreate --> created --> beforeMount --> mounted --> activated --> beforeUpdate --> updated --> deactivated\n 再次进入组件时：activated --> beforeUpdate --> updated --> deactivated\n\n### mixin\n\n`mixin`（混入）， 它提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。\n\n使用场景： 不同组件中经常会用到一些相同或相似的代码，这些代码的功能相对独立。可以通过mixin 将相同或相似的代码提出来。\n\n缺点：\n\n1. 变量来源不明确\n2. 多 mixin 可能会造成命名冲突（解决方式：Vue 3的组合API）\n3. mixin 和组件出现多对多的关系，使项目复杂度变高。\n\n### 插槽\n\n`slot`插槽，一般在组件内部使用，封装组件时，在组件内部不确定该位置是以何种形式的元素展示时，可以通过`slot`占据这个位置，该位置的元素需要父组件以内容形式传递过来。`slot`分为：\n\n- `默认插槽`：子组件用`<slot>`标签来确定渲染的位置，标签里面可以放`DOM`结构作为后备内容，当父组件在使用的时候，可以直接在子组件的标签内写入内容，该部分内容将插入子组件的`<slot>`标签位置。如果父组件使用的时候没有往插槽传入内容，后备内容就会显示在页面。\n- `具名插槽`：子组件用`name`属性来表示插槽的名字，没有指定`name`的插槽，会有隐含的名称叫做 `default`。父组件中在使用时在默认插槽的基础上通过`v-slot`指令指定元素需要放在哪个插槽中，`v-slot`值为子组件插槽`name`属性值。使用`v-slot`指令指定元素放在哪个插槽中，必须配合`<template>`元素，且一个`<template>`元素只能对应一个预留的插槽，即不能多个`<template>` 元素都使用`v-slot`指令指定相同的插槽。`v-slot`的简写是`#`，例如`v-slot:header`可以简写为`#header`。\n- 作用域插槽：子组件在<slot>标签上绑定props数据，以将子组件数据传给父组件使用。父组件获取插槽绑定 props 数据的方法：\n  1. scope=\"接收的变量名\"：`<template scope=\"接收的变量名\">`\n  2. slot-scope=\"接收的变量名\"：`<template slot-scope=\"接收的变量名\">`\n  3. v-slot:插槽名=\"接收的变量名\"：`<template v-slot:插槽名=\"接收的变量名\">`\n\n### Vue 中的修饰符有哪些？\n\n在Vue 中，修饰符处理了许多 DOM 事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理。Vue中修饰符分为以下几种：\n\n1. 表单修饰符\n    `lazy` 填完信息，光标离开标签的时候，才会将值赋予给value，也就是在`change`事件之后再进行信息同步。\n    `number` 自动将用户输入值转化为数值类型，但如果这个值无法被`parseFloat`解析，则会返回原来的值。\n    `trim` 自动过滤用户输入的首尾空格，而中间的空格不会被过滤。\n\n2. 事件修饰符\n    `stop` 阻止了事件冒泡，相当于调用了`event.stopPropagation`方法。\n    `prevent` 阻止了事件的默认行为，相当于调用了`event.preventDefault`方法。\n    `self` 只当在 `event.target` 是当前元素自身时触发处理函数。\n    `once` 绑定了事件以后只能触发一次，第二次就不会触发。\n    `capture` 使用事件捕获模式，即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理。\n    `passive` 告诉浏览器你不想阻止事件的默认行为。\n    `native` 让组件变成像`html`内置标签那样监听根元素的原生事件，否则组件上使用 `v-on` 只会监听自定义事件。\n\n3. 鼠标按键修饰符\n    `left` 左键点击。\n    `right` 右键点击。\n    `middle` 中键点击。\n\n4. 键值修饰符\n\n   键盘修饰符是用来修饰键盘事件（onkeyup，onkeydown）的，有如下：keyCode\n\n   存在很多，但vue为我们提供了别名，分为以下两种：\n\n   - 普通键（enter、tab、delete、space、esc、up...）\n   - 系统修饰键（ctrl、alt、meta、shift...）\n\n### 对 SPA 的理解？\n\n1. 概念：\n    `SPA（Single-page  application）`，即单页面应用，它是一种网络应用程序或网站的模型，通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换时打断用户体验。在`SPA`中，所有必要的代码（HTML、JavaScript 和 CSS）都通过单个页面的加载而检索，或者根据需要（通常是响应用户操作）动态装载适当的资源并添加到页面。页面在任何时间点都不会重新加载，也不会将控制转移到其他页面。举个例子，就像一个杯子，上午装的是牛奶，中午装的是咖啡，下午装的是茶，变得始终是内容，杯子始终不变。\n\n2. `SPA`与`MPA`的区别：\n    `MPA（Muti-page application）`，即多页面应用。在`MPA`中，每个页面都是一个主页面，都是独立的，每当访问一个页面时，都需要重新加载 Html、CSS、JS 文件，公共文件则根据需求按需加载。\n\n   |                 | SPA                       | MPA                                 |\n   | --------------- | ------------------------- | ----------------------------------- |\n   | 组成            | 一个主页面和多个页面片段  | 多个主页面                          |\n   | url模式         | hash模式                  | history模式                         |\n   | SEO搜索引擎优化 | 难实现，可使用SSR方式改善 | 容易实现                            |\n   | 数据传递        | 容易                      | 通过url、cookie、localStorage等传递 |\n   | 页面切换        | 速度快，用户体验良好      | 切换加载资源，速度慢，用户体验差    |\n   | 维护成本        | 相对容易                  | 相对复杂                            |\n\n3. `SPA`的优缺点：\n    优点：\n\n   - 具有桌面应用的即时性、网站的可移植性和可访问性\n   - 用户体验好、快，内容的改变不需要重新加载整个页面\n   - 良好的前后端分离，分工更明确\n\n   缺点：\n\n   - 不利于搜索引擎的抓取\n   - 首次渲染速度相对较慢\n\n### 双向绑定？\n\n1. 概念：\n    Vue 中双向绑定是一个指令`v-model`，可以绑定一个响应式数据到视图，同时视图的变化能改变该值。`v-model`是语法糖，默认情况下相当于`:value`和`@input`，使用`v-model`可以减少大量繁琐的事件处理代码，提高开发效率。\n2. 使用：\n    通常在表单项上使用`v-model`，还可以在自定义组件上使用，表示某个值的输入和输出控制。\n3. 原理：\n    `v-model`是一个指令，双向绑定实际上是Vue 的编译器完成的，通过输出包含`v-model`模版的组件渲染函数，实际上还是`value`属性的绑定及`input`事件监听，事件回调函数中会做相应变量的更新操作。\n\n### 子组件是否可以直接改变父组件的数据？\n\n1. 所有的`prop`都遵循着单项绑定原则，`props`因父组件的更新而变化，自然地将新状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。\n    另外，每次父组件更新后，所有的子组件中的`props`都会被更新为最新值，这就意味着不应该子组件中去修改一个`prop`，若这么做了，Vue 会在控制台上抛出警告。\n2. 实际开发过程中通常有两个场景导致要修改prop：\n   - `prop`被用于传入初始值，而子组件想在之后将其作为一个局部数据属性。这种情况下，最好是新定义一个局部数据属性，从`props`获取初始值即可。\n   - 需要对传入的`prop`值做进一步转换。最好是基于该`prop`值定义一个计算属性。\n3. 实践中，如果确实要更改父组件属性，应`emit`一个事件让父组件变更。当对象或数组作为`props`被传入时，虽然子组件无法更改`props`绑定，但仍然**可以**更改对象或数组内部的值。这是因为JS的对象和数组是按引用传递，而对于 Vue 来说，禁止这样的改动虽然可能，但是有很大的性能损耗，比较得不偿失。\n\n### router 和 route 的区别？\n\n1. `$router`是VueRouter的实例对象，是一个全局的路由对象，包含了所有路由的对象和属性。\n2. `$route`是一个跳转的路由对象，可以认为是当前组件的路由管理，指当前激活的路由对象，包含当前url解析得到的数据，可以从对象里获取一些数据，如：name，path，params，query等。\n\n\n\n### vue-router 的路由传参方式？\n\n1. 声明式导航 `router-link`：\n\n```js\n<router-link :to=\"'/users?userId:1'\"></router-link>\n<router-link :to=\"{ name: 'users', params: { userId: 1 } }\"></router-link>\n<router-link :to=\"{ path: '/users', query: { userId: 1 } }\"></router-link>\n```\n\n1. 编程式导航 router-push：\n\n   - 通过`params`传参\n\n   ```js\n   this.$router.push({\n       name: 'users',\n       params: {\n           userId: 1\n       }\n   });\n   // 路由配置\n   {\n       path: '/users',\n       name: 'users',\n       component: User\n   }\n   // 跳转后获取路由参数\n   this.$route.params.userId // 为 1\n   ```\n\n   - 通过`query`传参\n\n   ```php\n   this.$router.push({\n       path: '/users',\n       query: {\n           userId: 1\n       } \n   });\n   // 路由配置\n   {\n       path: '/users',\n       name: 'users',\n       component: User\n   }\n   // 跳转后获取路由参数\n   this.$route.query.userId\n   ```\n\n   - 动态路由\n\n   ```js\n   this.$router.push('/users/${userId}');\n   // 路由配置\n   {\n       path: '/users/:userId',\n       name: 'users',\n       component: User\n   }\n   // 跳转后获取路由参数\n   this.$route.params.userId\n   ```\n\n\n\n### Vue Router中的常用路由模式和原理？\n\n1. hash 模式：\n\n- `location.hash`的值就是url中 `#` 后面的东西。它的特点在于：hash虽然出现url中，但不会被包含在HTTP请求中，对后端完全没有影响，因此改变hash不会重新加载页面。\n- 可以为hash的改变添加监听事件`window.addEventListener(\"hashchange\", funcRef, false)`，每一次改变`hash (window.location.hash)`，都会在浏览器的访问历史中增加一个记录，利用hash的以上特点，就可以实现**前端路由更新视图但不重新请求页面**的功能了。\n   特点：兼容性好但是不美观\n\n1. history 模式：\n    利用 HTML5 History Interface 中新增的`pushState()`和`replaceState()`方法。\n    这两个方法应用于浏览器的历史记录栈，在当前已有的`back`、`forward`、`go` 的基础上(使用`popState()`方法)，他们提供了对历史记录进行修改的功能。\n    这两个方法有个共同点：当调用他们修改浏览器历史记录栈后，虽然当前url改变了，但浏览器不会刷新页面，这就为单页面应用前端路由“更新视图但不重新请求页面”提供了基础\n    特点：虽然美观，但是刷新会出现 404 需要后端进行配置。\n\n### 动态路由？\n\n很多时候，我们需要将给定匹配模式的路由映射到同一个组件，这种情况就需要定义动态路由。例如，我们有一个 User组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用`动态路径参数（dynamic segment）`来达到这个效果：`{path: '/user/:id', compenent: User}`，其中`:id`就是动态路径参数。\n\n### 对Vuex的理解？\n\n1. 概念：\n    Vuex 是 Vue 专用的状态管理库，它以全局方式集中管理应用的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n2. 解决的问题：\n    Vuex 主要解决的问题是多组件之间状态共享。利用各种通信方式，虽然也能够实现状态共享，但是往往需要在多个组件之间保持状态的一致性，这种模式很容易出问题，也会使程序逻辑变得复杂。Vuex 通过把组件的共享状态抽取出来，以全局单例模式管理，这样任何组件都能用一致的方式获取和修改状态，响应式的数据也能够保证简洁的单向流动，使代码变得更具结构化且易于维护。\n3. 什么时候用:\n    Vuex 并非是必须的，它能够管理状态，但同时也带来更多的概念和框架。如果我们不打算开发大型单页应用或应用里没有大量全局的状态需要维护，完全没有使用Vuex的必要，一个简单的 store 模式就够了。反之，Vuex将是自然而然的选择。\n4. 用法：\n    Vuex 将全局状态放入`state`对象中，它本身是一颗状态树，组件中使用`store`实例的`state`访问这些状态；然后用配套的`mutation`方法修改这些状态，并且只能用`mutation`修改状态，在组件中调用`commit`方法提交`mutation`；如果应用中有异步操作或复杂逻辑组合，需要编写`action`，执行结束如果有状态修改仍需提交`mutation`，组件中通过`dispatch`派发`action`。最后是模块化，通过`modules`选项组织拆分出去的各个子模块，在访问状态（state）时需注意添加子模块的名称，如果子模块有设置`namespace`，那么提交`mutation`和派发`action`时还需要额外的命名空间前缀。\n\n### 页面刷新后Vuex 状态丢失怎么解决？\n\nVuex 只是在内存中保存状态，刷新后就会丢失，如果要持久化就需要保存起来。\n\n`localStorage`就很合适，提交`mutation`的时候同时存入`localStorage`，在`store`中把值取出来作为`state`的初始值即可。\n\n也可以使用第三方插件，推荐使用`vuex-persist`插件，它是为 Vuex 持久化储存而生的一个插件，不需要你手动存取`storage`，而是直接将状态保存至 `cookie` 或者 `localStorage`中。\n\n### 关于 Vue SSR 的理解？\n\n`SSR`即`服务端渲染（Server Side Render）`，就是将 Vue 在客户端把标签渲染成 html 的工作放在服务端完成，然后再把 html 直接返回给客户端。\n\n- 优点：\n   有着更好的 SEO，并且首屏加载速度更快。\n- 缺点：\n   开发条件会受限制，服务器端渲染只支持 beforeCreate 和 created 两个钩子，当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于 Node.js 的运行环境。服务器会有更大的负载需求。\n\n### 了解哪些 Vue 的性能优化方法？\n\n- 路由懒加载。有效拆分应用大小，访问时才异步加载。\n- `keep-alive`缓存页面。避免重复创建组件实例，且能保留缓存组件状态。\n- `v-for`遍历避免同时使用`v-if`。实际上在 Vue 3 中已经是一个错误用法了。\n- 长列表性能优化，可采用虚拟列表。\n- `v-once`。不再变化的数据使用`v-once`。\n- 事件销毁。组件销毁后把全局变量和定时器销毁。\n- 图片懒加载。\n- 第三方插件按需引入。\n- 子组件分割。较重的状态组件适合拆分。\n- 服务端渲染。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"js/vue复习","published":1,"layout":"post","photos":[],"link":"","_id":"clipg0877001brgwhe6u6gkdc","content":"<p>vue复习</p>\n<span id=\"more\"></span>\n\n<h3 id=\"MVVM模型？\"><a href=\"#MVVM模型？\" class=\"headerlink\" title=\"MVVM模型？\"></a>MVVM模型？</h3><p>MVVM，是<code>Model-View-ViewModel</code>的简写，其本质是<code>MVC</code>模型的升级版。其中 <code>Model</code> 代表数据模型，<code>View</code> 代表看到的页面，<code>ViewModel</code>是<code>View</code>和<code>Model</code>之间的桥梁，数据会绑定到<code>ViewModel</code>层并自动将数据渲染到页面中，视图变化的时候会通知<code>ViewModel</code>层更新数据。以前是通过操作<code>DOM</code>来更新视图，现在是<code>数据驱动视图</code>。</p>\n<h3 id=\"Vue的生命周期\"><a href=\"#Vue的生命周期\" class=\"headerlink\" title=\"Vue的生命周期\"></a>Vue的生命周期</h3><p>Vue 的生命周期可以分为8个阶段：创建前后、挂载前后、更新前后、销毁前后，以及一些特殊场景的生命周期。Vue 3 中还新增了是3个用于调试和服务端渲染的场景。</p>\n<table>\n<thead>\n<tr>\n<th>Vue 2中的生命周期钩子</th>\n<th>Vue 3选项式API的生命周期选项</th>\n<th>Vue 3 组合API中生命周期钩子</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>beforeCreate</code></td>\n<td><code>beforeCreate</code></td>\n<td><code>setup()</code></td>\n<td>创建前，此时<code>data</code>和 <code>methods</code>的数据都还没有初始化</td>\n</tr>\n<tr>\n<td><code>created</code></td>\n<td><code>created</code></td>\n<td><code>setup()</code></td>\n<td>创建后，<code>data</code>中有值，尚未挂载，可以进行一些<code>Ajax</code>请求</td>\n</tr>\n<tr>\n<td><code>beforeMount</code></td>\n<td><code>beforeMount</code></td>\n<td><code>onBeforeMount</code></td>\n<td>挂载前，会找到虚拟<code>DOM</code>，编译成<code>Render</code></td>\n</tr>\n<tr>\n<td><code>mounted</code></td>\n<td><code>mounted</code></td>\n<td><code>onMounted</code></td>\n<td>挂载后，<code>DOM</code>已创建，可用于获取访问数据和<code>DOM</code>元素</td>\n</tr>\n<tr>\n<td><code>beforeUpdate</code></td>\n<td><code>beforeUpdate</code></td>\n<td><code>onBeforeUpdate</code></td>\n<td>更新前，可用于获取更新前各种状态</td>\n</tr>\n<tr>\n<td><code>updated</code></td>\n<td><code>updated</code></td>\n<td><code>onUpdated</code></td>\n<td>更新后，所有状态已是最新</td>\n</tr>\n<tr>\n<td><code>beforeDestroy</code></td>\n<td><code>beforeUnmount</code></td>\n<td><code>onBeforeUnmount</code></td>\n<td>销毁前，可用于一些定时器或订阅的取消</td>\n</tr>\n<tr>\n<td><code>destroyed</code></td>\n<td><code>unmounted</code></td>\n<td><code>onUnmounted</code></td>\n<td>销毁后，可用于一些定时器或订阅的取消</td>\n</tr>\n<tr>\n<td><code>activated</code></td>\n<td><code>activated</code></td>\n<td><code>onActivated</code></td>\n<td><code>keep-alive</code>缓存的组件激活时</td>\n</tr>\n<tr>\n<td><code>deactivated</code></td>\n<td><code>deactivated</code></td>\n<td><code>onDeactivated</code></td>\n<td><code>keep-alive</code>缓存的组件停用时</td>\n</tr>\n<tr>\n<td><code>errorCaptured</code></td>\n<td><code>errorCaptured</code></td>\n<td><code>onErrorCaptured</code></td>\n<td>捕获一个来自子孙组件的错误时调用</td>\n</tr>\n<tr>\n<td>—</td>\n<td><code>renderTracked</code></td>\n<td><code>onRenderTracked</code></td>\n<td>调试钩子，响应式依赖被收集时调用</td>\n</tr>\n<tr>\n<td>—</td>\n<td><code>renderTriggered</code></td>\n<td><code>onRenderTriggered</code></td>\n<td>调试钩子，响应式依赖被触发时调用</td>\n</tr>\n<tr>\n<td>—</td>\n<td><code>serverPrefetch</code></td>\n<td><code>onServerPrefetch</code></td>\n<td>组件实例在服务器上被渲染前调用</td>\n</tr>\n</tbody></table>\n<p><strong>关于Vue 3中的生命周期建议阅读官方文档!!!!</strong></p>\n<p><a href=\"https://link.juejin.cn/?target=https://cn.vuejs.org/api/composition-api-lifecycle.html\">组合式 API：生命周期钩子–官方文档</a><br><a href=\"https://link.juejin.cn/?target=https://cn.vuejs.org/api/options-lifecycle.html\">选项式 API：生命周期选项–官方文档</a></p>\n<p><strong>父子组件的生命周期：</strong></p>\n<ul>\n<li><code>加载渲染阶段</code>：父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</li>\n<li><code>更新阶段</code>：父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</li>\n<li><code>销毁阶段</code>：父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</li>\n</ul>\n<h3 id=\"Vue-nextTick\"><a href=\"#Vue-nextTick\" class=\"headerlink\" title=\"Vue.$nextTick\"></a>Vue.$nextTick</h3><p><strong>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</strong></p>\n<p><code>nextTick</code> 是 Vue 提供的一个全局 API，由于 Vue 的异步更新策略，导致我们对数据修改后不会直接体现在 DOM 上，此时如果想要立即获取更新后的 DOM 状态，就需要借助该方法。</p>\n<p>Vue 在更新 DOM 时是异步执行的。当数据发生变化，Vue 将开启一个异步更新队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 <code>watcher</code> 被多次触发，只会被推入队列一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。<code>nextTick</code>方法会在队列中加入一个回调函数，确保该函数在前面的 DOM 操作完成后才调用。</p>\n<p>使用场景：</p>\n<ol>\n<li>如果想要在修改数据后立刻得到更新后的<code>DOM</code>结构，可以使用<code>Vue.nextTick()</code></li>\n<li>在<code>created</code>生命周期中进行<code>DOM</code>操作</li>\n</ol>\n<h3 id=\"Vue-实例挂载过程中发生了什么？\"><a href=\"#Vue-实例挂载过程中发生了什么？\" class=\"headerlink\" title=\"Vue 实例挂载过程中发生了什么？\"></a>Vue 实例挂载过程中发生了什么？</h3><p>挂载过程指的是 <code>app.mount()</code>过程，这是一个初始化过程，整体上做了两件事情：<code>初始化</code>和<code>建立更新机制</code>。</p>\n<p>初始化会创建组件实例、初始化组件状态、创建各种响应式数据。</p>\n<p>建立更新机制这一步会立即执行一次组件的更新函数，这会首次执行组件渲染函数并执行<code>patch</code>将<code>vnode</code> 转换为 <code>dom</code>； 同时首次执行渲染函数会创建它内部响应式数据和组件更新函数之间的依赖关系，这使得以后数据发生变化时会执行对应的更新函数。</p>\n<h3 id=\"Vue-的模版编译原理\"><a href=\"#Vue-的模版编译原理\" class=\"headerlink\" title=\"Vue 的模版编译原理\"></a>Vue 的模版编译原理</h3><p>Vue 中有个独特的编译器模块，称为<code>compiler</code>，它的主要作用是将用户编写的<code>template</code>编译为js中可执行的<code>render</code>函数。<br> 在Vue 中，编译器会先对<code>template</code>进行解析，这一步称为<code>parse</code>，结束之后得到一个JS对象，称之为<code>抽象语法树AST</code>；然后是对<code>AST</code>进行深加工的转换过程，这一步称为<code>transform</code>，最后将前面得到的<code>AST</code>生成JS代码，也就是<code>render</code>函数。</p>\n<h3 id=\"Vue-的响应式原理\"><a href=\"#Vue-的响应式原理\" class=\"headerlink\" title=\"Vue 的响应式原理\"></a>Vue 的响应式原理</h3><ol>\n<li><p>Vue 2 中的数据响应式会根据数据类型做不同的处理。如果是对象，则通过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(obj,key,descriptor)</span><br></pre></td></tr></table></figure>\n\n<p>拦截对象属性访问，当数据被访问或改变时，感知并作出反应；如果是数组，则通过覆盖数组原型的方法，扩展它的7个变更方法（push、pop、shift、unshift、splice、sort、reverse），使这些方法可以额外的做更新通知，从而做出响应。</p>\n<p>缺点：</p>\n<ul>\n<li>初始化时的递归遍历会造成性能损失；</li>\n<li>通知更新过程需要维护大量 <code>dep</code> 实例和 <code>watcher</code> 实例，额外占用内存较多；</li>\n<li>新增或删除对象属性无法拦截，需要通过 <code>Vue.set</code> 及 <code>delete</code> 这样的 API 才能生效；</li>\n<li>对于<code>ES6</code>中新产生的<code>Map</code>、<code>Set</code>这些数据结构不支持。</li>\n</ul>\n</li>\n<li><p>Vue 3 中利用<code>ES6</code>的<code>Proxy</code>机制代理需要响应化的数据。可以同时支持对象和数组，动态属性增、删都可以拦截，新增数据结构均支持，对象嵌套属性运行时递归，用到时才代理，也不需要维护特别多的依赖关系，性能取得很大进步。</p>\n</li>\n</ol>\n<h3 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h3><ol>\n<li>概念：<br> 虚拟DOM，顾名思义就是虚拟的DOM对象，它本身就是一个JS对象，只不过是通过不同的属性去描述一个视图结构。</li>\n<li>虚拟DOM的好处：<br> (1) 性能提升<br> 直接操作DOM是有限制的，一个真实元素上有很多属性，如果直接对其进行操作，同时会对很多额外的属性内容进行了操作，这是没有必要的。如果将这些操作转移到JS对象上，就会简单很多。另外，操作DOM的代价是比较昂贵的，频繁的操作DOM容易引起页面的重绘和回流。如果通过抽象VNode进行中间处理，可以有效减少直接操作DOM次数，从而减少页面的重绘和回流。<br> (2) 方便跨平台实现<br> 同一VNode节点可以渲染成不同平台上对应的内容，比如：渲染在浏览器是DOM元素节点，渲染在Native（iOS、Android）变为对应的控件。Vue 3 中允许开发者基于VNode实现自定义渲染器（renderer），以便于针对不同平台进行渲染。</li>\n<li>结构：<br> 没有统一的标准，一般包括<code>tag</code>、<code>props</code>、<code>children</code>三项。<br> <code>tag</code>：必选。就是标签，也可以是组件，或者函数。<br> <code>props</code>：非必选。就是这个标签上的属性和方法。<br> <code>children</code>：非必选。就是这个标签的内容或者子节点。如果是文本节点就是字符串；如果有子节点就是数组。换句话说，如果判断<code>children</code>是字符串的话，就表示一定是文本节点，这个节点肯定没有子元素。</li>\n</ol>\n<h3 id=\"diff-算法\"><a href=\"#diff-算法\" class=\"headerlink\" title=\"diff 算法\"></a>diff 算法</h3><p>由于目前<code>Vue3</code>对于性能的优化做了很多的处理，所以其在更新时并不会对所有的节点都进行<code>diff</code>更新。目前会进行<code>diff</code>更新的有以下两种情况：</p>\n<ul>\n<li><code>v-for</code>容器节点</li>\n<li>自写的<code>render()</code>函数</li>\n</ul>\n<p>还有一种特殊情况会进行无<code>diff</code>的按序更新，这种更新是全替换模式，非常耗时：</p>\n<ul>\n<li>无<code>key</code>值的<code>v-for</code>语句，此时会打上<code>UNKEYED_FRAGMENT</code>标记</li>\n</ul>\n<p>注意，<code>Vue3</code>没有主动提供片段这个功能，仅会在出现以下写法时会生成片段：</p>\n<ul>\n<li>一个组件有多个根节点，会生成一个片段包裹，此时其为稳定片段(<code>STABLE_FRAGMENT</code>)</li>\n<li><code>v-for</code>语句，会生成一个片段包裹</li>\n<li><code>v-if</code>语句，有多个子节点或不为单个文本节点，会生成一个片段包裹(<code>STABLE_FRAGMENT</code>)</li>\n</ul>\n<blockquote>\n<p>本文上述论点都是基于浏览器环境，非<em>NodeJS</em>环境(<em>SSR</em>)。文中提供的代码进行了<strong>适当的简化</strong>。</p>\n</blockquote>\n<p>在我们使用<code>template</code>的情况下，更新基本上会通过<code>block</code>进行更新——即节点自更新</p>\n<h4 id=\"diff-更新\"><a href=\"#diff-更新\" class=\"headerlink\" title=\"diff 更新\"></a>diff 更新</h4><h5 id=\"VUE2\"><a href=\"#VUE2\" class=\"headerlink\" title=\"VUE2\"></a>VUE2</h5><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528150909234.png\" alt=\"image-20230528150909234\"></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528150936549.png\" alt=\"image-20230528150936549\"></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151019742.png\" alt=\"image-20230528151019742\"></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151119230.png\" alt=\"image-20230528151119230\"></p>\n<p>第一次对比后结果</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151309763.png\" alt=\"image-20230528151309763\"></p>\n<p>第二次</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151400771.png\" alt=\"image-20230528151400771\"></p>\n<p>第三次</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151428703.png\" alt=\"image-20230528151428703\"></p>\n<p>最后整理</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151504941.png\" alt=\"image-20230528151504941\"></p>\n<h5 id=\"VUE3\"><a href=\"#VUE3\" class=\"headerlink\" title=\"VUE3\"></a>VUE3</h5><p><code>diff</code>更新调用的内部的<code>patchKeyedChildren</code>方法，其大致流程分为三步：</p>\n<ol>\n<li>对比新旧节点头部相同指针的节点，相同则进行<code>diff</code>，不同则跳转下一步。</li>\n<li>对比新旧节点尾部指针指向节点，相同则进行<code>diff</code>，不同则跳转下一步。</li>\n<li>此时剩余新旧节点，可能存在乱序、已移除或新增的情况，进行特殊处理来更新。</li>\n</ol>\n<p>下面是函数最开始做的初始化，其中<code>c1/c2</code>分别代表新旧节点的子节点数组；<code>i</code>表示两个新旧节点指向同步的指针，它们是同步的；<code>e1/e2</code>分别代表指向两个子节点数组尾部的指针：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> l2 = c2.<span class=\"property\">length</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 变更前节点的尾下标</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> e1 = c1.<span class=\"property\">length</span> - <span class=\"number\">1</span> <span class=\"comment\">// prev ending index</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 变更后节点的尾下标</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> e2 = l2 - <span class=\"number\">1</span> <span class=\"comment\">// next ending index</span></span><br></pre></td></tr></table></figure>\n\n<p>其中<code>patch()</code>函数用于对节点进行更新，<code>isSameVNodeType()</code>函数用于判断两个节点是否具有相同的类型，此时其需要满足类型一样且<code>key</code>值相等。</p>\n<blockquote>\n<p>这里的类型指，例如组件，则其为组件的配置对象，元素则为元素的标记。</p>\n</blockquote>\n<h4 id=\"1-对比头部等位指针节点\"><a href=\"#1-对比头部等位指针节点\" class=\"headerlink\" title=\"1. 对比头部等位指针节点\"></a>1. 对比头部等位指针节点</h4><p>首先其会从头部指针开始，对比新旧节点是否相同：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码<span class=\"comment\">// 1. sync from start</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 从开始位置同步</span></span><br><span class=\"line\"><span class=\"comment\">// (a b) c</span></span><br><span class=\"line\"><span class=\"comment\">// (a b) d e</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n1 = c1[i]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n2 = c2[i]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 节点没有发生变更时，进行patch</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isSameVNodeType</span>(n1, n2)) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">patch</span>(n1, n2)</span><br><span class=\"line\">    <span class=\"comment\">// 不同节点时，立刻结束</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  i++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注释中给出了一个例子，即如果存在下图的新旧队列：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527224906472.png\" alt=\"image-20230527224906472\"></p>\n<p>由于此时两个指针的<code>VNode</code>相同，那么可以复用则直接进行<code>patch()</code>更新。之后指针向右移动一位，对比两个数组下标为 <code>1</code> 的位置：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225018797.png\" alt=\"image-20230527225018797\"></p>\n<p>同样的，节点相同，进行更新然后指针向后移动：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225137121.png\" alt=\"image-20230527225137121\"></p>\n<p>此时两个节点不一样了，那么本次头部对比到此结束。到此我们排除了头部位置可复用的节点，接下来那么肯定是排除尾部位置的可复用节点。</p>\n<h3 id=\"2-对比尾部等位指针节点\"><a href=\"#2-对比尾部等位指针节点\" class=\"headerlink\" title=\"2. 对比尾部等位指针节点\"></a>2. 对比尾部等位指针节点</h3><p>尾部的可复用节点检查方法与头部一样，唯一一点不同的是，它们有各自的指针分别指向子节点数组尾部。所以此时要使用两个指针<code>e1/e2</code>。</p>\n<p>以此时要使用两个指针<code>e1/e2</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码<span class=\"comment\">// 2. sync from end</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 从尾部位置开始查找</span></span><br><span class=\"line\"><span class=\"comment\">// a (b c)</span></span><br><span class=\"line\"><span class=\"comment\">// d e (b c)</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n1 = c1[e1]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n2 = c2[e2]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isSameVNodeType</span>(n1, n2)) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">patch</span>(n1, n2)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  e1--</span><br><span class=\"line\">  e2--</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还是按注释中的例子放图：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225256542.png\" alt=\"image-20230527225256542\"></p>\n<p>当前指针指向节点相同，节点可复用，直接更新，同时指针向前一起移动：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225417598.png\" alt=\"image-20230527225417598\"></p>\n<p>当前指针指向节点相同，节点可复用，直接更新，同时指针向前一起移动：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225513256.png\"></p>\n<p>此时，两个指针指向节点不再相同，停止此处的对比。</p>\n<hr>\n<p>经过前两步的处理，新旧队列已经进一步缩短了，此时剩下的节点就可能存在下面三种情况：</p>\n<ul>\n<li>有新增的节点</li>\n<li>有节点被删除了</li>\n<li>相同的节点，但是移动了位置</li>\n</ul>\n<p>在实际的场景中，那么就只能存在下面三种剩余情况：</p>\n<ul>\n<li>仅有新增的节点(此时一定<code>i &gt; e1</code>)</li>\n<li>仅进行了节点删除(此时一定<code>i &gt; e2</code>)</li>\n<li>乱序的，一定有移动的节点，其中可能包含新增或有删除的节点(此时一定有<code>i &lt;= e2</code>且<code>i &lt;= e1</code>)</li>\n</ul>\n<p><code>Vue</code>按处理的简易程度，<code>Vue</code>先对前两种情况进行了单独的处理，再对三种混有的情况进行了处理。</p>\n<h4 id=\"3-1-处理新增的节点的单独情况\"><a href=\"#3-1-处理新增的节点的单独情况\" class=\"headerlink\" title=\"3.1 处理新增的节点的单独情况\"></a>3.1 处理新增的节点的单独情况</h4><p>判断新增的节点是以旧队列为基准，那么此时的情况是这样的：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230120660.png\" alt=\"image-20230527230120660\"></p>\n<p>或新增的节点在首部：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230226562.png\" alt=\"image-20230527230226562\"></p>\n<p>此时会存在这样的情况<code>e1 &lt; i</code>且<code>e2 &gt;= i</code>，那么我们只需要更新<code>e1 =&gt; i</code>间的节点即可，于是有了这些代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3. common sequence + mount</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 有新增的节点时</span></span><br><span class=\"line\"><span class=\"comment\">// (a b)</span></span><br><span class=\"line\"><span class=\"comment\">// (a b) c</span></span><br><span class=\"line\"><span class=\"comment\">// i = 2, e1 = 1, e2 = 2</span></span><br><span class=\"line\"><span class=\"comment\">// (a b)</span></span><br><span class=\"line\"><span class=\"comment\">// c (a b)</span></span><br><span class=\"line\"><span class=\"comment\">// i = 0, e1 = -1, e2 = 0</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (i &lt;= e2) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &gt; e1) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//  当前节点后面的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextPos = e2 + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 我们要以这个节点为锚点在其之前添加元素，没有则添加到父节点最后</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> anchor = nextPos &lt; l2 ? c2[nextPos].<span class=\"property\">el</span> : parentAnchor</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= e2) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">patch</span>(<span class=\"literal\">null</span>, c2[i])</span><br><span class=\"line\">      i++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-处理删除节点的单独情况\"><a href=\"#3-2-处理删除节点的单独情况\" class=\"headerlink\" title=\"3.2 处理删除节点的单独情况\"></a>3.2 处理删除节点的单独情况</h4><p>如果没有存在仅有新增节点的情况，那么其会判断是否是仅进行删除节点的情况，此时可能出现下图的两种情况：</p>\n<p>删除节点在尾部：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230416959.png\"></p>\n<p>删除节点在尾部：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230458558.png\" alt=\"image-20230527230458558\"></p>\n<p>此时<code>i &gt; e2</code>，那么我们只需要将旧节点数组中<code>i =&gt; e1</code>之间的所有节点删除即可(下面的<code>else if</code>语句承接上面)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码<span class=\"comment\">// 4. common sequence + unmount</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 节点移除</span></span><br><span class=\"line\"><span class=\"comment\">// (a b) c</span></span><br><span class=\"line\"><span class=\"comment\">// (a b)</span></span><br><span class=\"line\"><span class=\"comment\">// i = 2, e1 = 2, e2 = 1</span></span><br><span class=\"line\"><span class=\"comment\">// a (b c)</span></span><br><span class=\"line\"><span class=\"comment\">// (b c)</span></span><br><span class=\"line\"><span class=\"comment\">// i = 0, e1 = 0, e2 = -1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &gt; e2) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt;= e1) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 移除原节点</span></span><br><span class=\"line\">    <span class=\"title function_\">unmount</span>(c1[i])</span><br><span class=\"line\">    i++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-乱序，但一定有移动的节点的情况\"><a href=\"#3-3-乱序，但一定有移动的节点的情况\" class=\"headerlink\" title=\"3.3 乱序，但一定有移动的节点的情况\"></a>3.3 乱序，但一定有移动的节点的情况</h4><p>最后一种情况就是比较复杂的情况，此时<code>Vue</code>做的处理是，先查看旧节点序列在变为新节点序列后，旧节点序列中是否有些节点还是按现在的顺序排列的(可以间断)，此时只对其余变更的节点进行操作，就能进行最小幅度的<code>DOM</code>操作了。</p>\n<blockquote>\n<p>此时相对于求旧节点的最长递增序列，这里你可以会想到为什么不求最小编辑距离，因为最小编辑距离的时间复杂度在大多数情况下比它高</p>\n</blockquote>\n<h5 id=\"3-3-1-建立新节点-key-与其下标的映射\"><a href=\"#3-3-1-建立新节点-key-与其下标的映射\" class=\"headerlink\" title=\"3.3.1 建立新节点 key 与其下标的映射\"></a>3.3.1 建立新节点 key 与其下标的映射</h5><p>首先，<code>Vue</code>先将新节点数组进行遍历，将它们有<code>key</code>值的节点与其在新节点数组中的下标建立映射，存储在<code>keyToNewIndexMap</code>中，方便在复用时查找：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s1 = i <span class=\"comment\">// prev starting index</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> s2 = i <span class=\"comment\">// next starting index</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5.1 build key:index map for newChildren</span></span><br><span class=\"line\"><span class=\"comment\">// 5.1 生成一个key map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> keyToNewIndexMap = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历新节点，乱序的部分，将这些具有key的节点存入map</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = s2; i &lt;= e2; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nextChild = c2[i]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nextChild.<span class=\"property\">key</span> != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    keyToNewIndexMap.<span class=\"title function_\">set</span>(nextChild.<span class=\"property\">key</span>, i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-3-2-移除新节点队列中不存在的旧节点并更新复用节点\"><a href=\"#3-3-2-移除新节点队列中不存在的旧节点并更新复用节点\" class=\"headerlink\" title=\"3.3.2 移除新节点队列中不存在的旧节点并更新复用节点\"></a>3.3.2 移除新节点队列中不存在的旧节点并更新复用节点</h5><p>之后，遍历旧节点数组，通过刚刚建立的<code>Map</code>，如果当前旧节点在新节点数组中已经不存在了，那么说明要移除了。</p>\n<p>整个过程比较复杂，因为要预先做处理，为后续是否需要移动节点做准备：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 5.2 loop through old children left to be patched and try to patch</span></span><br><span class=\"line\"><span class=\"comment\">// matching nodes &amp; remove nodes that are no longer present</span></span><br><span class=\"line\"><span class=\"comment\">// 5.2 遍历旧节点，patch匹配的节点，移除不再在节点</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> j</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前处理过的节点数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> patched = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 需要patch的节点数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> toBePatched = e2 - s2 + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否需要移动节点</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> moved = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// used to track whether any node has moved</span></span><br><span class=\"line\"><span class=\"comment\">// 记录节点是否已经移动</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> maxNewIndexSoFar = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// works as Map&lt;newIndex, oldIndex&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// Note that oldIndex is offset by +1</span></span><br><span class=\"line\"><span class=\"comment\">// and oldIndex = 0 is a special value indicating the new node has</span></span><br><span class=\"line\"><span class=\"comment\">// no corresponding old node.</span></span><br><span class=\"line\"><span class=\"comment\">// 注意旧下标的值都会+1，因为0表示没有对应的旧节点</span></span><br><span class=\"line\"><span class=\"comment\">// used for determining longest stable subsequence</span></span><br><span class=\"line\"><span class=\"comment\">// 新下标与旧下标的map</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的新下标以s2位置为0下标，而旧下标为旧下标值 +１</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newIndexToOldIndexMap = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(toBePatched)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化值为0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; toBePatched; i++) newIndexToOldIndexMap[i] = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我说明下三个变量，首先是<code>newIndexToOldIndexMap</code>，其用来记录节点的新坐标到旧坐标的映射(当然是节点可复用的情况下)。为了后续计算最长递增子序列，所以其新坐标以<code>s2</code>为起点，长度为当前需要处理的节点总数，并且其存入的旧节点下标要在原值的基础上<code>+ 1</code>(因为<code>0</code>表示当前节点没有对应的旧节点)。举个例子，有如下图一样的更新序列：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230956800.png\" alt=\"image-20230527230956800\"></p>\n<p>那么节点<code>e</code>存入<code>newIndexToOldIndexMap</code>后为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 展示，不是赋值语句</span></span><br><span class=\"line\">newIndexToOldIndexMap = [<span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<p>其余全部节点存入后为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 展示，不是赋值语句</span></span><br><span class=\"line\">newIndexToOldIndexMap = [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<p><code>moved</code>变量则是表示是否有节点需要移动，其判定要基于<code>maxNewIndexSoFar</code>的值。</p>\n<p><code>maxNewIndexSoFar</code>表示当前可复用节点距离<code>s2</code>(即第一个乱序节点的最远距离)。如果有对应可以复用的节点，那么在每次迭代处理节点时，如果当前节点所处位置距离<code>s2</code>距离超过<code>maxNewIndexSoFar</code>，那么<code>maxNewIndexSoFar</code>会更新为当前节点在新队列中的下标；当其小于<code>maxNewIndexSoFar</code>时，就会标记<code>moved = true</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，</span></span><br><span class=\"line\"><span class=\"comment\">// 那么每次都会进入该if语句</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前节点未移动，更新下标</span></span><br><span class=\"line\">  maxNewIndexSoFar = newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果进入该else语句说明有节点之前节点交叉了</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  moved = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>想象一下，如果节点在新旧序列中，都是按照相同的顺序递增，那么<code>maxNewIndexSoFar</code>也会一直递增，即每次迭代<code>newIndex &gt;= maxNewIndexSoFar</code>，那么就不需要移动节点；但是如果某次迭代，<code>newIndex &lt; maxNewIndexSoFar</code>，那么说明当前节点由之前靠后的位置移动了现在靠前的位置。</p>\n<p>就拿刚刚乱序的图举例，第一次迭代<code>c</code>节点的<code>newIndex = 4</code>，则<code>maxNewIndexSoFar = 4</code>；第二次迭代<code>d</code>节点时，其<code>newIndex = 3</code>，此时<code>newIndex &lt; maxNewIndexSoFar</code>，说明<code>c/d</code>节点之间的位置在新旧发生了交叉，所以我们至少需要移动它们其中一个节点。</p>\n<p>理解了这个道理，现在我们可以正式看看这段代码了。由于要卸载节点，那么本次遍历要以<code>s1 &lt;-&gt; e1</code>之间的节点为基准进行遍历，整体遍历代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历旧节点</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = s1; i &lt;= e1; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前下标的旧节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> prevChild = c1[i]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 当前patch的节点数超过新节点中要patch的总数时，执行unmount操作</span></span><br><span class=\"line\">  <span class=\"comment\">// 直接进行卸载操作，因为多余的节点不需要了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (patched &gt;= toBePatched) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// all new children have been patched so this can only be a removal</span></span><br><span class=\"line\">    <span class=\"title function_\">unmount</span>(prevChild)</span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 尝试寻找是否有对应的新节点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 旧节点具有key时，获取相同key值节点所处的下标</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (prevChild.<span class=\"property\">key</span> != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    newIndex = keyToNewIndexMap.<span class=\"title function_\">get</span>(prevChild.<span class=\"property\">key</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 没有key时则找相同类型的节点是否存在</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// key-less node, try to locate a key-less node of the same type</span></span><br><span class=\"line\">    <span class=\"comment\">// 当前查找范围为新节点中需要patch的节点之间</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = s2; j &lt;= e2; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        <span class=\"comment\">// 0表示对应下标下当前还未有节点(注意当前是以s2为0下标基准)</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里确认当前新下标位置未有对应的旧下标，防止是已在map中的节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        newIndexToOldIndexMap[j - s2] === <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"title function_\">isSameVNodeType</span>(prevChild, c2[j])</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        newIndex = j</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 没找到对应节点时说明该节点已经不存在了，直接进行unmount</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newIndex === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">unmount</span>(prevChild)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找到时进行位置移动操作，并patch</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将旧节点位置下标+1后存入，新节点以s2为起点，即0坐标</span></span><br><span class=\"line\">    newIndexToOldIndexMap[newIndex - s2] = i + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，</span></span><br><span class=\"line\">    <span class=\"comment\">// 那么每次都会进入该if语句</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 当前节点未移动，更新下标</span></span><br><span class=\"line\">      maxNewIndexSoFar = newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果进入该else语句说明有节点之前节点交叉了</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      moved = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// patch该节点</span></span><br><span class=\"line\">    <span class=\"title function_\">patch</span>(prevChild, c2[newIndex])</span><br><span class=\"line\">    patched++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先当当前可复用的节点复用时，会使<code>patched</code>值<code>+1</code>，当复用的节点超过乱序的新节点长度时，那么其余的节点肯定是要卸载的节点(因为新节点序列都处理完毕了)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (patched &gt;= toBePatched) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// all new children have been patched so this can only be a removal</span></span><br><span class=\"line\">    <span class=\"title function_\">unmount</span>(prevChild)</span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后，<code>Vue</code>尝试寻找一下当前旧节点是否被复用，即它被移动到了新节点序列的其他位置。首先如果当前节点有<code>key</code>值，那么其会尝试直接从刚刚的<code>keyToNewIndexMap</code>中查找；如果没有找到，那么其会遍历当前所有的新节点序列，依次对比是否与当前节点相同，在复合同类型节点时对其进行复用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 尝试寻找是否有对应的新节点</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newIndex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 旧节点具有 key 时，获取相同 key 值节点所处的下标</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (prevChild.<span class=\"property\">key</span> != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">  newIndex = keyToNewIndexMap.<span class=\"title function_\">get</span>(prevChild.<span class=\"property\">key</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 没有key时则找相同类型的节点是否存在</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// key-less node, try to locate a key-less node of the same type</span></span><br><span class=\"line\">  <span class=\"comment\">// 当前查找范围为新节点中需要 patch 的节点之间</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (j = s2; j &lt;= e2; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"comment\">// 0 表示对应下标下当前还未有节点(注意当前是以 s2 为 0 下标基准)</span></span><br><span class=\"line\">      <span class=\"comment\">// 这里确认当前新下标位置未有对应的旧下标，防止是已在 map 中的节点</span></span><br><span class=\"line\">      newIndexToOldIndexMap[j - s2] === <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">      <span class=\"title function_\">isSameVNodeType</span>(prevChild, c2[j])</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      newIndex = j</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在直接通过类型查找复用节点时，其存在一个<code>newIndexToOldIndexMap[j - s2] === 0</code>条件，它表示当前新节点下标未有对应的旧节点(<code>0</code>表示没有，在之后的代码中，如果查找到对应的<code>newIndex</code>，其会存入<code>newIndexToOldIndexMap</code>中)。这样可以防止新旧节点被重复复用或已被处理再次被处理。</p>\n<p>到此，对于旧节点的<code>newIndex</code>是否被查找到就会出现两种情况了：</p>\n<ol>\n<li>没有，说明当前节点已删除了，移除该<code>DOM</code>节点</li>\n<li>有，复用，<strong>更新节点属性</strong></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 没找到对应节点时说明该节点已经不存在了，直接进行unmount</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (newIndex === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">unmount</span>(prevChild)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 找到时进行位置移动操作，并patch</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将旧节点位置下标+1后存入，新节点以s2为起点，即0坐标</span></span><br><span class=\"line\">  newIndexToOldIndexMap[newIndex - s2] = i + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，</span></span><br><span class=\"line\">  <span class=\"comment\">// 那么每次都会进入该if语句</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前节点未移动，更新下标</span></span><br><span class=\"line\">    maxNewIndexSoFar = newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果进入该else语句说明有节点之前节点交叉了</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    moved = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// patch该节点</span></span><br><span class=\"line\">  <span class=\"title function_\">patch</span>(prevChild, c2[newIndex])</span><br><span class=\"line\">  patched++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在复用的情况下，有我们刚刚提到的<a href=\"#332-%E7%A7%BB%E9%99%A4%E6%96%B0%E8%8A%82%E7%82%B9%E9%98%9F%E5%88%97%E4%B8%AD%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E6%97%A7%E8%8A%82%E7%82%B9%E5%B9%B6%E6%9B%B4%E6%96%B0%E5%A4%8D%E7%94%A8%E8%8A%82%E7%82%B9\">计算节点交叉(是否需要移动)</a>的场景：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，</span></span><br><span class=\"line\"><span class=\"comment\">// 那么每次都会进入该if语句</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前节点未移动，更新下标</span></span><br><span class=\"line\">  maxNewIndexSoFar = newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果进入该else语句说明有节点之前节点交叉了</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  moved = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里就不赘述了。</p>\n<blockquote>\n<p>注意，这里对复用的节点进行了<code>patch()</code>更新，那么后面就只用进行移动即可，而不需要更新了。</p>\n</blockquote>\n<h4 id=\"3-3-3-处理新增节点与移动的节点\"><a href=\"#3-3-3-处理新增节点与移动的节点\" class=\"headerlink\" title=\"3.3.3 处理新增节点与移动的节点\"></a>3.3.3 处理新增节点与移动的节点</h4><p>到此为止，就只有新增节点与移动节点的情况没有处理了。</p>\n<p>首先其会需要移动节点时(<code>moved = true</code>)根据刚刚创建的<code>newIndexToOldIndexMap</code>生成一个最长递增的新节点序列<code>increasingNewIndexSequence</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码<span class=\"comment\">// 5.3 move and mount</span></span><br><span class=\"line\"><span class=\"comment\">// 5.3 移动与mount</span></span><br><span class=\"line\"><span class=\"comment\">// generate longest stable subsequence only when nodes have moved</span></span><br><span class=\"line\"><span class=\"comment\">// 有节点需要移动，生成长期稳定的子序列，仅对移动过的节点处理</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> increasingNewIndexSequence = moved</span><br><span class=\"line\">  ? <span class=\"comment\">// 获取最长递增子序列的下标数组</span></span><br><span class=\"line\">    <span class=\"title function_\">getSequence</span>(newIndexToOldIndexMap)</span><br><span class=\"line\">  : <span class=\"variable constant_\">EMPTY_ARR</span></span><br></pre></td></tr></table></figure>\n\n<p>那么这个序列的作用是什么？它就是用来<strong>辅助移动节点</strong>，而且是在最小次数下移动节点。由于<code>newIndexToOldIndexMap</code>是根据新旧节点之间的映射创建的，其<strong>下标天然代表乱序的新节点数组的顺序</strong>，而且其对应下标中存储的元素也代表该新节点复用的旧节点的下标，那么这里我们就可以看到两个序列：</p>\n<ol>\n<li>新节点下标组成的序列(<strong>递增</strong>的，因为我们以它为基准创建的数组)</li>\n<li><code>newIndexToOldIndexMap</code>中旧节点下标组成的序列，可能递增也可能乱序</li>\n</ol>\n<blockquote>\n<p>关于如何求<a href=\"https://link.juejin.cn/?target=https://en.wikipedia.org/wiki/Longest_increasing_subsequence\">最长递增子序列</a>，请单独自行学习，这里就不说明了。</p>\n</blockquote>\n<p>此时倘若旧节点下标组成的序列<strong>也</strong>呈现递增趋势，那么我们便可以操作那些非递增的节点来达到变更为新节点序列的目的。并且这个递增的序列越长，那么我们要操作(移动)的节点就越少。比如下图的情况：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124733993.png\" alt=\"image-20230528124733993\"></p>\n<p>从图中观察，我们可以清楚的看到<code>c/d</code>两个节点在前后都保持了递增的关系，那么此时我们只需要移动<code>e</code>节点与创建<code>h</code>节点即可。</p>\n<p>此时其<code>newIndexToOldIndexMap</code>为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码newIndexToOldIndexMap = [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 该数组返回的是对应的元素在newIndexToOldIndexMap的下标</span></span><br><span class=\"line\"><span class=\"comment\">// 而并非实际的旧节点下标</span></span><br><span class=\"line\">increasingNewIndexSequence = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>2、3</code>节点与新节点的下标的<strong>递增关系保持一致</strong>，其最长递增子序列(<code>increasingNewIndexSequence</code>)为<code>[1, 2]</code>，此时我们只需要操作<code>4/0</code>两个节点即可。</p>\n<blockquote>\n<p><code>increasingNewIndexSequence</code>返回的结果为对应的元素在 <code>newIndexToOldIndexMap</code>的下标而并非实际的旧节点下标</p>\n</blockquote>\n<p>明白了这个现在我们来看其具体处理的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取递增序列的尾坐标</span></span><br><span class=\"line\">j = increasingNewIndexSequence.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// looping backwards so that we can use last patched node as anchor</span></span><br><span class=\"line\"><span class=\"comment\">// 向后循环，这样我们可以用上一个patch过了的节点做锚点</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = toBePatched - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前要处理的新节点下标及其节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> nextIndex = s2 + i</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nextChild = c2[nextIndex]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取其后一个节点，如果没有则获取其父节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> anchor = nextIndex + <span class=\"number\">1</span> &lt; l2 ? c2[nextIndex + <span class=\"number\">1</span>].<span class=\"property\">el</span> : parentAnchor</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果当前新旧节点Map中未找到当前位置新节点的旧节点信息，</span></span><br><span class=\"line\">  <span class=\"comment\">// 说明是新增节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newIndexToOldIndexMap[i] === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// mount new</span></span><br><span class=\"line\">    <span class=\"title function_\">patch</span>(<span class=\"literal\">null</span>, nextChild)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// moved说明有节点需要移动，通过塑造一个递增序列，处于递增序列的节点就可以</span></span><br><span class=\"line\">    <span class=\"comment\">// 不进行移动，只移动其余节点，这样就减少了节点的移动</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (moved) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果存在以下情况则移动：</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 没有稳定的子序列</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 当前节点不在这个稳定的子序列中</span></span><br><span class=\"line\">    <span class=\"comment\">// move if:</span></span><br><span class=\"line\">    <span class=\"comment\">// There is no stable subsequence (e.g. a reverse)</span></span><br><span class=\"line\">    <span class=\"comment\">// OR current node is not among the stable sequence</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j &lt; <span class=\"number\">0</span> || i !== increasingNewIndexSequence[j]) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">move</span>(nextChild, container, anchor)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      j--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>本次遍历以新节点的乱序序列(<code>s2 &lt;-&gt; e2</code>)为基准，逆向进行遍历。逆向的原因是因为其在新增节点或更新节点时，可以以后面已经操作过的节点为锚点进行更新(想象一下<code>Node.insertBefore()/Node.appendChild()</code>的参数)。</p>\n<p>每次遍历会出现三种情况：</p>\n<ul>\n<li>当前节点未有对应的旧节点下标，则说明是新增节点</li>\n<li>该节点需要移动，进行移动</li>\n<li>该节点与旧节点序列都保持递增顺序，直接跳过即可(实际反应在代码里面就是没做任何处理)</li>\n</ul>\n<blockquote>\n<p>情况<code>2</code>与<code>3</code>在完整的迭代中是互斥的，两者不会同时出现在整个迭代流程中。</p>\n</blockquote>\n<p>第一种情况，比较简单，这里就不解释了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果当前新旧节点Map中未找到当前位置新节点的旧节点信息，</span></span><br><span class=\"line\"><span class=\"comment\">// 说明是新增节点</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (newIndexToOldIndexMap[i] === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// mount new</span></span><br><span class=\"line\">  <span class=\"title function_\">patch</span>(<span class=\"literal\">null</span>, nextChild</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二种情况要判定<code>moved = true</code>，它的原理<a href=\"#332-%E7%A7%BB%E9%99%A4%E6%96%B0%E8%8A%82%E7%82%B9%E9%98%9F%E5%88%97%E4%B8%AD%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E6%97%A7%E8%8A%82%E7%82%B9%E5%B9%B6%E6%9B%B4%E6%96%B0%E5%A4%8D%E7%94%A8%E8%8A%82%E7%82%B9\">之前我们已经解释过了</a>。这里我们要关注的是它的函数体。根据我们刚刚对递增子序列的理解，那么其应该会在以下情况移动或不移动节点：</p>\n<ul>\n<li>当前节点处于最长递增子序列中 —— 跳过</li>\n<li>当前节点不存在最长递增子序列中 —— 移动<ul>\n<li>递增序列已经没有需要跳过的节点了但任存在节点需要更新(实际和不存在的情况一样)</li>\n<li>当前节点不存在最长递增子序列</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果存在以下情况则移动：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 没有稳定的子序列(实际和情况2一致，反序时会返回任意一个节点作为最长序列)</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 当前节点不在这个稳定的子序列中</span></span><br><span class=\"line\"><span class=\"comment\">// move if:</span></span><br><span class=\"line\"><span class=\"comment\">// There is no stable subsequence (e.g. a reverse)</span></span><br><span class=\"line\"><span class=\"comment\">// OR current node is not among the stable sequence</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (j &lt; <span class=\"number\">0</span> || i !== increasingNewIndexSequence[j]) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将当前节点移动到锚点节点前或容器节点最后(没有锚点时)</span></span><br><span class=\"line\">  <span class=\"title function_\">move</span>(nextChild, container, anchor)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  j--</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124834143.png\" alt=\"image-20230528124834143\"></p>\n<p>在第二次更新中，发现<code>d</code>节点存在于单调增序列中，所以本次更新可以跳过：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124910205.png\" alt=\"image-20230528124910205\"></p>\n<p>同理<code>c</code>节点也一样，这里就不放图了，处理完<code>c</code>节点后此时为这样</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124931580.png\" alt=\"image-20230528124931580\"></p>\n<p>此时<code>e</code>节点可复用，则将其移动到新<code>c</code>节点前即可。</p>\n<p>到此为止，上图的<code>diff</code>就结束了。</p>\n<p>对于第三种情况，由于复用的节点在前后都保持了递增的关系，所以此时我们不需要再重复对节点进行处理，所以遇到复用的节点时直接跳过即可：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528125006064.png\" alt=\"image-20230528125006064\"></p>\n<p>到此为止全部节点的更新就已经完毕了。</p>\n<h3 id=\"为什么组件中的-data-是一个函数？\"><a href=\"#为什么组件中的-data-是一个函数？\" class=\"headerlink\" title=\"为什么组件中的 data 是一个函数？\"></a>为什么组件中的 data 是一个函数？</h3><p>在 new Vue() 中，可以是函数也可以是对象，因为根实例只有一个，不会产生数据污染。</p>\n<p>在组件中，data 必须为函数，目的是为了防止多个组件实例对象之间共用一个 data，产生数据污染；而采用函数的形式，initData 时会将其作为工厂函数都会返回全新的 data 对象。</p>\n<h3 id=\"Vue-中组件间的通信方式？\"><a href=\"#Vue-中组件间的通信方式？\" class=\"headerlink\" title=\"Vue 中组件间的通信方式？\"></a>Vue 中组件间的通信方式？</h3><ol>\n<li><p>父子组件通信：</p>\n<p>父向子传递数据是通过<code>props</code>，子向父是通过<code>$emit</code>触发事件；通过父链/子链也可以通信（<code>$parent</code>/<code>$children</code>）；<code>ref</code>也可以访问组件实例；<code>provide</code>/<code>inject</code>；<code>$attrs</code>/<code>$listeners</code>。</p>\n</li>\n<li><p>兄弟组件通信：</p>\n<p>全局事件总线<code>EventBus</code>、<code>Vuex</code>。</p>\n</li>\n<li><p>跨层级组件通信：</p>\n<p>全局事件总线<code>EventBus</code>、<code>Vuex</code>、<code>provide</code>/<code>inject</code>。</p>\n</li>\n</ol>\n<h3 id=\"v-show-和-v-if-的区别？\"><a href=\"#v-show-和-v-if-的区别？\" class=\"headerlink\" title=\"v-show 和 v-if 的区别？\"></a>v-show 和 v-if 的区别？</h3><ol>\n<li>控制手段不同。<code>v-show</code>是通过给元素添加 css 属性<code>display: none</code>，但元素仍然存在；而<code>v-if</code>控制元素显示或隐藏是将元素整个添加或删除。</li>\n<li>编译过程不同。<code>v-if</code>切换有一个局部编译/卸载的过程，切换过程中合适的销毁和重建内部的事件监听和子组件；<code>v-show</code>只是简单的基于 css 切换。</li>\n<li>编译条件不同。<code>v-if</code>是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建，渲染条件为假时，并不做操作，直到为真才渲染。</li>\n<li>触发生命周期不同。<code>v-show</code>由 false 变为 true 的时候不会触发组件的生命周期；<code>v-if</code>由 false 变为 true 的时候，触发组件的<code>beforeCreate</code>、<code>created</code>、<code>beforeMount</code>、<code>mounted</code>钩子，由 true 变为 false 的时候触发组件的<code>beforeDestory</code>、<code>destoryed</code>钩子。</li>\n<li>性能消耗不同。<code>v-if</code>有更高的切换消耗；<code>v-show</code>有更高的初始渲染消耗。</li>\n</ol>\n<p>使用场景：<br> 如果需要非常频繁地切换，则使用<code>v-show</code>较好，如：手风琴菜单，tab 页签等； 如果在运行时条件很少改变，则使用<code>v-if</code>较好，如：用户登录之后，根据权限不同来显示不同的内容。</p>\n<h3 id=\"computed-和-watch-的区别？\"><a href=\"#computed-和-watch-的区别？\" class=\"headerlink\" title=\"computed 和 watch 的区别？\"></a>computed 和 watch 的区别？</h3><ul>\n<li><code>computed</code>计算属性，依赖其它属性计算值，内部任一依赖项的变化都会重新执行该函数，计算属性有缓存，多次重复使用计算属性时会从缓存中获取返回值，计算属性必须要有<code>return</code>关键词。</li>\n<li><code>watch</code>侦听到某一数据的变化从而触发函数。当数据为对象类型时，对象中的属性值变化时需要使用深度侦听<code>deep</code>属性，也可在页面第一次加载时使用立即侦听<code>immdiate</code>属性。</li>\n</ul>\n<p>运用场景：<br> 计算属性一般用在模板渲染中，某个值是依赖其它响应对象甚至是计算属性而来；而侦听属性适用于观测某个值的变化去完成一段复杂的业务逻辑。</p>\n<h3 id=\"v-if-和-v-for-为什么不建议放在一起使用？\"><a href=\"#v-if-和-v-for-为什么不建议放在一起使用？\" class=\"headerlink\" title=\"v-if 和 v-for 为什么不建议放在一起使用？\"></a>v-if 和 v-for 为什么不建议放在一起使用？</h3><p>Vue 2 中，<code>v-for</code>的优先级比<code>v-if</code>高，这意味着<code>v-if</code>将分别重复运行于每一个<code>v-for</code>循环中。如果要遍历的数组很大，而真正要展示的数据很少时，将造成很大的性能浪费。</p>\n<p>Vue 3 中，则完全相反，<code>v-if</code>的优先级高于<code>v-for</code>，所以<code>v-if</code>执行时，它调用的变量还不存在，会导致异常。</p>\n<p>通常有两种情况导致要这样做：</p>\n<ul>\n<li>为了过滤列表中的项目，比如：<code>v-for = &quot;user in users&quot; v-if = &quot;user.active&quot;</code>。这种情况，可以定义一个计算属性，让其返回过滤后的列表即可。</li>\n<li>为了避免渲染本该被隐藏的列表，比如<code>v-for = &quot;user in users&quot;  v-if = &quot;showUsersFlag&quot;</code>。这种情况，可以将<code>v-if</code>移至容器元素上或在外面包一层<code>template</code>即可。</li>\n</ul>\n<h3 id=\"Vue-2中的set方法？\"><a href=\"#Vue-2中的set方法？\" class=\"headerlink\" title=\"Vue 2中的set方法？\"></a>Vue 2中的set方法？</h3><p><a href=\"https://link.juejin.cn/?target=https://v2.cn.vuejs.org/v2/api/%23Vue-set\"><code>set</code>是Vue 2中的一个全局API</a>。可手动添加响应式数据，解决数据变化视图未更新问题。当在项目中直接设置数组的某一项的值，或者直接设置对象的某个属性值，会发现页面并没有更新。这是因为<code>Object.defineProperty()</code>的限制，监听不到数据变化，可通过<code>this.$set(数组或对象，数组下标或对象的属性名，更新后的值)</code>解决。</p>\n<h3 id=\"keep-alive-是什么？\"><a href=\"#keep-alive-是什么？\" class=\"headerlink\" title=\"keep-alive 是什么？\"></a>keep-alive 是什么？</h3><ul>\n<li>作用：实现组件缓存，保持组件的状态，避免反复渲染导致的性能问题。</li>\n<li>工作原理：Vue.js 内部将 DOM 节点，抽象成了一个个的 VNode 节点，<code>keep-alive</code>组件的缓存也是基于 VNode 节点的。它将满足条件的组件在 cache 对象中缓存起来，重新渲染的时候再将 VNode 节点从 cache 对象中取出并渲染。</li>\n<li>可以设置以下属性：<br> ① <code>include</code>：字符串或正则，只有名称匹配的组件会被缓存。<br> ② <code>exclude</code>：字符串或正则，任何名称匹配的组件都不会被缓存。<br> ③ <code>max</code>：数字，最多可以缓存多少组件实例。<br> 匹配首先检查组件的<code>name</code>选项，如果<code>name</code>选项不可用，则匹配它的局部注册名称（父组件 components选项的键值），匿名组件不能被匹配。</li>\n</ul>\n<p>如果同时使用了<code>include</code>、<code>exclude</code>，那么<code>exclude</code>的优先级高于<code>include</code>。</p>\n<p>设置了<code>keep-alive</code>缓存的组件，会多出两个生命周期钩子：<code>activated</code>、<code>deactivated</code>。<br> 首次进入组件时：beforeCreate –&gt; created –&gt; beforeMount –&gt; mounted –&gt; activated –&gt; beforeUpdate –&gt; updated –&gt; deactivated<br> 再次进入组件时：activated –&gt; beforeUpdate –&gt; updated –&gt; deactivated</p>\n<h3 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h3><p><code>mixin</code>（混入）， 它提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。</p>\n<p>使用场景： 不同组件中经常会用到一些相同或相似的代码，这些代码的功能相对独立。可以通过mixin 将相同或相似的代码提出来。</p>\n<p>缺点：</p>\n<ol>\n<li>变量来源不明确</li>\n<li>多 mixin 可能会造成命名冲突（解决方式：Vue 3的组合API）</li>\n<li>mixin 和组件出现多对多的关系，使项目复杂度变高。</li>\n</ol>\n<h3 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h3><p><code>slot</code>插槽，一般在组件内部使用，封装组件时，在组件内部不确定该位置是以何种形式的元素展示时，可以通过<code>slot</code>占据这个位置，该位置的元素需要父组件以内容形式传递过来。<code>slot</code>分为：</p>\n<ul>\n<li><code>默认插槽</code>：子组件用<code>&lt;slot&gt;</code>标签来确定渲染的位置，标签里面可以放<code>DOM</code>结构作为后备内容，当父组件在使用的时候，可以直接在子组件的标签内写入内容，该部分内容将插入子组件的<code>&lt;slot&gt;</code>标签位置。如果父组件使用的时候没有往插槽传入内容，后备内容就会显示在页面。</li>\n<li><code>具名插槽</code>：子组件用<code>name</code>属性来表示插槽的名字，没有指定<code>name</code>的插槽，会有隐含的名称叫做 <code>default</code>。父组件中在使用时在默认插槽的基础上通过<code>v-slot</code>指令指定元素需要放在哪个插槽中，<code>v-slot</code>值为子组件插槽<code>name</code>属性值。使用<code>v-slot</code>指令指定元素放在哪个插槽中，必须配合<code>&lt;template&gt;</code>元素，且一个<code>&lt;template&gt;</code>元素只能对应一个预留的插槽，即不能多个<code>&lt;template&gt;</code> 元素都使用<code>v-slot</code>指令指定相同的插槽。<code>v-slot</code>的简写是<code>#</code>，例如<code>v-slot:header</code>可以简写为<code>#header</code>。</li>\n<li>作用域插槽：子组件在<slot>标签上绑定props数据，以将子组件数据传给父组件使用。父组件获取插槽绑定 props 数据的方法：<ol>\n<li>scope=”接收的变量名”：<code>&lt;template scope=&quot;接收的变量名&quot;&gt;</code></li>\n<li>slot-scope=”接收的变量名”：<code>&lt;template slot-scope=&quot;接收的变量名&quot;&gt;</code></li>\n<li>v-slot:插槽名=”接收的变量名”：<code>&lt;template v-slot:插槽名=&quot;接收的变量名&quot;&gt;</code></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Vue-中的修饰符有哪些？\"><a href=\"#Vue-中的修饰符有哪些？\" class=\"headerlink\" title=\"Vue 中的修饰符有哪些？\"></a>Vue 中的修饰符有哪些？</h3><p>在Vue 中，修饰符处理了许多 DOM 事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理。Vue中修饰符分为以下几种：</p>\n<ol>\n<li><p>表单修饰符<br> <code>lazy</code> 填完信息，光标离开标签的时候，才会将值赋予给value，也就是在<code>change</code>事件之后再进行信息同步。<br> <code>number</code> 自动将用户输入值转化为数值类型，但如果这个值无法被<code>parseFloat</code>解析，则会返回原来的值。<br> <code>trim</code> 自动过滤用户输入的首尾空格，而中间的空格不会被过滤。</p>\n</li>\n<li><p>事件修饰符<br> <code>stop</code> 阻止了事件冒泡，相当于调用了<code>event.stopPropagation</code>方法。<br> <code>prevent</code> 阻止了事件的默认行为，相当于调用了<code>event.preventDefault</code>方法。<br> <code>self</code> 只当在 <code>event.target</code> 是当前元素自身时触发处理函数。<br> <code>once</code> 绑定了事件以后只能触发一次，第二次就不会触发。<br> <code>capture</code> 使用事件捕获模式，即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理。<br> <code>passive</code> 告诉浏览器你不想阻止事件的默认行为。<br> <code>native</code> 让组件变成像<code>html</code>内置标签那样监听根元素的原生事件，否则组件上使用 <code>v-on</code> 只会监听自定义事件。</p>\n</li>\n<li><p>鼠标按键修饰符<br> <code>left</code> 左键点击。<br> <code>right</code> 右键点击。<br> <code>middle</code> 中键点击。</p>\n</li>\n<li><p>键值修饰符</p>\n<p>键盘修饰符是用来修饰键盘事件（onkeyup，onkeydown）的，有如下：keyCode</p>\n<p>存在很多，但vue为我们提供了别名，分为以下两种：</p>\n<ul>\n<li>普通键（enter、tab、delete、space、esc、up…）</li>\n<li>系统修饰键（ctrl、alt、meta、shift…）</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"对-SPA-的理解？\"><a href=\"#对-SPA-的理解？\" class=\"headerlink\" title=\"对 SPA 的理解？\"></a>对 SPA 的理解？</h3><ol>\n<li><p>概念：<br> <code>SPA（Single-page  application）</code>，即单页面应用，它是一种网络应用程序或网站的模型，通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换时打断用户体验。在<code>SPA</code>中，所有必要的代码（HTML、JavaScript 和 CSS）都通过单个页面的加载而检索，或者根据需要（通常是响应用户操作）动态装载适当的资源并添加到页面。页面在任何时间点都不会重新加载，也不会将控制转移到其他页面。举个例子，就像一个杯子，上午装的是牛奶，中午装的是咖啡，下午装的是茶，变得始终是内容，杯子始终不变。</p>\n</li>\n<li><p><code>SPA</code>与<code>MPA</code>的区别：<br> <code>MPA（Muti-page application）</code>，即多页面应用。在<code>MPA</code>中，每个页面都是一个主页面，都是独立的，每当访问一个页面时，都需要重新加载 Html、CSS、JS 文件，公共文件则根据需求按需加载。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>SPA</th>\n<th>MPA</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>组成</td>\n<td>一个主页面和多个页面片段</td>\n<td>多个主页面</td>\n</tr>\n<tr>\n<td>url模式</td>\n<td>hash模式</td>\n<td>history模式</td>\n</tr>\n<tr>\n<td>SEO搜索引擎优化</td>\n<td>难实现，可使用SSR方式改善</td>\n<td>容易实现</td>\n</tr>\n<tr>\n<td>数据传递</td>\n<td>容易</td>\n<td>通过url、cookie、localStorage等传递</td>\n</tr>\n<tr>\n<td>页面切换</td>\n<td>速度快，用户体验良好</td>\n<td>切换加载资源，速度慢，用户体验差</td>\n</tr>\n<tr>\n<td>维护成本</td>\n<td>相对容易</td>\n<td>相对复杂</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><code>SPA</code>的优缺点：<br> 优点：</p>\n<ul>\n<li>具有桌面应用的即时性、网站的可移植性和可访问性</li>\n<li>用户体验好、快，内容的改变不需要重新加载整个页面</li>\n<li>良好的前后端分离，分工更明确</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>不利于搜索引擎的抓取</li>\n<li>首次渲染速度相对较慢</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"双向绑定？\"><a href=\"#双向绑定？\" class=\"headerlink\" title=\"双向绑定？\"></a>双向绑定？</h3><ol>\n<li>概念：<br> Vue 中双向绑定是一个指令<code>v-model</code>，可以绑定一个响应式数据到视图，同时视图的变化能改变该值。<code>v-model</code>是语法糖，默认情况下相当于<code>:value</code>和<code>@input</code>，使用<code>v-model</code>可以减少大量繁琐的事件处理代码，提高开发效率。</li>\n<li>使用：<br> 通常在表单项上使用<code>v-model</code>，还可以在自定义组件上使用，表示某个值的输入和输出控制。</li>\n<li>原理：<br> <code>v-model</code>是一个指令，双向绑定实际上是Vue 的编译器完成的，通过输出包含<code>v-model</code>模版的组件渲染函数，实际上还是<code>value</code>属性的绑定及<code>input</code>事件监听，事件回调函数中会做相应变量的更新操作。</li>\n</ol>\n<h3 id=\"子组件是否可以直接改变父组件的数据？\"><a href=\"#子组件是否可以直接改变父组件的数据？\" class=\"headerlink\" title=\"子组件是否可以直接改变父组件的数据？\"></a>子组件是否可以直接改变父组件的数据？</h3><ol>\n<li>所有的<code>prop</code>都遵循着单项绑定原则，<code>props</code>因父组件的更新而变化，自然地将新状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。<br> 另外，每次父组件更新后，所有的子组件中的<code>props</code>都会被更新为最新值，这就意味着不应该子组件中去修改一个<code>prop</code>，若这么做了，Vue 会在控制台上抛出警告。</li>\n<li>实际开发过程中通常有两个场景导致要修改prop：<ul>\n<li><code>prop</code>被用于传入初始值，而子组件想在之后将其作为一个局部数据属性。这种情况下，最好是新定义一个局部数据属性，从<code>props</code>获取初始值即可。</li>\n<li>需要对传入的<code>prop</code>值做进一步转换。最好是基于该<code>prop</code>值定义一个计算属性。</li>\n</ul>\n</li>\n<li>实践中，如果确实要更改父组件属性，应<code>emit</code>一个事件让父组件变更。当对象或数组作为<code>props</code>被传入时，虽然子组件无法更改<code>props</code>绑定，但仍然<strong>可以</strong>更改对象或数组内部的值。这是因为JS的对象和数组是按引用传递，而对于 Vue 来说，禁止这样的改动虽然可能，但是有很大的性能损耗，比较得不偿失。</li>\n</ol>\n<h3 id=\"router-和-route-的区别？\"><a href=\"#router-和-route-的区别？\" class=\"headerlink\" title=\"router 和 route 的区别？\"></a>router 和 route 的区别？</h3><ol>\n<li><code>$router</code>是VueRouter的实例对象，是一个全局的路由对象，包含了所有路由的对象和属性。</li>\n<li><code>$route</code>是一个跳转的路由对象，可以认为是当前组件的路由管理，指当前激活的路由对象，包含当前url解析得到的数据，可以从对象里获取一些数据，如：name，path，params，query等。</li>\n</ol>\n<h3 id=\"vue-router-的路由传参方式？\"><a href=\"#vue-router-的路由传参方式？\" class=\"headerlink\" title=\"vue-router 的路由传参方式？\"></a>vue-router 的路由传参方式？</h3><ol>\n<li>声明式导航 <code>router-link</code>：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link :to=<span class=\"string\">&quot;&#x27;/users?userId:1&#x27;&quot;</span>&gt;&lt;/router-link&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123; name: &#x27;users&#x27;, params: &#123; userId: 1 &#125; &#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123; path: &#x27;/users&#x27;, query: &#123; userId: 1 &#125; &#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>编程式导航 router-push：</p>\n<ul>\n<li>通过<code>params</code>传参</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">userId</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 路由配置</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">User</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 跳转后获取路由参数</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">params</span>.<span class=\"property\">userId</span> <span class=\"comment\">// 为 1</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过<code>query</code>传参</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.<span class=\"variable\">$router</span>.<span class=\"title function_ invoke__\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">query</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">userId</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 路由配置</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    path: <span class=\"string\">&#x27;/users&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">    component: User</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 跳转后获取路由参数</span></span><br><span class=\"line\">this.<span class=\"variable\">$route</span>.query.userId</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>动态路由</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;/users/$&#123;userId&#125;&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 路由配置</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/users/:userId&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">User</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 跳转后获取路由参数</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">params</span>.<span class=\"property\">userId</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"Vue-Router中的常用路由模式和原理？\"><a href=\"#Vue-Router中的常用路由模式和原理？\" class=\"headerlink\" title=\"Vue Router中的常用路由模式和原理？\"></a>Vue Router中的常用路由模式和原理？</h3><ol>\n<li>hash 模式：</li>\n</ol>\n<ul>\n<li><code>location.hash</code>的值就是url中 <code>#</code> 后面的东西。它的特点在于：hash虽然出现url中，但不会被包含在HTTP请求中，对后端完全没有影响，因此改变hash不会重新加载页面。</li>\n<li>可以为hash的改变添加监听事件<code>window.addEventListener(&quot;hashchange&quot;, funcRef, false)</code>，每一次改变<code>hash (window.location.hash)</code>，都会在浏览器的访问历史中增加一个记录，利用hash的以上特点，就可以实现<strong>前端路由更新视图但不重新请求页面</strong>的功能了。<br> 特点：兼容性好但是不美观</li>\n</ul>\n<ol>\n<li>history 模式：<br> 利用 HTML5 History Interface 中新增的<code>pushState()</code>和<code>replaceState()</code>方法。<br> 这两个方法应用于浏览器的历史记录栈，在当前已有的<code>back</code>、<code>forward</code>、<code>go</code> 的基础上(使用<code>popState()</code>方法)，他们提供了对历史记录进行修改的功能。<br> 这两个方法有个共同点：当调用他们修改浏览器历史记录栈后，虽然当前url改变了，但浏览器不会刷新页面，这就为单页面应用前端路由“更新视图但不重新请求页面”提供了基础<br> 特点：虽然美观，但是刷新会出现 404 需要后端进行配置。</li>\n</ol>\n<h3 id=\"动态路由？\"><a href=\"#动态路由？\" class=\"headerlink\" title=\"动态路由？\"></a>动态路由？</h3><p>很多时候，我们需要将给定匹配模式的路由映射到同一个组件，这种情况就需要定义动态路由。例如，我们有一个 User组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用<code>动态路径参数（dynamic segment）</code>来达到这个效果：<code>&#123;path: &#39;/user/:id&#39;, compenent: User&#125;</code>，其中<code>:id</code>就是动态路径参数。</p>\n<h3 id=\"对Vuex的理解？\"><a href=\"#对Vuex的理解？\" class=\"headerlink\" title=\"对Vuex的理解？\"></a>对Vuex的理解？</h3><ol>\n<li>概念：<br> Vuex 是 Vue 专用的状态管理库，它以全局方式集中管理应用的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</li>\n<li>解决的问题：<br> Vuex 主要解决的问题是多组件之间状态共享。利用各种通信方式，虽然也能够实现状态共享，但是往往需要在多个组件之间保持状态的一致性，这种模式很容易出问题，也会使程序逻辑变得复杂。Vuex 通过把组件的共享状态抽取出来，以全局单例模式管理，这样任何组件都能用一致的方式获取和修改状态，响应式的数据也能够保证简洁的单向流动，使代码变得更具结构化且易于维护。</li>\n<li>什么时候用:<br> Vuex 并非是必须的，它能够管理状态，但同时也带来更多的概念和框架。如果我们不打算开发大型单页应用或应用里没有大量全局的状态需要维护，完全没有使用Vuex的必要，一个简单的 store 模式就够了。反之，Vuex将是自然而然的选择。</li>\n<li>用法：<br> Vuex 将全局状态放入<code>state</code>对象中，它本身是一颗状态树，组件中使用<code>store</code>实例的<code>state</code>访问这些状态；然后用配套的<code>mutation</code>方法修改这些状态，并且只能用<code>mutation</code>修改状态，在组件中调用<code>commit</code>方法提交<code>mutation</code>；如果应用中有异步操作或复杂逻辑组合，需要编写<code>action</code>，执行结束如果有状态修改仍需提交<code>mutation</code>，组件中通过<code>dispatch</code>派发<code>action</code>。最后是模块化，通过<code>modules</code>选项组织拆分出去的各个子模块，在访问状态（state）时需注意添加子模块的名称，如果子模块有设置<code>namespace</code>，那么提交<code>mutation</code>和派发<code>action</code>时还需要额外的命名空间前缀。</li>\n</ol>\n<h3 id=\"页面刷新后Vuex-状态丢失怎么解决？\"><a href=\"#页面刷新后Vuex-状态丢失怎么解决？\" class=\"headerlink\" title=\"页面刷新后Vuex 状态丢失怎么解决？\"></a>页面刷新后Vuex 状态丢失怎么解决？</h3><p>Vuex 只是在内存中保存状态，刷新后就会丢失，如果要持久化就需要保存起来。</p>\n<p><code>localStorage</code>就很合适，提交<code>mutation</code>的时候同时存入<code>localStorage</code>，在<code>store</code>中把值取出来作为<code>state</code>的初始值即可。</p>\n<p>也可以使用第三方插件，推荐使用<code>vuex-persist</code>插件，它是为 Vuex 持久化储存而生的一个插件，不需要你手动存取<code>storage</code>，而是直接将状态保存至 <code>cookie</code> 或者 <code>localStorage</code>中。</p>\n<h3 id=\"关于-Vue-SSR-的理解？\"><a href=\"#关于-Vue-SSR-的理解？\" class=\"headerlink\" title=\"关于 Vue SSR 的理解？\"></a>关于 Vue SSR 的理解？</h3><p><code>SSR</code>即<code>服务端渲染（Server Side Render）</code>，就是将 Vue 在客户端把标签渲染成 html 的工作放在服务端完成，然后再把 html 直接返回给客户端。</p>\n<ul>\n<li>优点：<br> 有着更好的 SEO，并且首屏加载速度更快。</li>\n<li>缺点：<br> 开发条件会受限制，服务器端渲染只支持 beforeCreate 和 created 两个钩子，当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于 Node.js 的运行环境。服务器会有更大的负载需求。</li>\n</ul>\n<h3 id=\"了解哪些-Vue-的性能优化方法？\"><a href=\"#了解哪些-Vue-的性能优化方法？\" class=\"headerlink\" title=\"了解哪些 Vue 的性能优化方法？\"></a>了解哪些 Vue 的性能优化方法？</h3><ul>\n<li>路由懒加载。有效拆分应用大小，访问时才异步加载。</li>\n<li><code>keep-alive</code>缓存页面。避免重复创建组件实例，且能保留缓存组件状态。</li>\n<li><code>v-for</code>遍历避免同时使用<code>v-if</code>。实际上在 Vue 3 中已经是一个错误用法了。</li>\n<li>长列表性能优化，可采用虚拟列表。</li>\n<li><code>v-once</code>。不再变化的数据使用<code>v-once</code>。</li>\n<li>事件销毁。组件销毁后把全局变量和定时器销毁。</li>\n<li>图片懒加载。</li>\n<li>第三方插件按需引入。</li>\n<li>子组件分割。较重的状态组件适合拆分。</li>\n<li>服务端渲染。</li>\n</ul>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"excerpt":"<p>vue复习</p>","more":"<h3 id=\"MVVM模型？\"><a href=\"#MVVM模型？\" class=\"headerlink\" title=\"MVVM模型？\"></a>MVVM模型？</h3><p>MVVM，是<code>Model-View-ViewModel</code>的简写，其本质是<code>MVC</code>模型的升级版。其中 <code>Model</code> 代表数据模型，<code>View</code> 代表看到的页面，<code>ViewModel</code>是<code>View</code>和<code>Model</code>之间的桥梁，数据会绑定到<code>ViewModel</code>层并自动将数据渲染到页面中，视图变化的时候会通知<code>ViewModel</code>层更新数据。以前是通过操作<code>DOM</code>来更新视图，现在是<code>数据驱动视图</code>。</p>\n<h3 id=\"Vue的生命周期\"><a href=\"#Vue的生命周期\" class=\"headerlink\" title=\"Vue的生命周期\"></a>Vue的生命周期</h3><p>Vue 的生命周期可以分为8个阶段：创建前后、挂载前后、更新前后、销毁前后，以及一些特殊场景的生命周期。Vue 3 中还新增了是3个用于调试和服务端渲染的场景。</p>\n<table>\n<thead>\n<tr>\n<th>Vue 2中的生命周期钩子</th>\n<th>Vue 3选项式API的生命周期选项</th>\n<th>Vue 3 组合API中生命周期钩子</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>beforeCreate</code></td>\n<td><code>beforeCreate</code></td>\n<td><code>setup()</code></td>\n<td>创建前，此时<code>data</code>和 <code>methods</code>的数据都还没有初始化</td>\n</tr>\n<tr>\n<td><code>created</code></td>\n<td><code>created</code></td>\n<td><code>setup()</code></td>\n<td>创建后，<code>data</code>中有值，尚未挂载，可以进行一些<code>Ajax</code>请求</td>\n</tr>\n<tr>\n<td><code>beforeMount</code></td>\n<td><code>beforeMount</code></td>\n<td><code>onBeforeMount</code></td>\n<td>挂载前，会找到虚拟<code>DOM</code>，编译成<code>Render</code></td>\n</tr>\n<tr>\n<td><code>mounted</code></td>\n<td><code>mounted</code></td>\n<td><code>onMounted</code></td>\n<td>挂载后，<code>DOM</code>已创建，可用于获取访问数据和<code>DOM</code>元素</td>\n</tr>\n<tr>\n<td><code>beforeUpdate</code></td>\n<td><code>beforeUpdate</code></td>\n<td><code>onBeforeUpdate</code></td>\n<td>更新前，可用于获取更新前各种状态</td>\n</tr>\n<tr>\n<td><code>updated</code></td>\n<td><code>updated</code></td>\n<td><code>onUpdated</code></td>\n<td>更新后，所有状态已是最新</td>\n</tr>\n<tr>\n<td><code>beforeDestroy</code></td>\n<td><code>beforeUnmount</code></td>\n<td><code>onBeforeUnmount</code></td>\n<td>销毁前，可用于一些定时器或订阅的取消</td>\n</tr>\n<tr>\n<td><code>destroyed</code></td>\n<td><code>unmounted</code></td>\n<td><code>onUnmounted</code></td>\n<td>销毁后，可用于一些定时器或订阅的取消</td>\n</tr>\n<tr>\n<td><code>activated</code></td>\n<td><code>activated</code></td>\n<td><code>onActivated</code></td>\n<td><code>keep-alive</code>缓存的组件激活时</td>\n</tr>\n<tr>\n<td><code>deactivated</code></td>\n<td><code>deactivated</code></td>\n<td><code>onDeactivated</code></td>\n<td><code>keep-alive</code>缓存的组件停用时</td>\n</tr>\n<tr>\n<td><code>errorCaptured</code></td>\n<td><code>errorCaptured</code></td>\n<td><code>onErrorCaptured</code></td>\n<td>捕获一个来自子孙组件的错误时调用</td>\n</tr>\n<tr>\n<td>—</td>\n<td><code>renderTracked</code></td>\n<td><code>onRenderTracked</code></td>\n<td>调试钩子，响应式依赖被收集时调用</td>\n</tr>\n<tr>\n<td>—</td>\n<td><code>renderTriggered</code></td>\n<td><code>onRenderTriggered</code></td>\n<td>调试钩子，响应式依赖被触发时调用</td>\n</tr>\n<tr>\n<td>—</td>\n<td><code>serverPrefetch</code></td>\n<td><code>onServerPrefetch</code></td>\n<td>组件实例在服务器上被渲染前调用</td>\n</tr>\n</tbody></table>\n<p><strong>关于Vue 3中的生命周期建议阅读官方文档!!!!</strong></p>\n<p><a href=\"https://link.juejin.cn/?target=https://cn.vuejs.org/api/composition-api-lifecycle.html\">组合式 API：生命周期钩子–官方文档</a><br><a href=\"https://link.juejin.cn/?target=https://cn.vuejs.org/api/options-lifecycle.html\">选项式 API：生命周期选项–官方文档</a></p>\n<p><strong>父子组件的生命周期：</strong></p>\n<ul>\n<li><code>加载渲染阶段</code>：父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</li>\n<li><code>更新阶段</code>：父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</li>\n<li><code>销毁阶段</code>：父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</li>\n</ul>\n<h3 id=\"Vue-nextTick\"><a href=\"#Vue-nextTick\" class=\"headerlink\" title=\"Vue.$nextTick\"></a>Vue.$nextTick</h3><p><strong>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</strong></p>\n<p><code>nextTick</code> 是 Vue 提供的一个全局 API，由于 Vue 的异步更新策略，导致我们对数据修改后不会直接体现在 DOM 上，此时如果想要立即获取更新后的 DOM 状态，就需要借助该方法。</p>\n<p>Vue 在更新 DOM 时是异步执行的。当数据发生变化，Vue 将开启一个异步更新队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 <code>watcher</code> 被多次触发，只会被推入队列一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。<code>nextTick</code>方法会在队列中加入一个回调函数，确保该函数在前面的 DOM 操作完成后才调用。</p>\n<p>使用场景：</p>\n<ol>\n<li>如果想要在修改数据后立刻得到更新后的<code>DOM</code>结构，可以使用<code>Vue.nextTick()</code></li>\n<li>在<code>created</code>生命周期中进行<code>DOM</code>操作</li>\n</ol>\n<h3 id=\"Vue-实例挂载过程中发生了什么？\"><a href=\"#Vue-实例挂载过程中发生了什么？\" class=\"headerlink\" title=\"Vue 实例挂载过程中发生了什么？\"></a>Vue 实例挂载过程中发生了什么？</h3><p>挂载过程指的是 <code>app.mount()</code>过程，这是一个初始化过程，整体上做了两件事情：<code>初始化</code>和<code>建立更新机制</code>。</p>\n<p>初始化会创建组件实例、初始化组件状态、创建各种响应式数据。</p>\n<p>建立更新机制这一步会立即执行一次组件的更新函数，这会首次执行组件渲染函数并执行<code>patch</code>将<code>vnode</code> 转换为 <code>dom</code>； 同时首次执行渲染函数会创建它内部响应式数据和组件更新函数之间的依赖关系，这使得以后数据发生变化时会执行对应的更新函数。</p>\n<h3 id=\"Vue-的模版编译原理\"><a href=\"#Vue-的模版编译原理\" class=\"headerlink\" title=\"Vue 的模版编译原理\"></a>Vue 的模版编译原理</h3><p>Vue 中有个独特的编译器模块，称为<code>compiler</code>，它的主要作用是将用户编写的<code>template</code>编译为js中可执行的<code>render</code>函数。<br> 在Vue 中，编译器会先对<code>template</code>进行解析，这一步称为<code>parse</code>，结束之后得到一个JS对象，称之为<code>抽象语法树AST</code>；然后是对<code>AST</code>进行深加工的转换过程，这一步称为<code>transform</code>，最后将前面得到的<code>AST</code>生成JS代码，也就是<code>render</code>函数。</p>\n<h3 id=\"Vue-的响应式原理\"><a href=\"#Vue-的响应式原理\" class=\"headerlink\" title=\"Vue 的响应式原理\"></a>Vue 的响应式原理</h3><ol>\n<li><p>Vue 2 中的数据响应式会根据数据类型做不同的处理。如果是对象，则通过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(obj,key,descriptor)</span><br></pre></td></tr></table></figure>\n\n<p>拦截对象属性访问，当数据被访问或改变时，感知并作出反应；如果是数组，则通过覆盖数组原型的方法，扩展它的7个变更方法（push、pop、shift、unshift、splice、sort、reverse），使这些方法可以额外的做更新通知，从而做出响应。</p>\n<p>缺点：</p>\n<ul>\n<li>初始化时的递归遍历会造成性能损失；</li>\n<li>通知更新过程需要维护大量 <code>dep</code> 实例和 <code>watcher</code> 实例，额外占用内存较多；</li>\n<li>新增或删除对象属性无法拦截，需要通过 <code>Vue.set</code> 及 <code>delete</code> 这样的 API 才能生效；</li>\n<li>对于<code>ES6</code>中新产生的<code>Map</code>、<code>Set</code>这些数据结构不支持。</li>\n</ul>\n</li>\n<li><p>Vue 3 中利用<code>ES6</code>的<code>Proxy</code>机制代理需要响应化的数据。可以同时支持对象和数组，动态属性增、删都可以拦截，新增数据结构均支持，对象嵌套属性运行时递归，用到时才代理，也不需要维护特别多的依赖关系，性能取得很大进步。</p>\n</li>\n</ol>\n<h3 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h3><ol>\n<li>概念：<br> 虚拟DOM，顾名思义就是虚拟的DOM对象，它本身就是一个JS对象，只不过是通过不同的属性去描述一个视图结构。</li>\n<li>虚拟DOM的好处：<br> (1) 性能提升<br> 直接操作DOM是有限制的，一个真实元素上有很多属性，如果直接对其进行操作，同时会对很多额外的属性内容进行了操作，这是没有必要的。如果将这些操作转移到JS对象上，就会简单很多。另外，操作DOM的代价是比较昂贵的，频繁的操作DOM容易引起页面的重绘和回流。如果通过抽象VNode进行中间处理，可以有效减少直接操作DOM次数，从而减少页面的重绘和回流。<br> (2) 方便跨平台实现<br> 同一VNode节点可以渲染成不同平台上对应的内容，比如：渲染在浏览器是DOM元素节点，渲染在Native（iOS、Android）变为对应的控件。Vue 3 中允许开发者基于VNode实现自定义渲染器（renderer），以便于针对不同平台进行渲染。</li>\n<li>结构：<br> 没有统一的标准，一般包括<code>tag</code>、<code>props</code>、<code>children</code>三项。<br> <code>tag</code>：必选。就是标签，也可以是组件，或者函数。<br> <code>props</code>：非必选。就是这个标签上的属性和方法。<br> <code>children</code>：非必选。就是这个标签的内容或者子节点。如果是文本节点就是字符串；如果有子节点就是数组。换句话说，如果判断<code>children</code>是字符串的话，就表示一定是文本节点，这个节点肯定没有子元素。</li>\n</ol>\n<h3 id=\"diff-算法\"><a href=\"#diff-算法\" class=\"headerlink\" title=\"diff 算法\"></a>diff 算法</h3><p>由于目前<code>Vue3</code>对于性能的优化做了很多的处理，所以其在更新时并不会对所有的节点都进行<code>diff</code>更新。目前会进行<code>diff</code>更新的有以下两种情况：</p>\n<ul>\n<li><code>v-for</code>容器节点</li>\n<li>自写的<code>render()</code>函数</li>\n</ul>\n<p>还有一种特殊情况会进行无<code>diff</code>的按序更新，这种更新是全替换模式，非常耗时：</p>\n<ul>\n<li>无<code>key</code>值的<code>v-for</code>语句，此时会打上<code>UNKEYED_FRAGMENT</code>标记</li>\n</ul>\n<p>注意，<code>Vue3</code>没有主动提供片段这个功能，仅会在出现以下写法时会生成片段：</p>\n<ul>\n<li>一个组件有多个根节点，会生成一个片段包裹，此时其为稳定片段(<code>STABLE_FRAGMENT</code>)</li>\n<li><code>v-for</code>语句，会生成一个片段包裹</li>\n<li><code>v-if</code>语句，有多个子节点或不为单个文本节点，会生成一个片段包裹(<code>STABLE_FRAGMENT</code>)</li>\n</ul>\n<blockquote>\n<p>本文上述论点都是基于浏览器环境，非<em>NodeJS</em>环境(<em>SSR</em>)。文中提供的代码进行了<strong>适当的简化</strong>。</p>\n</blockquote>\n<p>在我们使用<code>template</code>的情况下，更新基本上会通过<code>block</code>进行更新——即节点自更新</p>\n<h4 id=\"diff-更新\"><a href=\"#diff-更新\" class=\"headerlink\" title=\"diff 更新\"></a>diff 更新</h4><h5 id=\"VUE2\"><a href=\"#VUE2\" class=\"headerlink\" title=\"VUE2\"></a>VUE2</h5><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528150909234.png\" alt=\"image-20230528150909234\"></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528150936549.png\" alt=\"image-20230528150936549\"></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151019742.png\" alt=\"image-20230528151019742\"></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151119230.png\" alt=\"image-20230528151119230\"></p>\n<p>第一次对比后结果</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151309763.png\" alt=\"image-20230528151309763\"></p>\n<p>第二次</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151400771.png\" alt=\"image-20230528151400771\"></p>\n<p>第三次</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151428703.png\" alt=\"image-20230528151428703\"></p>\n<p>最后整理</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151504941.png\" alt=\"image-20230528151504941\"></p>\n<h5 id=\"VUE3\"><a href=\"#VUE3\" class=\"headerlink\" title=\"VUE3\"></a>VUE3</h5><p><code>diff</code>更新调用的内部的<code>patchKeyedChildren</code>方法，其大致流程分为三步：</p>\n<ol>\n<li>对比新旧节点头部相同指针的节点，相同则进行<code>diff</code>，不同则跳转下一步。</li>\n<li>对比新旧节点尾部指针指向节点，相同则进行<code>diff</code>，不同则跳转下一步。</li>\n<li>此时剩余新旧节点，可能存在乱序、已移除或新增的情况，进行特殊处理来更新。</li>\n</ol>\n<p>下面是函数最开始做的初始化，其中<code>c1/c2</code>分别代表新旧节点的子节点数组；<code>i</code>表示两个新旧节点指向同步的指针，它们是同步的；<code>e1/e2</code>分别代表指向两个子节点数组尾部的指针：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> l2 = c2.<span class=\"property\">length</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 变更前节点的尾下标</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> e1 = c1.<span class=\"property\">length</span> - <span class=\"number\">1</span> <span class=\"comment\">// prev ending index</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 变更后节点的尾下标</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> e2 = l2 - <span class=\"number\">1</span> <span class=\"comment\">// next ending index</span></span><br></pre></td></tr></table></figure>\n\n<p>其中<code>patch()</code>函数用于对节点进行更新，<code>isSameVNodeType()</code>函数用于判断两个节点是否具有相同的类型，此时其需要满足类型一样且<code>key</code>值相等。</p>\n<blockquote>\n<p>这里的类型指，例如组件，则其为组件的配置对象，元素则为元素的标记。</p>\n</blockquote>\n<h4 id=\"1-对比头部等位指针节点\"><a href=\"#1-对比头部等位指针节点\" class=\"headerlink\" title=\"1. 对比头部等位指针节点\"></a>1. 对比头部等位指针节点</h4><p>首先其会从头部指针开始，对比新旧节点是否相同：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码<span class=\"comment\">// 1. sync from start</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 从开始位置同步</span></span><br><span class=\"line\"><span class=\"comment\">// (a b) c</span></span><br><span class=\"line\"><span class=\"comment\">// (a b) d e</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n1 = c1[i]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n2 = c2[i]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 节点没有发生变更时，进行patch</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isSameVNodeType</span>(n1, n2)) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">patch</span>(n1, n2)</span><br><span class=\"line\">    <span class=\"comment\">// 不同节点时，立刻结束</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  i++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注释中给出了一个例子，即如果存在下图的新旧队列：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527224906472.png\" alt=\"image-20230527224906472\"></p>\n<p>由于此时两个指针的<code>VNode</code>相同，那么可以复用则直接进行<code>patch()</code>更新。之后指针向右移动一位，对比两个数组下标为 <code>1</code> 的位置：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225018797.png\" alt=\"image-20230527225018797\"></p>\n<p>同样的，节点相同，进行更新然后指针向后移动：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225137121.png\" alt=\"image-20230527225137121\"></p>\n<p>此时两个节点不一样了，那么本次头部对比到此结束。到此我们排除了头部位置可复用的节点，接下来那么肯定是排除尾部位置的可复用节点。</p>\n<h3 id=\"2-对比尾部等位指针节点\"><a href=\"#2-对比尾部等位指针节点\" class=\"headerlink\" title=\"2. 对比尾部等位指针节点\"></a>2. 对比尾部等位指针节点</h3><p>尾部的可复用节点检查方法与头部一样，唯一一点不同的是，它们有各自的指针分别指向子节点数组尾部。所以此时要使用两个指针<code>e1/e2</code>。</p>\n<p>以此时要使用两个指针<code>e1/e2</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码<span class=\"comment\">// 2. sync from end</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 从尾部位置开始查找</span></span><br><span class=\"line\"><span class=\"comment\">// a (b c)</span></span><br><span class=\"line\"><span class=\"comment\">// d e (b c)</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n1 = c1[e1]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n2 = c2[e2]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isSameVNodeType</span>(n1, n2)) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">patch</span>(n1, n2)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  e1--</span><br><span class=\"line\">  e2--</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还是按注释中的例子放图：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225256542.png\" alt=\"image-20230527225256542\"></p>\n<p>当前指针指向节点相同，节点可复用，直接更新，同时指针向前一起移动：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225417598.png\" alt=\"image-20230527225417598\"></p>\n<p>当前指针指向节点相同，节点可复用，直接更新，同时指针向前一起移动：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225513256.png\"></p>\n<p>此时，两个指针指向节点不再相同，停止此处的对比。</p>\n<hr>\n<p>经过前两步的处理，新旧队列已经进一步缩短了，此时剩下的节点就可能存在下面三种情况：</p>\n<ul>\n<li>有新增的节点</li>\n<li>有节点被删除了</li>\n<li>相同的节点，但是移动了位置</li>\n</ul>\n<p>在实际的场景中，那么就只能存在下面三种剩余情况：</p>\n<ul>\n<li>仅有新增的节点(此时一定<code>i &gt; e1</code>)</li>\n<li>仅进行了节点删除(此时一定<code>i &gt; e2</code>)</li>\n<li>乱序的，一定有移动的节点，其中可能包含新增或有删除的节点(此时一定有<code>i &lt;= e2</code>且<code>i &lt;= e1</code>)</li>\n</ul>\n<p><code>Vue</code>按处理的简易程度，<code>Vue</code>先对前两种情况进行了单独的处理，再对三种混有的情况进行了处理。</p>\n<h4 id=\"3-1-处理新增的节点的单独情况\"><a href=\"#3-1-处理新增的节点的单独情况\" class=\"headerlink\" title=\"3.1 处理新增的节点的单独情况\"></a>3.1 处理新增的节点的单独情况</h4><p>判断新增的节点是以旧队列为基准，那么此时的情况是这样的：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230120660.png\" alt=\"image-20230527230120660\"></p>\n<p>或新增的节点在首部：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230226562.png\" alt=\"image-20230527230226562\"></p>\n<p>此时会存在这样的情况<code>e1 &lt; i</code>且<code>e2 &gt;= i</code>，那么我们只需要更新<code>e1 =&gt; i</code>间的节点即可，于是有了这些代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3. common sequence + mount</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 有新增的节点时</span></span><br><span class=\"line\"><span class=\"comment\">// (a b)</span></span><br><span class=\"line\"><span class=\"comment\">// (a b) c</span></span><br><span class=\"line\"><span class=\"comment\">// i = 2, e1 = 1, e2 = 2</span></span><br><span class=\"line\"><span class=\"comment\">// (a b)</span></span><br><span class=\"line\"><span class=\"comment\">// c (a b)</span></span><br><span class=\"line\"><span class=\"comment\">// i = 0, e1 = -1, e2 = 0</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (i &lt;= e2) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &gt; e1) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//  当前节点后面的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextPos = e2 + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 我们要以这个节点为锚点在其之前添加元素，没有则添加到父节点最后</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> anchor = nextPos &lt; l2 ? c2[nextPos].<span class=\"property\">el</span> : parentAnchor</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= e2) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">patch</span>(<span class=\"literal\">null</span>, c2[i])</span><br><span class=\"line\">      i++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-处理删除节点的单独情况\"><a href=\"#3-2-处理删除节点的单独情况\" class=\"headerlink\" title=\"3.2 处理删除节点的单独情况\"></a>3.2 处理删除节点的单独情况</h4><p>如果没有存在仅有新增节点的情况，那么其会判断是否是仅进行删除节点的情况，此时可能出现下图的两种情况：</p>\n<p>删除节点在尾部：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230416959.png\"></p>\n<p>删除节点在尾部：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230458558.png\" alt=\"image-20230527230458558\"></p>\n<p>此时<code>i &gt; e2</code>，那么我们只需要将旧节点数组中<code>i =&gt; e1</code>之间的所有节点删除即可(下面的<code>else if</code>语句承接上面)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码<span class=\"comment\">// 4. common sequence + unmount</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 节点移除</span></span><br><span class=\"line\"><span class=\"comment\">// (a b) c</span></span><br><span class=\"line\"><span class=\"comment\">// (a b)</span></span><br><span class=\"line\"><span class=\"comment\">// i = 2, e1 = 2, e2 = 1</span></span><br><span class=\"line\"><span class=\"comment\">// a (b c)</span></span><br><span class=\"line\"><span class=\"comment\">// (b c)</span></span><br><span class=\"line\"><span class=\"comment\">// i = 0, e1 = 0, e2 = -1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &gt; e2) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt;= e1) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 移除原节点</span></span><br><span class=\"line\">    <span class=\"title function_\">unmount</span>(c1[i])</span><br><span class=\"line\">    i++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-乱序，但一定有移动的节点的情况\"><a href=\"#3-3-乱序，但一定有移动的节点的情况\" class=\"headerlink\" title=\"3.3 乱序，但一定有移动的节点的情况\"></a>3.3 乱序，但一定有移动的节点的情况</h4><p>最后一种情况就是比较复杂的情况，此时<code>Vue</code>做的处理是，先查看旧节点序列在变为新节点序列后，旧节点序列中是否有些节点还是按现在的顺序排列的(可以间断)，此时只对其余变更的节点进行操作，就能进行最小幅度的<code>DOM</code>操作了。</p>\n<blockquote>\n<p>此时相对于求旧节点的最长递增序列，这里你可以会想到为什么不求最小编辑距离，因为最小编辑距离的时间复杂度在大多数情况下比它高</p>\n</blockquote>\n<h5 id=\"3-3-1-建立新节点-key-与其下标的映射\"><a href=\"#3-3-1-建立新节点-key-与其下标的映射\" class=\"headerlink\" title=\"3.3.1 建立新节点 key 与其下标的映射\"></a>3.3.1 建立新节点 key 与其下标的映射</h5><p>首先，<code>Vue</code>先将新节点数组进行遍历，将它们有<code>key</code>值的节点与其在新节点数组中的下标建立映射，存储在<code>keyToNewIndexMap</code>中，方便在复用时查找：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s1 = i <span class=\"comment\">// prev starting index</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> s2 = i <span class=\"comment\">// next starting index</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5.1 build key:index map for newChildren</span></span><br><span class=\"line\"><span class=\"comment\">// 5.1 生成一个key map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> keyToNewIndexMap = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历新节点，乱序的部分，将这些具有key的节点存入map</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = s2; i &lt;= e2; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nextChild = c2[i]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nextChild.<span class=\"property\">key</span> != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    keyToNewIndexMap.<span class=\"title function_\">set</span>(nextChild.<span class=\"property\">key</span>, i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-3-2-移除新节点队列中不存在的旧节点并更新复用节点\"><a href=\"#3-3-2-移除新节点队列中不存在的旧节点并更新复用节点\" class=\"headerlink\" title=\"3.3.2 移除新节点队列中不存在的旧节点并更新复用节点\"></a>3.3.2 移除新节点队列中不存在的旧节点并更新复用节点</h5><p>之后，遍历旧节点数组，通过刚刚建立的<code>Map</code>，如果当前旧节点在新节点数组中已经不存在了，那么说明要移除了。</p>\n<p>整个过程比较复杂，因为要预先做处理，为后续是否需要移动节点做准备：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 5.2 loop through old children left to be patched and try to patch</span></span><br><span class=\"line\"><span class=\"comment\">// matching nodes &amp; remove nodes that are no longer present</span></span><br><span class=\"line\"><span class=\"comment\">// 5.2 遍历旧节点，patch匹配的节点，移除不再在节点</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> j</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前处理过的节点数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> patched = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 需要patch的节点数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> toBePatched = e2 - s2 + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否需要移动节点</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> moved = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// used to track whether any node has moved</span></span><br><span class=\"line\"><span class=\"comment\">// 记录节点是否已经移动</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> maxNewIndexSoFar = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// works as Map&lt;newIndex, oldIndex&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// Note that oldIndex is offset by +1</span></span><br><span class=\"line\"><span class=\"comment\">// and oldIndex = 0 is a special value indicating the new node has</span></span><br><span class=\"line\"><span class=\"comment\">// no corresponding old node.</span></span><br><span class=\"line\"><span class=\"comment\">// 注意旧下标的值都会+1，因为0表示没有对应的旧节点</span></span><br><span class=\"line\"><span class=\"comment\">// used for determining longest stable subsequence</span></span><br><span class=\"line\"><span class=\"comment\">// 新下标与旧下标的map</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的新下标以s2位置为0下标，而旧下标为旧下标值 +１</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newIndexToOldIndexMap = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(toBePatched)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化值为0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; toBePatched; i++) newIndexToOldIndexMap[i] = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我说明下三个变量，首先是<code>newIndexToOldIndexMap</code>，其用来记录节点的新坐标到旧坐标的映射(当然是节点可复用的情况下)。为了后续计算最长递增子序列，所以其新坐标以<code>s2</code>为起点，长度为当前需要处理的节点总数，并且其存入的旧节点下标要在原值的基础上<code>+ 1</code>(因为<code>0</code>表示当前节点没有对应的旧节点)。举个例子，有如下图一样的更新序列：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230956800.png\" alt=\"image-20230527230956800\"></p>\n<p>那么节点<code>e</code>存入<code>newIndexToOldIndexMap</code>后为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 展示，不是赋值语句</span></span><br><span class=\"line\">newIndexToOldIndexMap = [<span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<p>其余全部节点存入后为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 展示，不是赋值语句</span></span><br><span class=\"line\">newIndexToOldIndexMap = [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<p><code>moved</code>变量则是表示是否有节点需要移动，其判定要基于<code>maxNewIndexSoFar</code>的值。</p>\n<p><code>maxNewIndexSoFar</code>表示当前可复用节点距离<code>s2</code>(即第一个乱序节点的最远距离)。如果有对应可以复用的节点，那么在每次迭代处理节点时，如果当前节点所处位置距离<code>s2</code>距离超过<code>maxNewIndexSoFar</code>，那么<code>maxNewIndexSoFar</code>会更新为当前节点在新队列中的下标；当其小于<code>maxNewIndexSoFar</code>时，就会标记<code>moved = true</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，</span></span><br><span class=\"line\"><span class=\"comment\">// 那么每次都会进入该if语句</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前节点未移动，更新下标</span></span><br><span class=\"line\">  maxNewIndexSoFar = newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果进入该else语句说明有节点之前节点交叉了</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  moved = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>想象一下，如果节点在新旧序列中，都是按照相同的顺序递增，那么<code>maxNewIndexSoFar</code>也会一直递增，即每次迭代<code>newIndex &gt;= maxNewIndexSoFar</code>，那么就不需要移动节点；但是如果某次迭代，<code>newIndex &lt; maxNewIndexSoFar</code>，那么说明当前节点由之前靠后的位置移动了现在靠前的位置。</p>\n<p>就拿刚刚乱序的图举例，第一次迭代<code>c</code>节点的<code>newIndex = 4</code>，则<code>maxNewIndexSoFar = 4</code>；第二次迭代<code>d</code>节点时，其<code>newIndex = 3</code>，此时<code>newIndex &lt; maxNewIndexSoFar</code>，说明<code>c/d</code>节点之间的位置在新旧发生了交叉，所以我们至少需要移动它们其中一个节点。</p>\n<p>理解了这个道理，现在我们可以正式看看这段代码了。由于要卸载节点，那么本次遍历要以<code>s1 &lt;-&gt; e1</code>之间的节点为基准进行遍历，整体遍历代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历旧节点</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = s1; i &lt;= e1; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前下标的旧节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> prevChild = c1[i]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 当前patch的节点数超过新节点中要patch的总数时，执行unmount操作</span></span><br><span class=\"line\">  <span class=\"comment\">// 直接进行卸载操作，因为多余的节点不需要了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (patched &gt;= toBePatched) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// all new children have been patched so this can only be a removal</span></span><br><span class=\"line\">    <span class=\"title function_\">unmount</span>(prevChild)</span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 尝试寻找是否有对应的新节点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 旧节点具有key时，获取相同key值节点所处的下标</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (prevChild.<span class=\"property\">key</span> != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    newIndex = keyToNewIndexMap.<span class=\"title function_\">get</span>(prevChild.<span class=\"property\">key</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 没有key时则找相同类型的节点是否存在</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// key-less node, try to locate a key-less node of the same type</span></span><br><span class=\"line\">    <span class=\"comment\">// 当前查找范围为新节点中需要patch的节点之间</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = s2; j &lt;= e2; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        <span class=\"comment\">// 0表示对应下标下当前还未有节点(注意当前是以s2为0下标基准)</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里确认当前新下标位置未有对应的旧下标，防止是已在map中的节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        newIndexToOldIndexMap[j - s2] === <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"title function_\">isSameVNodeType</span>(prevChild, c2[j])</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        newIndex = j</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 没找到对应节点时说明该节点已经不存在了，直接进行unmount</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newIndex === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">unmount</span>(prevChild)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找到时进行位置移动操作，并patch</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将旧节点位置下标+1后存入，新节点以s2为起点，即0坐标</span></span><br><span class=\"line\">    newIndexToOldIndexMap[newIndex - s2] = i + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，</span></span><br><span class=\"line\">    <span class=\"comment\">// 那么每次都会进入该if语句</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 当前节点未移动，更新下标</span></span><br><span class=\"line\">      maxNewIndexSoFar = newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果进入该else语句说明有节点之前节点交叉了</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      moved = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// patch该节点</span></span><br><span class=\"line\">    <span class=\"title function_\">patch</span>(prevChild, c2[newIndex])</span><br><span class=\"line\">    patched++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先当当前可复用的节点复用时，会使<code>patched</code>值<code>+1</code>，当复用的节点超过乱序的新节点长度时，那么其余的节点肯定是要卸载的节点(因为新节点序列都处理完毕了)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (patched &gt;= toBePatched) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// all new children have been patched so this can only be a removal</span></span><br><span class=\"line\">    <span class=\"title function_\">unmount</span>(prevChild)</span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后，<code>Vue</code>尝试寻找一下当前旧节点是否被复用，即它被移动到了新节点序列的其他位置。首先如果当前节点有<code>key</code>值，那么其会尝试直接从刚刚的<code>keyToNewIndexMap</code>中查找；如果没有找到，那么其会遍历当前所有的新节点序列，依次对比是否与当前节点相同，在复合同类型节点时对其进行复用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 尝试寻找是否有对应的新节点</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newIndex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 旧节点具有 key 时，获取相同 key 值节点所处的下标</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (prevChild.<span class=\"property\">key</span> != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">  newIndex = keyToNewIndexMap.<span class=\"title function_\">get</span>(prevChild.<span class=\"property\">key</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 没有key时则找相同类型的节点是否存在</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// key-less node, try to locate a key-less node of the same type</span></span><br><span class=\"line\">  <span class=\"comment\">// 当前查找范围为新节点中需要 patch 的节点之间</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (j = s2; j &lt;= e2; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"comment\">// 0 表示对应下标下当前还未有节点(注意当前是以 s2 为 0 下标基准)</span></span><br><span class=\"line\">      <span class=\"comment\">// 这里确认当前新下标位置未有对应的旧下标，防止是已在 map 中的节点</span></span><br><span class=\"line\">      newIndexToOldIndexMap[j - s2] === <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">      <span class=\"title function_\">isSameVNodeType</span>(prevChild, c2[j])</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      newIndex = j</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在直接通过类型查找复用节点时，其存在一个<code>newIndexToOldIndexMap[j - s2] === 0</code>条件，它表示当前新节点下标未有对应的旧节点(<code>0</code>表示没有，在之后的代码中，如果查找到对应的<code>newIndex</code>，其会存入<code>newIndexToOldIndexMap</code>中)。这样可以防止新旧节点被重复复用或已被处理再次被处理。</p>\n<p>到此，对于旧节点的<code>newIndex</code>是否被查找到就会出现两种情况了：</p>\n<ol>\n<li>没有，说明当前节点已删除了，移除该<code>DOM</code>节点</li>\n<li>有，复用，<strong>更新节点属性</strong></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 没找到对应节点时说明该节点已经不存在了，直接进行unmount</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (newIndex === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">unmount</span>(prevChild)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 找到时进行位置移动操作，并patch</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将旧节点位置下标+1后存入，新节点以s2为起点，即0坐标</span></span><br><span class=\"line\">  newIndexToOldIndexMap[newIndex - s2] = i + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，</span></span><br><span class=\"line\">  <span class=\"comment\">// 那么每次都会进入该if语句</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前节点未移动，更新下标</span></span><br><span class=\"line\">    maxNewIndexSoFar = newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果进入该else语句说明有节点之前节点交叉了</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    moved = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// patch该节点</span></span><br><span class=\"line\">  <span class=\"title function_\">patch</span>(prevChild, c2[newIndex])</span><br><span class=\"line\">  patched++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在复用的情况下，有我们刚刚提到的<a href=\"#332-%E7%A7%BB%E9%99%A4%E6%96%B0%E8%8A%82%E7%82%B9%E9%98%9F%E5%88%97%E4%B8%AD%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E6%97%A7%E8%8A%82%E7%82%B9%E5%B9%B6%E6%9B%B4%E6%96%B0%E5%A4%8D%E7%94%A8%E8%8A%82%E7%82%B9\">计算节点交叉(是否需要移动)</a>的场景：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，</span></span><br><span class=\"line\"><span class=\"comment\">// 那么每次都会进入该if语句</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前节点未移动，更新下标</span></span><br><span class=\"line\">  maxNewIndexSoFar = newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果进入该else语句说明有节点之前节点交叉了</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  moved = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里就不赘述了。</p>\n<blockquote>\n<p>注意，这里对复用的节点进行了<code>patch()</code>更新，那么后面就只用进行移动即可，而不需要更新了。</p>\n</blockquote>\n<h4 id=\"3-3-3-处理新增节点与移动的节点\"><a href=\"#3-3-3-处理新增节点与移动的节点\" class=\"headerlink\" title=\"3.3.3 处理新增节点与移动的节点\"></a>3.3.3 处理新增节点与移动的节点</h4><p>到此为止，就只有新增节点与移动节点的情况没有处理了。</p>\n<p>首先其会需要移动节点时(<code>moved = true</code>)根据刚刚创建的<code>newIndexToOldIndexMap</code>生成一个最长递增的新节点序列<code>increasingNewIndexSequence</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码<span class=\"comment\">// 5.3 move and mount</span></span><br><span class=\"line\"><span class=\"comment\">// 5.3 移动与mount</span></span><br><span class=\"line\"><span class=\"comment\">// generate longest stable subsequence only when nodes have moved</span></span><br><span class=\"line\"><span class=\"comment\">// 有节点需要移动，生成长期稳定的子序列，仅对移动过的节点处理</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> increasingNewIndexSequence = moved</span><br><span class=\"line\">  ? <span class=\"comment\">// 获取最长递增子序列的下标数组</span></span><br><span class=\"line\">    <span class=\"title function_\">getSequence</span>(newIndexToOldIndexMap)</span><br><span class=\"line\">  : <span class=\"variable constant_\">EMPTY_ARR</span></span><br></pre></td></tr></table></figure>\n\n<p>那么这个序列的作用是什么？它就是用来<strong>辅助移动节点</strong>，而且是在最小次数下移动节点。由于<code>newIndexToOldIndexMap</code>是根据新旧节点之间的映射创建的，其<strong>下标天然代表乱序的新节点数组的顺序</strong>，而且其对应下标中存储的元素也代表该新节点复用的旧节点的下标，那么这里我们就可以看到两个序列：</p>\n<ol>\n<li>新节点下标组成的序列(<strong>递增</strong>的，因为我们以它为基准创建的数组)</li>\n<li><code>newIndexToOldIndexMap</code>中旧节点下标组成的序列，可能递增也可能乱序</li>\n</ol>\n<blockquote>\n<p>关于如何求<a href=\"https://link.juejin.cn/?target=https://en.wikipedia.org/wiki/Longest_increasing_subsequence\">最长递增子序列</a>，请单独自行学习，这里就不说明了。</p>\n</blockquote>\n<p>此时倘若旧节点下标组成的序列<strong>也</strong>呈现递增趋势，那么我们便可以操作那些非递增的节点来达到变更为新节点序列的目的。并且这个递增的序列越长，那么我们要操作(移动)的节点就越少。比如下图的情况：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124733993.png\" alt=\"image-20230528124733993\"></p>\n<p>从图中观察，我们可以清楚的看到<code>c/d</code>两个节点在前后都保持了递增的关系，那么此时我们只需要移动<code>e</code>节点与创建<code>h</code>节点即可。</p>\n<p>此时其<code>newIndexToOldIndexMap</code>为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码newIndexToOldIndexMap = [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 该数组返回的是对应的元素在newIndexToOldIndexMap的下标</span></span><br><span class=\"line\"><span class=\"comment\">// 而并非实际的旧节点下标</span></span><br><span class=\"line\">increasingNewIndexSequence = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>2、3</code>节点与新节点的下标的<strong>递增关系保持一致</strong>，其最长递增子序列(<code>increasingNewIndexSequence</code>)为<code>[1, 2]</code>，此时我们只需要操作<code>4/0</code>两个节点即可。</p>\n<blockquote>\n<p><code>increasingNewIndexSequence</code>返回的结果为对应的元素在 <code>newIndexToOldIndexMap</code>的下标而并非实际的旧节点下标</p>\n</blockquote>\n<p>明白了这个现在我们来看其具体处理的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取递增序列的尾坐标</span></span><br><span class=\"line\">j = increasingNewIndexSequence.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// looping backwards so that we can use last patched node as anchor</span></span><br><span class=\"line\"><span class=\"comment\">// 向后循环，这样我们可以用上一个patch过了的节点做锚点</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = toBePatched - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前要处理的新节点下标及其节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> nextIndex = s2 + i</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nextChild = c2[nextIndex]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取其后一个节点，如果没有则获取其父节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> anchor = nextIndex + <span class=\"number\">1</span> &lt; l2 ? c2[nextIndex + <span class=\"number\">1</span>].<span class=\"property\">el</span> : parentAnchor</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果当前新旧节点Map中未找到当前位置新节点的旧节点信息，</span></span><br><span class=\"line\">  <span class=\"comment\">// 说明是新增节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newIndexToOldIndexMap[i] === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// mount new</span></span><br><span class=\"line\">    <span class=\"title function_\">patch</span>(<span class=\"literal\">null</span>, nextChild)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// moved说明有节点需要移动，通过塑造一个递增序列，处于递增序列的节点就可以</span></span><br><span class=\"line\">    <span class=\"comment\">// 不进行移动，只移动其余节点，这样就减少了节点的移动</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (moved) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果存在以下情况则移动：</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 没有稳定的子序列</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 当前节点不在这个稳定的子序列中</span></span><br><span class=\"line\">    <span class=\"comment\">// move if:</span></span><br><span class=\"line\">    <span class=\"comment\">// There is no stable subsequence (e.g. a reverse)</span></span><br><span class=\"line\">    <span class=\"comment\">// OR current node is not among the stable sequence</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j &lt; <span class=\"number\">0</span> || i !== increasingNewIndexSequence[j]) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">move</span>(nextChild, container, anchor)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      j--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>本次遍历以新节点的乱序序列(<code>s2 &lt;-&gt; e2</code>)为基准，逆向进行遍历。逆向的原因是因为其在新增节点或更新节点时，可以以后面已经操作过的节点为锚点进行更新(想象一下<code>Node.insertBefore()/Node.appendChild()</code>的参数)。</p>\n<p>每次遍历会出现三种情况：</p>\n<ul>\n<li>当前节点未有对应的旧节点下标，则说明是新增节点</li>\n<li>该节点需要移动，进行移动</li>\n<li>该节点与旧节点序列都保持递增顺序，直接跳过即可(实际反应在代码里面就是没做任何处理)</li>\n</ul>\n<blockquote>\n<p>情况<code>2</code>与<code>3</code>在完整的迭代中是互斥的，两者不会同时出现在整个迭代流程中。</p>\n</blockquote>\n<p>第一种情况，比较简单，这里就不解释了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果当前新旧节点Map中未找到当前位置新节点的旧节点信息，</span></span><br><span class=\"line\"><span class=\"comment\">// 说明是新增节点</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (newIndexToOldIndexMap[i] === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// mount new</span></span><br><span class=\"line\">  <span class=\"title function_\">patch</span>(<span class=\"literal\">null</span>, nextChild</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二种情况要判定<code>moved = true</code>，它的原理<a href=\"#332-%E7%A7%BB%E9%99%A4%E6%96%B0%E8%8A%82%E7%82%B9%E9%98%9F%E5%88%97%E4%B8%AD%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E6%97%A7%E8%8A%82%E7%82%B9%E5%B9%B6%E6%9B%B4%E6%96%B0%E5%A4%8D%E7%94%A8%E8%8A%82%E7%82%B9\">之前我们已经解释过了</a>。这里我们要关注的是它的函数体。根据我们刚刚对递增子序列的理解，那么其应该会在以下情况移动或不移动节点：</p>\n<ul>\n<li>当前节点处于最长递增子序列中 —— 跳过</li>\n<li>当前节点不存在最长递增子序列中 —— 移动<ul>\n<li>递增序列已经没有需要跳过的节点了但任存在节点需要更新(实际和不存在的情况一样)</li>\n<li>当前节点不存在最长递增子序列</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果存在以下情况则移动：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 没有稳定的子序列(实际和情况2一致，反序时会返回任意一个节点作为最长序列)</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 当前节点不在这个稳定的子序列中</span></span><br><span class=\"line\"><span class=\"comment\">// move if:</span></span><br><span class=\"line\"><span class=\"comment\">// There is no stable subsequence (e.g. a reverse)</span></span><br><span class=\"line\"><span class=\"comment\">// OR current node is not among the stable sequence</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (j &lt; <span class=\"number\">0</span> || i !== increasingNewIndexSequence[j]) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将当前节点移动到锚点节点前或容器节点最后(没有锚点时)</span></span><br><span class=\"line\">  <span class=\"title function_\">move</span>(nextChild, container, anchor)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  j--</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124834143.png\" alt=\"image-20230528124834143\"></p>\n<p>在第二次更新中，发现<code>d</code>节点存在于单调增序列中，所以本次更新可以跳过：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124910205.png\" alt=\"image-20230528124910205\"></p>\n<p>同理<code>c</code>节点也一样，这里就不放图了，处理完<code>c</code>节点后此时为这样</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124931580.png\" alt=\"image-20230528124931580\"></p>\n<p>此时<code>e</code>节点可复用，则将其移动到新<code>c</code>节点前即可。</p>\n<p>到此为止，上图的<code>diff</code>就结束了。</p>\n<p>对于第三种情况，由于复用的节点在前后都保持了递增的关系，所以此时我们不需要再重复对节点进行处理，所以遇到复用的节点时直接跳过即可：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528125006064.png\" alt=\"image-20230528125006064\"></p>\n<p>到此为止全部节点的更新就已经完毕了。</p>\n<h3 id=\"为什么组件中的-data-是一个函数？\"><a href=\"#为什么组件中的-data-是一个函数？\" class=\"headerlink\" title=\"为什么组件中的 data 是一个函数？\"></a>为什么组件中的 data 是一个函数？</h3><p>在 new Vue() 中，可以是函数也可以是对象，因为根实例只有一个，不会产生数据污染。</p>\n<p>在组件中，data 必须为函数，目的是为了防止多个组件实例对象之间共用一个 data，产生数据污染；而采用函数的形式，initData 时会将其作为工厂函数都会返回全新的 data 对象。</p>\n<h3 id=\"Vue-中组件间的通信方式？\"><a href=\"#Vue-中组件间的通信方式？\" class=\"headerlink\" title=\"Vue 中组件间的通信方式？\"></a>Vue 中组件间的通信方式？</h3><ol>\n<li><p>父子组件通信：</p>\n<p>父向子传递数据是通过<code>props</code>，子向父是通过<code>$emit</code>触发事件；通过父链/子链也可以通信（<code>$parent</code>/<code>$children</code>）；<code>ref</code>也可以访问组件实例；<code>provide</code>/<code>inject</code>；<code>$attrs</code>/<code>$listeners</code>。</p>\n</li>\n<li><p>兄弟组件通信：</p>\n<p>全局事件总线<code>EventBus</code>、<code>Vuex</code>。</p>\n</li>\n<li><p>跨层级组件通信：</p>\n<p>全局事件总线<code>EventBus</code>、<code>Vuex</code>、<code>provide</code>/<code>inject</code>。</p>\n</li>\n</ol>\n<h3 id=\"v-show-和-v-if-的区别？\"><a href=\"#v-show-和-v-if-的区别？\" class=\"headerlink\" title=\"v-show 和 v-if 的区别？\"></a>v-show 和 v-if 的区别？</h3><ol>\n<li>控制手段不同。<code>v-show</code>是通过给元素添加 css 属性<code>display: none</code>，但元素仍然存在；而<code>v-if</code>控制元素显示或隐藏是将元素整个添加或删除。</li>\n<li>编译过程不同。<code>v-if</code>切换有一个局部编译/卸载的过程，切换过程中合适的销毁和重建内部的事件监听和子组件；<code>v-show</code>只是简单的基于 css 切换。</li>\n<li>编译条件不同。<code>v-if</code>是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建，渲染条件为假时，并不做操作，直到为真才渲染。</li>\n<li>触发生命周期不同。<code>v-show</code>由 false 变为 true 的时候不会触发组件的生命周期；<code>v-if</code>由 false 变为 true 的时候，触发组件的<code>beforeCreate</code>、<code>created</code>、<code>beforeMount</code>、<code>mounted</code>钩子，由 true 变为 false 的时候触发组件的<code>beforeDestory</code>、<code>destoryed</code>钩子。</li>\n<li>性能消耗不同。<code>v-if</code>有更高的切换消耗；<code>v-show</code>有更高的初始渲染消耗。</li>\n</ol>\n<p>使用场景：<br> 如果需要非常频繁地切换，则使用<code>v-show</code>较好，如：手风琴菜单，tab 页签等； 如果在运行时条件很少改变，则使用<code>v-if</code>较好，如：用户登录之后，根据权限不同来显示不同的内容。</p>\n<h3 id=\"computed-和-watch-的区别？\"><a href=\"#computed-和-watch-的区别？\" class=\"headerlink\" title=\"computed 和 watch 的区别？\"></a>computed 和 watch 的区别？</h3><ul>\n<li><code>computed</code>计算属性，依赖其它属性计算值，内部任一依赖项的变化都会重新执行该函数，计算属性有缓存，多次重复使用计算属性时会从缓存中获取返回值，计算属性必须要有<code>return</code>关键词。</li>\n<li><code>watch</code>侦听到某一数据的变化从而触发函数。当数据为对象类型时，对象中的属性值变化时需要使用深度侦听<code>deep</code>属性，也可在页面第一次加载时使用立即侦听<code>immdiate</code>属性。</li>\n</ul>\n<p>运用场景：<br> 计算属性一般用在模板渲染中，某个值是依赖其它响应对象甚至是计算属性而来；而侦听属性适用于观测某个值的变化去完成一段复杂的业务逻辑。</p>\n<h3 id=\"v-if-和-v-for-为什么不建议放在一起使用？\"><a href=\"#v-if-和-v-for-为什么不建议放在一起使用？\" class=\"headerlink\" title=\"v-if 和 v-for 为什么不建议放在一起使用？\"></a>v-if 和 v-for 为什么不建议放在一起使用？</h3><p>Vue 2 中，<code>v-for</code>的优先级比<code>v-if</code>高，这意味着<code>v-if</code>将分别重复运行于每一个<code>v-for</code>循环中。如果要遍历的数组很大，而真正要展示的数据很少时，将造成很大的性能浪费。</p>\n<p>Vue 3 中，则完全相反，<code>v-if</code>的优先级高于<code>v-for</code>，所以<code>v-if</code>执行时，它调用的变量还不存在，会导致异常。</p>\n<p>通常有两种情况导致要这样做：</p>\n<ul>\n<li>为了过滤列表中的项目，比如：<code>v-for = &quot;user in users&quot; v-if = &quot;user.active&quot;</code>。这种情况，可以定义一个计算属性，让其返回过滤后的列表即可。</li>\n<li>为了避免渲染本该被隐藏的列表，比如<code>v-for = &quot;user in users&quot;  v-if = &quot;showUsersFlag&quot;</code>。这种情况，可以将<code>v-if</code>移至容器元素上或在外面包一层<code>template</code>即可。</li>\n</ul>\n<h3 id=\"Vue-2中的set方法？\"><a href=\"#Vue-2中的set方法？\" class=\"headerlink\" title=\"Vue 2中的set方法？\"></a>Vue 2中的set方法？</h3><p><a href=\"https://link.juejin.cn/?target=https://v2.cn.vuejs.org/v2/api/%23Vue-set\"><code>set</code>是Vue 2中的一个全局API</a>。可手动添加响应式数据，解决数据变化视图未更新问题。当在项目中直接设置数组的某一项的值，或者直接设置对象的某个属性值，会发现页面并没有更新。这是因为<code>Object.defineProperty()</code>的限制，监听不到数据变化，可通过<code>this.$set(数组或对象，数组下标或对象的属性名，更新后的值)</code>解决。</p>\n<h3 id=\"keep-alive-是什么？\"><a href=\"#keep-alive-是什么？\" class=\"headerlink\" title=\"keep-alive 是什么？\"></a>keep-alive 是什么？</h3><ul>\n<li>作用：实现组件缓存，保持组件的状态，避免反复渲染导致的性能问题。</li>\n<li>工作原理：Vue.js 内部将 DOM 节点，抽象成了一个个的 VNode 节点，<code>keep-alive</code>组件的缓存也是基于 VNode 节点的。它将满足条件的组件在 cache 对象中缓存起来，重新渲染的时候再将 VNode 节点从 cache 对象中取出并渲染。</li>\n<li>可以设置以下属性：<br> ① <code>include</code>：字符串或正则，只有名称匹配的组件会被缓存。<br> ② <code>exclude</code>：字符串或正则，任何名称匹配的组件都不会被缓存。<br> ③ <code>max</code>：数字，最多可以缓存多少组件实例。<br> 匹配首先检查组件的<code>name</code>选项，如果<code>name</code>选项不可用，则匹配它的局部注册名称（父组件 components选项的键值），匿名组件不能被匹配。</li>\n</ul>\n<p>如果同时使用了<code>include</code>、<code>exclude</code>，那么<code>exclude</code>的优先级高于<code>include</code>。</p>\n<p>设置了<code>keep-alive</code>缓存的组件，会多出两个生命周期钩子：<code>activated</code>、<code>deactivated</code>。<br> 首次进入组件时：beforeCreate –&gt; created –&gt; beforeMount –&gt; mounted –&gt; activated –&gt; beforeUpdate –&gt; updated –&gt; deactivated<br> 再次进入组件时：activated –&gt; beforeUpdate –&gt; updated –&gt; deactivated</p>\n<h3 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h3><p><code>mixin</code>（混入）， 它提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。</p>\n<p>使用场景： 不同组件中经常会用到一些相同或相似的代码，这些代码的功能相对独立。可以通过mixin 将相同或相似的代码提出来。</p>\n<p>缺点：</p>\n<ol>\n<li>变量来源不明确</li>\n<li>多 mixin 可能会造成命名冲突（解决方式：Vue 3的组合API）</li>\n<li>mixin 和组件出现多对多的关系，使项目复杂度变高。</li>\n</ol>\n<h3 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h3><p><code>slot</code>插槽，一般在组件内部使用，封装组件时，在组件内部不确定该位置是以何种形式的元素展示时，可以通过<code>slot</code>占据这个位置，该位置的元素需要父组件以内容形式传递过来。<code>slot</code>分为：</p>\n<ul>\n<li><code>默认插槽</code>：子组件用<code>&lt;slot&gt;</code>标签来确定渲染的位置，标签里面可以放<code>DOM</code>结构作为后备内容，当父组件在使用的时候，可以直接在子组件的标签内写入内容，该部分内容将插入子组件的<code>&lt;slot&gt;</code>标签位置。如果父组件使用的时候没有往插槽传入内容，后备内容就会显示在页面。</li>\n<li><code>具名插槽</code>：子组件用<code>name</code>属性来表示插槽的名字，没有指定<code>name</code>的插槽，会有隐含的名称叫做 <code>default</code>。父组件中在使用时在默认插槽的基础上通过<code>v-slot</code>指令指定元素需要放在哪个插槽中，<code>v-slot</code>值为子组件插槽<code>name</code>属性值。使用<code>v-slot</code>指令指定元素放在哪个插槽中，必须配合<code>&lt;template&gt;</code>元素，且一个<code>&lt;template&gt;</code>元素只能对应一个预留的插槽，即不能多个<code>&lt;template&gt;</code> 元素都使用<code>v-slot</code>指令指定相同的插槽。<code>v-slot</code>的简写是<code>#</code>，例如<code>v-slot:header</code>可以简写为<code>#header</code>。</li>\n<li>作用域插槽：子组件在<slot>标签上绑定props数据，以将子组件数据传给父组件使用。父组件获取插槽绑定 props 数据的方法：<ol>\n<li>scope=”接收的变量名”：<code>&lt;template scope=&quot;接收的变量名&quot;&gt;</code></li>\n<li>slot-scope=”接收的变量名”：<code>&lt;template slot-scope=&quot;接收的变量名&quot;&gt;</code></li>\n<li>v-slot:插槽名=”接收的变量名”：<code>&lt;template v-slot:插槽名=&quot;接收的变量名&quot;&gt;</code></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Vue-中的修饰符有哪些？\"><a href=\"#Vue-中的修饰符有哪些？\" class=\"headerlink\" title=\"Vue 中的修饰符有哪些？\"></a>Vue 中的修饰符有哪些？</h3><p>在Vue 中，修饰符处理了许多 DOM 事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理。Vue中修饰符分为以下几种：</p>\n<ol>\n<li><p>表单修饰符<br> <code>lazy</code> 填完信息，光标离开标签的时候，才会将值赋予给value，也就是在<code>change</code>事件之后再进行信息同步。<br> <code>number</code> 自动将用户输入值转化为数值类型，但如果这个值无法被<code>parseFloat</code>解析，则会返回原来的值。<br> <code>trim</code> 自动过滤用户输入的首尾空格，而中间的空格不会被过滤。</p>\n</li>\n<li><p>事件修饰符<br> <code>stop</code> 阻止了事件冒泡，相当于调用了<code>event.stopPropagation</code>方法。<br> <code>prevent</code> 阻止了事件的默认行为，相当于调用了<code>event.preventDefault</code>方法。<br> <code>self</code> 只当在 <code>event.target</code> 是当前元素自身时触发处理函数。<br> <code>once</code> 绑定了事件以后只能触发一次，第二次就不会触发。<br> <code>capture</code> 使用事件捕获模式，即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理。<br> <code>passive</code> 告诉浏览器你不想阻止事件的默认行为。<br> <code>native</code> 让组件变成像<code>html</code>内置标签那样监听根元素的原生事件，否则组件上使用 <code>v-on</code> 只会监听自定义事件。</p>\n</li>\n<li><p>鼠标按键修饰符<br> <code>left</code> 左键点击。<br> <code>right</code> 右键点击。<br> <code>middle</code> 中键点击。</p>\n</li>\n<li><p>键值修饰符</p>\n<p>键盘修饰符是用来修饰键盘事件（onkeyup，onkeydown）的，有如下：keyCode</p>\n<p>存在很多，但vue为我们提供了别名，分为以下两种：</p>\n<ul>\n<li>普通键（enter、tab、delete、space、esc、up…）</li>\n<li>系统修饰键（ctrl、alt、meta、shift…）</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"对-SPA-的理解？\"><a href=\"#对-SPA-的理解？\" class=\"headerlink\" title=\"对 SPA 的理解？\"></a>对 SPA 的理解？</h3><ol>\n<li><p>概念：<br> <code>SPA（Single-page  application）</code>，即单页面应用，它是一种网络应用程序或网站的模型，通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换时打断用户体验。在<code>SPA</code>中，所有必要的代码（HTML、JavaScript 和 CSS）都通过单个页面的加载而检索，或者根据需要（通常是响应用户操作）动态装载适当的资源并添加到页面。页面在任何时间点都不会重新加载，也不会将控制转移到其他页面。举个例子，就像一个杯子，上午装的是牛奶，中午装的是咖啡，下午装的是茶，变得始终是内容，杯子始终不变。</p>\n</li>\n<li><p><code>SPA</code>与<code>MPA</code>的区别：<br> <code>MPA（Muti-page application）</code>，即多页面应用。在<code>MPA</code>中，每个页面都是一个主页面，都是独立的，每当访问一个页面时，都需要重新加载 Html、CSS、JS 文件，公共文件则根据需求按需加载。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>SPA</th>\n<th>MPA</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>组成</td>\n<td>一个主页面和多个页面片段</td>\n<td>多个主页面</td>\n</tr>\n<tr>\n<td>url模式</td>\n<td>hash模式</td>\n<td>history模式</td>\n</tr>\n<tr>\n<td>SEO搜索引擎优化</td>\n<td>难实现，可使用SSR方式改善</td>\n<td>容易实现</td>\n</tr>\n<tr>\n<td>数据传递</td>\n<td>容易</td>\n<td>通过url、cookie、localStorage等传递</td>\n</tr>\n<tr>\n<td>页面切换</td>\n<td>速度快，用户体验良好</td>\n<td>切换加载资源，速度慢，用户体验差</td>\n</tr>\n<tr>\n<td>维护成本</td>\n<td>相对容易</td>\n<td>相对复杂</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><code>SPA</code>的优缺点：<br> 优点：</p>\n<ul>\n<li>具有桌面应用的即时性、网站的可移植性和可访问性</li>\n<li>用户体验好、快，内容的改变不需要重新加载整个页面</li>\n<li>良好的前后端分离，分工更明确</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>不利于搜索引擎的抓取</li>\n<li>首次渲染速度相对较慢</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"双向绑定？\"><a href=\"#双向绑定？\" class=\"headerlink\" title=\"双向绑定？\"></a>双向绑定？</h3><ol>\n<li>概念：<br> Vue 中双向绑定是一个指令<code>v-model</code>，可以绑定一个响应式数据到视图，同时视图的变化能改变该值。<code>v-model</code>是语法糖，默认情况下相当于<code>:value</code>和<code>@input</code>，使用<code>v-model</code>可以减少大量繁琐的事件处理代码，提高开发效率。</li>\n<li>使用：<br> 通常在表单项上使用<code>v-model</code>，还可以在自定义组件上使用，表示某个值的输入和输出控制。</li>\n<li>原理：<br> <code>v-model</code>是一个指令，双向绑定实际上是Vue 的编译器完成的，通过输出包含<code>v-model</code>模版的组件渲染函数，实际上还是<code>value</code>属性的绑定及<code>input</code>事件监听，事件回调函数中会做相应变量的更新操作。</li>\n</ol>\n<h3 id=\"子组件是否可以直接改变父组件的数据？\"><a href=\"#子组件是否可以直接改变父组件的数据？\" class=\"headerlink\" title=\"子组件是否可以直接改变父组件的数据？\"></a>子组件是否可以直接改变父组件的数据？</h3><ol>\n<li>所有的<code>prop</code>都遵循着单项绑定原则，<code>props</code>因父组件的更新而变化，自然地将新状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。<br> 另外，每次父组件更新后，所有的子组件中的<code>props</code>都会被更新为最新值，这就意味着不应该子组件中去修改一个<code>prop</code>，若这么做了，Vue 会在控制台上抛出警告。</li>\n<li>实际开发过程中通常有两个场景导致要修改prop：<ul>\n<li><code>prop</code>被用于传入初始值，而子组件想在之后将其作为一个局部数据属性。这种情况下，最好是新定义一个局部数据属性，从<code>props</code>获取初始值即可。</li>\n<li>需要对传入的<code>prop</code>值做进一步转换。最好是基于该<code>prop</code>值定义一个计算属性。</li>\n</ul>\n</li>\n<li>实践中，如果确实要更改父组件属性，应<code>emit</code>一个事件让父组件变更。当对象或数组作为<code>props</code>被传入时，虽然子组件无法更改<code>props</code>绑定，但仍然<strong>可以</strong>更改对象或数组内部的值。这是因为JS的对象和数组是按引用传递，而对于 Vue 来说，禁止这样的改动虽然可能，但是有很大的性能损耗，比较得不偿失。</li>\n</ol>\n<h3 id=\"router-和-route-的区别？\"><a href=\"#router-和-route-的区别？\" class=\"headerlink\" title=\"router 和 route 的区别？\"></a>router 和 route 的区别？</h3><ol>\n<li><code>$router</code>是VueRouter的实例对象，是一个全局的路由对象，包含了所有路由的对象和属性。</li>\n<li><code>$route</code>是一个跳转的路由对象，可以认为是当前组件的路由管理，指当前激活的路由对象，包含当前url解析得到的数据，可以从对象里获取一些数据，如：name，path，params，query等。</li>\n</ol>\n<h3 id=\"vue-router-的路由传参方式？\"><a href=\"#vue-router-的路由传参方式？\" class=\"headerlink\" title=\"vue-router 的路由传参方式？\"></a>vue-router 的路由传参方式？</h3><ol>\n<li>声明式导航 <code>router-link</code>：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link :to=<span class=\"string\">&quot;&#x27;/users?userId:1&#x27;&quot;</span>&gt;&lt;/router-link&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123; name: &#x27;users&#x27;, params: &#123; userId: 1 &#125; &#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123; path: &#x27;/users&#x27;, query: &#123; userId: 1 &#125; &#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>编程式导航 router-push：</p>\n<ul>\n<li>通过<code>params</code>传参</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">userId</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 路由配置</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">User</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 跳转后获取路由参数</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">params</span>.<span class=\"property\">userId</span> <span class=\"comment\">// 为 1</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过<code>query</code>传参</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.<span class=\"variable\">$router</span>.<span class=\"title function_ invoke__\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">query</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">userId</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 路由配置</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    path: <span class=\"string\">&#x27;/users&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">    component: User</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 跳转后获取路由参数</span></span><br><span class=\"line\">this.<span class=\"variable\">$route</span>.query.userId</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>动态路由</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;/users/$&#123;userId&#125;&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 路由配置</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/users/:userId&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">User</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 跳转后获取路由参数</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">params</span>.<span class=\"property\">userId</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"Vue-Router中的常用路由模式和原理？\"><a href=\"#Vue-Router中的常用路由模式和原理？\" class=\"headerlink\" title=\"Vue Router中的常用路由模式和原理？\"></a>Vue Router中的常用路由模式和原理？</h3><ol>\n<li>hash 模式：</li>\n</ol>\n<ul>\n<li><code>location.hash</code>的值就是url中 <code>#</code> 后面的东西。它的特点在于：hash虽然出现url中，但不会被包含在HTTP请求中，对后端完全没有影响，因此改变hash不会重新加载页面。</li>\n<li>可以为hash的改变添加监听事件<code>window.addEventListener(&quot;hashchange&quot;, funcRef, false)</code>，每一次改变<code>hash (window.location.hash)</code>，都会在浏览器的访问历史中增加一个记录，利用hash的以上特点，就可以实现<strong>前端路由更新视图但不重新请求页面</strong>的功能了。<br> 特点：兼容性好但是不美观</li>\n</ul>\n<ol>\n<li>history 模式：<br> 利用 HTML5 History Interface 中新增的<code>pushState()</code>和<code>replaceState()</code>方法。<br> 这两个方法应用于浏览器的历史记录栈，在当前已有的<code>back</code>、<code>forward</code>、<code>go</code> 的基础上(使用<code>popState()</code>方法)，他们提供了对历史记录进行修改的功能。<br> 这两个方法有个共同点：当调用他们修改浏览器历史记录栈后，虽然当前url改变了，但浏览器不会刷新页面，这就为单页面应用前端路由“更新视图但不重新请求页面”提供了基础<br> 特点：虽然美观，但是刷新会出现 404 需要后端进行配置。</li>\n</ol>\n<h3 id=\"动态路由？\"><a href=\"#动态路由？\" class=\"headerlink\" title=\"动态路由？\"></a>动态路由？</h3><p>很多时候，我们需要将给定匹配模式的路由映射到同一个组件，这种情况就需要定义动态路由。例如，我们有一个 User组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用<code>动态路径参数（dynamic segment）</code>来达到这个效果：<code>&#123;path: &#39;/user/:id&#39;, compenent: User&#125;</code>，其中<code>:id</code>就是动态路径参数。</p>\n<h3 id=\"对Vuex的理解？\"><a href=\"#对Vuex的理解？\" class=\"headerlink\" title=\"对Vuex的理解？\"></a>对Vuex的理解？</h3><ol>\n<li>概念：<br> Vuex 是 Vue 专用的状态管理库，它以全局方式集中管理应用的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</li>\n<li>解决的问题：<br> Vuex 主要解决的问题是多组件之间状态共享。利用各种通信方式，虽然也能够实现状态共享，但是往往需要在多个组件之间保持状态的一致性，这种模式很容易出问题，也会使程序逻辑变得复杂。Vuex 通过把组件的共享状态抽取出来，以全局单例模式管理，这样任何组件都能用一致的方式获取和修改状态，响应式的数据也能够保证简洁的单向流动，使代码变得更具结构化且易于维护。</li>\n<li>什么时候用:<br> Vuex 并非是必须的，它能够管理状态，但同时也带来更多的概念和框架。如果我们不打算开发大型单页应用或应用里没有大量全局的状态需要维护，完全没有使用Vuex的必要，一个简单的 store 模式就够了。反之，Vuex将是自然而然的选择。</li>\n<li>用法：<br> Vuex 将全局状态放入<code>state</code>对象中，它本身是一颗状态树，组件中使用<code>store</code>实例的<code>state</code>访问这些状态；然后用配套的<code>mutation</code>方法修改这些状态，并且只能用<code>mutation</code>修改状态，在组件中调用<code>commit</code>方法提交<code>mutation</code>；如果应用中有异步操作或复杂逻辑组合，需要编写<code>action</code>，执行结束如果有状态修改仍需提交<code>mutation</code>，组件中通过<code>dispatch</code>派发<code>action</code>。最后是模块化，通过<code>modules</code>选项组织拆分出去的各个子模块，在访问状态（state）时需注意添加子模块的名称，如果子模块有设置<code>namespace</code>，那么提交<code>mutation</code>和派发<code>action</code>时还需要额外的命名空间前缀。</li>\n</ol>\n<h3 id=\"页面刷新后Vuex-状态丢失怎么解决？\"><a href=\"#页面刷新后Vuex-状态丢失怎么解决？\" class=\"headerlink\" title=\"页面刷新后Vuex 状态丢失怎么解决？\"></a>页面刷新后Vuex 状态丢失怎么解决？</h3><p>Vuex 只是在内存中保存状态，刷新后就会丢失，如果要持久化就需要保存起来。</p>\n<p><code>localStorage</code>就很合适，提交<code>mutation</code>的时候同时存入<code>localStorage</code>，在<code>store</code>中把值取出来作为<code>state</code>的初始值即可。</p>\n<p>也可以使用第三方插件，推荐使用<code>vuex-persist</code>插件，它是为 Vuex 持久化储存而生的一个插件，不需要你手动存取<code>storage</code>，而是直接将状态保存至 <code>cookie</code> 或者 <code>localStorage</code>中。</p>\n<h3 id=\"关于-Vue-SSR-的理解？\"><a href=\"#关于-Vue-SSR-的理解？\" class=\"headerlink\" title=\"关于 Vue SSR 的理解？\"></a>关于 Vue SSR 的理解？</h3><p><code>SSR</code>即<code>服务端渲染（Server Side Render）</code>，就是将 Vue 在客户端把标签渲染成 html 的工作放在服务端完成，然后再把 html 直接返回给客户端。</p>\n<ul>\n<li>优点：<br> 有着更好的 SEO，并且首屏加载速度更快。</li>\n<li>缺点：<br> 开发条件会受限制，服务器端渲染只支持 beforeCreate 和 created 两个钩子，当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于 Node.js 的运行环境。服务器会有更大的负载需求。</li>\n</ul>\n<h3 id=\"了解哪些-Vue-的性能优化方法？\"><a href=\"#了解哪些-Vue-的性能优化方法？\" class=\"headerlink\" title=\"了解哪些 Vue 的性能优化方法？\"></a>了解哪些 Vue 的性能优化方法？</h3><ul>\n<li>路由懒加载。有效拆分应用大小，访问时才异步加载。</li>\n<li><code>keep-alive</code>缓存页面。避免重复创建组件实例，且能保留缓存组件状态。</li>\n<li><code>v-for</code>遍历避免同时使用<code>v-if</code>。实际上在 Vue 3 中已经是一个错误用法了。</li>\n<li>长列表性能优化，可采用虚拟列表。</li>\n<li><code>v-once</code>。不再变化的数据使用<code>v-once</code>。</li>\n<li>事件销毁。组件销毁后把全局变量和定时器销毁。</li>\n<li>图片懒加载。</li>\n<li>第三方插件按需引入。</li>\n<li>子组件分割。较重的状态组件适合拆分。</li>\n<li>服务端渲染。</li>\n</ul>"},{"title":"css复习","keywords":"css复习","description":"css复习","top_img":"https://raw.githubusercontent.com/why862555625/images/main/images/222.jpg","sticky":"数值越大越靠前","cover":"https://raw.githubusercontent.com/why862555625/images/main/images/222.jpg","comments":1,"abbrlink":"ed9fe6ee","date":"2023-06-08T06:36:25.000Z","updated":"2023-06-08T06:36:25.000Z","_content":"\n\n\n摘要\n\n<!-- more -->\n\n![image-20230608144415180](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230608144415180.png)\n\n## 一、CSS基础\n\n### 1. CSS选择器及其优先级\n\n| **选择器**     | **格式**      | **优先级权重** |\n| -------------- | ------------- | -------------- |\n| id选择器       | #id           | 100            |\n| 类选择器       | #classname    | 10             |\n| 属性选择器     | a[ref=“eee”]  | 10             |\n| 伪类选择器     | li:last-child | 10             |\n| 标签选择器     | div           | 1              |\n| 伪元素选择器   | li:after      | 1              |\n| 相邻兄弟选择器 | h1+p          | 0              |\n| 子选择器       | ul>li         | 0              |\n| 后代选择器     | li a          | 0              |\n| 通配符选择器   | *             | 0              |\n\n对于选择器的**优先级**：\n\n- 标签选择器、伪元素选择器：1\n- 类选择器、伪类选择器、属性选择器：10\n- id 选择器：100\n- 内联样式：1000\n\n**注意事项：**\n\n- !important声明的样式的优先级最高；\n- 如果优先级相同，则最后出现的样式生效；\n- 继承得到的样式的优先级最低；\n- 通用选择器（*）、子选择器（>）和相邻同胞选择器（+）并不在这四个等级中，所以它们的权值都为 0 ；\n- 样式表的来源不同时，优先级顺序为：内联样式 > 内部样式 > 外部样式 > 浏览器用户自定义样式 > 浏览器默认样式。\n\n### 2. CSS中可继承与不可继承属性有哪些\n\n**一、无继承性的属性**\n\n1. **display**：规定元素应该生成的框的类型\n2. **文本属性**：\n\n- vertical-align：垂直文本对齐\n- text-decoration：规定添加到文本的装饰\n- text-shadow：文本阴影效果\n- white-space：空白符的处理\n- unicode-bidi：设置文本的方向\n\n1. **盒子模型的属性**：width、height、margin、border、padding\n2. **背景属性**：background、background-color、background-image、background-repeat、background-position、background-attachment\n3. **定位属性**：float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index\n4. **生成内容属性**：content、counter-reset、counter-increment\n5. **轮廓样式属性**：outline-style、outline-width、outline-color、outline\n6. **页面样式属性**：size、page-break-before、page-break-after\n7. **声音样式属性**：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during\n\n**二、有继承性的属性**\n\n1. **字体系列属性**\n\n- font-family：字体系列\n- font-weight：字体的粗细\n- font-size：字体的大小\n- font-style：字体的风格\n\n1. **文本系列属性**\n\n- text-indent：文本缩进\n- text-align：文本水平对齐\n- line-height：行高\n- word-spacing：单词之间的间距\n- letter-spacing：中文或者字母之间的间距\n- text-transform：控制文本大小写（就是uppercase、lowercase、capitalize这三个）\n- color：文本颜色\n\n1. **元素可见性**\n\n- visibility：控制元素显示隐藏\n\n1. **列表布局属性**\n\n- list-style：列表风格，包括list-style-type、list-style-image等\n\n1. **光标属性**\n\n- cursor：光标显示为何种形态\n\n### 3. display的属性值及其作用\n\n| **属性值**   | **作用**                                                   |\n| ------------ | ---------------------------------------------------------- |\n| none         | 元素不显示，并且会从文档流中移除。                         |\n| block        | 块类型。默认宽度为父元素宽度，可设置宽高，换行显示。       |\n| inline       | 行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。 |\n| inline-block | 默认宽度为内容宽度，可以设置宽高，同行显示。               |\n| list-item    | 像块类型元素一样显示，并添加样式列表标记。                 |\n| table        | 此元素会作为块级表格来显示。                               |\n| inherit      | 规定应该从父元素继承display属性的值。                      |\n\n### 4. display的block、inline和inline-block的区别\n\n（1）**block：** 会独占一行，多个元素会另起一行，可以设置width、height、margin和padding属性；\n\n（2）**inline：** 元素不会独占一行，设置width、height属性无效。但可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin；\n\n（3）**inline-block：** 将对象设置为inline对象，但对象的内容作为block对象呈现，之后的内联对象会被排列在同一行内。\n\n对于行内元素和块级元素，其特点如下：\n\n**（1）行内元素**\n\n- 设置宽高无效；\n- 可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin；\n- 不会自动换行；\n\n**（2）块级元素**\n\n- 可以设置宽高；\n- 设置margin和padding都有效；\n- 可以自动换行；\n- 多个块状，默认排列从上到下。\n\n### 5. 隐藏元素的方法有哪些\n\n- **display: none**：渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件。\n- **visibility: hidden**：元素在页面中仍占据空间，但是不会响应绑定的监听事件。\n- **opacity: 0**：将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且能够响应元素绑定的监听事件。\n- **position: absolute**：通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。\n- **z-index: 负值**：来使其他元素遮盖住该元素，以此来实现隐藏。\n- **clip/clip-path** ：使用元素裁剪的方法来实现元素的隐藏，这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。\n- **transform: scale(0,0)**：将元素缩放为 0，来实现元素的隐藏。这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。\n\n### 6. link和@import的区别\n\n两者都是外部引用CSS的方式，它们的区别如下：\n\n- link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。\n- link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。\n- link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。\n- link支持使用Javascript控制DOM去改变样式；而@import不支持。\n\n### 7. transition和animation的区别\n\n- **transition是过度属性**，强调过度，它的实现需要触发一个事件（比如鼠标移动上去，焦点，点击等）才执行动画。它类似于flash的补间动画，设置一个开始关键帧，一个结束关键帧。\n- **animation是动画属性**，它的实现不需要触发事件，设定好时间之后可以自己执行，且可以循环一个动画。它也类似于flash的补间动画，但是它可以设置多个关键帧（用@keyframe定义）完成动画。\n\n### 8. display:none与visibility:hidden的区别\n\n这两个属性都是让元素隐藏，不可见。**两者区别如下：**\n\n（1）**在渲染树中**\n\n- `display:none`会让元素完全从渲染树中消失，渲染时不会占据任何空间；\n- `visibility:hidden`不会让元素从渲染树中消失，渲染的元素还会占据相应的空间，只是内容不可见。\n\n（2）**是否是继承属性**\n\n- `display:none`是非继承属性，子孙节点会随着父节点从渲染树消失，通过修改子孙节点的属性也无法显示；\n- `visibility:hidden`是继承属性，子孙节点消失是由于继承了`hidden`，通过设置`visibility:visible`可以让子孙节点显示； （3）修改常规文档流中元素的 `display` 通常会造成文档的重排，但是修改`visibility`属性只会造成本元素的重绘；\n\n（4）如果使用读屏器，设置为`display:none`的内容不会被读取，设置为`visibility:hidden`的内容会被读取。\n\n### 9. **伪元素和伪类的区别和作用？**\n\n- 伪元素：在内容元素的前后插入额外的元素或样式，但是这些元素实际上并不在文档中生成。它们只在外部显示可见，但不会在文档的源代码中找到它们，因此，称为“伪”元素。例如：\n\n```css\np::before {content:\"第一章：\";}\np::after {content:\"Hot!\";}\np::first-line {background:red;}\np::first-letter {font-size:30px;}\n```\n\n- 伪类：将特殊的效果添加到特定选择器上。它是已有元素上添加类别的，不会产生新的元素。例如：\n\n```css\na:hover {color: #FF00FF}\np:first-child {color: red}\n```\n\n**总结：** 伪类是通过在元素选择器上加⼊伪类改变元素状态，⽽伪元素通过对元素的操作进⾏对元素的改变。\n\n### 10. 对requestAnimationframe的理解\n\n实现动画效果的方法比较多，Javascript 中可以通过定时器 setTimeout 来实现，CSS3 中可以使用 transition 和 animation 来实现，HTML5 中的 canvas 也可以实现。除此之外，HTML5 提供一个专门用于请求动画的API，那就是 requestAnimationFrame，顾名思义就是**请求动画帧**。\n\nMDN对该方法的描述：\n\n> window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。\n\n**语法：** `window.requestAnimationFrame(callback);`  其中，callback是**下一次重绘之前更新动画帧所调用的函数**(即上面所说的回调函数)。该回调函数会被传入DOMHighResTimeStamp参数，它表示requestAnimationFrame() 开始去执行回调函数的时刻。该方法属于**宏任务**，所以会在执行完微任务之后再去执行。\n\n**取消动画：** 使用cancelAnimationFrame()来取消执行动画，该方法接收一个参数——requestAnimationFrame默认返回的id，只需要传入这个id就可以取消动画了。\n\n**优势：**\n\n- **CPU节能**：使用SetTinterval 实现的动画，当页面被隐藏或最小化时，SetTinterval 仍然在后台执行动画任务，由于此时页面处于不可见或不可用状态，刷新动画是没有意义的，完全是浪费CPU资源。而RequestAnimationFrame则完全不同，当页面处理未激活的状态下，该页面的屏幕刷新任务也会被系统暂停，因此跟着系统走的RequestAnimationFrame也会停止渲染，当页面被激活时，动画就从上次停留的地方继续执行，有效节省了CPU开销。\n- **函数节流**：在高频率事件( resize, scroll 等)中，为了防止在一个刷新间隔内发生多次函数执行，RequestAnimationFrame可保证每个刷新间隔内，函数只被执行一次，这样既能保证流畅性，也能更好的节省函数执行的开销，一个刷新间隔内函数执行多次时没有意义的，因为多数显示器每16.7ms刷新一次，多次绘制并不会在屏幕上体现出来。\n- **减少DOM操作**：requestAnimationFrame 会把每一帧中的所有DOM操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率，一般来说，这个频率为每秒60帧。\n\n**setTimeout执行动画的缺点**：它通过设定间隔时间来不断改变图像位置，达到动画效果。但是容易出现卡顿、抖动的现象；原因是：\n\n- settimeout任务被放入异步队列，只有当主线程任务执行完后才会执行队列中的任务，因此实际执行时间总是比设定时间要晚；\n- settimeout的固定时间间隔不一定与屏幕刷新间隔时间相同，会引起丢帧。\n\n### 11. 对盒模型的理解\n\nCSS3中的盒模型有以下两种：标准盒子模型、IE盒子模型 ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4544d45b5a0c47a58c0c33a7d8fbac09~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4040de9fef1a49f4ae0ae66039edcfe0~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) 盒模型都是由四个部分组成的，分别是margin、border、padding和content。\n\n标准盒模型和IE盒模型的区别在于设置width和height时，所对应的范围不同：\n\n- 标准盒模型的width和height属性的范围只包含了content，\n- IE盒模型的width和height属性的范围包含了border、padding和content。\n\n可以通过修改元素的box-sizing属性来改变元素的盒模型：\n\n- `box-sizeing: content-box`表示标准盒模型（默认值）\n- `box-sizeing: border-box`表示IE盒模型（怪异盒模型）\n\n### 12. 为什么有时候⽤**translate**来改变位置⽽不是定位？\n\ntranslate 是 transform 属性的⼀个值。改变transform或opacity不会触发浏览器重新布局（reflow）或重绘（repaint），只会触发复合（compositions）。⽽改变绝对定位会触发重新布局，进⽽触发重绘和复合。transform使浏览器为元素创建⼀个 GPU 图层，但改变绝对定位会使⽤到 CPU。 因此translate()更⾼效，可以缩短平滑动画的绘制时间。 ⽽translate改变位置时，元素依然会占据其原始空间，绝对定位就不会发⽣这种情况。\n\n### 13. li 与 li 之间有看不见的空白间隔是什么原因引起的？如何解决？\n\n浏览器会把inline内联元素间的空白字符（空格、换行、Tab等）渲染成一个空格。为了美观，通常是一个`<li>`放在一行，这导致`<li>`换行后产生换行字符，它变成一个空格，占用了一个字符的宽度。\n\n**解决办法：**\n\n（1）为`<li>`设置float:left。不足：有些容器是不能设置浮动，如左右切换的焦点图等。\n\n（2）将所有`<li>`写在同一行。不足：代码不美观。\n\n（3）将`<ul>`内的字符尺寸直接设为0，即font-size:0。不足：`<ul>`中的其他字符尺寸也被设为0，需要额外重新设定其他字符尺寸，且在Safari浏览器依然会出现空白间隔。\n\n（4）消除`<ul>`的字符间隔letter-spacing:-8px，不足：这也设置了`<li>`内的字符间隔，因此需要将`<li>`内的字符间隔设为默认letter-spacing:normal。\n\n### 14. CSS3中有哪些新特性\n\n- 新增各种CSS选择器 （: not(.input)：所有 class 不是“input”的节点）\n- 圆角 （border-radius:8px）\n- 多列布局 （multi-column layout）\n- 阴影和反射 （Shadoweflect）\n- 文字特效 （text-shadow）\n- 文字渲染 （Text-decoration）\n- 线性渐变 （gradient）\n- 旋转 （transform）\n- 增加了旋转,缩放,定位,倾斜,动画,多背景\n\n### 15. 替换元素的概念及计算规则\n\n通过修改某个属性值呈现的内容就可以被替换的元素就称为“替换元素”。\n\n替换元素除了内容可替换这一特性以外，还有以下特性：\n\n- **内容的外观不受页面上的CSS的影响**：用专业的话讲就是在样式表现在CSS作用域之外。如何更改替换元素本身的外观需要类似appearance属性，或者浏览器自身暴露的一些样式接口。\n- **有自己的尺寸**：在Web中，很多替换元素在没有明确尺寸设定的情况下，其默认的尺寸（不包括边框）是300像素×150像素，如\n- **在很多CSS属性上有自己的一套表现规则**：比较具有代表性的就是vertical-align属性，对于替换元素和非替换元素，vertical-align属性值的解释是不一样的。比方说vertical-align的默认值的baseline，很简单的属性值，基线之意，被定义为字符x的下边缘，而替换元素的基线却被硬生生定义成了元素的下边缘。\n- **所有的替换元素都是内联水平元素**：也就是替换元素和替换元素、替换元素和文字都是可以在一行显示的。但是，替换元素默认的display值却是不一样的，有的是inline，有的是inline-block。\n\n替换元素的尺寸从内而外分为三类：\n\n- **固有尺寸：** 指的是替换内容原本的尺寸。例如，图片、视频作为一个独立文件存在的时候，都是有着自己的宽度和高度的。\n- **HTML尺寸：** 只能通过HTML原生属性改变，这些HTML原生属性包括的width和height属性、的size属性。\n- **CSS尺寸：** 特指可以通过CSS的width和height或者max-width/min-width和max-height/min-height设置的尺寸，对应盒尺寸中的content box。\n\n这三层结构的计算规则具体如下： （1）如果没有CSS尺寸和HTML尺寸，则使用固有尺寸作为最终的宽高。 （2）如果没有CSS尺寸，则使用HTML尺寸作为最终的宽高。 （3）如果有CSS尺寸，则最终尺寸由CSS属性决定。 （4）如果“固有尺寸”含有固有的宽高比例，同时仅设置了宽度或仅设置了高度，则元素依然按照固有的宽高比例显示。 （5）如果上面的条件都不符合，则最终宽度表现为300像素，高度为150像素。 （6）内联替换元素和块级替换元素使用上面同一套尺寸计算规则。\n\n### 16. 常见的图片格式及使用场景\n\n（1）**BMP**，是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以BMP格式的图片通常是较大的文件。\n\n（2）**GIF**是无损的、采用索引色的点阵图。采用LZW压缩算法进行编码。文件小，是GIF格式的优点，同时，GIF格式还具有支持动画以及透明的优点。但是GIF格式仅支持8bit的索引色，所以GIF格式适用于对色彩要求不高同时需要文件体积较小的场景。\n\n（3）**JPEG**是有损的、采用直接色的点阵图。JPEG的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG非常适合用来存储照片，与GIF相比，JPEG不适合用来存储企业Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较GIF更大。\n\n（4）**PNG-8**是无损的、使用索引色的点阵图。PNG是一种比较新的图片格式，PNG-8是非常好的GIF格式替代者，在可能的情况下，应该尽可能的使用PNG-8而不是GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8还支持透明度的调节，而GIF并不支持。除非需要动画的支持，否则没有理由使用GIF而不是PNG-8。\n\n（5）**PNG-24**是无损的、使用直接色的点阵图。PNG-24的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24格式的文件大小要比BMP小得多。当然，PNG24的图片还是要比JPEG、GIF、PNG-8大得多。\n\n（6）**SVG**是无损的矢量图。SVG是矢量图意味着SVG图片由直线和曲线以及绘制它们的方法组成。当放大SVG图片时，看到的还是线和曲线，而不会出现像素点。SVG图片在放大时，不会失真，所以它适合用来绘制Logo、Icon等。\n\n（7）**WebP**是谷歌开发的一种新图片格式，WebP是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为Web而生的，什么叫为Web而生呢？就是说相同质量的图片，WebP具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有Chrome浏览器和Opera浏览器支持WebP格式，兼容性不太好。\n\n- 在无损压缩的情况下，相同质量的WebP图片，文件大小要比PNG小26%；\n- 在有损压缩的情况下，具有相同图片精度的WebP图片，文件大小要比JPEG小25%~34%；\n- WebP图片格式支持图片透明度，一个无损压缩的WebP图片，如果要支持透明度只需要22%的格外文件大小。\n\n### 17. 对 CSSSprites 的理解\n\nCSSSprites（精灵图），将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的 background-image，background-repeat，background-position属性的组合进行背景定位。\n\n**优点：**\n\n- 利用`CSS Sprites`能很好地减少网页的http请求，从而大大提高了页面的性能，这是`CSS Sprites`最大的优点；\n- `CSS Sprites`能减少图片的字节，把3张图片合并成1张图片的字节总是小于这3张图片的字节总和。\n\n**缺点：**\n\n- 在图片合并时，要把多张图片有序的、合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景。在宽屏及高分辨率下的自适应页面，如果背景不够宽，很容易出现背景断裂；\n- `CSSSprites`在开发的时候相对来说有点麻烦，需要借助`photoshop`或其他工具来对每个背景单元测量其准确的位置。\n- 维护方面：`CSS Sprites`在维护的时候比较麻烦，页面背景有少许改动时，就要改这张合并的图片，无需改的地方尽量不要动，这样避免改动更多的`CSS`，如果在原来的地方放不下，又只能（最好）往下加图片，这样图片的字节就增加了，还要改动`CSS`。\n\n### 18. 什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片？\n\n以 iPhone XS 为例，当写 CSS 代码时，针对于单位 px，其宽度为 414px & 896px，也就是说当赋予一个 DIV元素宽度为 414px，这个 DIV 就会填满手机的宽度；\n\n而如果有一把尺子来实际测量这部手机的物理像素，实际为 1242*2688 物理像素；经过计算可知，1242/414=3，也就是说，在单边上，一个逻辑像素=3个物理像素，就说这个屏幕的像素密度为 3，也就是常说的 3 倍屏。\n\n对于图片来说，为了保证其不失真，1 个图片像素至少要对应一个物理像素，假如原始图片是 500300 像素，那么在 3 倍屏上就要放一个 1500900 像素的图片才能保证 1 个物理像素至少对应一个图片像素，才能不失真。 ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f1da1cbae9b45528cc2b33f74eb32f2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) 当然，也可以针对所有屏幕，都只提供最高清图片。虽然低密度屏幕用不到那么多图片像素，而且会因为下载多余的像素造成带宽浪费和下载延迟，但从结果上说能保证图片在所有屏幕上都不会失真。\n\n还可以使用 CSS 媒体查询来判断不同的像素密度，从而选择不同的图片:\n\n```javascript\nmy-image { background: (low.png); }\n@media only screen and (min-device-pixel-ratio: 1.5) {\n  #my-image { background: (high.png); }\n}\n```\n\n### 19. **margin 和 padding 的使用场景**\n\n- 需要在border外侧添加空白，且空白处不需要背景（色）时，使用 margin；\n- 需要在border内测添加空白，且空白处需要背景（色）时，使用 padding。\n\n### 20. 对**line-height 的理解及其赋值方式**\n\n**（1）line-height的概念：**\n\n- line-height 指一行文本的高度，包含了字间距，实际上是下一行基线到上一行基线距离；\n- 如果一个标签没有定义 height 属性，那么其最终表现的高度由 line-height 决定；\n- 一个容器没有设置高度，那么撑开容器高度的是 line-height，而不是容器内的文本内容；\n- 把 line-height 值设置为 height 一样大小的值可以实现单行文字的垂直居中；\n- line-height 和 height 都能撑开一个高度；\n\n**（2）line-height 的赋值方式：**\n\n- 带单位：px 是固定值，而 em 会参考父元素 font-size 值计算自身的行高\n- 纯数字：会把比例传递给后代。例如，父级行高为 1.5，子元素字体为 18px，则子元素行高为 1.5 * 18 = 27px\n- 百分比：将计算后的值传递给后代\n\n### 21. CSS 优化和提高性能的方法有哪些？\n\n**加载性能：**\n\n（1）css压缩：将写好的css进行打包压缩，可以减小文件体积。\n\n（2）css单一样式：当需要下边距和左边距的时候，很多时候会选择使用 margin:top 0 bottom 0；但margin-bottom:bottom;margin-left:left;执行效率会更高。\n\n（3）减少使用@import，建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。\n\n**选择器性能：**\n\n（1）关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；\n\n（2）如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）。\n\n（3）避免使用通配规则，如*{}计算次数惊人，只对需要用到的元素进行选择。\n\n（4）尽量少的去对标签进行选择，而是用class。\n\n（5）尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素。\n\n（6）了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。\n\n**渲染性能：**\n\n（1）慎重使用高性能属性：浮动、定位。\n\n（2）尽量减少页面重排、重绘。\n\n（3）去除空规则：｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体积。\n\n（4）属性值为0时，不加单位。\n\n（5）属性值为浮动小数0.**，可以省略小数点之前的0。\n\n（6）标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。\n\n（7）不使用@import前缀，它会影响css的加载速度。\n\n（8）选择器优化嵌套，尽量避免层级过深。\n\n（9）css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚，再使用。\n\n（10）正确使用display的属性，由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。\n\n（11）不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。web fonts通常体积庞大，而且一些浏览器在下载web fonts时会阻塞页面渲染损伤性能。\n\n**可维护性、健壮性：**\n\n（1）将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。\n\n（2）样式与内容分离：将css代码定义到外部css中。\n\n### 22. CSS预处理器/后处理器是什么？为什么要使用它们？\n\n**预处理器，** 如：`less`，`sass`，`stylus`，用来预编译`sass`或者`less`，增加了`css`代码的复用性。层级，`mixin`， 变量，循环， 函数等对编写以及开发UI组件都极为方便。\n\n**后处理器，** 如： `postCss`，通常是在完成的样式表中根据`css`规范处理`css`，让其更加有效。目前最常做的是给`css`属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。\n\n`css`预处理器为`css`增加一些编程特性，无需考虑浏览器的兼容问题，可以在`CSS`中使用变量，简单的逻辑程序，函数等在编程语言中的一些基本的性能，可以让`css`更加的简洁，增加适应性以及可读性，可维护性等。\n\n其它`css`预处理器语言：`Sass（Scss）`, `Less`, `Stylus`, `Turbine`, `Swithch css`, `CSS Cacheer`, `DT Css`。\n\n使用原因：\n\n- 结构清晰， 便于扩展\n- 可以很方便的屏蔽浏览器私有语法的差异\n- 可以轻松实现多重继承\n- 完美的兼容了`CSS`代码，可以应用到老项目中\n\n### 23. ::before 和 :after 的双冒号和单冒号有什么区别？\n\n（1）冒号(`:`)用于`CSS3`伪类，双冒号(`::`)用于`CSS3`伪元素。 （2）`::before`就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于`dom`之中，只存在在页面之中。\n\n**注意：** `:before `和 `:after` 这两个伪元素，是在`CSS2.1`里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着`Web`的进化，在`CSS3`的规范里，伪元素的语法被修改成使用双冒号，成为`::before`、`::after`。\n\n### 24. display:inline-block 什么时候会显示间隙？\n\n- 有空格时会有间隙，可以删除空格解决；\n- `margin`正值时，可以让`margin`使用负值解决；\n- 使用`font-size`时，可通过设置`font-size:0`、`letter-spacing`、`word-spacing`解决；\n\n### 25. 单行、多行文本溢出隐藏\n\n- 单行文本溢出\n\n```css\noverflow: hidden;            // 溢出隐藏\ntext-overflow: ellipsis;      // 溢出用省略号显示\nwhite-space: nowrap;         // 规定段落中的文本不进行换行\n```\n\n- 多行文本溢出\n\n```css\noverflow: hidden;            // 溢出隐藏\ntext-overflow: ellipsis;     // 溢出用省略号显示\ndisplay:-webkit-box;         // 作为弹性伸缩盒子模型显示。\n-webkit-box-orient:vertical; // 设置伸缩盒子的子元素排列方式：从上到下垂直排列\n-webkit-line-clamp:3;        // 显示的行数\n```\n\n注意：由于上面的三个属性都是 CSS3 的属性，没有浏览器可以兼容，所以要在前面加一个`-webkit-` 来兼容一部分浏览器。\n\n### 26. Sass、Less 是什么？为什么要使用他们？\n\n他们都是 CSS 预处理器，是 CSS 上的一种抽象层。他们是一种特殊的语法/语言编译成 CSS。 例如 Less 是一种动态样式语言，将 CSS 赋予了动态语言的特性，如变量，继承，运算， 函数，LESS 既可以在客户端上运行 (支持 IE 6+, Webkit, Firefox)，也可以在服务端运行 (借助 Node.js)。\n\n**为什么要使用它们？**\n\n- 结构清晰，便于扩展。 可以方便地屏蔽浏览器私有语法差异。封装对浏览器语法差异的重复处理， 减少无意义的机械劳动。\n- 可以轻松实现多重继承。 完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译。\n\n### 27. 对媒体查询的理解？\n\n媒体查询由⼀个可选的媒体类型和零个或多个使⽤媒体功能的限制了样式表范围的表达式组成，例如宽度、⾼度和颜⾊。媒体查询，添加⾃CSS3，允许内容的呈现针对⼀个特定范围的输出设备⽽进⾏裁剪，⽽不必改变内容本身，适合web⽹⻚应对不同型号的设备⽽做出对应的响应适配。\n\n媒体查询包含⼀个可选的媒体类型和满⾜CSS3规范的条件下，包含零个或多个表达式，这些表达式描述了媒体特征，最终会被解析为true或false。如果媒体查询中指定的媒体类型匹配展示⽂档所使⽤的设备类型，并且所有的表达式的值都是true，那么该媒体查询的结果为true。那么媒体查询内的样式将会⽣效。\n\n```javascript\n<!-- link元素中的CSS媒体查询 --> \n<link rel=\"stylesheet\" media=\"(max-width: 800px)\" href=\"example.css\" /> \n<!-- 样式表中的CSS媒体查询 --> \n<style> \n@media (max-width: 600px) { \n  .facet_sidebar { \n    display: none; \n  } \n}\n</style>\n```\n\n简单来说，使用 @media 查询，可以针对不同的媒体类型定义不同的样式。@media 可以针对不同的屏幕尺寸设置不同的样式，特别是需要设置设计响应式的页面，@media 是非常有用的。当重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。\n\n### 28. 对 CSS 工程化的理解\n\nCSS 工程化是为了解决以下问题：\n\n1. **宏观设计**：CSS 代码如何组织、如何拆分、模块结构怎样设计？\n2. **编码优化**：怎样写出更好的 CSS？\n3. **构建**：如何处理我的 CSS，才能让它的打包结果最优？\n4. **可维护性**：代码写完了，如何最小化它后续的变更成本？如何确保任何一个同事都能轻松接手？\n\n以下三个方向都是时下比较流行的、普适性非常好的 CSS 工程化实践：\n\n- 预处理器：Less、 Sass 等；\n- 重要的工程化插件： PostCss；\n- Webpack loader 等 。\n\n基于这三个方向，可以衍生出一些具有典型意义的子问题，这里我们逐个来看：\n\n**（1）预处理器：为什么要用预处理器？它的出现是为了解决什么问题？**\n\n预处理器，其实就是 CSS 世界的“轮子”。预处理器支持我们写一种类似 CSS、但实际并不是 CSS 的语言，然后把它编译成 CSS 代码： ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d58c5313e884e38b1545a5896613250~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) 那为什么写 CSS 代码写得好好的，偏偏要转去写“类 CSS”呢？这就和本来用 JS 也可以实现所有功能，但最后却写 React 的 jsx 或者 Vue 的模板语法一样——为了爽！要想知道有了预处理器有多爽，首先要知道的是传统 CSS 有多不爽。随着前端业务复杂度的提高，前端工程中对 CSS 提出了以下的诉求：\n\n1. 宏观设计上：我们希望能优化 CSS 文件的目录结构，对现有的 CSS 文件实现复用；\n2. 编码优化上：我们希望能写出结构清晰、简明易懂的 CSS，需要它具有一目了然的嵌套层级关系，而不是无差别的一铺到底写法；我们希望它具有变量特征、计算能力、循环能力等等更强的可编程性，这样我们可以少写一些无用的代码；\n3. 可维护性上：更强的可编程性意味着更优质的代码结构，实现复用意味着更简单的目录结构和更强的拓展能力，这两点如果能做到，自然会带来更强的可维护性。\n\n这三点是传统 CSS 所做不到的，也正是预处理器所解决掉的问题。预处理器普遍会具备这样的特性：\n\n- 嵌套代码的能力，通过嵌套来反映不同 css 属性之间的层级关系 ；\n- 支持定义 css 变量；\n- 提供计算函数；\n- 允许对代码片段进行 extend 和 mixin；\n- 支持循环语句的使用；\n- 支持将 CSS 文件模块化，实现复用。\n\n**（2）PostCss：PostCss 是如何工作的？我们在什么场景下会使用 PostCss？**\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2911f98bbacf4b1cbffbb9e1527a4977~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) 它和预处理器的不同就在于，预处理器处理的是 类CSS，而 PostCss 处理的就是 CSS 本身。Babel 可以将高版本的 JS 代码转换为低版本的 JS 代码。PostCss 做的是类似的事情：它可以编译尚未被浏览器广泛支持的先进的 CSS 语法，还可以自动为一些需要额外兼容的语法增加前缀。更强的是，由于 PostCss 有着强大的插件机制，支持各种各样的扩展，极大地强化了 CSS 的能力。\n\nPostCss 在业务中的使用场景非常多：\n\n- 提高 CSS 代码的可读性：PostCss 其实可以做类似预处理器能做的工作；\n- 当我们的 CSS 代码需要适配低版本浏览器时，PostCss 的 [Autoprefixer](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fpostcss%2Fautoprefixer) 插件可以帮助我们自动增加浏览器前缀；\n- 允许我们编写面向未来的 CSS：PostCss 能够帮助我们编译 CSS next 代码；\n\n**（3）Webpack 能处理 CSS 吗？如何实现？** Webpack 能处理 CSS 吗：\n\n- **Webpack 在裸奔的状态下，是不能处理 CSS 的**，Webpack 本身是一个面向 JavaScript 且只能处理 JavaScript 代码的模块化打包工具；\n- Webpack 在 loader 的辅助下，是可以处理 CSS 的。\n\n如何用 Webpack 实现对 CSS 的处理：\n\n- Webpack 中操作 CSS 需要使用的两个关键的 loader：css-loader 和 style-loader\n- 注意，答出“用什么”有时候可能还不够，面试官会怀疑你是不是在背答案，所以你还需要了解每个 loader 都做了什么事情：\n  - css-loader：导入 CSS 模块，对 CSS 代码进行编译处理；\n  - style-loader：创建style标签，把 CSS 内容写入标签。\n\n在实际使用中，**css-loader 的执行顺序一定要安排在 style-loader 的前面**。因为只有完成了编译过程，才可以对 css 代码进行插入；若提前插入了未编译的代码，那么 webpack 是无法理解这坨东西的，它会无情报错。\n\n### 29. 如何判断元素是否到达可视区域\n\n以图片显示为例：\n\n- `window.innerHeight` 是浏览器可视区的高度；\n- `document.body.scrollTop || document.documentElement.scrollTop` 是浏览器滚动的过的距离；\n- `imgs.offsetTop` 是元素顶部距离文档顶部的高度（包括滚动条的距离）；\n- 内容达到显示区域的：`img.offsetTop < window.innerHeight + document.body.scrollTop;`\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c57fc165a4ce4d5b9a2885867d4f1cab~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)\n\n### 30. z-index属性在什么情况下会失效\n\n通常 z-index 的使用是在有两个重叠的标签，在一定的情况下控制其中一个在另一个的上方或者下方出现。z-index值越大就越是在上层。z-index元素的position属性需要是relative，absolute或是fixed。\n\nz-index属性在下列情况下会失效：\n\n- 父元素position为relative时，子元素的z-index失效。解决：父元素position改为absolute或static；\n- 元素没有设置position属性为非static属性。解决：设置该元素的position属性为relative，absolute或是fixed中的一种；\n- 元素在设置z-index的同时还设置了float浮动。解决：float去除，改为display：inline-block；\n\n### 31. CSS3中的transform有哪些属性\n\n## 二、页面布局\n\n### 1. 常见的CSS布局单位\n\n常用的布局单位包括像素（`px`），百分比（`%`），`em`，`rem`，`vw/vh`。\n\n**（1）像素**（`px`）是页面布局的基础，一个像素表示终端（电脑、手机、平板等）屏幕所能显示的最小的区域，像素分为两种类型：CSS像素和物理像素：\n\n- **CSS像素**：为web开发者提供，在CSS中使用的一个抽象单位；\n- **物理像素**：只与设备的硬件密度有关，任何设备的物理像素都是固定的。\n\n**（2）百分比**（`%`），当浏览器的宽度或者高度发生变化时，通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。一般认为子元素的百分比相对于直接父元素。\n\n**（3）em和rem**相对于px更具灵活性，它们都是相对长度单位，它们之间的区别：**em相对于父元素，rem相对于根元素。**\n\n- **em：** 文本相对长度单位。相对于当前对象内文本的字体尺寸。如果当前行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸(默认16px)。(相对父元素的字体大小倍数)。\n- **rem：** rem是CSS3新增的一个相对单位，相对于根元素（html元素）的font-size的倍数。**作用**：利用rem可以实现简单的响应式布局，可以利用html元素中字体的大小与屏幕间的比值来设置font-size的值，以此实现当屏幕分辨率变化时让元素也随之变化。\n\n**（4）vw/vh**是与视图窗口有关的单位，vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度，除了vw和vh外，还有vmin和vmax两个相关的单位。\n\n- vw：相对于视窗的宽度，视窗宽度是100vw；\n- vh：相对于视窗的高度，视窗高度是100vh；\n- vmin：vw和vh中的较小值；\n- vmax：vw和vh中的较大值；\n\n**vw/vh** 和百分比很类似，两者的区别：\n\n- 百分比（`%`）：大部分相对于祖先元素，也有相对于自身的情况比如（border-radius、translate等)\n- vw/vm：相对于视窗的尺寸\n\n### 2. px、em、rem的区别及使用场景\n\n**三者的区别：**\n\n- px是固定的像素，一旦设置了就无法因为适应页面大小而改变。\n- em和rem相对于px更具有灵活性，他们是相对长度单位，其长度不是固定的，更适用于响应式布局。\n- em是相对于其父元素来设置字体大小，这样就会存在一个问题，进行任何元素设置，都有可能需要知道他父元素的大小。而rem是相对于根元素，这样就意味着，只需要在根元素确定一个参考值。\n\n**使用场景：**\n\n- 对于只需要适配少部分移动设备，且分辨率对页面影响不大的，使用px即可 。\n- 对于需要适配各种移动设备，使用rem，例如需要适配iPhone和iPad等分辨率差别比较挺大的设备。\n\n### 3. 两栏布局的实现\n\n一般两栏布局指的是**左边一栏宽度固定，右边一栏宽度自适应**，两栏布局的具体实现：\n\n- 利用浮动，将左边元素宽度设置为200px，并且设置向左浮动。将右边元素的margin-left设置为200px，宽度设置为auto（默认为auto，撑满整个父元素）。\n\n```css\n.outer {\n  height: 100px;\n}\n.left {\n  float: left;\n  width: 200px;\n  background: tomato;\n}\n.right {\n  margin-left: 200px;\n  width: auto;\n  background: gold;\n}\n```\n\n- 利用浮动，左侧元素设置固定大小，并左浮动，右侧元素设置overflow: hidden; 这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠。\n\n```css\n.left{\n     width: 100px;\n     height: 200px;\n     background: red;\n     float: left;\n }\n .right{\n     height: 300px;\n     background: blue;\n     overflow: hidden;\n }\n```\n\n- 利用flex布局，将左边元素设置为固定宽度200px，将右边的元素设置为flex:1。\n\n```css\n.outer {\n  display: flex;\n  height: 100px;\n}\n.left {\n  width: 200px;\n  background: tomato;\n}\n.right {\n  flex: 1;\n  background: gold;\n}\n```\n\n- 利用绝对定位，将父级元素设置为相对定位。左边元素设置为absolute定位，并且宽度设置为200px。将右边元素的margin-left的值设置为200px。\n\n```css\n.outer {\n  position: relative;\n  height: 100px;\n}\n.left {\n  position: absolute;\n  width: 200px;\n  height: 100px;\n  background: tomato;\n}\n.right {\n  margin-left: 200px;\n  background: gold;\n}\n```\n\n- 利用绝对定位，将父级元素设置为相对定位。左边元素宽度设置为200px，右边元素设置为绝对定位，左边定位为200px，其余方向定位为0。\n\n```css\n.outer {\n  position: relative;\n  height: 100px;\n}\n.left {\n  width: 200px;\n  background: tomato;\n}\n.right {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 200px;\n  background: gold;\n}\n```\n\n### 4. 三栏布局的实现\n\n三栏布局一般指的是页面中一共有三栏，**左右两栏宽度固定，中间自适应的布局**，三栏布局的具体实现：\n\n- 利用**绝对定位**，左右两栏设置为绝对定位，中间设置对应方向大小的margin的值。\n\n```css\n.outer {\n  position: relative;\n  height: 100px;\n}\n\n.left {\n  position: absolute;\n  width: 100px;\n  height: 100px;\n  background: tomato;\n}\n\n.right {\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 200px;\n  height: 100px;\n  background: gold;\n}\n\n.center {\n  margin-left: 100px;\n  margin-right: 200px;\n  height: 100px;\n  background: lightgreen;\n}\n```\n\n- 利用flex布局，左右两栏设置固定大小，中间一栏设置为flex:1。\n\n```css\n.outer {\n  display: flex;\n  height: 100px;\n}\n\n.left {\n  width: 100px;\n  background: tomato;\n}\n\n.right {\n  width: 100px;\n  background: gold;\n}\n\n.center {\n  flex: 1;\n  background: lightgreen;\n}\n```\n\n- 利用浮动，左右两栏设置固定大小，并设置对应方向的浮动。中间一栏设置左右两个方向的margin值，注意这种方式**，中间一栏必须放到最后：**\n\n```css\n.outer {\n  height: 100px;\n}\n\n.left {\n  float: left;\n  width: 100px;\n  height: 100px;\n  background: tomato;\n}\n\n.right {\n  float: right;\n  width: 200px;\n  height: 100px;\n  background: gold;\n}\n\n.center {\n  height: 100px;\n  margin-left: 100px;\n  margin-right: 200px;\n  background: lightgreen;\n}\n```\n\n- 圣杯布局，利用浮动和负边距来实现。父级元素设置左右的 padding，三列均设置向左浮动，中间一列放在最前面，宽度设置为父级元素的宽度，因此后面两列都被挤到了下一行，通过设置 margin 负值将其移动到上一行，再利用相对定位，定位到两边。\n\n```css\n.outer {\n  height: 100px;\n  padding-left: 100px;\n  padding-right: 200px;\n}\n\n.left {\n  position: relative;\n  left: -100px;\n\n  float: left;\n  margin-left: -100%;\n\n  width: 100px;\n  height: 100px;\n  background: tomato;\n}\n\n.right {\n  position: relative;\n  left: 200px;\n\n  float: right;\n  margin-left: -200px;\n\n  width: 200px;\n  height: 100px;\n  background: gold;\n}\n\n.center {\n  float: left;\n\n  width: 100%;\n  height: 100px;\n  background: lightgreen;\n}\n```\n\n- 双飞翼布局，双飞翼布局相对于圣杯布局来说，左右位置的保留是通过中间列的 margin 值来实现的，而不是通过父元素的 padding 来实现的。本质上来说，也是通过浮动和外边距负值来实现的。\n\n```css\n.outer {\n  height: 100px;\n}\n\n.left {\n  float: left;\n  margin-left: -100%;\n\n  width: 100px;\n  height: 100px;\n  background: tomato;\n}\n\n.right {\n  float: left;\n  margin-left: -200px;\n\n  width: 200px;\n  height: 100px;\n  background: gold;\n}\n\n.wrapper {\n  float: left;\n\n  width: 100%;\n  height: 100px;\n  background: lightgreen;\n}\n\n.center {\n  margin-left: 100px;\n  margin-right: 200px;\n  height: 100px;\n}\n```\n\n### 5. 水平垂直居中的实现\n\n- 利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过translate来调整元素的中心点到页面的中心。该方法需要**考虑浏览器兼容问题。**\n\n```css\n.parent {    position: relative;} .child {    position: absolute;    left: 50%;    top: 50%;    transform: translate(-50%,-50%);}\n```\n\n- 利用绝对定位，设置四个方向的值都为0，并将margin设置为auto，由于宽高固定，因此对应方向实现平分，可以实现水平和垂直方向上的居中。该方法适用于**盒子有宽高**的情况：\n\n```css\n.parent {\n    position: relative;\n}\n \n.child {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: auto;\n}\n```\n\n- 利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过margin负值来调整元素的中心点到页面的中心。该方法适用于**盒子宽高已知**的情况\n\n```css\n.parent {\n    position: relative;\n}\n \n.child {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-top: -50px;     /* 自身 height 的一半 */\n    margin-left: -50px;    /* 自身 width 的一半 */\n}\n```\n\n- 使用flex布局，通过align-items:center和justify-content:center设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。该方法要**考虑兼容的问题**，该方法在移动端用的较多：\n\n```css\n.parent {\n    display: flex;\n    justify-content:center;\n    align-items:center;\n}\n```\n\n### 6. 如何根据设计稿进行移动端适配？\n\n移动端适配主要有两个维度：\n\n- **适配不同像素密度，** 针对不同的像素密度，使用 CSS 媒体查询，选择不同精度的图片，以保证图片不会失真；\n- **适配不同屏幕大小，** 由于不同的屏幕有着不同的逻辑像素大小，所以如果直接使用 px 作为开发单位，会使得开发的页面在某一款手机上可以准确显示，但是在另一款手机上就会失真。为了适配不同屏幕的大小，应按照比例来还原设计稿的内容。\n\n为了能让页面的尺寸自适应，可以使用 rem，em，vw，vh 等相对单位。\n\n### 7. 对Flex布局的理解及其使用场景\n\nFlex是FlexibleBox的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。行内元素也可以使用Flex布局。注意，设为Flex布局以后，**子元素的float、clear和vertical-align属性将失效**。采用Flex布局的元素，称为Flex容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称\"项目\"。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis），项目默认沿水平主轴排列。\n\n以下6个属性设置在**容器上**：\n\n- flex-direction属性决定主轴的方向（即项目的排列方向）。\n- flex-wrap属性定义，如果一条轴线排不下，如何换行。\n- flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\n- justify-content属性定义了项目在主轴上的对齐方式。\n- align-items属性定义项目在交叉轴上如何对齐。\n- align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n\n以下6个属性设置在**项目上**：\n\n- order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n- flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n- flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n- flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n- flex属性是flex-grow，flex-shrink和flex-basis的简写，默认值为0 1 auto。\n- align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n\n**简单来说：** flex布局是CSS3新增的一种布局方式，可以通过将一个元素的display属性值设置为flex从而使它成为一个flex容器，它的所有子元素都会成为它的项目。一个容器默认有两条轴：一个是水平的主轴，一个是与主轴垂直的交叉轴。可以使用flex-direction来指定主轴的方向。可以使用justify-content来指定元素在主轴上的排列方式，使用align-items来指定元素在交叉轴上的排列方式。还可以使用flex-wrap来规定当一行排列不下时的换行方式。对于容器中的项目，可以使用order属性来指定项目的排列顺序，还可以使用flex-grow来指定当排列空间有剩余的时候，项目的放大比例，还可以使用flex-shrink来指定当排列空间不足时，项目的缩小比例。\n\n### 8. 响应式设计的概念及基本原理\n\n响应式网站设计`（Responsive Web design`）是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。\n\n关于原理： 基本原理是通过媒体查询`（@media）`查询检测不同的设备屏幕尺寸做处理。 关于兼容： 页面头部必须有mate声明的`viewport`。\n\n```html\n<meta name=\"’viewport’\" content=\"”width=device-width,\" initial-scale=\"1.\" maximum-scale=\"1,user-scalable=no”\"/>\n```\n\n## 三、定位与浮动\n\n### 1. 为什么需要清除浮动？清除浮动的方式\n\n**浮动的定义：** 非IE浏览器下，容器不设高度且子元素浮动时，容器高度不能被内容撑开。 此时，内容会溢出到容器外面而影响布局。这种现象被称为浮动（溢出）。\n\n**浮动的工作原理：**\n\n- 浮动元素脱离文档流，不占据空间（引起“高度塌陷”现象）\n- 浮动元素碰到包含它的边框或者其他浮动元素的边框停留\n\n浮动元素可以左右移动，直到遇到另一个浮动元素或者遇到它外边缘的包含框。浮动框不属于文档流中的普通流，当元素浮动之后，不会影响块级元素的布局，只会影响内联元素布局。此时文档流中的普通流就会表现得该浮动框不存在一样的布局模式。当包含框的高度小于浮动框的时候，此时就会出现“高度塌陷”。\n\n**浮动元素引起的问题？**\n\n- 父元素的高度无法被撑开，影响与父元素同级的元素\n- 与浮动元素同级的非浮动元素会跟随其后\n- 若浮动的元素不是第一个元素，则该元素之前的元素也要浮动，否则会影响页面的显示结构\n\n**清除浮动的方式如下：**\n\n- 给父级div定义`height`属性\n- 最后一个浮动元素之后添加一个空的div标签，并添加`clear:both`样式\n- 包含浮动元素的父级标签添加`overflow:hidden`或者`overflow:auto`\n- 使用 :after 伪元素。由于IE6-7不支持 :after，使用 zoom:1 触发 hasLayout**\n\n```css\n.clearfix:after{\n    content: \"\\200B\";\n    display: table; \n    height: 0;\n    clear: both;\n  }\n  .clearfix{\n    *zoom: 1;\n  }\n```\n\n### 2. 使用 clear 属性清除浮动的原理？\n\n使用clear属性清除浮动，其语法如下：\n\n```css\nclear:none|left|right|both\n```\n\n如果单看字面意思，clear:left 是“清除左浮动”，clear:right 是“清除右浮动”，实际上，这种解释是有问题的，因为浮动一直还在，并没有清除。\n\n官方对clear属性解释：“**元素盒子的边不能和前面的浮动元素相邻**”，对元素设置clear属性是为了避免浮动元素对该元素的影响，而不是清除掉浮动。\n\n还需要注意 clear 属性指的是元素盒子的边不能和前面的浮动元素相邻，注意这里“**前面的**”3个字，也就是clear属性对“后面的”浮动元素是不闻不问的。考虑到float属性要么是left，要么是right，不可能同时存在，同时由于clear属性对“后面的”浮动元素不闻不问，因此，当clear:left有效的时候，clear:right必定无效，也就是此时clear:left等同于设置clear:both；同样地，clear:right如果有效也是等同于设置clear:both。由此可见，clear:left和clear:right这两个声明就没有任何使用的价值，至少在CSS世界中是如此，直接使用clear:both吧。\n\n一般使用伪元素的方式清除浮动：\n\n```css\n.clear::after{  content:'';  display: block;   clear:both;}\n```\n\nclear属性只有块级元素才有效的，而::after等伪元素默认都是内联水平，这就是借助伪元素清除浮动影响时需要设置display属性值的原因。\n\n### 3. 对BFC的理解，如何创建BFC\n\n先来看两个相关的概念：\n\n- Box: Box 是 CSS 布局的对象和基本单位，⼀个⻚⾯是由很多个 Box 组成的，这个Box就是我们所说的盒模型。\n- Formatting context：块级上下⽂格式化，它是⻚⾯中的⼀块渲染区域，并且有⼀套渲染规则，它决定了其⼦元素将如何定位，以及和其他元素的关系和相互作⽤。\n\n块格式化上下文（Block Formatting Context，BFC）是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。\n\n通俗来讲：BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定规则进行物品摆放，并且不会影响其它环境中的物品。如果一个元素符合触发BFC的条件，则BFC中的元素布局不受外部影响。\n\n**创建BFC的条件：**\n\n- 根元素：body；\n- 元素设置浮动：float 除 none 以外的值；\n- 元素设置绝对定位：position (absolute、fixed)；\n- display 值为：inline-block、table-cell、table-caption、flex等；\n- overflow 值为：hidden、auto、scroll；\n\n**BFC的特点：**\n\n- 垂直方向上，自上而下排列，和文档流的排列方式一致。\n- 在BFC中上下相邻的两个容器的margin会重叠\n- 计算BFC的高度时，需要计算浮动元素的高度\n- BFC区域不会与浮动的容器发生重叠\n- BFC是独立的容器，容器内部元素不会影响外部元素\n- 每个元素的左margin值和容器的左border相接触\n\n**BFC的作用：**\n\n- **解决margin的重叠问题**：由于BFC是一个独立的区域，内部的元素和外部的元素互不影响，将两个元素变为两个BFC，就解决了margin重叠的问题。\n- **解决高度塌陷的问题**：在对子元素设置浮动后，父元素会发生高度塌陷，也就是父元素的高度变为0。解决这个问题，只需要把父元素变成一个BFC。常用的办法是给父元素设置`overflow:hidden`。\n- **创建自适应两栏布局**：可以用来创建自适应两栏布局：左边的宽度固定，右边的宽度自适应。\n\n```css\n.left{\n     width: 100px;\n     height: 200px;\n     background: red;\n     float: left;\n }\n .right{\n     height: 300px;\n     background: blue;\n     overflow: hidden;\n }\n \n<div class=\"left\"></div>\n<div class=\"right\"></div>\n```\n\n左侧设置`float:left`，右侧设置`overflow: hidden`。这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠，实现了自适应两栏布局。\n\n### 4. 什么是margin重叠问题？如何解决？\n\n**问题描述：** 两个块级元素的上外边距和下外边距可能会合并（折叠）为一个外边距，其大小会取其中外边距值大的那个，这种行为就是外边距折叠。需要注意的是，**浮动的元素和绝对定位**这种脱离文档流的元素的外边距不会折叠。重叠只会出现在**垂直方向**。\n\n**计算原则：** 折叠合并后外边距的计算原则如下：\n\n- 如果两者都是正数，那么就去最大者\n- 如果是一正一负，就会正值减去负值的绝对值\n- 两个都是负值时，用0减去两个中绝对值大的那个\n\n**解决办法：** 对于折叠的情况，主要有两种：**兄弟之间重叠**和**父子之间重叠** （1）兄弟之间重叠\n\n- 底部元素变为行内盒子：`display: inline-block`\n- 底部元素设置浮动：`float`\n- 底部元素的position的值为`absolute/fixed`\n\n（2）父子之间重叠\n\n- 父元素加入：`overflow: hidden`\n- 父元素添加透明边框：`border:1px solid transparent`\n- 子元素变为行内盒子：`display: inline-block`\n- 子元素加入浮动属性或定位\n\n### 5. 元素的层叠顺序\n\n层叠顺序，英文称作 stacking order，表示元素发生层叠时有着特定的垂直显示顺序。下面是盒模型的层叠规则： ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbc59ae1adb5454c8c7f60582df10ff9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) 对于上图，由上到下分别是： （1）背景和边框：建立当前层叠上下文元素的背景和边框。 （2）负的z-index：当前层叠上下文中，z-index属性值为负的元素。 （3）块级盒：文档流内非行内级非定位后代元素。 （4）浮动盒：非定位浮动元素。 （5）行内盒：文档流内行内级非定位后代元素。 （6）z-index:0：层叠级数为0的定位元素。 （7）正z-index：z-index属性值为正的定位元素。\n\n**注意:** 当定位元素z-index:auto，生成盒在当前层叠上下文中的层级为 0，不会建立新的层叠上下文，除非是根元素。\n\n### 6. position的属性有哪些，区别是什么\n\nposition有以下属性值：\n\n| 属性值   | 概述                                                         |\n| -------- | ------------------------------------------------------------ |\n| absolute | 生成绝对定位的元素，相对于static定位以外的一个父元素进行定位。元素的位置通过left、top、right、bottom属性进行规定。 |\n| relative | 生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过left、top、right、bottom属性进行规定。 |\n| fixed    | 生成绝对定位的元素，指定元素相对于屏幕视⼝（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变，⽐如回到顶部的按钮⼀般都是⽤此定位⽅式。 |\n| static   | 默认值，没有定位，元素出现在正常的文档流中，会忽略 top, bottom, left, right 或者 z-index 声明，块级元素从上往下纵向排布，⾏级元素从左向右排列。 |\n| inherit  | 规定从父元素继承position属性的值                             |\n\n前面三者的定位方式如下：\n\n- **relative：** 元素的定位永远是相对于元素自身位置的，和其他元素没关系，也不会影响其他元素。\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6523548b65834c578202acc5e6388af4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)\n\n- **fixed：** 元素的定位是相对于 window （或者 iframe）边界的，和其他元素没有关系。但是它具有破坏性，会导致其他元素位置的变化。\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b35e646aa3c4d9cac803753d8b67c39~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)\n\n- **absolute：** 元素的定位相对于前两者要复杂许多。如果为 absolute 设置了 top、left，浏览器会根据什么去确定它的纵向和横向的偏移量呢？答案是浏览器会递归查找该元素的所有父元素，如果找到一个设置了`position:relative/absolute/fixed`的元素，就以该元素为基准定位，如果没找到，就以浏览器边界定位。如下两个图所示：\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6d4f199b3f842f090890eea32318e11~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2c7150bd7614a548f04a2919f1ea12a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)\n\n### 7. **display、float、position的关系**\n\n（1）首先判断display属性是否为none，如果为none，则position和float属性的值不影响元素最后的表现。\n\n（2）然后判断position的值是否为absolute或者fixed，如果是，则float属性失效，并且display的值应该被设置为table或者block，具体转换需要看初始转换值。\n\n（3）如果position的值不为absolute或者fixed，则判断float属性的值是否为none，如果不是，则display的值则按上面的规则转换。注意，如果position的值为relative并且float属性的值存在，则relative相对于浮动后的最终位置定位。\n\n（4）如果float的值为none，则判断元素是否为根元素，如果是根元素则display属性按照上面的规则转换，如果不是，则保持指定的display属性值不变。\n\n总的来说，可以把它看作是一个类似优先级的机制，\"position:absolute\"和\"position:fixed\"优先级最高，有它存在的时候，浮动不起作用，'display'的值也需要调整；其次，元素的'float'特性的值不是\"none\"的时候或者它是根元素的时候，调整'display'的值；最后，非根元素，并且非浮动元素，并且非绝对定位的元素，'display'特性值同设置值。\n\n### 8. absolute与fixed共同点与不同点\n\n**共同点：**\n\n- 改变行内元素的呈现方式，将display置为inline-block \n- 使元素脱离普通文档流，不再占据文档物理空间\n- 覆盖非定位文档元素\n\n**不同点：**\n\n- abuselute与fixed的根元素不同，abuselute的根元素可以设置，fixed根元素是浏览器。\n- 在有滚动条的页面中，absolute会跟着父元素进行移动，fixed固定在页面的具体位置。\n\n### 9. 对 sticky 定位的理解\n\nsticky 英文字面意思是粘贴，所以可以把它称之为粘性定位。语法：**position: sticky;** 基于用户的滚动位置来定位。\n\n粘性定位的元素是依赖于用户的滚动，在 **position:relative** 与 **position:fixed** 定位之间切换。它的行为就像 **position:relative;** 而当页面滚动超出目标区域时，它的表现就像 **position:fixed;**，它会固定在目标位置。元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。这个特定阈值指的是 top, right, bottom 或 left 之一，换言之，指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。\n\n## 四、场景应用\n\n### 1. 实现一个三角形\n\nCSS绘制三角形主要用到的是border属性，也就是边框。\n\n平时在给盒子设置边框时，往往都设置很窄，就可能误以为边框是由矩形组成的。实际上，border属性是右三角形组成的，下面看一个例子：\n\n```css\ndiv {\n    width: 0;\n    height: 0;\n    border: 100px solid;\n    border-color: orange blue red green;\n}\n```\n\n将元素的长宽都设置为0，显示出来的效果是这样的： ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cba8731fea9842a8b8103c2b387fe64f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) 所以可以根据border这个特性来绘制三角形： **（1）三角1**\n\n```css\ndiv {    width: 0;    height: 0;    border-top: 50px solid red;    border-right: 50px solid transparent;    border-left: 50px solid transparent;}\n```\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab996951a0cc42cf9e6d9e12eb827f8b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) **（2）三角2**\n\n```css\ndiv {\n    width: 0;\n    height: 0;\n    border-bottom: 50px solid red;\n    border-right: 50px solid transparent;\n    border-left: 50px solid transparent;\n}\n```\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/531c6c250dd8446fb0f264e7b3df6fba~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) **（3）三角3**\n\n```css\ndiv {\n    width: 0;\n    height: 0;\n    border-left: 50px solid red;\n    border-top: 50px solid transparent;\n    border-bottom: 50px solid transparent;\n}\n```\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4beaf4e4a0140ad9e7252f8a6e4e8e6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) **（4）三角4**\n\n```css\ndiv {\n    width: 0;\n    height: 0;\n    border-right: 50px solid red;\n    border-top: 50px solid transparent;\n    border-bottom: 50px solid transparent;\n}\n```\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/445f50ad19164b0f863ad8dfef2a29b1~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) **（5）三角5**\n\n```css\ndiv {\n    width: 0;\n    height: 0;\n    border-top: 100px solid red;\n    border-right: 100px solid transparent;\n}\n```\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1ac630463164e42a027b54bb95f56ba~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) 还有很多，就不一一实现了，总体的原则就是通过上下左右边框来控制三角形的方向，用边框的宽度比来控制三角形的角度。\n\n### 2. 实现一个扇形\n\n用CSS实现扇形的思路和三角形基本一致，就是多了一个圆角的样式，实现一个90°的扇形：\n\n```css\ndiv{\n    border: 100px solid transparent;\n    width: 0;\n    heigt: 0;\n    border-radius: 100px;\n    border-top-color: red;\n}\n```\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db5e46aea0ce4805a0c2bbec2743546e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)\n\n### 3. 实现一个宽高自适应的正方形\n\n- 利用vw来实现：\n\n```css\n.square {\n  width: 10%;\n  height: 10vw;\n  background: tomato;\n}\n```\n\n- 利用元素的margin/padding百分比是相对父元素width的性质来实现：\n\n```css\n.square {\n  width: 20%;\n  height: 0;\n  padding-top: 20%;\n  background: orange;\n}\n```\n\n- 利用子元素的margin-top的值来实现：\n\n```css\n.square {\n  width: 30%;\n  overflow: hidden;\n  background: yellow;\n}\n.square::after {\n  content: '';\n  display: block;\n  margin-top: 100%;\n}\n```\n\n### 4. 画一条0.5px的线\n\n- **采用transform: scale()的方式**，该方法用来定义元素的2D 缩放转换：\n\n```css\ntransform: scale(0.5,0.5);\n```\n\n- **采用meta viewport的方式**\n\n```css\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=0.5, minimum-scale=0.5, maximum-scale=0.5\"/>\n```\n\n这样就能缩放到原来的0.5倍，如果是1px那么就会变成0.5px。viewport只针对于移动端，只在移动端上才能看到效果\n\n### 5. 设置小于12px的字体\n\n在谷歌下css设置字体大小为12px及以下时，显示都是一样大小，都是默认12px。\n\n**解决办法：**\n\n- 使用Webkit的内核的-webkit-text-size-adjust的私有CSS属性来解决，只要加了-webkit-text-size-adjust:none;字体大小就不受限制了。但是chrome更新到27版本之后就不可以用了。所以高版本chrome谷歌浏览器已经不再支持-webkit-text-size-adjust样式，所以要使用时候慎用。\n- 使用css3的transform缩放属性-webkit-transform:scale(0.5); 注意-webkit-transform:scale(0.75);收缩的是整个元素的大小，这时候，如果是内联元素，必须要将内联元素转换成块元素，可以使用display：block/inline-block/...；\n- 使用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。\n\n### 6. 如何解决 1px 问题？\n\n1px 问题指的是：在一些 `Retina屏幕` 的机型上，移动端页面的 1px 会变得很粗，呈现出不止 1px 的效果。原因很简单——CSS 中的 1px 并不能和移动设备上的 1px 划等号。它们之间的比例关系有一个专门的属性来描述：\n\n```html\nwindow.devicePixelRatio = 设备的物理像素 / CSS像素。\n```\n\n打开 Chrome 浏览器，启动移动端调试模式，在控制台去输出这个 `devicePixelRatio` 的值。这里选中 iPhone6/7/8 这系列的机型，输出的结果就是2： ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a8af7dca29f84b7e9d1f94232713ef07~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) 这就意味着设置的 1px CSS 像素，在这个设备上实际会用 2 个物理像素单元来进行渲染，所以实际看到的一定会比 1px 粗一些。 **解决1px 问题的三种思路：**\n\n#### 思路一：直接写 0.5px\n\n如果之前 1px 的样式这样写：\n\n```css\nborder:1px solid #333\n```\n\n可以先在 JS 中拿到 window.devicePixelRatio 的值，然后把这个值通过 JSX 或者模板语法给到 CSS 的 data 里，达到这样的效果（这里用 JSX 语法做示范）：\n\n```javascript\n<div id=\"container\" data-device={{window.devicePixelRatio}}></div>\n```\n\n然后就可以在 CSS 中用属性选择器来命中 devicePixelRatio 为某一值的情况，比如说这里尝试命中 devicePixelRatio 为2的情况：\n\n```css\n#container[data-device=\"2\"] {\n  border:0.5px solid #333\n}\n```\n\n直接把 1px 改成 1/devicePixelRatio 后的值，这是目前为止最简单的一种方法。这种方法的缺陷在于兼容性不行，IOS 系统需要8及以上的版本，安卓系统则直接不兼容。\n\n#### 思路二：伪元素先放大后缩小\n\n这个方法的可行性会更高，兼容性也更好。唯一的缺点是代码会变多。\n\n思路是**先放大、后缩小：在目标元素的后面追加一个 ::after 伪元素，让这个元素布局为 absolute 之后、整个伸展开铺在目标元素上，然后把它的宽和高都设置为目标元素的两倍，border值设为 1px。接着借助 CSS 动画特效中的放缩能力，把整个伪元素缩小为原来的 50%。此时，伪元素的宽高刚好可以和原有的目标元素对齐，而 border 也缩小为了 1px 的二分之一，间接地实现了 0.5px 的效果。**\n\n代码如下：\n\n```css\n#container[data-device=\"2\"] {\n    position: relative;\n}\n#container[data-device=\"2\"]::after{\n      position:absolute;\n      top: 0;\n      left: 0;\n      width: 200%;\n      height: 200%;\n      content:\"\";\n      transform: scale(0.5);\n      transform-origin: left top;\n      box-sizing: border-box;\n      border: 1px solid #333;\n    }\n}\n```\n\n#### 思路三：viewport 缩放来解决\n\n这个思路就是对 meta 标签里几个关键属性下手：\n\n```html\n<meta name=\"viewport\" content=\"initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no\">\n```\n\n这里针对像素比为2的页面，把整个页面缩放为了原来的1/2大小。这样，本来占用2个物理像素的 1px 样式，现在占用的就是标准的一个物理像素。根据像素比的不同，这个缩放比例可以被计算为不同的值，用 js 代码实现如下：\n\n```javascript\nconst scale = 1 / window.devicePixelRatio;\n// 这里 metaEl 指的是 meta 标签对应的 Dom\nmetaEl.setAttribute('content', `width=device-width,user-scalable=no,initial-scale=${scale},maximum-scale=${scale},minimum-scale=${scale}`);\n```\n\n这样解决了，但这样做的副作用也很大，整个页面被缩放了。这时 1px 已经被处理成物理像素大小，这样的大小在手机上显示边框很合适。但是，一些原本不需要被缩小的内容，比如文字、图片等，也被无差别缩小掉了。\n\n","source":"_posts/js/css复习.md","raw":"---\ntitle: css复习\ntags:\n  - css\ncategories: 面试\nkeywords: css复习\ndescription: css复习\ntop_img: 'https://raw.githubusercontent.com/why862555625/images/main/images/222.jpg'\nsticky: 数值越大越靠前\ncover: 'https://raw.githubusercontent.com/why862555625/images/main/images/222.jpg'\ncomments: false评论\nabbrlink: ed9fe6ee\ndate: 2023-06-08 14:36:25\nupdated: 2023-06-08 14:36:25\n---\n\n\n\n摘要\n\n<!-- more -->\n\n![image-20230608144415180](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230608144415180.png)\n\n## 一、CSS基础\n\n### 1. CSS选择器及其优先级\n\n| **选择器**     | **格式**      | **优先级权重** |\n| -------------- | ------------- | -------------- |\n| id选择器       | #id           | 100            |\n| 类选择器       | #classname    | 10             |\n| 属性选择器     | a[ref=“eee”]  | 10             |\n| 伪类选择器     | li:last-child | 10             |\n| 标签选择器     | div           | 1              |\n| 伪元素选择器   | li:after      | 1              |\n| 相邻兄弟选择器 | h1+p          | 0              |\n| 子选择器       | ul>li         | 0              |\n| 后代选择器     | li a          | 0              |\n| 通配符选择器   | *             | 0              |\n\n对于选择器的**优先级**：\n\n- 标签选择器、伪元素选择器：1\n- 类选择器、伪类选择器、属性选择器：10\n- id 选择器：100\n- 内联样式：1000\n\n**注意事项：**\n\n- !important声明的样式的优先级最高；\n- 如果优先级相同，则最后出现的样式生效；\n- 继承得到的样式的优先级最低；\n- 通用选择器（*）、子选择器（>）和相邻同胞选择器（+）并不在这四个等级中，所以它们的权值都为 0 ；\n- 样式表的来源不同时，优先级顺序为：内联样式 > 内部样式 > 外部样式 > 浏览器用户自定义样式 > 浏览器默认样式。\n\n### 2. CSS中可继承与不可继承属性有哪些\n\n**一、无继承性的属性**\n\n1. **display**：规定元素应该生成的框的类型\n2. **文本属性**：\n\n- vertical-align：垂直文本对齐\n- text-decoration：规定添加到文本的装饰\n- text-shadow：文本阴影效果\n- white-space：空白符的处理\n- unicode-bidi：设置文本的方向\n\n1. **盒子模型的属性**：width、height、margin、border、padding\n2. **背景属性**：background、background-color、background-image、background-repeat、background-position、background-attachment\n3. **定位属性**：float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index\n4. **生成内容属性**：content、counter-reset、counter-increment\n5. **轮廓样式属性**：outline-style、outline-width、outline-color、outline\n6. **页面样式属性**：size、page-break-before、page-break-after\n7. **声音样式属性**：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during\n\n**二、有继承性的属性**\n\n1. **字体系列属性**\n\n- font-family：字体系列\n- font-weight：字体的粗细\n- font-size：字体的大小\n- font-style：字体的风格\n\n1. **文本系列属性**\n\n- text-indent：文本缩进\n- text-align：文本水平对齐\n- line-height：行高\n- word-spacing：单词之间的间距\n- letter-spacing：中文或者字母之间的间距\n- text-transform：控制文本大小写（就是uppercase、lowercase、capitalize这三个）\n- color：文本颜色\n\n1. **元素可见性**\n\n- visibility：控制元素显示隐藏\n\n1. **列表布局属性**\n\n- list-style：列表风格，包括list-style-type、list-style-image等\n\n1. **光标属性**\n\n- cursor：光标显示为何种形态\n\n### 3. display的属性值及其作用\n\n| **属性值**   | **作用**                                                   |\n| ------------ | ---------------------------------------------------------- |\n| none         | 元素不显示，并且会从文档流中移除。                         |\n| block        | 块类型。默认宽度为父元素宽度，可设置宽高，换行显示。       |\n| inline       | 行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。 |\n| inline-block | 默认宽度为内容宽度，可以设置宽高，同行显示。               |\n| list-item    | 像块类型元素一样显示，并添加样式列表标记。                 |\n| table        | 此元素会作为块级表格来显示。                               |\n| inherit      | 规定应该从父元素继承display属性的值。                      |\n\n### 4. display的block、inline和inline-block的区别\n\n（1）**block：** 会独占一行，多个元素会另起一行，可以设置width、height、margin和padding属性；\n\n（2）**inline：** 元素不会独占一行，设置width、height属性无效。但可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin；\n\n（3）**inline-block：** 将对象设置为inline对象，但对象的内容作为block对象呈现，之后的内联对象会被排列在同一行内。\n\n对于行内元素和块级元素，其特点如下：\n\n**（1）行内元素**\n\n- 设置宽高无效；\n- 可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin；\n- 不会自动换行；\n\n**（2）块级元素**\n\n- 可以设置宽高；\n- 设置margin和padding都有效；\n- 可以自动换行；\n- 多个块状，默认排列从上到下。\n\n### 5. 隐藏元素的方法有哪些\n\n- **display: none**：渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件。\n- **visibility: hidden**：元素在页面中仍占据空间，但是不会响应绑定的监听事件。\n- **opacity: 0**：将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且能够响应元素绑定的监听事件。\n- **position: absolute**：通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。\n- **z-index: 负值**：来使其他元素遮盖住该元素，以此来实现隐藏。\n- **clip/clip-path** ：使用元素裁剪的方法来实现元素的隐藏，这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。\n- **transform: scale(0,0)**：将元素缩放为 0，来实现元素的隐藏。这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。\n\n### 6. link和@import的区别\n\n两者都是外部引用CSS的方式，它们的区别如下：\n\n- link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。\n- link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。\n- link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。\n- link支持使用Javascript控制DOM去改变样式；而@import不支持。\n\n### 7. transition和animation的区别\n\n- **transition是过度属性**，强调过度，它的实现需要触发一个事件（比如鼠标移动上去，焦点，点击等）才执行动画。它类似于flash的补间动画，设置一个开始关键帧，一个结束关键帧。\n- **animation是动画属性**，它的实现不需要触发事件，设定好时间之后可以自己执行，且可以循环一个动画。它也类似于flash的补间动画，但是它可以设置多个关键帧（用@keyframe定义）完成动画。\n\n### 8. display:none与visibility:hidden的区别\n\n这两个属性都是让元素隐藏，不可见。**两者区别如下：**\n\n（1）**在渲染树中**\n\n- `display:none`会让元素完全从渲染树中消失，渲染时不会占据任何空间；\n- `visibility:hidden`不会让元素从渲染树中消失，渲染的元素还会占据相应的空间，只是内容不可见。\n\n（2）**是否是继承属性**\n\n- `display:none`是非继承属性，子孙节点会随着父节点从渲染树消失，通过修改子孙节点的属性也无法显示；\n- `visibility:hidden`是继承属性，子孙节点消失是由于继承了`hidden`，通过设置`visibility:visible`可以让子孙节点显示； （3）修改常规文档流中元素的 `display` 通常会造成文档的重排，但是修改`visibility`属性只会造成本元素的重绘；\n\n（4）如果使用读屏器，设置为`display:none`的内容不会被读取，设置为`visibility:hidden`的内容会被读取。\n\n### 9. **伪元素和伪类的区别和作用？**\n\n- 伪元素：在内容元素的前后插入额外的元素或样式，但是这些元素实际上并不在文档中生成。它们只在外部显示可见，但不会在文档的源代码中找到它们，因此，称为“伪”元素。例如：\n\n```css\np::before {content:\"第一章：\";}\np::after {content:\"Hot!\";}\np::first-line {background:red;}\np::first-letter {font-size:30px;}\n```\n\n- 伪类：将特殊的效果添加到特定选择器上。它是已有元素上添加类别的，不会产生新的元素。例如：\n\n```css\na:hover {color: #FF00FF}\np:first-child {color: red}\n```\n\n**总结：** 伪类是通过在元素选择器上加⼊伪类改变元素状态，⽽伪元素通过对元素的操作进⾏对元素的改变。\n\n### 10. 对requestAnimationframe的理解\n\n实现动画效果的方法比较多，Javascript 中可以通过定时器 setTimeout 来实现，CSS3 中可以使用 transition 和 animation 来实现，HTML5 中的 canvas 也可以实现。除此之外，HTML5 提供一个专门用于请求动画的API，那就是 requestAnimationFrame，顾名思义就是**请求动画帧**。\n\nMDN对该方法的描述：\n\n> window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。\n\n**语法：** `window.requestAnimationFrame(callback);`  其中，callback是**下一次重绘之前更新动画帧所调用的函数**(即上面所说的回调函数)。该回调函数会被传入DOMHighResTimeStamp参数，它表示requestAnimationFrame() 开始去执行回调函数的时刻。该方法属于**宏任务**，所以会在执行完微任务之后再去执行。\n\n**取消动画：** 使用cancelAnimationFrame()来取消执行动画，该方法接收一个参数——requestAnimationFrame默认返回的id，只需要传入这个id就可以取消动画了。\n\n**优势：**\n\n- **CPU节能**：使用SetTinterval 实现的动画，当页面被隐藏或最小化时，SetTinterval 仍然在后台执行动画任务，由于此时页面处于不可见或不可用状态，刷新动画是没有意义的，完全是浪费CPU资源。而RequestAnimationFrame则完全不同，当页面处理未激活的状态下，该页面的屏幕刷新任务也会被系统暂停，因此跟着系统走的RequestAnimationFrame也会停止渲染，当页面被激活时，动画就从上次停留的地方继续执行，有效节省了CPU开销。\n- **函数节流**：在高频率事件( resize, scroll 等)中，为了防止在一个刷新间隔内发生多次函数执行，RequestAnimationFrame可保证每个刷新间隔内，函数只被执行一次，这样既能保证流畅性，也能更好的节省函数执行的开销，一个刷新间隔内函数执行多次时没有意义的，因为多数显示器每16.7ms刷新一次，多次绘制并不会在屏幕上体现出来。\n- **减少DOM操作**：requestAnimationFrame 会把每一帧中的所有DOM操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率，一般来说，这个频率为每秒60帧。\n\n**setTimeout执行动画的缺点**：它通过设定间隔时间来不断改变图像位置，达到动画效果。但是容易出现卡顿、抖动的现象；原因是：\n\n- settimeout任务被放入异步队列，只有当主线程任务执行完后才会执行队列中的任务，因此实际执行时间总是比设定时间要晚；\n- settimeout的固定时间间隔不一定与屏幕刷新间隔时间相同，会引起丢帧。\n\n### 11. 对盒模型的理解\n\nCSS3中的盒模型有以下两种：标准盒子模型、IE盒子模型 ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4544d45b5a0c47a58c0c33a7d8fbac09~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4040de9fef1a49f4ae0ae66039edcfe0~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) 盒模型都是由四个部分组成的，分别是margin、border、padding和content。\n\n标准盒模型和IE盒模型的区别在于设置width和height时，所对应的范围不同：\n\n- 标准盒模型的width和height属性的范围只包含了content，\n- IE盒模型的width和height属性的范围包含了border、padding和content。\n\n可以通过修改元素的box-sizing属性来改变元素的盒模型：\n\n- `box-sizeing: content-box`表示标准盒模型（默认值）\n- `box-sizeing: border-box`表示IE盒模型（怪异盒模型）\n\n### 12. 为什么有时候⽤**translate**来改变位置⽽不是定位？\n\ntranslate 是 transform 属性的⼀个值。改变transform或opacity不会触发浏览器重新布局（reflow）或重绘（repaint），只会触发复合（compositions）。⽽改变绝对定位会触发重新布局，进⽽触发重绘和复合。transform使浏览器为元素创建⼀个 GPU 图层，但改变绝对定位会使⽤到 CPU。 因此translate()更⾼效，可以缩短平滑动画的绘制时间。 ⽽translate改变位置时，元素依然会占据其原始空间，绝对定位就不会发⽣这种情况。\n\n### 13. li 与 li 之间有看不见的空白间隔是什么原因引起的？如何解决？\n\n浏览器会把inline内联元素间的空白字符（空格、换行、Tab等）渲染成一个空格。为了美观，通常是一个`<li>`放在一行，这导致`<li>`换行后产生换行字符，它变成一个空格，占用了一个字符的宽度。\n\n**解决办法：**\n\n（1）为`<li>`设置float:left。不足：有些容器是不能设置浮动，如左右切换的焦点图等。\n\n（2）将所有`<li>`写在同一行。不足：代码不美观。\n\n（3）将`<ul>`内的字符尺寸直接设为0，即font-size:0。不足：`<ul>`中的其他字符尺寸也被设为0，需要额外重新设定其他字符尺寸，且在Safari浏览器依然会出现空白间隔。\n\n（4）消除`<ul>`的字符间隔letter-spacing:-8px，不足：这也设置了`<li>`内的字符间隔，因此需要将`<li>`内的字符间隔设为默认letter-spacing:normal。\n\n### 14. CSS3中有哪些新特性\n\n- 新增各种CSS选择器 （: not(.input)：所有 class 不是“input”的节点）\n- 圆角 （border-radius:8px）\n- 多列布局 （multi-column layout）\n- 阴影和反射 （Shadoweflect）\n- 文字特效 （text-shadow）\n- 文字渲染 （Text-decoration）\n- 线性渐变 （gradient）\n- 旋转 （transform）\n- 增加了旋转,缩放,定位,倾斜,动画,多背景\n\n### 15. 替换元素的概念及计算规则\n\n通过修改某个属性值呈现的内容就可以被替换的元素就称为“替换元素”。\n\n替换元素除了内容可替换这一特性以外，还有以下特性：\n\n- **内容的外观不受页面上的CSS的影响**：用专业的话讲就是在样式表现在CSS作用域之外。如何更改替换元素本身的外观需要类似appearance属性，或者浏览器自身暴露的一些样式接口。\n- **有自己的尺寸**：在Web中，很多替换元素在没有明确尺寸设定的情况下，其默认的尺寸（不包括边框）是300像素×150像素，如\n- **在很多CSS属性上有自己的一套表现规则**：比较具有代表性的就是vertical-align属性，对于替换元素和非替换元素，vertical-align属性值的解释是不一样的。比方说vertical-align的默认值的baseline，很简单的属性值，基线之意，被定义为字符x的下边缘，而替换元素的基线却被硬生生定义成了元素的下边缘。\n- **所有的替换元素都是内联水平元素**：也就是替换元素和替换元素、替换元素和文字都是可以在一行显示的。但是，替换元素默认的display值却是不一样的，有的是inline，有的是inline-block。\n\n替换元素的尺寸从内而外分为三类：\n\n- **固有尺寸：** 指的是替换内容原本的尺寸。例如，图片、视频作为一个独立文件存在的时候，都是有着自己的宽度和高度的。\n- **HTML尺寸：** 只能通过HTML原生属性改变，这些HTML原生属性包括的width和height属性、的size属性。\n- **CSS尺寸：** 特指可以通过CSS的width和height或者max-width/min-width和max-height/min-height设置的尺寸，对应盒尺寸中的content box。\n\n这三层结构的计算规则具体如下： （1）如果没有CSS尺寸和HTML尺寸，则使用固有尺寸作为最终的宽高。 （2）如果没有CSS尺寸，则使用HTML尺寸作为最终的宽高。 （3）如果有CSS尺寸，则最终尺寸由CSS属性决定。 （4）如果“固有尺寸”含有固有的宽高比例，同时仅设置了宽度或仅设置了高度，则元素依然按照固有的宽高比例显示。 （5）如果上面的条件都不符合，则最终宽度表现为300像素，高度为150像素。 （6）内联替换元素和块级替换元素使用上面同一套尺寸计算规则。\n\n### 16. 常见的图片格式及使用场景\n\n（1）**BMP**，是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以BMP格式的图片通常是较大的文件。\n\n（2）**GIF**是无损的、采用索引色的点阵图。采用LZW压缩算法进行编码。文件小，是GIF格式的优点，同时，GIF格式还具有支持动画以及透明的优点。但是GIF格式仅支持8bit的索引色，所以GIF格式适用于对色彩要求不高同时需要文件体积较小的场景。\n\n（3）**JPEG**是有损的、采用直接色的点阵图。JPEG的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG非常适合用来存储照片，与GIF相比，JPEG不适合用来存储企业Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较GIF更大。\n\n（4）**PNG-8**是无损的、使用索引色的点阵图。PNG是一种比较新的图片格式，PNG-8是非常好的GIF格式替代者，在可能的情况下，应该尽可能的使用PNG-8而不是GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8还支持透明度的调节，而GIF并不支持。除非需要动画的支持，否则没有理由使用GIF而不是PNG-8。\n\n（5）**PNG-24**是无损的、使用直接色的点阵图。PNG-24的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24格式的文件大小要比BMP小得多。当然，PNG24的图片还是要比JPEG、GIF、PNG-8大得多。\n\n（6）**SVG**是无损的矢量图。SVG是矢量图意味着SVG图片由直线和曲线以及绘制它们的方法组成。当放大SVG图片时，看到的还是线和曲线，而不会出现像素点。SVG图片在放大时，不会失真，所以它适合用来绘制Logo、Icon等。\n\n（7）**WebP**是谷歌开发的一种新图片格式，WebP是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为Web而生的，什么叫为Web而生呢？就是说相同质量的图片，WebP具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有Chrome浏览器和Opera浏览器支持WebP格式，兼容性不太好。\n\n- 在无损压缩的情况下，相同质量的WebP图片，文件大小要比PNG小26%；\n- 在有损压缩的情况下，具有相同图片精度的WebP图片，文件大小要比JPEG小25%~34%；\n- WebP图片格式支持图片透明度，一个无损压缩的WebP图片，如果要支持透明度只需要22%的格外文件大小。\n\n### 17. 对 CSSSprites 的理解\n\nCSSSprites（精灵图），将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的 background-image，background-repeat，background-position属性的组合进行背景定位。\n\n**优点：**\n\n- 利用`CSS Sprites`能很好地减少网页的http请求，从而大大提高了页面的性能，这是`CSS Sprites`最大的优点；\n- `CSS Sprites`能减少图片的字节，把3张图片合并成1张图片的字节总是小于这3张图片的字节总和。\n\n**缺点：**\n\n- 在图片合并时，要把多张图片有序的、合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景。在宽屏及高分辨率下的自适应页面，如果背景不够宽，很容易出现背景断裂；\n- `CSSSprites`在开发的时候相对来说有点麻烦，需要借助`photoshop`或其他工具来对每个背景单元测量其准确的位置。\n- 维护方面：`CSS Sprites`在维护的时候比较麻烦，页面背景有少许改动时，就要改这张合并的图片，无需改的地方尽量不要动，这样避免改动更多的`CSS`，如果在原来的地方放不下，又只能（最好）往下加图片，这样图片的字节就增加了，还要改动`CSS`。\n\n### 18. 什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片？\n\n以 iPhone XS 为例，当写 CSS 代码时，针对于单位 px，其宽度为 414px & 896px，也就是说当赋予一个 DIV元素宽度为 414px，这个 DIV 就会填满手机的宽度；\n\n而如果有一把尺子来实际测量这部手机的物理像素，实际为 1242*2688 物理像素；经过计算可知，1242/414=3，也就是说，在单边上，一个逻辑像素=3个物理像素，就说这个屏幕的像素密度为 3，也就是常说的 3 倍屏。\n\n对于图片来说，为了保证其不失真，1 个图片像素至少要对应一个物理像素，假如原始图片是 500300 像素，那么在 3 倍屏上就要放一个 1500900 像素的图片才能保证 1 个物理像素至少对应一个图片像素，才能不失真。 ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f1da1cbae9b45528cc2b33f74eb32f2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) 当然，也可以针对所有屏幕，都只提供最高清图片。虽然低密度屏幕用不到那么多图片像素，而且会因为下载多余的像素造成带宽浪费和下载延迟，但从结果上说能保证图片在所有屏幕上都不会失真。\n\n还可以使用 CSS 媒体查询来判断不同的像素密度，从而选择不同的图片:\n\n```javascript\nmy-image { background: (low.png); }\n@media only screen and (min-device-pixel-ratio: 1.5) {\n  #my-image { background: (high.png); }\n}\n```\n\n### 19. **margin 和 padding 的使用场景**\n\n- 需要在border外侧添加空白，且空白处不需要背景（色）时，使用 margin；\n- 需要在border内测添加空白，且空白处需要背景（色）时，使用 padding。\n\n### 20. 对**line-height 的理解及其赋值方式**\n\n**（1）line-height的概念：**\n\n- line-height 指一行文本的高度，包含了字间距，实际上是下一行基线到上一行基线距离；\n- 如果一个标签没有定义 height 属性，那么其最终表现的高度由 line-height 决定；\n- 一个容器没有设置高度，那么撑开容器高度的是 line-height，而不是容器内的文本内容；\n- 把 line-height 值设置为 height 一样大小的值可以实现单行文字的垂直居中；\n- line-height 和 height 都能撑开一个高度；\n\n**（2）line-height 的赋值方式：**\n\n- 带单位：px 是固定值，而 em 会参考父元素 font-size 值计算自身的行高\n- 纯数字：会把比例传递给后代。例如，父级行高为 1.5，子元素字体为 18px，则子元素行高为 1.5 * 18 = 27px\n- 百分比：将计算后的值传递给后代\n\n### 21. CSS 优化和提高性能的方法有哪些？\n\n**加载性能：**\n\n（1）css压缩：将写好的css进行打包压缩，可以减小文件体积。\n\n（2）css单一样式：当需要下边距和左边距的时候，很多时候会选择使用 margin:top 0 bottom 0；但margin-bottom:bottom;margin-left:left;执行效率会更高。\n\n（3）减少使用@import，建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。\n\n**选择器性能：**\n\n（1）关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；\n\n（2）如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）。\n\n（3）避免使用通配规则，如*{}计算次数惊人，只对需要用到的元素进行选择。\n\n（4）尽量少的去对标签进行选择，而是用class。\n\n（5）尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素。\n\n（6）了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。\n\n**渲染性能：**\n\n（1）慎重使用高性能属性：浮动、定位。\n\n（2）尽量减少页面重排、重绘。\n\n（3）去除空规则：｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体积。\n\n（4）属性值为0时，不加单位。\n\n（5）属性值为浮动小数0.**，可以省略小数点之前的0。\n\n（6）标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。\n\n（7）不使用@import前缀，它会影响css的加载速度。\n\n（8）选择器优化嵌套，尽量避免层级过深。\n\n（9）css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚，再使用。\n\n（10）正确使用display的属性，由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。\n\n（11）不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。web fonts通常体积庞大，而且一些浏览器在下载web fonts时会阻塞页面渲染损伤性能。\n\n**可维护性、健壮性：**\n\n（1）将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。\n\n（2）样式与内容分离：将css代码定义到外部css中。\n\n### 22. CSS预处理器/后处理器是什么？为什么要使用它们？\n\n**预处理器，** 如：`less`，`sass`，`stylus`，用来预编译`sass`或者`less`，增加了`css`代码的复用性。层级，`mixin`， 变量，循环， 函数等对编写以及开发UI组件都极为方便。\n\n**后处理器，** 如： `postCss`，通常是在完成的样式表中根据`css`规范处理`css`，让其更加有效。目前最常做的是给`css`属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。\n\n`css`预处理器为`css`增加一些编程特性，无需考虑浏览器的兼容问题，可以在`CSS`中使用变量，简单的逻辑程序，函数等在编程语言中的一些基本的性能，可以让`css`更加的简洁，增加适应性以及可读性，可维护性等。\n\n其它`css`预处理器语言：`Sass（Scss）`, `Less`, `Stylus`, `Turbine`, `Swithch css`, `CSS Cacheer`, `DT Css`。\n\n使用原因：\n\n- 结构清晰， 便于扩展\n- 可以很方便的屏蔽浏览器私有语法的差异\n- 可以轻松实现多重继承\n- 完美的兼容了`CSS`代码，可以应用到老项目中\n\n### 23. ::before 和 :after 的双冒号和单冒号有什么区别？\n\n（1）冒号(`:`)用于`CSS3`伪类，双冒号(`::`)用于`CSS3`伪元素。 （2）`::before`就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于`dom`之中，只存在在页面之中。\n\n**注意：** `:before `和 `:after` 这两个伪元素，是在`CSS2.1`里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着`Web`的进化，在`CSS3`的规范里，伪元素的语法被修改成使用双冒号，成为`::before`、`::after`。\n\n### 24. display:inline-block 什么时候会显示间隙？\n\n- 有空格时会有间隙，可以删除空格解决；\n- `margin`正值时，可以让`margin`使用负值解决；\n- 使用`font-size`时，可通过设置`font-size:0`、`letter-spacing`、`word-spacing`解决；\n\n### 25. 单行、多行文本溢出隐藏\n\n- 单行文本溢出\n\n```css\noverflow: hidden;            // 溢出隐藏\ntext-overflow: ellipsis;      // 溢出用省略号显示\nwhite-space: nowrap;         // 规定段落中的文本不进行换行\n```\n\n- 多行文本溢出\n\n```css\noverflow: hidden;            // 溢出隐藏\ntext-overflow: ellipsis;     // 溢出用省略号显示\ndisplay:-webkit-box;         // 作为弹性伸缩盒子模型显示。\n-webkit-box-orient:vertical; // 设置伸缩盒子的子元素排列方式：从上到下垂直排列\n-webkit-line-clamp:3;        // 显示的行数\n```\n\n注意：由于上面的三个属性都是 CSS3 的属性，没有浏览器可以兼容，所以要在前面加一个`-webkit-` 来兼容一部分浏览器。\n\n### 26. Sass、Less 是什么？为什么要使用他们？\n\n他们都是 CSS 预处理器，是 CSS 上的一种抽象层。他们是一种特殊的语法/语言编译成 CSS。 例如 Less 是一种动态样式语言，将 CSS 赋予了动态语言的特性，如变量，继承，运算， 函数，LESS 既可以在客户端上运行 (支持 IE 6+, Webkit, Firefox)，也可以在服务端运行 (借助 Node.js)。\n\n**为什么要使用它们？**\n\n- 结构清晰，便于扩展。 可以方便地屏蔽浏览器私有语法差异。封装对浏览器语法差异的重复处理， 减少无意义的机械劳动。\n- 可以轻松实现多重继承。 完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译。\n\n### 27. 对媒体查询的理解？\n\n媒体查询由⼀个可选的媒体类型和零个或多个使⽤媒体功能的限制了样式表范围的表达式组成，例如宽度、⾼度和颜⾊。媒体查询，添加⾃CSS3，允许内容的呈现针对⼀个特定范围的输出设备⽽进⾏裁剪，⽽不必改变内容本身，适合web⽹⻚应对不同型号的设备⽽做出对应的响应适配。\n\n媒体查询包含⼀个可选的媒体类型和满⾜CSS3规范的条件下，包含零个或多个表达式，这些表达式描述了媒体特征，最终会被解析为true或false。如果媒体查询中指定的媒体类型匹配展示⽂档所使⽤的设备类型，并且所有的表达式的值都是true，那么该媒体查询的结果为true。那么媒体查询内的样式将会⽣效。\n\n```javascript\n<!-- link元素中的CSS媒体查询 --> \n<link rel=\"stylesheet\" media=\"(max-width: 800px)\" href=\"example.css\" /> \n<!-- 样式表中的CSS媒体查询 --> \n<style> \n@media (max-width: 600px) { \n  .facet_sidebar { \n    display: none; \n  } \n}\n</style>\n```\n\n简单来说，使用 @media 查询，可以针对不同的媒体类型定义不同的样式。@media 可以针对不同的屏幕尺寸设置不同的样式，特别是需要设置设计响应式的页面，@media 是非常有用的。当重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。\n\n### 28. 对 CSS 工程化的理解\n\nCSS 工程化是为了解决以下问题：\n\n1. **宏观设计**：CSS 代码如何组织、如何拆分、模块结构怎样设计？\n2. **编码优化**：怎样写出更好的 CSS？\n3. **构建**：如何处理我的 CSS，才能让它的打包结果最优？\n4. **可维护性**：代码写完了，如何最小化它后续的变更成本？如何确保任何一个同事都能轻松接手？\n\n以下三个方向都是时下比较流行的、普适性非常好的 CSS 工程化实践：\n\n- 预处理器：Less、 Sass 等；\n- 重要的工程化插件： PostCss；\n- Webpack loader 等 。\n\n基于这三个方向，可以衍生出一些具有典型意义的子问题，这里我们逐个来看：\n\n**（1）预处理器：为什么要用预处理器？它的出现是为了解决什么问题？**\n\n预处理器，其实就是 CSS 世界的“轮子”。预处理器支持我们写一种类似 CSS、但实际并不是 CSS 的语言，然后把它编译成 CSS 代码： ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d58c5313e884e38b1545a5896613250~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) 那为什么写 CSS 代码写得好好的，偏偏要转去写“类 CSS”呢？这就和本来用 JS 也可以实现所有功能，但最后却写 React 的 jsx 或者 Vue 的模板语法一样——为了爽！要想知道有了预处理器有多爽，首先要知道的是传统 CSS 有多不爽。随着前端业务复杂度的提高，前端工程中对 CSS 提出了以下的诉求：\n\n1. 宏观设计上：我们希望能优化 CSS 文件的目录结构，对现有的 CSS 文件实现复用；\n2. 编码优化上：我们希望能写出结构清晰、简明易懂的 CSS，需要它具有一目了然的嵌套层级关系，而不是无差别的一铺到底写法；我们希望它具有变量特征、计算能力、循环能力等等更强的可编程性，这样我们可以少写一些无用的代码；\n3. 可维护性上：更强的可编程性意味着更优质的代码结构，实现复用意味着更简单的目录结构和更强的拓展能力，这两点如果能做到，自然会带来更强的可维护性。\n\n这三点是传统 CSS 所做不到的，也正是预处理器所解决掉的问题。预处理器普遍会具备这样的特性：\n\n- 嵌套代码的能力，通过嵌套来反映不同 css 属性之间的层级关系 ；\n- 支持定义 css 变量；\n- 提供计算函数；\n- 允许对代码片段进行 extend 和 mixin；\n- 支持循环语句的使用；\n- 支持将 CSS 文件模块化，实现复用。\n\n**（2）PostCss：PostCss 是如何工作的？我们在什么场景下会使用 PostCss？**\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2911f98bbacf4b1cbffbb9e1527a4977~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) 它和预处理器的不同就在于，预处理器处理的是 类CSS，而 PostCss 处理的就是 CSS 本身。Babel 可以将高版本的 JS 代码转换为低版本的 JS 代码。PostCss 做的是类似的事情：它可以编译尚未被浏览器广泛支持的先进的 CSS 语法，还可以自动为一些需要额外兼容的语法增加前缀。更强的是，由于 PostCss 有着强大的插件机制，支持各种各样的扩展，极大地强化了 CSS 的能力。\n\nPostCss 在业务中的使用场景非常多：\n\n- 提高 CSS 代码的可读性：PostCss 其实可以做类似预处理器能做的工作；\n- 当我们的 CSS 代码需要适配低版本浏览器时，PostCss 的 [Autoprefixer](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fpostcss%2Fautoprefixer) 插件可以帮助我们自动增加浏览器前缀；\n- 允许我们编写面向未来的 CSS：PostCss 能够帮助我们编译 CSS next 代码；\n\n**（3）Webpack 能处理 CSS 吗？如何实现？** Webpack 能处理 CSS 吗：\n\n- **Webpack 在裸奔的状态下，是不能处理 CSS 的**，Webpack 本身是一个面向 JavaScript 且只能处理 JavaScript 代码的模块化打包工具；\n- Webpack 在 loader 的辅助下，是可以处理 CSS 的。\n\n如何用 Webpack 实现对 CSS 的处理：\n\n- Webpack 中操作 CSS 需要使用的两个关键的 loader：css-loader 和 style-loader\n- 注意，答出“用什么”有时候可能还不够，面试官会怀疑你是不是在背答案，所以你还需要了解每个 loader 都做了什么事情：\n  - css-loader：导入 CSS 模块，对 CSS 代码进行编译处理；\n  - style-loader：创建style标签，把 CSS 内容写入标签。\n\n在实际使用中，**css-loader 的执行顺序一定要安排在 style-loader 的前面**。因为只有完成了编译过程，才可以对 css 代码进行插入；若提前插入了未编译的代码，那么 webpack 是无法理解这坨东西的，它会无情报错。\n\n### 29. 如何判断元素是否到达可视区域\n\n以图片显示为例：\n\n- `window.innerHeight` 是浏览器可视区的高度；\n- `document.body.scrollTop || document.documentElement.scrollTop` 是浏览器滚动的过的距离；\n- `imgs.offsetTop` 是元素顶部距离文档顶部的高度（包括滚动条的距离）；\n- 内容达到显示区域的：`img.offsetTop < window.innerHeight + document.body.scrollTop;`\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c57fc165a4ce4d5b9a2885867d4f1cab~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)\n\n### 30. z-index属性在什么情况下会失效\n\n通常 z-index 的使用是在有两个重叠的标签，在一定的情况下控制其中一个在另一个的上方或者下方出现。z-index值越大就越是在上层。z-index元素的position属性需要是relative，absolute或是fixed。\n\nz-index属性在下列情况下会失效：\n\n- 父元素position为relative时，子元素的z-index失效。解决：父元素position改为absolute或static；\n- 元素没有设置position属性为非static属性。解决：设置该元素的position属性为relative，absolute或是fixed中的一种；\n- 元素在设置z-index的同时还设置了float浮动。解决：float去除，改为display：inline-block；\n\n### 31. CSS3中的transform有哪些属性\n\n## 二、页面布局\n\n### 1. 常见的CSS布局单位\n\n常用的布局单位包括像素（`px`），百分比（`%`），`em`，`rem`，`vw/vh`。\n\n**（1）像素**（`px`）是页面布局的基础，一个像素表示终端（电脑、手机、平板等）屏幕所能显示的最小的区域，像素分为两种类型：CSS像素和物理像素：\n\n- **CSS像素**：为web开发者提供，在CSS中使用的一个抽象单位；\n- **物理像素**：只与设备的硬件密度有关，任何设备的物理像素都是固定的。\n\n**（2）百分比**（`%`），当浏览器的宽度或者高度发生变化时，通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。一般认为子元素的百分比相对于直接父元素。\n\n**（3）em和rem**相对于px更具灵活性，它们都是相对长度单位，它们之间的区别：**em相对于父元素，rem相对于根元素。**\n\n- **em：** 文本相对长度单位。相对于当前对象内文本的字体尺寸。如果当前行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸(默认16px)。(相对父元素的字体大小倍数)。\n- **rem：** rem是CSS3新增的一个相对单位，相对于根元素（html元素）的font-size的倍数。**作用**：利用rem可以实现简单的响应式布局，可以利用html元素中字体的大小与屏幕间的比值来设置font-size的值，以此实现当屏幕分辨率变化时让元素也随之变化。\n\n**（4）vw/vh**是与视图窗口有关的单位，vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度，除了vw和vh外，还有vmin和vmax两个相关的单位。\n\n- vw：相对于视窗的宽度，视窗宽度是100vw；\n- vh：相对于视窗的高度，视窗高度是100vh；\n- vmin：vw和vh中的较小值；\n- vmax：vw和vh中的较大值；\n\n**vw/vh** 和百分比很类似，两者的区别：\n\n- 百分比（`%`）：大部分相对于祖先元素，也有相对于自身的情况比如（border-radius、translate等)\n- vw/vm：相对于视窗的尺寸\n\n### 2. px、em、rem的区别及使用场景\n\n**三者的区别：**\n\n- px是固定的像素，一旦设置了就无法因为适应页面大小而改变。\n- em和rem相对于px更具有灵活性，他们是相对长度单位，其长度不是固定的，更适用于响应式布局。\n- em是相对于其父元素来设置字体大小，这样就会存在一个问题，进行任何元素设置，都有可能需要知道他父元素的大小。而rem是相对于根元素，这样就意味着，只需要在根元素确定一个参考值。\n\n**使用场景：**\n\n- 对于只需要适配少部分移动设备，且分辨率对页面影响不大的，使用px即可 。\n- 对于需要适配各种移动设备，使用rem，例如需要适配iPhone和iPad等分辨率差别比较挺大的设备。\n\n### 3. 两栏布局的实现\n\n一般两栏布局指的是**左边一栏宽度固定，右边一栏宽度自适应**，两栏布局的具体实现：\n\n- 利用浮动，将左边元素宽度设置为200px，并且设置向左浮动。将右边元素的margin-left设置为200px，宽度设置为auto（默认为auto，撑满整个父元素）。\n\n```css\n.outer {\n  height: 100px;\n}\n.left {\n  float: left;\n  width: 200px;\n  background: tomato;\n}\n.right {\n  margin-left: 200px;\n  width: auto;\n  background: gold;\n}\n```\n\n- 利用浮动，左侧元素设置固定大小，并左浮动，右侧元素设置overflow: hidden; 这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠。\n\n```css\n.left{\n     width: 100px;\n     height: 200px;\n     background: red;\n     float: left;\n }\n .right{\n     height: 300px;\n     background: blue;\n     overflow: hidden;\n }\n```\n\n- 利用flex布局，将左边元素设置为固定宽度200px，将右边的元素设置为flex:1。\n\n```css\n.outer {\n  display: flex;\n  height: 100px;\n}\n.left {\n  width: 200px;\n  background: tomato;\n}\n.right {\n  flex: 1;\n  background: gold;\n}\n```\n\n- 利用绝对定位，将父级元素设置为相对定位。左边元素设置为absolute定位，并且宽度设置为200px。将右边元素的margin-left的值设置为200px。\n\n```css\n.outer {\n  position: relative;\n  height: 100px;\n}\n.left {\n  position: absolute;\n  width: 200px;\n  height: 100px;\n  background: tomato;\n}\n.right {\n  margin-left: 200px;\n  background: gold;\n}\n```\n\n- 利用绝对定位，将父级元素设置为相对定位。左边元素宽度设置为200px，右边元素设置为绝对定位，左边定位为200px，其余方向定位为0。\n\n```css\n.outer {\n  position: relative;\n  height: 100px;\n}\n.left {\n  width: 200px;\n  background: tomato;\n}\n.right {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 200px;\n  background: gold;\n}\n```\n\n### 4. 三栏布局的实现\n\n三栏布局一般指的是页面中一共有三栏，**左右两栏宽度固定，中间自适应的布局**，三栏布局的具体实现：\n\n- 利用**绝对定位**，左右两栏设置为绝对定位，中间设置对应方向大小的margin的值。\n\n```css\n.outer {\n  position: relative;\n  height: 100px;\n}\n\n.left {\n  position: absolute;\n  width: 100px;\n  height: 100px;\n  background: tomato;\n}\n\n.right {\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 200px;\n  height: 100px;\n  background: gold;\n}\n\n.center {\n  margin-left: 100px;\n  margin-right: 200px;\n  height: 100px;\n  background: lightgreen;\n}\n```\n\n- 利用flex布局，左右两栏设置固定大小，中间一栏设置为flex:1。\n\n```css\n.outer {\n  display: flex;\n  height: 100px;\n}\n\n.left {\n  width: 100px;\n  background: tomato;\n}\n\n.right {\n  width: 100px;\n  background: gold;\n}\n\n.center {\n  flex: 1;\n  background: lightgreen;\n}\n```\n\n- 利用浮动，左右两栏设置固定大小，并设置对应方向的浮动。中间一栏设置左右两个方向的margin值，注意这种方式**，中间一栏必须放到最后：**\n\n```css\n.outer {\n  height: 100px;\n}\n\n.left {\n  float: left;\n  width: 100px;\n  height: 100px;\n  background: tomato;\n}\n\n.right {\n  float: right;\n  width: 200px;\n  height: 100px;\n  background: gold;\n}\n\n.center {\n  height: 100px;\n  margin-left: 100px;\n  margin-right: 200px;\n  background: lightgreen;\n}\n```\n\n- 圣杯布局，利用浮动和负边距来实现。父级元素设置左右的 padding，三列均设置向左浮动，中间一列放在最前面，宽度设置为父级元素的宽度，因此后面两列都被挤到了下一行，通过设置 margin 负值将其移动到上一行，再利用相对定位，定位到两边。\n\n```css\n.outer {\n  height: 100px;\n  padding-left: 100px;\n  padding-right: 200px;\n}\n\n.left {\n  position: relative;\n  left: -100px;\n\n  float: left;\n  margin-left: -100%;\n\n  width: 100px;\n  height: 100px;\n  background: tomato;\n}\n\n.right {\n  position: relative;\n  left: 200px;\n\n  float: right;\n  margin-left: -200px;\n\n  width: 200px;\n  height: 100px;\n  background: gold;\n}\n\n.center {\n  float: left;\n\n  width: 100%;\n  height: 100px;\n  background: lightgreen;\n}\n```\n\n- 双飞翼布局，双飞翼布局相对于圣杯布局来说，左右位置的保留是通过中间列的 margin 值来实现的，而不是通过父元素的 padding 来实现的。本质上来说，也是通过浮动和外边距负值来实现的。\n\n```css\n.outer {\n  height: 100px;\n}\n\n.left {\n  float: left;\n  margin-left: -100%;\n\n  width: 100px;\n  height: 100px;\n  background: tomato;\n}\n\n.right {\n  float: left;\n  margin-left: -200px;\n\n  width: 200px;\n  height: 100px;\n  background: gold;\n}\n\n.wrapper {\n  float: left;\n\n  width: 100%;\n  height: 100px;\n  background: lightgreen;\n}\n\n.center {\n  margin-left: 100px;\n  margin-right: 200px;\n  height: 100px;\n}\n```\n\n### 5. 水平垂直居中的实现\n\n- 利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过translate来调整元素的中心点到页面的中心。该方法需要**考虑浏览器兼容问题。**\n\n```css\n.parent {    position: relative;} .child {    position: absolute;    left: 50%;    top: 50%;    transform: translate(-50%,-50%);}\n```\n\n- 利用绝对定位，设置四个方向的值都为0，并将margin设置为auto，由于宽高固定，因此对应方向实现平分，可以实现水平和垂直方向上的居中。该方法适用于**盒子有宽高**的情况：\n\n```css\n.parent {\n    position: relative;\n}\n \n.child {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: auto;\n}\n```\n\n- 利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过margin负值来调整元素的中心点到页面的中心。该方法适用于**盒子宽高已知**的情况\n\n```css\n.parent {\n    position: relative;\n}\n \n.child {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-top: -50px;     /* 自身 height 的一半 */\n    margin-left: -50px;    /* 自身 width 的一半 */\n}\n```\n\n- 使用flex布局，通过align-items:center和justify-content:center设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。该方法要**考虑兼容的问题**，该方法在移动端用的较多：\n\n```css\n.parent {\n    display: flex;\n    justify-content:center;\n    align-items:center;\n}\n```\n\n### 6. 如何根据设计稿进行移动端适配？\n\n移动端适配主要有两个维度：\n\n- **适配不同像素密度，** 针对不同的像素密度，使用 CSS 媒体查询，选择不同精度的图片，以保证图片不会失真；\n- **适配不同屏幕大小，** 由于不同的屏幕有着不同的逻辑像素大小，所以如果直接使用 px 作为开发单位，会使得开发的页面在某一款手机上可以准确显示，但是在另一款手机上就会失真。为了适配不同屏幕的大小，应按照比例来还原设计稿的内容。\n\n为了能让页面的尺寸自适应，可以使用 rem，em，vw，vh 等相对单位。\n\n### 7. 对Flex布局的理解及其使用场景\n\nFlex是FlexibleBox的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。行内元素也可以使用Flex布局。注意，设为Flex布局以后，**子元素的float、clear和vertical-align属性将失效**。采用Flex布局的元素，称为Flex容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称\"项目\"。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis），项目默认沿水平主轴排列。\n\n以下6个属性设置在**容器上**：\n\n- flex-direction属性决定主轴的方向（即项目的排列方向）。\n- flex-wrap属性定义，如果一条轴线排不下，如何换行。\n- flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\n- justify-content属性定义了项目在主轴上的对齐方式。\n- align-items属性定义项目在交叉轴上如何对齐。\n- align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n\n以下6个属性设置在**项目上**：\n\n- order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n- flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n- flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n- flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n- flex属性是flex-grow，flex-shrink和flex-basis的简写，默认值为0 1 auto。\n- align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n\n**简单来说：** flex布局是CSS3新增的一种布局方式，可以通过将一个元素的display属性值设置为flex从而使它成为一个flex容器，它的所有子元素都会成为它的项目。一个容器默认有两条轴：一个是水平的主轴，一个是与主轴垂直的交叉轴。可以使用flex-direction来指定主轴的方向。可以使用justify-content来指定元素在主轴上的排列方式，使用align-items来指定元素在交叉轴上的排列方式。还可以使用flex-wrap来规定当一行排列不下时的换行方式。对于容器中的项目，可以使用order属性来指定项目的排列顺序，还可以使用flex-grow来指定当排列空间有剩余的时候，项目的放大比例，还可以使用flex-shrink来指定当排列空间不足时，项目的缩小比例。\n\n### 8. 响应式设计的概念及基本原理\n\n响应式网站设计`（Responsive Web design`）是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。\n\n关于原理： 基本原理是通过媒体查询`（@media）`查询检测不同的设备屏幕尺寸做处理。 关于兼容： 页面头部必须有mate声明的`viewport`。\n\n```html\n<meta name=\"’viewport’\" content=\"”width=device-width,\" initial-scale=\"1.\" maximum-scale=\"1,user-scalable=no”\"/>\n```\n\n## 三、定位与浮动\n\n### 1. 为什么需要清除浮动？清除浮动的方式\n\n**浮动的定义：** 非IE浏览器下，容器不设高度且子元素浮动时，容器高度不能被内容撑开。 此时，内容会溢出到容器外面而影响布局。这种现象被称为浮动（溢出）。\n\n**浮动的工作原理：**\n\n- 浮动元素脱离文档流，不占据空间（引起“高度塌陷”现象）\n- 浮动元素碰到包含它的边框或者其他浮动元素的边框停留\n\n浮动元素可以左右移动，直到遇到另一个浮动元素或者遇到它外边缘的包含框。浮动框不属于文档流中的普通流，当元素浮动之后，不会影响块级元素的布局，只会影响内联元素布局。此时文档流中的普通流就会表现得该浮动框不存在一样的布局模式。当包含框的高度小于浮动框的时候，此时就会出现“高度塌陷”。\n\n**浮动元素引起的问题？**\n\n- 父元素的高度无法被撑开，影响与父元素同级的元素\n- 与浮动元素同级的非浮动元素会跟随其后\n- 若浮动的元素不是第一个元素，则该元素之前的元素也要浮动，否则会影响页面的显示结构\n\n**清除浮动的方式如下：**\n\n- 给父级div定义`height`属性\n- 最后一个浮动元素之后添加一个空的div标签，并添加`clear:both`样式\n- 包含浮动元素的父级标签添加`overflow:hidden`或者`overflow:auto`\n- 使用 :after 伪元素。由于IE6-7不支持 :after，使用 zoom:1 触发 hasLayout**\n\n```css\n.clearfix:after{\n    content: \"\\200B\";\n    display: table; \n    height: 0;\n    clear: both;\n  }\n  .clearfix{\n    *zoom: 1;\n  }\n```\n\n### 2. 使用 clear 属性清除浮动的原理？\n\n使用clear属性清除浮动，其语法如下：\n\n```css\nclear:none|left|right|both\n```\n\n如果单看字面意思，clear:left 是“清除左浮动”，clear:right 是“清除右浮动”，实际上，这种解释是有问题的，因为浮动一直还在，并没有清除。\n\n官方对clear属性解释：“**元素盒子的边不能和前面的浮动元素相邻**”，对元素设置clear属性是为了避免浮动元素对该元素的影响，而不是清除掉浮动。\n\n还需要注意 clear 属性指的是元素盒子的边不能和前面的浮动元素相邻，注意这里“**前面的**”3个字，也就是clear属性对“后面的”浮动元素是不闻不问的。考虑到float属性要么是left，要么是right，不可能同时存在，同时由于clear属性对“后面的”浮动元素不闻不问，因此，当clear:left有效的时候，clear:right必定无效，也就是此时clear:left等同于设置clear:both；同样地，clear:right如果有效也是等同于设置clear:both。由此可见，clear:left和clear:right这两个声明就没有任何使用的价值，至少在CSS世界中是如此，直接使用clear:both吧。\n\n一般使用伪元素的方式清除浮动：\n\n```css\n.clear::after{  content:'';  display: block;   clear:both;}\n```\n\nclear属性只有块级元素才有效的，而::after等伪元素默认都是内联水平，这就是借助伪元素清除浮动影响时需要设置display属性值的原因。\n\n### 3. 对BFC的理解，如何创建BFC\n\n先来看两个相关的概念：\n\n- Box: Box 是 CSS 布局的对象和基本单位，⼀个⻚⾯是由很多个 Box 组成的，这个Box就是我们所说的盒模型。\n- Formatting context：块级上下⽂格式化，它是⻚⾯中的⼀块渲染区域，并且有⼀套渲染规则，它决定了其⼦元素将如何定位，以及和其他元素的关系和相互作⽤。\n\n块格式化上下文（Block Formatting Context，BFC）是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。\n\n通俗来讲：BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定规则进行物品摆放，并且不会影响其它环境中的物品。如果一个元素符合触发BFC的条件，则BFC中的元素布局不受外部影响。\n\n**创建BFC的条件：**\n\n- 根元素：body；\n- 元素设置浮动：float 除 none 以外的值；\n- 元素设置绝对定位：position (absolute、fixed)；\n- display 值为：inline-block、table-cell、table-caption、flex等；\n- overflow 值为：hidden、auto、scroll；\n\n**BFC的特点：**\n\n- 垂直方向上，自上而下排列，和文档流的排列方式一致。\n- 在BFC中上下相邻的两个容器的margin会重叠\n- 计算BFC的高度时，需要计算浮动元素的高度\n- BFC区域不会与浮动的容器发生重叠\n- BFC是独立的容器，容器内部元素不会影响外部元素\n- 每个元素的左margin值和容器的左border相接触\n\n**BFC的作用：**\n\n- **解决margin的重叠问题**：由于BFC是一个独立的区域，内部的元素和外部的元素互不影响，将两个元素变为两个BFC，就解决了margin重叠的问题。\n- **解决高度塌陷的问题**：在对子元素设置浮动后，父元素会发生高度塌陷，也就是父元素的高度变为0。解决这个问题，只需要把父元素变成一个BFC。常用的办法是给父元素设置`overflow:hidden`。\n- **创建自适应两栏布局**：可以用来创建自适应两栏布局：左边的宽度固定，右边的宽度自适应。\n\n```css\n.left{\n     width: 100px;\n     height: 200px;\n     background: red;\n     float: left;\n }\n .right{\n     height: 300px;\n     background: blue;\n     overflow: hidden;\n }\n \n<div class=\"left\"></div>\n<div class=\"right\"></div>\n```\n\n左侧设置`float:left`，右侧设置`overflow: hidden`。这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠，实现了自适应两栏布局。\n\n### 4. 什么是margin重叠问题？如何解决？\n\n**问题描述：** 两个块级元素的上外边距和下外边距可能会合并（折叠）为一个外边距，其大小会取其中外边距值大的那个，这种行为就是外边距折叠。需要注意的是，**浮动的元素和绝对定位**这种脱离文档流的元素的外边距不会折叠。重叠只会出现在**垂直方向**。\n\n**计算原则：** 折叠合并后外边距的计算原则如下：\n\n- 如果两者都是正数，那么就去最大者\n- 如果是一正一负，就会正值减去负值的绝对值\n- 两个都是负值时，用0减去两个中绝对值大的那个\n\n**解决办法：** 对于折叠的情况，主要有两种：**兄弟之间重叠**和**父子之间重叠** （1）兄弟之间重叠\n\n- 底部元素变为行内盒子：`display: inline-block`\n- 底部元素设置浮动：`float`\n- 底部元素的position的值为`absolute/fixed`\n\n（2）父子之间重叠\n\n- 父元素加入：`overflow: hidden`\n- 父元素添加透明边框：`border:1px solid transparent`\n- 子元素变为行内盒子：`display: inline-block`\n- 子元素加入浮动属性或定位\n\n### 5. 元素的层叠顺序\n\n层叠顺序，英文称作 stacking order，表示元素发生层叠时有着特定的垂直显示顺序。下面是盒模型的层叠规则： ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbc59ae1adb5454c8c7f60582df10ff9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) 对于上图，由上到下分别是： （1）背景和边框：建立当前层叠上下文元素的背景和边框。 （2）负的z-index：当前层叠上下文中，z-index属性值为负的元素。 （3）块级盒：文档流内非行内级非定位后代元素。 （4）浮动盒：非定位浮动元素。 （5）行内盒：文档流内行内级非定位后代元素。 （6）z-index:0：层叠级数为0的定位元素。 （7）正z-index：z-index属性值为正的定位元素。\n\n**注意:** 当定位元素z-index:auto，生成盒在当前层叠上下文中的层级为 0，不会建立新的层叠上下文，除非是根元素。\n\n### 6. position的属性有哪些，区别是什么\n\nposition有以下属性值：\n\n| 属性值   | 概述                                                         |\n| -------- | ------------------------------------------------------------ |\n| absolute | 生成绝对定位的元素，相对于static定位以外的一个父元素进行定位。元素的位置通过left、top、right、bottom属性进行规定。 |\n| relative | 生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过left、top、right、bottom属性进行规定。 |\n| fixed    | 生成绝对定位的元素，指定元素相对于屏幕视⼝（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变，⽐如回到顶部的按钮⼀般都是⽤此定位⽅式。 |\n| static   | 默认值，没有定位，元素出现在正常的文档流中，会忽略 top, bottom, left, right 或者 z-index 声明，块级元素从上往下纵向排布，⾏级元素从左向右排列。 |\n| inherit  | 规定从父元素继承position属性的值                             |\n\n前面三者的定位方式如下：\n\n- **relative：** 元素的定位永远是相对于元素自身位置的，和其他元素没关系，也不会影响其他元素。\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6523548b65834c578202acc5e6388af4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)\n\n- **fixed：** 元素的定位是相对于 window （或者 iframe）边界的，和其他元素没有关系。但是它具有破坏性，会导致其他元素位置的变化。\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b35e646aa3c4d9cac803753d8b67c39~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)\n\n- **absolute：** 元素的定位相对于前两者要复杂许多。如果为 absolute 设置了 top、left，浏览器会根据什么去确定它的纵向和横向的偏移量呢？答案是浏览器会递归查找该元素的所有父元素，如果找到一个设置了`position:relative/absolute/fixed`的元素，就以该元素为基准定位，如果没找到，就以浏览器边界定位。如下两个图所示：\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6d4f199b3f842f090890eea32318e11~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2c7150bd7614a548f04a2919f1ea12a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)\n\n### 7. **display、float、position的关系**\n\n（1）首先判断display属性是否为none，如果为none，则position和float属性的值不影响元素最后的表现。\n\n（2）然后判断position的值是否为absolute或者fixed，如果是，则float属性失效，并且display的值应该被设置为table或者block，具体转换需要看初始转换值。\n\n（3）如果position的值不为absolute或者fixed，则判断float属性的值是否为none，如果不是，则display的值则按上面的规则转换。注意，如果position的值为relative并且float属性的值存在，则relative相对于浮动后的最终位置定位。\n\n（4）如果float的值为none，则判断元素是否为根元素，如果是根元素则display属性按照上面的规则转换，如果不是，则保持指定的display属性值不变。\n\n总的来说，可以把它看作是一个类似优先级的机制，\"position:absolute\"和\"position:fixed\"优先级最高，有它存在的时候，浮动不起作用，'display'的值也需要调整；其次，元素的'float'特性的值不是\"none\"的时候或者它是根元素的时候，调整'display'的值；最后，非根元素，并且非浮动元素，并且非绝对定位的元素，'display'特性值同设置值。\n\n### 8. absolute与fixed共同点与不同点\n\n**共同点：**\n\n- 改变行内元素的呈现方式，将display置为inline-block \n- 使元素脱离普通文档流，不再占据文档物理空间\n- 覆盖非定位文档元素\n\n**不同点：**\n\n- abuselute与fixed的根元素不同，abuselute的根元素可以设置，fixed根元素是浏览器。\n- 在有滚动条的页面中，absolute会跟着父元素进行移动，fixed固定在页面的具体位置。\n\n### 9. 对 sticky 定位的理解\n\nsticky 英文字面意思是粘贴，所以可以把它称之为粘性定位。语法：**position: sticky;** 基于用户的滚动位置来定位。\n\n粘性定位的元素是依赖于用户的滚动，在 **position:relative** 与 **position:fixed** 定位之间切换。它的行为就像 **position:relative;** 而当页面滚动超出目标区域时，它的表现就像 **position:fixed;**，它会固定在目标位置。元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。这个特定阈值指的是 top, right, bottom 或 left 之一，换言之，指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。\n\n## 四、场景应用\n\n### 1. 实现一个三角形\n\nCSS绘制三角形主要用到的是border属性，也就是边框。\n\n平时在给盒子设置边框时，往往都设置很窄，就可能误以为边框是由矩形组成的。实际上，border属性是右三角形组成的，下面看一个例子：\n\n```css\ndiv {\n    width: 0;\n    height: 0;\n    border: 100px solid;\n    border-color: orange blue red green;\n}\n```\n\n将元素的长宽都设置为0，显示出来的效果是这样的： ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cba8731fea9842a8b8103c2b387fe64f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) 所以可以根据border这个特性来绘制三角形： **（1）三角1**\n\n```css\ndiv {    width: 0;    height: 0;    border-top: 50px solid red;    border-right: 50px solid transparent;    border-left: 50px solid transparent;}\n```\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab996951a0cc42cf9e6d9e12eb827f8b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) **（2）三角2**\n\n```css\ndiv {\n    width: 0;\n    height: 0;\n    border-bottom: 50px solid red;\n    border-right: 50px solid transparent;\n    border-left: 50px solid transparent;\n}\n```\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/531c6c250dd8446fb0f264e7b3df6fba~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) **（3）三角3**\n\n```css\ndiv {\n    width: 0;\n    height: 0;\n    border-left: 50px solid red;\n    border-top: 50px solid transparent;\n    border-bottom: 50px solid transparent;\n}\n```\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4beaf4e4a0140ad9e7252f8a6e4e8e6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) **（4）三角4**\n\n```css\ndiv {\n    width: 0;\n    height: 0;\n    border-right: 50px solid red;\n    border-top: 50px solid transparent;\n    border-bottom: 50px solid transparent;\n}\n```\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/445f50ad19164b0f863ad8dfef2a29b1~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) **（5）三角5**\n\n```css\ndiv {\n    width: 0;\n    height: 0;\n    border-top: 100px solid red;\n    border-right: 100px solid transparent;\n}\n```\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1ac630463164e42a027b54bb95f56ba~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) 还有很多，就不一一实现了，总体的原则就是通过上下左右边框来控制三角形的方向，用边框的宽度比来控制三角形的角度。\n\n### 2. 实现一个扇形\n\n用CSS实现扇形的思路和三角形基本一致，就是多了一个圆角的样式，实现一个90°的扇形：\n\n```css\ndiv{\n    border: 100px solid transparent;\n    width: 0;\n    heigt: 0;\n    border-radius: 100px;\n    border-top-color: red;\n}\n```\n\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db5e46aea0ce4805a0c2bbec2743546e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)\n\n### 3. 实现一个宽高自适应的正方形\n\n- 利用vw来实现：\n\n```css\n.square {\n  width: 10%;\n  height: 10vw;\n  background: tomato;\n}\n```\n\n- 利用元素的margin/padding百分比是相对父元素width的性质来实现：\n\n```css\n.square {\n  width: 20%;\n  height: 0;\n  padding-top: 20%;\n  background: orange;\n}\n```\n\n- 利用子元素的margin-top的值来实现：\n\n```css\n.square {\n  width: 30%;\n  overflow: hidden;\n  background: yellow;\n}\n.square::after {\n  content: '';\n  display: block;\n  margin-top: 100%;\n}\n```\n\n### 4. 画一条0.5px的线\n\n- **采用transform: scale()的方式**，该方法用来定义元素的2D 缩放转换：\n\n```css\ntransform: scale(0.5,0.5);\n```\n\n- **采用meta viewport的方式**\n\n```css\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=0.5, minimum-scale=0.5, maximum-scale=0.5\"/>\n```\n\n这样就能缩放到原来的0.5倍，如果是1px那么就会变成0.5px。viewport只针对于移动端，只在移动端上才能看到效果\n\n### 5. 设置小于12px的字体\n\n在谷歌下css设置字体大小为12px及以下时，显示都是一样大小，都是默认12px。\n\n**解决办法：**\n\n- 使用Webkit的内核的-webkit-text-size-adjust的私有CSS属性来解决，只要加了-webkit-text-size-adjust:none;字体大小就不受限制了。但是chrome更新到27版本之后就不可以用了。所以高版本chrome谷歌浏览器已经不再支持-webkit-text-size-adjust样式，所以要使用时候慎用。\n- 使用css3的transform缩放属性-webkit-transform:scale(0.5); 注意-webkit-transform:scale(0.75);收缩的是整个元素的大小，这时候，如果是内联元素，必须要将内联元素转换成块元素，可以使用display：block/inline-block/...；\n- 使用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。\n\n### 6. 如何解决 1px 问题？\n\n1px 问题指的是：在一些 `Retina屏幕` 的机型上，移动端页面的 1px 会变得很粗，呈现出不止 1px 的效果。原因很简单——CSS 中的 1px 并不能和移动设备上的 1px 划等号。它们之间的比例关系有一个专门的属性来描述：\n\n```html\nwindow.devicePixelRatio = 设备的物理像素 / CSS像素。\n```\n\n打开 Chrome 浏览器，启动移动端调试模式，在控制台去输出这个 `devicePixelRatio` 的值。这里选中 iPhone6/7/8 这系列的机型，输出的结果就是2： ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a8af7dca29f84b7e9d1f94232713ef07~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) 这就意味着设置的 1px CSS 像素，在这个设备上实际会用 2 个物理像素单元来进行渲染，所以实际看到的一定会比 1px 粗一些。 **解决1px 问题的三种思路：**\n\n#### 思路一：直接写 0.5px\n\n如果之前 1px 的样式这样写：\n\n```css\nborder:1px solid #333\n```\n\n可以先在 JS 中拿到 window.devicePixelRatio 的值，然后把这个值通过 JSX 或者模板语法给到 CSS 的 data 里，达到这样的效果（这里用 JSX 语法做示范）：\n\n```javascript\n<div id=\"container\" data-device={{window.devicePixelRatio}}></div>\n```\n\n然后就可以在 CSS 中用属性选择器来命中 devicePixelRatio 为某一值的情况，比如说这里尝试命中 devicePixelRatio 为2的情况：\n\n```css\n#container[data-device=\"2\"] {\n  border:0.5px solid #333\n}\n```\n\n直接把 1px 改成 1/devicePixelRatio 后的值，这是目前为止最简单的一种方法。这种方法的缺陷在于兼容性不行，IOS 系统需要8及以上的版本，安卓系统则直接不兼容。\n\n#### 思路二：伪元素先放大后缩小\n\n这个方法的可行性会更高，兼容性也更好。唯一的缺点是代码会变多。\n\n思路是**先放大、后缩小：在目标元素的后面追加一个 ::after 伪元素，让这个元素布局为 absolute 之后、整个伸展开铺在目标元素上，然后把它的宽和高都设置为目标元素的两倍，border值设为 1px。接着借助 CSS 动画特效中的放缩能力，把整个伪元素缩小为原来的 50%。此时，伪元素的宽高刚好可以和原有的目标元素对齐，而 border 也缩小为了 1px 的二分之一，间接地实现了 0.5px 的效果。**\n\n代码如下：\n\n```css\n#container[data-device=\"2\"] {\n    position: relative;\n}\n#container[data-device=\"2\"]::after{\n      position:absolute;\n      top: 0;\n      left: 0;\n      width: 200%;\n      height: 200%;\n      content:\"\";\n      transform: scale(0.5);\n      transform-origin: left top;\n      box-sizing: border-box;\n      border: 1px solid #333;\n    }\n}\n```\n\n#### 思路三：viewport 缩放来解决\n\n这个思路就是对 meta 标签里几个关键属性下手：\n\n```html\n<meta name=\"viewport\" content=\"initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no\">\n```\n\n这里针对像素比为2的页面，把整个页面缩放为了原来的1/2大小。这样，本来占用2个物理像素的 1px 样式，现在占用的就是标准的一个物理像素。根据像素比的不同，这个缩放比例可以被计算为不同的值，用 js 代码实现如下：\n\n```javascript\nconst scale = 1 / window.devicePixelRatio;\n// 这里 metaEl 指的是 meta 标签对应的 Dom\nmetaEl.setAttribute('content', `width=device-width,user-scalable=no,initial-scale=${scale},maximum-scale=${scale},minimum-scale=${scale}`);\n```\n\n这样解决了，但这样做的副作用也很大，整个页面被缩放了。这时 1px 已经被处理成物理像素大小，这样的大小在手机上显示边框很合适。但是，一些原本不需要被缩小的内容，比如文字、图片等，也被无差别缩小掉了。\n\n","slug":"js/css复习","published":1,"layout":"post","photos":[],"link":"","_id":"clipg087d002srgwhcx4z3avf","content":"<p>摘要</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230608144415180.png\" alt=\"image-20230608144415180\"></p>\n<h2 id=\"一、CSS基础\"><a href=\"#一、CSS基础\" class=\"headerlink\" title=\"一、CSS基础\"></a>一、CSS基础</h2><h3 id=\"1-CSS选择器及其优先级\"><a href=\"#1-CSS选择器及其优先级\" class=\"headerlink\" title=\"1. CSS选择器及其优先级\"></a>1. CSS选择器及其优先级</h3><table>\n<thead>\n<tr>\n<th><strong>选择器</strong></th>\n<th><strong>格式</strong></th>\n<th><strong>优先级权重</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id选择器</td>\n<td>#id</td>\n<td>100</td>\n</tr>\n<tr>\n<td>类选择器</td>\n<td>#classname</td>\n<td>10</td>\n</tr>\n<tr>\n<td>属性选择器</td>\n<td>a[ref=“eee”]</td>\n<td>10</td>\n</tr>\n<tr>\n<td>伪类选择器</td>\n<td>li:last-child</td>\n<td>10</td>\n</tr>\n<tr>\n<td>标签选择器</td>\n<td>div</td>\n<td>1</td>\n</tr>\n<tr>\n<td>伪元素选择器</td>\n<td>li:after</td>\n<td>1</td>\n</tr>\n<tr>\n<td>相邻兄弟选择器</td>\n<td>h1+p</td>\n<td>0</td>\n</tr>\n<tr>\n<td>子选择器</td>\n<td>ul&gt;li</td>\n<td>0</td>\n</tr>\n<tr>\n<td>后代选择器</td>\n<td>li a</td>\n<td>0</td>\n</tr>\n<tr>\n<td>通配符选择器</td>\n<td>*</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>对于选择器的<strong>优先级</strong>：</p>\n<ul>\n<li>标签选择器、伪元素选择器：1</li>\n<li>类选择器、伪类选择器、属性选择器：10</li>\n<li>id 选择器：100</li>\n<li>内联样式：1000</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>!important声明的样式的优先级最高；</li>\n<li>如果优先级相同，则最后出现的样式生效；</li>\n<li>继承得到的样式的优先级最低；</li>\n<li>通用选择器（*）、子选择器（&gt;）和相邻同胞选择器（+）并不在这四个等级中，所以它们的权值都为 0 ；</li>\n<li>样式表的来源不同时，优先级顺序为：内联样式 &gt; 内部样式 &gt; 外部样式 &gt; 浏览器用户自定义样式 &gt; 浏览器默认样式。</li>\n</ul>\n<h3 id=\"2-CSS中可继承与不可继承属性有哪些\"><a href=\"#2-CSS中可继承与不可继承属性有哪些\" class=\"headerlink\" title=\"2. CSS中可继承与不可继承属性有哪些\"></a>2. CSS中可继承与不可继承属性有哪些</h3><p><strong>一、无继承性的属性</strong></p>\n<ol>\n<li><strong>display</strong>：规定元素应该生成的框的类型</li>\n<li><strong>文本属性</strong>：</li>\n</ol>\n<ul>\n<li>vertical-align：垂直文本对齐</li>\n<li>text-decoration：规定添加到文本的装饰</li>\n<li>text-shadow：文本阴影效果</li>\n<li>white-space：空白符的处理</li>\n<li>unicode-bidi：设置文本的方向</li>\n</ul>\n<ol>\n<li><strong>盒子模型的属性</strong>：width、height、margin、border、padding</li>\n<li><strong>背景属性</strong>：background、background-color、background-image、background-repeat、background-position、background-attachment</li>\n<li><strong>定位属性</strong>：float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index</li>\n<li><strong>生成内容属性</strong>：content、counter-reset、counter-increment</li>\n<li><strong>轮廓样式属性</strong>：outline-style、outline-width、outline-color、outline</li>\n<li><strong>页面样式属性</strong>：size、page-break-before、page-break-after</li>\n<li><strong>声音样式属性</strong>：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during</li>\n</ol>\n<p><strong>二、有继承性的属性</strong></p>\n<ol>\n<li><strong>字体系列属性</strong></li>\n</ol>\n<ul>\n<li>font-family：字体系列</li>\n<li>font-weight：字体的粗细</li>\n<li>font-size：字体的大小</li>\n<li>font-style：字体的风格</li>\n</ul>\n<ol>\n<li><strong>文本系列属性</strong></li>\n</ol>\n<ul>\n<li>text-indent：文本缩进</li>\n<li>text-align：文本水平对齐</li>\n<li>line-height：行高</li>\n<li>word-spacing：单词之间的间距</li>\n<li>letter-spacing：中文或者字母之间的间距</li>\n<li>text-transform：控制文本大小写（就是uppercase、lowercase、capitalize这三个）</li>\n<li>color：文本颜色</li>\n</ul>\n<ol>\n<li><strong>元素可见性</strong></li>\n</ol>\n<ul>\n<li>visibility：控制元素显示隐藏</li>\n</ul>\n<ol>\n<li><strong>列表布局属性</strong></li>\n</ol>\n<ul>\n<li>list-style：列表风格，包括list-style-type、list-style-image等</li>\n</ul>\n<ol>\n<li><strong>光标属性</strong></li>\n</ol>\n<ul>\n<li>cursor：光标显示为何种形态</li>\n</ul>\n<h3 id=\"3-display的属性值及其作用\"><a href=\"#3-display的属性值及其作用\" class=\"headerlink\" title=\"3. display的属性值及其作用\"></a>3. display的属性值及其作用</h3><table>\n<thead>\n<tr>\n<th><strong>属性值</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>none</td>\n<td>元素不显示，并且会从文档流中移除。</td>\n</tr>\n<tr>\n<td>block</td>\n<td>块类型。默认宽度为父元素宽度，可设置宽高，换行显示。</td>\n</tr>\n<tr>\n<td>inline</td>\n<td>行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。</td>\n</tr>\n<tr>\n<td>inline-block</td>\n<td>默认宽度为内容宽度，可以设置宽高，同行显示。</td>\n</tr>\n<tr>\n<td>list-item</td>\n<td>像块类型元素一样显示，并添加样式列表标记。</td>\n</tr>\n<tr>\n<td>table</td>\n<td>此元素会作为块级表格来显示。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承display属性的值。</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-display的block、inline和inline-block的区别\"><a href=\"#4-display的block、inline和inline-block的区别\" class=\"headerlink\" title=\"4. display的block、inline和inline-block的区别\"></a>4. display的block、inline和inline-block的区别</h3><p>（1）<strong>block：</strong> 会独占一行，多个元素会另起一行，可以设置width、height、margin和padding属性；</p>\n<p>（2）<strong>inline：</strong> 元素不会独占一行，设置width、height属性无效。但可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin；</p>\n<p>（3）<strong>inline-block：</strong> 将对象设置为inline对象，但对象的内容作为block对象呈现，之后的内联对象会被排列在同一行内。</p>\n<p>对于行内元素和块级元素，其特点如下：</p>\n<p><strong>（1）行内元素</strong></p>\n<ul>\n<li>设置宽高无效；</li>\n<li>可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin；</li>\n<li>不会自动换行；</li>\n</ul>\n<p><strong>（2）块级元素</strong></p>\n<ul>\n<li>可以设置宽高；</li>\n<li>设置margin和padding都有效；</li>\n<li>可以自动换行；</li>\n<li>多个块状，默认排列从上到下。</li>\n</ul>\n<h3 id=\"5-隐藏元素的方法有哪些\"><a href=\"#5-隐藏元素的方法有哪些\" class=\"headerlink\" title=\"5. 隐藏元素的方法有哪些\"></a>5. 隐藏元素的方法有哪些</h3><ul>\n<li><strong>display: none</strong>：渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件。</li>\n<li><strong>visibility: hidden</strong>：元素在页面中仍占据空间，但是不会响应绑定的监听事件。</li>\n<li><strong>opacity: 0</strong>：将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且能够响应元素绑定的监听事件。</li>\n<li><strong>position: absolute</strong>：通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。</li>\n<li><strong>z-index: 负值</strong>：来使其他元素遮盖住该元素，以此来实现隐藏。</li>\n<li><strong>clip/clip-path</strong> ：使用元素裁剪的方法来实现元素的隐藏，这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。</li>\n<li>**transform: scale(0,0)**：将元素缩放为 0，来实现元素的隐藏。这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。</li>\n</ul>\n<h3 id=\"6-link和-import的区别\"><a href=\"#6-link和-import的区别\" class=\"headerlink\" title=\"6. link和@import的区别\"></a>6. link和@import的区别</h3><p>两者都是外部引用CSS的方式，它们的区别如下：</p>\n<ul>\n<li>link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。</li>\n<li>link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。</li>\n<li>link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。</li>\n<li>link支持使用Javascript控制DOM去改变样式；而@import不支持。</li>\n</ul>\n<h3 id=\"7-transition和animation的区别\"><a href=\"#7-transition和animation的区别\" class=\"headerlink\" title=\"7. transition和animation的区别\"></a>7. transition和animation的区别</h3><ul>\n<li><strong>transition是过度属性</strong>，强调过度，它的实现需要触发一个事件（比如鼠标移动上去，焦点，点击等）才执行动画。它类似于flash的补间动画，设置一个开始关键帧，一个结束关键帧。</li>\n<li><strong>animation是动画属性</strong>，它的实现不需要触发事件，设定好时间之后可以自己执行，且可以循环一个动画。它也类似于flash的补间动画，但是它可以设置多个关键帧（用@keyframe定义）完成动画。</li>\n</ul>\n<h3 id=\"8-display-none与visibility-hidden的区别\"><a href=\"#8-display-none与visibility-hidden的区别\" class=\"headerlink\" title=\"8. display:none与visibility:hidden的区别\"></a>8. display:none与visibility:hidden的区别</h3><p>这两个属性都是让元素隐藏，不可见。<strong>两者区别如下：</strong></p>\n<p>（1）<strong>在渲染树中</strong></p>\n<ul>\n<li><code>display:none</code>会让元素完全从渲染树中消失，渲染时不会占据任何空间；</li>\n<li><code>visibility:hidden</code>不会让元素从渲染树中消失，渲染的元素还会占据相应的空间，只是内容不可见。</li>\n</ul>\n<p>（2）<strong>是否是继承属性</strong></p>\n<ul>\n<li><code>display:none</code>是非继承属性，子孙节点会随着父节点从渲染树消失，通过修改子孙节点的属性也无法显示；</li>\n<li><code>visibility:hidden</code>是继承属性，子孙节点消失是由于继承了<code>hidden</code>，通过设置<code>visibility:visible</code>可以让子孙节点显示； （3）修改常规文档流中元素的 <code>display</code> 通常会造成文档的重排，但是修改<code>visibility</code>属性只会造成本元素的重绘；</li>\n</ul>\n<p>（4）如果使用读屏器，设置为<code>display:none</code>的内容不会被读取，设置为<code>visibility:hidden</code>的内容会被读取。</p>\n<h3 id=\"9-伪元素和伪类的区别和作用？\"><a href=\"#9-伪元素和伪类的区别和作用？\" class=\"headerlink\" title=\"9. 伪元素和伪类的区别和作用？\"></a>9. <strong>伪元素和伪类的区别和作用？</strong></h3><ul>\n<li>伪元素：在内容元素的前后插入额外的元素或样式，但是这些元素实际上并不在文档中生成。它们只在外部显示可见，但不会在文档的源代码中找到它们，因此，称为“伪”元素。例如：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::before</span> &#123;<span class=\"attribute\">content</span>:<span class=\"string\">&quot;第一章：&quot;</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::after</span> &#123;<span class=\"attribute\">content</span>:<span class=\"string\">&quot;Hot!&quot;</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::first-line</span> &#123;<span class=\"attribute\">background</span>:red;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::first-letter</span> &#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">30px</span>;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>伪类：将特殊的效果添加到特定选择器上。它是已有元素上添加类别的，不会产生新的元素。例如：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;<span class=\"attribute\">color</span>: <span class=\"number\">#FF00FF</span>&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:first</span>-child &#123;<span class=\"attribute\">color</span>: red&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong> 伪类是通过在元素选择器上加⼊伪类改变元素状态，⽽伪元素通过对元素的操作进⾏对元素的改变。</p>\n<h3 id=\"10-对requestAnimationframe的理解\"><a href=\"#10-对requestAnimationframe的理解\" class=\"headerlink\" title=\"10. 对requestAnimationframe的理解\"></a>10. 对requestAnimationframe的理解</h3><p>实现动画效果的方法比较多，Javascript 中可以通过定时器 setTimeout 来实现，CSS3 中可以使用 transition 和 animation 来实现，HTML5 中的 canvas 也可以实现。除此之外，HTML5 提供一个专门用于请求动画的API，那就是 requestAnimationFrame，顾名思义就是<strong>请求动画帧</strong>。</p>\n<p>MDN对该方法的描述：</p>\n<blockquote>\n<p>window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。</p>\n</blockquote>\n<p><strong>语法：</strong> <code>window.requestAnimationFrame(callback);</code>  其中，callback是<strong>下一次重绘之前更新动画帧所调用的函数</strong>(即上面所说的回调函数)。该回调函数会被传入DOMHighResTimeStamp参数，它表示requestAnimationFrame() 开始去执行回调函数的时刻。该方法属于<strong>宏任务</strong>，所以会在执行完微任务之后再去执行。</p>\n<p><strong>取消动画：</strong> 使用cancelAnimationFrame()来取消执行动画，该方法接收一个参数——requestAnimationFrame默认返回的id，只需要传入这个id就可以取消动画了。</p>\n<p><strong>优势：</strong></p>\n<ul>\n<li><strong>CPU节能</strong>：使用SetTinterval 实现的动画，当页面被隐藏或最小化时，SetTinterval 仍然在后台执行动画任务，由于此时页面处于不可见或不可用状态，刷新动画是没有意义的，完全是浪费CPU资源。而RequestAnimationFrame则完全不同，当页面处理未激活的状态下，该页面的屏幕刷新任务也会被系统暂停，因此跟着系统走的RequestAnimationFrame也会停止渲染，当页面被激活时，动画就从上次停留的地方继续执行，有效节省了CPU开销。</li>\n<li><strong>函数节流</strong>：在高频率事件( resize, scroll 等)中，为了防止在一个刷新间隔内发生多次函数执行，RequestAnimationFrame可保证每个刷新间隔内，函数只被执行一次，这样既能保证流畅性，也能更好的节省函数执行的开销，一个刷新间隔内函数执行多次时没有意义的，因为多数显示器每16.7ms刷新一次，多次绘制并不会在屏幕上体现出来。</li>\n<li><strong>减少DOM操作</strong>：requestAnimationFrame 会把每一帧中的所有DOM操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率，一般来说，这个频率为每秒60帧。</li>\n</ul>\n<p><strong>setTimeout执行动画的缺点</strong>：它通过设定间隔时间来不断改变图像位置，达到动画效果。但是容易出现卡顿、抖动的现象；原因是：</p>\n<ul>\n<li>settimeout任务被放入异步队列，只有当主线程任务执行完后才会执行队列中的任务，因此实际执行时间总是比设定时间要晚；</li>\n<li>settimeout的固定时间间隔不一定与屏幕刷新间隔时间相同，会引起丢帧。</li>\n</ul>\n<h3 id=\"11-对盒模型的理解\"><a href=\"#11-对盒模型的理解\" class=\"headerlink\" title=\"11. 对盒模型的理解\"></a>11. 对盒模型的理解</h3><p>CSS3中的盒模型有以下两种：标准盒子模型、IE盒子模型 <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4544d45b5a0c47a58c0c33a7d8fbac09~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4040de9fef1a49f4ae0ae66039edcfe0~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> 盒模型都是由四个部分组成的，分别是margin、border、padding和content。</p>\n<p>标准盒模型和IE盒模型的区别在于设置width和height时，所对应的范围不同：</p>\n<ul>\n<li>标准盒模型的width和height属性的范围只包含了content，</li>\n<li>IE盒模型的width和height属性的范围包含了border、padding和content。</li>\n</ul>\n<p>可以通过修改元素的box-sizing属性来改变元素的盒模型：</p>\n<ul>\n<li><code>box-sizeing: content-box</code>表示标准盒模型（默认值）</li>\n<li><code>box-sizeing: border-box</code>表示IE盒模型（怪异盒模型）</li>\n</ul>\n<h3 id=\"12-为什么有时候⽤translate来改变位置⽽不是定位？\"><a href=\"#12-为什么有时候⽤translate来改变位置⽽不是定位？\" class=\"headerlink\" title=\"12. 为什么有时候⽤translate来改变位置⽽不是定位？\"></a>12. 为什么有时候⽤<strong>translate</strong>来改变位置⽽不是定位？</h3><p>translate 是 transform 属性的⼀个值。改变transform或opacity不会触发浏览器重新布局（reflow）或重绘（repaint），只会触发复合（compositions）。⽽改变绝对定位会触发重新布局，进⽽触发重绘和复合。transform使浏览器为元素创建⼀个 GPU 图层，但改变绝对定位会使⽤到 CPU。 因此translate()更⾼效，可以缩短平滑动画的绘制时间。 ⽽translate改变位置时，元素依然会占据其原始空间，绝对定位就不会发⽣这种情况。</p>\n<h3 id=\"13-li-与-li-之间有看不见的空白间隔是什么原因引起的？如何解决？\"><a href=\"#13-li-与-li-之间有看不见的空白间隔是什么原因引起的？如何解决？\" class=\"headerlink\" title=\"13. li 与 li 之间有看不见的空白间隔是什么原因引起的？如何解决？\"></a>13. li 与 li 之间有看不见的空白间隔是什么原因引起的？如何解决？</h3><p>浏览器会把inline内联元素间的空白字符（空格、换行、Tab等）渲染成一个空格。为了美观，通常是一个<code>&lt;li&gt;</code>放在一行，这导致<code>&lt;li&gt;</code>换行后产生换行字符，它变成一个空格，占用了一个字符的宽度。</p>\n<p><strong>解决办法：</strong></p>\n<p>（1）为<code>&lt;li&gt;</code>设置float:left。不足：有些容器是不能设置浮动，如左右切换的焦点图等。</p>\n<p>（2）将所有<code>&lt;li&gt;</code>写在同一行。不足：代码不美观。</p>\n<p>（3）将<code>&lt;ul&gt;</code>内的字符尺寸直接设为0，即font-size:0。不足：<code>&lt;ul&gt;</code>中的其他字符尺寸也被设为0，需要额外重新设定其他字符尺寸，且在Safari浏览器依然会出现空白间隔。</p>\n<p>（4）消除<code>&lt;ul&gt;</code>的字符间隔letter-spacing:-8px，不足：这也设置了<code>&lt;li&gt;</code>内的字符间隔，因此需要将<code>&lt;li&gt;</code>内的字符间隔设为默认letter-spacing:normal。</p>\n<h3 id=\"14-CSS3中有哪些新特性\"><a href=\"#14-CSS3中有哪些新特性\" class=\"headerlink\" title=\"14. CSS3中有哪些新特性\"></a>14. CSS3中有哪些新特性</h3><ul>\n<li>新增各种CSS选择器 （: not(.input)：所有 class 不是“input”的节点）</li>\n<li>圆角 （border-radius:8px）</li>\n<li>多列布局 （multi-column layout）</li>\n<li>阴影和反射 （Shadoweflect）</li>\n<li>文字特效 （text-shadow）</li>\n<li>文字渲染 （Text-decoration）</li>\n<li>线性渐变 （gradient）</li>\n<li>旋转 （transform）</li>\n<li>增加了旋转,缩放,定位,倾斜,动画,多背景</li>\n</ul>\n<h3 id=\"15-替换元素的概念及计算规则\"><a href=\"#15-替换元素的概念及计算规则\" class=\"headerlink\" title=\"15. 替换元素的概念及计算规则\"></a>15. 替换元素的概念及计算规则</h3><p>通过修改某个属性值呈现的内容就可以被替换的元素就称为“替换元素”。</p>\n<p>替换元素除了内容可替换这一特性以外，还有以下特性：</p>\n<ul>\n<li><strong>内容的外观不受页面上的CSS的影响</strong>：用专业的话讲就是在样式表现在CSS作用域之外。如何更改替换元素本身的外观需要类似appearance属性，或者浏览器自身暴露的一些样式接口。</li>\n<li><strong>有自己的尺寸</strong>：在Web中，很多替换元素在没有明确尺寸设定的情况下，其默认的尺寸（不包括边框）是300像素×150像素，如</li>\n<li><strong>在很多CSS属性上有自己的一套表现规则</strong>：比较具有代表性的就是vertical-align属性，对于替换元素和非替换元素，vertical-align属性值的解释是不一样的。比方说vertical-align的默认值的baseline，很简单的属性值，基线之意，被定义为字符x的下边缘，而替换元素的基线却被硬生生定义成了元素的下边缘。</li>\n<li><strong>所有的替换元素都是内联水平元素</strong>：也就是替换元素和替换元素、替换元素和文字都是可以在一行显示的。但是，替换元素默认的display值却是不一样的，有的是inline，有的是inline-block。</li>\n</ul>\n<p>替换元素的尺寸从内而外分为三类：</p>\n<ul>\n<li><strong>固有尺寸：</strong> 指的是替换内容原本的尺寸。例如，图片、视频作为一个独立文件存在的时候，都是有着自己的宽度和高度的。</li>\n<li><strong>HTML尺寸：</strong> 只能通过HTML原生属性改变，这些HTML原生属性包括的width和height属性、的size属性。</li>\n<li><strong>CSS尺寸：</strong> 特指可以通过CSS的width和height或者max-width/min-width和max-height/min-height设置的尺寸，对应盒尺寸中的content box。</li>\n</ul>\n<p>这三层结构的计算规则具体如下： （1）如果没有CSS尺寸和HTML尺寸，则使用固有尺寸作为最终的宽高。 （2）如果没有CSS尺寸，则使用HTML尺寸作为最终的宽高。 （3）如果有CSS尺寸，则最终尺寸由CSS属性决定。 （4）如果“固有尺寸”含有固有的宽高比例，同时仅设置了宽度或仅设置了高度，则元素依然按照固有的宽高比例显示。 （5）如果上面的条件都不符合，则最终宽度表现为300像素，高度为150像素。 （6）内联替换元素和块级替换元素使用上面同一套尺寸计算规则。</p>\n<h3 id=\"16-常见的图片格式及使用场景\"><a href=\"#16-常见的图片格式及使用场景\" class=\"headerlink\" title=\"16. 常见的图片格式及使用场景\"></a>16. 常见的图片格式及使用场景</h3><p>（1）<strong>BMP</strong>，是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以BMP格式的图片通常是较大的文件。</p>\n<p>（2）<strong>GIF</strong>是无损的、采用索引色的点阵图。采用LZW压缩算法进行编码。文件小，是GIF格式的优点，同时，GIF格式还具有支持动画以及透明的优点。但是GIF格式仅支持8bit的索引色，所以GIF格式适用于对色彩要求不高同时需要文件体积较小的场景。</p>\n<p>（3）<strong>JPEG</strong>是有损的、采用直接色的点阵图。JPEG的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG非常适合用来存储照片，与GIF相比，JPEG不适合用来存储企业Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较GIF更大。</p>\n<p>（4）<strong>PNG-8</strong>是无损的、使用索引色的点阵图。PNG是一种比较新的图片格式，PNG-8是非常好的GIF格式替代者，在可能的情况下，应该尽可能的使用PNG-8而不是GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8还支持透明度的调节，而GIF并不支持。除非需要动画的支持，否则没有理由使用GIF而不是PNG-8。</p>\n<p>（5）<strong>PNG-24</strong>是无损的、使用直接色的点阵图。PNG-24的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24格式的文件大小要比BMP小得多。当然，PNG24的图片还是要比JPEG、GIF、PNG-8大得多。</p>\n<p>（6）<strong>SVG</strong>是无损的矢量图。SVG是矢量图意味着SVG图片由直线和曲线以及绘制它们的方法组成。当放大SVG图片时，看到的还是线和曲线，而不会出现像素点。SVG图片在放大时，不会失真，所以它适合用来绘制Logo、Icon等。</p>\n<p>（7）<strong>WebP</strong>是谷歌开发的一种新图片格式，WebP是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为Web而生的，什么叫为Web而生呢？就是说相同质量的图片，WebP具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有Chrome浏览器和Opera浏览器支持WebP格式，兼容性不太好。</p>\n<ul>\n<li>在无损压缩的情况下，相同质量的WebP图片，文件大小要比PNG小26%；</li>\n<li>在有损压缩的情况下，具有相同图片精度的WebP图片，文件大小要比JPEG小25%~34%；</li>\n<li>WebP图片格式支持图片透明度，一个无损压缩的WebP图片，如果要支持透明度只需要22%的格外文件大小。</li>\n</ul>\n<h3 id=\"17-对-CSSSprites-的理解\"><a href=\"#17-对-CSSSprites-的理解\" class=\"headerlink\" title=\"17. 对 CSSSprites 的理解\"></a>17. 对 CSSSprites 的理解</h3><p>CSSSprites（精灵图），将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的 background-image，background-repeat，background-position属性的组合进行背景定位。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>利用<code>CSS Sprites</code>能很好地减少网页的http请求，从而大大提高了页面的性能，这是<code>CSS Sprites</code>最大的优点；</li>\n<li><code>CSS Sprites</code>能减少图片的字节，把3张图片合并成1张图片的字节总是小于这3张图片的字节总和。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>在图片合并时，要把多张图片有序的、合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景。在宽屏及高分辨率下的自适应页面，如果背景不够宽，很容易出现背景断裂；</li>\n<li><code>CSSSprites</code>在开发的时候相对来说有点麻烦，需要借助<code>photoshop</code>或其他工具来对每个背景单元测量其准确的位置。</li>\n<li>维护方面：<code>CSS Sprites</code>在维护的时候比较麻烦，页面背景有少许改动时，就要改这张合并的图片，无需改的地方尽量不要动，这样避免改动更多的<code>CSS</code>，如果在原来的地方放不下，又只能（最好）往下加图片，这样图片的字节就增加了，还要改动<code>CSS</code>。</li>\n</ul>\n<h3 id=\"18-什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到-3x-2x这种图片？\"><a href=\"#18-什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到-3x-2x这种图片？\" class=\"headerlink\" title=\"18. 什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片？\"></a>18. 什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片？</h3><p>以 iPhone XS 为例，当写 CSS 代码时，针对于单位 px，其宽度为 414px &amp; 896px，也就是说当赋予一个 DIV元素宽度为 414px，这个 DIV 就会填满手机的宽度；</p>\n<p>而如果有一把尺子来实际测量这部手机的物理像素，实际为 1242*2688 物理像素；经过计算可知，1242/414=3，也就是说，在单边上，一个逻辑像素=3个物理像素，就说这个屏幕的像素密度为 3，也就是常说的 3 倍屏。</p>\n<p>对于图片来说，为了保证其不失真，1 个图片像素至少要对应一个物理像素，假如原始图片是 500300 像素，那么在 3 倍屏上就要放一个 1500900 像素的图片才能保证 1 个物理像素至少对应一个图片像素，才能不失真。 <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f1da1cbae9b45528cc2b33f74eb32f2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> 当然，也可以针对所有屏幕，都只提供最高清图片。虽然低密度屏幕用不到那么多图片像素，而且会因为下载多余的像素造成带宽浪费和下载延迟，但从结果上说能保证图片在所有屏幕上都不会失真。</p>\n<p>还可以使用 CSS 媒体查询来判断不同的像素密度，从而选择不同的图片:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my-image &#123; <span class=\"attr\">background</span>: (low.<span class=\"property\">png</span>); &#125;</span><br><span class=\"line\">@media only screen and (min-device-pixel-<span class=\"attr\">ratio</span>: <span class=\"number\">1.5</span>) &#123;</span><br><span class=\"line\">  #my-image &#123; <span class=\"attr\">background</span>: (high.<span class=\"property\">png</span>); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19-margin-和-padding-的使用场景\"><a href=\"#19-margin-和-padding-的使用场景\" class=\"headerlink\" title=\"19. margin 和 padding 的使用场景\"></a>19. <strong>margin 和 padding 的使用场景</strong></h3><ul>\n<li>需要在border外侧添加空白，且空白处不需要背景（色）时，使用 margin；</li>\n<li>需要在border内测添加空白，且空白处需要背景（色）时，使用 padding。</li>\n</ul>\n<h3 id=\"20-对line-height-的理解及其赋值方式\"><a href=\"#20-对line-height-的理解及其赋值方式\" class=\"headerlink\" title=\"20. 对line-height 的理解及其赋值方式\"></a>20. 对<strong>line-height 的理解及其赋值方式</strong></h3><p><strong>（1）line-height的概念：</strong></p>\n<ul>\n<li>line-height 指一行文本的高度，包含了字间距，实际上是下一行基线到上一行基线距离；</li>\n<li>如果一个标签没有定义 height 属性，那么其最终表现的高度由 line-height 决定；</li>\n<li>一个容器没有设置高度，那么撑开容器高度的是 line-height，而不是容器内的文本内容；</li>\n<li>把 line-height 值设置为 height 一样大小的值可以实现单行文字的垂直居中；</li>\n<li>line-height 和 height 都能撑开一个高度；</li>\n</ul>\n<p><strong>（2）line-height 的赋值方式：</strong></p>\n<ul>\n<li>带单位：px 是固定值，而 em 会参考父元素 font-size 值计算自身的行高</li>\n<li>纯数字：会把比例传递给后代。例如，父级行高为 1.5，子元素字体为 18px，则子元素行高为 1.5 * 18 = 27px</li>\n<li>百分比：将计算后的值传递给后代</li>\n</ul>\n<h3 id=\"21-CSS-优化和提高性能的方法有哪些？\"><a href=\"#21-CSS-优化和提高性能的方法有哪些？\" class=\"headerlink\" title=\"21. CSS 优化和提高性能的方法有哪些？\"></a>21. CSS 优化和提高性能的方法有哪些？</h3><p><strong>加载性能：</strong></p>\n<p>（1）css压缩：将写好的css进行打包压缩，可以减小文件体积。</p>\n<p>（2）css单一样式：当需要下边距和左边距的时候，很多时候会选择使用 margin:top 0 bottom 0；但margin-bottom:bottom;margin-left:left;执行效率会更高。</p>\n<p>（3）减少使用@import，建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。</p>\n<p><strong>选择器性能：</strong></p>\n<p>（1）关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；</p>\n<p>（2）如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）。</p>\n<p>（3）避免使用通配规则，如*{}计算次数惊人，只对需要用到的元素进行选择。</p>\n<p>（4）尽量少的去对标签进行选择，而是用class。</p>\n<p>（5）尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素。</p>\n<p>（6）了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。</p>\n<p><strong>渲染性能：</strong></p>\n<p>（1）慎重使用高性能属性：浮动、定位。</p>\n<p>（2）尽量减少页面重排、重绘。</p>\n<p>（3）去除空规则：｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体积。</p>\n<p>（4）属性值为0时，不加单位。</p>\n<p>（5）属性值为浮动小数0.**，可以省略小数点之前的0。</p>\n<p>（6）标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。</p>\n<p>（7）不使用@import前缀，它会影响css的加载速度。</p>\n<p>（8）选择器优化嵌套，尽量避免层级过深。</p>\n<p>（9）css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚，再使用。</p>\n<p>（10）正确使用display的属性，由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。</p>\n<p>（11）不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。web fonts通常体积庞大，而且一些浏览器在下载web fonts时会阻塞页面渲染损伤性能。</p>\n<p><strong>可维护性、健壮性：</strong></p>\n<p>（1）将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。</p>\n<p>（2）样式与内容分离：将css代码定义到外部css中。</p>\n<h3 id=\"22-CSS预处理器-后处理器是什么？为什么要使用它们？\"><a href=\"#22-CSS预处理器-后处理器是什么？为什么要使用它们？\" class=\"headerlink\" title=\"22. CSS预处理器/后处理器是什么？为什么要使用它们？\"></a>22. CSS预处理器/后处理器是什么？为什么要使用它们？</h3><p><strong>预处理器，</strong> 如：<code>less</code>，<code>sass</code>，<code>stylus</code>，用来预编译<code>sass</code>或者<code>less</code>，增加了<code>css</code>代码的复用性。层级，<code>mixin</code>， 变量，循环， 函数等对编写以及开发UI组件都极为方便。</p>\n<p><strong>后处理器，</strong> 如： <code>postCss</code>，通常是在完成的样式表中根据<code>css</code>规范处理<code>css</code>，让其更加有效。目前最常做的是给<code>css</code>属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。</p>\n<p><code>css</code>预处理器为<code>css</code>增加一些编程特性，无需考虑浏览器的兼容问题，可以在<code>CSS</code>中使用变量，简单的逻辑程序，函数等在编程语言中的一些基本的性能，可以让<code>css</code>更加的简洁，增加适应性以及可读性，可维护性等。</p>\n<p>其它<code>css</code>预处理器语言：<code>Sass（Scss）</code>, <code>Less</code>, <code>Stylus</code>, <code>Turbine</code>, <code>Swithch css</code>, <code>CSS Cacheer</code>, <code>DT Css</code>。</p>\n<p>使用原因：</p>\n<ul>\n<li>结构清晰， 便于扩展</li>\n<li>可以很方便的屏蔽浏览器私有语法的差异</li>\n<li>可以轻松实现多重继承</li>\n<li>完美的兼容了<code>CSS</code>代码，可以应用到老项目中</li>\n</ul>\n<h3 id=\"23-before-和-after-的双冒号和单冒号有什么区别？\"><a href=\"#23-before-和-after-的双冒号和单冒号有什么区别？\" class=\"headerlink\" title=\"23. ::before 和 :after 的双冒号和单冒号有什么区别？\"></a>23. ::before 和 :after 的双冒号和单冒号有什么区别？</h3><p>（1）冒号(<code>:</code>)用于<code>CSS3</code>伪类，双冒号(<code>::</code>)用于<code>CSS3</code>伪元素。 （2）<code>::before</code>就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于<code>dom</code>之中，只存在在页面之中。</p>\n<p><strong>注意：</strong> <code>:before </code>和 <code>:after</code> 这两个伪元素，是在<code>CSS2.1</code>里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着<code>Web</code>的进化，在<code>CSS3</code>的规范里，伪元素的语法被修改成使用双冒号，成为<code>::before</code>、<code>::after</code>。</p>\n<h3 id=\"24-display-inline-block-什么时候会显示间隙？\"><a href=\"#24-display-inline-block-什么时候会显示间隙？\" class=\"headerlink\" title=\"24. display:inline-block 什么时候会显示间隙？\"></a>24. display:inline-block 什么时候会显示间隙？</h3><ul>\n<li>有空格时会有间隙，可以删除空格解决；</li>\n<li><code>margin</code>正值时，可以让<code>margin</code>使用负值解决；</li>\n<li>使用<code>font-size</code>时，可通过设置<code>font-size:0</code>、<code>letter-spacing</code>、<code>word-spacing</code>解决；</li>\n</ul>\n<h3 id=\"25-单行、多行文本溢出隐藏\"><a href=\"#25-单行、多行文本溢出隐藏\" class=\"headerlink\" title=\"25. 单行、多行文本溢出隐藏\"></a>25. 单行、多行文本溢出隐藏</h3><ul>\n<li>单行文本溢出</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">overflow</span>: hidden;            // 溢出隐藏</span><br><span class=\"line\"><span class=\"attribute\">text-overflow</span>: ellipsis;      // 溢出用省略号显示</span><br><span class=\"line\"><span class=\"attribute\">white-space</span>: nowrap;         // 规定段落中的文本不进行换行</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>多行文本溢出</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">overflow</span>: hidden;            // 溢出隐藏</span><br><span class=\"line\"><span class=\"attribute\">text-overflow</span>: ellipsis;     // 溢出用省略号显示</span><br><span class=\"line\"><span class=\"attribute\">display</span>:-webkit-box;         // 作为弹性伸缩盒子模型显示。</span><br><span class=\"line\">-webkit-box-orient:vertical; // 设置伸缩盒子的子元素排列方式：从上到下垂直排列</span><br><span class=\"line\">-webkit-line-clamp:<span class=\"number\">3</span>;        // 显示的行数</span><br></pre></td></tr></table></figure>\n\n<p>注意：由于上面的三个属性都是 CSS3 的属性，没有浏览器可以兼容，所以要在前面加一个<code>-webkit-</code> 来兼容一部分浏览器。</p>\n<h3 id=\"26-Sass、Less-是什么？为什么要使用他们？\"><a href=\"#26-Sass、Less-是什么？为什么要使用他们？\" class=\"headerlink\" title=\"26. Sass、Less 是什么？为什么要使用他们？\"></a>26. Sass、Less 是什么？为什么要使用他们？</h3><p>他们都是 CSS 预处理器，是 CSS 上的一种抽象层。他们是一种特殊的语法/语言编译成 CSS。 例如 Less 是一种动态样式语言，将 CSS 赋予了动态语言的特性，如变量，继承，运算， 函数，LESS 既可以在客户端上运行 (支持 IE 6+, Webkit, Firefox)，也可以在服务端运行 (借助 Node.js)。</p>\n<p><strong>为什么要使用它们？</strong></p>\n<ul>\n<li>结构清晰，便于扩展。 可以方便地屏蔽浏览器私有语法差异。封装对浏览器语法差异的重复处理， 减少无意义的机械劳动。</li>\n<li>可以轻松实现多重继承。 完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译。</li>\n</ul>\n<h3 id=\"27-对媒体查询的理解？\"><a href=\"#27-对媒体查询的理解？\" class=\"headerlink\" title=\"27. 对媒体查询的理解？\"></a>27. 对媒体查询的理解？</h3><p>媒体查询由⼀个可选的媒体类型和零个或多个使⽤媒体功能的限制了样式表范围的表达式组成，例如宽度、⾼度和颜⾊。媒体查询，添加⾃CSS3，允许内容的呈现针对⼀个特定范围的输出设备⽽进⾏裁剪，⽽不必改变内容本身，适合web⽹⻚应对不同型号的设备⽽做出对应的响应适配。</p>\n<p>媒体查询包含⼀个可选的媒体类型和满⾜CSS3规范的条件下，包含零个或多个表达式，这些表达式描述了媒体特征，最终会被解析为true或false。如果媒体查询中指定的媒体类型匹配展示⽂档所使⽤的设备类型，并且所有的表达式的值都是true，那么该媒体查询的结果为true。那么媒体查询内的样式将会⽣效。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- link元素中的<span class=\"variable constant_\">CSS</span>媒体查询 --&gt; </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">media</span>=<span class=\"string\">&quot;(max-width: 800px)&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;example.css&quot;</span> /&gt;</span></span> </span><br><span class=\"line\">&lt;!-- 样式表中的<span class=\"variable constant_\">CSS</span>媒体查询 --&gt; </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"> </span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">600px</span>) &#123; </span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  <span class=\"selector-class\">.facet_sidebar</span> &#123; </span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">display</span>: none; </span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  &#125; </span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>简单来说，使用 @media 查询，可以针对不同的媒体类型定义不同的样式。@media 可以针对不同的屏幕尺寸设置不同的样式，特别是需要设置设计响应式的页面，@media 是非常有用的。当重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。</p>\n<h3 id=\"28-对-CSS-工程化的理解\"><a href=\"#28-对-CSS-工程化的理解\" class=\"headerlink\" title=\"28. 对 CSS 工程化的理解\"></a>28. 对 CSS 工程化的理解</h3><p>CSS 工程化是为了解决以下问题：</p>\n<ol>\n<li><strong>宏观设计</strong>：CSS 代码如何组织、如何拆分、模块结构怎样设计？</li>\n<li><strong>编码优化</strong>：怎样写出更好的 CSS？</li>\n<li><strong>构建</strong>：如何处理我的 CSS，才能让它的打包结果最优？</li>\n<li><strong>可维护性</strong>：代码写完了，如何最小化它后续的变更成本？如何确保任何一个同事都能轻松接手？</li>\n</ol>\n<p>以下三个方向都是时下比较流行的、普适性非常好的 CSS 工程化实践：</p>\n<ul>\n<li>预处理器：Less、 Sass 等；</li>\n<li>重要的工程化插件： PostCss；</li>\n<li>Webpack loader 等 。</li>\n</ul>\n<p>基于这三个方向，可以衍生出一些具有典型意义的子问题，这里我们逐个来看：</p>\n<p><strong>（1）预处理器：为什么要用预处理器？它的出现是为了解决什么问题？</strong></p>\n<p>预处理器，其实就是 CSS 世界的“轮子”。预处理器支持我们写一种类似 CSS、但实际并不是 CSS 的语言，然后把它编译成 CSS 代码： <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d58c5313e884e38b1545a5896613250~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> 那为什么写 CSS 代码写得好好的，偏偏要转去写“类 CSS”呢？这就和本来用 JS 也可以实现所有功能，但最后却写 React 的 jsx 或者 Vue 的模板语法一样——为了爽！要想知道有了预处理器有多爽，首先要知道的是传统 CSS 有多不爽。随着前端业务复杂度的提高，前端工程中对 CSS 提出了以下的诉求：</p>\n<ol>\n<li>宏观设计上：我们希望能优化 CSS 文件的目录结构，对现有的 CSS 文件实现复用；</li>\n<li>编码优化上：我们希望能写出结构清晰、简明易懂的 CSS，需要它具有一目了然的嵌套层级关系，而不是无差别的一铺到底写法；我们希望它具有变量特征、计算能力、循环能力等等更强的可编程性，这样我们可以少写一些无用的代码；</li>\n<li>可维护性上：更强的可编程性意味着更优质的代码结构，实现复用意味着更简单的目录结构和更强的拓展能力，这两点如果能做到，自然会带来更强的可维护性。</li>\n</ol>\n<p>这三点是传统 CSS 所做不到的，也正是预处理器所解决掉的问题。预处理器普遍会具备这样的特性：</p>\n<ul>\n<li>嵌套代码的能力，通过嵌套来反映不同 css 属性之间的层级关系 ；</li>\n<li>支持定义 css 变量；</li>\n<li>提供计算函数；</li>\n<li>允许对代码片段进行 extend 和 mixin；</li>\n<li>支持循环语句的使用；</li>\n<li>支持将 CSS 文件模块化，实现复用。</li>\n</ul>\n<p><strong>（2）PostCss：PostCss 是如何工作的？我们在什么场景下会使用 PostCss？</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2911f98bbacf4b1cbffbb9e1527a4977~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> 它和预处理器的不同就在于，预处理器处理的是 类CSS，而 PostCss 处理的就是 CSS 本身。Babel 可以将高版本的 JS 代码转换为低版本的 JS 代码。PostCss 做的是类似的事情：它可以编译尚未被浏览器广泛支持的先进的 CSS 语法，还可以自动为一些需要额外兼容的语法增加前缀。更强的是，由于 PostCss 有着强大的插件机制，支持各种各样的扩展，极大地强化了 CSS 的能力。</p>\n<p>PostCss 在业务中的使用场景非常多：</p>\n<ul>\n<li>提高 CSS 代码的可读性：PostCss 其实可以做类似预处理器能做的工作；</li>\n<li>当我们的 CSS 代码需要适配低版本浏览器时，PostCss 的 <a href=\"https://link.juejin.cn/?target=https://github.com/postcss/autoprefixer\">Autoprefixer</a> 插件可以帮助我们自动增加浏览器前缀；</li>\n<li>允许我们编写面向未来的 CSS：PostCss 能够帮助我们编译 CSS next 代码；</li>\n</ul>\n<p><strong>（3）Webpack 能处理 CSS 吗？如何实现？</strong> Webpack 能处理 CSS 吗：</p>\n<ul>\n<li><strong>Webpack 在裸奔的状态下，是不能处理 CSS 的</strong>，Webpack 本身是一个面向 JavaScript 且只能处理 JavaScript 代码的模块化打包工具；</li>\n<li>Webpack 在 loader 的辅助下，是可以处理 CSS 的。</li>\n</ul>\n<p>如何用 Webpack 实现对 CSS 的处理：</p>\n<ul>\n<li>Webpack 中操作 CSS 需要使用的两个关键的 loader：css-loader 和 style-loader</li>\n<li>注意，答出“用什么”有时候可能还不够，面试官会怀疑你是不是在背答案，所以你还需要了解每个 loader 都做了什么事情：<ul>\n<li>css-loader：导入 CSS 模块，对 CSS 代码进行编译处理；</li>\n<li>style-loader：创建style标签，把 CSS 内容写入标签。</li>\n</ul>\n</li>\n</ul>\n<p>在实际使用中，<strong>css-loader 的执行顺序一定要安排在 style-loader 的前面</strong>。因为只有完成了编译过程，才可以对 css 代码进行插入；若提前插入了未编译的代码，那么 webpack 是无法理解这坨东西的，它会无情报错。</p>\n<h3 id=\"29-如何判断元素是否到达可视区域\"><a href=\"#29-如何判断元素是否到达可视区域\" class=\"headerlink\" title=\"29. 如何判断元素是否到达可视区域\"></a>29. 如何判断元素是否到达可视区域</h3><p>以图片显示为例：</p>\n<ul>\n<li><code>window.innerHeight</code> 是浏览器可视区的高度；</li>\n<li><code>document.body.scrollTop || document.documentElement.scrollTop</code> 是浏览器滚动的过的距离；</li>\n<li><code>imgs.offsetTop</code> 是元素顶部距离文档顶部的高度（包括滚动条的距离）；</li>\n<li>内容达到显示区域的：<code>img.offsetTop &lt; window.innerHeight + document.body.scrollTop;</code></li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c57fc165a4ce4d5b9a2885867d4f1cab~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"></p>\n<h3 id=\"30-z-index属性在什么情况下会失效\"><a href=\"#30-z-index属性在什么情况下会失效\" class=\"headerlink\" title=\"30. z-index属性在什么情况下会失效\"></a>30. z-index属性在什么情况下会失效</h3><p>通常 z-index 的使用是在有两个重叠的标签，在一定的情况下控制其中一个在另一个的上方或者下方出现。z-index值越大就越是在上层。z-index元素的position属性需要是relative，absolute或是fixed。</p>\n<p>z-index属性在下列情况下会失效：</p>\n<ul>\n<li>父元素position为relative时，子元素的z-index失效。解决：父元素position改为absolute或static；</li>\n<li>元素没有设置position属性为非static属性。解决：设置该元素的position属性为relative，absolute或是fixed中的一种；</li>\n<li>元素在设置z-index的同时还设置了float浮动。解决：float去除，改为display：inline-block；</li>\n</ul>\n<h3 id=\"31-CSS3中的transform有哪些属性\"><a href=\"#31-CSS3中的transform有哪些属性\" class=\"headerlink\" title=\"31. CSS3中的transform有哪些属性\"></a>31. CSS3中的transform有哪些属性</h3><h2 id=\"二、页面布局\"><a href=\"#二、页面布局\" class=\"headerlink\" title=\"二、页面布局\"></a>二、页面布局</h2><h3 id=\"1-常见的CSS布局单位\"><a href=\"#1-常见的CSS布局单位\" class=\"headerlink\" title=\"1. 常见的CSS布局单位\"></a>1. 常见的CSS布局单位</h3><p>常用的布局单位包括像素（<code>px</code>），百分比（<code>%</code>），<code>em</code>，<code>rem</code>，<code>vw/vh</code>。</p>\n<p><strong>（1）像素</strong>（<code>px</code>）是页面布局的基础，一个像素表示终端（电脑、手机、平板等）屏幕所能显示的最小的区域，像素分为两种类型：CSS像素和物理像素：</p>\n<ul>\n<li><strong>CSS像素</strong>：为web开发者提供，在CSS中使用的一个抽象单位；</li>\n<li><strong>物理像素</strong>：只与设备的硬件密度有关，任何设备的物理像素都是固定的。</li>\n</ul>\n<p><strong>（2）百分比</strong>（<code>%</code>），当浏览器的宽度或者高度发生变化时，通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。一般认为子元素的百分比相对于直接父元素。</p>\n<p><strong>（3）em和rem</strong>相对于px更具灵活性，它们都是相对长度单位，它们之间的区别：<strong>em相对于父元素，rem相对于根元素。</strong></p>\n<ul>\n<li><strong>em：</strong> 文本相对长度单位。相对于当前对象内文本的字体尺寸。如果当前行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸(默认16px)。(相对父元素的字体大小倍数)。</li>\n<li><strong>rem：</strong> rem是CSS3新增的一个相对单位，相对于根元素（html元素）的font-size的倍数。<strong>作用</strong>：利用rem可以实现简单的响应式布局，可以利用html元素中字体的大小与屏幕间的比值来设置font-size的值，以此实现当屏幕分辨率变化时让元素也随之变化。</li>\n</ul>\n<p><strong>（4）vw/vh</strong>是与视图窗口有关的单位，vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度，除了vw和vh外，还有vmin和vmax两个相关的单位。</p>\n<ul>\n<li>vw：相对于视窗的宽度，视窗宽度是100vw；</li>\n<li>vh：相对于视窗的高度，视窗高度是100vh；</li>\n<li>vmin：vw和vh中的较小值；</li>\n<li>vmax：vw和vh中的较大值；</li>\n</ul>\n<p><strong>vw/vh</strong> 和百分比很类似，两者的区别：</p>\n<ul>\n<li>百分比（<code>%</code>）：大部分相对于祖先元素，也有相对于自身的情况比如（border-radius、translate等)</li>\n<li>vw/vm：相对于视窗的尺寸</li>\n</ul>\n<h3 id=\"2-px、em、rem的区别及使用场景\"><a href=\"#2-px、em、rem的区别及使用场景\" class=\"headerlink\" title=\"2. px、em、rem的区别及使用场景\"></a>2. px、em、rem的区别及使用场景</h3><p><strong>三者的区别：</strong></p>\n<ul>\n<li>px是固定的像素，一旦设置了就无法因为适应页面大小而改变。</li>\n<li>em和rem相对于px更具有灵活性，他们是相对长度单位，其长度不是固定的，更适用于响应式布局。</li>\n<li>em是相对于其父元素来设置字体大小，这样就会存在一个问题，进行任何元素设置，都有可能需要知道他父元素的大小。而rem是相对于根元素，这样就意味着，只需要在根元素确定一个参考值。</li>\n</ul>\n<p><strong>使用场景：</strong></p>\n<ul>\n<li>对于只需要适配少部分移动设备，且分辨率对页面影响不大的，使用px即可 。</li>\n<li>对于需要适配各种移动设备，使用rem，例如需要适配iPhone和iPad等分辨率差别比较挺大的设备。</li>\n</ul>\n<h3 id=\"3-两栏布局的实现\"><a href=\"#3-两栏布局的实现\" class=\"headerlink\" title=\"3. 两栏布局的实现\"></a>3. 两栏布局的实现</h3><p>一般两栏布局指的是<strong>左边一栏宽度固定，右边一栏宽度自适应</strong>，两栏布局的具体实现：</p>\n<ul>\n<li>利用浮动，将左边元素宽度设置为200px，并且设置向左浮动。将右边元素的margin-left设置为200px，宽度设置为auto（默认为auto，撑满整个父元素）。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: gold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用浮动，左侧元素设置固定大小，并左浮动，右侧元素设置overflow: hidden; 这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">     <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">     <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用flex布局，将左边元素设置为固定宽度200px，将右边的元素设置为flex:1。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: gold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用绝对定位，将父级元素设置为相对定位。左边元素设置为absolute定位，并且宽度设置为200px。将右边元素的margin-left的值设置为200px。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: gold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用绝对定位，将父级元素设置为相对定位。左边元素宽度设置为200px，右边元素设置为绝对定位，左边定位为200px，其余方向定位为0。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: gold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-三栏布局的实现\"><a href=\"#4-三栏布局的实现\" class=\"headerlink\" title=\"4. 三栏布局的实现\"></a>4. 三栏布局的实现</h3><p>三栏布局一般指的是页面中一共有三栏，<strong>左右两栏宽度固定，中间自适应的布局</strong>，三栏布局的具体实现：</p>\n<ul>\n<li>利用<strong>绝对定位</strong>，左右两栏设置为绝对定位，中间设置对应方向大小的margin的值。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: gold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用flex布局，左右两栏设置固定大小，中间一栏设置为flex:1。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: gold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用浮动，左右两栏设置固定大小，并设置对应方向的浮动。中间一栏设置左右两个方向的margin值，注意这种方式<strong>，中间一栏必须放到最后：</strong></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: gold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>圣杯布局，利用浮动和负边距来实现。父级元素设置左右的 padding，三列均设置向左浮动，中间一列放在最前面，宽度设置为父级元素的宽度，因此后面两列都被挤到了下一行，通过设置 margin 负值将其移动到上一行，再利用相对定位，定位到两边。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-right</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: -<span class=\"number\">100px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: gold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>双飞翼布局，双飞翼布局相对于圣杯布局来说，左右位置的保留是通过中间列的 margin 值来实现的，而不是通过父元素的 padding 来实现的。本质上来说，也是通过浮动和外边距负值来实现的。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: gold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-水平垂直居中的实现\"><a href=\"#5-水平垂直居中的实现\" class=\"headerlink\" title=\"5. 水平垂直居中的实现\"></a>5. 水平垂直居中的实现</h3><ul>\n<li>利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过translate来调整元素的中心点到页面的中心。该方法需要<strong>考虑浏览器兼容问题。</strong></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;    <span class=\"attribute\">position</span>: relative;&#125; <span class=\"selector-class\">.child</span> &#123;    <span class=\"attribute\">position</span>: absolute;    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>,-<span class=\"number\">50%</span>);&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用绝对定位，设置四个方向的值都为0，并将margin设置为auto，由于宽高固定，因此对应方向实现平分，可以实现水平和垂直方向上的居中。该方法适用于<strong>盒子有宽高</strong>的情况：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过margin负值来调整元素的中心点到页面的中心。该方法适用于<strong>盒子宽高已知</strong>的情况</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">50px</span>;     <span class=\"comment\">/* 自身 height 的一半 */</span></span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">50px</span>;    <span class=\"comment\">/* 自身 width 的一半 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用flex布局，通过align-items:center和justify-content:center设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。该方法要<strong>考虑兼容的问题</strong>，该方法在移动端用的较多：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>:center;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>:center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-如何根据设计稿进行移动端适配？\"><a href=\"#6-如何根据设计稿进行移动端适配？\" class=\"headerlink\" title=\"6. 如何根据设计稿进行移动端适配？\"></a>6. 如何根据设计稿进行移动端适配？</h3><p>移动端适配主要有两个维度：</p>\n<ul>\n<li><strong>适配不同像素密度，</strong> 针对不同的像素密度，使用 CSS 媒体查询，选择不同精度的图片，以保证图片不会失真；</li>\n<li><strong>适配不同屏幕大小，</strong> 由于不同的屏幕有着不同的逻辑像素大小，所以如果直接使用 px 作为开发单位，会使得开发的页面在某一款手机上可以准确显示，但是在另一款手机上就会失真。为了适配不同屏幕的大小，应按照比例来还原设计稿的内容。</li>\n</ul>\n<p>为了能让页面的尺寸自适应，可以使用 rem，em，vw，vh 等相对单位。</p>\n<h3 id=\"7-对Flex布局的理解及其使用场景\"><a href=\"#7-对Flex布局的理解及其使用场景\" class=\"headerlink\" title=\"7. 对Flex布局的理解及其使用场景\"></a>7. 对Flex布局的理解及其使用场景</h3><p>Flex是FlexibleBox的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。行内元素也可以使用Flex布局。注意，设为Flex布局以后，<strong>子元素的float、clear和vertical-align属性将失效</strong>。采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis），项目默认沿水平主轴排列。</p>\n<p>以下6个属性设置在<strong>容器上</strong>：</p>\n<ul>\n<li>flex-direction属性决定主轴的方向（即项目的排列方向）。</li>\n<li>flex-wrap属性定义，如果一条轴线排不下，如何换行。</li>\n<li>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</li>\n<li>justify-content属性定义了项目在主轴上的对齐方式。</li>\n<li>align-items属性定义项目在交叉轴上如何对齐。</li>\n<li>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</li>\n</ul>\n<p>以下6个属性设置在<strong>项目上</strong>：</p>\n<ul>\n<li>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</li>\n<li>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</li>\n<li>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</li>\n<li>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</li>\n<li>flex属性是flex-grow，flex-shrink和flex-basis的简写，默认值为0 1 auto。</li>\n<li>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</li>\n</ul>\n<p><strong>简单来说：</strong> flex布局是CSS3新增的一种布局方式，可以通过将一个元素的display属性值设置为flex从而使它成为一个flex容器，它的所有子元素都会成为它的项目。一个容器默认有两条轴：一个是水平的主轴，一个是与主轴垂直的交叉轴。可以使用flex-direction来指定主轴的方向。可以使用justify-content来指定元素在主轴上的排列方式，使用align-items来指定元素在交叉轴上的排列方式。还可以使用flex-wrap来规定当一行排列不下时的换行方式。对于容器中的项目，可以使用order属性来指定项目的排列顺序，还可以使用flex-grow来指定当排列空间有剩余的时候，项目的放大比例，还可以使用flex-shrink来指定当排列空间不足时，项目的缩小比例。</p>\n<h3 id=\"8-响应式设计的概念及基本原理\"><a href=\"#8-响应式设计的概念及基本原理\" class=\"headerlink\" title=\"8. 响应式设计的概念及基本原理\"></a>8. 响应式设计的概念及基本原理</h3><p>响应式网站设计<code>（Responsive Web design</code>）是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。</p>\n<p>关于原理： 基本原理是通过媒体查询<code>（@media）</code>查询检测不同的设备屏幕尺寸做处理。 关于兼容： 页面头部必须有mate声明的<code>viewport</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;’viewport’&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”width=device-width,&quot;</span> <span class=\"attr\">initial-scale</span>=<span class=\"string\">&quot;1.&quot;</span> <span class=\"attr\">maximum-scale</span>=<span class=\"string\">&quot;1,user-scalable=no”&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、定位与浮动\"><a href=\"#三、定位与浮动\" class=\"headerlink\" title=\"三、定位与浮动\"></a>三、定位与浮动</h2><h3 id=\"1-为什么需要清除浮动？清除浮动的方式\"><a href=\"#1-为什么需要清除浮动？清除浮动的方式\" class=\"headerlink\" title=\"1. 为什么需要清除浮动？清除浮动的方式\"></a>1. 为什么需要清除浮动？清除浮动的方式</h3><p><strong>浮动的定义：</strong> 非IE浏览器下，容器不设高度且子元素浮动时，容器高度不能被内容撑开。 此时，内容会溢出到容器外面而影响布局。这种现象被称为浮动（溢出）。</p>\n<p><strong>浮动的工作原理：</strong></p>\n<ul>\n<li>浮动元素脱离文档流，不占据空间（引起“高度塌陷”现象）</li>\n<li>浮动元素碰到包含它的边框或者其他浮动元素的边框停留</li>\n</ul>\n<p>浮动元素可以左右移动，直到遇到另一个浮动元素或者遇到它外边缘的包含框。浮动框不属于文档流中的普通流，当元素浮动之后，不会影响块级元素的布局，只会影响内联元素布局。此时文档流中的普通流就会表现得该浮动框不存在一样的布局模式。当包含框的高度小于浮动框的时候，此时就会出现“高度塌陷”。</p>\n<p><strong>浮动元素引起的问题？</strong></p>\n<ul>\n<li>父元素的高度无法被撑开，影响与父元素同级的元素</li>\n<li>与浮动元素同级的非浮动元素会跟随其后</li>\n<li>若浮动的元素不是第一个元素，则该元素之前的元素也要浮动，否则会影响页面的显示结构</li>\n</ul>\n<p><strong>清除浮动的方式如下：</strong></p>\n<ul>\n<li>给父级div定义<code>height</code>属性</li>\n<li>最后一个浮动元素之后添加一个空的div标签，并添加<code>clear:both</code>样式</li>\n<li>包含浮动元素的父级标签添加<code>overflow:hidden</code>或者<code>overflow:auto</code></li>\n<li>使用 :after 伪元素。由于IE6-7不支持 :after，使用 zoom:1 触发 hasLayout**</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&quot;\\200B&quot;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table; </span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.clearfix</span>&#123;</span><br><span class=\"line\">    *zoom: <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用-clear-属性清除浮动的原理？\"><a href=\"#2-使用-clear-属性清除浮动的原理？\" class=\"headerlink\" title=\"2. 使用 clear 属性清除浮动的原理？\"></a>2. 使用 clear 属性清除浮动的原理？</h3><p>使用clear属性清除浮动，其语法如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">clear</span>:none|left|right|both</span><br></pre></td></tr></table></figure>\n\n<p>如果单看字面意思，clear:left 是“清除左浮动”，clear:right 是“清除右浮动”，实际上，这种解释是有问题的，因为浮动一直还在，并没有清除。</p>\n<p>官方对clear属性解释：“<strong>元素盒子的边不能和前面的浮动元素相邻</strong>”，对元素设置clear属性是为了避免浮动元素对该元素的影响，而不是清除掉浮动。</p>\n<p>还需要注意 clear 属性指的是元素盒子的边不能和前面的浮动元素相邻，注意这里“<strong>前面的</strong>”3个字，也就是clear属性对“后面的”浮动元素是不闻不问的。考虑到float属性要么是left，要么是right，不可能同时存在，同时由于clear属性对“后面的”浮动元素不闻不问，因此，当clear:left有效的时候，clear:right必定无效，也就是此时clear:left等同于设置clear:both；同样地，clear:right如果有效也是等同于设置clear:both。由此可见，clear:left和clear:right这两个声明就没有任何使用的价值，至少在CSS世界中是如此，直接使用clear:both吧。</p>\n<p>一般使用伪元素的方式清除浮动：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clear</span><span class=\"selector-pseudo\">::after</span>&#123;  <span class=\"attribute\">content</span>:<span class=\"string\">&#x27;&#x27;</span>;  <span class=\"attribute\">display</span>: block;   <span class=\"attribute\">clear</span>:both;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>clear属性只有块级元素才有效的，而::after等伪元素默认都是内联水平，这就是借助伪元素清除浮动影响时需要设置display属性值的原因。</p>\n<h3 id=\"3-对BFC的理解，如何创建BFC\"><a href=\"#3-对BFC的理解，如何创建BFC\" class=\"headerlink\" title=\"3. 对BFC的理解，如何创建BFC\"></a>3. 对BFC的理解，如何创建BFC</h3><p>先来看两个相关的概念：</p>\n<ul>\n<li>Box: Box 是 CSS 布局的对象和基本单位，⼀个⻚⾯是由很多个 Box 组成的，这个Box就是我们所说的盒模型。</li>\n<li>Formatting context：块级上下⽂格式化，它是⻚⾯中的⼀块渲染区域，并且有⼀套渲染规则，它决定了其⼦元素将如何定位，以及和其他元素的关系和相互作⽤。</li>\n</ul>\n<p>块格式化上下文（Block Formatting Context，BFC）是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。</p>\n<p>通俗来讲：BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定规则进行物品摆放，并且不会影响其它环境中的物品。如果一个元素符合触发BFC的条件，则BFC中的元素布局不受外部影响。</p>\n<p><strong>创建BFC的条件：</strong></p>\n<ul>\n<li>根元素：body；</li>\n<li>元素设置浮动：float 除 none 以外的值；</li>\n<li>元素设置绝对定位：position (absolute、fixed)；</li>\n<li>display 值为：inline-block、table-cell、table-caption、flex等；</li>\n<li>overflow 值为：hidden、auto、scroll；</li>\n</ul>\n<p><strong>BFC的特点：</strong></p>\n<ul>\n<li>垂直方向上，自上而下排列，和文档流的排列方式一致。</li>\n<li>在BFC中上下相邻的两个容器的margin会重叠</li>\n<li>计算BFC的高度时，需要计算浮动元素的高度</li>\n<li>BFC区域不会与浮动的容器发生重叠</li>\n<li>BFC是独立的容器，容器内部元素不会影响外部元素</li>\n<li>每个元素的左margin值和容器的左border相接触</li>\n</ul>\n<p><strong>BFC的作用：</strong></p>\n<ul>\n<li><strong>解决margin的重叠问题</strong>：由于BFC是一个独立的区域，内部的元素和外部的元素互不影响，将两个元素变为两个BFC，就解决了margin重叠的问题。</li>\n<li><strong>解决高度塌陷的问题</strong>：在对子元素设置浮动后，父元素会发生高度塌陷，也就是父元素的高度变为0。解决这个问题，只需要把父元素变成一个BFC。常用的办法是给父元素设置<code>overflow:hidden</code>。</li>\n<li><strong>创建自适应两栏布局</strong>：可以用来创建自适应两栏布局：左边的宽度固定，右边的宽度自适应。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">     <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">     <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=&quot;<span class=\"attribute\">left</span>&quot;&gt;&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=&quot;<span class=\"attribute\">right</span>&quot;&gt;&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>左侧设置<code>float:left</code>，右侧设置<code>overflow: hidden</code>。这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠，实现了自适应两栏布局。</p>\n<h3 id=\"4-什么是margin重叠问题？如何解决？\"><a href=\"#4-什么是margin重叠问题？如何解决？\" class=\"headerlink\" title=\"4. 什么是margin重叠问题？如何解决？\"></a>4. 什么是margin重叠问题？如何解决？</h3><p><strong>问题描述：</strong> 两个块级元素的上外边距和下外边距可能会合并（折叠）为一个外边距，其大小会取其中外边距值大的那个，这种行为就是外边距折叠。需要注意的是，<strong>浮动的元素和绝对定位</strong>这种脱离文档流的元素的外边距不会折叠。重叠只会出现在<strong>垂直方向</strong>。</p>\n<p><strong>计算原则：</strong> 折叠合并后外边距的计算原则如下：</p>\n<ul>\n<li>如果两者都是正数，那么就去最大者</li>\n<li>如果是一正一负，就会正值减去负值的绝对值</li>\n<li>两个都是负值时，用0减去两个中绝对值大的那个</li>\n</ul>\n<p><strong>解决办法：</strong> 对于折叠的情况，主要有两种：<strong>兄弟之间重叠</strong>和<strong>父子之间重叠</strong> （1）兄弟之间重叠</p>\n<ul>\n<li>底部元素变为行内盒子：<code>display: inline-block</code></li>\n<li>底部元素设置浮动：<code>float</code></li>\n<li>底部元素的position的值为<code>absolute/fixed</code></li>\n</ul>\n<p>（2）父子之间重叠</p>\n<ul>\n<li>父元素加入：<code>overflow: hidden</code></li>\n<li>父元素添加透明边框：<code>border:1px solid transparent</code></li>\n<li>子元素变为行内盒子：<code>display: inline-block</code></li>\n<li>子元素加入浮动属性或定位</li>\n</ul>\n<h3 id=\"5-元素的层叠顺序\"><a href=\"#5-元素的层叠顺序\" class=\"headerlink\" title=\"5. 元素的层叠顺序\"></a>5. 元素的层叠顺序</h3><p>层叠顺序，英文称作 stacking order，表示元素发生层叠时有着特定的垂直显示顺序。下面是盒模型的层叠规则： <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbc59ae1adb5454c8c7f60582df10ff9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> 对于上图，由上到下分别是： （1）背景和边框：建立当前层叠上下文元素的背景和边框。 （2）负的z-index：当前层叠上下文中，z-index属性值为负的元素。 （3）块级盒：文档流内非行内级非定位后代元素。 （4）浮动盒：非定位浮动元素。 （5）行内盒：文档流内行内级非定位后代元素。 （6）z-index:0：层叠级数为0的定位元素。 （7）正z-index：z-index属性值为正的定位元素。</p>\n<p><strong>注意:</strong> 当定位元素z-index:auto，生成盒在当前层叠上下文中的层级为 0，不会建立新的层叠上下文，除非是根元素。</p>\n<h3 id=\"6-position的属性有哪些，区别是什么\"><a href=\"#6-position的属性有哪些，区别是什么\" class=\"headerlink\" title=\"6. position的属性有哪些，区别是什么\"></a>6. position的属性有哪些，区别是什么</h3><p>position有以下属性值：</p>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>概述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>absolute</td>\n<td>生成绝对定位的元素，相对于static定位以外的一个父元素进行定位。元素的位置通过left、top、right、bottom属性进行规定。</td>\n</tr>\n<tr>\n<td>relative</td>\n<td>生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过left、top、right、bottom属性进行规定。</td>\n</tr>\n<tr>\n<td>fixed</td>\n<td>生成绝对定位的元素，指定元素相对于屏幕视⼝（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变，⽐如回到顶部的按钮⼀般都是⽤此定位⽅式。</td>\n</tr>\n<tr>\n<td>static</td>\n<td>默认值，没有定位，元素出现在正常的文档流中，会忽略 top, bottom, left, right 或者 z-index 声明，块级元素从上往下纵向排布，⾏级元素从左向右排列。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定从父元素继承position属性的值</td>\n</tr>\n</tbody></table>\n<p>前面三者的定位方式如下：</p>\n<ul>\n<li><strong>relative：</strong> 元素的定位永远是相对于元素自身位置的，和其他元素没关系，也不会影响其他元素。</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6523548b65834c578202acc5e6388af4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"></p>\n<ul>\n<li><strong>fixed：</strong> 元素的定位是相对于 window （或者 iframe）边界的，和其他元素没有关系。但是它具有破坏性，会导致其他元素位置的变化。</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b35e646aa3c4d9cac803753d8b67c39~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"></p>\n<ul>\n<li><strong>absolute：</strong> 元素的定位相对于前两者要复杂许多。如果为 absolute 设置了 top、left，浏览器会根据什么去确定它的纵向和横向的偏移量呢？答案是浏览器会递归查找该元素的所有父元素，如果找到一个设置了<code>position:relative/absolute/fixed</code>的元素，就以该元素为基准定位，如果没找到，就以浏览器边界定位。如下两个图所示：</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6d4f199b3f842f090890eea32318e11~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2c7150bd7614a548f04a2919f1ea12a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"></p>\n<h3 id=\"7-display、float、position的关系\"><a href=\"#7-display、float、position的关系\" class=\"headerlink\" title=\"7. display、float、position的关系\"></a>7. <strong>display、float、position的关系</strong></h3><p>（1）首先判断display属性是否为none，如果为none，则position和float属性的值不影响元素最后的表现。</p>\n<p>（2）然后判断position的值是否为absolute或者fixed，如果是，则float属性失效，并且display的值应该被设置为table或者block，具体转换需要看初始转换值。</p>\n<p>（3）如果position的值不为absolute或者fixed，则判断float属性的值是否为none，如果不是，则display的值则按上面的规则转换。注意，如果position的值为relative并且float属性的值存在，则relative相对于浮动后的最终位置定位。</p>\n<p>（4）如果float的值为none，则判断元素是否为根元素，如果是根元素则display属性按照上面的规则转换，如果不是，则保持指定的display属性值不变。</p>\n<p>总的来说，可以把它看作是一个类似优先级的机制，”position:absolute”和”position:fixed”优先级最高，有它存在的时候，浮动不起作用，’display’的值也需要调整；其次，元素的’float’特性的值不是”none”的时候或者它是根元素的时候，调整’display’的值；最后，非根元素，并且非浮动元素，并且非绝对定位的元素，’display’特性值同设置值。</p>\n<h3 id=\"8-absolute与fixed共同点与不同点\"><a href=\"#8-absolute与fixed共同点与不同点\" class=\"headerlink\" title=\"8. absolute与fixed共同点与不同点\"></a>8. absolute与fixed共同点与不同点</h3><p><strong>共同点：</strong></p>\n<ul>\n<li>改变行内元素的呈现方式，将display置为inline-block </li>\n<li>使元素脱离普通文档流，不再占据文档物理空间</li>\n<li>覆盖非定位文档元素</li>\n</ul>\n<p><strong>不同点：</strong></p>\n<ul>\n<li>abuselute与fixed的根元素不同，abuselute的根元素可以设置，fixed根元素是浏览器。</li>\n<li>在有滚动条的页面中，absolute会跟着父元素进行移动，fixed固定在页面的具体位置。</li>\n</ul>\n<h3 id=\"9-对-sticky-定位的理解\"><a href=\"#9-对-sticky-定位的理解\" class=\"headerlink\" title=\"9. 对 sticky 定位的理解\"></a>9. 对 sticky 定位的理解</h3><p>sticky 英文字面意思是粘贴，所以可以把它称之为粘性定位。语法：<strong>position: sticky;</strong> 基于用户的滚动位置来定位。</p>\n<p>粘性定位的元素是依赖于用户的滚动，在 <strong>position:relative</strong> 与 <strong>position:fixed</strong> 定位之间切换。它的行为就像 <strong>position:relative;</strong> 而当页面滚动超出目标区域时，它的表现就像 **position:fixed;**，它会固定在目标位置。元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。这个特定阈值指的是 top, right, bottom 或 left 之一，换言之，指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。</p>\n<h2 id=\"四、场景应用\"><a href=\"#四、场景应用\" class=\"headerlink\" title=\"四、场景应用\"></a>四、场景应用</h2><h3 id=\"1-实现一个三角形\"><a href=\"#1-实现一个三角形\" class=\"headerlink\" title=\"1. 实现一个三角形\"></a>1. 实现一个三角形</h3><p>CSS绘制三角形主要用到的是border属性，也就是边框。</p>\n<p>平时在给盒子设置边框时，往往都设置很窄，就可能误以为边框是由矩形组成的。实际上，border属性是右三角形组成的，下面看一个例子：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">100px</span> solid;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: orange blue red green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将元素的长宽都设置为0，显示出来的效果是这样的： <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cba8731fea9842a8b8103c2b387fe64f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> 所以可以根据border这个特性来绘制三角形： <strong>（1）三角1</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;    <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid red;    <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;    <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab996951a0cc42cf9e6d9e12eb827f8b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> <strong>（2）三角2</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/531c6c250dd8446fb0f264e7b3df6fba~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> <strong>（3）三角3</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4beaf4e4a0140ad9e7252f8a6e4e8e6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> <strong>（4）三角4</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/445f50ad19164b0f863ad8dfef2a29b1~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> <strong>（5）三角5</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">100px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">100px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1ac630463164e42a027b54bb95f56ba~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> 还有很多，就不一一实现了，总体的原则就是通过上下左右边框来控制三角形的方向，用边框的宽度比来控制三角形的角度。</p>\n<h3 id=\"2-实现一个扇形\"><a href=\"#2-实现一个扇形\" class=\"headerlink\" title=\"2. 实现一个扇形\"></a>2. 实现一个扇形</h3><p>用CSS实现扇形的思路和三角形基本一致，就是多了一个圆角的样式，实现一个90°的扇形：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">100px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    heigt: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top-color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db5e46aea0ce4805a0c2bbec2743546e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"></p>\n<h3 id=\"3-实现一个宽高自适应的正方形\"><a href=\"#3-实现一个宽高自适应的正方形\" class=\"headerlink\" title=\"3. 实现一个宽高自适应的正方形\"></a>3. 实现一个宽高自适应的正方形</h3><ul>\n<li>利用vw来实现：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.square</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">10vw</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用元素的margin/padding百分比是相对父元素width的性质来实现：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.square</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">20%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用子元素的margin-top的值来实现：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.square</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">30%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.square</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-画一条0-5px的线\"><a href=\"#4-画一条0-5px的线\" class=\"headerlink\" title=\"4. 画一条0.5px的线\"></a>4. 画一条0.5px的线</h3><ul>\n<li><strong>采用transform: scale()的方式</strong>，该方法用来定义元素的2D 缩放转换：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>采用meta viewport的方式</strong></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; <span class=\"attribute\">content</span>=&quot;<span class=\"attribute\">width</span>=device-<span class=\"attribute\">width</span>, initial-scale=<span class=\"number\">0.5</span>, minimum-scale=<span class=\"number\">0.5</span>, maximum-scale=<span class=\"number\">0.5</span>&quot;/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这样就能缩放到原来的0.5倍，如果是1px那么就会变成0.5px。viewport只针对于移动端，只在移动端上才能看到效果</p>\n<h3 id=\"5-设置小于12px的字体\"><a href=\"#5-设置小于12px的字体\" class=\"headerlink\" title=\"5. 设置小于12px的字体\"></a>5. 设置小于12px的字体</h3><p>在谷歌下css设置字体大小为12px及以下时，显示都是一样大小，都是默认12px。</p>\n<p><strong>解决办法：</strong></p>\n<ul>\n<li>使用Webkit的内核的-webkit-text-size-adjust的私有CSS属性来解决，只要加了-webkit-text-size-adjust:none;字体大小就不受限制了。但是chrome更新到27版本之后就不可以用了。所以高版本chrome谷歌浏览器已经不再支持-webkit-text-size-adjust样式，所以要使用时候慎用。</li>\n<li>使用css3的transform缩放属性-webkit-transform:scale(0.5); 注意-webkit-transform:scale(0.75);收缩的是整个元素的大小，这时候，如果是内联元素，必须要将内联元素转换成块元素，可以使用display：block/inline-block/…；</li>\n<li>使用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。</li>\n</ul>\n<h3 id=\"6-如何解决-1px-问题？\"><a href=\"#6-如何解决-1px-问题？\" class=\"headerlink\" title=\"6. 如何解决 1px 问题？\"></a>6. 如何解决 1px 问题？</h3><p>1px 问题指的是：在一些 <code>Retina屏幕</code> 的机型上，移动端页面的 1px 会变得很粗，呈现出不止 1px 的效果。原因很简单——CSS 中的 1px 并不能和移动设备上的 1px 划等号。它们之间的比例关系有一个专门的属性来描述：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.devicePixelRatio = 设备的物理像素 / CSS像素。</span><br></pre></td></tr></table></figure>\n\n<p>打开 Chrome 浏览器，启动移动端调试模式，在控制台去输出这个 <code>devicePixelRatio</code> 的值。这里选中 iPhone6/7/8 这系列的机型，输出的结果就是2： <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a8af7dca29f84b7e9d1f94232713ef07~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> 这就意味着设置的 1px CSS 像素，在这个设备上实际会用 2 个物理像素单元来进行渲染，所以实际看到的一定会比 1px 粗一些。 <strong>解决1px 问题的三种思路：</strong></p>\n<h4 id=\"思路一：直接写-0-5px\"><a href=\"#思路一：直接写-0-5px\" class=\"headerlink\" title=\"思路一：直接写 0.5px\"></a>思路一：直接写 0.5px</h4><p>如果之前 1px 的样式这样写：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#333</span></span><br></pre></td></tr></table></figure>\n\n<p>可以先在 JS 中拿到 window.devicePixelRatio 的值，然后把这个值通过 JSX 或者模板语法给到 CSS 的 data 里，达到这样的效果（这里用 JSX 语法做示范）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;container&quot;</span> data-device=&#123;&#123;<span class=\"variable language_\">window</span>.<span class=\"property\">devicePixelRatio</span>&#125;&#125;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以在 CSS 中用属性选择器来命中 devicePixelRatio 为某一值的情况，比如说这里尝试命中 devicePixelRatio 为2的情况：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span><span class=\"selector-attr\">[data-device=<span class=\"string\">&quot;2&quot;</span>]</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>:<span class=\"number\">0.5px</span> solid <span class=\"number\">#333</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>直接把 1px 改成 1/devicePixelRatio 后的值，这是目前为止最简单的一种方法。这种方法的缺陷在于兼容性不行，IOS 系统需要8及以上的版本，安卓系统则直接不兼容。</p>\n<h4 id=\"思路二：伪元素先放大后缩小\"><a href=\"#思路二：伪元素先放大后缩小\" class=\"headerlink\" title=\"思路二：伪元素先放大后缩小\"></a>思路二：伪元素先放大后缩小</h4><p>这个方法的可行性会更高，兼容性也更好。唯一的缺点是代码会变多。</p>\n<p>思路是<strong>先放大、后缩小：在目标元素的后面追加一个 ::after 伪元素，让这个元素布局为 absolute 之后、整个伸展开铺在目标元素上，然后把它的宽和高都设置为目标元素的两倍，border值设为 1px。接着借助 CSS 动画特效中的放缩能力，把整个伪元素缩小为原来的 50%。此时，伪元素的宽高刚好可以和原有的目标元素对齐，而 border 也缩小为了 1px 的二分之一，间接地实现了 0.5px 的效果。</strong></p>\n<p>代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span><span class=\"selector-attr\">[data-device=<span class=\"string\">&quot;2&quot;</span>]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#container</span><span class=\"selector-attr\">[data-device=<span class=\"string\">&quot;2&quot;</span>]</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">      <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">      <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">200%</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">200%</span>;</span><br><span class=\"line\">      <span class=\"attribute\">content</span>:<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">0.5</span>);</span><br><span class=\"line\">      <span class=\"attribute\">transform-origin</span>: left top;</span><br><span class=\"line\">      <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">      <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#333</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"思路三：viewport-缩放来解决\"><a href=\"#思路三：viewport-缩放来解决\" class=\"headerlink\" title=\"思路三：viewport 缩放来解决\"></a>思路三：viewport 缩放来解决</h4><p>这个思路就是对 meta 标签里几个关键属性下手：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里针对像素比为2的页面，把整个页面缩放为了原来的1/2大小。这样，本来占用2个物理像素的 1px 样式，现在占用的就是标准的一个物理像素。根据像素比的不同，这个缩放比例可以被计算为不同的值，用 js 代码实现如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> scale = <span class=\"number\">1</span> / <span class=\"variable language_\">window</span>.<span class=\"property\">devicePixelRatio</span>;</span><br><span class=\"line\"><span class=\"comment\">// 这里 metaEl 指的是 meta 标签对应的 Dom</span></span><br><span class=\"line\">metaEl.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;content&#x27;</span>, <span class=\"string\">`width=device-width,user-scalable=no,initial-scale=<span class=\"subst\">$&#123;scale&#125;</span>,maximum-scale=<span class=\"subst\">$&#123;scale&#125;</span>,minimum-scale=<span class=\"subst\">$&#123;scale&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这样解决了，但这样做的副作用也很大，整个页面被缩放了。这时 1px 已经被处理成物理像素大小，这样的大小在手机上显示边框很合适。但是，一些原本不需要被缩小的内容，比如文字、图片等，也被无差别缩小掉了。</p>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/8857f1a4.html","title":"激励自己的小句子","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/posts/1213ac56.html","title":"算法总结","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/c9a941a3.html","title":"vue复习","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/posts/50daec4.html","title":"网络复习","xiao":"精品","riqi":"2022.01.01"}]}},"excerpt":"<p>摘要</p>","more":"<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230608144415180.png\" alt=\"image-20230608144415180\"></p>\n<h2 id=\"一、CSS基础\"><a href=\"#一、CSS基础\" class=\"headerlink\" title=\"一、CSS基础\"></a>一、CSS基础</h2><h3 id=\"1-CSS选择器及其优先级\"><a href=\"#1-CSS选择器及其优先级\" class=\"headerlink\" title=\"1. CSS选择器及其优先级\"></a>1. CSS选择器及其优先级</h3><table>\n<thead>\n<tr>\n<th><strong>选择器</strong></th>\n<th><strong>格式</strong></th>\n<th><strong>优先级权重</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id选择器</td>\n<td>#id</td>\n<td>100</td>\n</tr>\n<tr>\n<td>类选择器</td>\n<td>#classname</td>\n<td>10</td>\n</tr>\n<tr>\n<td>属性选择器</td>\n<td>a[ref=“eee”]</td>\n<td>10</td>\n</tr>\n<tr>\n<td>伪类选择器</td>\n<td>li:last-child</td>\n<td>10</td>\n</tr>\n<tr>\n<td>标签选择器</td>\n<td>div</td>\n<td>1</td>\n</tr>\n<tr>\n<td>伪元素选择器</td>\n<td>li:after</td>\n<td>1</td>\n</tr>\n<tr>\n<td>相邻兄弟选择器</td>\n<td>h1+p</td>\n<td>0</td>\n</tr>\n<tr>\n<td>子选择器</td>\n<td>ul&gt;li</td>\n<td>0</td>\n</tr>\n<tr>\n<td>后代选择器</td>\n<td>li a</td>\n<td>0</td>\n</tr>\n<tr>\n<td>通配符选择器</td>\n<td>*</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>对于选择器的<strong>优先级</strong>：</p>\n<ul>\n<li>标签选择器、伪元素选择器：1</li>\n<li>类选择器、伪类选择器、属性选择器：10</li>\n<li>id 选择器：100</li>\n<li>内联样式：1000</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>!important声明的样式的优先级最高；</li>\n<li>如果优先级相同，则最后出现的样式生效；</li>\n<li>继承得到的样式的优先级最低；</li>\n<li>通用选择器（*）、子选择器（&gt;）和相邻同胞选择器（+）并不在这四个等级中，所以它们的权值都为 0 ；</li>\n<li>样式表的来源不同时，优先级顺序为：内联样式 &gt; 内部样式 &gt; 外部样式 &gt; 浏览器用户自定义样式 &gt; 浏览器默认样式。</li>\n</ul>\n<h3 id=\"2-CSS中可继承与不可继承属性有哪些\"><a href=\"#2-CSS中可继承与不可继承属性有哪些\" class=\"headerlink\" title=\"2. CSS中可继承与不可继承属性有哪些\"></a>2. CSS中可继承与不可继承属性有哪些</h3><p><strong>一、无继承性的属性</strong></p>\n<ol>\n<li><strong>display</strong>：规定元素应该生成的框的类型</li>\n<li><strong>文本属性</strong>：</li>\n</ol>\n<ul>\n<li>vertical-align：垂直文本对齐</li>\n<li>text-decoration：规定添加到文本的装饰</li>\n<li>text-shadow：文本阴影效果</li>\n<li>white-space：空白符的处理</li>\n<li>unicode-bidi：设置文本的方向</li>\n</ul>\n<ol>\n<li><strong>盒子模型的属性</strong>：width、height、margin、border、padding</li>\n<li><strong>背景属性</strong>：background、background-color、background-image、background-repeat、background-position、background-attachment</li>\n<li><strong>定位属性</strong>：float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index</li>\n<li><strong>生成内容属性</strong>：content、counter-reset、counter-increment</li>\n<li><strong>轮廓样式属性</strong>：outline-style、outline-width、outline-color、outline</li>\n<li><strong>页面样式属性</strong>：size、page-break-before、page-break-after</li>\n<li><strong>声音样式属性</strong>：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during</li>\n</ol>\n<p><strong>二、有继承性的属性</strong></p>\n<ol>\n<li><strong>字体系列属性</strong></li>\n</ol>\n<ul>\n<li>font-family：字体系列</li>\n<li>font-weight：字体的粗细</li>\n<li>font-size：字体的大小</li>\n<li>font-style：字体的风格</li>\n</ul>\n<ol>\n<li><strong>文本系列属性</strong></li>\n</ol>\n<ul>\n<li>text-indent：文本缩进</li>\n<li>text-align：文本水平对齐</li>\n<li>line-height：行高</li>\n<li>word-spacing：单词之间的间距</li>\n<li>letter-spacing：中文或者字母之间的间距</li>\n<li>text-transform：控制文本大小写（就是uppercase、lowercase、capitalize这三个）</li>\n<li>color：文本颜色</li>\n</ul>\n<ol>\n<li><strong>元素可见性</strong></li>\n</ol>\n<ul>\n<li>visibility：控制元素显示隐藏</li>\n</ul>\n<ol>\n<li><strong>列表布局属性</strong></li>\n</ol>\n<ul>\n<li>list-style：列表风格，包括list-style-type、list-style-image等</li>\n</ul>\n<ol>\n<li><strong>光标属性</strong></li>\n</ol>\n<ul>\n<li>cursor：光标显示为何种形态</li>\n</ul>\n<h3 id=\"3-display的属性值及其作用\"><a href=\"#3-display的属性值及其作用\" class=\"headerlink\" title=\"3. display的属性值及其作用\"></a>3. display的属性值及其作用</h3><table>\n<thead>\n<tr>\n<th><strong>属性值</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>none</td>\n<td>元素不显示，并且会从文档流中移除。</td>\n</tr>\n<tr>\n<td>block</td>\n<td>块类型。默认宽度为父元素宽度，可设置宽高，换行显示。</td>\n</tr>\n<tr>\n<td>inline</td>\n<td>行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。</td>\n</tr>\n<tr>\n<td>inline-block</td>\n<td>默认宽度为内容宽度，可以设置宽高，同行显示。</td>\n</tr>\n<tr>\n<td>list-item</td>\n<td>像块类型元素一样显示，并添加样式列表标记。</td>\n</tr>\n<tr>\n<td>table</td>\n<td>此元素会作为块级表格来显示。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承display属性的值。</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-display的block、inline和inline-block的区别\"><a href=\"#4-display的block、inline和inline-block的区别\" class=\"headerlink\" title=\"4. display的block、inline和inline-block的区别\"></a>4. display的block、inline和inline-block的区别</h3><p>（1）<strong>block：</strong> 会独占一行，多个元素会另起一行，可以设置width、height、margin和padding属性；</p>\n<p>（2）<strong>inline：</strong> 元素不会独占一行，设置width、height属性无效。但可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin；</p>\n<p>（3）<strong>inline-block：</strong> 将对象设置为inline对象，但对象的内容作为block对象呈现，之后的内联对象会被排列在同一行内。</p>\n<p>对于行内元素和块级元素，其特点如下：</p>\n<p><strong>（1）行内元素</strong></p>\n<ul>\n<li>设置宽高无效；</li>\n<li>可以设置水平方向的margin和padding属性，不能设置垂直方向的padding和margin；</li>\n<li>不会自动换行；</li>\n</ul>\n<p><strong>（2）块级元素</strong></p>\n<ul>\n<li>可以设置宽高；</li>\n<li>设置margin和padding都有效；</li>\n<li>可以自动换行；</li>\n<li>多个块状，默认排列从上到下。</li>\n</ul>\n<h3 id=\"5-隐藏元素的方法有哪些\"><a href=\"#5-隐藏元素的方法有哪些\" class=\"headerlink\" title=\"5. 隐藏元素的方法有哪些\"></a>5. 隐藏元素的方法有哪些</h3><ul>\n<li><strong>display: none</strong>：渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件。</li>\n<li><strong>visibility: hidden</strong>：元素在页面中仍占据空间，但是不会响应绑定的监听事件。</li>\n<li><strong>opacity: 0</strong>：将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且能够响应元素绑定的监听事件。</li>\n<li><strong>position: absolute</strong>：通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。</li>\n<li><strong>z-index: 负值</strong>：来使其他元素遮盖住该元素，以此来实现隐藏。</li>\n<li><strong>clip/clip-path</strong> ：使用元素裁剪的方法来实现元素的隐藏，这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。</li>\n<li>**transform: scale(0,0)**：将元素缩放为 0，来实现元素的隐藏。这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。</li>\n</ul>\n<h3 id=\"6-link和-import的区别\"><a href=\"#6-link和-import的区别\" class=\"headerlink\" title=\"6. link和@import的区别\"></a>6. link和@import的区别</h3><p>两者都是外部引用CSS的方式，它们的区别如下：</p>\n<ul>\n<li>link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。</li>\n<li>link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。</li>\n<li>link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。</li>\n<li>link支持使用Javascript控制DOM去改变样式；而@import不支持。</li>\n</ul>\n<h3 id=\"7-transition和animation的区别\"><a href=\"#7-transition和animation的区别\" class=\"headerlink\" title=\"7. transition和animation的区别\"></a>7. transition和animation的区别</h3><ul>\n<li><strong>transition是过度属性</strong>，强调过度，它的实现需要触发一个事件（比如鼠标移动上去，焦点，点击等）才执行动画。它类似于flash的补间动画，设置一个开始关键帧，一个结束关键帧。</li>\n<li><strong>animation是动画属性</strong>，它的实现不需要触发事件，设定好时间之后可以自己执行，且可以循环一个动画。它也类似于flash的补间动画，但是它可以设置多个关键帧（用@keyframe定义）完成动画。</li>\n</ul>\n<h3 id=\"8-display-none与visibility-hidden的区别\"><a href=\"#8-display-none与visibility-hidden的区别\" class=\"headerlink\" title=\"8. display:none与visibility:hidden的区别\"></a>8. display:none与visibility:hidden的区别</h3><p>这两个属性都是让元素隐藏，不可见。<strong>两者区别如下：</strong></p>\n<p>（1）<strong>在渲染树中</strong></p>\n<ul>\n<li><code>display:none</code>会让元素完全从渲染树中消失，渲染时不会占据任何空间；</li>\n<li><code>visibility:hidden</code>不会让元素从渲染树中消失，渲染的元素还会占据相应的空间，只是内容不可见。</li>\n</ul>\n<p>（2）<strong>是否是继承属性</strong></p>\n<ul>\n<li><code>display:none</code>是非继承属性，子孙节点会随着父节点从渲染树消失，通过修改子孙节点的属性也无法显示；</li>\n<li><code>visibility:hidden</code>是继承属性，子孙节点消失是由于继承了<code>hidden</code>，通过设置<code>visibility:visible</code>可以让子孙节点显示； （3）修改常规文档流中元素的 <code>display</code> 通常会造成文档的重排，但是修改<code>visibility</code>属性只会造成本元素的重绘；</li>\n</ul>\n<p>（4）如果使用读屏器，设置为<code>display:none</code>的内容不会被读取，设置为<code>visibility:hidden</code>的内容会被读取。</p>\n<h3 id=\"9-伪元素和伪类的区别和作用？\"><a href=\"#9-伪元素和伪类的区别和作用？\" class=\"headerlink\" title=\"9. 伪元素和伪类的区别和作用？\"></a>9. <strong>伪元素和伪类的区别和作用？</strong></h3><ul>\n<li>伪元素：在内容元素的前后插入额外的元素或样式，但是这些元素实际上并不在文档中生成。它们只在外部显示可见，但不会在文档的源代码中找到它们，因此，称为“伪”元素。例如：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::before</span> &#123;<span class=\"attribute\">content</span>:<span class=\"string\">&quot;第一章：&quot;</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::after</span> &#123;<span class=\"attribute\">content</span>:<span class=\"string\">&quot;Hot!&quot;</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::first-line</span> &#123;<span class=\"attribute\">background</span>:red;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">::first-letter</span> &#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">30px</span>;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>伪类：将特殊的效果添加到特定选择器上。它是已有元素上添加类别的，不会产生新的元素。例如：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;<span class=\"attribute\">color</span>: <span class=\"number\">#FF00FF</span>&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:first</span>-child &#123;<span class=\"attribute\">color</span>: red&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong> 伪类是通过在元素选择器上加⼊伪类改变元素状态，⽽伪元素通过对元素的操作进⾏对元素的改变。</p>\n<h3 id=\"10-对requestAnimationframe的理解\"><a href=\"#10-对requestAnimationframe的理解\" class=\"headerlink\" title=\"10. 对requestAnimationframe的理解\"></a>10. 对requestAnimationframe的理解</h3><p>实现动画效果的方法比较多，Javascript 中可以通过定时器 setTimeout 来实现，CSS3 中可以使用 transition 和 animation 来实现，HTML5 中的 canvas 也可以实现。除此之外，HTML5 提供一个专门用于请求动画的API，那就是 requestAnimationFrame，顾名思义就是<strong>请求动画帧</strong>。</p>\n<p>MDN对该方法的描述：</p>\n<blockquote>\n<p>window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。</p>\n</blockquote>\n<p><strong>语法：</strong> <code>window.requestAnimationFrame(callback);</code>  其中，callback是<strong>下一次重绘之前更新动画帧所调用的函数</strong>(即上面所说的回调函数)。该回调函数会被传入DOMHighResTimeStamp参数，它表示requestAnimationFrame() 开始去执行回调函数的时刻。该方法属于<strong>宏任务</strong>，所以会在执行完微任务之后再去执行。</p>\n<p><strong>取消动画：</strong> 使用cancelAnimationFrame()来取消执行动画，该方法接收一个参数——requestAnimationFrame默认返回的id，只需要传入这个id就可以取消动画了。</p>\n<p><strong>优势：</strong></p>\n<ul>\n<li><strong>CPU节能</strong>：使用SetTinterval 实现的动画，当页面被隐藏或最小化时，SetTinterval 仍然在后台执行动画任务，由于此时页面处于不可见或不可用状态，刷新动画是没有意义的，完全是浪费CPU资源。而RequestAnimationFrame则完全不同，当页面处理未激活的状态下，该页面的屏幕刷新任务也会被系统暂停，因此跟着系统走的RequestAnimationFrame也会停止渲染，当页面被激活时，动画就从上次停留的地方继续执行，有效节省了CPU开销。</li>\n<li><strong>函数节流</strong>：在高频率事件( resize, scroll 等)中，为了防止在一个刷新间隔内发生多次函数执行，RequestAnimationFrame可保证每个刷新间隔内，函数只被执行一次，这样既能保证流畅性，也能更好的节省函数执行的开销，一个刷新间隔内函数执行多次时没有意义的，因为多数显示器每16.7ms刷新一次，多次绘制并不会在屏幕上体现出来。</li>\n<li><strong>减少DOM操作</strong>：requestAnimationFrame 会把每一帧中的所有DOM操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率，一般来说，这个频率为每秒60帧。</li>\n</ul>\n<p><strong>setTimeout执行动画的缺点</strong>：它通过设定间隔时间来不断改变图像位置，达到动画效果。但是容易出现卡顿、抖动的现象；原因是：</p>\n<ul>\n<li>settimeout任务被放入异步队列，只有当主线程任务执行完后才会执行队列中的任务，因此实际执行时间总是比设定时间要晚；</li>\n<li>settimeout的固定时间间隔不一定与屏幕刷新间隔时间相同，会引起丢帧。</li>\n</ul>\n<h3 id=\"11-对盒模型的理解\"><a href=\"#11-对盒模型的理解\" class=\"headerlink\" title=\"11. 对盒模型的理解\"></a>11. 对盒模型的理解</h3><p>CSS3中的盒模型有以下两种：标准盒子模型、IE盒子模型 <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4544d45b5a0c47a58c0c33a7d8fbac09~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4040de9fef1a49f4ae0ae66039edcfe0~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> 盒模型都是由四个部分组成的，分别是margin、border、padding和content。</p>\n<p>标准盒模型和IE盒模型的区别在于设置width和height时，所对应的范围不同：</p>\n<ul>\n<li>标准盒模型的width和height属性的范围只包含了content，</li>\n<li>IE盒模型的width和height属性的范围包含了border、padding和content。</li>\n</ul>\n<p>可以通过修改元素的box-sizing属性来改变元素的盒模型：</p>\n<ul>\n<li><code>box-sizeing: content-box</code>表示标准盒模型（默认值）</li>\n<li><code>box-sizeing: border-box</code>表示IE盒模型（怪异盒模型）</li>\n</ul>\n<h3 id=\"12-为什么有时候⽤translate来改变位置⽽不是定位？\"><a href=\"#12-为什么有时候⽤translate来改变位置⽽不是定位？\" class=\"headerlink\" title=\"12. 为什么有时候⽤translate来改变位置⽽不是定位？\"></a>12. 为什么有时候⽤<strong>translate</strong>来改变位置⽽不是定位？</h3><p>translate 是 transform 属性的⼀个值。改变transform或opacity不会触发浏览器重新布局（reflow）或重绘（repaint），只会触发复合（compositions）。⽽改变绝对定位会触发重新布局，进⽽触发重绘和复合。transform使浏览器为元素创建⼀个 GPU 图层，但改变绝对定位会使⽤到 CPU。 因此translate()更⾼效，可以缩短平滑动画的绘制时间。 ⽽translate改变位置时，元素依然会占据其原始空间，绝对定位就不会发⽣这种情况。</p>\n<h3 id=\"13-li-与-li-之间有看不见的空白间隔是什么原因引起的？如何解决？\"><a href=\"#13-li-与-li-之间有看不见的空白间隔是什么原因引起的？如何解决？\" class=\"headerlink\" title=\"13. li 与 li 之间有看不见的空白间隔是什么原因引起的？如何解决？\"></a>13. li 与 li 之间有看不见的空白间隔是什么原因引起的？如何解决？</h3><p>浏览器会把inline内联元素间的空白字符（空格、换行、Tab等）渲染成一个空格。为了美观，通常是一个<code>&lt;li&gt;</code>放在一行，这导致<code>&lt;li&gt;</code>换行后产生换行字符，它变成一个空格，占用了一个字符的宽度。</p>\n<p><strong>解决办法：</strong></p>\n<p>（1）为<code>&lt;li&gt;</code>设置float:left。不足：有些容器是不能设置浮动，如左右切换的焦点图等。</p>\n<p>（2）将所有<code>&lt;li&gt;</code>写在同一行。不足：代码不美观。</p>\n<p>（3）将<code>&lt;ul&gt;</code>内的字符尺寸直接设为0，即font-size:0。不足：<code>&lt;ul&gt;</code>中的其他字符尺寸也被设为0，需要额外重新设定其他字符尺寸，且在Safari浏览器依然会出现空白间隔。</p>\n<p>（4）消除<code>&lt;ul&gt;</code>的字符间隔letter-spacing:-8px，不足：这也设置了<code>&lt;li&gt;</code>内的字符间隔，因此需要将<code>&lt;li&gt;</code>内的字符间隔设为默认letter-spacing:normal。</p>\n<h3 id=\"14-CSS3中有哪些新特性\"><a href=\"#14-CSS3中有哪些新特性\" class=\"headerlink\" title=\"14. CSS3中有哪些新特性\"></a>14. CSS3中有哪些新特性</h3><ul>\n<li>新增各种CSS选择器 （: not(.input)：所有 class 不是“input”的节点）</li>\n<li>圆角 （border-radius:8px）</li>\n<li>多列布局 （multi-column layout）</li>\n<li>阴影和反射 （Shadoweflect）</li>\n<li>文字特效 （text-shadow）</li>\n<li>文字渲染 （Text-decoration）</li>\n<li>线性渐变 （gradient）</li>\n<li>旋转 （transform）</li>\n<li>增加了旋转,缩放,定位,倾斜,动画,多背景</li>\n</ul>\n<h3 id=\"15-替换元素的概念及计算规则\"><a href=\"#15-替换元素的概念及计算规则\" class=\"headerlink\" title=\"15. 替换元素的概念及计算规则\"></a>15. 替换元素的概念及计算规则</h3><p>通过修改某个属性值呈现的内容就可以被替换的元素就称为“替换元素”。</p>\n<p>替换元素除了内容可替换这一特性以外，还有以下特性：</p>\n<ul>\n<li><strong>内容的外观不受页面上的CSS的影响</strong>：用专业的话讲就是在样式表现在CSS作用域之外。如何更改替换元素本身的外观需要类似appearance属性，或者浏览器自身暴露的一些样式接口。</li>\n<li><strong>有自己的尺寸</strong>：在Web中，很多替换元素在没有明确尺寸设定的情况下，其默认的尺寸（不包括边框）是300像素×150像素，如</li>\n<li><strong>在很多CSS属性上有自己的一套表现规则</strong>：比较具有代表性的就是vertical-align属性，对于替换元素和非替换元素，vertical-align属性值的解释是不一样的。比方说vertical-align的默认值的baseline，很简单的属性值，基线之意，被定义为字符x的下边缘，而替换元素的基线却被硬生生定义成了元素的下边缘。</li>\n<li><strong>所有的替换元素都是内联水平元素</strong>：也就是替换元素和替换元素、替换元素和文字都是可以在一行显示的。但是，替换元素默认的display值却是不一样的，有的是inline，有的是inline-block。</li>\n</ul>\n<p>替换元素的尺寸从内而外分为三类：</p>\n<ul>\n<li><strong>固有尺寸：</strong> 指的是替换内容原本的尺寸。例如，图片、视频作为一个独立文件存在的时候，都是有着自己的宽度和高度的。</li>\n<li><strong>HTML尺寸：</strong> 只能通过HTML原生属性改变，这些HTML原生属性包括的width和height属性、的size属性。</li>\n<li><strong>CSS尺寸：</strong> 特指可以通过CSS的width和height或者max-width/min-width和max-height/min-height设置的尺寸，对应盒尺寸中的content box。</li>\n</ul>\n<p>这三层结构的计算规则具体如下： （1）如果没有CSS尺寸和HTML尺寸，则使用固有尺寸作为最终的宽高。 （2）如果没有CSS尺寸，则使用HTML尺寸作为最终的宽高。 （3）如果有CSS尺寸，则最终尺寸由CSS属性决定。 （4）如果“固有尺寸”含有固有的宽高比例，同时仅设置了宽度或仅设置了高度，则元素依然按照固有的宽高比例显示。 （5）如果上面的条件都不符合，则最终宽度表现为300像素，高度为150像素。 （6）内联替换元素和块级替换元素使用上面同一套尺寸计算规则。</p>\n<h3 id=\"16-常见的图片格式及使用场景\"><a href=\"#16-常见的图片格式及使用场景\" class=\"headerlink\" title=\"16. 常见的图片格式及使用场景\"></a>16. 常见的图片格式及使用场景</h3><p>（1）<strong>BMP</strong>，是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以BMP格式的图片通常是较大的文件。</p>\n<p>（2）<strong>GIF</strong>是无损的、采用索引色的点阵图。采用LZW压缩算法进行编码。文件小，是GIF格式的优点，同时，GIF格式还具有支持动画以及透明的优点。但是GIF格式仅支持8bit的索引色，所以GIF格式适用于对色彩要求不高同时需要文件体积较小的场景。</p>\n<p>（3）<strong>JPEG</strong>是有损的、采用直接色的点阵图。JPEG的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG非常适合用来存储照片，与GIF相比，JPEG不适合用来存储企业Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较GIF更大。</p>\n<p>（4）<strong>PNG-8</strong>是无损的、使用索引色的点阵图。PNG是一种比较新的图片格式，PNG-8是非常好的GIF格式替代者，在可能的情况下，应该尽可能的使用PNG-8而不是GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8还支持透明度的调节，而GIF并不支持。除非需要动画的支持，否则没有理由使用GIF而不是PNG-8。</p>\n<p>（5）<strong>PNG-24</strong>是无损的、使用直接色的点阵图。PNG-24的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24格式的文件大小要比BMP小得多。当然，PNG24的图片还是要比JPEG、GIF、PNG-8大得多。</p>\n<p>（6）<strong>SVG</strong>是无损的矢量图。SVG是矢量图意味着SVG图片由直线和曲线以及绘制它们的方法组成。当放大SVG图片时，看到的还是线和曲线，而不会出现像素点。SVG图片在放大时，不会失真，所以它适合用来绘制Logo、Icon等。</p>\n<p>（7）<strong>WebP</strong>是谷歌开发的一种新图片格式，WebP是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为Web而生的，什么叫为Web而生呢？就是说相同质量的图片，WebP具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。目前只有Chrome浏览器和Opera浏览器支持WebP格式，兼容性不太好。</p>\n<ul>\n<li>在无损压缩的情况下，相同质量的WebP图片，文件大小要比PNG小26%；</li>\n<li>在有损压缩的情况下，具有相同图片精度的WebP图片，文件大小要比JPEG小25%~34%；</li>\n<li>WebP图片格式支持图片透明度，一个无损压缩的WebP图片，如果要支持透明度只需要22%的格外文件大小。</li>\n</ul>\n<h3 id=\"17-对-CSSSprites-的理解\"><a href=\"#17-对-CSSSprites-的理解\" class=\"headerlink\" title=\"17. 对 CSSSprites 的理解\"></a>17. 对 CSSSprites 的理解</h3><p>CSSSprites（精灵图），将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的 background-image，background-repeat，background-position属性的组合进行背景定位。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>利用<code>CSS Sprites</code>能很好地减少网页的http请求，从而大大提高了页面的性能，这是<code>CSS Sprites</code>最大的优点；</li>\n<li><code>CSS Sprites</code>能减少图片的字节，把3张图片合并成1张图片的字节总是小于这3张图片的字节总和。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>在图片合并时，要把多张图片有序的、合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景。在宽屏及高分辨率下的自适应页面，如果背景不够宽，很容易出现背景断裂；</li>\n<li><code>CSSSprites</code>在开发的时候相对来说有点麻烦，需要借助<code>photoshop</code>或其他工具来对每个背景单元测量其准确的位置。</li>\n<li>维护方面：<code>CSS Sprites</code>在维护的时候比较麻烦，页面背景有少许改动时，就要改这张合并的图片，无需改的地方尽量不要动，这样避免改动更多的<code>CSS</code>，如果在原来的地方放不下，又只能（最好）往下加图片，这样图片的字节就增加了，还要改动<code>CSS</code>。</li>\n</ul>\n<h3 id=\"18-什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到-3x-2x这种图片？\"><a href=\"#18-什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到-3x-2x这种图片？\" class=\"headerlink\" title=\"18. 什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片？\"></a>18. 什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片？</h3><p>以 iPhone XS 为例，当写 CSS 代码时，针对于单位 px，其宽度为 414px &amp; 896px，也就是说当赋予一个 DIV元素宽度为 414px，这个 DIV 就会填满手机的宽度；</p>\n<p>而如果有一把尺子来实际测量这部手机的物理像素，实际为 1242*2688 物理像素；经过计算可知，1242/414=3，也就是说，在单边上，一个逻辑像素=3个物理像素，就说这个屏幕的像素密度为 3，也就是常说的 3 倍屏。</p>\n<p>对于图片来说，为了保证其不失真，1 个图片像素至少要对应一个物理像素，假如原始图片是 500300 像素，那么在 3 倍屏上就要放一个 1500900 像素的图片才能保证 1 个物理像素至少对应一个图片像素，才能不失真。 <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f1da1cbae9b45528cc2b33f74eb32f2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> 当然，也可以针对所有屏幕，都只提供最高清图片。虽然低密度屏幕用不到那么多图片像素，而且会因为下载多余的像素造成带宽浪费和下载延迟，但从结果上说能保证图片在所有屏幕上都不会失真。</p>\n<p>还可以使用 CSS 媒体查询来判断不同的像素密度，从而选择不同的图片:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my-image &#123; <span class=\"attr\">background</span>: (low.<span class=\"property\">png</span>); &#125;</span><br><span class=\"line\">@media only screen and (min-device-pixel-<span class=\"attr\">ratio</span>: <span class=\"number\">1.5</span>) &#123;</span><br><span class=\"line\">  #my-image &#123; <span class=\"attr\">background</span>: (high.<span class=\"property\">png</span>); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19-margin-和-padding-的使用场景\"><a href=\"#19-margin-和-padding-的使用场景\" class=\"headerlink\" title=\"19. margin 和 padding 的使用场景\"></a>19. <strong>margin 和 padding 的使用场景</strong></h3><ul>\n<li>需要在border外侧添加空白，且空白处不需要背景（色）时，使用 margin；</li>\n<li>需要在border内测添加空白，且空白处需要背景（色）时，使用 padding。</li>\n</ul>\n<h3 id=\"20-对line-height-的理解及其赋值方式\"><a href=\"#20-对line-height-的理解及其赋值方式\" class=\"headerlink\" title=\"20. 对line-height 的理解及其赋值方式\"></a>20. 对<strong>line-height 的理解及其赋值方式</strong></h3><p><strong>（1）line-height的概念：</strong></p>\n<ul>\n<li>line-height 指一行文本的高度，包含了字间距，实际上是下一行基线到上一行基线距离；</li>\n<li>如果一个标签没有定义 height 属性，那么其最终表现的高度由 line-height 决定；</li>\n<li>一个容器没有设置高度，那么撑开容器高度的是 line-height，而不是容器内的文本内容；</li>\n<li>把 line-height 值设置为 height 一样大小的值可以实现单行文字的垂直居中；</li>\n<li>line-height 和 height 都能撑开一个高度；</li>\n</ul>\n<p><strong>（2）line-height 的赋值方式：</strong></p>\n<ul>\n<li>带单位：px 是固定值，而 em 会参考父元素 font-size 值计算自身的行高</li>\n<li>纯数字：会把比例传递给后代。例如，父级行高为 1.5，子元素字体为 18px，则子元素行高为 1.5 * 18 = 27px</li>\n<li>百分比：将计算后的值传递给后代</li>\n</ul>\n<h3 id=\"21-CSS-优化和提高性能的方法有哪些？\"><a href=\"#21-CSS-优化和提高性能的方法有哪些？\" class=\"headerlink\" title=\"21. CSS 优化和提高性能的方法有哪些？\"></a>21. CSS 优化和提高性能的方法有哪些？</h3><p><strong>加载性能：</strong></p>\n<p>（1）css压缩：将写好的css进行打包压缩，可以减小文件体积。</p>\n<p>（2）css单一样式：当需要下边距和左边距的时候，很多时候会选择使用 margin:top 0 bottom 0；但margin-bottom:bottom;margin-left:left;执行效率会更高。</p>\n<p>（3）减少使用@import，建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。</p>\n<p><strong>选择器性能：</strong></p>\n<p>（1）关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；</p>\n<p>（2）如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）。</p>\n<p>（3）避免使用通配规则，如*{}计算次数惊人，只对需要用到的元素进行选择。</p>\n<p>（4）尽量少的去对标签进行选择，而是用class。</p>\n<p>（5）尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素。</p>\n<p>（6）了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。</p>\n<p><strong>渲染性能：</strong></p>\n<p>（1）慎重使用高性能属性：浮动、定位。</p>\n<p>（2）尽量减少页面重排、重绘。</p>\n<p>（3）去除空规则：｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体积。</p>\n<p>（4）属性值为0时，不加单位。</p>\n<p>（5）属性值为浮动小数0.**，可以省略小数点之前的0。</p>\n<p>（6）标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。</p>\n<p>（7）不使用@import前缀，它会影响css的加载速度。</p>\n<p>（8）选择器优化嵌套，尽量避免层级过深。</p>\n<p>（9）css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚，再使用。</p>\n<p>（10）正确使用display的属性，由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。</p>\n<p>（11）不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。web fonts通常体积庞大，而且一些浏览器在下载web fonts时会阻塞页面渲染损伤性能。</p>\n<p><strong>可维护性、健壮性：</strong></p>\n<p>（1）将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。</p>\n<p>（2）样式与内容分离：将css代码定义到外部css中。</p>\n<h3 id=\"22-CSS预处理器-后处理器是什么？为什么要使用它们？\"><a href=\"#22-CSS预处理器-后处理器是什么？为什么要使用它们？\" class=\"headerlink\" title=\"22. CSS预处理器/后处理器是什么？为什么要使用它们？\"></a>22. CSS预处理器/后处理器是什么？为什么要使用它们？</h3><p><strong>预处理器，</strong> 如：<code>less</code>，<code>sass</code>，<code>stylus</code>，用来预编译<code>sass</code>或者<code>less</code>，增加了<code>css</code>代码的复用性。层级，<code>mixin</code>， 变量，循环， 函数等对编写以及开发UI组件都极为方便。</p>\n<p><strong>后处理器，</strong> 如： <code>postCss</code>，通常是在完成的样式表中根据<code>css</code>规范处理<code>css</code>，让其更加有效。目前最常做的是给<code>css</code>属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。</p>\n<p><code>css</code>预处理器为<code>css</code>增加一些编程特性，无需考虑浏览器的兼容问题，可以在<code>CSS</code>中使用变量，简单的逻辑程序，函数等在编程语言中的一些基本的性能，可以让<code>css</code>更加的简洁，增加适应性以及可读性，可维护性等。</p>\n<p>其它<code>css</code>预处理器语言：<code>Sass（Scss）</code>, <code>Less</code>, <code>Stylus</code>, <code>Turbine</code>, <code>Swithch css</code>, <code>CSS Cacheer</code>, <code>DT Css</code>。</p>\n<p>使用原因：</p>\n<ul>\n<li>结构清晰， 便于扩展</li>\n<li>可以很方便的屏蔽浏览器私有语法的差异</li>\n<li>可以轻松实现多重继承</li>\n<li>完美的兼容了<code>CSS</code>代码，可以应用到老项目中</li>\n</ul>\n<h3 id=\"23-before-和-after-的双冒号和单冒号有什么区别？\"><a href=\"#23-before-和-after-的双冒号和单冒号有什么区别？\" class=\"headerlink\" title=\"23. ::before 和 :after 的双冒号和单冒号有什么区别？\"></a>23. ::before 和 :after 的双冒号和单冒号有什么区别？</h3><p>（1）冒号(<code>:</code>)用于<code>CSS3</code>伪类，双冒号(<code>::</code>)用于<code>CSS3</code>伪元素。 （2）<code>::before</code>就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于<code>dom</code>之中，只存在在页面之中。</p>\n<p><strong>注意：</strong> <code>:before </code>和 <code>:after</code> 这两个伪元素，是在<code>CSS2.1</code>里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着<code>Web</code>的进化，在<code>CSS3</code>的规范里，伪元素的语法被修改成使用双冒号，成为<code>::before</code>、<code>::after</code>。</p>\n<h3 id=\"24-display-inline-block-什么时候会显示间隙？\"><a href=\"#24-display-inline-block-什么时候会显示间隙？\" class=\"headerlink\" title=\"24. display:inline-block 什么时候会显示间隙？\"></a>24. display:inline-block 什么时候会显示间隙？</h3><ul>\n<li>有空格时会有间隙，可以删除空格解决；</li>\n<li><code>margin</code>正值时，可以让<code>margin</code>使用负值解决；</li>\n<li>使用<code>font-size</code>时，可通过设置<code>font-size:0</code>、<code>letter-spacing</code>、<code>word-spacing</code>解决；</li>\n</ul>\n<h3 id=\"25-单行、多行文本溢出隐藏\"><a href=\"#25-单行、多行文本溢出隐藏\" class=\"headerlink\" title=\"25. 单行、多行文本溢出隐藏\"></a>25. 单行、多行文本溢出隐藏</h3><ul>\n<li>单行文本溢出</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">overflow</span>: hidden;            // 溢出隐藏</span><br><span class=\"line\"><span class=\"attribute\">text-overflow</span>: ellipsis;      // 溢出用省略号显示</span><br><span class=\"line\"><span class=\"attribute\">white-space</span>: nowrap;         // 规定段落中的文本不进行换行</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>多行文本溢出</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">overflow</span>: hidden;            // 溢出隐藏</span><br><span class=\"line\"><span class=\"attribute\">text-overflow</span>: ellipsis;     // 溢出用省略号显示</span><br><span class=\"line\"><span class=\"attribute\">display</span>:-webkit-box;         // 作为弹性伸缩盒子模型显示。</span><br><span class=\"line\">-webkit-box-orient:vertical; // 设置伸缩盒子的子元素排列方式：从上到下垂直排列</span><br><span class=\"line\">-webkit-line-clamp:<span class=\"number\">3</span>;        // 显示的行数</span><br></pre></td></tr></table></figure>\n\n<p>注意：由于上面的三个属性都是 CSS3 的属性，没有浏览器可以兼容，所以要在前面加一个<code>-webkit-</code> 来兼容一部分浏览器。</p>\n<h3 id=\"26-Sass、Less-是什么？为什么要使用他们？\"><a href=\"#26-Sass、Less-是什么？为什么要使用他们？\" class=\"headerlink\" title=\"26. Sass、Less 是什么？为什么要使用他们？\"></a>26. Sass、Less 是什么？为什么要使用他们？</h3><p>他们都是 CSS 预处理器，是 CSS 上的一种抽象层。他们是一种特殊的语法/语言编译成 CSS。 例如 Less 是一种动态样式语言，将 CSS 赋予了动态语言的特性，如变量，继承，运算， 函数，LESS 既可以在客户端上运行 (支持 IE 6+, Webkit, Firefox)，也可以在服务端运行 (借助 Node.js)。</p>\n<p><strong>为什么要使用它们？</strong></p>\n<ul>\n<li>结构清晰，便于扩展。 可以方便地屏蔽浏览器私有语法差异。封装对浏览器语法差异的重复处理， 减少无意义的机械劳动。</li>\n<li>可以轻松实现多重继承。 完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译。</li>\n</ul>\n<h3 id=\"27-对媒体查询的理解？\"><a href=\"#27-对媒体查询的理解？\" class=\"headerlink\" title=\"27. 对媒体查询的理解？\"></a>27. 对媒体查询的理解？</h3><p>媒体查询由⼀个可选的媒体类型和零个或多个使⽤媒体功能的限制了样式表范围的表达式组成，例如宽度、⾼度和颜⾊。媒体查询，添加⾃CSS3，允许内容的呈现针对⼀个特定范围的输出设备⽽进⾏裁剪，⽽不必改变内容本身，适合web⽹⻚应对不同型号的设备⽽做出对应的响应适配。</p>\n<p>媒体查询包含⼀个可选的媒体类型和满⾜CSS3规范的条件下，包含零个或多个表达式，这些表达式描述了媒体特征，最终会被解析为true或false。如果媒体查询中指定的媒体类型匹配展示⽂档所使⽤的设备类型，并且所有的表达式的值都是true，那么该媒体查询的结果为true。那么媒体查询内的样式将会⽣效。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- link元素中的<span class=\"variable constant_\">CSS</span>媒体查询 --&gt; </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">media</span>=<span class=\"string\">&quot;(max-width: 800px)&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;example.css&quot;</span> /&gt;</span></span> </span><br><span class=\"line\">&lt;!-- 样式表中的<span class=\"variable constant_\">CSS</span>媒体查询 --&gt; </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"> </span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">600px</span>) &#123; </span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  <span class=\"selector-class\">.facet_sidebar</span> &#123; </span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"attribute\">display</span>: none; </span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">  &#125; </span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>简单来说，使用 @media 查询，可以针对不同的媒体类型定义不同的样式。@media 可以针对不同的屏幕尺寸设置不同的样式，特别是需要设置设计响应式的页面，@media 是非常有用的。当重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。</p>\n<h3 id=\"28-对-CSS-工程化的理解\"><a href=\"#28-对-CSS-工程化的理解\" class=\"headerlink\" title=\"28. 对 CSS 工程化的理解\"></a>28. 对 CSS 工程化的理解</h3><p>CSS 工程化是为了解决以下问题：</p>\n<ol>\n<li><strong>宏观设计</strong>：CSS 代码如何组织、如何拆分、模块结构怎样设计？</li>\n<li><strong>编码优化</strong>：怎样写出更好的 CSS？</li>\n<li><strong>构建</strong>：如何处理我的 CSS，才能让它的打包结果最优？</li>\n<li><strong>可维护性</strong>：代码写完了，如何最小化它后续的变更成本？如何确保任何一个同事都能轻松接手？</li>\n</ol>\n<p>以下三个方向都是时下比较流行的、普适性非常好的 CSS 工程化实践：</p>\n<ul>\n<li>预处理器：Less、 Sass 等；</li>\n<li>重要的工程化插件： PostCss；</li>\n<li>Webpack loader 等 。</li>\n</ul>\n<p>基于这三个方向，可以衍生出一些具有典型意义的子问题，这里我们逐个来看：</p>\n<p><strong>（1）预处理器：为什么要用预处理器？它的出现是为了解决什么问题？</strong></p>\n<p>预处理器，其实就是 CSS 世界的“轮子”。预处理器支持我们写一种类似 CSS、但实际并不是 CSS 的语言，然后把它编译成 CSS 代码： <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d58c5313e884e38b1545a5896613250~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> 那为什么写 CSS 代码写得好好的，偏偏要转去写“类 CSS”呢？这就和本来用 JS 也可以实现所有功能，但最后却写 React 的 jsx 或者 Vue 的模板语法一样——为了爽！要想知道有了预处理器有多爽，首先要知道的是传统 CSS 有多不爽。随着前端业务复杂度的提高，前端工程中对 CSS 提出了以下的诉求：</p>\n<ol>\n<li>宏观设计上：我们希望能优化 CSS 文件的目录结构，对现有的 CSS 文件实现复用；</li>\n<li>编码优化上：我们希望能写出结构清晰、简明易懂的 CSS，需要它具有一目了然的嵌套层级关系，而不是无差别的一铺到底写法；我们希望它具有变量特征、计算能力、循环能力等等更强的可编程性，这样我们可以少写一些无用的代码；</li>\n<li>可维护性上：更强的可编程性意味着更优质的代码结构，实现复用意味着更简单的目录结构和更强的拓展能力，这两点如果能做到，自然会带来更强的可维护性。</li>\n</ol>\n<p>这三点是传统 CSS 所做不到的，也正是预处理器所解决掉的问题。预处理器普遍会具备这样的特性：</p>\n<ul>\n<li>嵌套代码的能力，通过嵌套来反映不同 css 属性之间的层级关系 ；</li>\n<li>支持定义 css 变量；</li>\n<li>提供计算函数；</li>\n<li>允许对代码片段进行 extend 和 mixin；</li>\n<li>支持循环语句的使用；</li>\n<li>支持将 CSS 文件模块化，实现复用。</li>\n</ul>\n<p><strong>（2）PostCss：PostCss 是如何工作的？我们在什么场景下会使用 PostCss？</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2911f98bbacf4b1cbffbb9e1527a4977~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> 它和预处理器的不同就在于，预处理器处理的是 类CSS，而 PostCss 处理的就是 CSS 本身。Babel 可以将高版本的 JS 代码转换为低版本的 JS 代码。PostCss 做的是类似的事情：它可以编译尚未被浏览器广泛支持的先进的 CSS 语法，还可以自动为一些需要额外兼容的语法增加前缀。更强的是，由于 PostCss 有着强大的插件机制，支持各种各样的扩展，极大地强化了 CSS 的能力。</p>\n<p>PostCss 在业务中的使用场景非常多：</p>\n<ul>\n<li>提高 CSS 代码的可读性：PostCss 其实可以做类似预处理器能做的工作；</li>\n<li>当我们的 CSS 代码需要适配低版本浏览器时，PostCss 的 <a href=\"https://link.juejin.cn/?target=https://github.com/postcss/autoprefixer\">Autoprefixer</a> 插件可以帮助我们自动增加浏览器前缀；</li>\n<li>允许我们编写面向未来的 CSS：PostCss 能够帮助我们编译 CSS next 代码；</li>\n</ul>\n<p><strong>（3）Webpack 能处理 CSS 吗？如何实现？</strong> Webpack 能处理 CSS 吗：</p>\n<ul>\n<li><strong>Webpack 在裸奔的状态下，是不能处理 CSS 的</strong>，Webpack 本身是一个面向 JavaScript 且只能处理 JavaScript 代码的模块化打包工具；</li>\n<li>Webpack 在 loader 的辅助下，是可以处理 CSS 的。</li>\n</ul>\n<p>如何用 Webpack 实现对 CSS 的处理：</p>\n<ul>\n<li>Webpack 中操作 CSS 需要使用的两个关键的 loader：css-loader 和 style-loader</li>\n<li>注意，答出“用什么”有时候可能还不够，面试官会怀疑你是不是在背答案，所以你还需要了解每个 loader 都做了什么事情：<ul>\n<li>css-loader：导入 CSS 模块，对 CSS 代码进行编译处理；</li>\n<li>style-loader：创建style标签，把 CSS 内容写入标签。</li>\n</ul>\n</li>\n</ul>\n<p>在实际使用中，<strong>css-loader 的执行顺序一定要安排在 style-loader 的前面</strong>。因为只有完成了编译过程，才可以对 css 代码进行插入；若提前插入了未编译的代码，那么 webpack 是无法理解这坨东西的，它会无情报错。</p>\n<h3 id=\"29-如何判断元素是否到达可视区域\"><a href=\"#29-如何判断元素是否到达可视区域\" class=\"headerlink\" title=\"29. 如何判断元素是否到达可视区域\"></a>29. 如何判断元素是否到达可视区域</h3><p>以图片显示为例：</p>\n<ul>\n<li><code>window.innerHeight</code> 是浏览器可视区的高度；</li>\n<li><code>document.body.scrollTop || document.documentElement.scrollTop</code> 是浏览器滚动的过的距离；</li>\n<li><code>imgs.offsetTop</code> 是元素顶部距离文档顶部的高度（包括滚动条的距离）；</li>\n<li>内容达到显示区域的：<code>img.offsetTop &lt; window.innerHeight + document.body.scrollTop;</code></li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c57fc165a4ce4d5b9a2885867d4f1cab~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"></p>\n<h3 id=\"30-z-index属性在什么情况下会失效\"><a href=\"#30-z-index属性在什么情况下会失效\" class=\"headerlink\" title=\"30. z-index属性在什么情况下会失效\"></a>30. z-index属性在什么情况下会失效</h3><p>通常 z-index 的使用是在有两个重叠的标签，在一定的情况下控制其中一个在另一个的上方或者下方出现。z-index值越大就越是在上层。z-index元素的position属性需要是relative，absolute或是fixed。</p>\n<p>z-index属性在下列情况下会失效：</p>\n<ul>\n<li>父元素position为relative时，子元素的z-index失效。解决：父元素position改为absolute或static；</li>\n<li>元素没有设置position属性为非static属性。解决：设置该元素的position属性为relative，absolute或是fixed中的一种；</li>\n<li>元素在设置z-index的同时还设置了float浮动。解决：float去除，改为display：inline-block；</li>\n</ul>\n<h3 id=\"31-CSS3中的transform有哪些属性\"><a href=\"#31-CSS3中的transform有哪些属性\" class=\"headerlink\" title=\"31. CSS3中的transform有哪些属性\"></a>31. CSS3中的transform有哪些属性</h3><h2 id=\"二、页面布局\"><a href=\"#二、页面布局\" class=\"headerlink\" title=\"二、页面布局\"></a>二、页面布局</h2><h3 id=\"1-常见的CSS布局单位\"><a href=\"#1-常见的CSS布局单位\" class=\"headerlink\" title=\"1. 常见的CSS布局单位\"></a>1. 常见的CSS布局单位</h3><p>常用的布局单位包括像素（<code>px</code>），百分比（<code>%</code>），<code>em</code>，<code>rem</code>，<code>vw/vh</code>。</p>\n<p><strong>（1）像素</strong>（<code>px</code>）是页面布局的基础，一个像素表示终端（电脑、手机、平板等）屏幕所能显示的最小的区域，像素分为两种类型：CSS像素和物理像素：</p>\n<ul>\n<li><strong>CSS像素</strong>：为web开发者提供，在CSS中使用的一个抽象单位；</li>\n<li><strong>物理像素</strong>：只与设备的硬件密度有关，任何设备的物理像素都是固定的。</li>\n</ul>\n<p><strong>（2）百分比</strong>（<code>%</code>），当浏览器的宽度或者高度发生变化时，通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。一般认为子元素的百分比相对于直接父元素。</p>\n<p><strong>（3）em和rem</strong>相对于px更具灵活性，它们都是相对长度单位，它们之间的区别：<strong>em相对于父元素，rem相对于根元素。</strong></p>\n<ul>\n<li><strong>em：</strong> 文本相对长度单位。相对于当前对象内文本的字体尺寸。如果当前行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸(默认16px)。(相对父元素的字体大小倍数)。</li>\n<li><strong>rem：</strong> rem是CSS3新增的一个相对单位，相对于根元素（html元素）的font-size的倍数。<strong>作用</strong>：利用rem可以实现简单的响应式布局，可以利用html元素中字体的大小与屏幕间的比值来设置font-size的值，以此实现当屏幕分辨率变化时让元素也随之变化。</li>\n</ul>\n<p><strong>（4）vw/vh</strong>是与视图窗口有关的单位，vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度，除了vw和vh外，还有vmin和vmax两个相关的单位。</p>\n<ul>\n<li>vw：相对于视窗的宽度，视窗宽度是100vw；</li>\n<li>vh：相对于视窗的高度，视窗高度是100vh；</li>\n<li>vmin：vw和vh中的较小值；</li>\n<li>vmax：vw和vh中的较大值；</li>\n</ul>\n<p><strong>vw/vh</strong> 和百分比很类似，两者的区别：</p>\n<ul>\n<li>百分比（<code>%</code>）：大部分相对于祖先元素，也有相对于自身的情况比如（border-radius、translate等)</li>\n<li>vw/vm：相对于视窗的尺寸</li>\n</ul>\n<h3 id=\"2-px、em、rem的区别及使用场景\"><a href=\"#2-px、em、rem的区别及使用场景\" class=\"headerlink\" title=\"2. px、em、rem的区别及使用场景\"></a>2. px、em、rem的区别及使用场景</h3><p><strong>三者的区别：</strong></p>\n<ul>\n<li>px是固定的像素，一旦设置了就无法因为适应页面大小而改变。</li>\n<li>em和rem相对于px更具有灵活性，他们是相对长度单位，其长度不是固定的，更适用于响应式布局。</li>\n<li>em是相对于其父元素来设置字体大小，这样就会存在一个问题，进行任何元素设置，都有可能需要知道他父元素的大小。而rem是相对于根元素，这样就意味着，只需要在根元素确定一个参考值。</li>\n</ul>\n<p><strong>使用场景：</strong></p>\n<ul>\n<li>对于只需要适配少部分移动设备，且分辨率对页面影响不大的，使用px即可 。</li>\n<li>对于需要适配各种移动设备，使用rem，例如需要适配iPhone和iPad等分辨率差别比较挺大的设备。</li>\n</ul>\n<h3 id=\"3-两栏布局的实现\"><a href=\"#3-两栏布局的实现\" class=\"headerlink\" title=\"3. 两栏布局的实现\"></a>3. 两栏布局的实现</h3><p>一般两栏布局指的是<strong>左边一栏宽度固定，右边一栏宽度自适应</strong>，两栏布局的具体实现：</p>\n<ul>\n<li>利用浮动，将左边元素宽度设置为200px，并且设置向左浮动。将右边元素的margin-left设置为200px，宽度设置为auto（默认为auto，撑满整个父元素）。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: gold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用浮动，左侧元素设置固定大小，并左浮动，右侧元素设置overflow: hidden; 这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">     <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">     <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用flex布局，将左边元素设置为固定宽度200px，将右边的元素设置为flex:1。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: gold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用绝对定位，将父级元素设置为相对定位。左边元素设置为absolute定位，并且宽度设置为200px。将右边元素的margin-left的值设置为200px。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: gold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用绝对定位，将父级元素设置为相对定位。左边元素宽度设置为200px，右边元素设置为绝对定位，左边定位为200px，其余方向定位为0。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: gold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-三栏布局的实现\"><a href=\"#4-三栏布局的实现\" class=\"headerlink\" title=\"4. 三栏布局的实现\"></a>4. 三栏布局的实现</h3><p>三栏布局一般指的是页面中一共有三栏，<strong>左右两栏宽度固定，中间自适应的布局</strong>，三栏布局的具体实现：</p>\n<ul>\n<li>利用<strong>绝对定位</strong>，左右两栏设置为绝对定位，中间设置对应方向大小的margin的值。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: gold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用flex布局，左右两栏设置固定大小，中间一栏设置为flex:1。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: gold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用浮动，左右两栏设置固定大小，并设置对应方向的浮动。中间一栏设置左右两个方向的margin值，注意这种方式<strong>，中间一栏必须放到最后：</strong></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: gold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>圣杯布局，利用浮动和负边距来实现。父级元素设置左右的 padding，三列均设置向左浮动，中间一列放在最前面，宽度设置为父级元素的宽度，因此后面两列都被挤到了下一行，通过设置 margin 负值将其移动到上一行，再利用相对定位，定位到两边。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-right</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: -<span class=\"number\">100px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: gold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>双飞翼布局，双飞翼布局相对于圣杯布局来说，左右位置的保留是通过中间列的 margin 值来实现的，而不是通过父元素的 padding 来实现的。本质上来说，也是通过浮动和外边距负值来实现的。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: gold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-水平垂直居中的实现\"><a href=\"#5-水平垂直居中的实现\" class=\"headerlink\" title=\"5. 水平垂直居中的实现\"></a>5. 水平垂直居中的实现</h3><ul>\n<li>利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过translate来调整元素的中心点到页面的中心。该方法需要<strong>考虑浏览器兼容问题。</strong></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;    <span class=\"attribute\">position</span>: relative;&#125; <span class=\"selector-class\">.child</span> &#123;    <span class=\"attribute\">position</span>: absolute;    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>,-<span class=\"number\">50%</span>);&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用绝对定位，设置四个方向的值都为0，并将margin设置为auto，由于宽高固定，因此对应方向实现平分，可以实现水平和垂直方向上的居中。该方法适用于<strong>盒子有宽高</strong>的情况：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用绝对定位，先将元素的左上角通过top:50%和left:50%定位到页面的中心，然后再通过margin负值来调整元素的中心点到页面的中心。该方法适用于<strong>盒子宽高已知</strong>的情况</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">50px</span>;     <span class=\"comment\">/* 自身 height 的一半 */</span></span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">50px</span>;    <span class=\"comment\">/* 自身 width 的一半 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用flex布局，通过align-items:center和justify-content:center设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。该方法要<strong>考虑兼容的问题</strong>，该方法在移动端用的较多：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>:center;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>:center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-如何根据设计稿进行移动端适配？\"><a href=\"#6-如何根据设计稿进行移动端适配？\" class=\"headerlink\" title=\"6. 如何根据设计稿进行移动端适配？\"></a>6. 如何根据设计稿进行移动端适配？</h3><p>移动端适配主要有两个维度：</p>\n<ul>\n<li><strong>适配不同像素密度，</strong> 针对不同的像素密度，使用 CSS 媒体查询，选择不同精度的图片，以保证图片不会失真；</li>\n<li><strong>适配不同屏幕大小，</strong> 由于不同的屏幕有着不同的逻辑像素大小，所以如果直接使用 px 作为开发单位，会使得开发的页面在某一款手机上可以准确显示，但是在另一款手机上就会失真。为了适配不同屏幕的大小，应按照比例来还原设计稿的内容。</li>\n</ul>\n<p>为了能让页面的尺寸自适应，可以使用 rem，em，vw，vh 等相对单位。</p>\n<h3 id=\"7-对Flex布局的理解及其使用场景\"><a href=\"#7-对Flex布局的理解及其使用场景\" class=\"headerlink\" title=\"7. 对Flex布局的理解及其使用场景\"></a>7. 对Flex布局的理解及其使用场景</h3><p>Flex是FlexibleBox的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。行内元素也可以使用Flex布局。注意，设为Flex布局以后，<strong>子元素的float、clear和vertical-align属性将失效</strong>。采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis），项目默认沿水平主轴排列。</p>\n<p>以下6个属性设置在<strong>容器上</strong>：</p>\n<ul>\n<li>flex-direction属性决定主轴的方向（即项目的排列方向）。</li>\n<li>flex-wrap属性定义，如果一条轴线排不下，如何换行。</li>\n<li>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</li>\n<li>justify-content属性定义了项目在主轴上的对齐方式。</li>\n<li>align-items属性定义项目在交叉轴上如何对齐。</li>\n<li>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</li>\n</ul>\n<p>以下6个属性设置在<strong>项目上</strong>：</p>\n<ul>\n<li>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</li>\n<li>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</li>\n<li>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</li>\n<li>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</li>\n<li>flex属性是flex-grow，flex-shrink和flex-basis的简写，默认值为0 1 auto。</li>\n<li>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</li>\n</ul>\n<p><strong>简单来说：</strong> flex布局是CSS3新增的一种布局方式，可以通过将一个元素的display属性值设置为flex从而使它成为一个flex容器，它的所有子元素都会成为它的项目。一个容器默认有两条轴：一个是水平的主轴，一个是与主轴垂直的交叉轴。可以使用flex-direction来指定主轴的方向。可以使用justify-content来指定元素在主轴上的排列方式，使用align-items来指定元素在交叉轴上的排列方式。还可以使用flex-wrap来规定当一行排列不下时的换行方式。对于容器中的项目，可以使用order属性来指定项目的排列顺序，还可以使用flex-grow来指定当排列空间有剩余的时候，项目的放大比例，还可以使用flex-shrink来指定当排列空间不足时，项目的缩小比例。</p>\n<h3 id=\"8-响应式设计的概念及基本原理\"><a href=\"#8-响应式设计的概念及基本原理\" class=\"headerlink\" title=\"8. 响应式设计的概念及基本原理\"></a>8. 响应式设计的概念及基本原理</h3><p>响应式网站设计<code>（Responsive Web design</code>）是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。</p>\n<p>关于原理： 基本原理是通过媒体查询<code>（@media）</code>查询检测不同的设备屏幕尺寸做处理。 关于兼容： 页面头部必须有mate声明的<code>viewport</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;’viewport’&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;”width=device-width,&quot;</span> <span class=\"attr\">initial-scale</span>=<span class=\"string\">&quot;1.&quot;</span> <span class=\"attr\">maximum-scale</span>=<span class=\"string\">&quot;1,user-scalable=no”&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、定位与浮动\"><a href=\"#三、定位与浮动\" class=\"headerlink\" title=\"三、定位与浮动\"></a>三、定位与浮动</h2><h3 id=\"1-为什么需要清除浮动？清除浮动的方式\"><a href=\"#1-为什么需要清除浮动？清除浮动的方式\" class=\"headerlink\" title=\"1. 为什么需要清除浮动？清除浮动的方式\"></a>1. 为什么需要清除浮动？清除浮动的方式</h3><p><strong>浮动的定义：</strong> 非IE浏览器下，容器不设高度且子元素浮动时，容器高度不能被内容撑开。 此时，内容会溢出到容器外面而影响布局。这种现象被称为浮动（溢出）。</p>\n<p><strong>浮动的工作原理：</strong></p>\n<ul>\n<li>浮动元素脱离文档流，不占据空间（引起“高度塌陷”现象）</li>\n<li>浮动元素碰到包含它的边框或者其他浮动元素的边框停留</li>\n</ul>\n<p>浮动元素可以左右移动，直到遇到另一个浮动元素或者遇到它外边缘的包含框。浮动框不属于文档流中的普通流，当元素浮动之后，不会影响块级元素的布局，只会影响内联元素布局。此时文档流中的普通流就会表现得该浮动框不存在一样的布局模式。当包含框的高度小于浮动框的时候，此时就会出现“高度塌陷”。</p>\n<p><strong>浮动元素引起的问题？</strong></p>\n<ul>\n<li>父元素的高度无法被撑开，影响与父元素同级的元素</li>\n<li>与浮动元素同级的非浮动元素会跟随其后</li>\n<li>若浮动的元素不是第一个元素，则该元素之前的元素也要浮动，否则会影响页面的显示结构</li>\n</ul>\n<p><strong>清除浮动的方式如下：</strong></p>\n<ul>\n<li>给父级div定义<code>height</code>属性</li>\n<li>最后一个浮动元素之后添加一个空的div标签，并添加<code>clear:both</code>样式</li>\n<li>包含浮动元素的父级标签添加<code>overflow:hidden</code>或者<code>overflow:auto</code></li>\n<li>使用 :after 伪元素。由于IE6-7不支持 :after，使用 zoom:1 触发 hasLayout**</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&quot;\\200B&quot;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table; </span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.clearfix</span>&#123;</span><br><span class=\"line\">    *zoom: <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用-clear-属性清除浮动的原理？\"><a href=\"#2-使用-clear-属性清除浮动的原理？\" class=\"headerlink\" title=\"2. 使用 clear 属性清除浮动的原理？\"></a>2. 使用 clear 属性清除浮动的原理？</h3><p>使用clear属性清除浮动，其语法如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">clear</span>:none|left|right|both</span><br></pre></td></tr></table></figure>\n\n<p>如果单看字面意思，clear:left 是“清除左浮动”，clear:right 是“清除右浮动”，实际上，这种解释是有问题的，因为浮动一直还在，并没有清除。</p>\n<p>官方对clear属性解释：“<strong>元素盒子的边不能和前面的浮动元素相邻</strong>”，对元素设置clear属性是为了避免浮动元素对该元素的影响，而不是清除掉浮动。</p>\n<p>还需要注意 clear 属性指的是元素盒子的边不能和前面的浮动元素相邻，注意这里“<strong>前面的</strong>”3个字，也就是clear属性对“后面的”浮动元素是不闻不问的。考虑到float属性要么是left，要么是right，不可能同时存在，同时由于clear属性对“后面的”浮动元素不闻不问，因此，当clear:left有效的时候，clear:right必定无效，也就是此时clear:left等同于设置clear:both；同样地，clear:right如果有效也是等同于设置clear:both。由此可见，clear:left和clear:right这两个声明就没有任何使用的价值，至少在CSS世界中是如此，直接使用clear:both吧。</p>\n<p>一般使用伪元素的方式清除浮动：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clear</span><span class=\"selector-pseudo\">::after</span>&#123;  <span class=\"attribute\">content</span>:<span class=\"string\">&#x27;&#x27;</span>;  <span class=\"attribute\">display</span>: block;   <span class=\"attribute\">clear</span>:both;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>clear属性只有块级元素才有效的，而::after等伪元素默认都是内联水平，这就是借助伪元素清除浮动影响时需要设置display属性值的原因。</p>\n<h3 id=\"3-对BFC的理解，如何创建BFC\"><a href=\"#3-对BFC的理解，如何创建BFC\" class=\"headerlink\" title=\"3. 对BFC的理解，如何创建BFC\"></a>3. 对BFC的理解，如何创建BFC</h3><p>先来看两个相关的概念：</p>\n<ul>\n<li>Box: Box 是 CSS 布局的对象和基本单位，⼀个⻚⾯是由很多个 Box 组成的，这个Box就是我们所说的盒模型。</li>\n<li>Formatting context：块级上下⽂格式化，它是⻚⾯中的⼀块渲染区域，并且有⼀套渲染规则，它决定了其⼦元素将如何定位，以及和其他元素的关系和相互作⽤。</li>\n</ul>\n<p>块格式化上下文（Block Formatting Context，BFC）是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。</p>\n<p>通俗来讲：BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定规则进行物品摆放，并且不会影响其它环境中的物品。如果一个元素符合触发BFC的条件，则BFC中的元素布局不受外部影响。</p>\n<p><strong>创建BFC的条件：</strong></p>\n<ul>\n<li>根元素：body；</li>\n<li>元素设置浮动：float 除 none 以外的值；</li>\n<li>元素设置绝对定位：position (absolute、fixed)；</li>\n<li>display 值为：inline-block、table-cell、table-caption、flex等；</li>\n<li>overflow 值为：hidden、auto、scroll；</li>\n</ul>\n<p><strong>BFC的特点：</strong></p>\n<ul>\n<li>垂直方向上，自上而下排列，和文档流的排列方式一致。</li>\n<li>在BFC中上下相邻的两个容器的margin会重叠</li>\n<li>计算BFC的高度时，需要计算浮动元素的高度</li>\n<li>BFC区域不会与浮动的容器发生重叠</li>\n<li>BFC是独立的容器，容器内部元素不会影响外部元素</li>\n<li>每个元素的左margin值和容器的左border相接触</li>\n</ul>\n<p><strong>BFC的作用：</strong></p>\n<ul>\n<li><strong>解决margin的重叠问题</strong>：由于BFC是一个独立的区域，内部的元素和外部的元素互不影响，将两个元素变为两个BFC，就解决了margin重叠的问题。</li>\n<li><strong>解决高度塌陷的问题</strong>：在对子元素设置浮动后，父元素会发生高度塌陷，也就是父元素的高度变为0。解决这个问题，只需要把父元素变成一个BFC。常用的办法是给父元素设置<code>overflow:hidden</code>。</li>\n<li><strong>创建自适应两栏布局</strong>：可以用来创建自适应两栏布局：左边的宽度固定，右边的宽度自适应。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">     <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">     <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">     <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=&quot;<span class=\"attribute\">left</span>&quot;&gt;&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=&quot;<span class=\"attribute\">right</span>&quot;&gt;&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>左侧设置<code>float:left</code>，右侧设置<code>overflow: hidden</code>。这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠，实现了自适应两栏布局。</p>\n<h3 id=\"4-什么是margin重叠问题？如何解决？\"><a href=\"#4-什么是margin重叠问题？如何解决？\" class=\"headerlink\" title=\"4. 什么是margin重叠问题？如何解决？\"></a>4. 什么是margin重叠问题？如何解决？</h3><p><strong>问题描述：</strong> 两个块级元素的上外边距和下外边距可能会合并（折叠）为一个外边距，其大小会取其中外边距值大的那个，这种行为就是外边距折叠。需要注意的是，<strong>浮动的元素和绝对定位</strong>这种脱离文档流的元素的外边距不会折叠。重叠只会出现在<strong>垂直方向</strong>。</p>\n<p><strong>计算原则：</strong> 折叠合并后外边距的计算原则如下：</p>\n<ul>\n<li>如果两者都是正数，那么就去最大者</li>\n<li>如果是一正一负，就会正值减去负值的绝对值</li>\n<li>两个都是负值时，用0减去两个中绝对值大的那个</li>\n</ul>\n<p><strong>解决办法：</strong> 对于折叠的情况，主要有两种：<strong>兄弟之间重叠</strong>和<strong>父子之间重叠</strong> （1）兄弟之间重叠</p>\n<ul>\n<li>底部元素变为行内盒子：<code>display: inline-block</code></li>\n<li>底部元素设置浮动：<code>float</code></li>\n<li>底部元素的position的值为<code>absolute/fixed</code></li>\n</ul>\n<p>（2）父子之间重叠</p>\n<ul>\n<li>父元素加入：<code>overflow: hidden</code></li>\n<li>父元素添加透明边框：<code>border:1px solid transparent</code></li>\n<li>子元素变为行内盒子：<code>display: inline-block</code></li>\n<li>子元素加入浮动属性或定位</li>\n</ul>\n<h3 id=\"5-元素的层叠顺序\"><a href=\"#5-元素的层叠顺序\" class=\"headerlink\" title=\"5. 元素的层叠顺序\"></a>5. 元素的层叠顺序</h3><p>层叠顺序，英文称作 stacking order，表示元素发生层叠时有着特定的垂直显示顺序。下面是盒模型的层叠规则： <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbc59ae1adb5454c8c7f60582df10ff9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> 对于上图，由上到下分别是： （1）背景和边框：建立当前层叠上下文元素的背景和边框。 （2）负的z-index：当前层叠上下文中，z-index属性值为负的元素。 （3）块级盒：文档流内非行内级非定位后代元素。 （4）浮动盒：非定位浮动元素。 （5）行内盒：文档流内行内级非定位后代元素。 （6）z-index:0：层叠级数为0的定位元素。 （7）正z-index：z-index属性值为正的定位元素。</p>\n<p><strong>注意:</strong> 当定位元素z-index:auto，生成盒在当前层叠上下文中的层级为 0，不会建立新的层叠上下文，除非是根元素。</p>\n<h3 id=\"6-position的属性有哪些，区别是什么\"><a href=\"#6-position的属性有哪些，区别是什么\" class=\"headerlink\" title=\"6. position的属性有哪些，区别是什么\"></a>6. position的属性有哪些，区别是什么</h3><p>position有以下属性值：</p>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>概述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>absolute</td>\n<td>生成绝对定位的元素，相对于static定位以外的一个父元素进行定位。元素的位置通过left、top、right、bottom属性进行规定。</td>\n</tr>\n<tr>\n<td>relative</td>\n<td>生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过left、top、right、bottom属性进行规定。</td>\n</tr>\n<tr>\n<td>fixed</td>\n<td>生成绝对定位的元素，指定元素相对于屏幕视⼝（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变，⽐如回到顶部的按钮⼀般都是⽤此定位⽅式。</td>\n</tr>\n<tr>\n<td>static</td>\n<td>默认值，没有定位，元素出现在正常的文档流中，会忽略 top, bottom, left, right 或者 z-index 声明，块级元素从上往下纵向排布，⾏级元素从左向右排列。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定从父元素继承position属性的值</td>\n</tr>\n</tbody></table>\n<p>前面三者的定位方式如下：</p>\n<ul>\n<li><strong>relative：</strong> 元素的定位永远是相对于元素自身位置的，和其他元素没关系，也不会影响其他元素。</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6523548b65834c578202acc5e6388af4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"></p>\n<ul>\n<li><strong>fixed：</strong> 元素的定位是相对于 window （或者 iframe）边界的，和其他元素没有关系。但是它具有破坏性，会导致其他元素位置的变化。</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b35e646aa3c4d9cac803753d8b67c39~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"></p>\n<ul>\n<li><strong>absolute：</strong> 元素的定位相对于前两者要复杂许多。如果为 absolute 设置了 top、left，浏览器会根据什么去确定它的纵向和横向的偏移量呢？答案是浏览器会递归查找该元素的所有父元素，如果找到一个设置了<code>position:relative/absolute/fixed</code>的元素，就以该元素为基准定位，如果没找到，就以浏览器边界定位。如下两个图所示：</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6d4f199b3f842f090890eea32318e11~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2c7150bd7614a548f04a2919f1ea12a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"></p>\n<h3 id=\"7-display、float、position的关系\"><a href=\"#7-display、float、position的关系\" class=\"headerlink\" title=\"7. display、float、position的关系\"></a>7. <strong>display、float、position的关系</strong></h3><p>（1）首先判断display属性是否为none，如果为none，则position和float属性的值不影响元素最后的表现。</p>\n<p>（2）然后判断position的值是否为absolute或者fixed，如果是，则float属性失效，并且display的值应该被设置为table或者block，具体转换需要看初始转换值。</p>\n<p>（3）如果position的值不为absolute或者fixed，则判断float属性的值是否为none，如果不是，则display的值则按上面的规则转换。注意，如果position的值为relative并且float属性的值存在，则relative相对于浮动后的最终位置定位。</p>\n<p>（4）如果float的值为none，则判断元素是否为根元素，如果是根元素则display属性按照上面的规则转换，如果不是，则保持指定的display属性值不变。</p>\n<p>总的来说，可以把它看作是一个类似优先级的机制，”position:absolute”和”position:fixed”优先级最高，有它存在的时候，浮动不起作用，’display’的值也需要调整；其次，元素的’float’特性的值不是”none”的时候或者它是根元素的时候，调整’display’的值；最后，非根元素，并且非浮动元素，并且非绝对定位的元素，’display’特性值同设置值。</p>\n<h3 id=\"8-absolute与fixed共同点与不同点\"><a href=\"#8-absolute与fixed共同点与不同点\" class=\"headerlink\" title=\"8. absolute与fixed共同点与不同点\"></a>8. absolute与fixed共同点与不同点</h3><p><strong>共同点：</strong></p>\n<ul>\n<li>改变行内元素的呈现方式，将display置为inline-block </li>\n<li>使元素脱离普通文档流，不再占据文档物理空间</li>\n<li>覆盖非定位文档元素</li>\n</ul>\n<p><strong>不同点：</strong></p>\n<ul>\n<li>abuselute与fixed的根元素不同，abuselute的根元素可以设置，fixed根元素是浏览器。</li>\n<li>在有滚动条的页面中，absolute会跟着父元素进行移动，fixed固定在页面的具体位置。</li>\n</ul>\n<h3 id=\"9-对-sticky-定位的理解\"><a href=\"#9-对-sticky-定位的理解\" class=\"headerlink\" title=\"9. 对 sticky 定位的理解\"></a>9. 对 sticky 定位的理解</h3><p>sticky 英文字面意思是粘贴，所以可以把它称之为粘性定位。语法：<strong>position: sticky;</strong> 基于用户的滚动位置来定位。</p>\n<p>粘性定位的元素是依赖于用户的滚动，在 <strong>position:relative</strong> 与 <strong>position:fixed</strong> 定位之间切换。它的行为就像 <strong>position:relative;</strong> 而当页面滚动超出目标区域时，它的表现就像 **position:fixed;**，它会固定在目标位置。元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。这个特定阈值指的是 top, right, bottom 或 left 之一，换言之，指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。</p>\n<h2 id=\"四、场景应用\"><a href=\"#四、场景应用\" class=\"headerlink\" title=\"四、场景应用\"></a>四、场景应用</h2><h3 id=\"1-实现一个三角形\"><a href=\"#1-实现一个三角形\" class=\"headerlink\" title=\"1. 实现一个三角形\"></a>1. 实现一个三角形</h3><p>CSS绘制三角形主要用到的是border属性，也就是边框。</p>\n<p>平时在给盒子设置边框时，往往都设置很窄，就可能误以为边框是由矩形组成的。实际上，border属性是右三角形组成的，下面看一个例子：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">100px</span> solid;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: orange blue red green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将元素的长宽都设置为0，显示出来的效果是这样的： <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cba8731fea9842a8b8103c2b387fe64f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> 所以可以根据border这个特性来绘制三角形： <strong>（1）三角1</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;    <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid red;    <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;    <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab996951a0cc42cf9e6d9e12eb827f8b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> <strong>（2）三角2</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/531c6c250dd8446fb0f264e7b3df6fba~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> <strong>（3）三角3</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4beaf4e4a0140ad9e7252f8a6e4e8e6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> <strong>（4）三角4</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/445f50ad19164b0f863ad8dfef2a29b1~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> <strong>（5）三角5</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">100px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">100px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1ac630463164e42a027b54bb95f56ba~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> 还有很多，就不一一实现了，总体的原则就是通过上下左右边框来控制三角形的方向，用边框的宽度比来控制三角形的角度。</p>\n<h3 id=\"2-实现一个扇形\"><a href=\"#2-实现一个扇形\" class=\"headerlink\" title=\"2. 实现一个扇形\"></a>2. 实现一个扇形</h3><p>用CSS实现扇形的思路和三角形基本一致，就是多了一个圆角的样式，实现一个90°的扇形：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">100px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    heigt: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top-color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db5e46aea0ce4805a0c2bbec2743546e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"></p>\n<h3 id=\"3-实现一个宽高自适应的正方形\"><a href=\"#3-实现一个宽高自适应的正方形\" class=\"headerlink\" title=\"3. 实现一个宽高自适应的正方形\"></a>3. 实现一个宽高自适应的正方形</h3><ul>\n<li>利用vw来实现：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.square</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">10vw</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: tomato;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用元素的margin/padding百分比是相对父元素width的性质来实现：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.square</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">20%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用子元素的margin-top的值来实现：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.square</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">30%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.square</span><span class=\"selector-pseudo\">::after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-画一条0-5px的线\"><a href=\"#4-画一条0-5px的线\" class=\"headerlink\" title=\"4. 画一条0.5px的线\"></a>4. 画一条0.5px的线</h3><ul>\n<li><strong>采用transform: scale()的方式</strong>，该方法用来定义元素的2D 缩放转换：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>采用meta viewport的方式</strong></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; <span class=\"attribute\">content</span>=&quot;<span class=\"attribute\">width</span>=device-<span class=\"attribute\">width</span>, initial-scale=<span class=\"number\">0.5</span>, minimum-scale=<span class=\"number\">0.5</span>, maximum-scale=<span class=\"number\">0.5</span>&quot;/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这样就能缩放到原来的0.5倍，如果是1px那么就会变成0.5px。viewport只针对于移动端，只在移动端上才能看到效果</p>\n<h3 id=\"5-设置小于12px的字体\"><a href=\"#5-设置小于12px的字体\" class=\"headerlink\" title=\"5. 设置小于12px的字体\"></a>5. 设置小于12px的字体</h3><p>在谷歌下css设置字体大小为12px及以下时，显示都是一样大小，都是默认12px。</p>\n<p><strong>解决办法：</strong></p>\n<ul>\n<li>使用Webkit的内核的-webkit-text-size-adjust的私有CSS属性来解决，只要加了-webkit-text-size-adjust:none;字体大小就不受限制了。但是chrome更新到27版本之后就不可以用了。所以高版本chrome谷歌浏览器已经不再支持-webkit-text-size-adjust样式，所以要使用时候慎用。</li>\n<li>使用css3的transform缩放属性-webkit-transform:scale(0.5); 注意-webkit-transform:scale(0.75);收缩的是整个元素的大小，这时候，如果是内联元素，必须要将内联元素转换成块元素，可以使用display：block/inline-block/…；</li>\n<li>使用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。</li>\n</ul>\n<h3 id=\"6-如何解决-1px-问题？\"><a href=\"#6-如何解决-1px-问题？\" class=\"headerlink\" title=\"6. 如何解决 1px 问题？\"></a>6. 如何解决 1px 问题？</h3><p>1px 问题指的是：在一些 <code>Retina屏幕</code> 的机型上，移动端页面的 1px 会变得很粗，呈现出不止 1px 的效果。原因很简单——CSS 中的 1px 并不能和移动设备上的 1px 划等号。它们之间的比例关系有一个专门的属性来描述：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.devicePixelRatio = 设备的物理像素 / CSS像素。</span><br></pre></td></tr></table></figure>\n\n<p>打开 Chrome 浏览器，启动移动端调试模式，在控制台去输出这个 <code>devicePixelRatio</code> 的值。这里选中 iPhone6/7/8 这系列的机型，输出的结果就是2： <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a8af7dca29f84b7e9d1f94232713ef07~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\" alt=\"img\"> 这就意味着设置的 1px CSS 像素，在这个设备上实际会用 2 个物理像素单元来进行渲染，所以实际看到的一定会比 1px 粗一些。 <strong>解决1px 问题的三种思路：</strong></p>\n<h4 id=\"思路一：直接写-0-5px\"><a href=\"#思路一：直接写-0-5px\" class=\"headerlink\" title=\"思路一：直接写 0.5px\"></a>思路一：直接写 0.5px</h4><p>如果之前 1px 的样式这样写：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#333</span></span><br></pre></td></tr></table></figure>\n\n<p>可以先在 JS 中拿到 window.devicePixelRatio 的值，然后把这个值通过 JSX 或者模板语法给到 CSS 的 data 里，达到这样的效果（这里用 JSX 语法做示范）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;container&quot;</span> data-device=&#123;&#123;<span class=\"variable language_\">window</span>.<span class=\"property\">devicePixelRatio</span>&#125;&#125;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以在 CSS 中用属性选择器来命中 devicePixelRatio 为某一值的情况，比如说这里尝试命中 devicePixelRatio 为2的情况：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span><span class=\"selector-attr\">[data-device=<span class=\"string\">&quot;2&quot;</span>]</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>:<span class=\"number\">0.5px</span> solid <span class=\"number\">#333</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>直接把 1px 改成 1/devicePixelRatio 后的值，这是目前为止最简单的一种方法。这种方法的缺陷在于兼容性不行，IOS 系统需要8及以上的版本，安卓系统则直接不兼容。</p>\n<h4 id=\"思路二：伪元素先放大后缩小\"><a href=\"#思路二：伪元素先放大后缩小\" class=\"headerlink\" title=\"思路二：伪元素先放大后缩小\"></a>思路二：伪元素先放大后缩小</h4><p>这个方法的可行性会更高，兼容性也更好。唯一的缺点是代码会变多。</p>\n<p>思路是<strong>先放大、后缩小：在目标元素的后面追加一个 ::after 伪元素，让这个元素布局为 absolute 之后、整个伸展开铺在目标元素上，然后把它的宽和高都设置为目标元素的两倍，border值设为 1px。接着借助 CSS 动画特效中的放缩能力，把整个伪元素缩小为原来的 50%。此时，伪元素的宽高刚好可以和原有的目标元素对齐，而 border 也缩小为了 1px 的二分之一，间接地实现了 0.5px 的效果。</strong></p>\n<p>代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#container</span><span class=\"selector-attr\">[data-device=<span class=\"string\">&quot;2&quot;</span>]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#container</span><span class=\"selector-attr\">[data-device=<span class=\"string\">&quot;2&quot;</span>]</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">      <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">      <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">200%</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">200%</span>;</span><br><span class=\"line\">      <span class=\"attribute\">content</span>:<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">      <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">0.5</span>);</span><br><span class=\"line\">      <span class=\"attribute\">transform-origin</span>: left top;</span><br><span class=\"line\">      <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">      <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#333</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"思路三：viewport-缩放来解决\"><a href=\"#思路三：viewport-缩放来解决\" class=\"headerlink\" title=\"思路三：viewport 缩放来解决\"></a>思路三：viewport 缩放来解决</h4><p>这个思路就是对 meta 标签里几个关键属性下手：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里针对像素比为2的页面，把整个页面缩放为了原来的1/2大小。这样，本来占用2个物理像素的 1px 样式，现在占用的就是标准的一个物理像素。根据像素比的不同，这个缩放比例可以被计算为不同的值，用 js 代码实现如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> scale = <span class=\"number\">1</span> / <span class=\"variable language_\">window</span>.<span class=\"property\">devicePixelRatio</span>;</span><br><span class=\"line\"><span class=\"comment\">// 这里 metaEl 指的是 meta 标签对应的 Dom</span></span><br><span class=\"line\">metaEl.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;content&#x27;</span>, <span class=\"string\">`width=device-width,user-scalable=no,initial-scale=<span class=\"subst\">$&#123;scale&#125;</span>,maximum-scale=<span class=\"subst\">$&#123;scale&#125;</span>,minimum-scale=<span class=\"subst\">$&#123;scale&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这样解决了，但这样做的副作用也很大，整个页面被缩放了。这时 1px 已经被处理成物理像素大小，这样的大小在手机上显示边框很合适。但是，一些原本不需要被缩小的内容，比如文字、图片等，也被无差别缩小掉了。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"clipg086p0001rgwh38bdfk4q","category_id":"clipg086u0004rgwh5jewf2bp","_id":"clipg0871000jrgwh7v4z423p"},{"post_id":"clipg086t0003rgwh9avic217","category_id":"clipg086u0004rgwh5jewf2bp","_id":"clipg0873000qrgwhcn6u3odw"},{"post_id":"clipg086x0007rgwh47xig8in","category_id":"clipg0871000irgwh8r4tfc0b","_id":"clipg0875000zrgwh42dd28ib"},{"post_id":"clipg086x0009rgwhd5gocnno","category_id":"clipg0873000srgwhar9106h8","_id":"clipg08760017rgwhgszuax9d"},{"post_id":"clipg08750013rgwhgmq8avsq","category_id":"clipg08750010rgwh3z7xd5nq","_id":"clipg0877001ergwh1hwud6of"},{"post_id":"clipg086y000brgwh5ht24v6t","category_id":"clipg08750010rgwh3z7xd5nq","_id":"clipg0878001hrgwhf6lucuf3"},{"post_id":"clipg08760016rgwhh1p57gvw","category_id":"clipg08750010rgwh3z7xd5nq","_id":"clipg0878001krgwh21a4el3t"},{"post_id":"clipg0877001brgwhe6u6gkdc","category_id":"clipg08750010rgwh3z7xd5nq","_id":"clipg0878001mrgwhfd38hvqp"},{"post_id":"clipg0870000frgwhcw2z7lcz","category_id":"clipg08750010rgwh3z7xd5nq","_id":"clipg0879001orgwha9fmaa5a"},{"post_id":"clipg0871000hrgwh05km1gem","category_id":"clipg08750010rgwh3z7xd5nq","_id":"clipg0879001rrgwhcpzb9dcu"},{"post_id":"clipg0872000mrgwhck06fane","category_id":"clipg08750010rgwh3z7xd5nq","_id":"clipg0879001wrgwhbftv3x8n"},{"post_id":"clipg0873000prgwhgb9z4ap9","category_id":"clipg08750010rgwh3z7xd5nq","_id":"clipg087a0020rgwh8e36dc08"},{"post_id":"clipg0874000vrgwh5cdea81g","category_id":"clipg08750010rgwh3z7xd5nq","_id":"clipg087a0022rgwh566b4aki"},{"post_id":"clipg0875000yrgwhacvn9sey","category_id":"clipg08750010rgwh3z7xd5nq","_id":"clipg087a0026rgwh4cfrbqja"},{"post_id":"clipg087d002srgwhcx4z3avf","category_id":"clipg08750010rgwh3z7xd5nq","_id":"clipg087d002urgwh7neidfcw"}],"PostTag":[{"post_id":"clipg086p0001rgwh38bdfk4q","tag_id":"clipg086w0005rgwh7bb47urh","_id":"clipg0872000nrgwh22hq1z8o"},{"post_id":"clipg086p0001rgwh38bdfk4q","tag_id":"clipg086z000drgwhgp0mdwbc","_id":"clipg0873000rrgwherzv02fb"},{"post_id":"clipg0873000prgwhgb9z4ap9","tag_id":"clipg0871000krgwhfob3eykj","_id":"clipg0874000wrgwh6wfn56ad"},{"post_id":"clipg086t0003rgwh9avic217","tag_id":"clipg0871000krgwhfob3eykj","_id":"clipg08760014rgwhgm0abjj0"},{"post_id":"clipg086t0003rgwh9avic217","tag_id":"clipg0873000trgwh1itxc459","_id":"clipg08760018rgwhb3e90twg"},{"post_id":"clipg086x0007rgwh47xig8in","tag_id":"clipg08750011rgwhd0do6m98","_id":"clipg0879001prgwhbem7abxn"},{"post_id":"clipg086x0007rgwh47xig8in","tag_id":"clipg0877001crgwhfxqs1qtb","_id":"clipg0879001srgwhbxkbcd5i"},{"post_id":"clipg086x0007rgwh47xig8in","tag_id":"clipg0878001irgwhf6a2bpyy","_id":"clipg0879001urgwhhd284jfd"},{"post_id":"clipg086x0009rgwhd5gocnno","tag_id":"clipg0879001nrgwhdkxw3qqn","_id":"clipg0879001xrgwh6023h3sj"},{"post_id":"clipg086y000brgwh5ht24v6t","tag_id":"clipg0879001trgwhfrtqccwb","_id":"clipg087a0023rgwh4h6dfkfr"},{"post_id":"clipg086y000brgwh5ht24v6t","tag_id":"clipg0879001yrgwhg7ce0svi","_id":"clipg087a0024rgwh7dnf8oh3"},{"post_id":"clipg0870000frgwhcw2z7lcz","tag_id":"clipg0871000krgwhfob3eykj","_id":"clipg087a0028rgwheuezhtbx"},{"post_id":"clipg0870000frgwhcw2z7lcz","tag_id":"clipg087a0025rgwhha8aeyzb","_id":"clipg087a0029rgwh1ffk9liz"},{"post_id":"clipg0871000hrgwh05km1gem","tag_id":"clipg087a0025rgwhha8aeyzb","_id":"clipg087b002crgwh92cdgbw2"},{"post_id":"clipg0871000hrgwh05km1gem","tag_id":"clipg0871000krgwhfob3eykj","_id":"clipg087b002drgwh7f1l73r4"},{"post_id":"clipg0872000mrgwhck06fane","tag_id":"clipg087a0025rgwhha8aeyzb","_id":"clipg087b002frgwhbmkyadp5"},{"post_id":"clipg0872000mrgwhck06fane","tag_id":"clipg0871000krgwhfob3eykj","_id":"clipg087b002grgwh255e8lrj"},{"post_id":"clipg0874000vrgwh5cdea81g","tag_id":"clipg0879001trgwhfrtqccwb","_id":"clipg087b002irgwhaieu4ewe"},{"post_id":"clipg0875000yrgwhacvn9sey","tag_id":"clipg087a0025rgwhha8aeyzb","_id":"clipg087b002krgwhgefeh7o6"},{"post_id":"clipg08750013rgwhgmq8avsq","tag_id":"clipg087a0025rgwhha8aeyzb","_id":"clipg087c002mrgwh4r08b1s8"},{"post_id":"clipg08760016rgwhh1p57gvw","tag_id":"clipg087b002lrgwh9vnc8pc3","_id":"clipg087c002orgwh5u888zs2"},{"post_id":"clipg0877001brgwhe6u6gkdc","tag_id":"clipg087c002nrgwh6f8sbcq2","_id":"clipg087c002qrgwh4m2y2yf0"},{"post_id":"clipg0877001brgwhe6u6gkdc","tag_id":"clipg087a0025rgwhha8aeyzb","_id":"clipg087c002rrgwhg633e3xl"},{"post_id":"clipg087d002srgwhcx4z3avf","tag_id":"clipg087d002trgwhbxm4gcn9","_id":"clipg087d002vrgwh5h99bnu6"}],"Tag":[{"name":"quickjs","_id":"clipg086w0005rgwh7bb47urh"},{"name":"devtools","_id":"clipg086z000drgwhgp0mdwbc"},{"name":"前端","_id":"clipg0871000krgwhfob3eykj"},{"name":"C","_id":"clipg0873000trgwh1itxc459"},{"name":"c","_id":"clipg08750011rgwhd0do6m98"},{"name":"js","_id":"clipg0877001crgwhfxqs1qtb"},{"name":"运行时","_id":"clipg0878001irgwhf6a2bpyy"},{"name":"加油","_id":"clipg0879001nrgwhdkxw3qqn"},{"name":"面试","_id":"clipg0879001trgwhfrtqccwb"},{"name":"HTML","_id":"clipg0879001yrgwhg7ce0svi"},{"name":"JS","_id":"clipg087a0025rgwhha8aeyzb"},{"name":"网络","_id":"clipg087b002lrgwh9vnc8pc3"},{"name":"vue","_id":"clipg087c002nrgwh6f8sbcq2"},{"name":"css","_id":"clipg087d002trgwhbxm4gcn9"}]}}