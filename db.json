{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/people.ico","path":"people.ico","modified":0,"renderable":1},{"_id":"themes/butterfly/source/people.png","path":"people.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/gengxing.css","path":"css/gengxing.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/glb.css","path":"css/glb.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/guanyu.css","path":"css/guanyu.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/link.css","path":"css/link.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/liuyanban.css","path":"css/liuyanban.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/mycss.css","path":"css/mycss.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/nav_menu.css","path":"css/nav_menu.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/notice.css","path":"css/notice.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/progress_bar.css","path":"css/progress_bar.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/people.css","path":"css/people.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/mouse.css","path":"css/mouse.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/xiazai.css","path":"css/xiazai.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/example/try.html","path":"example/try.html","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/20115853_380680b35f.jpeg","path":"img/20115853_380680b35f.jpeg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/JgNrST23690481619450556342.gif!cover","path":"img/JgNrST23690481619450556342.gif!cover","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/alipay.webp","path":"img/alipay.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.webp","path":"img/404.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bj.webp","path":"img/bj.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/bt.webp","path":"img/bt.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/default_top_img.webp","path":"img/default_top_img.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.webp","path":"img/favicon.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/dzbp.webp","path":"img/dzbp.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/hx.webp","path":"img/hx.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/cover.png","path":"img/cover.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/lightning1.png","path":"img/lightning1.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/lightning2.png","path":"img/lightning2.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/ljz.webp","path":"img/ljz.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/xka.webp","path":"img/xka.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/logo.ico","path":"img/logo.ico","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/countup.js","path":"js/countup.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/categoryBar.js","path":"js/categoryBar.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/dmyx.js","path":"js/dmyx.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/hygl.js","path":"js/hygl.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/index.js","path":"js/index.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/nav_menu.js","path":"js/nav_menu.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/ripples.js","path":"js/ripples.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/shangshengqipao.js","path":"js/shangshengqipao.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/people.js","path":"js/people.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/snowflake.js","path":"js/snowflake.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/sun_moon.js","path":"js/sun_moon.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/watchWorker.js","path":"js/watchWorker.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/twikookstx.js","path":"js/twikookstx.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/xh1.js","path":"js/xh1.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/xh2.js","path":"js/xh2.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/xiazai.js","path":"js/xiazai.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/music.html","path":"music/music.html","modified":0,"renderable":1},{"_id":"themes/butterfly/source/xz/index.html","path":"xz/index.html","modified":0,"renderable":1},{"_id":"themes/butterfly/source/example/try/index.html","path":"example/try/index.html","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/1.png","path":"img/app/1.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/10.png","path":"img/app/10.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/11.png","path":"img/app/11.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/13.png","path":"img/app/13.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/14.png","path":"img/app/14.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/16.png","path":"img/app/16.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/12.png","path":"img/app/12.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/15.png","path":"img/app/15.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/17.png","path":"img/app/17.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/19.png","path":"img/app/19.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/20.png","path":"img/app/20.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/2.png","path":"img/app/2.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/22.png","path":"img/app/22.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/18.png","path":"img/app/18.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/21.png","path":"img/app/21.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/24.png","path":"img/app/24.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/23.png","path":"img/app/23.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/25.png","path":"img/app/25.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/27.png","path":"img/app/27.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/26.png","path":"img/app/26.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/3.png","path":"img/app/3.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/5.png","path":"img/app/5.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/4.png","path":"img/app/4.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/8.png","path":"img/app/8.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/6.png","path":"img/app/6.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/7.png","path":"img/app/7.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/app/9.png","path":"img/app/9.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/tz/1.webp","path":"img/tz/1.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/tz/2.webp","path":"img/tz/2.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/custom/swiper_init.js","path":"js/custom/swiper_init.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/tz/3.webp","path":"img/tz/3.webp","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/wz/fishes.js","path":"js/wz/fishes.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/wz/siche.js","path":"js/wz/siche.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/css/love.css","path":"dmyx/css/love.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/css/bootstrap.min.css","path":"dmyx/css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/css/try.css","path":"dmyx/css/try.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/images/bg-body.jpg","path":"dmyx/images/bg-body.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/fonts/glyphicons-halflings-regular.woff2","path":"dmyx/fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/images/cream.png","path":"dmyx/images/cream.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/images/device_ico.png","path":"dmyx/images/device_ico.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/images/shouji.png","path":"dmyx/images/shouji.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/css/lights.css","path":"music/css/lights.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/js/bootstrap.min.js","path":"dmyx/js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/js/Config.js","path":"music/js/Config.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/js/Lights.js","path":"music/js/Lights.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/xz/js/app.js","path":"xz/js/app.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/xz/js/jquery.params.js","path":"xz/js/jquery.params.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/js/Three.js","path":"music/js/Three.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/xz/js/particles.js","path":"xz/js/particles.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/xz/css/login.css","path":"xz/css/login.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/xz/img/login_background.png","path":"xz/img/login_background.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/js/one/one.min.js","path":"dmyx/js/one/one.min.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/blue.png","path":"music/images/avatars/blue.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/cherrytree.png","path":"music/images/avatars/cherrytree.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/ellie.jpeg","path":"music/images/avatars/ellie.jpeg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/magenta.png","path":"music/images/avatars/magenta.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/green.png","path":"music/images/avatars/green.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/polydor.png","path":"music/images/avatars/polydor.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/red.png","path":"music/images/avatars/red.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/interscope.png","path":"music/images/avatars/interscope.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/orange.png","path":"music/images/avatars/orange.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/data/spectrumData.png","path":"music/images/data/spectrumData.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/home/bokeh.png","path":"music/images/home/bokeh.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/fonts/standard_07_55.txt","path":"music/images/fonts/standard_07_55.txt","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/home/loadingButton.png","path":"music/images/home/loadingButton.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/home/logo.png","path":"music/images/home/logo.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/fonts/standard_07_55.png","path":"music/images/fonts/standard_07_55.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/home/replayButton.png","path":"music/images/home/replayButton.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/home/playButton.png","path":"music/images/home/playButton.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/home/tweetButton.png","path":"music/images/home/tweetButton.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/envmap/envMapFrontBack.png","path":"music/images/envmap/envMapFrontBack.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/envmap/envMapBottom.png","path":"music/images/envmap/envMapBottom.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/envmap/envMapTop.png","path":"music/images/envmap/envMapTop.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/bengalSeq.png","path":"music/images/experience/bengalSeq.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/envmap/envMapLeftRight.png","path":"music/images/envmap/envMapLeftRight.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/circle.png","path":"music/images/experience/circle.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/dot.png","path":"music/images/experience/dot.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/bengalShadow.png","path":"music/images/experience/bengalShadow.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/particle.png","path":"music/images/experience/particle.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/plasmaBlue.png","path":"music/images/experience/plasmaBlue.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/glow.png","path":"music/images/experience/glow.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/plasmaGreen.png","path":"music/images/experience/plasmaGreen.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/plasmaMagenta.png","path":"music/images/experience/plasmaMagenta.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/plasmaCyan.png","path":"music/images/experience/plasmaCyan.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/plasmaRed.png","path":"music/images/experience/plasmaRed.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/plasmaYellow.png","path":"music/images/experience/plasmaYellow.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/plasmaWhite.png","path":"music/images/experience/plasmaWhite.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/skybox.png","path":"music/images/experience/skybox.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/spotLine.png","path":"music/images/experience/spotLine.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/spotLineAlpha.png","path":"music/images/experience/spotLineAlpha.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/spot.png","path":"music/images/experience/spot.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/experience/terrain66.png","path":"music/images/experience/terrain66.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar2.png","path":"music/images/avatars/ellie/ellieAvatar2.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar1.png","path":"music/images/avatars/ellie/ellieAvatar1.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar0.png","path":"music/images/avatars/ellie/ellieAvatar0.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar4.png","path":"music/images/avatars/ellie/ellieAvatar4.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar3.png","path":"music/images/avatars/ellie/ellieAvatar3.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/js/codemirror/lib/codemirror_all.min.css","path":"dmyx/js/codemirror/lib/codemirror_all.min.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/js/codemirror/lib/codemirror_all.min.js","path":"dmyx/js/codemirror/lib/codemirror_all.min.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/dmyx/js/codemirror/addon/hint/jsAll.json","path":"dmyx/js/codemirror/addon/hint/jsAll.json","modified":0,"renderable":1},{"_id":"themes/butterfly/source/example/try/code/1/bd/rono.html","path":"example/try/code/1/bd/rono.html","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/creativity.yml","hash":"a57df6ee84151f21382e2190dc43723491bf92c5","modified":1685820643161},{"_id":"source/_data/notice.yml","hash":"492caac6124da0ac6595b6528f552f6b93adbb2a","modified":1685820643161},{"_id":"source/_data/indexwz.yml","hash":"fb560ffe9b41b2304589565bfaa4107061faec9d","modified":1685820643161},{"_id":"source/_data/link.yml","hash":"78406b2a0604ea93330f89de3166af7b8127f278","modified":1685820643161},{"_id":"source/_data/shuanbian.yml","hash":"ce3baed3ba17230de15fe39ced71244cd354ec7a","modified":1685820643162},{"_id":"source/_data/reward.yml","hash":"211611d99643b8040c86b0f2934fee87d03228ed","modified":1685820643162},{"_id":"source/_data/video.yml","hash":"156c07478c2f7ca591ac5a475c0c36fbf758f8d3","modified":1685820643162},{"_id":"source/_data/widget.yml","hash":"9448a9acacc100272581154ce24fe9c72263bc6d","modified":1685820643162},{"_id":"source/messageboard/index.md","hash":"5b37634e649fd2eb432270826b31b330438fe8c1","modified":1685820643167},{"_id":"source/categories/index.md","hash":"17ebb2d1c13eace1ee7fdda9f9d7885130561971","modified":1685820643166},{"_id":"source/about/index.md","hash":"1e86be157bd057dc84635cf4c04483556079e10d","modified":1685820643166},{"_id":"source/selfjs/tw_cn.js","hash":"c9ad65ee76b33fcb3b9e0c49671ce0824789df3b","modified":1685820643169},{"_id":"source/music/index.md","hash":"87f4d1598072e632c41c764c7e062128ff2e2b12","modified":1685820643167},{"_id":"source/selfjs/localsearch.js","hash":"3c4b6dbab1e5a69092594216695d9bdb954b0222","modified":1685820643168},{"_id":"source/link/index.md","hash":"d18945e26531ac9a9700e672982ce3bf67a3af67","modified":1685820643167},{"_id":"source/myself/index.md","hash":"fe5485d63260c37b5d0e0e239c39cc1b6b339bc3","modified":1685820643168},{"_id":"source/tags/index.md","hash":"92bce69df344161705b609ecf53458c6b210ee67","modified":1685820643169},{"_id":"source/tuku/index.md","hash":"7226b6f9ff1d15463988a193f7bf51e4410f0e55","modified":1685820643170},{"_id":"source/notice/index.md","hash":"89b993998a36d2b1d59e0ea75a3ebe6dfbe188ad","modified":1685820643168},{"_id":"source/xiance/index.md","hash":"6ceca422daca03a0874b1adff5ab880a139eea99","modified":1685820643170},{"_id":"source/talking/index.md","hash":"e16ccd4afb18d6d9f9e37f713c3a819404b5d301","modified":1685820643169},{"_id":"source/timeline/index.md","hash":"82277d24faa33cefc47e6ca657eb25b431b9a33a","modified":1685820643169},{"_id":"source/video/index.md","hash":"d6d7baf3dc1da2da3e8c8f8fecdc87891bf8c5e7","modified":1685820643170},{"_id":"source/_posts/c/vela快应用框架.md","hash":"344af9627c2c6d2fb5ef80efce9a5b805ac2e4d7","modified":1685820643163},{"_id":"source/_posts/js/HTML&css复习.md","hash":"5dcd10d90baea20b444b6c900cd711a80271952a","modified":1685820643164},{"_id":"source/_posts/c/vela运行时.md","hash":"1da770f6cad920d82451d1d9bec734ed0136c88b","modified":1685820643163},{"_id":"source/_posts/js/JS复习.md","hash":"b76f72fd5b333be2fcdf2066a139529a7937639a","modified":1685820643164},{"_id":"source/_posts/c/quickjs调试器.md","hash":"47b63e7d4c180f49ae3e538587059c537fd07a0e","modified":1685820643163},{"_id":"source/_posts/js/前端安全问题.md","hash":"fee5d3e0ab7ee7e493ed1bb765867c6b1d8153e5","modified":1685820643165},{"_id":"source/_posts/js/react复习.md","hash":"1ab65d3fbd37e2b0304155c2add48ce1476070bb","modified":1685820643164},{"_id":"source/_posts/js/算法练习.md","hash":"9fdf3ee57538b4d21932c336e450a193dc9e5ffa","modified":1685968593590},{"_id":"source/_posts/js/前端工程化.md","hash":"c01507ec722ef03ae7ce653c87a7df85b8b88f9b","modified":1685820643165},{"_id":"source/_posts/js/网络.md","hash":"edfad3f9656c7348879ec24a9470c6dd468b3980","modified":1685820643166},{"_id":"source/_posts/js/算法总结.md","hash":"83ba33f1af57b7369c16c0859ba50b3d439c5704","modified":1685976169897},{"_id":"source/_posts/freedom/励志文字.md","hash":"fe27c586b77eaf5045ba0af0fe2407793424120e","modified":1686028377948},{"_id":"source/_posts/js/vue复习.md","hash":"3cb12d7383bc276b07a7cf259a23b242372fa060","modified":1685820643165},{"_id":"source/xiance/marvel/index.md","hash":"d78f7c7f93731d38386aac476ce6a48d73b2064f","modified":1685820643171},{"_id":"source/xiance/ohmygirl/index.md","hash":"9d3b7ddf48de00f2788f027cc8a1743e4d50e021","modified":1685820643171},{"_id":"themes/butterfly/source/css/gengxing.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1685820643230},{"_id":"themes/butterfly/source/css/notice.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1685820643232},{"_id":"themes/butterfly/package.json","hash":"766181f2d556741a7285fea3b170a9a0c67dbc0c","modified":1685820643204},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1685820643174},{"_id":"themes/butterfly/_config.yml","hash":"a69a77a2d4ff13c213392eb0294caca6288a911c","modified":1685968746856},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"4adf079fb0170e3a8de6ddbb0392d6d1120030c4","modified":1685820643175},{"_id":"themes/butterfly/languages/default.yml","hash":"335731ef259a3cec2499a2d5b050025ff4bdc608","modified":1685820643175},{"_id":"themes/butterfly/plugins.yml","hash":"8e3b5e44ff0e7e9c5779234bf21e1e70aeec5ae8","modified":1685820643205},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1685820643175},{"_id":"themes/butterfly/layout/post.pug","hash":"5db3efe98cd6a3ff8288ecec7b319c247b5032c4","modified":1685820643204},{"_id":"themes/butterfly/layout/category.pug","hash":"599676899fb3198ec1b1d6b933167fee97a00c48","modified":1685820643176},{"_id":"themes/butterfly/layout/tag.pug","hash":"970db5f198820f1aae20ed906cd63631c3d95f84","modified":1685820643204},{"_id":"themes/butterfly/layout/index.pug","hash":"261e49a7d002fc1c06dcbc4fbe8c0e9d39d3f7a5","modified":1685820643204},{"_id":"themes/butterfly/layout/page.pug","hash":"eb240117e27984c70f0a036d3f1ca22a1f445937","modified":1685820643204},{"_id":"themes/butterfly/source/people.ico","hash":"791c16e638c9035943d524e96b7b2d996c39e711","modified":1685820643285},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"26d4cff28a99b63e89a2390a635b1af8f2cc00bb","modified":1685820643172},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml.bak","hash":"e1043b8f149371d5a4ab0f1306eabc2988bed071","modified":1685820643172},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1685820643172},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1685820643173},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1685820643173},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1685820643176},{"_id":"themes/butterfly/layout/includes/appxiazai.pug","hash":"c9eb428a8dd1732dbdd375b9801eed434ed91e27","modified":1685820643177},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1685820643173},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1685820643178},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"3b9652a3c6e333b0ef8dadb742effd6c2b4c258d","modified":1685820643178},{"_id":"themes/butterfly/layout/includes/footer2.pug","hash":"671d19893a30e91478c7f4dad851f215251d380d","modified":1685820643178},{"_id":"themes/butterfly/layout/includes/index1.pug","hash":"64bf6c62c43c395d294380f6ed7c8627841e7227","modified":1685820643182},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"553f6e5e242506775ea02ebe4ebf5c99bcd9d439","modified":1685820643176},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"b1bdc6c7dddf2d2dd1291bc95c9dbb43a81515df","modified":1685820643182},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1685820643185},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"482981bd6ba8e6744ade27436d2408ec2614bbf5","modified":1685820643186},{"_id":"themes/butterfly/layout/includes/categoryBar.pug","hash":"a0743165d4a8d7d2ac5c90207f0e981a05f093b8","modified":1685820643177},{"_id":"themes/butterfly/layout/includes/recommend.pug","hash":"e1f87c4bf491541c0f7a4397ff53a169375ccc66","modified":1685820643186},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"4f41fc46410e1e3018ff87e1d1a5c28be7258119","modified":1685820643186},{"_id":"themes/butterfly/layout/includes/tagBar.pug","hash":"d83af56abf4f3d1a89e288f8f7fb6f53ed51e484","modified":1685820643187},{"_id":"themes/butterfly/layout/includes/sysliderbar.pug","hash":"42e0bc9f078517cd466f6682ac3cd9e4996165e7","modified":1685820643186},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1685820643205},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"8e6f0677c190d44c64222054e2e7c065fc6c4802","modified":1685820643205},{"_id":"themes/butterfly/scripts/events/init.js","hash":"b3e05e3440b078f57391c113d6b0c8ecff112720","modified":1685820643206},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"176332aa4d01728d0bd084e9b02c60167dc307dd","modified":1685820643206},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1685820643206},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"cddd14fd7d666f02473352c6f8677d2cacd76e64","modified":1685820643206},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1685820643207},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"6c3b7d0874fa499800a4fd49894c481b05ec750c","modified":1685820643207},{"_id":"themes/butterfly/scripts/tag/card.js","hash":"a952a7c0fc67893f05c6d5bbabd6f37adc69987f","modified":1685820643210},{"_id":"themes/butterfly/scripts/tag/bubble.js","hash":"b47330f4bc251e828f6f519d84d761c4e3d150d2","modified":1685820643210},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1685820643210},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1685820643211},{"_id":"themes/butterfly/scripts/tag/dmyx.js","hash":"910d38bea3852a11cd00dc1c44022c1590b25d4a","modified":1685820643211},{"_id":"themes/butterfly/scripts/tag/checkbox.js","hash":"636cef0f4500a14b123c6b21187fb67989472cbd","modified":1685820643210},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1685820643212},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"6d4cd2393945a9316339351cab588265f5c18d73","modified":1685820643211},{"_id":"themes/butterfly/scripts/tag/folding.js","hash":"93f56903a307b4ce54963b40050fbb9aeb5baf47","modified":1685820643211},{"_id":"themes/butterfly/scripts/tag/inline-labels.js","hash":"eaaedc3d65384e0beb4306534ef4ed202b46da18","modified":1685820643212},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1685820643212},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1685820643213},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1685820643212},{"_id":"themes/butterfly/scripts/tag/link.js","hash":"1137af3a6e6385588abff558c7171c5d9e9b9dc2","modified":1685820643212},{"_id":"themes/butterfly/scripts/tag/msgbox.js","hash":"e485c768bba09025be7b7ecbdfd74a4fa5ac772f","modified":1685820643213},{"_id":"themes/butterfly/scripts/tag/notation.js","hash":"e7ff8db2f01e052c92ab6f606fa71f5dc66631e2","modified":1685820643213},{"_id":"themes/butterfly/scripts/tag/mima.js","hash":"6107ef7e40e63663ef1e979dc59e7791ba07b6c4","modified":1685820643213},{"_id":"themes/butterfly/scripts/tag/poem.js","hash":"dc32c3cec0247b63fd848cbbed69a4bcf3e47525","modified":1685820643213},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1685820643214},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1685820643213},{"_id":"themes/butterfly/scripts/tag/progress.js","hash":"a5147da2079b8ad00e2e73ba9f5c809decefcba7","modified":1685820643214},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1685820643214},{"_id":"themes/butterfly/scripts/tag/video.js","hash":"fa2c074c4c51af11451934140ed8173149a9cadf","modified":1685820643214},{"_id":"themes/butterfly/scripts/tag/xiazai.js","hash":"b7f30fd35439ef40711790056d759b1f62d54667","modified":1685820643215},{"_id":"themes/butterfly/scripts/tag/wblj.js","hash":"564443781b21a09236093eae84465439d880a633","modified":1685820643214},{"_id":"themes/butterfly/source/css/glb.css","hash":"de7665c0c4d536816e5b272feb9891ff05a894d9","modified":1685820643230},{"_id":"themes/butterfly/source/css/guanyu.css","hash":"51303052027a65ee10b27dd590489f3b96410902","modified":1685820643231},{"_id":"themes/butterfly/source/css/link.css","hash":"511b5c4b8f6f53e6f84b944057bf9a5ee1fa4ddf","modified":1685820643231},{"_id":"themes/butterfly/source/css/mycss.css","hash":"58f5232e693c7e6c35c8313bbc240dbe3ac44ae5","modified":1685820643232},{"_id":"themes/butterfly/source/css/nav_menu.css","hash":"4def3d3658b69ee41143d851750881c3ea792211","modified":1685820643232},{"_id":"themes/butterfly/source/css/liuyanban.css","hash":"729385c9a4cd1c3e370f1607a78c6158e9444df2","modified":1685820643231},{"_id":"themes/butterfly/source/css/progress_bar.css","hash":"5b2463e4034ff351d12f3be5ffbb50b5c149bc38","modified":1685820643232},{"_id":"themes/butterfly/source/css/people.css","hash":"8f8a9272d512f871d2773031af1d7a271acabb0b","modified":1685820643232},{"_id":"themes/butterfly/source/css/index.styl","hash":"132a6ea7fb7e45c3532d5ea88f2b5f3555f26a87","modified":1685820643231},{"_id":"themes/butterfly/source/css/var.styl","hash":"f68dea4fd49783bbc6069ac1d33bf05ea334a330","modified":1685820643233},{"_id":"themes/butterfly/source/css/mouse.css","hash":"fa490f71912e6bf7d9f8275279c52df6d391a745","modified":1685820643231},{"_id":"themes/butterfly/source/css/xiazai.css","hash":"8e89efdbf18ee9605906ca0de586135a88d715ca","modified":1685820643233},{"_id":"themes/butterfly/source/example/try.html","hash":"1ed815109b396260ea3aa084bcf3b5bf80b79802","modified":1685820643240},{"_id":"themes/butterfly/source/img/404.webp","hash":"bd0dc3ec1a22a1a72ee179d6b42434b1d763ec69","modified":1685820643243},{"_id":"themes/butterfly/source/img/default_top_img.webp","hash":"4ab272a986bb628ad6061e82322665a1eeabb438","modified":1685820643254},{"_id":"themes/butterfly/source/img/favicon.webp","hash":"60412802902f538637b45db3bf64afea208a5fe8","modified":1685820643255},{"_id":"themes/butterfly/source/img/alipay.webp","hash":"b7310124dcd14f351d224f17863dfbab6a0f701c","modified":1685820643245},{"_id":"themes/butterfly/source/img/dzbp.webp","hash":"48e680ccfe156c25b9cf6c0a63cd8e135dc2d633","modified":1685820643255},{"_id":"themes/butterfly/source/img/hx.webp","hash":"a5574851e056f58c8330d4ba6d6c6348112ba3ef","modified":1685820643255},{"_id":"themes/butterfly/source/img/cover.png","hash":"f9edf7939e4bb129392396a83aa637b36e09499e","modified":1685820643254},{"_id":"themes/butterfly/source/img/lightning1.png","hash":"8dbaa433850eee48afe82e5bf178991e181ac981","modified":1685820643256},{"_id":"themes/butterfly/source/img/lightning2.png","hash":"83f02621657fa555369c680d154255dabbf712ff","modified":1685820643256},{"_id":"themes/butterfly/source/img/ljz.webp","hash":"e63976f72c82e9813c4c138d53a859a7d0251a6d","modified":1685820643256},{"_id":"themes/butterfly/source/img/xka.webp","hash":"607e06c04e255207f26f896de772ace855e21357","modified":1685820643258},{"_id":"themes/butterfly/source/js/countup.js","hash":"ddcbf0b3022b59b1f5c188a994b8d049b1230f74","modified":1685820643259},{"_id":"themes/butterfly/source/img/logo.ico","hash":"791c16e638c9035943d524e96b7b2d996c39e711","modified":1685820643257},{"_id":"themes/butterfly/source/js/categoryBar.js","hash":"7ec6741664cbc871f359e37393b02a9a25f49c23","modified":1685820643259},{"_id":"themes/butterfly/source/js/copy.js","hash":"0de907dc2859af4a0cadc9877fcfe4f2d4f31de7","modified":1685820643259},{"_id":"themes/butterfly/source/js/dmyx.js","hash":"54b656d608d2be326d424a7e6d5f15a927ceaf3b","modified":1685820643260},{"_id":"themes/butterfly/source/js/main.js","hash":"6e9d9e14a0dbeafce17cfecd1743b9a02f2116cd","modified":1685820643260},{"_id":"themes/butterfly/source/js/hygl.js","hash":"b67f69e8f090d6c807fe3a33bccab70bf0395047","modified":1685820643260},{"_id":"themes/butterfly/source/js/index.js","hash":"7c814534bbbc6f67d08f8222d99ec19ddda66752","modified":1685820643260},{"_id":"themes/butterfly/source/js/nav_menu.js","hash":"0d07dffb83c36d4c02837eef255a64a55045b123","modified":1685820643261},{"_id":"themes/butterfly/source/js/ripples.js","hash":"b735e4ea7e5991916d947e43c3d017f5c5d2d64a","modified":1685820643261},{"_id":"themes/butterfly/source/js/people.js","hash":"f150580160f413a6a4d0774f6c183cb13dc37108","modified":1685820643261},{"_id":"themes/butterfly/source/js/snowflake.js","hash":"bf9c62d49e9b606f446c4bac858f40d94a73fad0","modified":1685820643262},{"_id":"themes/butterfly/source/js/sun_moon.js","hash":"dc626b19d2905c154a364e9e573ebe2d3e0ed1f1","modified":1685820643263},{"_id":"themes/butterfly/source/js/watchWorker.js","hash":"0c4bd96c87a5d267fedc42752fe0a7deb9ed3c2d","modified":1685820643264},{"_id":"themes/butterfly/source/js/utils.js","hash":"fdb9e5b38f076953a2431b8f682388b030694b55","modified":1685820643263},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"1ae9561ea27fd9f929a9a67f1b1025303ca4370f","modified":1685820643263},{"_id":"themes/butterfly/source/js/twikookstx.js","hash":"33950ec696f64c3b75624ec8ff28cb94aa624061","modified":1685820643263},{"_id":"themes/butterfly/source/js/xh2.js","hash":"2ad21eee60dda6739049fd2f1a401d2d20d90b9a","modified":1685820643265},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1685820643207},{"_id":"themes/butterfly/source/js/xiazai.js","hash":"f331ed29ec68f903f661a6685598fddc66b5a9ab","modified":1685820643265},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1685820643207},{"_id":"themes/butterfly/source/js/xh1.js","hash":"7ff3968507312f79b75c2e456b6d65357dd5254a","modified":1685820643264},{"_id":"themes/butterfly/scripts/helpers/get_arrays.js","hash":"e51c2d054017ff92425a9691eea0cf0da0cf3017","modified":1685820643208},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"db4f5971c27f49a4cb47d34729f4ddf9919d392b","modified":1685820643208},{"_id":"themes/butterfly/scripts/helpers/cybericon.js","hash":"50366caf8caf6e88b6c803dc982ceaf45e17afb9","modified":1685820643208},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c07efb04120914363b8de2c276ac5783b82db776","modified":1685820643209},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"c445140fa16f19bf5fb617fa735504e7799d4d42","modified":1685820643208},{"_id":"themes/butterfly/scripts/helpers/suijiwenzhang.js","hash":"816182853ea9d2b390fa4d2fe8288d1fef74bb55","modified":1685820643209},{"_id":"themes/butterfly/scripts/helpers/random.js","hash":"5ece9d3529de2814277eb3b6671546539c189ebd","modified":1685820643209},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"83bfb16ab8d440be04e1b1f889f6affa7ad65a67","modified":1685820643209},{"_id":"themes/butterfly/scripts/helpers/swiperbar.js","hash":"c71a85b720f6998b8ee0f1ff015af49ab43953d7","modified":1685820643210},{"_id":"themes/butterfly/source/music/music.html","hash":"b5dd74b5bca055f5c2b12ffbdcf0c4dce22a5a13","modified":1685820643285},{"_id":"themes/butterfly/source/xz/index.html","hash":"b9413aa1992875bfb581c6c79b201120ad53ff91","modified":1685820643288},{"_id":"themes/butterfly/layout/includes/custom/cyber_swiperBar.pug","hash":"d94982fc8f2850265bb0e9f72c2ee2be2b9adf24","modified":1685820643178},{"_id":"themes/butterfly/layout/includes/custom/businesscard.pug","hash":"5427336b4c8e74322ad603f622ffe1ad1c56b4d8","modified":1685820643177},{"_id":"themes/butterfly/layout/includes/custom/sun_moon.pug","hash":"8924013bd2e1ae1bdfb33c4730a69a49107ebc39","modified":1685820643178},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c1e45d4d0bd905ddcd2282de4fe89be92e67847d","modified":1685820643179},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"bee7e29995ebe28ff8518646ef162201b5efa9d9","modified":1685820643179},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"b69f54423e1d7db78b0e4a5ff726244401a6546b","modified":1685820643179},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1685820643180},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1685820643180},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1685820643181},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1685820643180},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1685820643180},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fc3e67e5ae4774d9e89964ba96beed28f34ee8f0","modified":1685820643180},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1685820643182},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"1031eb2011edb743b14fef9ff78a99cf1e323412","modified":1685820643181},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"bf7c75bd97de5801ee0c102627f970c74753bcae","modified":1685820643183},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1685820643181},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"c1105cd32a2fa140cae74f9192061b1c3cbc432a","modified":1685820643181},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"e3464088f5417fc8ca95b29aff459ccb972a7d93","modified":1685820643182},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"39847b8a1f0fad7889954a4ac936b7681949f16c","modified":1685820643183},{"_id":"themes/butterfly/layout/includes/page/about.pug","hash":"22d7f8c0274ebe61a6edfebd36ef21ca66de756b","modified":1685820643184},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1685820643184},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"0f62aea3920621ce9cd87a496fde3828d5fcfe37","modified":1685820643184},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1685820643184},{"_id":"themes/butterfly/layout/includes/page/video.pug","hash":"6bade52d2fbb03bf83e18a0bf9aeb962b921e004","modified":1685820643185},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"8f43fdeaf8cff4a35bab74b48c963786ca015620","modified":1685820643185},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"81362a8c82029119d02b33f0f7bed249950040f0","modified":1685820643183},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1685820643185},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"daecc11491df2a353882111354d7275b4f631cf9","modified":1685820643186},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"41550d6da2e85de68ab9647e4fd32e457e05fae3","modified":1685820643183},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1685820643187},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"5f941e4112d15cdd30e08ae7e67eb7751f57a2fa","modified":1685820643183},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1685820643195},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"5c6a88642ceb753d72a90e7c6691d944c86ba3a8","modified":1685820643198},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1685820643198},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1685820643198},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1685820643201},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d561d36229692e2c8a9ee45a7c24c0c2b3599170","modified":1685820643200},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"06d757b0b4b7cdbc45e697923369b2e25e386c0a","modified":1685820643201},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1685820643201},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1685820643201},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1685820643202},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1685820643202},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1685820643202},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1685820643203},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1685820643203},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1685820643202},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1685820643202},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"5e0e9e9b2cd3c256d52423e2278e790aa387a53a","modified":1685820643203},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1685820643203},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"26381297177114f4c126974f3400c186f548d112","modified":1685820643215},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"d72218cb5a6bfe048ae1c92009bd815a08a53d3a","modified":1685820643223},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"57ea5014139b2ec7c130887c6d6290c1235a648f","modified":1685820643215},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"6d3209cc21bfad732f78ab4b6d4a38f1155a829b","modified":1685820643224},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"5a671599d86612d6405070d29266709aec331602","modified":1685820643224},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1685820643224},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1685820643224},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1685820643223},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"e298708d226bc7fe01ba2d2a881a528e5d7d2f91","modified":1685820643224},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1685820643216},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1685820643217},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"9d264c7a1f2267d0d4be621bd7fe4ecccaab19d6","modified":1685820643218},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1685820643218},{"_id":"themes/butterfly/source/css/_layout/cyber_swiper_bar.styl","hash":"2ecc00f730281241c548630b21ad7dcacd47d176","modified":1685820643219},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"bb51f99085d7f8fe4168169be27adabc0e0217f0","modified":1685820643219},{"_id":"themes/butterfly/source/css/_layout/businesscard.styl","hash":"9cfa4b5a7d4b7ed6725fba20043a5f59bb9d6f30","modified":1685820643218},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1685820643219},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"e931ef81754a7b9d999fa23d134c620e68e75491","modified":1685820643219},{"_id":"themes/butterfly/source/css/_layout/notice.styl","hash":"5af85ef71a0adaa1ee089595c295fe619332045d","modified":1685820643220},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"79034c210d8e074dc5da604c9afd1fb07ac1e311","modified":1685820643220},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1685820643220},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1685820643221},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"b0ba6f72848bc711bcf534c56b04ae14ab21b320","modified":1685820643221},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"eec12861206005856f9092c003842bd313a7f54e","modified":1685820643221},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1685820643222},{"_id":"themes/butterfly/source/css/_layout/sun_moon.styl","hash":"6d7b2f48e04dca561eaec6d8f5b02140106d0377","modified":1685820643222},{"_id":"themes/butterfly/source/css/_layout/web-bg.styl","hash":"f1c666a5e4b4151403e75a7ac53315c686013051","modified":1685820643222},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"1c1c585ba99cb4004956b5e98fc044260b456f99","modified":1685820643221},{"_id":"themes/butterfly/source/css/_tags/bubble.styl","hash":"21f5a6b3d78fd49ff3b459c91df0b4b162c18902","modified":1685820643226},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"1d689531b349a7b136af1be36783253bf9da8952","modified":1685820643222},{"_id":"themes/butterfly/source/css/_tags/checkbox.styl","hash":"8a6988eed6b62fe3f141984ea6158c98415cf9bf","modified":1685820643226},{"_id":"themes/butterfly/source/css/_tags/card.styl","hash":"0aabe1b5117e8a86b6d8860ec0d0b46a7b1d9b83","modified":1685820643226},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1685820643226},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"84c42716e833d2d1dd47195ea996803ffa0e58ec","modified":1685820643227},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1685820643227},{"_id":"themes/butterfly/source/css/_tags/folding.styl","hash":"f749e0fc2b5e9ee0db319f21e2f6b311da36c16b","modified":1685820643226},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1685820643227},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1685820643227},{"_id":"themes/butterfly/source/css/_tags/inline-labels.styl","hash":"c7d6be0b6435b346a383fd9cac4cc1a43db7cb8a","modified":1685820643227},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1685820643228},{"_id":"themes/butterfly/source/css/_tags/msgbox.styl","hash":"9a9189581ef2df9f41fad44b6a115b814ee90ae0","modified":1685820643228},{"_id":"themes/butterfly/source/css/_tags/link.styl","hash":"54c548a6e69ed3e36e31fb0cb81b1016a4c5604f","modified":1685820643228},{"_id":"themes/butterfly/source/css/_tags/poem.styl","hash":"b35c7ac2a751090a51b35acd44f958f7555c4683","modified":1685820643229},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1685820643228},{"_id":"themes/butterfly/source/css/_tags/notation.styl","hash":"a546dc07fdaca66dfb8ee216fac257aefbfc79c6","modified":1685820643228},{"_id":"themes/butterfly/source/css/_tags/progress.styl","hash":"96be22ff1c26bbe4c8d7f397e0d2e4bee9ce69f2","modified":1685820643229},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1685820643229},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1685820643229},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"cced94e70b4b90130cfa215582be2adbf883efba","modified":1685820643225},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"d1398399eb7f1cc004fbcefa18f56188cc8fec8c","modified":1685820643225},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"45792c13c7c439d412b7dc597d74d24f3b598406","modified":1685820643225},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"1fed25162d7204480e9bcf476b3246e1717107ca","modified":1685820643223},{"_id":"themes/butterfly/source/example/try/index.html","hash":"d778e2c23c6dd2f89fb04290e04ca41c29c61dfa","modified":1685820643241},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"0b68d83ac5717af91112e9cb6e293bf4baee5def","modified":1685820643223},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1685820643230},{"_id":"themes/butterfly/source/img/app/1.png","hash":"384551ecc5bd11f4b780f0ab785788e874e1b9a9","modified":1685820643245},{"_id":"themes/butterfly/source/img/app/10.png","hash":"47c88b91ba0894084e550b0253c5feffacf1a453","modified":1685820643245},{"_id":"themes/butterfly/source/img/app/11.png","hash":"355d9b84a9423a2e8f58c46d6b551a445e683e30","modified":1685820643245},{"_id":"themes/butterfly/source/img/app/13.png","hash":"4cc90d31f9d6b0f3b515d2722dc4d024920ec9f2","modified":1685820643246},{"_id":"themes/butterfly/source/img/app/16.png","hash":"a7815d07dabf5bfc7b98fdd8c1052f9d76bbca10","modified":1685820643247},{"_id":"themes/butterfly/source/img/app/12.png","hash":"6640ac8a1812fc2dd42830b8a9cdac9ec8ec48a2","modified":1685820643246},{"_id":"themes/butterfly/source/img/app/15.png","hash":"77a4f4abd81f6747ec0b8941a7e11885a613355f","modified":1685820643246},{"_id":"themes/butterfly/source/img/app/17.png","hash":"2d39f73536f0b2f13e855547e9fb2212203029b7","modified":1685820643247},{"_id":"themes/butterfly/source/img/app/19.png","hash":"38397dc1b44748b5e4c53e9cbab024a851db5065","modified":1685820643247},{"_id":"themes/butterfly/source/img/app/14.png","hash":"362eb15aa006f3ee1276e882fb54623e207b0b7f","modified":1685820643246},{"_id":"themes/butterfly/source/img/app/2.png","hash":"2a0b3928246949624a9b3a54512fd9e53aae7d05","modified":1685820643248},{"_id":"themes/butterfly/source/img/app/20.png","hash":"c4523336533bb6f6ac07794f8c3c45f0a42653b6","modified":1685820643248},{"_id":"themes/butterfly/source/img/app/22.png","hash":"9f2c5d27277fa548979272283c24678d94b07d6c","modified":1685820643248},{"_id":"themes/butterfly/source/img/app/18.png","hash":"0d140ba61db9706879c4dfcfd64ce03988974a61","modified":1685820643247},{"_id":"themes/butterfly/source/img/app/21.png","hash":"f008110f88a5a5ef560f4c573dd86393ccd26d40","modified":1685820643248},{"_id":"themes/butterfly/source/img/app/24.png","hash":"8d9e2e7d9ed8fd3fbf404f73b9dc429fa4b3bbf7","modified":1685820643249},{"_id":"themes/butterfly/source/img/app/23.png","hash":"b6aa5a5142fb286120442e00d9e383b872a6dca3","modified":1685820643248},{"_id":"themes/butterfly/source/img/app/25.png","hash":"48ceef0aee04b51e6712f4594d4f902cd67eee3d","modified":1685820643249},{"_id":"themes/butterfly/source/img/app/27.png","hash":"d0247de008905f827a5ba1c6a38fca84446b8500","modified":1685820643249},{"_id":"themes/butterfly/source/img/app/26.png","hash":"240a3ec16dbaa1bec9f9a2ee0e9f4760dba004bb","modified":1685820643249},{"_id":"themes/butterfly/source/img/app/3.png","hash":"201d04b358b5cf38a0a51de34c17056631cec2a4","modified":1685820643250},{"_id":"themes/butterfly/source/img/app/5.png","hash":"69660eb6846ba34675088d6ea2298a6aa5675889","modified":1685820643251},{"_id":"themes/butterfly/source/img/app/6.png","hash":"c8db691d7e91871360d0a797ede693f086eaa38e","modified":1685820643251},{"_id":"themes/butterfly/source/img/app/7.png","hash":"a5a6fc07ab65cf4f1f9fc8e8f4d933bf3ad915e7","modified":1685820643251},{"_id":"themes/butterfly/source/img/app/4.png","hash":"61737a687f8f999913ee8c503f3c77c0982bb515","modified":1685820643250},{"_id":"themes/butterfly/source/img/app/8.png","hash":"adaed050a0f1e443f79e413ffbf713f1953e84c1","modified":1685820643251},{"_id":"themes/butterfly/source/img/tz/1.webp","hash":"ae0f03e61da9880904751ca80a0e88b5180aab1a","modified":1685820643257},{"_id":"themes/butterfly/source/img/app/9.png","hash":"246eb14bb574c9cd3a6f5ab594aabd69b8f682db","modified":1685820643252},{"_id":"themes/butterfly/source/img/tz/2.webp","hash":"e039cc56a0bdd41be429bbb416c0be83c2f9d3b5","modified":1685820643257},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"d0d60008ef4ff74298ff062878766f194a2e4a70","modified":1685820643261},{"_id":"themes/butterfly/source/js/custom/swiper_init.js","hash":"d703c9adcdfba3769ae9647295ef3ced89fd923a","modified":1685820643259},{"_id":"themes/butterfly/source/img/tz/3.webp","hash":"a80d31e3a5d9a7973ba2362a7bfe0ff244343d7f","modified":1685820643257},{"_id":"themes/butterfly/source/js/wz/fishes.js","hash":"4d4e26707d5be0d96e24bf2b1c63d3cacfe3387d","modified":1685820643264},{"_id":"themes/butterfly/source/js/wz/siche.js","hash":"be9add955c22f237a1cfd006a32d18805a5b8cb3","modified":1685820643264},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"f72e002d56903a49c36174e77e42f88b8af8bd44","modified":1685820643262},{"_id":"themes/butterfly/source/dmyx/css/love.css","hash":"c0d73e8bbc21aed4b3bd2cfbfffa4c85578e632a","modified":1685820643234},{"_id":"themes/butterfly/source/dmyx/css/bootstrap.min.css","hash":"f64e254caa7199fd8b52935eafe2772ec2c873b4","modified":1685820643233},{"_id":"themes/butterfly/source/dmyx/css/try.css","hash":"b8932ca54eef5212eb6e969364fe4deefca26c74","modified":1685820643234},{"_id":"themes/butterfly/source/dmyx/images/bg-body.jpg","hash":"a12bdff40ec6772a6b1b4a4b2af95324bf0f7c4a","modified":1685820643234},{"_id":"themes/butterfly/source/dmyx/fonts/glyphicons-halflings-regular.woff2","hash":"1ac0ad2111e7a33efccf7c61677ed52c81580845","modified":1685820643234},{"_id":"themes/butterfly/source/dmyx/images/cream.png","hash":"eef38c387db75e461f07f1c3578942d8907e4f5a","modified":1685820643235},{"_id":"themes/butterfly/source/music/css/lights.css","hash":"0815d760b66fe7d054d1c10d71e1136d94c2cf4a","modified":1685820643265},{"_id":"themes/butterfly/source/dmyx/images/device_ico.png","hash":"7ffe5a758cd5437a5b65d0c0331158d637573bf2","modified":1685820643235},{"_id":"themes/butterfly/source/dmyx/js/bootstrap.min.js","hash":"c5c481ca5a263031d938f6c12abd2fe5fb4b6a83","modified":1685820643236},{"_id":"themes/butterfly/source/xz/js/app.js","hash":"33bcfd3bbe90fcab9d6bcabf11999888b8f89774","modified":1685820643288},{"_id":"themes/butterfly/source/music/js/Config.js","hash":"1e39ab323f99ddc8832e1ae4bbad45c154044ae3","modified":1685820643282},{"_id":"themes/butterfly/source/xz/js/jquery.params.js","hash":"dd0fe18c9c0f9cd2f9b9e64cd5b51a098282dbce","modified":1685820643289},{"_id":"themes/butterfly/source/xz/js/particles.js","hash":"db50c31434054b956a3467edba299d87b56d3dce","modified":1685820643289},{"_id":"themes/butterfly/source/xz/css/login.css","hash":"e8450a60b8011b63a3e0e28b690ac9cb2dffba84","modified":1685820643286},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1685820643190},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1685820643190},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1685820643191},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e703319ae5395273e81de11ba2366f21a104cf47","modified":1685820643191},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1685820643190},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1685820643191},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"a5ddcf84ce8855c7801289270009e29c3a103150","modified":1685820643191},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"645087801624a73cbee63269cfd399e9da39c663","modified":1685820643188},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"aff5c34b6061b281c66a986cf017e9021dc11ac6","modified":1685820643188},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1685820643188},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1685820643189},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"38b85d216d9377ddbaa2e5867e2f03805227237c","modified":1685820643189},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1685820643188},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1685820643196},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"77ac27a24b8347668c4df9d5c44c9461c69eaec9","modified":1685820643196},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"6e5ccc9ea4346c71ad4cbf1e9f1cb83bb45e6f27","modified":1685820643190},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1685820643197},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1685820643189},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"91a72e94743befa21a7b1c557fbb3751efb87ab0","modified":1685820643197},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1685820643197},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"33368c0b80e4c4e78f3c7ee9bec0fed70ad838ca","modified":1685820643197},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"63ef0b2a75cf26a94c5bcd885f3a1c144451b852","modified":1685820643198},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"bc207dcb771fc2c2c329f29d01708ff6b18443da","modified":1685820643197},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1685820643195},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1685820643195},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"297d34d83e7bff8ec3b8bc19bb0f4d901c35fe5a","modified":1685820643196},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"2a39dd634a80a735359206a2481f8468f34a0b5c","modified":1685820643196},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"55f7c144e4ef7a7f317bcdab8044fd8f89bdd5d9","modified":1685820643192},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"8c16214a610ff8087628f32d005a1b0aab3bb910","modified":1685820643192},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"319463fc8ff993b798f2293b659b522ad7770cf0","modified":1685820643192},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"3df2f59c9552a1f2e6f0d50c4ae97e72c5392b59","modified":1685820643193},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"fe599836225b835bd19fe1a6831fb4d41bcec071","modified":1685820643192},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"3b551ab7618b36795480015b5cf565288df5b957","modified":1685820643192},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"5b44b4e5f2445260811de81edd3eeeb97d8bb583","modified":1685820643193},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1685820643193},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"d48d59ebf8c0142fb3c4592a0d35874f85e6fd4c","modified":1685820643194},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"ccb5c3f2a821b87986998595743387d7c997c16e","modified":1685820643194},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1685820643193},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f04263a3bd7efb7f1b250cfee112e82f49805492","modified":1685820643194},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1685820643194},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"e45152e4ebc3fb2462916be93f98d18f0574f2d3","modified":1685820643194},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1685820643200},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"b45fc15c3ae7db3a0fbce0d6da74a72a95ca8a2b","modified":1685820643200},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1685820643199},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1685820643200},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1685820643199},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3b5ef84744a1a8fec5a63554079008040d96f924","modified":1685820643199},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1685820643216},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1685820643216},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1685820643217},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1685820643217},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"af5d3d87b736598dafcf5871863596592cacdfe1","modified":1685820643199},{"_id":"themes/butterfly/source/music/images/avatars/blue.png","hash":"19089e90eab98eb0da4612f8742ad306f7652a92","modified":1685820643266},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1685820643217},{"_id":"themes/butterfly/source/dmyx/js/one/one.min.js","hash":"1ebe889635a11a556aab592ca909833f7207d75f","modified":1685820643240},{"_id":"themes/butterfly/source/music/images/avatars/ellie.jpeg","hash":"3d5148a95ff2a1c993879374162265f34777b710","modified":1685820643267},{"_id":"themes/butterfly/source/music/images/avatars/cherrytree.png","hash":"d5fb1b5314f76dae7c39e816f32601fccd9240ff","modified":1685820643266},{"_id":"themes/butterfly/source/music/images/avatars/green.png","hash":"6b467f115390c5c703452c0b5b7038404b09c9f7","modified":1685820643268},{"_id":"themes/butterfly/source/music/images/avatars/magenta.png","hash":"7e215e4786d125764bea414273f7e9d254155f69","modified":1685820643269},{"_id":"themes/butterfly/source/music/images/avatars/polydor.png","hash":"2775079ac49d4546dbe014e8148e67c856db2c7c","modified":1685820643269},{"_id":"themes/butterfly/source/music/images/avatars/red.png","hash":"2f93445f19812b5a5e04fc39ca7625e9e18da268","modified":1685820643270},{"_id":"themes/butterfly/source/music/images/avatars/interscope.png","hash":"09b2f9c2cc7af5bee4bb47d97e86ed0c2a42b768","modified":1685820643269},{"_id":"themes/butterfly/source/music/images/home/bokeh.png","hash":"574eed75311e1cb0a4af2268edf6cf04e5e669e6","modified":1685820643280},{"_id":"themes/butterfly/source/music/images/avatars/orange.png","hash":"909d859c556a6c1110b6fc7a3ad070ee0c647e93","modified":1685820643269},{"_id":"themes/butterfly/source/music/images/fonts/standard_07_55.txt","hash":"b6b2df4c8559b4113aef7078194ab075b45f7ac7","modified":1685820643280},{"_id":"themes/butterfly/source/music/images/home/logo.png","hash":"789aa0a62fe5027acabd745da2471deaeb14e0fe","modified":1685820643281},{"_id":"themes/butterfly/source/music/images/home/loadingButton.png","hash":"1829ec8893a39316e579e9d36b2827b79af2fc95","modified":1685820643281},{"_id":"themes/butterfly/source/music/images/fonts/standard_07_55.png","hash":"d346381f5559472003bd05dcd5202d0a7d6c7d30","modified":1685820643280},{"_id":"themes/butterfly/source/music/images/home/replayButton.png","hash":"b766899a8046a27e11799af9e24e614dd907dcc5","modified":1685820643282},{"_id":"themes/butterfly/source/music/images/home/playButton.png","hash":"df49d11a73d3934bf9fa7287c4c795da0a56ac74","modified":1685820643281},{"_id":"themes/butterfly/source/music/images/home/tweetButton.png","hash":"c34afe0b82eb4ba75890f70c766840e4676b95e7","modified":1685820643282},{"_id":"themes/butterfly/source/music/images/envmap/envMapFrontBack.png","hash":"85febdea45ee07dbccb26ab97ac05c512632ea26","modified":1685820643272},{"_id":"themes/butterfly/source/music/images/envmap/envMapBottom.png","hash":"e2be0544d9baaf180c30b5ab9c81a17c638d06ed","modified":1685820643272},{"_id":"themes/butterfly/source/music/images/envmap/envMapTop.png","hash":"1879f9596f7d14c31a578cd4357682ef356f9e78","modified":1685820643273},{"_id":"themes/butterfly/source/music/images/envmap/envMapLeftRight.png","hash":"fe594ace284262d1e95f40aef9d6efd1fd00cc78","modified":1685820643273},{"_id":"themes/butterfly/source/music/images/experience/circle.png","hash":"df98a89d0dd5d8635407b8ddaf846c0aafe8a15d","modified":1685820643276},{"_id":"themes/butterfly/source/music/images/experience/dot.png","hash":"e7197d81a9abe031306a9b8b2eef5f23e0e9239e","modified":1685820643276},{"_id":"themes/butterfly/source/music/images/experience/bengalShadow.png","hash":"320fe31973727ba6fb142d5ae612b95a5bd42738","modified":1685820643275},{"_id":"themes/butterfly/source/music/images/experience/particle.png","hash":"1b89697043ad44e47fd82e39c673a3f8d376cc58","modified":1685820643277},{"_id":"themes/butterfly/source/music/images/experience/plasmaBlue.png","hash":"72d1cda4448f275d45bf03fdbc0e77ac851f3013","modified":1685820643277},{"_id":"themes/butterfly/source/music/images/experience/glow.png","hash":"dc7e5cb971c22f3b2cc7260cde48d3ad063d240f","modified":1685820643276},{"_id":"themes/butterfly/source/music/images/experience/plasmaGreen.png","hash":"65b07e4fa23a8e2ff9f7759cbf59313e4fb75a07","modified":1685820643277},{"_id":"themes/butterfly/source/music/images/experience/plasmaMagenta.png","hash":"b20827d73754d4dc10053525263752b8ff5dd9d8","modified":1685820643278},{"_id":"themes/butterfly/source/music/images/experience/plasmaCyan.png","hash":"b4b7254707dc20f40a0cc952d8886bec95b3a84f","modified":1685820643277},{"_id":"themes/butterfly/source/music/images/experience/plasmaRed.png","hash":"4964398681e581e8cb7687e485ba428fd37e5615","modified":1685820643278},{"_id":"themes/butterfly/source/music/images/experience/plasmaYellow.png","hash":"88d5d4ba3fd83dec236e2ec2763818d4549d4285","modified":1685820643278},{"_id":"themes/butterfly/source/music/images/experience/plasmaWhite.png","hash":"97bc0ff1030918a08e8463f82da03dd22c56df9a","modified":1685820643278},{"_id":"themes/butterfly/source/music/images/experience/skybox.png","hash":"a027caf9adf2cf4c6bd5b2b139142b68589a2b1b","modified":1685820643279},{"_id":"themes/butterfly/source/music/images/experience/spotLine.png","hash":"6e48d9b31c8116f7b4cc1715e18ebe039e4fb498","modified":1685820643279},{"_id":"themes/butterfly/source/music/images/experience/spotLineAlpha.png","hash":"d5ea95bc36007ab2f92697d0b7fa81bbc5de5c43","modified":1685820643279},{"_id":"themes/butterfly/source/music/images/experience/spot.png","hash":"42292d6b34d34d3e10a64257605f3b3ddead29b3","modified":1685820643279},{"_id":"themes/butterfly/source/music/images/experience/terrain66.png","hash":"bf563eb3b7e5c877f10e0d0b63b9033d0ab36e56","modified":1685820643279},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar2.png","hash":"9a75dd2abc79b86377653b822e44f57a7a65d4fd","modified":1685820643268},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar1.png","hash":"0d1db600de69e0f90a75c44331bb2c99d2469567","modified":1685820643267},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar0.png","hash":"931497bcbf8553806170481d5a998650f28b689e","modified":1685820643267},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar4.png","hash":"c649d09d9771d50afbb1d152b434a1f89857de99","modified":1685820643268},{"_id":"themes/butterfly/source/music/images/avatars/ellie/ellieAvatar3.png","hash":"2b2c33da7d078ec13c438bf3157a2f1f6f681250","modified":1685820643268},{"_id":"themes/butterfly/source/dmyx/js/codemirror/lib/codemirror_all.min.css","hash":"0a0a79f3886d817c256a6fa3d8b59e00cc90e682","modified":1685820643238},{"_id":"themes/butterfly/source/example/try/code/1/bd/rono.html","hash":"99c0af48d2fb825312fe37858f3be2b1f5dc2fbd","modified":1685820643241},{"_id":"themes/butterfly/source/dmyx/js/codemirror/addon/hint/jsAll.json","hash":"d08f9bfd93166f935c4c838bec276560f4811d74","modified":1685820643237},{"_id":"themes/butterfly/source/people.png","hash":"fbf04a351853358578e6adbd5cd1744205cbfbb4","modified":1685820643286},{"_id":"themes/butterfly/source/img/avatar.png","hash":"fbf04a351853358578e6adbd5cd1744205cbfbb4","modified":1685820643252},{"_id":"themes/butterfly/source/img/bj.webp","hash":"a93feb37399ad9d8c2b88f80e0dafdcded8062f8","modified":1685820643252},{"_id":"themes/butterfly/source/img/wechat.jpg","hash":"7c31b3251068706cf7dd02d992a99a8ea1ffb91c","modified":1685820643258},{"_id":"themes/butterfly/source/js/shangshengqipao.js","hash":"7a703a92ba8a60cd1630df1e5086ca1be86a3533","modified":1685820643262},{"_id":"themes/butterfly/source/dmyx/images/shouji.png","hash":"a3b9ad709e9398d66bc9352406831e1d5b1547cb","modified":1685820643236},{"_id":"themes/butterfly/source/img/JgNrST23690481619450556342.gif!cover","hash":"f78e9fa23d791b6fb1275c64b48656e01348d2f4","modified":1685820643244},{"_id":"themes/butterfly/source/img/20115853_380680b35f.jpeg","hash":"0f2c52debbdb267620cd0a8898b390a8b44bd489","modified":1685820643242},{"_id":"themes/butterfly/source/music/js/Three.js","hash":"5f109ceb1b66a02a939afdf5c24f8408db89788b","modified":1685820643285},{"_id":"themes/butterfly/source/music/images/experience/bengalSeq.png","hash":"2bd2e362f582b88287df6301b4da796694b2d729","modified":1685820643275},{"_id":"themes/butterfly/source/music/js/Lights.js","hash":"e46eb36b4c6d430352e93210819a367db1dcd7d0","modified":1685820643284},{"_id":"themes/butterfly/source/music/images/data/spectrumData.png","hash":"eef56debff5b90deb47c2fa18fe30fdffc0b3fe4","modified":1685820643271},{"_id":"themes/butterfly/source/dmyx/js/codemirror/lib/codemirror_all.min.js","hash":"03c2aa18064773f566b7b619deefd6ec8f7e81e3","modified":1685820643239},{"_id":"themes/butterfly/source/img/bt.webp","hash":"1bf17ff87be2cdda060e115c02d92f413e6663a3","modified":1685820643254},{"_id":"themes/butterfly/source/xz/img/login_background.png","hash":"eddf28d185c0852dc37434ec4e73abeb81934b44","modified":1685820643288},{"_id":"public/selfjs/tw_cn.js","hash":"ed646e9fb14b1179d8cfb9d89db299cf6c341193","modified":1686028374097},{"_id":"public/selfjs/localsearch.js","hash":"5bd7f3a3db98258311f98a543b3bcace7e30aa76","modified":1686028374097},{"_id":"public/baidusitemap.xml","hash":"41cdf02201c1cd5aefd7cb7746e06bdb6bd79c74","modified":1686028374097},{"_id":"public/atom.xml","hash":"61394a5378160de4c27303a561f39645a706fe87","modified":1686028374097},{"_id":"public/rss2.xml","hash":"8ab631a810d9b159d3db7a17c309b29b0297d607","modified":1686028374097},{"_id":"public/search.xml","hash":"39f658767b8dec3ced7a728a5f7f3fd6234a2abe","modified":1686028374097},{"_id":"public/sitemap.xml","hash":"2ff1e337708f14fce212928f2d33f40ae9da17a5","modified":1686028374097},{"_id":"public/zhheo/random.js","hash":"d98ef296f44418692a209a2c15977c6b0885e243","modified":1686028374097},{"_id":"public/404.html","hash":"403882c2881cb15cac38f6d70bd9977b318be058","modified":1686028374097},{"_id":"public/messageboard/index.html","hash":"b4b8566b8c81e9617f5fc026dc615be9ab51ae85","modified":1686028374097},{"_id":"public/about/index.html","hash":"a91abf54de3145ea2ee9b20aa0d9bc75e366fedb","modified":1686028374097},{"_id":"public/categories/index.html","hash":"83f38da4c47aae54371ce3ec688b15f9f2ad4f1f","modified":1686028374097},{"_id":"public/music/index.html","hash":"909c23d3a016903fa1e25d99d84ab830b57bfa65","modified":1686028374097},{"_id":"public/link/index.html","hash":"92692ea4510dbf2873400853814e1ede8f636447","modified":1686028374097},{"_id":"public/myself/index.html","hash":"eb1763aecb3005c1ad77eb2aed1c2f60e32f0650","modified":1686028374097},{"_id":"public/tags/index.html","hash":"09fa7297ac319b209a81b694e4bc4ea3ac876bf4","modified":1686028374097},{"_id":"public/timeline/index.html","hash":"789a4e16d98b4cabefa855cd4e3790e6df7cb975","modified":1686028374097},{"_id":"public/notice/index.html","hash":"f8b2203505ad666521b93689f39dc6797bdaeef3","modified":1686028374097},{"_id":"public/tuku/index.html","hash":"2a32258b9df1039db76845ba5f576e011df07434","modified":1686028374097},{"_id":"public/xiance/index.html","hash":"a8676340fc56e71c5b1eea875d1b047342a74f1a","modified":1686028374097},{"_id":"public/talking/index.html","hash":"757f6600019e0b5aa99a9a61725bce2792bc477d","modified":1686028374097},{"_id":"public/xiance/ohmygirl/index.html","hash":"0d5bbf904aa767e0ad9dd3160bb2c476e851fd2a","modified":1686028374097},{"_id":"public/xiance/marvel/index.html","hash":"045a71dfe0a736193f7f27dfc222c549d24751d6","modified":1686028374097},{"_id":"public/video/index.html","hash":"351478c0c3b59e0e7fd533b204263d047bc49ae7","modified":1686028374097},{"_id":"public/posts/8857f1a4.html","hash":"d32fb7610e826b7620ba1301b965ae2904ab501f","modified":1686028374097},{"_id":"public/posts/fa264d8c.html","hash":"4f969a4737010a73a1e33c3e7f2fc32337e1fe8b","modified":1686028374097},{"_id":"public/posts/1213ac56.html","hash":"c430945d19ebce35ec38934d40db4b922035efe1","modified":1686028374097},{"_id":"public/posts/7db00131.html","hash":"3cfe6d9b91206b62230ecd1d62682966e7433d45","modified":1686028374097},{"_id":"public/posts/667b4089.html","hash":"73cd7095cd8c96128bebcbdb1c19fa6b21221195","modified":1686028374097},{"_id":"public/posts/50daec4.html","hash":"2943db2e63fee8e646921afd35eafbc51405b749","modified":1686028374097},{"_id":"public/posts/ab232981.html","hash":"5a4835346e6a61217eb60cf3dbd6cbb5fbc99743","modified":1686028374097},{"_id":"public/posts/c9a941a3.html","hash":"c3c2fa137a5e43215e2a16de40ad1f5a1ff88a13","modified":1686028374097},{"_id":"public/posts/d9795f88.html","hash":"f5d244da76a574cc45982a233599521cc6637c14","modified":1686028374097},{"_id":"public/posts/d9795d86.html","hash":"a574cc77244b9360161a56f228bfbf7fb5aa8da2","modified":1686028374097},{"_id":"public/posts/d9795d10.html","hash":"ea1985295b5ccf676032107cda7cbe868a56c3b6","modified":1686028374097},{"_id":"public/posts/d9795d88.html","hash":"2eb6d159d6703245f422d1d2ed200798b4808f3d","modified":1686028374097},{"_id":"public/posts/d9795d89.html","hash":"3aef3900cad07cfdd8a176d828b2bb7a8e90bc7a","modified":1686028374097},{"_id":"public/archives/index.html","hash":"4ec58a847f2b2fd553213ed777f42d9738c691c6","modified":1686028374097},{"_id":"public/archives/page/2/index.html","hash":"642ea85be8bcc211ac2e3482ec7936b82ad6a4d5","modified":1686028374097},{"_id":"public/archives/2023/index.html","hash":"841a2a92aaaca83360dddfb013bca394934cd161","modified":1686028374097},{"_id":"public/archives/2023/page/2/index.html","hash":"e0897ec0e45d5ac8433c06c3490a537ca02a6f8a","modified":1686028374097},{"_id":"public/archives/2023/04/index.html","hash":"2a0df1653ee572638d825e855a6ddb0421d0c33e","modified":1686028374097},{"_id":"public/archives/2023/05/index.html","hash":"9d6c64ba5cfb59d7c55bb593f6634303d636dc0c","modified":1686028374097},{"_id":"public/archives/2023/05/page/2/index.html","hash":"612c1782722f3b572a8fefe5b8dfff4f58047842","modified":1686028374097},{"_id":"public/archives/2023/06/index.html","hash":"f6b36f39a36ee74d9191db1032d499220ab63956","modified":1686028374097},{"_id":"public/categories/C/index.html","hash":"7ee62df71f2aba2a3834b886bf4cad96d0c8087b","modified":1686028374097},{"_id":"public/categories/JS/index.html","hash":"7ea066af680262bba3847ee3fdc45b93ed1c1e15","modified":1686028374097},{"_id":"public/categories/前端/index.html","hash":"ee584c46fde44c9da2c6aaaf71c07030b8651a18","modified":1686028374097},{"_id":"public/categories/HTML/index.html","hash":"a3f83836a88a08dfe0927c0086071ab95e827b68","modified":1686028374097},{"_id":"public/categories/网络/index.html","hash":"330624c0c4306eedf9cb3360fc00bd9ab5696e16","modified":1686028374097},{"_id":"public/categories/加油/index.html","hash":"c4cdc75615f0047c64b7874446564edb96ffa0a7","modified":1686028374097},{"_id":"public/index.html","hash":"32c01b64077aac40121312eb17e733092d0107b8","modified":1686028374097},{"_id":"public/page/2/index.html","hash":"0425104844db0327801f753c098d9a5eb76f5447","modified":1686028374097},{"_id":"public/tags/quickjs/index.html","hash":"566cf7a51f8df72430bb3b760054e5531c6d20dd","modified":1686028374097},{"_id":"public/tags/devtools/index.html","hash":"3a45b028df0a8618cea7c18c1d120006f90b5ba7","modified":1686028374097},{"_id":"public/tags/前端/index.html","hash":"f2564368e8f434bc6aeee48af8c770b5606001a6","modified":1686028374097},{"_id":"public/tags/JS/index.html","hash":"cf61b2188e126112d33e32257a014369d061206d","modified":1686028374097},{"_id":"public/tags/C/index.html","hash":"0b27a33c72b971adf09b1b00ce529470232fe016","modified":1686028374097},{"_id":"public/tags/c/index.html","hash":"a014fc44b4e58fb390543f210cd8b1caade58bca","modified":1686028374097},{"_id":"public/tags/js/index.html","hash":"fd32ad995e950b8d2b0c88b2f478abd9857c67cf","modified":1686028374097},{"_id":"public/tags/运行时/index.html","hash":"b1bc36e1df8c3b4f1bb71fcce902168b11f85f2d","modified":1686028374097},{"_id":"public/tags/HTML/index.html","hash":"64a5dca3009702d4d897b7f64f2a72d89c751835","modified":1686028374097},{"_id":"public/tags/网络/index.html","hash":"eb31f6a2e9c61d92d92995442bdce60ddfd7de5e","modified":1686028374097},{"_id":"public/tags/vue/index.html","hash":"b9f213717b7a6c2fa037e9524a29fd455395b1d2","modified":1686028374097},{"_id":"public/tags/加油/index.html","hash":"b7446921af657542a2420d59d2800fec0f01fe16","modified":1686028374097},{"_id":"public/img/404.webp","hash":"bd0dc3ec1a22a1a72ee179d6b42434b1d763ec69","modified":1686028374097},{"_id":"public/people.ico","hash":"791c16e638c9035943d524e96b7b2d996c39e711","modified":1686028374097},{"_id":"public/img/alipay.webp","hash":"b7310124dcd14f351d224f17863dfbab6a0f701c","modified":1686028374097},{"_id":"public/img/favicon.webp","hash":"60412802902f538637b45db3bf64afea208a5fe8","modified":1686028374097},{"_id":"public/img/dzbp.webp","hash":"48e680ccfe156c25b9cf6c0a63cd8e135dc2d633","modified":1686028374097},{"_id":"public/img/hx.webp","hash":"a5574851e056f58c8330d4ba6d6c6348112ba3ef","modified":1686028374097},{"_id":"public/img/cover.png","hash":"f9edf7939e4bb129392396a83aa637b36e09499e","modified":1686028374097},{"_id":"public/img/lightning1.png","hash":"8dbaa433850eee48afe82e5bf178991e181ac981","modified":1686028374097},{"_id":"public/img/lightning2.png","hash":"83f02621657fa555369c680d154255dabbf712ff","modified":1686028374097},{"_id":"public/img/ljz.webp","hash":"e63976f72c82e9813c4c138d53a859a7d0251a6d","modified":1686028374097},{"_id":"public/img/xka.webp","hash":"607e06c04e255207f26f896de772ace855e21357","modified":1686028374097},{"_id":"public/img/logo.ico","hash":"791c16e638c9035943d524e96b7b2d996c39e711","modified":1686028374097},{"_id":"public/img/app/1.png","hash":"384551ecc5bd11f4b780f0ab785788e874e1b9a9","modified":1686028374097},{"_id":"public/img/app/10.png","hash":"47c88b91ba0894084e550b0253c5feffacf1a453","modified":1686028374097},{"_id":"public/img/app/11.png","hash":"355d9b84a9423a2e8f58c46d6b551a445e683e30","modified":1686028374097},{"_id":"public/img/app/16.png","hash":"a7815d07dabf5bfc7b98fdd8c1052f9d76bbca10","modified":1686028374097},{"_id":"public/img/app/12.png","hash":"6640ac8a1812fc2dd42830b8a9cdac9ec8ec48a2","modified":1686028374097},{"_id":"public/img/default_top_img.webp","hash":"4ab272a986bb628ad6061e82322665a1eeabb438","modified":1686028374097},{"_id":"public/img/app/15.png","hash":"77a4f4abd81f6747ec0b8941a7e11885a613355f","modified":1686028374097},{"_id":"public/img/app/20.png","hash":"c4523336533bb6f6ac07794f8c3c45f0a42653b6","modified":1686028374097},{"_id":"public/img/app/14.png","hash":"362eb15aa006f3ee1276e882fb54623e207b0b7f","modified":1686028374097},{"_id":"public/img/app/18.png","hash":"0d140ba61db9706879c4dfcfd64ce03988974a61","modified":1686028374097},{"_id":"public/img/app/13.png","hash":"4cc90d31f9d6b0f3b515d2722dc4d024920ec9f2","modified":1686028374097},{"_id":"public/img/app/19.png","hash":"38397dc1b44748b5e4c53e9cbab024a851db5065","modified":1686028374097},{"_id":"public/img/app/2.png","hash":"2a0b3928246949624a9b3a54512fd9e53aae7d05","modified":1686028374097},{"_id":"public/img/app/22.png","hash":"9f2c5d27277fa548979272283c24678d94b07d6c","modified":1686028374097},{"_id":"public/img/app/21.png","hash":"f008110f88a5a5ef560f4c573dd86393ccd26d40","modified":1686028374097},{"_id":"public/img/app/24.png","hash":"8d9e2e7d9ed8fd3fbf404f73b9dc429fa4b3bbf7","modified":1686028374097},{"_id":"public/img/app/23.png","hash":"b6aa5a5142fb286120442e00d9e383b872a6dca3","modified":1686028374097},{"_id":"public/img/app/25.png","hash":"48ceef0aee04b51e6712f4594d4f902cd67eee3d","modified":1686028374097},{"_id":"public/img/app/27.png","hash":"d0247de008905f827a5ba1c6a38fca84446b8500","modified":1686028374097},{"_id":"public/img/app/26.png","hash":"240a3ec16dbaa1bec9f9a2ee0e9f4760dba004bb","modified":1686028374097},{"_id":"public/img/app/3.png","hash":"201d04b358b5cf38a0a51de34c17056631cec2a4","modified":1686028374097},{"_id":"public/img/app/5.png","hash":"69660eb6846ba34675088d6ea2298a6aa5675889","modified":1686028374097},{"_id":"public/img/app/4.png","hash":"61737a687f8f999913ee8c503f3c77c0982bb515","modified":1686028374097},{"_id":"public/img/app/8.png","hash":"adaed050a0f1e443f79e413ffbf713f1953e84c1","modified":1686028374097},{"_id":"public/img/app/6.png","hash":"c8db691d7e91871360d0a797ede693f086eaa38e","modified":1686028374097},{"_id":"public/img/tz/1.webp","hash":"ae0f03e61da9880904751ca80a0e88b5180aab1a","modified":1686028374097},{"_id":"public/img/app/7.png","hash":"a5a6fc07ab65cf4f1f9fc8e8f4d933bf3ad915e7","modified":1686028374097},{"_id":"public/img/app/9.png","hash":"246eb14bb574c9cd3a6f5ab594aabd69b8f682db","modified":1686028374097},{"_id":"public/img/tz/2.webp","hash":"e039cc56a0bdd41be429bbb416c0be83c2f9d3b5","modified":1686028374097},{"_id":"public/img/tz/3.webp","hash":"a80d31e3a5d9a7973ba2362a7bfe0ff244343d7f","modified":1686028374097},{"_id":"public/dmyx/images/bg-body.jpg","hash":"a12bdff40ec6772a6b1b4a4b2af95324bf0f7c4a","modified":1686028374097},{"_id":"public/dmyx/fonts/glyphicons-halflings-regular.woff2","hash":"1ac0ad2111e7a33efccf7c61677ed52c81580845","modified":1686028374097},{"_id":"public/dmyx/images/cream.png","hash":"eef38c387db75e461f07f1c3578942d8907e4f5a","modified":1686028374097},{"_id":"public/dmyx/images/device_ico.png","hash":"7ffe5a758cd5437a5b65d0c0331158d637573bf2","modified":1686028374097},{"_id":"public/music/images/avatars/cherrytree.png","hash":"d5fb1b5314f76dae7c39e816f32601fccd9240ff","modified":1686028374097},{"_id":"public/music/images/avatars/magenta.png","hash":"7e215e4786d125764bea414273f7e9d254155f69","modified":1686028374097},{"_id":"public/music/images/avatars/blue.png","hash":"19089e90eab98eb0da4612f8742ad306f7652a92","modified":1686028374097},{"_id":"public/music/images/avatars/ellie.jpeg","hash":"3d5148a95ff2a1c993879374162265f34777b710","modified":1686028374097},{"_id":"public/img/app/17.png","hash":"2d39f73536f0b2f13e855547e9fb2212203029b7","modified":1686028374097},{"_id":"public/music/images/avatars/polydor.png","hash":"2775079ac49d4546dbe014e8148e67c856db2c7c","modified":1686028374097},{"_id":"public/music/images/avatars/orange.png","hash":"909d859c556a6c1110b6fc7a3ad070ee0c647e93","modified":1686028374097},{"_id":"public/music/images/avatars/green.png","hash":"6b467f115390c5c703452c0b5b7038404b09c9f7","modified":1686028374097},{"_id":"public/music/images/home/bokeh.png","hash":"574eed75311e1cb0a4af2268edf6cf04e5e669e6","modified":1686028374097},{"_id":"public/music/images/avatars/red.png","hash":"2f93445f19812b5a5e04fc39ca7625e9e18da268","modified":1686028374097},{"_id":"public/music/images/fonts/standard_07_55.txt","hash":"b6b2df4c8559b4113aef7078194ab075b45f7ac7","modified":1686028374097},{"_id":"public/music/images/home/loadingButton.png","hash":"1829ec8893a39316e579e9d36b2827b79af2fc95","modified":1686028374097},{"_id":"public/music/images/fonts/standard_07_55.png","hash":"d346381f5559472003bd05dcd5202d0a7d6c7d30","modified":1686028374097},{"_id":"public/music/images/home/logo.png","hash":"789aa0a62fe5027acabd745da2471deaeb14e0fe","modified":1686028374097},{"_id":"public/music/images/home/replayButton.png","hash":"b766899a8046a27e11799af9e24e614dd907dcc5","modified":1686028374097},{"_id":"public/music/images/home/playButton.png","hash":"df49d11a73d3934bf9fa7287c4c795da0a56ac74","modified":1686028374097},{"_id":"public/music/images/home/tweetButton.png","hash":"c34afe0b82eb4ba75890f70c766840e4676b95e7","modified":1686028374097},{"_id":"public/music/images/envmap/envMapFrontBack.png","hash":"85febdea45ee07dbccb26ab97ac05c512632ea26","modified":1686028374097},{"_id":"public/music/images/envmap/envMapTop.png","hash":"1879f9596f7d14c31a578cd4357682ef356f9e78","modified":1686028374097},{"_id":"public/music/images/experience/circle.png","hash":"df98a89d0dd5d8635407b8ddaf846c0aafe8a15d","modified":1686028374097},{"_id":"public/music/images/experience/dot.png","hash":"e7197d81a9abe031306a9b8b2eef5f23e0e9239e","modified":1686028374097},{"_id":"public/music/images/envmap/envMapLeftRight.png","hash":"fe594ace284262d1e95f40aef9d6efd1fd00cc78","modified":1686028374097},{"_id":"public/music/images/experience/bengalShadow.png","hash":"320fe31973727ba6fb142d5ae612b95a5bd42738","modified":1686028374097},{"_id":"public/music/images/experience/plasmaBlue.png","hash":"72d1cda4448f275d45bf03fdbc0e77ac851f3013","modified":1686028374097},{"_id":"public/music/images/avatars/interscope.png","hash":"09b2f9c2cc7af5bee4bb47d97e86ed0c2a42b768","modified":1686028374097},{"_id":"public/music/images/experience/glow.png","hash":"dc7e5cb971c22f3b2cc7260cde48d3ad063d240f","modified":1686028374097},{"_id":"public/music/images/envmap/envMapBottom.png","hash":"e2be0544d9baaf180c30b5ab9c81a17c638d06ed","modified":1686028374097},{"_id":"public/music/images/experience/plasmaGreen.png","hash":"65b07e4fa23a8e2ff9f7759cbf59313e4fb75a07","modified":1686028374097},{"_id":"public/music/images/experience/plasmaCyan.png","hash":"b4b7254707dc20f40a0cc952d8886bec95b3a84f","modified":1686028374097},{"_id":"public/music/images/experience/plasmaYellow.png","hash":"88d5d4ba3fd83dec236e2ec2763818d4549d4285","modified":1686028374097},{"_id":"public/music/images/experience/plasmaMagenta.png","hash":"b20827d73754d4dc10053525263752b8ff5dd9d8","modified":1686028374097},{"_id":"public/music/images/experience/plasmaRed.png","hash":"4964398681e581e8cb7687e485ba428fd37e5615","modified":1686028374097},{"_id":"public/music/images/experience/particle.png","hash":"1b89697043ad44e47fd82e39c673a3f8d376cc58","modified":1686028374097},{"_id":"public/music/images/experience/spotLine.png","hash":"6e48d9b31c8116f7b4cc1715e18ebe039e4fb498","modified":1686028374097},{"_id":"public/music/images/experience/terrain66.png","hash":"bf563eb3b7e5c877f10e0d0b63b9033d0ab36e56","modified":1686028374097},{"_id":"public/music/images/experience/spot.png","hash":"42292d6b34d34d3e10a64257605f3b3ddead29b3","modified":1686028374097},{"_id":"public/music/images/experience/spotLineAlpha.png","hash":"d5ea95bc36007ab2f92697d0b7fa81bbc5de5c43","modified":1686028374097},{"_id":"public/music/images/avatars/ellie/ellieAvatar2.png","hash":"9a75dd2abc79b86377653b822e44f57a7a65d4fd","modified":1686028374097},{"_id":"public/music/images/experience/skybox.png","hash":"a027caf9adf2cf4c6bd5b2b139142b68589a2b1b","modified":1686028374097},{"_id":"public/music/images/experience/plasmaWhite.png","hash":"97bc0ff1030918a08e8463f82da03dd22c56df9a","modified":1686028374097},{"_id":"public/music/images/avatars/ellie/ellieAvatar1.png","hash":"0d1db600de69e0f90a75c44331bb2c99d2469567","modified":1686028374097},{"_id":"public/music/images/avatars/ellie/ellieAvatar0.png","hash":"931497bcbf8553806170481d5a998650f28b689e","modified":1686028374097},{"_id":"public/music/images/avatars/ellie/ellieAvatar3.png","hash":"2b2c33da7d078ec13c438bf3157a2f1f6f681250","modified":1686028374097},{"_id":"public/music/images/avatars/ellie/ellieAvatar4.png","hash":"c649d09d9771d50afbb1d152b434a1f89857de99","modified":1686028374097},{"_id":"public/css/hbe.style.css","hash":"b0a0077cb588c0941823905fcc383aa7509ade73","modified":1686028374097},{"_id":"public/lib/hbe.js","hash":"136dba00826bdd086153bf0acb5473aea7183ad1","modified":1686028374097},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"284416885e4e80e27fa4eae6fc305f4de15b914c","modified":1686028374097},{"_id":"public/people.png","hash":"fbf04a351853358578e6adbd5cd1744205cbfbb4","modified":1686028374097},{"_id":"public/img/avatar.png","hash":"fbf04a351853358578e6adbd5cd1744205cbfbb4","modified":1686028374097},{"_id":"public/img/bj.webp","hash":"a93feb37399ad9d8c2b88f80e0dafdcded8062f8","modified":1686028374097},{"_id":"public/img/wechat.jpg","hash":"7c31b3251068706cf7dd02d992a99a8ea1ffb91c","modified":1686028374097},{"_id":"public/dmyx/images/shouji.png","hash":"a3b9ad709e9398d66bc9352406831e1d5b1547cb","modified":1686028374097},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"a3b131a9a47ccc16f4dd8988fabb6d306548db2f","modified":1686028374097},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"e56ad6b82caf69066de545201014291fc961635e","modified":1686028374097},{"_id":"public/css/gengxing.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1686028374097},{"_id":"public/css/link.css","hash":"0fbb8034c33b6e3592a38f84e32a7f4ca6de570d","modified":1686028374097},{"_id":"public/css/liuyanban.css","hash":"ea7b2c41de33c33ce8cf68badbc3cc57d4d2c28f","modified":1686028374097},{"_id":"public/css/mycss.css","hash":"95af0a254b18287f09ed8297233a5d005da40778","modified":1686028374097},{"_id":"public/css/progress_bar.css","hash":"ce1a2c7b71129aa204ea9cf4115277a0b28f8a8d","modified":1686028374097},{"_id":"public/css/nav_menu.css","hash":"d2b20dc763c4240b4401907c1771e3e37a1ebe22","modified":1686028374097},{"_id":"public/css/mouse.css","hash":"9ba069efa357f82d208dbc88357bf278f99fc875","modified":1686028374097},{"_id":"public/css/notice.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1686028374097},{"_id":"public/css/xiazai.css","hash":"4b6068622b4788f1d4933bc2c4bd17b14ff61931","modified":1686028374097},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1686028374097},{"_id":"public/css/people.css","hash":"8f8a9272d512f871d2773031af1d7a271acabb0b","modified":1686028374097},{"_id":"public/example/try.html","hash":"3dc615ebae03a4f7c101f9158738b9afb35222c9","modified":1686028374097},{"_id":"public/js/countup.js","hash":"89388b8b14405b13257da96356312a5f37f94841","modified":1686028374097},{"_id":"public/js/categoryBar.js","hash":"19a3b570b471951d5ab67f1607d5f7f43ef380be","modified":1686028374097},{"_id":"public/js/copy.js","hash":"40965ead3aee64c38a0ef944f54fe6b6b184ee21","modified":1686028374097},{"_id":"public/js/dmyx.js","hash":"339ad47c0aa929ac3f9e8a59e7622c07a2d7e125","modified":1686028374097},{"_id":"public/js/index.js","hash":"fcde0a1ec6cd0a48c0a59611284ef6aa55fc87a8","modified":1686028374097},{"_id":"public/js/nav_menu.js","hash":"05b332a80a6d8e1f490159ea286930cc042c4f6e","modified":1686028374097},{"_id":"public/js/people.js","hash":"4bf541c0ae1394dae5e7a823202fc89b18afe73b","modified":1686028374097},{"_id":"public/js/ripples.js","hash":"a60e67666d8385d928f11f61236a5c57fd0fbc77","modified":1686028374097},{"_id":"public/js/sun_moon.js","hash":"6d811c3e017116f0b79d756c15d54aad0ea3f5df","modified":1686028374097},{"_id":"public/js/watchWorker.js","hash":"9ee3c98dc197c09e38b41b5ffca5970cd0e579e3","modified":1686028374097},{"_id":"public/js/hygl.js","hash":"0dab40071de2b58aac27d55428eaca257cea8087","modified":1686028374097},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1686028374097},{"_id":"public/js/twikookstx.js","hash":"1e21e562f0f8c3fbfacac60ac6c039be5c97a27a","modified":1686028374097},{"_id":"public/js/xh2.js","hash":"5e7707221da3e904bce94f7342b7fbf273802681","modified":1686028374097},{"_id":"public/js/xiazai.js","hash":"810c3317e57d7b951e686815b0bb557e6eeb2c7f","modified":1686028374097},{"_id":"public/music/music.html","hash":"861943a6551ac46743ee5118073643d0e8a5be1c","modified":1686028374097},{"_id":"public/example/try/index.html","hash":"f964ed0a6eab288ab7acc21cbe8bc62df93d8832","modified":1686028374097},{"_id":"public/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1686028374097},{"_id":"public/xz/index.html","hash":"2cbf295492bbf568bfbe8e303dad9e5982db77d6","modified":1686028374097},{"_id":"public/js/custom/swiper_init.js","hash":"b1565743838aff2214fd03d1cef7d571f1ebbfd1","modified":1686028374097},{"_id":"public/js/wz/siche.js","hash":"fbfae529794c9da8f9e9ad45d1f2796f0c2ba1ac","modified":1686028374097},{"_id":"public/js/wz/fishes.js","hash":"215e26df2611e30866ce3fe9a3fc1b2f9c8911c5","modified":1686028374097},{"_id":"public/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1686028374097},{"_id":"public/dmyx/css/love.css","hash":"55540f76540a1fedf82c234c26c12f9c25f470c2","modified":1686028374097},{"_id":"public/dmyx/css/try.css","hash":"777637f3feafc2b47785ecbb199dfde91b0b5810","modified":1686028374097},{"_id":"public/dmyx/css/bootstrap.min.css","hash":"cd3314fe8a9f15c40636ba25892e0c43970dedad","modified":1686028374097},{"_id":"public/js/snowflake.js","hash":"a5b020f3bbb9a2c06e8a8dd25cd99513d10476ba","modified":1686028374097},{"_id":"public/music/css/lights.css","hash":"aad43a26ce66e8ee59a3a95df4f4a44eca68a99b","modified":1686028374097},{"_id":"public/music/js/Config.js","hash":"b0a44ccfb452ae50b1042b1f18bab5bb9d1cfd47","modified":1686028374097},{"_id":"public/xz/js/jquery.params.js","hash":"9d51f091f6eb2264af0da5161924f7b7fd2d55fe","modified":1686028374097},{"_id":"public/xz/css/login.css","hash":"91eb8a2a8a5739644ff0d42f9c290d03e19214f5","modified":1686028374097},{"_id":"public/dmyx/js/one/one.min.js","hash":"1ebe889635a11a556aab592ca909833f7207d75f","modified":1686028374097},{"_id":"public/xz/js/app.js","hash":"f4692619f43e430885eeb3147b8461345f178d05","modified":1686028374097},{"_id":"public/example/try/code/1/bd/rono.html","hash":"99c0af48d2fb825312fe37858f3be2b1f5dc2fbd","modified":1686028374097},{"_id":"public/css/index.css","hash":"b6ea80e697f3137ec8b4780b84c82c4df50ec2e5","modified":1686028374097},{"_id":"public/css/glb.css","hash":"70465d17d3110d33d6a5c3c4ee199cefe7e8895e","modified":1686028374097},{"_id":"public/css/guanyu.css","hash":"3e292547dbf8f48892214cf961767faaa340682c","modified":1686028374097},{"_id":"public/js/main.js","hash":"60110cdc320450483b13c4a4961bd6c56ec3c436","modified":1686028374097},{"_id":"public/js/tw_cn.js","hash":"5c1391c9e96950833641f178b5f23c58422fb659","modified":1686028374097},{"_id":"public/js/shangshengqipao.js","hash":"80262c504da31df93cd57961ebb63321e382c22b","modified":1686028374097},{"_id":"public/js/xh1.js","hash":"4449ed117bb01a0f457a09a636548e5bcd65ac26","modified":1686028374097},{"_id":"public/dmyx/js/bootstrap.min.js","hash":"791aa054a026bddc0de92bad6cf7a1c6e73713d5","modified":1686028374097},{"_id":"public/xz/js/particles.js","hash":"6d41b2dfd94b9b8e8b96b95d1258f57efb11aada","modified":1686028374097},{"_id":"public/music/js/Three.js","hash":"2c2075cbdf186dfa0aaf47980c040a9a7baf1cb5","modified":1686028374097},{"_id":"public/dmyx/js/codemirror/lib/codemirror_all.min.css","hash":"b84586e6826ac0767d8a33f27ec4a0fc8b812a97","modified":1686028374097},{"_id":"public/music/js/Lights.js","hash":"fbc2a8f49131ddd37daeecd1aa7184ed7dd6f1dd","modified":1686028374097},{"_id":"public/dmyx/js/codemirror/addon/hint/jsAll.json","hash":"ebd7876e04631ecd74c31539b84683c92bc47f42","modified":1686028374097},{"_id":"public/dmyx/js/codemirror/lib/codemirror_all.min.js","hash":"e7c91175d5d88c39585cb5f0e091a74ac942509a","modified":1686028374097},{"_id":"public/img/JgNrST23690481619450556342.gif!cover","hash":"f78e9fa23d791b6fb1275c64b48656e01348d2f4","modified":1686028374097},{"_id":"public/assets/algolia/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":1686028374097},{"_id":"public/img/20115853_380680b35f.jpeg","hash":"0f2c52debbdb267620cd0a8898b390a8b44bd489","modified":1686028374097},{"_id":"public/music/images/experience/bengalSeq.png","hash":"2bd2e362f582b88287df6301b4da796694b2d729","modified":1686028374097},{"_id":"public/music/images/data/spectrumData.png","hash":"eef56debff5b90deb47c2fa18fe30fdffc0b3fe4","modified":1686028374097},{"_id":"public/img/bt.webp","hash":"1bf17ff87be2cdda060e115c02d92f413e6663a3","modified":1686028374097},{"_id":"public/xz/img/login_background.png","hash":"eddf28d185c0852dc37434ec4e73abeb81934b44","modified":1686028374097}],"Category":[{"name":"C","_id":"clijtrgc20004yswhbpx317qp"},{"name":"JS","_id":"clijtrgc6000cyswh2otnh0fr"},{"name":"前端","_id":"clijtrgcf0019yswh3wtuga5r"},{"name":"HTML","_id":"clijtrgcf001hyswh1itbfiyr"},{"name":"网络","_id":"clijtrgch001syswh4ngkavl1"},{"name":"加油","_id":"clijtrgch001wyswhdwum67o0"}],"Data":[{"_id":"indexwz","data":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}]},{"_id":"creativity","data":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}]},{"_id":"notice","data":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]}},{"_id":"reward","data":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}]},{"_id":"video","data":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}]},{"_id":"shuanbian","data":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}]},{"_id":"widget","data":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]}},{"_id":"link","data":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}],"Page":[{"title":"留言板","date":"2022-09-30T01:00:05.000Z","type":"messageboard","top_img":"https://s2.loli.net/2022/11/04/cJoWvz81e73ljp6.webp","_content":"\n<link href=\"/css/liuyanban.css\" rel=\"stylesheet\" type=\"text/css\"/>\n\n  <div id=\"computer\">\n    <div id=\"maincontent\"><br>\n      <div id=\"form-wrap\"><img src=\"https://drfs.ctcontents.com/file/14237530/741091857/688faf/img/xf/2.png\" id=\"beforeimg\"/>\n        <div id=\"envelope\">\n          <form>\n            <div class=\"formmain\">\n              <img class=\"headerimg\" src=\"https://drfs.ctcontents.com/file/14237530/741090658/42ef53/img/xf/3.png\"/>\n              <div style=\"padding: 5px 20px;\">\n                <center>\n                  <h3 calss=\"title3\">太华  伽罗</h3>\n                </center>\n                <center class=\"comments\">\n                  有什么想问的？<br>\n                  有什么想说的？<br>\n                  有什么想吐槽的？<br>\n                  哪怕是有什么想吃的，都可以告诉我哦~<br>\n                </center>\n                <div class=\"bottomcontent\">\n                <img class=\"bottomimg\" src=\"https://ae01.alicdn.com/kf/U0968ee80fd5c4f05a02bdda9709b041eE.png\"/>\n                </div>\n                <p class=\"bottomhr\">自动书记人偶竭诚为您服务！</p>\n              </div>\n            </div>\n          </form>\n        </div><img id=\"afterimg\" src=\"https://drfs.ctcontents.com/file/14237530/741090660/ce3212/img/xf/1.png\"/>\n      </div>\n    </div>\n  </div>\n","source":"messageboard/index.md","raw":"\n---\n\ntitle: 留言板\n\ndate: 2022-09-30 09:00:05\n\ntype: messageboard\n\ntop_img: https://s2.loli.net/2022/11/04/cJoWvz81e73ljp6.webp\n\n---\n\n<link href=\"/css/liuyanban.css\" rel=\"stylesheet\" type=\"text/css\"/>\n\n  <div id=\"computer\">\n    <div id=\"maincontent\"><br>\n      <div id=\"form-wrap\"><img src=\"https://drfs.ctcontents.com/file/14237530/741091857/688faf/img/xf/2.png\" id=\"beforeimg\"/>\n        <div id=\"envelope\">\n          <form>\n            <div class=\"formmain\">\n              <img class=\"headerimg\" src=\"https://drfs.ctcontents.com/file/14237530/741090658/42ef53/img/xf/3.png\"/>\n              <div style=\"padding: 5px 20px;\">\n                <center>\n                  <h3 calss=\"title3\">太华  伽罗</h3>\n                </center>\n                <center class=\"comments\">\n                  有什么想问的？<br>\n                  有什么想说的？<br>\n                  有什么想吐槽的？<br>\n                  哪怕是有什么想吃的，都可以告诉我哦~<br>\n                </center>\n                <div class=\"bottomcontent\">\n                <img class=\"bottomimg\" src=\"https://ae01.alicdn.com/kf/U0968ee80fd5c4f05a02bdda9709b041eE.png\"/>\n                </div>\n                <p class=\"bottomhr\">自动书记人偶竭诚为您服务！</p>\n              </div>\n            </div>\n          </form>\n        </div><img id=\"afterimg\" src=\"https://drfs.ctcontents.com/file/14237530/741090660/ce3212/img/xf/1.png\"/>\n      </div>\n    </div>\n  </div>\n","updated":"2023-06-03T19:30:43.167Z","path":"messageboard/index.html","comments":1,"layout":"page","_id":"clijtrgbv0000yswh0e5o38qp","content":"<link href=\"/css/liuyanban.css\" rel=\"stylesheet\" type=\"text/css\"/>\n\n  <div id=\"computer\">\n    <div id=\"maincontent\"><br>\n      <div id=\"form-wrap\"><img src=\"https://drfs.ctcontents.com/file/14237530/741091857/688faf/img/xf/2.png\" id=\"beforeimg\"/>\n        <div id=\"envelope\">\n          <form>\n            <div class=\"formmain\">\n              <img class=\"headerimg\" src=\"https://drfs.ctcontents.com/file/14237530/741090658/42ef53/img/xf/3.png\"/>\n              <div style=\"padding: 5px 20px;\">\n                <center>\n                  <h3 calss=\"title3\">太华  伽罗</h3>\n                </center>\n                <center class=\"comments\">\n                  有什么想问的？<br>\n                  有什么想说的？<br>\n                  有什么想吐槽的？<br>\n                  哪怕是有什么想吃的，都可以告诉我哦~<br>\n                </center>\n                <div class=\"bottomcontent\">\n                <img class=\"bottomimg\" src=\"https://ae01.alicdn.com/kf/U0968ee80fd5c4f05a02bdda9709b041eE.png\"/>\n                </div>\n                <p class=\"bottomhr\">自动书记人偶竭诚为您服务！</p>\n              </div>\n            </div>\n          </form>\n        </div><img id=\"afterimg\" src=\"https://drfs.ctcontents.com/file/14237530/741090660/ce3212/img/xf/1.png\"/>\n      </div>\n    </div>\n  </div>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/13.jpg","excerpt":"","more":"<link href=\"/css/liuyanban.css\" rel=\"stylesheet\" type=\"text/css\"/>\n\n  <div id=\"computer\">\n    <div id=\"maincontent\"><br>\n      <div id=\"form-wrap\"><img src=\"https://drfs.ctcontents.com/file/14237530/741091857/688faf/img/xf/2.png\" id=\"beforeimg\"/>\n        <div id=\"envelope\">\n          <form>\n            <div class=\"formmain\">\n              <img class=\"headerimg\" src=\"https://drfs.ctcontents.com/file/14237530/741090658/42ef53/img/xf/3.png\"/>\n              <div style=\"padding: 5px 20px;\">\n                <center>\n                  <h3 calss=\"title3\">太华  伽罗</h3>\n                </center>\n                <center class=\"comments\">\n                  有什么想问的？<br>\n                  有什么想说的？<br>\n                  有什么想吐槽的？<br>\n                  哪怕是有什么想吃的，都可以告诉我哦~<br>\n                </center>\n                <div class=\"bottomcontent\">\n                <img class=\"bottomimg\" src=\"https://ae01.alicdn.com/kf/U0968ee80fd5c4f05a02bdda9709b041eE.png\"/>\n                </div>\n                <p class=\"bottomhr\">自动书记人偶竭诚为您服务！</p>\n              </div>\n            </div>\n          </form>\n        </div><img id=\"afterimg\" src=\"https://drfs.ctcontents.com/file/14237530/741090660/ce3212/img/xf/1.png\"/>\n      </div>\n    </div>\n  </div>\n"},{"title":"关于","date":"2021-03-30T07:57:51.000Z","aside":false,"top_img":false,"background":"#f8f9fe","comments":1,"type":"about","_content":"\n\n<link rel=\"stylesheet\" href=\"/css/guanyu.css\"> ","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2021-03-30 15:57:51\naside: false\ntop_img: false\nbackground: \"#f8f9fe\"\ncomments: true\ntype: \"about\"\n---\n\n\n<link rel=\"stylesheet\" href=\"/css/guanyu.css\"> ","updated":"2023-06-03T19:30:43.166Z","path":"about/index.html","layout":"page","_id":"clijtrgbz0002yswh4tikb9be","content":"<link rel=\"stylesheet\" href=\"/css/guanyu.css\"> ","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/333.jpg","excerpt":"","more":"<link rel=\"stylesheet\" href=\"/css/guanyu.css\"> "},{"title":"分类","date":"2022-07-30T00:54:29.000Z","layout":"categories","type":"categories","top_img":"https://s2.loli.net/2022/11/04/opmhQGMbSktden5.jpg","comments":1,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-07-30 08:54:29\nlayout: \"categories\"\ntype: \"categories\"\ntop_img: https://s2.loli.net/2022/11/04/opmhQGMbSktden5.jpg\ncomments: true\n---\n","updated":"2023-06-03T19:30:43.166Z","path":"categories/index.html","_id":"clijtrgc30006yswh2l94agpe","content":"","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/13.jpg","excerpt":"","more":""},{"comments":1,"aside":false,"_content":"\n\n<style type=\"text/css\">#page{background:transparent;}</style> \n\n\n\n{% meting \"60198\" \"netease\" \"playlist\" \"autoplay\" \"mutex:false\" \"listfolded\" \"listmaxheight:340px\" \"preload:none\" \"theme:#ad7a86\"%}","source":"music/index.md","raw":"---\ncomments: true\naside: false\n---\n\n\n<style type=\"text/css\">#page{background:transparent;}</style> \n\n\n\n{% meting \"60198\" \"netease\" \"playlist\" \"autoplay\" \"mutex:false\" \"listfolded\" \"listmaxheight:340px\" \"preload:none\" \"theme:#ad7a86\"%}","date":"2023-06-03T19:30:43.168Z","updated":"2023-06-03T19:30:43.167Z","path":"music/index.html","title":"","layout":"page","_id":"clijtrgc40008yswhblerdagb","content":"<style type=\"text/css\">#page{background:transparent;}</style> \n\n\n\n\n    <div id=\"aplayer-LqZNxyrg\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"60198\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"false\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\" data-listfolded=\"true\"\n    ></div>","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/12.jpg","excerpt":"","more":"<style type=\"text/css\">#page{background:transparent;}</style> \n\n\n\n\n    <div id=\"aplayer-LqZNxyrg\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"60198\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"false\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\" data-listfolded=\"true\"\n    ></div>"},{"title":"友情链接","date":"2018-06-07T14:17:49.000Z","type":"link","top_img":"https://s2.loli.net/2022/11/04/GOKblJF1BMpWvYf.webp","aside":false,"_content":"\n***\n\n如果你想把自己的网页也新增到`我的博客`页面里\n\n\n>1. 博客名称：biubiu\n>2. 博客链接：https://why862555625.github.io/\n>3. logo地址：https://why862555625.github.io/img/favicon.webp\n>4. 博客介绍：千里之行，始于足下。\n\n邮箱：1400000222@qq.com\n\n~~~html\n    - name: biubiu\n      link: https://why862555625.github.io/\n      avatar: https://why862555625.github.io/img/favicon.webp\n      descr: 千里之行，始于足下。\n~~~\n\n\n<div class=\"addBtn\"><button onclick=\"leonus.linkCom()\"><i class=\"fa-solid fa-circle-plus\"></i>快速申请 (默认样式)</button> <button onclick=\"leonus.linkCom(&quot;bf&quot;)\"><i class=\"fa-solid fa-circle-plus\"></i>快速申请 (Butterfly)</button></div>\n\n<script src=\"/js/twikookstx.js\"></script>\n\n<style>\n.addBtn {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n}\n.addBtn button {\n    transtion: .2s;\n    display: flex;\n    margin: 5px auto;\n    color: var(--global-bg);\n    padding: 15px;\n    border-radius: 12px;\n    background: var(--search-result-title);\n    align-items: center;\n}\n\nbutton {\n    padding: 0;\n    outline: 0;\n    border: none;\n    background: 0 0;\n    cursor: pointer;\n    touch-action: manipulation;\n}\n.fa-solid, .fas {\n    font-family: \"Font Awesome 6 Free\";\n    font-weight: 900;\n}\n.addBtn i {\n    font-size: 1.3rem;\n    margin-right: 10px;\n}\n.addBtn button:hover {\n    background: #4b7aff;\n    color: #fff;\n}\n</style>\n\n","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2018-06-07 22:17:49\ntype: \"link\"\ntop_img: https://s2.loli.net/2022/11/04/GOKblJF1BMpWvYf.webp\naside: false\n---\n\n***\n\n如果你想把自己的网页也新增到`我的博客`页面里\n\n\n>1. 博客名称：biubiu\n>2. 博客链接：https://why862555625.github.io/\n>3. logo地址：https://why862555625.github.io/img/favicon.webp\n>4. 博客介绍：千里之行，始于足下。\n\n邮箱：1400000222@qq.com\n\n~~~html\n    - name: biubiu\n      link: https://why862555625.github.io/\n      avatar: https://why862555625.github.io/img/favicon.webp\n      descr: 千里之行，始于足下。\n~~~\n\n\n<div class=\"addBtn\"><button onclick=\"leonus.linkCom()\"><i class=\"fa-solid fa-circle-plus\"></i>快速申请 (默认样式)</button> <button onclick=\"leonus.linkCom(&quot;bf&quot;)\"><i class=\"fa-solid fa-circle-plus\"></i>快速申请 (Butterfly)</button></div>\n\n<script src=\"/js/twikookstx.js\"></script>\n\n<style>\n.addBtn {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n}\n.addBtn button {\n    transtion: .2s;\n    display: flex;\n    margin: 5px auto;\n    color: var(--global-bg);\n    padding: 15px;\n    border-radius: 12px;\n    background: var(--search-result-title);\n    align-items: center;\n}\n\nbutton {\n    padding: 0;\n    outline: 0;\n    border: none;\n    background: 0 0;\n    cursor: pointer;\n    touch-action: manipulation;\n}\n.fa-solid, .fas {\n    font-family: \"Font Awesome 6 Free\";\n    font-weight: 900;\n}\n.addBtn i {\n    font-size: 1.3rem;\n    margin-right: 10px;\n}\n.addBtn button:hover {\n    background: #4b7aff;\n    color: #fff;\n}\n</style>\n\n","updated":"2023-06-03T19:30:43.167Z","path":"link/index.html","comments":1,"layout":"page","_id":"clijtrgc5000ayswhbenlhplx","content":"<hr>\n<p>如果你想把自己的网页也新增到<code>我的博客</code>页面里</p>\n<blockquote>\n<ol>\n<li>博客名称：biubiu</li>\n<li>博客链接：<a href=\"https://why862555625.github.io/\">https://why862555625.github.io/</a></li>\n<li>logo地址：<a href=\"https://why862555625.github.io/img/favicon.webp\">https://why862555625.github.io/img/favicon.webp</a></li>\n<li>博客介绍：千里之行，始于足下。</li>\n</ol>\n</blockquote>\n<p>邮箱：<a href=\"mailto:&#x31;&#x34;&#x30;&#x30;&#48;&#x30;&#48;&#x32;&#x32;&#50;&#64;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;\">&#x31;&#x34;&#x30;&#x30;&#48;&#x30;&#48;&#x32;&#x32;&#50;&#64;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- name: biubiu</span><br><span class=\"line\">  link: https://why862555625.github.io/</span><br><span class=\"line\">  avatar: https://why862555625.github.io/img/favicon.webp</span><br><span class=\"line\">  descr: 千里之行，始于足下。</span><br></pre></td></tr></table></figure>\n\n\n<div class=\"addBtn\"><button onclick=\"leonus.linkCom()\"><i class=\"fa-solid fa-circle-plus\"></i>快速申请 (默认样式)</button> <button onclick=\"leonus.linkCom(&quot;bf&quot;)\"><i class=\"fa-solid fa-circle-plus\"></i>快速申请 (Butterfly)</button></div>\n\n<script src=\"/js/twikookstx.js\"></script>\n\n<style>\n.addBtn {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n}\n.addBtn button {\n    transtion: .2s;\n    display: flex;\n    margin: 5px auto;\n    color: var(--global-bg);\n    padding: 15px;\n    border-radius: 12px;\n    background: var(--search-result-title);\n    align-items: center;\n}\n\nbutton {\n    padding: 0;\n    outline: 0;\n    border: none;\n    background: 0 0;\n    cursor: pointer;\n    touch-action: manipulation;\n}\n.fa-solid, .fas {\n    font-family: \"Font Awesome 6 Free\";\n    font-weight: 900;\n}\n.addBtn i {\n    font-size: 1.3rem;\n    margin-right: 10px;\n}\n.addBtn button:hover {\n    background: #4b7aff;\n    color: #fff;\n}\n</style>\n\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/112.jpg","excerpt":"","more":"<hr>\n<p>如果你想把自己的网页也新增到<code>我的博客</code>页面里</p>\n<blockquote>\n<ol>\n<li>博客名称：biubiu</li>\n<li>博客链接：<a href=\"https://why862555625.github.io/\">https://why862555625.github.io/</a></li>\n<li>logo地址：<a href=\"https://why862555625.github.io/img/favicon.webp\">https://why862555625.github.io/img/favicon.webp</a></li>\n<li>博客介绍：千里之行，始于足下。</li>\n</ol>\n</blockquote>\n<p>邮箱：<a href=\"mailto:&#x31;&#x34;&#x30;&#x30;&#48;&#x30;&#48;&#x32;&#x32;&#50;&#64;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;\">&#x31;&#x34;&#x30;&#x30;&#48;&#x30;&#48;&#x32;&#x32;&#50;&#64;&#x71;&#113;&#46;&#x63;&#x6f;&#x6d;</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- name: biubiu</span><br><span class=\"line\">  link: https://why862555625.github.io/</span><br><span class=\"line\">  avatar: https://why862555625.github.io/img/favicon.webp</span><br><span class=\"line\">  descr: 千里之行，始于足下。</span><br></pre></td></tr></table></figure>\n\n\n<div class=\"addBtn\"><button onclick=\"leonus.linkCom()\"><i class=\"fa-solid fa-circle-plus\"></i>快速申请 (默认样式)</button> <button onclick=\"leonus.linkCom(&quot;bf&quot;)\"><i class=\"fa-solid fa-circle-plus\"></i>快速申请 (Butterfly)</button></div>\n\n<script src=\"/js/twikookstx.js\"></script>\n\n<style>\n.addBtn {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n}\n.addBtn button {\n    transtion: .2s;\n    display: flex;\n    margin: 5px auto;\n    color: var(--global-bg);\n    padding: 15px;\n    border-radius: 12px;\n    background: var(--search-result-title);\n    align-items: center;\n}\n\nbutton {\n    padding: 0;\n    outline: 0;\n    border: none;\n    background: 0 0;\n    cursor: pointer;\n    touch-action: manipulation;\n}\n.fa-solid, .fas {\n    font-family: \"Font Awesome 6 Free\";\n    font-weight: 900;\n}\n.addBtn i {\n    font-size: 1.3rem;\n    margin-right: 10px;\n}\n.addBtn button:hover {\n    background: #4b7aff;\n    color: #fff;\n}\n</style>\n\n"},{"_content":"/* eslint-disable no-undef */\ndocument.addEventListener('DOMContentLoaded', function () {\n  const translate = GLOBAL_CONFIG.translate\n  const snackbarData = GLOBAL_CONFIG.Snackbar\n  const defaultEncoding = translate.defaultEncoding // 網站默認語言，1: 繁體中文, 2: 簡體中文\n  const translateDelay = translate.translateDelay // 延遲時間,若不在前, 要設定延遲翻譯時間, 如100表示100ms,默認為0\n  const msgToTraditionalChinese = translate.msgToTraditionalChinese // 此處可以更改為你想要顯示的文字\n  const msgToSimplifiedChinese = translate.msgToSimplifiedChinese // 同上，但兩處均不建議更改\n  let currentEncoding = defaultEncoding\n  const targetEncodingCookie = 'translate-chn-cht'\n  let targetEncoding =\n  saveToLocal.get(targetEncodingCookie) === undefined\n    ? defaultEncoding\n    : Number(saveToLocal.get('translate-chn-cht'))\n  let translateButtonObject\n  const isSnackbar = GLOBAL_CONFIG.Snackbar !== undefined\n\n  function translateText (txt) {\n    if (txt === '' || txt == null) return ''\n    if (currentEncoding === 1 && targetEncoding === 2) return Simplized(txt)\n    else if (currentEncoding === 2 && targetEncoding === 1) { return Traditionalized(txt) } else return txt\n  }\n  function translateBody (fobj) {\n    let objs\n    if (typeof fobj === 'object') objs = fobj.childNodes\n    else objs = document.body.childNodes\n    for (let i = 0; i < objs.length; i++) {\n      const obj = objs.item(i)\n      if (\n        '||BR|HR|'.indexOf('|' + obj.tagName + '|') > 0 ||\n      obj === translateButtonObject\n      ) { continue }\n      if (obj.title !== '' && obj.title != null) { obj.title = translateText(obj.title) }\n      if (obj.alt !== '' && obj.alt != null) obj.alt = translateText(obj.alt)\n      if (obj.placeholder !== '' && obj.placeholder != null) obj.placeholder = translateText(obj.placeholder)\n      if (\n        obj.tagName === 'INPUT' &&\n      obj.value !== '' &&\n      obj.type !== 'text' &&\n      obj.type !== 'hidden'\n      ) { obj.value = translateText(obj.value) }\n      if (obj.nodeType === 3) obj.data = translateText(obj.data)\n      else translateBody(obj)\n    }\n  }\n  function translatePage () {\n    if (targetEncoding === 1) {\n      currentEncoding = 1\n      targetEncoding = 2\n      translateButtonObject.innerHTML = msgToTraditionalChinese\n      saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n      translateBody()\n      if (isSnackbar) btf.snackbarShow(snackbarData.cht_to_chs)\n    } else if (targetEncoding === 2) {\n      currentEncoding = 2\n      targetEncoding = 1\n      translateButtonObject.innerHTML = msgToSimplifiedChinese\n      saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n      translateBody()\n      if (isSnackbar) btf.snackbarShow(snackbarData.chs_to_cht)\n    }\n  }\n  function JTPYStr () {\n    return '万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾'\n  }\n  function FTPYStr () {\n    return '萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽'\n  }\n  window.Traditionalized = (cc) => {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && ss.indexOf(cc.charAt(i)) !== -1) { str += tt.charAt(ss.indexOf(cc.charAt(i))) } else str += cc.charAt(i)\n    }\n    return str\n  }\n  function Simplized (cc) {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && tt.indexOf(cc.charAt(i)) !== -1) { str += ss.charAt(tt.indexOf(cc.charAt(i))) } else str += cc.charAt(i)\n    }\n    return str\n  }\n  function translateInitialization () {\n    translateButtonObject = document.getElementById('translateLink')\n    if (translateButtonObject) {\n      if (currentEncoding !== targetEncoding) {\n        setTimeout(translateBody, translateDelay)\n        if (targetEncoding === 1) translateButtonObject.innerHTML = msgToSimplifiedChinese\n        else translateButtonObject.innerHTML = msgToTraditionalChinese\n      }\n      translateButtonObject.addEventListener('click', translatePage, false)\n    }\n  }\n  translateInitialization()\n  document.addEventListener('pjax:complete', translateInitialization)\n})","source":"selfjs/tw_cn.js","raw":"/* eslint-disable no-undef */\ndocument.addEventListener('DOMContentLoaded', function () {\n  const translate = GLOBAL_CONFIG.translate\n  const snackbarData = GLOBAL_CONFIG.Snackbar\n  const defaultEncoding = translate.defaultEncoding // 網站默認語言，1: 繁體中文, 2: 簡體中文\n  const translateDelay = translate.translateDelay // 延遲時間,若不在前, 要設定延遲翻譯時間, 如100表示100ms,默認為0\n  const msgToTraditionalChinese = translate.msgToTraditionalChinese // 此處可以更改為你想要顯示的文字\n  const msgToSimplifiedChinese = translate.msgToSimplifiedChinese // 同上，但兩處均不建議更改\n  let currentEncoding = defaultEncoding\n  const targetEncodingCookie = 'translate-chn-cht'\n  let targetEncoding =\n  saveToLocal.get(targetEncodingCookie) === undefined\n    ? defaultEncoding\n    : Number(saveToLocal.get('translate-chn-cht'))\n  let translateButtonObject\n  const isSnackbar = GLOBAL_CONFIG.Snackbar !== undefined\n\n  function translateText (txt) {\n    if (txt === '' || txt == null) return ''\n    if (currentEncoding === 1 && targetEncoding === 2) return Simplized(txt)\n    else if (currentEncoding === 2 && targetEncoding === 1) { return Traditionalized(txt) } else return txt\n  }\n  function translateBody (fobj) {\n    let objs\n    if (typeof fobj === 'object') objs = fobj.childNodes\n    else objs = document.body.childNodes\n    for (let i = 0; i < objs.length; i++) {\n      const obj = objs.item(i)\n      if (\n        '||BR|HR|'.indexOf('|' + obj.tagName + '|') > 0 ||\n      obj === translateButtonObject\n      ) { continue }\n      if (obj.title !== '' && obj.title != null) { obj.title = translateText(obj.title) }\n      if (obj.alt !== '' && obj.alt != null) obj.alt = translateText(obj.alt)\n      if (obj.placeholder !== '' && obj.placeholder != null) obj.placeholder = translateText(obj.placeholder)\n      if (\n        obj.tagName === 'INPUT' &&\n      obj.value !== '' &&\n      obj.type !== 'text' &&\n      obj.type !== 'hidden'\n      ) { obj.value = translateText(obj.value) }\n      if (obj.nodeType === 3) obj.data = translateText(obj.data)\n      else translateBody(obj)\n    }\n  }\n  function translatePage () {\n    if (targetEncoding === 1) {\n      currentEncoding = 1\n      targetEncoding = 2\n      translateButtonObject.innerHTML = msgToTraditionalChinese\n      saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n      translateBody()\n      if (isSnackbar) btf.snackbarShow(snackbarData.cht_to_chs)\n    } else if (targetEncoding === 2) {\n      currentEncoding = 2\n      targetEncoding = 1\n      translateButtonObject.innerHTML = msgToSimplifiedChinese\n      saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n      translateBody()\n      if (isSnackbar) btf.snackbarShow(snackbarData.chs_to_cht)\n    }\n  }\n  function JTPYStr () {\n    return '万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾'\n  }\n  function FTPYStr () {\n    return '萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽'\n  }\n  window.Traditionalized = (cc) => {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && ss.indexOf(cc.charAt(i)) !== -1) { str += tt.charAt(ss.indexOf(cc.charAt(i))) } else str += cc.charAt(i)\n    }\n    return str\n  }\n  function Simplized (cc) {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && tt.indexOf(cc.charAt(i)) !== -1) { str += ss.charAt(tt.indexOf(cc.charAt(i))) } else str += cc.charAt(i)\n    }\n    return str\n  }\n  function translateInitialization () {\n    translateButtonObject = document.getElementById('translateLink')\n    if (translateButtonObject) {\n      if (currentEncoding !== targetEncoding) {\n        setTimeout(translateBody, translateDelay)\n        if (targetEncoding === 1) translateButtonObject.innerHTML = msgToSimplifiedChinese\n        else translateButtonObject.innerHTML = msgToTraditionalChinese\n      }\n      translateButtonObject.addEventListener('click', translatePage, false)\n    }\n  }\n  translateInitialization()\n  document.addEventListener('pjax:complete', translateInitialization)\n})","date":"2023-06-03T19:30:43.169Z","updated":"2023-06-03T19:30:43.169Z","path":"selfjs/tw_cn.js","layout":"false","title":"","comments":1,"_id":"clijtrgc7000eyswhbw4b1vvb","content":"/* eslint-disable no-undef */\ndocument.addEventListener('DOMContentLoaded', function () {\n  const translate = GLOBAL_CONFIG.translate\n  const snackbarData = GLOBAL_CONFIG.Snackbar\n  const defaultEncoding = translate.defaultEncoding // 網站默認語言，1: 繁體中文, 2: 簡體中文\n  const translateDelay = translate.translateDelay // 延遲時間,若不在前, 要設定延遲翻譯時間, 如100表示100ms,默認為0\n  const msgToTraditionalChinese = translate.msgToTraditionalChinese // 此處可以更改為你想要顯示的文字\n  const msgToSimplifiedChinese = translate.msgToSimplifiedChinese // 同上，但兩處均不建議更改\n  let currentEncoding = defaultEncoding\n  const targetEncodingCookie = 'translate-chn-cht'\n  let targetEncoding =\n  saveToLocal.get(targetEncodingCookie) === undefined\n    ? defaultEncoding\n    : Number(saveToLocal.get('translate-chn-cht'))\n  let translateButtonObject\n  const isSnackbar = GLOBAL_CONFIG.Snackbar !== undefined\n\n  function translateText (txt) {\n    if (txt === '' || txt == null) return ''\n    if (currentEncoding === 1 && targetEncoding === 2) return Simplized(txt)\n    else if (currentEncoding === 2 && targetEncoding === 1) { return Traditionalized(txt) } else return txt\n  }\n  function translateBody (fobj) {\n    let objs\n    if (typeof fobj === 'object') objs = fobj.childNodes\n    else objs = document.body.childNodes\n    for (let i = 0; i < objs.length; i++) {\n      const obj = objs.item(i)\n      if (\n        '||BR|HR|'.indexOf('|' + obj.tagName + '|') > 0 ||\n      obj === translateButtonObject\n      ) { continue }\n      if (obj.title !== '' && obj.title != null) { obj.title = translateText(obj.title) }\n      if (obj.alt !== '' && obj.alt != null) obj.alt = translateText(obj.alt)\n      if (obj.placeholder !== '' && obj.placeholder != null) obj.placeholder = translateText(obj.placeholder)\n      if (\n        obj.tagName === 'INPUT' &&\n      obj.value !== '' &&\n      obj.type !== 'text' &&\n      obj.type !== 'hidden'\n      ) { obj.value = translateText(obj.value) }\n      if (obj.nodeType === 3) obj.data = translateText(obj.data)\n      else translateBody(obj)\n    }\n  }\n  function translatePage () {\n    if (targetEncoding === 1) {\n      currentEncoding = 1\n      targetEncoding = 2\n      translateButtonObject.innerHTML = msgToTraditionalChinese\n      saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n      translateBody()\n      if (isSnackbar) btf.snackbarShow(snackbarData.cht_to_chs)\n    } else if (targetEncoding === 2) {\n      currentEncoding = 2\n      targetEncoding = 1\n      translateButtonObject.innerHTML = msgToSimplifiedChinese\n      saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n      translateBody()\n      if (isSnackbar) btf.snackbarShow(snackbarData.chs_to_cht)\n    }\n  }\n  function JTPYStr () {\n    return '万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾'\n  }\n  function FTPYStr () {\n    return '萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽'\n  }\n  window.Traditionalized = (cc) => {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && ss.indexOf(cc.charAt(i)) !== -1) { str += tt.charAt(ss.indexOf(cc.charAt(i))) } else str += cc.charAt(i)\n    }\n    return str\n  }\n  function Simplized (cc) {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && tt.indexOf(cc.charAt(i)) !== -1) { str += ss.charAt(tt.indexOf(cc.charAt(i))) } else str += cc.charAt(i)\n    }\n    return str\n  }\n  function translateInitialization () {\n    translateButtonObject = document.getElementById('translateLink')\n    if (translateButtonObject) {\n      if (currentEncoding !== targetEncoding) {\n        setTimeout(translateBody, translateDelay)\n        if (targetEncoding === 1) translateButtonObject.innerHTML = msgToSimplifiedChinese\n        else translateButtonObject.innerHTML = msgToTraditionalChinese\n      }\n      translateButtonObject.addEventListener('click', translatePage, false)\n    }\n  }\n  translateInitialization()\n  document.addEventListener('pjax:complete', translateInitialization)\n})","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/12.jpg","excerpt":"","more":"/* eslint-disable no-undef */\ndocument.addEventListener('DOMContentLoaded', function () {\n  const translate = GLOBAL_CONFIG.translate\n  const snackbarData = GLOBAL_CONFIG.Snackbar\n  const defaultEncoding = translate.defaultEncoding // 網站默認語言，1: 繁體中文, 2: 簡體中文\n  const translateDelay = translate.translateDelay // 延遲時間,若不在前, 要設定延遲翻譯時間, 如100表示100ms,默認為0\n  const msgToTraditionalChinese = translate.msgToTraditionalChinese // 此處可以更改為你想要顯示的文字\n  const msgToSimplifiedChinese = translate.msgToSimplifiedChinese // 同上，但兩處均不建議更改\n  let currentEncoding = defaultEncoding\n  const targetEncodingCookie = 'translate-chn-cht'\n  let targetEncoding =\n  saveToLocal.get(targetEncodingCookie) === undefined\n    ? defaultEncoding\n    : Number(saveToLocal.get('translate-chn-cht'))\n  let translateButtonObject\n  const isSnackbar = GLOBAL_CONFIG.Snackbar !== undefined\n\n  function translateText (txt) {\n    if (txt === '' || txt == null) return ''\n    if (currentEncoding === 1 && targetEncoding === 2) return Simplized(txt)\n    else if (currentEncoding === 2 && targetEncoding === 1) { return Traditionalized(txt) } else return txt\n  }\n  function translateBody (fobj) {\n    let objs\n    if (typeof fobj === 'object') objs = fobj.childNodes\n    else objs = document.body.childNodes\n    for (let i = 0; i < objs.length; i++) {\n      const obj = objs.item(i)\n      if (\n        '||BR|HR|'.indexOf('|' + obj.tagName + '|') > 0 ||\n      obj === translateButtonObject\n      ) { continue }\n      if (obj.title !== '' && obj.title != null) { obj.title = translateText(obj.title) }\n      if (obj.alt !== '' && obj.alt != null) obj.alt = translateText(obj.alt)\n      if (obj.placeholder !== '' && obj.placeholder != null) obj.placeholder = translateText(obj.placeholder)\n      if (\n        obj.tagName === 'INPUT' &&\n      obj.value !== '' &&\n      obj.type !== 'text' &&\n      obj.type !== 'hidden'\n      ) { obj.value = translateText(obj.value) }\n      if (obj.nodeType === 3) obj.data = translateText(obj.data)\n      else translateBody(obj)\n    }\n  }\n  function translatePage () {\n    if (targetEncoding === 1) {\n      currentEncoding = 1\n      targetEncoding = 2\n      translateButtonObject.innerHTML = msgToTraditionalChinese\n      saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n      translateBody()\n      if (isSnackbar) btf.snackbarShow(snackbarData.cht_to_chs)\n    } else if (targetEncoding === 2) {\n      currentEncoding = 2\n      targetEncoding = 1\n      translateButtonObject.innerHTML = msgToSimplifiedChinese\n      saveToLocal.set(targetEncodingCookie, targetEncoding, 2)\n      translateBody()\n      if (isSnackbar) btf.snackbarShow(snackbarData.chs_to_cht)\n    }\n  }\n  function JTPYStr () {\n    return '万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾'\n  }\n  function FTPYStr () {\n    return '萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽'\n  }\n  window.Traditionalized = (cc) => {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && ss.indexOf(cc.charAt(i)) !== -1) { str += tt.charAt(ss.indexOf(cc.charAt(i))) } else str += cc.charAt(i)\n    }\n    return str\n  }\n  function Simplized (cc) {\n    let str = ''\n    const ss = JTPYStr()\n    const tt = FTPYStr()\n    for (let i = 0; i < cc.length; i++) {\n      if (cc.charCodeAt(i) > 10000 && tt.indexOf(cc.charAt(i)) !== -1) { str += ss.charAt(tt.indexOf(cc.charAt(i))) } else str += cc.charAt(i)\n    }\n    return str\n  }\n  function translateInitialization () {\n    translateButtonObject = document.getElementById('translateLink')\n    if (translateButtonObject) {\n      if (currentEncoding !== targetEncoding) {\n        setTimeout(translateBody, translateDelay)\n        if (targetEncoding === 1) translateButtonObject.innerHTML = msgToSimplifiedChinese\n        else translateButtonObject.innerHTML = msgToTraditionalChinese\n      }\n      translateButtonObject.addEventListener('click', translatePage, false)\n    }\n  }\n  translateInitialization()\n  document.addEventListener('pjax:complete', translateInitialization)\n})"},{"title":"This is me","date":"2022-07-30T01:04:02.000Z","type":"myself","_content":"","source":"myself/index.md","raw":"---\ntitle: This is me\ndate: 2022-07-30 09:04:02\ntype: myself\n---\n","updated":"2023-06-03T19:30:43.168Z","path":"myself/index.html","comments":1,"layout":"page","_id":"clijtrgc8000gyswh0emvebvl","content":"","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/77.jpg","excerpt":"","more":""},{"_content":"window.addEventListener('load', () => {\n  let loadFlag = false\n  const openSearch = () => {\n    const bodyStyle = document.body.style\n    bodyStyle.width = '100%'\n    bodyStyle.overflow = 'hidden'\n    btf.animateIn(document.getElementById('search-mask'), 'to_show 0.5s')\n    btf.animateIn(document.querySelector('#local-search .search-dialog'), 'titleScale 0.5s')\n    setTimeout(() => { document.querySelector('#local-search-input input').focus() }, 100)\n    if (!loadFlag) {\n      search(GLOBAL_CONFIG.localSearch.path)\n      loadFlag = true\n    }\n    // shortcut: ESC\n    document.addEventListener('keydown', function f (event) {\n      if (event.code === 'Escape') {\n        closeSearch()\n        document.removeEventListener('keydown', f)\n      }\n    })\n  }\n\n  const closeSearch = () => {\n    const bodyStyle = document.body.style\n    bodyStyle.width = ''\n    bodyStyle.overflow = ''\n    btf.animateOut(document.querySelector('#local-search .search-dialog'), 'search_close .5s')\n    btf.animateOut(document.getElementById('search-mask'), 'to_hide 0.5s')\n  }\n\n  // click function\n  const searchClickFn = () => {\n    document.querySelector('#search-button > .search').addEventListener('click', openSearch)\n    document.getElementById('search-mask').addEventListener('click', closeSearch)\n    document.querySelector('#local-search .search-close-button').addEventListener('click', closeSearch)\n  }\n\n  searchClickFn()\n\n  // pjax\n  window.addEventListener('pjax:complete', function () {\n    getComputedStyle(document.querySelector('#local-search .search-dialog')).display === 'block' && closeSearch()\n    searchClickFn()\n  })\n\n  async function search (path) {\n    let datas = []\n    const typeF = path.split('.')[1]\n    const response = await fetch(GLOBAL_CONFIG.root + path)\n    if (typeF === 'json') {\n      datas = await response.json()\n    } else if (typeF === 'xml') {\n      const res = await response.text()\n      const t = await new window.DOMParser().parseFromString(res, 'text/xml')\n      const a = await t\n      datas = [...a.querySelectorAll('entry')].map(function (item) {\n        return {\n          title: item.querySelector('title').textContent,\n          content: item.querySelector('content').textContent,\n          url: item.querySelector('url').textContent\n        }\n      })\n    }\n    if (response.ok) {\n      const $loadDataItem = document.getElementById('loading-database')\n      $loadDataItem.nextElementSibling.style.display = 'block'\n      $loadDataItem.remove()\n    }\n\n    const $input = document.querySelector('#local-search-input input')\n    const $resultContent = document.getElementById('local-search-results')\n    const $loadingStatus = document.getElementById('loading-status')\n    $input.addEventListener('input', function () {\n      const keywords = Traditionalized(this.value).trim().toLowerCase().split(/[\\s]+/)\n      if (keywords[0] !== '') $loadingStatus.innerHTML = '<i class=\"fas fa-spinner fa-pulse\"></i>'\n\n      $resultContent.innerHTML = ''\n      let str = '<div class=\"search-result-list\">'\n      if (this.value.trim().length <= 0) return\n      let count = 0\n      // perform local searching\n      datas.forEach(function (data) {\n        let isMatch = true\n        if (!data.title || data.title.trim() === '') {\n          data.title = ''\n        }\n        let dataTitle = data.title.trim().toLowerCase()\n        const dataContent = data.content ? data.content.trim().replace(/<[^>]+>/g, '').toLowerCase() : ''\n        const dataUrl = data.url.startsWith('/') ? data.url : GLOBAL_CONFIG.root + data.url\n        let indexTitle = -1\n        let indexContent = -1\n        let firstOccur = -1\n        // only match artiles with not empty titles and contents\n        if (dataTitle !== '' || dataContent !== '') {\n          keywords.forEach(function (keyword, i) {\n            indexTitle = dataTitle.indexOf(keyword)\n            indexContent = dataContent.indexOf(keyword)\n            if (indexTitle < 0 && indexContent < 0) {\n              isMatch = false\n            } else {\n              if (indexContent < 0) {\n                indexContent = 0\n              }\n              if (i === 0) {\n                firstOccur = indexContent\n              }\n            }\n          })\n        } else {\n          isMatch = false\n        }\n\n        // show search results\n        if (isMatch) {\n          const content = data.content.trim().replace(/<[^>]+>/g, '')\n          if (firstOccur >= 0) {\n            // cut out 130 characters\n            // let start = firstOccur - 30 < 0 ? 0 : firstOccur - 30\n            // let end = firstOccur + 50 > content.length ? content.length : firstOccur + 50\n            let start = firstOccur - 30\n            let end = firstOccur + 100\n\n            if (start < 0) {\n              start = 0\n            }\n\n            if (start === 0) {\n              end = 100\n            }\n\n            if (end > content.length) {\n              end = content.length\n            }\n\n            let matchContent = content.substring(start, end)\n\n            // highlight all keywords\n            keywords.forEach(function (keyword) {\n              const regS = new RegExp(keyword, 'gi')\n              matchContent = matchContent.replace(regS, '<span class=\"search-keyword\">' + keyword + '</span>')\n              dataTitle = dataTitle.replace(regS, '<span class=\"search-keyword\">' + keyword + '</span>')\n            })\n\n            str += '<div class=\"local-search__hit-item\"><a href=\"' + dataUrl + '\" class=\"search-result-title\">' + dataTitle + '</a>'\n            count += 1\n\n            if (dataContent !== '') {\n              str += '<p class=\"search-result\">' + matchContent + '...</p>'\n            }\n          }\n          str += '</div>'\n        }\n      })\n      if (count === 0) {\n        str += '<div id=\"local-search__hits-empty\">' + GLOBAL_CONFIG.localSearch.languages.hits_empty.replace(/\\$\\{query}/, this.value.trim()) +\n          '</div>'\n      }\n      str += '</div>'\n      $resultContent.innerHTML = str\n      if (keywords[0] !== '') $loadingStatus.innerHTML = ''\n      window.pjax && window.pjax.refresh($resultContent)\n    })\n  }\n})","source":"selfjs/localsearch.js","raw":"window.addEventListener('load', () => {\n  let loadFlag = false\n  const openSearch = () => {\n    const bodyStyle = document.body.style\n    bodyStyle.width = '100%'\n    bodyStyle.overflow = 'hidden'\n    btf.animateIn(document.getElementById('search-mask'), 'to_show 0.5s')\n    btf.animateIn(document.querySelector('#local-search .search-dialog'), 'titleScale 0.5s')\n    setTimeout(() => { document.querySelector('#local-search-input input').focus() }, 100)\n    if (!loadFlag) {\n      search(GLOBAL_CONFIG.localSearch.path)\n      loadFlag = true\n    }\n    // shortcut: ESC\n    document.addEventListener('keydown', function f (event) {\n      if (event.code === 'Escape') {\n        closeSearch()\n        document.removeEventListener('keydown', f)\n      }\n    })\n  }\n\n  const closeSearch = () => {\n    const bodyStyle = document.body.style\n    bodyStyle.width = ''\n    bodyStyle.overflow = ''\n    btf.animateOut(document.querySelector('#local-search .search-dialog'), 'search_close .5s')\n    btf.animateOut(document.getElementById('search-mask'), 'to_hide 0.5s')\n  }\n\n  // click function\n  const searchClickFn = () => {\n    document.querySelector('#search-button > .search').addEventListener('click', openSearch)\n    document.getElementById('search-mask').addEventListener('click', closeSearch)\n    document.querySelector('#local-search .search-close-button').addEventListener('click', closeSearch)\n  }\n\n  searchClickFn()\n\n  // pjax\n  window.addEventListener('pjax:complete', function () {\n    getComputedStyle(document.querySelector('#local-search .search-dialog')).display === 'block' && closeSearch()\n    searchClickFn()\n  })\n\n  async function search (path) {\n    let datas = []\n    const typeF = path.split('.')[1]\n    const response = await fetch(GLOBAL_CONFIG.root + path)\n    if (typeF === 'json') {\n      datas = await response.json()\n    } else if (typeF === 'xml') {\n      const res = await response.text()\n      const t = await new window.DOMParser().parseFromString(res, 'text/xml')\n      const a = await t\n      datas = [...a.querySelectorAll('entry')].map(function (item) {\n        return {\n          title: item.querySelector('title').textContent,\n          content: item.querySelector('content').textContent,\n          url: item.querySelector('url').textContent\n        }\n      })\n    }\n    if (response.ok) {\n      const $loadDataItem = document.getElementById('loading-database')\n      $loadDataItem.nextElementSibling.style.display = 'block'\n      $loadDataItem.remove()\n    }\n\n    const $input = document.querySelector('#local-search-input input')\n    const $resultContent = document.getElementById('local-search-results')\n    const $loadingStatus = document.getElementById('loading-status')\n    $input.addEventListener('input', function () {\n      const keywords = Traditionalized(this.value).trim().toLowerCase().split(/[\\s]+/)\n      if (keywords[0] !== '') $loadingStatus.innerHTML = '<i class=\"fas fa-spinner fa-pulse\"></i>'\n\n      $resultContent.innerHTML = ''\n      let str = '<div class=\"search-result-list\">'\n      if (this.value.trim().length <= 0) return\n      let count = 0\n      // perform local searching\n      datas.forEach(function (data) {\n        let isMatch = true\n        if (!data.title || data.title.trim() === '') {\n          data.title = ''\n        }\n        let dataTitle = data.title.trim().toLowerCase()\n        const dataContent = data.content ? data.content.trim().replace(/<[^>]+>/g, '').toLowerCase() : ''\n        const dataUrl = data.url.startsWith('/') ? data.url : GLOBAL_CONFIG.root + data.url\n        let indexTitle = -1\n        let indexContent = -1\n        let firstOccur = -1\n        // only match artiles with not empty titles and contents\n        if (dataTitle !== '' || dataContent !== '') {\n          keywords.forEach(function (keyword, i) {\n            indexTitle = dataTitle.indexOf(keyword)\n            indexContent = dataContent.indexOf(keyword)\n            if (indexTitle < 0 && indexContent < 0) {\n              isMatch = false\n            } else {\n              if (indexContent < 0) {\n                indexContent = 0\n              }\n              if (i === 0) {\n                firstOccur = indexContent\n              }\n            }\n          })\n        } else {\n          isMatch = false\n        }\n\n        // show search results\n        if (isMatch) {\n          const content = data.content.trim().replace(/<[^>]+>/g, '')\n          if (firstOccur >= 0) {\n            // cut out 130 characters\n            // let start = firstOccur - 30 < 0 ? 0 : firstOccur - 30\n            // let end = firstOccur + 50 > content.length ? content.length : firstOccur + 50\n            let start = firstOccur - 30\n            let end = firstOccur + 100\n\n            if (start < 0) {\n              start = 0\n            }\n\n            if (start === 0) {\n              end = 100\n            }\n\n            if (end > content.length) {\n              end = content.length\n            }\n\n            let matchContent = content.substring(start, end)\n\n            // highlight all keywords\n            keywords.forEach(function (keyword) {\n              const regS = new RegExp(keyword, 'gi')\n              matchContent = matchContent.replace(regS, '<span class=\"search-keyword\">' + keyword + '</span>')\n              dataTitle = dataTitle.replace(regS, '<span class=\"search-keyword\">' + keyword + '</span>')\n            })\n\n            str += '<div class=\"local-search__hit-item\"><a href=\"' + dataUrl + '\" class=\"search-result-title\">' + dataTitle + '</a>'\n            count += 1\n\n            if (dataContent !== '') {\n              str += '<p class=\"search-result\">' + matchContent + '...</p>'\n            }\n          }\n          str += '</div>'\n        }\n      })\n      if (count === 0) {\n        str += '<div id=\"local-search__hits-empty\">' + GLOBAL_CONFIG.localSearch.languages.hits_empty.replace(/\\$\\{query}/, this.value.trim()) +\n          '</div>'\n      }\n      str += '</div>'\n      $resultContent.innerHTML = str\n      if (keywords[0] !== '') $loadingStatus.innerHTML = ''\n      window.pjax && window.pjax.refresh($resultContent)\n    })\n  }\n})","date":"2023-06-03T19:30:43.168Z","updated":"2023-06-03T19:30:43.168Z","path":"selfjs/localsearch.js","layout":"false","title":"","comments":1,"_id":"clijtrgc9000lyswh1t4p8qbl","content":"window.addEventListener('load', () => {\n  let loadFlag = false\n  const openSearch = () => {\n    const bodyStyle = document.body.style\n    bodyStyle.width = '100%'\n    bodyStyle.overflow = 'hidden'\n    btf.animateIn(document.getElementById('search-mask'), 'to_show 0.5s')\n    btf.animateIn(document.querySelector('#local-search .search-dialog'), 'titleScale 0.5s')\n    setTimeout(() => { document.querySelector('#local-search-input input').focus() }, 100)\n    if (!loadFlag) {\n      search(GLOBAL_CONFIG.localSearch.path)\n      loadFlag = true\n    }\n    // shortcut: ESC\n    document.addEventListener('keydown', function f (event) {\n      if (event.code === 'Escape') {\n        closeSearch()\n        document.removeEventListener('keydown', f)\n      }\n    })\n  }\n\n  const closeSearch = () => {\n    const bodyStyle = document.body.style\n    bodyStyle.width = ''\n    bodyStyle.overflow = ''\n    btf.animateOut(document.querySelector('#local-search .search-dialog'), 'search_close .5s')\n    btf.animateOut(document.getElementById('search-mask'), 'to_hide 0.5s')\n  }\n\n  // click function\n  const searchClickFn = () => {\n    document.querySelector('#search-button > .search').addEventListener('click', openSearch)\n    document.getElementById('search-mask').addEventListener('click', closeSearch)\n    document.querySelector('#local-search .search-close-button').addEventListener('click', closeSearch)\n  }\n\n  searchClickFn()\n\n  // pjax\n  window.addEventListener('pjax:complete', function () {\n    getComputedStyle(document.querySelector('#local-search .search-dialog')).display === 'block' && closeSearch()\n    searchClickFn()\n  })\n\n  async function search (path) {\n    let datas = []\n    const typeF = path.split('.')[1]\n    const response = await fetch(GLOBAL_CONFIG.root + path)\n    if (typeF === 'json') {\n      datas = await response.json()\n    } else if (typeF === 'xml') {\n      const res = await response.text()\n      const t = await new window.DOMParser().parseFromString(res, 'text/xml')\n      const a = await t\n      datas = [...a.querySelectorAll('entry')].map(function (item) {\n        return {\n          title: item.querySelector('title').textContent,\n          content: item.querySelector('content').textContent,\n          url: item.querySelector('url').textContent\n        }\n      })\n    }\n    if (response.ok) {\n      const $loadDataItem = document.getElementById('loading-database')\n      $loadDataItem.nextElementSibling.style.display = 'block'\n      $loadDataItem.remove()\n    }\n\n    const $input = document.querySelector('#local-search-input input')\n    const $resultContent = document.getElementById('local-search-results')\n    const $loadingStatus = document.getElementById('loading-status')\n    $input.addEventListener('input', function () {\n      const keywords = Traditionalized(this.value).trim().toLowerCase().split(/[\\s]+/)\n      if (keywords[0] !== '') $loadingStatus.innerHTML = '<i class=\"fas fa-spinner fa-pulse\"></i>'\n\n      $resultContent.innerHTML = ''\n      let str = '<div class=\"search-result-list\">'\n      if (this.value.trim().length <= 0) return\n      let count = 0\n      // perform local searching\n      datas.forEach(function (data) {\n        let isMatch = true\n        if (!data.title || data.title.trim() === '') {\n          data.title = ''\n        }\n        let dataTitle = data.title.trim().toLowerCase()\n        const dataContent = data.content ? data.content.trim().replace(/<[^>]+>/g, '').toLowerCase() : ''\n        const dataUrl = data.url.startsWith('/') ? data.url : GLOBAL_CONFIG.root + data.url\n        let indexTitle = -1\n        let indexContent = -1\n        let firstOccur = -1\n        // only match artiles with not empty titles and contents\n        if (dataTitle !== '' || dataContent !== '') {\n          keywords.forEach(function (keyword, i) {\n            indexTitle = dataTitle.indexOf(keyword)\n            indexContent = dataContent.indexOf(keyword)\n            if (indexTitle < 0 && indexContent < 0) {\n              isMatch = false\n            } else {\n              if (indexContent < 0) {\n                indexContent = 0\n              }\n              if (i === 0) {\n                firstOccur = indexContent\n              }\n            }\n          })\n        } else {\n          isMatch = false\n        }\n\n        // show search results\n        if (isMatch) {\n          const content = data.content.trim().replace(/<[^>]+>/g, '')\n          if (firstOccur >= 0) {\n            // cut out 130 characters\n            // let start = firstOccur - 30 < 0 ? 0 : firstOccur - 30\n            // let end = firstOccur + 50 > content.length ? content.length : firstOccur + 50\n            let start = firstOccur - 30\n            let end = firstOccur + 100\n\n            if (start < 0) {\n              start = 0\n            }\n\n            if (start === 0) {\n              end = 100\n            }\n\n            if (end > content.length) {\n              end = content.length\n            }\n\n            let matchContent = content.substring(start, end)\n\n            // highlight all keywords\n            keywords.forEach(function (keyword) {\n              const regS = new RegExp(keyword, 'gi')\n              matchContent = matchContent.replace(regS, '<span class=\"search-keyword\">' + keyword + '</span>')\n              dataTitle = dataTitle.replace(regS, '<span class=\"search-keyword\">' + keyword + '</span>')\n            })\n\n            str += '<div class=\"local-search__hit-item\"><a href=\"' + dataUrl + '\" class=\"search-result-title\">' + dataTitle + '</a>'\n            count += 1\n\n            if (dataContent !== '') {\n              str += '<p class=\"search-result\">' + matchContent + '...</p>'\n            }\n          }\n          str += '</div>'\n        }\n      })\n      if (count === 0) {\n        str += '<div id=\"local-search__hits-empty\">' + GLOBAL_CONFIG.localSearch.languages.hits_empty.replace(/\\$\\{query}/, this.value.trim()) +\n          '</div>'\n      }\n      str += '</div>'\n      $resultContent.innerHTML = str\n      if (keywords[0] !== '') $loadingStatus.innerHTML = ''\n      window.pjax && window.pjax.refresh($resultContent)\n    })\n  }\n})","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/13.jpg","excerpt":"","more":"window.addEventListener('load', () => {\n  let loadFlag = false\n  const openSearch = () => {\n    const bodyStyle = document.body.style\n    bodyStyle.width = '100%'\n    bodyStyle.overflow = 'hidden'\n    btf.animateIn(document.getElementById('search-mask'), 'to_show 0.5s')\n    btf.animateIn(document.querySelector('#local-search .search-dialog'), 'titleScale 0.5s')\n    setTimeout(() => { document.querySelector('#local-search-input input').focus() }, 100)\n    if (!loadFlag) {\n      search(GLOBAL_CONFIG.localSearch.path)\n      loadFlag = true\n    }\n    // shortcut: ESC\n    document.addEventListener('keydown', function f (event) {\n      if (event.code === 'Escape') {\n        closeSearch()\n        document.removeEventListener('keydown', f)\n      }\n    })\n  }\n\n  const closeSearch = () => {\n    const bodyStyle = document.body.style\n    bodyStyle.width = ''\n    bodyStyle.overflow = ''\n    btf.animateOut(document.querySelector('#local-search .search-dialog'), 'search_close .5s')\n    btf.animateOut(document.getElementById('search-mask'), 'to_hide 0.5s')\n  }\n\n  // click function\n  const searchClickFn = () => {\n    document.querySelector('#search-button > .search').addEventListener('click', openSearch)\n    document.getElementById('search-mask').addEventListener('click', closeSearch)\n    document.querySelector('#local-search .search-close-button').addEventListener('click', closeSearch)\n  }\n\n  searchClickFn()\n\n  // pjax\n  window.addEventListener('pjax:complete', function () {\n    getComputedStyle(document.querySelector('#local-search .search-dialog')).display === 'block' && closeSearch()\n    searchClickFn()\n  })\n\n  async function search (path) {\n    let datas = []\n    const typeF = path.split('.')[1]\n    const response = await fetch(GLOBAL_CONFIG.root + path)\n    if (typeF === 'json') {\n      datas = await response.json()\n    } else if (typeF === 'xml') {\n      const res = await response.text()\n      const t = await new window.DOMParser().parseFromString(res, 'text/xml')\n      const a = await t\n      datas = [...a.querySelectorAll('entry')].map(function (item) {\n        return {\n          title: item.querySelector('title').textContent,\n          content: item.querySelector('content').textContent,\n          url: item.querySelector('url').textContent\n        }\n      })\n    }\n    if (response.ok) {\n      const $loadDataItem = document.getElementById('loading-database')\n      $loadDataItem.nextElementSibling.style.display = 'block'\n      $loadDataItem.remove()\n    }\n\n    const $input = document.querySelector('#local-search-input input')\n    const $resultContent = document.getElementById('local-search-results')\n    const $loadingStatus = document.getElementById('loading-status')\n    $input.addEventListener('input', function () {\n      const keywords = Traditionalized(this.value).trim().toLowerCase().split(/[\\s]+/)\n      if (keywords[0] !== '') $loadingStatus.innerHTML = '<i class=\"fas fa-spinner fa-pulse\"></i>'\n\n      $resultContent.innerHTML = ''\n      let str = '<div class=\"search-result-list\">'\n      if (this.value.trim().length <= 0) return\n      let count = 0\n      // perform local searching\n      datas.forEach(function (data) {\n        let isMatch = true\n        if (!data.title || data.title.trim() === '') {\n          data.title = ''\n        }\n        let dataTitle = data.title.trim().toLowerCase()\n        const dataContent = data.content ? data.content.trim().replace(/<[^>]+>/g, '').toLowerCase() : ''\n        const dataUrl = data.url.startsWith('/') ? data.url : GLOBAL_CONFIG.root + data.url\n        let indexTitle = -1\n        let indexContent = -1\n        let firstOccur = -1\n        // only match artiles with not empty titles and contents\n        if (dataTitle !== '' || dataContent !== '') {\n          keywords.forEach(function (keyword, i) {\n            indexTitle = dataTitle.indexOf(keyword)\n            indexContent = dataContent.indexOf(keyword)\n            if (indexTitle < 0 && indexContent < 0) {\n              isMatch = false\n            } else {\n              if (indexContent < 0) {\n                indexContent = 0\n              }\n              if (i === 0) {\n                firstOccur = indexContent\n              }\n            }\n          })\n        } else {\n          isMatch = false\n        }\n\n        // show search results\n        if (isMatch) {\n          const content = data.content.trim().replace(/<[^>]+>/g, '')\n          if (firstOccur >= 0) {\n            // cut out 130 characters\n            // let start = firstOccur - 30 < 0 ? 0 : firstOccur - 30\n            // let end = firstOccur + 50 > content.length ? content.length : firstOccur + 50\n            let start = firstOccur - 30\n            let end = firstOccur + 100\n\n            if (start < 0) {\n              start = 0\n            }\n\n            if (start === 0) {\n              end = 100\n            }\n\n            if (end > content.length) {\n              end = content.length\n            }\n\n            let matchContent = content.substring(start, end)\n\n            // highlight all keywords\n            keywords.forEach(function (keyword) {\n              const regS = new RegExp(keyword, 'gi')\n              matchContent = matchContent.replace(regS, '<span class=\"search-keyword\">' + keyword + '</span>')\n              dataTitle = dataTitle.replace(regS, '<span class=\"search-keyword\">' + keyword + '</span>')\n            })\n\n            str += '<div class=\"local-search__hit-item\"><a href=\"' + dataUrl + '\" class=\"search-result-title\">' + dataTitle + '</a>'\n            count += 1\n\n            if (dataContent !== '') {\n              str += '<p class=\"search-result\">' + matchContent + '...</p>'\n            }\n          }\n          str += '</div>'\n        }\n      })\n      if (count === 0) {\n        str += '<div id=\"local-search__hits-empty\">' + GLOBAL_CONFIG.localSearch.languages.hits_empty.replace(/\\$\\{query}/, this.value.trim()) +\n          '</div>'\n      }\n      str += '</div>'\n      $resultContent.innerHTML = str\n      if (keywords[0] !== '') $loadingStatus.innerHTML = ''\n      window.pjax && window.pjax.refresh($resultContent)\n    })\n  }\n})"},{"title":"标签","date":"2022-07-30T00:45:06.000Z","layout":"tags","type":"tags","top_img":"https://s2.loli.net/2022/11/04/cAlqtEg5UZv8DW7.webp","comments":1,"_content":"\n\n","source":"tags/index.md","raw":"---\n\ntitle: 标签 \n\ndate: 2022-07-30 08:45:06 \nlayout: tags\ntype: tags \ntop_img: https://s2.loli.net/2022/11/04/cAlqtEg5UZv8DW7.webp\ncomments: true\n\n---\n\n\n","updated":"2023-06-03T19:30:43.169Z","path":"tags/index.html","_id":"clijtrgca000oyswhcrkgg74o","content":"","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/12.jpg","excerpt":"","more":""},{"title":"日志","date":"2022-01-04T16:00:00.000Z","top_img":"linear-gradient(-45deg,#ee7752,#ce3e75,#23a6d5,#23d5ab);background-size: 400% 400%; animation: gradientBG 15s ease infinite;","type":"timeline","_content":"","source":"timeline/index.md","raw":"---\ntitle: 日志\ndate: 2022-01-05 00:00:00\ntop_img:  'linear-gradient(-45deg,#ee7752,#ce3e75,#23a6d5,#23d5ab);background-size: 400% 400%; animation: gradientBG 15s ease infinite;'\ntype: timeline\n---\n","updated":"2023-06-03T19:30:43.169Z","path":"timeline/index.html","comments":1,"layout":"page","_id":"clijtrgcc000uyswhcozgeekv","content":"","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/66.jpg","excerpt":"","more":""},{"title":"notice","comments":0,"date":"2023-01-10T12:36:53.000Z","reward":null,"description":null,"top_img":null,"_content":"{% timeline 2022,blue %}\n<!-- timeline 01-02 -->\n主题开源自己研究\n开源地址：[plasx520/blog-butterfly: hexo静态博客butterfly魔改主题 (github.com)](https://github.com/plasx520/blog-butterfly)\n\n<!-- endtimeline -->\n{% endtimeline %}\n{% timeline 2022,blue %}\n<!-- timeline 01-02 -->\n這是測試頁面\n<!-- endtimeline -->\n{% endtimeline %}\n","source":"notice/index.md","raw":"---\ntitle: notice\ncomments: false\ndate: 2023-01-10 20:36:53\nreward:\ndescription:\ntop_img:\n---\n{% timeline 2022,blue %}\n<!-- timeline 01-02 -->\n主题开源自己研究\n开源地址：[plasx520/blog-butterfly: hexo静态博客butterfly魔改主题 (github.com)](https://github.com/plasx520/blog-butterfly)\n\n<!-- endtimeline -->\n{% endtimeline %}\n{% timeline 2022,blue %}\n<!-- timeline 01-02 -->\n這是測試頁面\n<!-- endtimeline -->\n{% endtimeline %}\n","updated":"2023-06-03T19:30:43.168Z","path":"notice/index.html","layout":"page","_id":"clijtrgcd000xyswh9xqy21q2","content":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p>\n</div></div><div class='timeline-item-content'><p>主题开源自己研究<br>开源地址：<a href=\"https://github.com/plasx520/blog-butterfly\">plasx520/blog-butterfly: hexo静态博客butterfly魔改主题 (github.com)</a></p>\n</div></div></div>\n<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p>\n</div></div><div class='timeline-item-content'><p>這是測試頁面</p>\n</div></div></div>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/444.jpg","excerpt":"","more":"<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p>\n</div></div><div class='timeline-item-content'><p>主题开源自己研究<br>开源地址：<a href=\"https://github.com/plasx520/blog-butterfly\">plasx520/blog-butterfly: hexo静态博客butterfly魔改主题 (github.com)</a></p>\n</div></div></div>\n<div class=\"timeline blue\"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p>\n</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p>\n</div></div><div class='timeline-item-content'><p>這是測試頁面</p>\n</div></div></div>\n"},{"title":"Gallery","date":"2019-10-24T14:23:55.000Z","comments":1,"reward":false,"description":"相册","aside":false,"top_img":"https://s2.loli.net/2022/11/04/y8rclikszbXZ7HK.webp","_content":"\n\n<div class=\"gallery-group-main\">\n{% galleryGroup '壁紙' '收藏的一些壁紙' '/xiance/wallpaper' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %}\n{% galleryGroup '漫威' '關於漫威的圖片' '/xiance/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %}\n{% galleryGroup 'OH MY GIRL' '關於OH MY GIRL的圖片' '/xiance/ohmygirl' https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %}\n</div>","source":"tuku/index.md","raw":"---\ntitle: Gallery\ndate: 2019-10-24 22:23:55\ncomments: true\nreward: false\ndescription: 相册\naside: false\ntop_img: https://s2.loli.net/2022/11/04/y8rclikszbXZ7HK.webp\n---\n\n\n<div class=\"gallery-group-main\">\n{% galleryGroup '壁紙' '收藏的一些壁紙' '/xiance/wallpaper' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %}\n{% galleryGroup '漫威' '關於漫威的圖片' '/xiance/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %}\n{% galleryGroup 'OH MY GIRL' '關於OH MY GIRL的圖片' '/xiance/ohmygirl' https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %}\n</div>","updated":"2023-06-03T19:30:43.170Z","path":"tuku/index.html","layout":"page","_id":"clijtrgcd0013yswh2icb8bqs","content":"<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">壁紙</div>\n  <p>收藏的一些壁紙</p>\n  <a href='/xiance/wallpaper'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">漫威</div>\n  <p>關於漫威的圖片</p>\n  <a href='/xiance/marvel'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">OH MY GIRL</div>\n  <p>關於OH MY GIRL的圖片</p>\n  <a href='/xiance/ohmygirl'></a>\n  </figcaption>\n  </figure>\n  \n</div>","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/13.jpg","excerpt":"","more":"<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">壁紙</div>\n  <p>收藏的一些壁紙</p>\n  <a href='/xiance/wallpaper'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">漫威</div>\n  <p>關於漫威的圖片</p>\n  <a href='/xiance/marvel'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">OH MY GIRL</div>\n  <p>關於OH MY GIRL的圖片</p>\n  <a href='/xiance/ohmygirl'></a>\n  </figcaption>\n  </figure>\n  \n</div>"},{"title":"Gallery","date":"2019-10-24T14:23:55.000Z","comments":1,"reward":false,"description":"相册","aside":false,"top_img":"https://s2.loli.net/2022/11/04/y8rclikszbXZ7HK.webp","_content":"<div class=\"gallery-group-main\">\n{% galleryGroup '壁紙' '收藏的一些壁紙' '/xiance/wallpaper' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %}\n{% galleryGroup '漫威' '關於漫威的圖片' '/xiance/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %}\n{% galleryGroup 'OH MY GIRL' '關於OH MY GIRL的圖片' '/xiance/ohmygirl' https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %}\n\n\n</div>\n","source":"xiance/index.md","raw":"---\ntitle: Gallery\ndate: 2019-10-24 22:23:55\ncomments: true\nreward: false\ndescription: 相册\naside: false\ntop_img: https://s2.loli.net/2022/11/04/y8rclikszbXZ7HK.webp\n---\n<div class=\"gallery-group-main\">\n{% galleryGroup '壁紙' '收藏的一些壁紙' '/xiance/wallpaper' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %}\n{% galleryGroup '漫威' '關於漫威的圖片' '/xiance/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %}\n{% galleryGroup 'OH MY GIRL' '關於OH MY GIRL的圖片' '/xiance/ohmygirl' https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %}\n\n\n</div>\n","updated":"2023-06-03T19:30:43.170Z","path":"xiance/index.html","layout":"page","_id":"clijtrgce0016yswh9a649w9y","content":"<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">壁紙</div>\n  <p>收藏的一些壁紙</p>\n  <a href='/xiance/wallpaper'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">漫威</div>\n  <p>關於漫威的圖片</p>\n  <a href='/xiance/marvel'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">OH MY GIRL</div>\n  <p>關於OH MY GIRL的圖片</p>\n  <a href='/xiance/ohmygirl'></a>\n  </figcaption>\n  </figure>\n  \n\n\n</div>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/112.jpg","excerpt":"","more":"<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">壁紙</div>\n  <p>收藏的一些壁紙</p>\n  <a href='/xiance/wallpaper'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">漫威</div>\n  <p>關於漫威的圖片</p>\n  <a href='/xiance/marvel'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">OH MY GIRL</div>\n  <p>關於OH MY GIRL的圖片</p>\n  <a href='/xiance/ohmygirl'></a>\n  </figcaption>\n  </figure>\n  \n\n\n</div>\n"},{"title":"自言自語","date":"2020-09-15T16:58:58.000Z","comments":1,"reward":null,"description":null,"top_img":"https://s2.loli.net/2022/11/04/CvJl9TkY4LgEGP3.webp","type":"artitalk","_content":"","source":"talking/index.md","raw":"---\ntitle: 自言自語\ndate: 2020-09-16 00:58:58\ncomments: true\nreward:\ndescription:\ntop_img: https://s2.loli.net/2022/11/04/CvJl9TkY4LgEGP3.webp\ntype: artitalk\n---\n","updated":"2023-06-03T19:30:43.169Z","path":"talking/index.html","layout":"page","_id":"clijtrgcf001cyswh0se1al29","content":"","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/12.jpg","excerpt":"","more":""},{"title":"ohmygirl","date":"2019-12-25T15:42:01.000Z","comments":1,"reward":false,"description":null,"top_img":"https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg","_content":"{% gallery %}\n![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)\n![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)\n![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)\n![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)\n![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)\n![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)\n![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)\n![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)\n{% endgallery %}","source":"xiance/ohmygirl/index.md","raw":"---\ntitle: ohmygirl\ndate: 2019-12-25 23:42:01\ncomments: true\nreward: false\ndescription: \ntop_img: https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg\n---\n{% gallery %}\n![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)\n![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)\n![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)\n![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)\n![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)\n![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)\n![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)\n![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)\n{% endgallery %}","updated":"2023-06-03T19:30:43.171Z","path":"xiance/ohmygirl/index.html","layout":"page","_id":"clijtrgcf001fyswh0iys556o","content":"<div class=\"fj-gallery\"><p><img src=\"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg\"></p>\n          </div>","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/12.jpg","excerpt":"","more":"<div class=\"fj-gallery\"><p><img src=\"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg\"></p>\n          </div>"},{"title":"Marvel","date":"2019-12-25T15:29:25.000Z","comments":1,"reward":false,"description":null,"top_img":"https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg","_content":"{% gallery %}\n![](https://i.loli.net/2019/12/25/Jj8FXuKVlOea4Ec.jpg)\n![](https://i.loli.net/2019/12/25/eqBGrXx9tWsZOao.jpg)\n![](https://i.loli.net/2019/12/25/LjW2CfNSD7OaY4v.jpg)\n![](https://i.loli.net/2019/12/25/pGIhaPjxtl438U9.jpg)\n![](https://i.loli.net/2019/12/25/hzjJBR2x5SEmsbC.jpg)\n![](https://i.loli.net/2019/12/25/ucNDmUqQkrFfAWv.jpg)\n![](https://i.loli.net/2019/12/25/oj1wAnGSKtFvXIJ.jpg)\n{% endgallery %}","source":"xiance/marvel/index.md","raw":"---\ntitle: Marvel\ndate: 2019-12-25 23:29:25\ncomments: true\nreward: false\ndescription:\ntop_img: https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg\n---\n{% gallery %}\n![](https://i.loli.net/2019/12/25/Jj8FXuKVlOea4Ec.jpg)\n![](https://i.loli.net/2019/12/25/eqBGrXx9tWsZOao.jpg)\n![](https://i.loli.net/2019/12/25/LjW2CfNSD7OaY4v.jpg)\n![](https://i.loli.net/2019/12/25/pGIhaPjxtl438U9.jpg)\n![](https://i.loli.net/2019/12/25/hzjJBR2x5SEmsbC.jpg)\n![](https://i.loli.net/2019/12/25/ucNDmUqQkrFfAWv.jpg)\n![](https://i.loli.net/2019/12/25/oj1wAnGSKtFvXIJ.jpg)\n{% endgallery %}","updated":"2023-06-03T19:30:43.171Z","path":"xiance/marvel/index.html","layout":"page","_id":"clijtrgcg001iyswhhu4i77gn","content":"<div class=\"fj-gallery\"><p><img src=\"https://i.loli.net/2019/12/25/Jj8FXuKVlOea4Ec.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/eqBGrXx9tWsZOao.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/LjW2CfNSD7OaY4v.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/pGIhaPjxtl438U9.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/hzjJBR2x5SEmsbC.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/ucNDmUqQkrFfAWv.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/oj1wAnGSKtFvXIJ.jpg\"></p>\n          </div>","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/112.jpg","excerpt":"","more":"<div class=\"fj-gallery\"><p><img src=\"https://i.loli.net/2019/12/25/Jj8FXuKVlOea4Ec.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/eqBGrXx9tWsZOao.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/LjW2CfNSD7OaY4v.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/pGIhaPjxtl438U9.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/hzjJBR2x5SEmsbC.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/ucNDmUqQkrFfAWv.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/oj1wAnGSKtFvXIJ.jpg\"></p>\n          </div>"},{"title":"我的视频","date":"2020-07-17T12:54:09.000Z","comment":true,"top_img":false,"showToc":true,"aside":false,"type":"video","_content":"\n<script src=\"https://unpkg.com/jquery@latest/dist/jquery.min.js\"></script>\n<script>\nfunction selectVideo(id){\n    var src=$(\"#video-item-\"+id).attr(\"data-src\");\n    $(\"#video-select\").html(\"<iframe id='video-iframe' src='\"+src+\"' scrolling='no' border='0' frameborder='no' framespacing='0' allowfullscreen='true'> </iframe>\");\n    var iframe = document.getElementById(\"video-select\")\n    if(iframe.attachEvent){\n      iframe.attachEvent(\"onreadystatechange\", function() {\n        if (iframe.readyState === \"complete\" || iframe.readyState == \"loaded\") {\n          iframe.detachEvent(\"onreadystatechange\", arguments.callee);\n        if (document.getElementsByClassName('video-mirror').length>0) {\n          console.log(\"1true\")\n          $(\".video-mirror\").attr(\"style\",\"transform:scaleX(-1);\")\n          }\n        }\n      });\n    }else{\n      iframe.addEventListener(\"load\", function() {\n        this.removeEventListener(\"load\", arguments.call, false);\n      if (document.getElementsByClassName('video-mirror').length>0) {\n        console.log(\"2true\")\n        $(\".video-mirror\").attr(\"style\",\"transform:scaleX(-1);\")\n      }\n      }, false);\n    }\n}\n$(document).ready(selectVideo(0));\n</script>\n","source":"video/index.md","raw":"---\ntitle: 我的视频\ndate: 2020-07-17 20:54:09\ncomment: true\ntop_img: false\nshowToc: true\naside: false\ntype: \"video\"\n---\n\n<script src=\"https://unpkg.com/jquery@latest/dist/jquery.min.js\"></script>\n<script>\nfunction selectVideo(id){\n    var src=$(\"#video-item-\"+id).attr(\"data-src\");\n    $(\"#video-select\").html(\"<iframe id='video-iframe' src='\"+src+\"' scrolling='no' border='0' frameborder='no' framespacing='0' allowfullscreen='true'> </iframe>\");\n    var iframe = document.getElementById(\"video-select\")\n    if(iframe.attachEvent){\n      iframe.attachEvent(\"onreadystatechange\", function() {\n        if (iframe.readyState === \"complete\" || iframe.readyState == \"loaded\") {\n          iframe.detachEvent(\"onreadystatechange\", arguments.callee);\n        if (document.getElementsByClassName('video-mirror').length>0) {\n          console.log(\"1true\")\n          $(\".video-mirror\").attr(\"style\",\"transform:scaleX(-1);\")\n          }\n        }\n      });\n    }else{\n      iframe.addEventListener(\"load\", function() {\n        this.removeEventListener(\"load\", arguments.call, false);\n      if (document.getElementsByClassName('video-mirror').length>0) {\n        console.log(\"2true\")\n        $(\".video-mirror\").attr(\"style\",\"transform:scaleX(-1);\")\n      }\n      }, false);\n    }\n}\n$(document).ready(selectVideo(0));\n</script>\n","updated":"2023-06-03T19:30:43.170Z","path":"video/index.html","comments":1,"layout":"page","_id":"clijtrgcg001myswhgz3pbl5h","content":"<script src=\"https://unpkg.com/jquery@latest/dist/jquery.min.js\"></script>\n<script>\nfunction selectVideo(id){\n    var src=$(\"#video-item-\"+id).attr(\"data-src\");\n    $(\"#video-select\").html(\"<iframe id='video-iframe' src='\"+src+\"' scrolling='no' border='0' frameborder='no' framespacing='0' allowfullscreen='true'> </iframe>\");\n    var iframe = document.getElementById(\"video-select\")\n    if(iframe.attachEvent){\n      iframe.attachEvent(\"onreadystatechange\", function() {\n        if (iframe.readyState === \"complete\" || iframe.readyState == \"loaded\") {\n          iframe.detachEvent(\"onreadystatechange\", arguments.callee);\n        if (document.getElementsByClassName('video-mirror').length>0) {\n          console.log(\"1true\")\n          $(\".video-mirror\").attr(\"style\",\"transform:scaleX(-1);\")\n          }\n        }\n      });\n    }else{\n      iframe.addEventListener(\"load\", function() {\n        this.removeEventListener(\"load\", arguments.call, false);\n      if (document.getElementsByClassName('video-mirror').length>0) {\n        console.log(\"2true\")\n        $(\".video-mirror\").attr(\"style\",\"transform:scaleX(-1);\")\n      }\n      }, false);\n    }\n}\n$(document).ready(selectVideo(0));\n</script>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/77.jpg","excerpt":"","more":"<script src=\"https://unpkg.com/jquery@latest/dist/jquery.min.js\"></script>\n<script>\nfunction selectVideo(id){\n    var src=$(\"#video-item-\"+id).attr(\"data-src\");\n    $(\"#video-select\").html(\"<iframe id='video-iframe' src='\"+src+\"' scrolling='no' border='0' frameborder='no' framespacing='0' allowfullscreen='true'> </iframe>\");\n    var iframe = document.getElementById(\"video-select\")\n    if(iframe.attachEvent){\n      iframe.attachEvent(\"onreadystatechange\", function() {\n        if (iframe.readyState === \"complete\" || iframe.readyState == \"loaded\") {\n          iframe.detachEvent(\"onreadystatechange\", arguments.callee);\n        if (document.getElementsByClassName('video-mirror').length>0) {\n          console.log(\"1true\")\n          $(\".video-mirror\").attr(\"style\",\"transform:scaleX(-1);\")\n          }\n        }\n      });\n    }else{\n      iframe.addEventListener(\"load\", function() {\n        this.removeEventListener(\"load\", arguments.call, false);\n      if (document.getElementsByClassName('video-mirror').length>0) {\n        console.log(\"2true\")\n        $(\".video-mirror\").attr(\"style\",\"transform:scaleX(-1);\")\n      }\n      }, false);\n    }\n}\n$(document).ready(selectVideo(0));\n</script>\n"}],"Post":[{"title":"vela快应用框架","keywords":"quickjs ts c++","description":"quickjs对接devtools","top_img":"设置false不显示顶部图片","sticky":100,"cover":"https://raw.githubusercontent.com/why862555625/images/main/images/17.png","comments":1,"abbrlink":"d9795d89","date":"2023-04-25T07:27:56.000Z","updated":"2023-04-25T07:27:56.000Z","_content":"\n\n\nVela上快应用框架的一些实现原理和编程实践\n\n<!-- more -->\n\n# 快应用框架构成\n\n一个简单的图用来描述快应用框架的模块构成，主要由Native（C++）部分和JS部分（framework.js）构成。\n\n![48c4d276-9d71-439a-a720-7f268da27d85](https://raw.githubusercontent.com/why862555625/images/main/images/48c4d276-9d71-439a-a720-7f268da27d85.svg)\n\n在框架的C++代码中，最核心的两大组件就是 quickjs和libuv，分别提供JS运行环境和异步消息循环机制。框架还用到了一些其他的C/C++库如libcurl作为http客户端，rapidjson提供json解析能力等。\n\n下面给出项目目录结构：\n\n```\n.\n├── bin                                     # 生成目录\n│   ├── app                                 # 测试应用\n│   ├── apps.json                           # 应用配置文件\n│   ├── font                                # 应用字体资源\n│   ├── quickapp\n│   └── vapp                                # 项目生成的可执行文件\n├── build                                   # cmake构建目录\n├── CMakeLists.txt\n├── deps                                    # 依赖项目录\n│   ├── curl                                # 多协议文件传输库\n│   ├── ext                                 # 扩展，主要是lvgl非标准扩展\n│   ├── FFmpeg                              # 音视频编解码库\n│   ├── freetype2                           # 字体渲染库\n│   ├── libuv                               # 跨平台事件驱动的消息循环库\n│   ├── littlefs                            # lvgl相关\n│   ├── lv_conf.h\n│   ├── lv_drivers\n│   ├── lv_drv_conf.h\n│   ├── lv_ffmpeg_interface\n│   ├── lv_fs_interface\n│   ├── lvgl                                # lvgl 嵌入式gui库\n│   ├── lv_lib_freetype                     # lvgl的freetype库\n│   ├── lv_lib_png                          # lvgl的png解码库\n│   ├── quickjs                             # 嵌入式JS引擎\n│   ├── rapidjson                           # Json库\n│   ├── tools                               # 工具目录，目前存放了Ffmpeg编译脚本\n│   ├── unqlite                             # no sql数据库\n│   ├── uvws                                # 基于libuv实现的websocket库\n│   ├── wasm3                               # web assembely支持库\n│   └── yoga                                # yoga排版引擎\n├── Kconfig                                 # 供vela使用的kconfg配置\n├── Make.defs\n├── Makefile                                # vela makefile\n├── README.md                               # 本文件\n├── src                                     # 源码\n│   ├── aiotjs.h\n│   ├── ajs_vm.cpp\n│   ├── ....\n│   ├── framework                           # 框架源码\n│   ├── gui                                 # GUI相关代码，包含lvgl渲染器实现\n│   ├── jse                                 # JS Environment JS环境相关\n│   └── Kconfig\n├── tests                                   # 测试\n│   ├── gui\n│   ├── helpers\n│   ├── run.js\n│   ├── ... \n│   ├── test-feature-vibrator.js\n│   ├── wasi\n│   └── wasm\n└── toolchain                               # 交叉编译相关\n    └── cross-m32.cmake                     # linux 32位构建\n```\n\n\n\n# 框架启动流程分析\n\n![6ca169bc-84af-4252-9758-54c853feefef](https://raw.githubusercontent.com/why862555625/images/main/images/6ca169bc-84af-4252-9758-54c853feefef.svg)\n\n框架的整个启动和执行流程较为复杂，里面涉及到了JS和C++的互调用。\n\n启动流程以C++的入口函数为入口点，会初始化quickjs，创建app，启动子线程并加载Native module和内置JS框架代码。\n\n然后流程转交到JS，由JS通过调用初始化时注册的Native函数来完成整个快应用的加载。\n\n\n\n# VDOM渲染流程分析\n\n\n\nVDOM的创建和渲染出于性能考虑，放在了C++层实现，整个VDOM的创建由Native通过执行template上的渲染函数来创建。\n\n```js\n((module) => {\n    module.exports = function (vm) {\n      const _vm_ = vm || this\n      return aiot.__ce__(\"div\", {\n        \"classList\": [\n          \"page\",\n          \"home-page\"\n        ]\n      }, [\n        aiot.__ci__({\n          shown: function () { return _vm_.status !== 0 }\n        },\n          function () {\n            return aiot.__ce__(\"text\", {\n              \"classList\": [\n                \"text-time\"\n              ],\n              \"value\": function () { return _vm_.$t(\"a.b\") }\n            })\n          }),\n        aiot.__ci__({\n          shown: function () { return _vm_.status === 0 }\n        },\n          function () {\n            return aiot.__ce__(\"div\", {\n              \"classList\": [\n                \"body\",\n                \"launch-panel\"\n              ]\n            }, [\n              aiot.__ce__(\"image\", {\n                \"src\": \"/Common/logo.png\",\n                \"classList\": [\n                  \"logo\"\n                ]\n              }),\n              aiot.__ce__(\"text\", {\n                \"classList\": [\n                  \"app-name\"\n                ],\n                \"value\": \"航旅纵横\"\n              })\n            ])\n          }),\n        aiot.__ci__({...}),\n        aiot.__ci__({...}),\n        ....\n      ])\n    }\n    /***/\n}),\n```\n\nTemplate本身是一个嵌套结构，它被翻译成了对aiot.__ce__, aiot__cf__, aiot.__ci__等函数的嵌套调用，嵌套调用的过程就是在Native层完成整个dom树构建的过程。\n\n我们来看__cf__对应的C++源码，它用于创建一个逻辑循环节点：\n\n\n\n```c++\nDomEntity* dom_create_for_fragment(jse_context_ref ctx, jse_value_t options, jse_value_t func) {\n    AIOTJS_LOG_DEBUG(\"dom_create_for_fragment ==================== \");\n\n\n   ....\n\n    //创建DomForFragment节点\n    DomForFragment *frag = new DomForFragment();\n    page->addDomEntity(frag);\n    \n    ...\n\n    // 保存JS端传入的表达式和render函数\n    jse_value_t exp = jse_get_object_property(ctx, options, \"exp\");\n    frag->setExpress(jse_dup_value(ctx, exp));\n    frag->setRenderFunction(jse_dup_value(ctx, func));\n    jse_free_value(ctx, exp);\n\n    //设置key或者$idx\n    ...\n\n    //创建effect函数\n    jse_value_t eff = create_effect(ctx, dom_update_for_fragment, 0);\n    AIOTJS_LOG_DEBUG(\"AddEffect for %d\", frag->uid());\n    //调用framework的effectWrap函数将effect函数传递给JS层保存\n    frag->addEffect(ctx, dom_effect(ctx, eff, frag->uid(), 0));\n    jse_free_value(ctx, eff);\n    ...\n    \n    // 返回创建好的frag vdom节点\n    return frag;\n}\n```\n\ndom_update_for_fragment是C++端的节点更新函数，它最终会触发节点的render函数更新子节点：\n\n\n\n```c++\nbool DomForFragment::render(jse_context_ref ctx) {\n    // 递归构造\n    jse_value_t exp_obj = jse_call(ctx, exp_, JSE_UNDEFINED, 0, {});\n    jse_value_t expValue = JSE_UNDEFINED;\n    const char* str_tid = nullptr;\n\n    // 调用JS端的求值函数获取for循环对应的list对象 expValue\n    expValue = get_from_js_expression();\n    \n    ....\n\n    //遍历数组\n    jse_size_t len = jse_get_array_length(ctx, expValue);\n    for(jse_size_t i = 0; i < len; i++) {\n        //为每个element分别调用render函数\n        jse_value_t idx = jse_uint(ctx, i);\n        jse_value_t args[] = {\n            idx,\n            item\n        };\n        jse_value_t res = jse_call(ctx, render_, JSE_UNDEFINED, 2, args);\n        if (jse_is_number(res)) {\n            unsigned int cid = jse_to_uint_def(ctx, res, 0);\n            DomEntity* ent = p->entity(cid);\n            AIOTJS_CHECK_NE(ent, nullptr);\n            ent->setDiffOperationType(DomEntityDiffOperationType::Add);\n            addChild(ent);\n            if(!jse_is_undefined(tid_value)) {\n                jse_value_t v_tid = jse_dup_value(ctx, tid_value);\n                ent->setTid(v_tid);\n            }\n        } else if (jse_is_array(ctx, res)) {\n            jse_size_t childlen = jse_get_array_length(ctx, res);\n            for(size_t j=0; j<childlen; j++) {\n                unsigned int cid = jse_get_array_idx_uint(ctx, res, j, 0);\n                DomEntity* ent = p->entity(cid);\n                AIOTJS_CHECK_NE(ent, nullptr);\n                ent->setDiffOperationType(DomEntityDiffOperationType::Add);\n                addChild(ent);\n            }\n        }\n        jse_free_value(ctx, res);\n        jse_free_value(ctx, idx);\n    }\n    jse_free_value(ctx, item);\n\n    jse_free_value(ctx, expValue);\n    AIOTJS_LOG_DEBUG(\"DomForFragment::build finished - <%u>\", uid());\n    // 只有初始化的时候返回true表示需要flush，其它情况下延迟flush\n    return isBindingEffect();\n}\n```\n\ndom_update_for_fragment是C++端的节点更新函数，它最终会触发节点的render函数更新子节点：\n\n```c++\nbool DomForFragment::render(jse_context_ref ctx) {\n    // 递归构造\n    jse_value_t exp_obj = jse_call(ctx, exp_, JSE_UNDEFINED, 0, {});\n    jse_value_t expValue = JSE_UNDEFINED;\n    const char* str_tid = nullptr;\n\n    // 调用JS端的求值函数获取for循环对应的list对象 expValue\n    expValue = get_from_js_expression();\n    \n    ....\n\n    //遍历数组\n    jse_size_t len = jse_get_array_length(ctx, expValue);\n    for(jse_size_t i = 0; i < len; i++) {\n        //为每个element分别调用render函数\n        jse_value_t idx = jse_uint(ctx, i);\n        jse_value_t args[] = {\n            idx,\n            item\n        };\n        jse_value_t res = jse_call(ctx, render_, JSE_UNDEFINED, 2, args);\n        if (jse_is_number(res)) {\n            unsigned int cid = jse_to_uint_def(ctx, res, 0);\n            DomEntity* ent = p->entity(cid);\n            AIOTJS_CHECK_NE(ent, nullptr);\n            ent->setDiffOperationType(DomEntityDiffOperationType::Add);\n            addChild(ent);\n            if(!jse_is_undefined(tid_value)) {\n                jse_value_t v_tid = jse_dup_value(ctx, tid_value);\n                ent->setTid(v_tid);\n            }\n        } else if (jse_is_array(ctx, res)) {\n            jse_size_t childlen = jse_get_array_length(ctx, res);\n            for(size_t j=0; j<childlen; j++) {\n                unsigned int cid = jse_get_array_idx_uint(ctx, res, j, 0);\n                DomEntity* ent = p->entity(cid);\n                AIOTJS_CHECK_NE(ent, nullptr);\n                ent->setDiffOperationType(DomEntityDiffOperationType::Add);\n                addChild(ent);\n            }\n        }\n        jse_free_value(ctx, res);\n        jse_free_value(ctx, idx);\n    }\n    jse_free_value(ctx, item);\n\n    jse_free_value(ctx, expValue);\n    AIOTJS_LOG_DEBUG(\"DomForFragment::build finished - <%u>\", uid());\n    // 只有初始化的时候返回true表示需要flush，其它情况下延迟flush\n    return isBindingEffect();\n}\n```\n\n\n\n\n\n# 框架线程模型\n\n框架采用多线程模式，主要有如下两类线程：\n\n- 主线程：负责渲染，只有一个\n- 应用线程：负责执行JS代码，响应数据变更并更新vdom\n\n主线程和应用线程各启动一个uv loop进行消息处理，这两个线程通过libuv进行异步通信，主要有如下几种场景：\n\n1. 应用线程退出后异步通知主线程退出\n2. 应用线程更新vdom后异步通知主线程刷新ui\n3. 系统消息（如应用后台，应用退出等）由主线程发出，通过libuv转到应用线程执行\n\n# 渲染流程分析\n\n## 渲染流程图\n\n\n\n![33f7e704-ec72-4782-b8ff-1e58df0bef2d](https://raw.githubusercontent.com/why862555625/images/main/images/33f7e704-ec72-4782-b8ff-1e58df0bef2d.svg)\n\n\n\n## 渲染流程\n\n\n\n![6e8b9b04-5afd-47aa-9263-d3a379c1ac5b](https://raw.githubusercontent.com/why862555625/images/main/images/6e8b9b04-5afd-47aa-9263-d3a379c1ac5b.svg)\n\n\n\n# 框架核心部分介绍\n\n## 核心类图\n\n![a8dc8b49-a594-454c-9309-164e3269c5e9](https://raw.githubusercontent.com/why862555625/images/main/images/a8dc8b49-a594-454c-9309-164e3269c5e9.svg)\n\n解释：\n\n1. Framework是内部使用的框架类表示，FrameworkExt从Framework继承并添加了对vela系统的消息集成，在vela中使用FrameworkExt表示唯一的框架实例\n2. FrameworkExt中会维护多个app实例，框架支持多应用切换\n3. 每个app实例包含一个JS运行上下文环境和相关的libuv句柄，它们封装在RuntimeContxt中，作为Application的成员变量保存，即一个Application对象唯一对应一个js运行上下文。\n4. 一个Applicatoin对象可以拥有多个Page对象，一个Page对象表示一个可显示的页面，实际是一颗vdom树\n5. Page对象的继承关系较为复杂，框架支持自定义组件，从逻辑上讲，一个Component包含一颗vdom子树，它可以被任意组合来形成最终的完整vdom树。Page是最顶层的Component组件，唯一。从继承关系上讲，DomDocument这一层应该去掉，在添加子组件支持后它的语义已被Component取代，这层抽象当前代码中没有意义但仍然存在。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/c/vela快应用框架.md","raw":"---\ntitle: vela快应用框架\ntags:\n  - quickjs\n  - devtools\ncategories: C\nkeywords: 'quickjs ts c++'\ndescription: quickjs对接devtools\ntop_img: 设置false不显示顶部图片\nsticky: 100\ncover: \"https://raw.githubusercontent.com/why862555625/images/main/images/17.png\"\ncomments: true评论\nabbrlink: d9795d89\ndate: 2023-04-25 15:27:56\nupdated: 2023-04-25 15:27:56\n---\n\n\n\nVela上快应用框架的一些实现原理和编程实践\n\n<!-- more -->\n\n# 快应用框架构成\n\n一个简单的图用来描述快应用框架的模块构成，主要由Native（C++）部分和JS部分（framework.js）构成。\n\n![48c4d276-9d71-439a-a720-7f268da27d85](https://raw.githubusercontent.com/why862555625/images/main/images/48c4d276-9d71-439a-a720-7f268da27d85.svg)\n\n在框架的C++代码中，最核心的两大组件就是 quickjs和libuv，分别提供JS运行环境和异步消息循环机制。框架还用到了一些其他的C/C++库如libcurl作为http客户端，rapidjson提供json解析能力等。\n\n下面给出项目目录结构：\n\n```\n.\n├── bin                                     # 生成目录\n│   ├── app                                 # 测试应用\n│   ├── apps.json                           # 应用配置文件\n│   ├── font                                # 应用字体资源\n│   ├── quickapp\n│   └── vapp                                # 项目生成的可执行文件\n├── build                                   # cmake构建目录\n├── CMakeLists.txt\n├── deps                                    # 依赖项目录\n│   ├── curl                                # 多协议文件传输库\n│   ├── ext                                 # 扩展，主要是lvgl非标准扩展\n│   ├── FFmpeg                              # 音视频编解码库\n│   ├── freetype2                           # 字体渲染库\n│   ├── libuv                               # 跨平台事件驱动的消息循环库\n│   ├── littlefs                            # lvgl相关\n│   ├── lv_conf.h\n│   ├── lv_drivers\n│   ├── lv_drv_conf.h\n│   ├── lv_ffmpeg_interface\n│   ├── lv_fs_interface\n│   ├── lvgl                                # lvgl 嵌入式gui库\n│   ├── lv_lib_freetype                     # lvgl的freetype库\n│   ├── lv_lib_png                          # lvgl的png解码库\n│   ├── quickjs                             # 嵌入式JS引擎\n│   ├── rapidjson                           # Json库\n│   ├── tools                               # 工具目录，目前存放了Ffmpeg编译脚本\n│   ├── unqlite                             # no sql数据库\n│   ├── uvws                                # 基于libuv实现的websocket库\n│   ├── wasm3                               # web assembely支持库\n│   └── yoga                                # yoga排版引擎\n├── Kconfig                                 # 供vela使用的kconfg配置\n├── Make.defs\n├── Makefile                                # vela makefile\n├── README.md                               # 本文件\n├── src                                     # 源码\n│   ├── aiotjs.h\n│   ├── ajs_vm.cpp\n│   ├── ....\n│   ├── framework                           # 框架源码\n│   ├── gui                                 # GUI相关代码，包含lvgl渲染器实现\n│   ├── jse                                 # JS Environment JS环境相关\n│   └── Kconfig\n├── tests                                   # 测试\n│   ├── gui\n│   ├── helpers\n│   ├── run.js\n│   ├── ... \n│   ├── test-feature-vibrator.js\n│   ├── wasi\n│   └── wasm\n└── toolchain                               # 交叉编译相关\n    └── cross-m32.cmake                     # linux 32位构建\n```\n\n\n\n# 框架启动流程分析\n\n![6ca169bc-84af-4252-9758-54c853feefef](https://raw.githubusercontent.com/why862555625/images/main/images/6ca169bc-84af-4252-9758-54c853feefef.svg)\n\n框架的整个启动和执行流程较为复杂，里面涉及到了JS和C++的互调用。\n\n启动流程以C++的入口函数为入口点，会初始化quickjs，创建app，启动子线程并加载Native module和内置JS框架代码。\n\n然后流程转交到JS，由JS通过调用初始化时注册的Native函数来完成整个快应用的加载。\n\n\n\n# VDOM渲染流程分析\n\n\n\nVDOM的创建和渲染出于性能考虑，放在了C++层实现，整个VDOM的创建由Native通过执行template上的渲染函数来创建。\n\n```js\n((module) => {\n    module.exports = function (vm) {\n      const _vm_ = vm || this\n      return aiot.__ce__(\"div\", {\n        \"classList\": [\n          \"page\",\n          \"home-page\"\n        ]\n      }, [\n        aiot.__ci__({\n          shown: function () { return _vm_.status !== 0 }\n        },\n          function () {\n            return aiot.__ce__(\"text\", {\n              \"classList\": [\n                \"text-time\"\n              ],\n              \"value\": function () { return _vm_.$t(\"a.b\") }\n            })\n          }),\n        aiot.__ci__({\n          shown: function () { return _vm_.status === 0 }\n        },\n          function () {\n            return aiot.__ce__(\"div\", {\n              \"classList\": [\n                \"body\",\n                \"launch-panel\"\n              ]\n            }, [\n              aiot.__ce__(\"image\", {\n                \"src\": \"/Common/logo.png\",\n                \"classList\": [\n                  \"logo\"\n                ]\n              }),\n              aiot.__ce__(\"text\", {\n                \"classList\": [\n                  \"app-name\"\n                ],\n                \"value\": \"航旅纵横\"\n              })\n            ])\n          }),\n        aiot.__ci__({...}),\n        aiot.__ci__({...}),\n        ....\n      ])\n    }\n    /***/\n}),\n```\n\nTemplate本身是一个嵌套结构，它被翻译成了对aiot.__ce__, aiot__cf__, aiot.__ci__等函数的嵌套调用，嵌套调用的过程就是在Native层完成整个dom树构建的过程。\n\n我们来看__cf__对应的C++源码，它用于创建一个逻辑循环节点：\n\n\n\n```c++\nDomEntity* dom_create_for_fragment(jse_context_ref ctx, jse_value_t options, jse_value_t func) {\n    AIOTJS_LOG_DEBUG(\"dom_create_for_fragment ==================== \");\n\n\n   ....\n\n    //创建DomForFragment节点\n    DomForFragment *frag = new DomForFragment();\n    page->addDomEntity(frag);\n    \n    ...\n\n    // 保存JS端传入的表达式和render函数\n    jse_value_t exp = jse_get_object_property(ctx, options, \"exp\");\n    frag->setExpress(jse_dup_value(ctx, exp));\n    frag->setRenderFunction(jse_dup_value(ctx, func));\n    jse_free_value(ctx, exp);\n\n    //设置key或者$idx\n    ...\n\n    //创建effect函数\n    jse_value_t eff = create_effect(ctx, dom_update_for_fragment, 0);\n    AIOTJS_LOG_DEBUG(\"AddEffect for %d\", frag->uid());\n    //调用framework的effectWrap函数将effect函数传递给JS层保存\n    frag->addEffect(ctx, dom_effect(ctx, eff, frag->uid(), 0));\n    jse_free_value(ctx, eff);\n    ...\n    \n    // 返回创建好的frag vdom节点\n    return frag;\n}\n```\n\ndom_update_for_fragment是C++端的节点更新函数，它最终会触发节点的render函数更新子节点：\n\n\n\n```c++\nbool DomForFragment::render(jse_context_ref ctx) {\n    // 递归构造\n    jse_value_t exp_obj = jse_call(ctx, exp_, JSE_UNDEFINED, 0, {});\n    jse_value_t expValue = JSE_UNDEFINED;\n    const char* str_tid = nullptr;\n\n    // 调用JS端的求值函数获取for循环对应的list对象 expValue\n    expValue = get_from_js_expression();\n    \n    ....\n\n    //遍历数组\n    jse_size_t len = jse_get_array_length(ctx, expValue);\n    for(jse_size_t i = 0; i < len; i++) {\n        //为每个element分别调用render函数\n        jse_value_t idx = jse_uint(ctx, i);\n        jse_value_t args[] = {\n            idx,\n            item\n        };\n        jse_value_t res = jse_call(ctx, render_, JSE_UNDEFINED, 2, args);\n        if (jse_is_number(res)) {\n            unsigned int cid = jse_to_uint_def(ctx, res, 0);\n            DomEntity* ent = p->entity(cid);\n            AIOTJS_CHECK_NE(ent, nullptr);\n            ent->setDiffOperationType(DomEntityDiffOperationType::Add);\n            addChild(ent);\n            if(!jse_is_undefined(tid_value)) {\n                jse_value_t v_tid = jse_dup_value(ctx, tid_value);\n                ent->setTid(v_tid);\n            }\n        } else if (jse_is_array(ctx, res)) {\n            jse_size_t childlen = jse_get_array_length(ctx, res);\n            for(size_t j=0; j<childlen; j++) {\n                unsigned int cid = jse_get_array_idx_uint(ctx, res, j, 0);\n                DomEntity* ent = p->entity(cid);\n                AIOTJS_CHECK_NE(ent, nullptr);\n                ent->setDiffOperationType(DomEntityDiffOperationType::Add);\n                addChild(ent);\n            }\n        }\n        jse_free_value(ctx, res);\n        jse_free_value(ctx, idx);\n    }\n    jse_free_value(ctx, item);\n\n    jse_free_value(ctx, expValue);\n    AIOTJS_LOG_DEBUG(\"DomForFragment::build finished - <%u>\", uid());\n    // 只有初始化的时候返回true表示需要flush，其它情况下延迟flush\n    return isBindingEffect();\n}\n```\n\ndom_update_for_fragment是C++端的节点更新函数，它最终会触发节点的render函数更新子节点：\n\n```c++\nbool DomForFragment::render(jse_context_ref ctx) {\n    // 递归构造\n    jse_value_t exp_obj = jse_call(ctx, exp_, JSE_UNDEFINED, 0, {});\n    jse_value_t expValue = JSE_UNDEFINED;\n    const char* str_tid = nullptr;\n\n    // 调用JS端的求值函数获取for循环对应的list对象 expValue\n    expValue = get_from_js_expression();\n    \n    ....\n\n    //遍历数组\n    jse_size_t len = jse_get_array_length(ctx, expValue);\n    for(jse_size_t i = 0; i < len; i++) {\n        //为每个element分别调用render函数\n        jse_value_t idx = jse_uint(ctx, i);\n        jse_value_t args[] = {\n            idx,\n            item\n        };\n        jse_value_t res = jse_call(ctx, render_, JSE_UNDEFINED, 2, args);\n        if (jse_is_number(res)) {\n            unsigned int cid = jse_to_uint_def(ctx, res, 0);\n            DomEntity* ent = p->entity(cid);\n            AIOTJS_CHECK_NE(ent, nullptr);\n            ent->setDiffOperationType(DomEntityDiffOperationType::Add);\n            addChild(ent);\n            if(!jse_is_undefined(tid_value)) {\n                jse_value_t v_tid = jse_dup_value(ctx, tid_value);\n                ent->setTid(v_tid);\n            }\n        } else if (jse_is_array(ctx, res)) {\n            jse_size_t childlen = jse_get_array_length(ctx, res);\n            for(size_t j=0; j<childlen; j++) {\n                unsigned int cid = jse_get_array_idx_uint(ctx, res, j, 0);\n                DomEntity* ent = p->entity(cid);\n                AIOTJS_CHECK_NE(ent, nullptr);\n                ent->setDiffOperationType(DomEntityDiffOperationType::Add);\n                addChild(ent);\n            }\n        }\n        jse_free_value(ctx, res);\n        jse_free_value(ctx, idx);\n    }\n    jse_free_value(ctx, item);\n\n    jse_free_value(ctx, expValue);\n    AIOTJS_LOG_DEBUG(\"DomForFragment::build finished - <%u>\", uid());\n    // 只有初始化的时候返回true表示需要flush，其它情况下延迟flush\n    return isBindingEffect();\n}\n```\n\n\n\n\n\n# 框架线程模型\n\n框架采用多线程模式，主要有如下两类线程：\n\n- 主线程：负责渲染，只有一个\n- 应用线程：负责执行JS代码，响应数据变更并更新vdom\n\n主线程和应用线程各启动一个uv loop进行消息处理，这两个线程通过libuv进行异步通信，主要有如下几种场景：\n\n1. 应用线程退出后异步通知主线程退出\n2. 应用线程更新vdom后异步通知主线程刷新ui\n3. 系统消息（如应用后台，应用退出等）由主线程发出，通过libuv转到应用线程执行\n\n# 渲染流程分析\n\n## 渲染流程图\n\n\n\n![33f7e704-ec72-4782-b8ff-1e58df0bef2d](https://raw.githubusercontent.com/why862555625/images/main/images/33f7e704-ec72-4782-b8ff-1e58df0bef2d.svg)\n\n\n\n## 渲染流程\n\n\n\n![6e8b9b04-5afd-47aa-9263-d3a379c1ac5b](https://raw.githubusercontent.com/why862555625/images/main/images/6e8b9b04-5afd-47aa-9263-d3a379c1ac5b.svg)\n\n\n\n# 框架核心部分介绍\n\n## 核心类图\n\n![a8dc8b49-a594-454c-9309-164e3269c5e9](https://raw.githubusercontent.com/why862555625/images/main/images/a8dc8b49-a594-454c-9309-164e3269c5e9.svg)\n\n解释：\n\n1. Framework是内部使用的框架类表示，FrameworkExt从Framework继承并添加了对vela系统的消息集成，在vela中使用FrameworkExt表示唯一的框架实例\n2. FrameworkExt中会维护多个app实例，框架支持多应用切换\n3. 每个app实例包含一个JS运行上下文环境和相关的libuv句柄，它们封装在RuntimeContxt中，作为Application的成员变量保存，即一个Application对象唯一对应一个js运行上下文。\n4. 一个Applicatoin对象可以拥有多个Page对象，一个Page对象表示一个可显示的页面，实际是一颗vdom树\n5. Page对象的继承关系较为复杂，框架支持自定义组件，从逻辑上讲，一个Component包含一颗vdom子树，它可以被任意组合来形成最终的完整vdom树。Page是最顶层的Component组件，唯一。从继承关系上讲，DomDocument这一层应该去掉，在添加子组件支持后它的语义已被Component取代，这层抽象当前代码中没有意义但仍然存在。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"c/vela快应用框架","published":1,"layout":"post","photos":[],"link":"","_id":"clijtrgbx0001yswhbgxj8w48","content":"<p>Vela上快应用框架的一些实现原理和编程实践</p>\n<span id=\"more\"></span>\n\n<h1 id=\"快应用框架构成\"><a href=\"#快应用框架构成\" class=\"headerlink\" title=\"快应用框架构成\"></a>快应用框架构成</h1><p>一个简单的图用来描述快应用框架的模块构成，主要由Native（C++）部分和JS部分（framework.js）构成。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/48c4d276-9d71-439a-a720-7f268da27d85.svg\" alt=\"48c4d276-9d71-439a-a720-7f268da27d85\"></p>\n<p>在框架的C++代码中，最核心的两大组件就是 quickjs和libuv，分别提供JS运行环境和异步消息循环机制。框架还用到了一些其他的C/C++库如libcurl作为http客户端，rapidjson提供json解析能力等。</p>\n<p>下面给出项目目录结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── bin                                     # 生成目录</span><br><span class=\"line\">│   ├── app                                 # 测试应用</span><br><span class=\"line\">│   ├── apps.json                           # 应用配置文件</span><br><span class=\"line\">│   ├── font                                # 应用字体资源</span><br><span class=\"line\">│   ├── quickapp</span><br><span class=\"line\">│   └── vapp                                # 项目生成的可执行文件</span><br><span class=\"line\">├── build                                   # cmake构建目录</span><br><span class=\"line\">├── CMakeLists.txt</span><br><span class=\"line\">├── deps                                    # 依赖项目录</span><br><span class=\"line\">│   ├── curl                                # 多协议文件传输库</span><br><span class=\"line\">│   ├── ext                                 # 扩展，主要是lvgl非标准扩展</span><br><span class=\"line\">│   ├── FFmpeg                              # 音视频编解码库</span><br><span class=\"line\">│   ├── freetype2                           # 字体渲染库</span><br><span class=\"line\">│   ├── libuv                               # 跨平台事件驱动的消息循环库</span><br><span class=\"line\">│   ├── littlefs                            # lvgl相关</span><br><span class=\"line\">│   ├── lv_conf.h</span><br><span class=\"line\">│   ├── lv_drivers</span><br><span class=\"line\">│   ├── lv_drv_conf.h</span><br><span class=\"line\">│   ├── lv_ffmpeg_interface</span><br><span class=\"line\">│   ├── lv_fs_interface</span><br><span class=\"line\">│   ├── lvgl                                # lvgl 嵌入式gui库</span><br><span class=\"line\">│   ├── lv_lib_freetype                     # lvgl的freetype库</span><br><span class=\"line\">│   ├── lv_lib_png                          # lvgl的png解码库</span><br><span class=\"line\">│   ├── quickjs                             # 嵌入式JS引擎</span><br><span class=\"line\">│   ├── rapidjson                           # Json库</span><br><span class=\"line\">│   ├── tools                               # 工具目录，目前存放了Ffmpeg编译脚本</span><br><span class=\"line\">│   ├── unqlite                             # no sql数据库</span><br><span class=\"line\">│   ├── uvws                                # 基于libuv实现的websocket库</span><br><span class=\"line\">│   ├── wasm3                               # web assembely支持库</span><br><span class=\"line\">│   └── yoga                                # yoga排版引擎</span><br><span class=\"line\">├── Kconfig                                 # 供vela使用的kconfg配置</span><br><span class=\"line\">├── Make.defs</span><br><span class=\"line\">├── Makefile                                # vela makefile</span><br><span class=\"line\">├── README.md                               # 本文件</span><br><span class=\"line\">├── src                                     # 源码</span><br><span class=\"line\">│   ├── aiotjs.h</span><br><span class=\"line\">│   ├── ajs_vm.cpp</span><br><span class=\"line\">│   ├── ....</span><br><span class=\"line\">│   ├── framework                           # 框架源码</span><br><span class=\"line\">│   ├── gui                                 # GUI相关代码，包含lvgl渲染器实现</span><br><span class=\"line\">│   ├── jse                                 # JS Environment JS环境相关</span><br><span class=\"line\">│   └── Kconfig</span><br><span class=\"line\">├── tests                                   # 测试</span><br><span class=\"line\">│   ├── gui</span><br><span class=\"line\">│   ├── helpers</span><br><span class=\"line\">│   ├── run.js</span><br><span class=\"line\">│   ├── ... </span><br><span class=\"line\">│   ├── test-feature-vibrator.js</span><br><span class=\"line\">│   ├── wasi</span><br><span class=\"line\">│   └── wasm</span><br><span class=\"line\">└── toolchain                               # 交叉编译相关</span><br><span class=\"line\">    └── cross-m32.cmake                     # linux 32位构建</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"框架启动流程分析\"><a href=\"#框架启动流程分析\" class=\"headerlink\" title=\"框架启动流程分析\"></a>框架启动流程分析</h1><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/6ca169bc-84af-4252-9758-54c853feefef.svg\" alt=\"6ca169bc-84af-4252-9758-54c853feefef\"></p>\n<p>框架的整个启动和执行流程较为复杂，里面涉及到了JS和C++的互调用。</p>\n<p>启动流程以C++的入口函数为入口点，会初始化quickjs，创建app，启动子线程并加载Native module和内置JS框架代码。</p>\n<p>然后流程转交到JS，由JS通过调用初始化时注册的Native函数来完成整个快应用的加载。</p>\n<h1 id=\"VDOM渲染流程分析\"><a href=\"#VDOM渲染流程分析\" class=\"headerlink\" title=\"VDOM渲染流程分析\"></a>VDOM渲染流程分析</h1><p>VDOM的创建和渲染出于性能考虑，放在了C++层实现，整个VDOM的创建由Native通过执行template上的渲染函数来创建。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">(<span class=\"params\"><span class=\"variable language_\">module</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">vm</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> _vm_ = vm || <span class=\"variable language_\">this</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;div&quot;</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">          <span class=\"string\">&quot;page&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;home-page&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;, [</span><br><span class=\"line\">        aiot.<span class=\"title function_\">__ci__</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">shown</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> _vm_.<span class=\"property\">status</span> !== <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">          <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;text&quot;</span>, &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">                <span class=\"string\">&quot;text-time&quot;</span></span><br><span class=\"line\">              ],</span><br><span class=\"line\">              <span class=\"string\">&quot;value&quot;</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> _vm_.$t(<span class=\"string\">&quot;a.b&quot;</span>) &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">        aiot.<span class=\"title function_\">__ci__</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">shown</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> _vm_.<span class=\"property\">status</span> === <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">          <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;div&quot;</span>, &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">                <span class=\"string\">&quot;body&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;launch-panel&quot;</span></span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;, [</span><br><span class=\"line\">              aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;image&quot;</span>, &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;src&quot;</span>: <span class=\"string\">&quot;/Common/logo.png&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">                  <span class=\"string\">&quot;logo&quot;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">              &#125;),</span><br><span class=\"line\">              aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;text&quot;</span>, &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">                  <span class=\"string\">&quot;app-name&quot;</span></span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"string\">&quot;value&quot;</span>: <span class=\"string\">&quot;航旅纵横&quot;</span></span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">            ])</span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">        aiot.<span class=\"title function_\">__ci__</span>(&#123;...&#125;),</span><br><span class=\"line\">        aiot.<span class=\"title function_\">__ci__</span>(&#123;...&#125;),</span><br><span class=\"line\">        ....</span><br><span class=\"line\">      ])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/***/</span></span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n\n<p>Template本身是一个嵌套结构，它被翻译成了对aiot.<strong>ce</strong>, aiot__cf__, aiot.__ci__等函数的嵌套调用，嵌套调用的过程就是在Native层完成整个dom树构建的过程。</p>\n<p>我们来看__cf__对应的C++源码，它用于创建一个逻辑循环节点：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">DomEntity* <span class=\"title\">dom_create_for_fragment</span><span class=\"params\">(jse_context_ref ctx, <span class=\"type\">jse_value_t</span> options, <span class=\"type\">jse_value_t</span> func)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">AIOTJS_LOG_DEBUG</span>(<span class=\"string\">&quot;dom_create_for_fragment ==================== &quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   ....</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建DomForFragment节点</span></span><br><span class=\"line\">    DomForFragment *frag = <span class=\"keyword\">new</span> <span class=\"built_in\">DomForFragment</span>();</span><br><span class=\"line\">    page-&gt;<span class=\"built_in\">addDomEntity</span>(frag);</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存JS端传入的表达式和render函数</span></span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> exp = <span class=\"built_in\">jse_get_object_property</span>(ctx, options, <span class=\"string\">&quot;exp&quot;</span>);</span><br><span class=\"line\">    frag-&gt;<span class=\"built_in\">setExpress</span>(<span class=\"built_in\">jse_dup_value</span>(ctx, exp));</span><br><span class=\"line\">    frag-&gt;<span class=\"built_in\">setRenderFunction</span>(<span class=\"built_in\">jse_dup_value</span>(ctx, func));</span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, exp);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置key或者$idx</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建effect函数</span></span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> eff = <span class=\"built_in\">create_effect</span>(ctx, dom_update_for_fragment, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">AIOTJS_LOG_DEBUG</span>(<span class=\"string\">&quot;AddEffect for %d&quot;</span>, frag-&gt;<span class=\"built_in\">uid</span>());</span><br><span class=\"line\">    <span class=\"comment\">//调用framework的effectWrap函数将effect函数传递给JS层保存</span></span><br><span class=\"line\">    frag-&gt;<span class=\"built_in\">addEffect</span>(ctx, <span class=\"built_in\">dom_effect</span>(ctx, eff, frag-&gt;<span class=\"built_in\">uid</span>(), <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, eff);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 返回创建好的frag vdom节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> frag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>dom_update_for_fragment是C++端的节点更新函数，它最终会触发节点的render函数更新子节点：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DomForFragment::render</span><span class=\"params\">(jse_context_ref ctx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归构造</span></span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> exp_obj = <span class=\"built_in\">jse_call</span>(ctx, exp_, JSE_UNDEFINED, <span class=\"number\">0</span>, &#123;&#125;);</span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> expValue = JSE_UNDEFINED;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* str_tid = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用JS端的求值函数获取for循环对应的list对象 expValue</span></span><br><span class=\"line\">    expValue = <span class=\"built_in\">get_from_js_expression</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    ....</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">    <span class=\"type\">jse_size_t</span> len = <span class=\"built_in\">jse_get_array_length</span>(ctx, expValue);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">jse_size_t</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//为每个element分别调用render函数</span></span><br><span class=\"line\">        <span class=\"type\">jse_value_t</span> idx = <span class=\"built_in\">jse_uint</span>(ctx, i);</span><br><span class=\"line\">        <span class=\"type\">jse_value_t</span> args[] = &#123;</span><br><span class=\"line\">            idx,</span><br><span class=\"line\">            item</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">jse_value_t</span> res = <span class=\"built_in\">jse_call</span>(ctx, render_, JSE_UNDEFINED, <span class=\"number\">2</span>, args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">jse_is_number</span>(res)) &#123;</span><br><span class=\"line\">            <span class=\"type\">unsigned</span> <span class=\"type\">int</span> cid = <span class=\"built_in\">jse_to_uint_def</span>(ctx, res, <span class=\"number\">0</span>);</span><br><span class=\"line\">            DomEntity* ent = p-&gt;<span class=\"built_in\">entity</span>(cid);</span><br><span class=\"line\">            <span class=\"built_in\">AIOTJS_CHECK_NE</span>(ent, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">            ent-&gt;<span class=\"built_in\">setDiffOperationType</span>(DomEntityDiffOperationType::Add);</span><br><span class=\"line\">            <span class=\"built_in\">addChild</span>(ent);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"built_in\">jse_is_undefined</span>(tid_value)) &#123;</span><br><span class=\"line\">                <span class=\"type\">jse_value_t</span> v_tid = <span class=\"built_in\">jse_dup_value</span>(ctx, tid_value);</span><br><span class=\"line\">                ent-&gt;<span class=\"built_in\">setTid</span>(v_tid);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">jse_is_array</span>(ctx, res)) &#123;</span><br><span class=\"line\">            <span class=\"type\">jse_size_t</span> childlen = <span class=\"built_in\">jse_get_array_length</span>(ctx, res);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j=<span class=\"number\">0</span>; j&lt;childlen; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">unsigned</span> <span class=\"type\">int</span> cid = <span class=\"built_in\">jse_get_array_idx_uint</span>(ctx, res, j, <span class=\"number\">0</span>);</span><br><span class=\"line\">                DomEntity* ent = p-&gt;<span class=\"built_in\">entity</span>(cid);</span><br><span class=\"line\">                <span class=\"built_in\">AIOTJS_CHECK_NE</span>(ent, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">                ent-&gt;<span class=\"built_in\">setDiffOperationType</span>(DomEntityDiffOperationType::Add);</span><br><span class=\"line\">                <span class=\"built_in\">addChild</span>(ent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">jse_free_value</span>(ctx, res);</span><br><span class=\"line\">        <span class=\"built_in\">jse_free_value</span>(ctx, idx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, item);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, expValue);</span><br><span class=\"line\">    <span class=\"built_in\">AIOTJS_LOG_DEBUG</span>(<span class=\"string\">&quot;DomForFragment::build finished - &lt;%u&gt;&quot;</span>, <span class=\"built_in\">uid</span>());</span><br><span class=\"line\">    <span class=\"comment\">// 只有初始化的时候返回true表示需要flush，其它情况下延迟flush</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">isBindingEffect</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>dom_update_for_fragment是C++端的节点更新函数，它最终会触发节点的render函数更新子节点：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DomForFragment::render</span><span class=\"params\">(jse_context_ref ctx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归构造</span></span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> exp_obj = <span class=\"built_in\">jse_call</span>(ctx, exp_, JSE_UNDEFINED, <span class=\"number\">0</span>, &#123;&#125;);</span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> expValue = JSE_UNDEFINED;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* str_tid = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用JS端的求值函数获取for循环对应的list对象 expValue</span></span><br><span class=\"line\">    expValue = <span class=\"built_in\">get_from_js_expression</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    ....</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">    <span class=\"type\">jse_size_t</span> len = <span class=\"built_in\">jse_get_array_length</span>(ctx, expValue);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">jse_size_t</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//为每个element分别调用render函数</span></span><br><span class=\"line\">        <span class=\"type\">jse_value_t</span> idx = <span class=\"built_in\">jse_uint</span>(ctx, i);</span><br><span class=\"line\">        <span class=\"type\">jse_value_t</span> args[] = &#123;</span><br><span class=\"line\">            idx,</span><br><span class=\"line\">            item</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">jse_value_t</span> res = <span class=\"built_in\">jse_call</span>(ctx, render_, JSE_UNDEFINED, <span class=\"number\">2</span>, args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">jse_is_number</span>(res)) &#123;</span><br><span class=\"line\">            <span class=\"type\">unsigned</span> <span class=\"type\">int</span> cid = <span class=\"built_in\">jse_to_uint_def</span>(ctx, res, <span class=\"number\">0</span>);</span><br><span class=\"line\">            DomEntity* ent = p-&gt;<span class=\"built_in\">entity</span>(cid);</span><br><span class=\"line\">            <span class=\"built_in\">AIOTJS_CHECK_NE</span>(ent, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">            ent-&gt;<span class=\"built_in\">setDiffOperationType</span>(DomEntityDiffOperationType::Add);</span><br><span class=\"line\">            <span class=\"built_in\">addChild</span>(ent);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"built_in\">jse_is_undefined</span>(tid_value)) &#123;</span><br><span class=\"line\">                <span class=\"type\">jse_value_t</span> v_tid = <span class=\"built_in\">jse_dup_value</span>(ctx, tid_value);</span><br><span class=\"line\">                ent-&gt;<span class=\"built_in\">setTid</span>(v_tid);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">jse_is_array</span>(ctx, res)) &#123;</span><br><span class=\"line\">            <span class=\"type\">jse_size_t</span> childlen = <span class=\"built_in\">jse_get_array_length</span>(ctx, res);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j=<span class=\"number\">0</span>; j&lt;childlen; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">unsigned</span> <span class=\"type\">int</span> cid = <span class=\"built_in\">jse_get_array_idx_uint</span>(ctx, res, j, <span class=\"number\">0</span>);</span><br><span class=\"line\">                DomEntity* ent = p-&gt;<span class=\"built_in\">entity</span>(cid);</span><br><span class=\"line\">                <span class=\"built_in\">AIOTJS_CHECK_NE</span>(ent, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">                ent-&gt;<span class=\"built_in\">setDiffOperationType</span>(DomEntityDiffOperationType::Add);</span><br><span class=\"line\">                <span class=\"built_in\">addChild</span>(ent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">jse_free_value</span>(ctx, res);</span><br><span class=\"line\">        <span class=\"built_in\">jse_free_value</span>(ctx, idx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, item);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, expValue);</span><br><span class=\"line\">    <span class=\"built_in\">AIOTJS_LOG_DEBUG</span>(<span class=\"string\">&quot;DomForFragment::build finished - &lt;%u&gt;&quot;</span>, <span class=\"built_in\">uid</span>());</span><br><span class=\"line\">    <span class=\"comment\">// 只有初始化的时候返回true表示需要flush，其它情况下延迟flush</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">isBindingEffect</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"框架线程模型\"><a href=\"#框架线程模型\" class=\"headerlink\" title=\"框架线程模型\"></a>框架线程模型</h1><p>框架采用多线程模式，主要有如下两类线程：</p>\n<ul>\n<li>主线程：负责渲染，只有一个</li>\n<li>应用线程：负责执行JS代码，响应数据变更并更新vdom</li>\n</ul>\n<p>主线程和应用线程各启动一个uv loop进行消息处理，这两个线程通过libuv进行异步通信，主要有如下几种场景：</p>\n<ol>\n<li>应用线程退出后异步通知主线程退出</li>\n<li>应用线程更新vdom后异步通知主线程刷新ui</li>\n<li>系统消息（如应用后台，应用退出等）由主线程发出，通过libuv转到应用线程执行</li>\n</ol>\n<h1 id=\"渲染流程分析\"><a href=\"#渲染流程分析\" class=\"headerlink\" title=\"渲染流程分析\"></a>渲染流程分析</h1><h2 id=\"渲染流程图\"><a href=\"#渲染流程图\" class=\"headerlink\" title=\"渲染流程图\"></a>渲染流程图</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/33f7e704-ec72-4782-b8ff-1e58df0bef2d.svg\" alt=\"33f7e704-ec72-4782-b8ff-1e58df0bef2d\"></p>\n<h2 id=\"渲染流程\"><a href=\"#渲染流程\" class=\"headerlink\" title=\"渲染流程\"></a>渲染流程</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/6e8b9b04-5afd-47aa-9263-d3a379c1ac5b.svg\" alt=\"6e8b9b04-5afd-47aa-9263-d3a379c1ac5b\"></p>\n<h1 id=\"框架核心部分介绍\"><a href=\"#框架核心部分介绍\" class=\"headerlink\" title=\"框架核心部分介绍\"></a>框架核心部分介绍</h1><h2 id=\"核心类图\"><a href=\"#核心类图\" class=\"headerlink\" title=\"核心类图\"></a>核心类图</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/a8dc8b49-a594-454c-9309-164e3269c5e9.svg\" alt=\"a8dc8b49-a594-454c-9309-164e3269c5e9\"></p>\n<p>解释：</p>\n<ol>\n<li>Framework是内部使用的框架类表示，FrameworkExt从Framework继承并添加了对vela系统的消息集成，在vela中使用FrameworkExt表示唯一的框架实例</li>\n<li>FrameworkExt中会维护多个app实例，框架支持多应用切换</li>\n<li>每个app实例包含一个JS运行上下文环境和相关的libuv句柄，它们封装在RuntimeContxt中，作为Application的成员变量保存，即一个Application对象唯一对应一个js运行上下文。</li>\n<li>一个Applicatoin对象可以拥有多个Page对象，一个Page对象表示一个可显示的页面，实际是一颗vdom树</li>\n<li>Page对象的继承关系较为复杂，框架支持自定义组件，从逻辑上讲，一个Component包含一颗vdom子树，它可以被任意组合来形成最终的完整vdom树。Page是最顶层的Component组件，唯一。从继承关系上讲，DomDocument这一层应该去掉，在添加子组件支持后它的语义已被Component取代，这层抽象当前代码中没有意义但仍然存在。</li>\n</ol>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"excerpt":"<p>Vela上快应用框架的一些实现原理和编程实践</p>","more":"<h1 id=\"快应用框架构成\"><a href=\"#快应用框架构成\" class=\"headerlink\" title=\"快应用框架构成\"></a>快应用框架构成</h1><p>一个简单的图用来描述快应用框架的模块构成，主要由Native（C++）部分和JS部分（framework.js）构成。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/48c4d276-9d71-439a-a720-7f268da27d85.svg\" alt=\"48c4d276-9d71-439a-a720-7f268da27d85\"></p>\n<p>在框架的C++代码中，最核心的两大组件就是 quickjs和libuv，分别提供JS运行环境和异步消息循环机制。框架还用到了一些其他的C/C++库如libcurl作为http客户端，rapidjson提供json解析能力等。</p>\n<p>下面给出项目目录结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── bin                                     # 生成目录</span><br><span class=\"line\">│   ├── app                                 # 测试应用</span><br><span class=\"line\">│   ├── apps.json                           # 应用配置文件</span><br><span class=\"line\">│   ├── font                                # 应用字体资源</span><br><span class=\"line\">│   ├── quickapp</span><br><span class=\"line\">│   └── vapp                                # 项目生成的可执行文件</span><br><span class=\"line\">├── build                                   # cmake构建目录</span><br><span class=\"line\">├── CMakeLists.txt</span><br><span class=\"line\">├── deps                                    # 依赖项目录</span><br><span class=\"line\">│   ├── curl                                # 多协议文件传输库</span><br><span class=\"line\">│   ├── ext                                 # 扩展，主要是lvgl非标准扩展</span><br><span class=\"line\">│   ├── FFmpeg                              # 音视频编解码库</span><br><span class=\"line\">│   ├── freetype2                           # 字体渲染库</span><br><span class=\"line\">│   ├── libuv                               # 跨平台事件驱动的消息循环库</span><br><span class=\"line\">│   ├── littlefs                            # lvgl相关</span><br><span class=\"line\">│   ├── lv_conf.h</span><br><span class=\"line\">│   ├── lv_drivers</span><br><span class=\"line\">│   ├── lv_drv_conf.h</span><br><span class=\"line\">│   ├── lv_ffmpeg_interface</span><br><span class=\"line\">│   ├── lv_fs_interface</span><br><span class=\"line\">│   ├── lvgl                                # lvgl 嵌入式gui库</span><br><span class=\"line\">│   ├── lv_lib_freetype                     # lvgl的freetype库</span><br><span class=\"line\">│   ├── lv_lib_png                          # lvgl的png解码库</span><br><span class=\"line\">│   ├── quickjs                             # 嵌入式JS引擎</span><br><span class=\"line\">│   ├── rapidjson                           # Json库</span><br><span class=\"line\">│   ├── tools                               # 工具目录，目前存放了Ffmpeg编译脚本</span><br><span class=\"line\">│   ├── unqlite                             # no sql数据库</span><br><span class=\"line\">│   ├── uvws                                # 基于libuv实现的websocket库</span><br><span class=\"line\">│   ├── wasm3                               # web assembely支持库</span><br><span class=\"line\">│   └── yoga                                # yoga排版引擎</span><br><span class=\"line\">├── Kconfig                                 # 供vela使用的kconfg配置</span><br><span class=\"line\">├── Make.defs</span><br><span class=\"line\">├── Makefile                                # vela makefile</span><br><span class=\"line\">├── README.md                               # 本文件</span><br><span class=\"line\">├── src                                     # 源码</span><br><span class=\"line\">│   ├── aiotjs.h</span><br><span class=\"line\">│   ├── ajs_vm.cpp</span><br><span class=\"line\">│   ├── ....</span><br><span class=\"line\">│   ├── framework                           # 框架源码</span><br><span class=\"line\">│   ├── gui                                 # GUI相关代码，包含lvgl渲染器实现</span><br><span class=\"line\">│   ├── jse                                 # JS Environment JS环境相关</span><br><span class=\"line\">│   └── Kconfig</span><br><span class=\"line\">├── tests                                   # 测试</span><br><span class=\"line\">│   ├── gui</span><br><span class=\"line\">│   ├── helpers</span><br><span class=\"line\">│   ├── run.js</span><br><span class=\"line\">│   ├── ... </span><br><span class=\"line\">│   ├── test-feature-vibrator.js</span><br><span class=\"line\">│   ├── wasi</span><br><span class=\"line\">│   └── wasm</span><br><span class=\"line\">└── toolchain                               # 交叉编译相关</span><br><span class=\"line\">    └── cross-m32.cmake                     # linux 32位构建</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"框架启动流程分析\"><a href=\"#框架启动流程分析\" class=\"headerlink\" title=\"框架启动流程分析\"></a>框架启动流程分析</h1><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/6ca169bc-84af-4252-9758-54c853feefef.svg\" alt=\"6ca169bc-84af-4252-9758-54c853feefef\"></p>\n<p>框架的整个启动和执行流程较为复杂，里面涉及到了JS和C++的互调用。</p>\n<p>启动流程以C++的入口函数为入口点，会初始化quickjs，创建app，启动子线程并加载Native module和内置JS框架代码。</p>\n<p>然后流程转交到JS，由JS通过调用初始化时注册的Native函数来完成整个快应用的加载。</p>\n<h1 id=\"VDOM渲染流程分析\"><a href=\"#VDOM渲染流程分析\" class=\"headerlink\" title=\"VDOM渲染流程分析\"></a>VDOM渲染流程分析</h1><p>VDOM的创建和渲染出于性能考虑，放在了C++层实现，整个VDOM的创建由Native通过执行template上的渲染函数来创建。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">(<span class=\"params\"><span class=\"variable language_\">module</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\">vm</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> _vm_ = vm || <span class=\"variable language_\">this</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;div&quot;</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">          <span class=\"string\">&quot;page&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;home-page&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;, [</span><br><span class=\"line\">        aiot.<span class=\"title function_\">__ci__</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">shown</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> _vm_.<span class=\"property\">status</span> !== <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">          <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;text&quot;</span>, &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">                <span class=\"string\">&quot;text-time&quot;</span></span><br><span class=\"line\">              ],</span><br><span class=\"line\">              <span class=\"string\">&quot;value&quot;</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> _vm_.$t(<span class=\"string\">&quot;a.b&quot;</span>) &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">        aiot.<span class=\"title function_\">__ci__</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">shown</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> _vm_.<span class=\"property\">status</span> === <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">          <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;div&quot;</span>, &#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">                <span class=\"string\">&quot;body&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;launch-panel&quot;</span></span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;, [</span><br><span class=\"line\">              aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;image&quot;</span>, &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;src&quot;</span>: <span class=\"string\">&quot;/Common/logo.png&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">                  <span class=\"string\">&quot;logo&quot;</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">              &#125;),</span><br><span class=\"line\">              aiot.<span class=\"title function_\">__ce__</span>(<span class=\"string\">&quot;text&quot;</span>, &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;classList&quot;</span>: [</span><br><span class=\"line\">                  <span class=\"string\">&quot;app-name&quot;</span></span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"string\">&quot;value&quot;</span>: <span class=\"string\">&quot;航旅纵横&quot;</span></span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">            ])</span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">        aiot.<span class=\"title function_\">__ci__</span>(&#123;...&#125;),</span><br><span class=\"line\">        aiot.<span class=\"title function_\">__ci__</span>(&#123;...&#125;),</span><br><span class=\"line\">        ....</span><br><span class=\"line\">      ])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/***/</span></span><br><span class=\"line\">&#125;),</span><br></pre></td></tr></table></figure>\n\n<p>Template本身是一个嵌套结构，它被翻译成了对aiot.<strong>ce</strong>, aiot__cf__, aiot.__ci__等函数的嵌套调用，嵌套调用的过程就是在Native层完成整个dom树构建的过程。</p>\n<p>我们来看__cf__对应的C++源码，它用于创建一个逻辑循环节点：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">DomEntity* <span class=\"title\">dom_create_for_fragment</span><span class=\"params\">(jse_context_ref ctx, <span class=\"type\">jse_value_t</span> options, <span class=\"type\">jse_value_t</span> func)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">AIOTJS_LOG_DEBUG</span>(<span class=\"string\">&quot;dom_create_for_fragment ==================== &quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   ....</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建DomForFragment节点</span></span><br><span class=\"line\">    DomForFragment *frag = <span class=\"keyword\">new</span> <span class=\"built_in\">DomForFragment</span>();</span><br><span class=\"line\">    page-&gt;<span class=\"built_in\">addDomEntity</span>(frag);</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存JS端传入的表达式和render函数</span></span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> exp = <span class=\"built_in\">jse_get_object_property</span>(ctx, options, <span class=\"string\">&quot;exp&quot;</span>);</span><br><span class=\"line\">    frag-&gt;<span class=\"built_in\">setExpress</span>(<span class=\"built_in\">jse_dup_value</span>(ctx, exp));</span><br><span class=\"line\">    frag-&gt;<span class=\"built_in\">setRenderFunction</span>(<span class=\"built_in\">jse_dup_value</span>(ctx, func));</span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, exp);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置key或者$idx</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建effect函数</span></span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> eff = <span class=\"built_in\">create_effect</span>(ctx, dom_update_for_fragment, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">AIOTJS_LOG_DEBUG</span>(<span class=\"string\">&quot;AddEffect for %d&quot;</span>, frag-&gt;<span class=\"built_in\">uid</span>());</span><br><span class=\"line\">    <span class=\"comment\">//调用framework的effectWrap函数将effect函数传递给JS层保存</span></span><br><span class=\"line\">    frag-&gt;<span class=\"built_in\">addEffect</span>(ctx, <span class=\"built_in\">dom_effect</span>(ctx, eff, frag-&gt;<span class=\"built_in\">uid</span>(), <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, eff);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 返回创建好的frag vdom节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> frag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>dom_update_for_fragment是C++端的节点更新函数，它最终会触发节点的render函数更新子节点：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DomForFragment::render</span><span class=\"params\">(jse_context_ref ctx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归构造</span></span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> exp_obj = <span class=\"built_in\">jse_call</span>(ctx, exp_, JSE_UNDEFINED, <span class=\"number\">0</span>, &#123;&#125;);</span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> expValue = JSE_UNDEFINED;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* str_tid = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用JS端的求值函数获取for循环对应的list对象 expValue</span></span><br><span class=\"line\">    expValue = <span class=\"built_in\">get_from_js_expression</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    ....</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">    <span class=\"type\">jse_size_t</span> len = <span class=\"built_in\">jse_get_array_length</span>(ctx, expValue);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">jse_size_t</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//为每个element分别调用render函数</span></span><br><span class=\"line\">        <span class=\"type\">jse_value_t</span> idx = <span class=\"built_in\">jse_uint</span>(ctx, i);</span><br><span class=\"line\">        <span class=\"type\">jse_value_t</span> args[] = &#123;</span><br><span class=\"line\">            idx,</span><br><span class=\"line\">            item</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">jse_value_t</span> res = <span class=\"built_in\">jse_call</span>(ctx, render_, JSE_UNDEFINED, <span class=\"number\">2</span>, args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">jse_is_number</span>(res)) &#123;</span><br><span class=\"line\">            <span class=\"type\">unsigned</span> <span class=\"type\">int</span> cid = <span class=\"built_in\">jse_to_uint_def</span>(ctx, res, <span class=\"number\">0</span>);</span><br><span class=\"line\">            DomEntity* ent = p-&gt;<span class=\"built_in\">entity</span>(cid);</span><br><span class=\"line\">            <span class=\"built_in\">AIOTJS_CHECK_NE</span>(ent, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">            ent-&gt;<span class=\"built_in\">setDiffOperationType</span>(DomEntityDiffOperationType::Add);</span><br><span class=\"line\">            <span class=\"built_in\">addChild</span>(ent);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"built_in\">jse_is_undefined</span>(tid_value)) &#123;</span><br><span class=\"line\">                <span class=\"type\">jse_value_t</span> v_tid = <span class=\"built_in\">jse_dup_value</span>(ctx, tid_value);</span><br><span class=\"line\">                ent-&gt;<span class=\"built_in\">setTid</span>(v_tid);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">jse_is_array</span>(ctx, res)) &#123;</span><br><span class=\"line\">            <span class=\"type\">jse_size_t</span> childlen = <span class=\"built_in\">jse_get_array_length</span>(ctx, res);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j=<span class=\"number\">0</span>; j&lt;childlen; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">unsigned</span> <span class=\"type\">int</span> cid = <span class=\"built_in\">jse_get_array_idx_uint</span>(ctx, res, j, <span class=\"number\">0</span>);</span><br><span class=\"line\">                DomEntity* ent = p-&gt;<span class=\"built_in\">entity</span>(cid);</span><br><span class=\"line\">                <span class=\"built_in\">AIOTJS_CHECK_NE</span>(ent, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">                ent-&gt;<span class=\"built_in\">setDiffOperationType</span>(DomEntityDiffOperationType::Add);</span><br><span class=\"line\">                <span class=\"built_in\">addChild</span>(ent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">jse_free_value</span>(ctx, res);</span><br><span class=\"line\">        <span class=\"built_in\">jse_free_value</span>(ctx, idx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, item);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, expValue);</span><br><span class=\"line\">    <span class=\"built_in\">AIOTJS_LOG_DEBUG</span>(<span class=\"string\">&quot;DomForFragment::build finished - &lt;%u&gt;&quot;</span>, <span class=\"built_in\">uid</span>());</span><br><span class=\"line\">    <span class=\"comment\">// 只有初始化的时候返回true表示需要flush，其它情况下延迟flush</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">isBindingEffect</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>dom_update_for_fragment是C++端的节点更新函数，它最终会触发节点的render函数更新子节点：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DomForFragment::render</span><span class=\"params\">(jse_context_ref ctx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 递归构造</span></span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> exp_obj = <span class=\"built_in\">jse_call</span>(ctx, exp_, JSE_UNDEFINED, <span class=\"number\">0</span>, &#123;&#125;);</span><br><span class=\"line\">    <span class=\"type\">jse_value_t</span> expValue = JSE_UNDEFINED;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* str_tid = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用JS端的求值函数获取for循环对应的list对象 expValue</span></span><br><span class=\"line\">    expValue = <span class=\"built_in\">get_from_js_expression</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    ....</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">    <span class=\"type\">jse_size_t</span> len = <span class=\"built_in\">jse_get_array_length</span>(ctx, expValue);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">jse_size_t</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//为每个element分别调用render函数</span></span><br><span class=\"line\">        <span class=\"type\">jse_value_t</span> idx = <span class=\"built_in\">jse_uint</span>(ctx, i);</span><br><span class=\"line\">        <span class=\"type\">jse_value_t</span> args[] = &#123;</span><br><span class=\"line\">            idx,</span><br><span class=\"line\">            item</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">jse_value_t</span> res = <span class=\"built_in\">jse_call</span>(ctx, render_, JSE_UNDEFINED, <span class=\"number\">2</span>, args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">jse_is_number</span>(res)) &#123;</span><br><span class=\"line\">            <span class=\"type\">unsigned</span> <span class=\"type\">int</span> cid = <span class=\"built_in\">jse_to_uint_def</span>(ctx, res, <span class=\"number\">0</span>);</span><br><span class=\"line\">            DomEntity* ent = p-&gt;<span class=\"built_in\">entity</span>(cid);</span><br><span class=\"line\">            <span class=\"built_in\">AIOTJS_CHECK_NE</span>(ent, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">            ent-&gt;<span class=\"built_in\">setDiffOperationType</span>(DomEntityDiffOperationType::Add);</span><br><span class=\"line\">            <span class=\"built_in\">addChild</span>(ent);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"built_in\">jse_is_undefined</span>(tid_value)) &#123;</span><br><span class=\"line\">                <span class=\"type\">jse_value_t</span> v_tid = <span class=\"built_in\">jse_dup_value</span>(ctx, tid_value);</span><br><span class=\"line\">                ent-&gt;<span class=\"built_in\">setTid</span>(v_tid);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">jse_is_array</span>(ctx, res)) &#123;</span><br><span class=\"line\">            <span class=\"type\">jse_size_t</span> childlen = <span class=\"built_in\">jse_get_array_length</span>(ctx, res);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> j=<span class=\"number\">0</span>; j&lt;childlen; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">unsigned</span> <span class=\"type\">int</span> cid = <span class=\"built_in\">jse_get_array_idx_uint</span>(ctx, res, j, <span class=\"number\">0</span>);</span><br><span class=\"line\">                DomEntity* ent = p-&gt;<span class=\"built_in\">entity</span>(cid);</span><br><span class=\"line\">                <span class=\"built_in\">AIOTJS_CHECK_NE</span>(ent, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">                ent-&gt;<span class=\"built_in\">setDiffOperationType</span>(DomEntityDiffOperationType::Add);</span><br><span class=\"line\">                <span class=\"built_in\">addChild</span>(ent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">jse_free_value</span>(ctx, res);</span><br><span class=\"line\">        <span class=\"built_in\">jse_free_value</span>(ctx, idx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, item);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">jse_free_value</span>(ctx, expValue);</span><br><span class=\"line\">    <span class=\"built_in\">AIOTJS_LOG_DEBUG</span>(<span class=\"string\">&quot;DomForFragment::build finished - &lt;%u&gt;&quot;</span>, <span class=\"built_in\">uid</span>());</span><br><span class=\"line\">    <span class=\"comment\">// 只有初始化的时候返回true表示需要flush，其它情况下延迟flush</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">isBindingEffect</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"框架线程模型\"><a href=\"#框架线程模型\" class=\"headerlink\" title=\"框架线程模型\"></a>框架线程模型</h1><p>框架采用多线程模式，主要有如下两类线程：</p>\n<ul>\n<li>主线程：负责渲染，只有一个</li>\n<li>应用线程：负责执行JS代码，响应数据变更并更新vdom</li>\n</ul>\n<p>主线程和应用线程各启动一个uv loop进行消息处理，这两个线程通过libuv进行异步通信，主要有如下几种场景：</p>\n<ol>\n<li>应用线程退出后异步通知主线程退出</li>\n<li>应用线程更新vdom后异步通知主线程刷新ui</li>\n<li>系统消息（如应用后台，应用退出等）由主线程发出，通过libuv转到应用线程执行</li>\n</ol>\n<h1 id=\"渲染流程分析\"><a href=\"#渲染流程分析\" class=\"headerlink\" title=\"渲染流程分析\"></a>渲染流程分析</h1><h2 id=\"渲染流程图\"><a href=\"#渲染流程图\" class=\"headerlink\" title=\"渲染流程图\"></a>渲染流程图</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/33f7e704-ec72-4782-b8ff-1e58df0bef2d.svg\" alt=\"33f7e704-ec72-4782-b8ff-1e58df0bef2d\"></p>\n<h2 id=\"渲染流程\"><a href=\"#渲染流程\" class=\"headerlink\" title=\"渲染流程\"></a>渲染流程</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/6e8b9b04-5afd-47aa-9263-d3a379c1ac5b.svg\" alt=\"6e8b9b04-5afd-47aa-9263-d3a379c1ac5b\"></p>\n<h1 id=\"框架核心部分介绍\"><a href=\"#框架核心部分介绍\" class=\"headerlink\" title=\"框架核心部分介绍\"></a>框架核心部分介绍</h1><h2 id=\"核心类图\"><a href=\"#核心类图\" class=\"headerlink\" title=\"核心类图\"></a>核心类图</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/a8dc8b49-a594-454c-9309-164e3269c5e9.svg\" alt=\"a8dc8b49-a594-454c-9309-164e3269c5e9\"></p>\n<p>解释：</p>\n<ol>\n<li>Framework是内部使用的框架类表示，FrameworkExt从Framework继承并添加了对vela系统的消息集成，在vela中使用FrameworkExt表示唯一的框架实例</li>\n<li>FrameworkExt中会维护多个app实例，框架支持多应用切换</li>\n<li>每个app实例包含一个JS运行上下文环境和相关的libuv句柄，它们封装在RuntimeContxt中，作为Application的成员变量保存，即一个Application对象唯一对应一个js运行上下文。</li>\n<li>一个Applicatoin对象可以拥有多个Page对象，一个Page对象表示一个可显示的页面，实际是一颗vdom树</li>\n<li>Page对象的继承关系较为复杂，框架支持自定义组件，从逻辑上讲，一个Component包含一颗vdom子树，它可以被任意组合来形成最终的完整vdom树。Page是最顶层的Component组件，唯一。从继承关系上讲，DomDocument这一层应该去掉，在添加子组件支持后它的语义已被Component取代，这层抽象当前代码中没有意义但仍然存在。</li>\n</ol>"},{"title":"JS复习","keywords":"前端,面试,JS","description":"JS复习记录","top_img":"设置false不显示顶部图片","sticky":"数值越大越靠前","cover":"首页封面","comments":1,"abbrlink":"d9795d86","date":"2023-05-23T07:21:13.000Z","updated":"2023-05-23T07:21:13.000Z","_content":"\nJS复习记录\n\n<!-- more -->\n# 1. JS 的数据类型有哪些？\n- 基本数据类型（值类型）：Number、String、Boolean、Null、Undefined、Symbol、BigInt。保存在栈内存中。\n- 复杂数据类型（引用类型）：Object、Function、Array、RegExp、Date 基本包装类型及单体内置对象(Global、Math)等。\n\n>基本数据类型保存在栈里面，可以直接访问它的值；引用数据类型保存在堆里面，栈里面保存的是地址，通过栈里面的地址去访问堆里面的值。\n\n# 2.null 和 undefined 的区别？\n- null表示一个对象被定义了，值为“空值”。用法：\n① 作为函数的参数，表示该函数的参数不是对象。\n② 作为对象原型链的终点。\n- undefined表示不存在这个值。就是此处应该有一个值，但是还没有定义，当尝试读取时就会返回 undefined。用法：\n① 函数没有返回值时，默认返回 undefined。\n② 变量已声明，没有赋值时，为 undefined。\n③ 对象中没有赋值的属性，该属性的值为 undefined。\n④ 调用函数时，应该提供的参数没有提供，该参数等于 undefined。\n\n# 3. 如何判断 JS 的数据类型？\n\n\n\n## 1.typeof\n\ntypeof可以区分除了Null类型以外的其他基本数据类型，以及从对象类型中识别出函数（function）。\n其返回值有：number、string、boolean、undefined、symbol、bigint、function、object。\n其中, typeof null返回 \"object\"\n如果要识别null，可直接使用===全等运算符来判断。\n\n```js\ntypeof 1 // 'number'\ntypeof '1' // 'string'\ntypeof true // 'boolean'\ntypeof undefined // 'undefined'\ntypeof Symbol() // 'symbol'\ntypeof null // 'object'\ntypeof [] // 'object'\ntypeof {} // 'object'\ntypeof console // 'object'\ntypeof console.log // 'function'\n\n```\n\n## 2.instanceof\ninstanceof一般是用来判断引用数据类型，但不能正确判断基本数据类型，根据在原型链中查找判断当前数据的原型对象是否存在返回布尔类型。\n```js\n1 instanceof Number; // false\ntrue instanceof Boolean; // false\n'str' instanceof String; // false\n[] instanceof Array; // true\nfunction(){} instanceof Function; // true\n{} instanceof Object; // true\nlet date = new Date();\ndate instance of Date; // true\n```\n\n## 3. Object.prototype.toString\n\n```js\nObject.prototype.toString({}) // \"[object Object]\"\nObject.prototype.toString.call({}) // 同上结果，加上call也ok\nObject.prototype.toString.call(1) // \"[object Number]\"\nObject.prototype.toString.call('1') // \"[object String]\"\nObject.prototype.toString.call(true) // \"[object Boolean]\"\nObject.prototype.toString.call(function () {}) // \"[object Function]\"\nObject.prototype.toString.call(null) //\"[object Null]\"\nObject.prototype.toString.call(undefined) //\"[object Undefined]\"\nObject.prototype.toString.call(/123/g) //\"[object RegExp]\"\nObject.prototype.toString.call(new Date()) //\"[object Date]\"\nObject.prototype.toString.call([]) //\"[object Array]\"\nObject.prototype.toString.call(document) //\"[object HTMLDocument]\"\nObject.prototype.toString.call(window) //\"[object Window]\"\n```\n## 4. Array.isArray\nArray.isArray(value)可以判断 value 是否为数组。\n\n```js\nArray.isArray([]); // true\nArray.isArray({}); // false\nArray.isArray(1); // false\nArray.isArray('string'); // false\nArray.isArray(true); // false\n```\n# 3.如何遍历对象的属性？\n- 遍历自身可枚举的属性（可枚举、非继承属性）：Object.keys() 方法,该方法会返回一个由给定对象的自身可枚举属性组成的数组。\n- 遍历自身的所有属性（可枚举、不可枚举、非继承属性）：Object.getOwnPropertyNames()方法，该方法会返回一个由指定对象的所有自身属性组成的数组\n- 遍历可枚举的自身属性和继承属性：for ... in ...\n\n# 4. == 和 === 的区别？\n- ==：两个等号称为等值符，当等号两边的值为相同类型时比较值是否相同，类型不同时会发生类型的自动转换，转换为相同的类型后再做比较。\n- ===：三个等号称为等同符，当等号两边的值为相同类型时，直接比较等号两边的值，值相同则返回 true；若等号两边值的类型不同时直接返回 false。也就是三个等号既要判断类型也要判断值是否相等。\n\n# 5.如何判断两个对象是否相等？\n 1. Object.is(obj1, obj2)，判断两个对象都引用地址是否一致，true 则一致，false 不一致。\n\n2. 判断两个对象内容是否一致，思路是遍历对象的所有键名和键值是否都一致\n① 判断两个对象是否指向同一内存\n② 使用 Object.getOwnPropertyNames 获取对象所有键名数组\n③ 判断两个对象的键名数组是否相等\n④ 遍历键名，判断键值是否都相等\n\n```js\nfunction isObjValueEqual(a, b) {\n  // 判断两个对象是否指向同一内存，指向同一内存返回 true\n  if (a === b) return true;\n  // 获取两个对象的键名数组\n  let aProps = Object.getOwnPropertyNames(a);\n  let bProps = Object.getOwnPropertyNames(b);\n  // 判断两键名数组长度是否一致，不一致返回 false\n  if (aProps.length !== bProps.length) return false;\n  // 遍历对象的键值\n  for (let prop in a) {\n    // 判断 a 的键名，在 b 中是否存在，不存在，直接返回 false\n    if (b.hasOwnProperty(prop)) {\n      // 判断 a 的键值是否为对象，是对象的话需要递归；\n      // 不是对象，直接判断键值是否相等，不相等则返回 false\n      if (typeof a[prop] === 'object') {\n        if (!isObjValueEqual(a[prop], b[prop])) return false;\n      } else if (a[prop] !== b[prop]){\n        return false\n      }\n    } else {\n      return false\n    }\n  }\n  return true;\n}\n```\n\n# 6. 强制类型转换和隐式类型转换有哪些\n- 强制：\n转换成字符串: toString()、String()\n转换成数字：Number()、parseInt()、parseFloat()\n转换成布尔类型：Boolean()\n- 隐式：\n拼接字符串：let str = 1 + \"\";\n\n# 7. JS 中的作用域和作用域链\n\n- 作用域，即变量（变量作用域又称上下文）和函数生效（能被访问）的区域或集合。作用域决定了代码区块中变量和其他资源的可见性。一般可分为：全局作用域、局部作用域（函数作用域）、块级作用域。\n\n- 全局作用域：任何不在函数中或是大括号中声明的变量，都是在全局作用域下，全局作用域下声明的变量可以在程序的任意位置访问。\n- 局部作用域：也叫做函数作用域，如果一个变量是在函数内部声明的，它就在一个函数作用域下面。这些变量只能在函数内部访问，不能在函数以外去访问。\n块级作用域：凡是代码块就可以划分变量的作用域，这种作用域的规则就叫做块级作用域。\n\n- 作用域链：当在 JS 中使用一个变量时，JS 引擎会尝试在当前作用域下寻找该变量，如果没找到，再到它的上层作用域寻找，以此类推，直至找到该变量或是查找至全局作用域，如果在全局作用域里仍然找不到该变量，它就会在全局范围内隐式声明该变量(非严格模式下)或是直接报错。\n- js 采用的是静态作用域，所以函数的作用域在函数定义时就确定了\n\n# 8. JS 的预解析\n\nJS 代码的执行是由浏览器中的 JS 解析器来执行的，JS 解析器执行 JS 代码时，分为两个过程：预解析过程和代码执行过程。预解析分为变量预解析（变量提升）和函数预解析（函数提升）；代码执行是指按顺序从上至下执行。\n\n- 变量提升：把变量的声明提升到当前作用域的最前面，只提升声明，不提升赋值；\n- 函数提升：把函数的声明提升到当前作用域的最前面，只提升声明，不提升调用；\n\n>函数表达式的写法不存在函数提升\n\n>函数提升优先级高于变量提升，即函数提升在变量提升之上，且不会被同名变量声明时覆盖，但是会被同名变量赋值后覆盖\n\n# 9. 原型和原型链\n\nJS是面向对象的，每个实例对象都有一个__proto__属性，该属性指向它的原型对象。该实例的构造函数有一个原型属性prototype，与实例的__proto__属性指向同一个对象。同时，原型对象的constructor 指向构造函数本身。\n\n当一个对象在查找一个属性时，自身没有就会根据__proto__属性向它的原型进行查找，如果还是没有，则向它的原型的原型继续查找，直至查到Object.prototype.__proto__也就是null，这样就形成了原型链。\n\n# 10. 闭包\n\n在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。可以在一个内层函数中访问到其外层函数的作用域。\n\n闭包就是能够读取其他函数内部变量的函数。主要作用是解决变量污染问题，也可以用来延长局部变量的生命周期。\n- 优点：延长局部变量的生命周期\n- 缺点：会导致函数的变量一直保存在内存中，过多的闭包可能会导致内存泄漏\n\n# 11. new 操作符的实现机制\n\n1. 首先创建了一个新的空对象\n2. 设置原型，将对象的原型设置为函数的prototype对象。\n3. 让函数的this指向这个对象，执行构造函数的代码（为这个新对象添加属性）\n4. 判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\n\n```js\nfunction myNew(context) {\n  const obj = new Object();\n  obj.__proto__ = context.prototype;\n  const res = context.apply(obj, [...arguments].slice(1));\n  return typeof res === \"object\" ? res : obj;\n}\n```\n# 12. this 的理解？\n\n1. 概念：\nthis是 JS 的一个关键字，它是函数运行时，自动生成的一个内部对象，只能在函数内部使用，随着函数使用场合的不同，this的值会发生变化，但有一个总的原则：this指的是调用函数的那个对象。\n2. this的指向：\n- ① 作为普通函数执行时，this指向window，但在严格模式下this指向undefined。\n- ② 函数作为对象里的方法被调用时，this指向该对象.\n- ③ 当用new运算符调用构造函数时，this指向返回的这个对象。\n- ④ 箭头函数的this绑定看的是this所在函数定义在哪个对象下，就绑定哪个对象。- 如果存在嵌套，则this绑定到最近的一层对象上。\n- ⑤ call()、apply()、bind()是函数的三个方法，都可以显式的指定调用函数的this指向。\n\n\n # 13.call、apply、bind的区别以及手写实现\n\n- `call()`可以传递两个参数，第一个参数是指定函数内部中`this`的指向，第二个参数是函数调用时需要传递的参数。改变`this`指向后原函数会立即执行，且此方法只是临时改变`this`指向一次。\n\n```javascript\njavascript复制代码// 实现call方法\nFunction.prototype.myCall = function (context) {\n  // 判断调用对象\n  if (typeof this != \"function\") {\n    throw new Error(\"type error\");\n  }\n  // 首先获取参数\n  let args = [...arguments].slice(1);\n  let res = null;\n  // 判断context是否传入，如果没有，就设置为window\n  context = context || window;\n  // 将被调用的方法置入context的属性\n  // this 即为要调用的方法\n  context.fn = this;\n  // 执行要被调用的方法\n  res = context.fn(...args);\n  // 删除手动增加的属性方法\n  delete context.fn;\n  // 执行结果返回\n  return res;\n}\n```\n\n- `apply()`接受两个参数，第一个参数是`this`的指向，第二个参数是函数接受的参数，以`数组`的形式传入。改变`this`指向后原函数会立即执行，且此方法只是临时改变`this`指向一次。\n\n```javascript\njavascript复制代码// 实现apply方法\nFunction.prototype.myApply = function(context) {\n  if (typeof this != \"function\") {\n    throw new Error(\"type error\");\n  }\n  let res = null;\n  context = context || window;\n  // 使用 symbol 来保证属性唯一\n  // 也就是保证不会重写用户自己原来定义在context中的同名属性\n  const fnSymbol = Symbol();\n  context[fnSymbol] = this;\n  // 执行被调用的方法\n  if (arguments[1]) {\n    res = context[fnSymbol](...arguments[1]);\n  } else {\n    res = context[fnSymbol]();\n  }\n  delete context[fnSymbol];\n  return res;\n}\n```\n\n- `bind()`方法的第一参数也是`this`的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入)。改变`this`指向后不会立即执行，而是返回一个永久改变`this`指向的函数。\n\n```javascript\njavascript复制代码// 实现bind方法\nFunction.prototype.myBind = function (context) {\n  if (typeof this != \"function\") {\n    throw new Error(\"type error\");\n  }\n  let args = [...arguments].slice(1);\n  const fn = this;\n  return function Fn() {\n    return fn.apply(\n      this instanceof Fn ? this : context,\n      // 当前这个 arguments 是指 Fn 的参数\n      args.concat(...arguments)\n    );\n  };\n}\n```\n\n------\n\n共同点：改变函数执行时的上下文，简而言之就是改变函数运行时的`this`指向。\n 不同：\n\n- `call()`和`bind()`第二个参数是列表形式的；`apply()`第二个参数是数组形式。\n- `call()`和`apply()`是立即执行；`bind()`不会立即执行而是生成一个修改`this`之后的新函数。\n\n# 14. 箭头函数\n\n1. 箭头函数是定义函数一种新的方式，比普通函数定义更加方便和简单。\n2. 箭头函数不绑定`this`，会捕获其所在上下文的`this`，作为自己的`this`。\n3. 箭头函数不能用作构造函数，也就是说不可以使用`new`命令，否则会抛出错误。\n4. 箭头函数不绑定`arguments`，取而代之用`rest`参数解决，同时没有`super`和`new.target`。\n5. 使用`call`，`apply`，`bind`并不会改变箭头函数中的`this`指向。对箭头函数使用`call`或`apply`方法时，只会传入参数并调用函数；对箭头函数使用`bind`方法时，只会返回一个预设参数的新函数，并不会改变这个新函数的`this`指向。\n\n## \n\n# 15. 浅拷贝和深拷贝的实现\n\n\n\n`浅拷贝`：如果属性是基本类型，拷贝的就是基本类型的值；如果属性是引用类型，拷贝的就是内存地址。即浅拷贝是`拷贝一层`，深层次的引用类型则共享内存地址。常用的方法有：object.assign，扩展运算符等等\n\n```ini\nini复制代码var a = { count: 1, deep: { count: 2 } };\nvar b = Object.assign({}, a);\n// 或者\nvar c = {...a};\n\n// 实现一个浅拷贝\nfunction shallowClone(obj) {\n  const newObj = {};\n  for (let prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      newObj[prop] = obj[prop];\n    }\n  }\n  return newObj\n}\n```\n\n`深拷贝`：开辟一个新的栈，两个对象的属性完全相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性。\n\n```javascript\njavascript复制代码/**\n * 深拷贝\n * @param {Object} obj 要拷贝的对象\n * @param {Map} map 用于存储循环引用对象的地址\n */\n\nfunction deepClone(obj = {}, map = new Map()) {\n  if (obj === null) return obj // 如果是null或者undefined我就不进行拷贝操作\n  if (obj instanceof Date) return new Date(obj)\n  if (obj instanceof RegExp) return new RegExp(obj)\n  // 可能是对象或者普通的值  如果是函数的话是不需要深拷贝\n  if (typeof obj !== 'object') return obj\n  if (map.get(obj)) {\n    return map.get(obj);\n  }\n  let result = {}; // 初始化返回结果\n  if (\n    obj instanceof Array ||\n    // 加 || 的原因是为了防止 Array 的 prototype 被重写，Array.isArray 也是如此\n    Object.prototype.toString(obj) === \"[object Array]\"\n  ) {\n    result = [];\n  }\n  // 防止循环引用\n \n  for (const key in obj) {\n    // 保证 key 不是原型属性\n    if (obj.hasOwnProperty(key)) {\n      // 递归调用\n      result[key] = deepClone(obj[key], map);\n    }\n  }\n  return result;\n}\n```\n\n\n\n\n\n # 16. JavaScript 中内存泄漏的几种情况\n\n`内存泄漏`一般是指系统进程不再用到的内存，没有及时释放，造成内存资源浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。\n\n造成内存泄漏的原因有：\n\n1. `全局变量。`在局部作用域中，函数执行完毕后，变量就没有存在的必要了，垃圾回收机制很快的做出判断并回收；但是对于全局变量，很难判断什么时候不用这些变量，无法正常回收。\n    解决办法：\n    ① 尽量少使用全局变量；\n    ② 使用严格模式，在 js 文件头部或者函数的顶部加上`use strict`。\n2. `闭包引起的内存泄露。`闭包可以读取函数内部的变量，然后让这些变量始终保存在内存中，如果在使用结束后没有将局部变量清除，就可能导致内存泄露。\n    解决办法：将事件处理函数定义在外部，解除闭包。\n3. `被遗忘的定时器。`定时器`setInterval`或者`setTimeout`不再需要使用时，且没有被清除，导致定时器的回调函数及其内部依赖的变量都不能被回收，就会造成内存泄漏。\n    解决办法：当不需要定时器的时候，调用`clearInterval`或者`clearTimeout`手动清除。\n4. `事件监听。`垃圾回收机制不好判断事件是否需要被解除，导致`callback`不能被释放，此时需要手动解除绑定。\n    解决办法：及时使用`removeEventListener`移除事件监听。\n5. `元素引用没有清理。`\n    解决办法：移除元素后，手动设置元素的引用为`null`。\n6. `console`。传递给`console.log`的对象是不能被垃圾回收，可能会存在内存泄漏。\n    解决办法：清除不必要的`console`。\n\n# 17. 防抖和节流的区别，以及手写实现\n\n\n\n\n\n`防抖`：多次触发事件，事件处理函数只执行一次，并且是在触发操作结束时执行。也就是说，当一个事件被触发，准备执行事件函数前，会等待一定的时间，在这个等待时间内，如果没有再次被触发，那么就执行，如果又触发了，那就本次作废，重置等待时间，直到最终能执行。\n 主要应用场景：搜索框搜索输入，用户最后一次输入完，再发送请求；手机号、邮箱验证输入检测\n\n`节流`：事件触发后，规定时间内，事件处理函数不能再次被调用。也就是说在规定的时间内，函数只能被调用一次，且是最先被触发调用的那次。\n 主要应用场景：高频点击、表单重复提交等。\n\n```javascript\njavascript复制代码/*** 防抖函数 n 秒后再执行该事件，若在 n 秒内被重复触发，则重新计时\n   * @param func 要被防抖的函数\n   * @param wait 规定的时间\n   */\nfunction debounce(func, wait) {\n  let timeout;\n  return function () {\n    let context = this; // 保存this指向\n    let args = arguments; // 拿到event对象\n\n    clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      func.apply(context, args)\n    }, wait)\n  }\n}\n/*** 节流函数 n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效\n   * @param fn 要被节流的函数\n   * @param wait 规定的时间\n   */\nfunction throttled(fn, wait) {\n  let timer = null;\n  return function (...args) {\n    if (!timer) {\n      timer = setTimeout(() => {\n        fn.apply(this, args);\n        timer = null;\n      }, wait);\n    }\n  }\n}\n```\n\n# 18. EventLoop 事件循环\n\njs 是单线程运行的，当遇到一个异步事件后并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当一个异步事件返回结果后，js会将这个事件加入与当前执行栈不同的另一个队列--`事件队列（Task Queue）`。被放入事件队列不会立刻执行其回调，而是等待当前执行栈中的所有任务都执行完毕， 主线程处于闲置状态时，主线程会去查找事件队列是否有任务。如果有，那么主线程会从中取出排在第一位的事件，并把这个事件对应的回调放入执行栈中，然后执行其中的同步代码...，如此反复，这样就形成了一个无限的循环，这个过程被称为`事件循环（Event Loop）`。\n\n实际上,异步任务之间并不相同，它们的执行优先级也有区别。异步任务分两类：`微任务（micro task`）和`宏任务（macro task）`。\n\n微任务包括： `promise 的回调`、node 中的 `process.nextTick` 、对 Dom 变化监听的 `MutationObserver`。\n\n宏任务包括： script 脚本的执行，`setTimeout` 、`setInterval` 和`setImmediate` 一类的定时事件，还有如 I/O 操作，UI 渲染等。\n\n在一个事件循环中，异步事件返回结果后会被放到一个事件队列中。然而，根据这个异步事件的类型，这个事件实际上会被对应的`宏任务队列`或者`微任务队列`中去。并且在当前执行栈为空的时候，主线程会查看微任务队列是否有事件存在。如果不存在，那么再去宏任务队列中取出一个事件并把对应的回调加入当前执行栈；如果存在，则会依次执行队列中事件对应的回调，直到微任务队列为空，然后去宏任务队列中取出最前面的一个事件，把对应的回调加入当前执行栈...如此反复，进入循环。\n\n**在当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行**。\n\n# 19. Promise\n\n`Promise`异步编程的一种解决方案。`Promise`是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是`pending`、`fulfilled`和`rejected`，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 fulfilled 或者 rejected 状态，并且状态一经改变，就无法再改变了。状态的改变是通过`resolve()`和`reject()`函数来实现的，可以在异步操作结束后调用这两个函数改变 Promise 实例的状态。Promise 的原型上定义了一个 `then`方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。\n\n","source":"_posts/js/JS复习.md","raw":"---\ntitle: JS复习\ntags:\n  - 前端\n  - JS\ncategories: JS\nkeywords: '前端,面试,JS'\ndescription: JS复习记录\ntop_img: 设置false不显示顶部图片\nsticky: 数值越大越靠前\ncover: 首页封面\ncomments: false评论\nabbrlink: d9795d86\ndate: 2023-05-23 15:21:13\nupdated: 2023-05-23 15:21:13\n---\n\nJS复习记录\n\n<!-- more -->\n# 1. JS 的数据类型有哪些？\n- 基本数据类型（值类型）：Number、String、Boolean、Null、Undefined、Symbol、BigInt。保存在栈内存中。\n- 复杂数据类型（引用类型）：Object、Function、Array、RegExp、Date 基本包装类型及单体内置对象(Global、Math)等。\n\n>基本数据类型保存在栈里面，可以直接访问它的值；引用数据类型保存在堆里面，栈里面保存的是地址，通过栈里面的地址去访问堆里面的值。\n\n# 2.null 和 undefined 的区别？\n- null表示一个对象被定义了，值为“空值”。用法：\n① 作为函数的参数，表示该函数的参数不是对象。\n② 作为对象原型链的终点。\n- undefined表示不存在这个值。就是此处应该有一个值，但是还没有定义，当尝试读取时就会返回 undefined。用法：\n① 函数没有返回值时，默认返回 undefined。\n② 变量已声明，没有赋值时，为 undefined。\n③ 对象中没有赋值的属性，该属性的值为 undefined。\n④ 调用函数时，应该提供的参数没有提供，该参数等于 undefined。\n\n# 3. 如何判断 JS 的数据类型？\n\n\n\n## 1.typeof\n\ntypeof可以区分除了Null类型以外的其他基本数据类型，以及从对象类型中识别出函数（function）。\n其返回值有：number、string、boolean、undefined、symbol、bigint、function、object。\n其中, typeof null返回 \"object\"\n如果要识别null，可直接使用===全等运算符来判断。\n\n```js\ntypeof 1 // 'number'\ntypeof '1' // 'string'\ntypeof true // 'boolean'\ntypeof undefined // 'undefined'\ntypeof Symbol() // 'symbol'\ntypeof null // 'object'\ntypeof [] // 'object'\ntypeof {} // 'object'\ntypeof console // 'object'\ntypeof console.log // 'function'\n\n```\n\n## 2.instanceof\ninstanceof一般是用来判断引用数据类型，但不能正确判断基本数据类型，根据在原型链中查找判断当前数据的原型对象是否存在返回布尔类型。\n```js\n1 instanceof Number; // false\ntrue instanceof Boolean; // false\n'str' instanceof String; // false\n[] instanceof Array; // true\nfunction(){} instanceof Function; // true\n{} instanceof Object; // true\nlet date = new Date();\ndate instance of Date; // true\n```\n\n## 3. Object.prototype.toString\n\n```js\nObject.prototype.toString({}) // \"[object Object]\"\nObject.prototype.toString.call({}) // 同上结果，加上call也ok\nObject.prototype.toString.call(1) // \"[object Number]\"\nObject.prototype.toString.call('1') // \"[object String]\"\nObject.prototype.toString.call(true) // \"[object Boolean]\"\nObject.prototype.toString.call(function () {}) // \"[object Function]\"\nObject.prototype.toString.call(null) //\"[object Null]\"\nObject.prototype.toString.call(undefined) //\"[object Undefined]\"\nObject.prototype.toString.call(/123/g) //\"[object RegExp]\"\nObject.prototype.toString.call(new Date()) //\"[object Date]\"\nObject.prototype.toString.call([]) //\"[object Array]\"\nObject.prototype.toString.call(document) //\"[object HTMLDocument]\"\nObject.prototype.toString.call(window) //\"[object Window]\"\n```\n## 4. Array.isArray\nArray.isArray(value)可以判断 value 是否为数组。\n\n```js\nArray.isArray([]); // true\nArray.isArray({}); // false\nArray.isArray(1); // false\nArray.isArray('string'); // false\nArray.isArray(true); // false\n```\n# 3.如何遍历对象的属性？\n- 遍历自身可枚举的属性（可枚举、非继承属性）：Object.keys() 方法,该方法会返回一个由给定对象的自身可枚举属性组成的数组。\n- 遍历自身的所有属性（可枚举、不可枚举、非继承属性）：Object.getOwnPropertyNames()方法，该方法会返回一个由指定对象的所有自身属性组成的数组\n- 遍历可枚举的自身属性和继承属性：for ... in ...\n\n# 4. == 和 === 的区别？\n- ==：两个等号称为等值符，当等号两边的值为相同类型时比较值是否相同，类型不同时会发生类型的自动转换，转换为相同的类型后再做比较。\n- ===：三个等号称为等同符，当等号两边的值为相同类型时，直接比较等号两边的值，值相同则返回 true；若等号两边值的类型不同时直接返回 false。也就是三个等号既要判断类型也要判断值是否相等。\n\n# 5.如何判断两个对象是否相等？\n 1. Object.is(obj1, obj2)，判断两个对象都引用地址是否一致，true 则一致，false 不一致。\n\n2. 判断两个对象内容是否一致，思路是遍历对象的所有键名和键值是否都一致\n① 判断两个对象是否指向同一内存\n② 使用 Object.getOwnPropertyNames 获取对象所有键名数组\n③ 判断两个对象的键名数组是否相等\n④ 遍历键名，判断键值是否都相等\n\n```js\nfunction isObjValueEqual(a, b) {\n  // 判断两个对象是否指向同一内存，指向同一内存返回 true\n  if (a === b) return true;\n  // 获取两个对象的键名数组\n  let aProps = Object.getOwnPropertyNames(a);\n  let bProps = Object.getOwnPropertyNames(b);\n  // 判断两键名数组长度是否一致，不一致返回 false\n  if (aProps.length !== bProps.length) return false;\n  // 遍历对象的键值\n  for (let prop in a) {\n    // 判断 a 的键名，在 b 中是否存在，不存在，直接返回 false\n    if (b.hasOwnProperty(prop)) {\n      // 判断 a 的键值是否为对象，是对象的话需要递归；\n      // 不是对象，直接判断键值是否相等，不相等则返回 false\n      if (typeof a[prop] === 'object') {\n        if (!isObjValueEqual(a[prop], b[prop])) return false;\n      } else if (a[prop] !== b[prop]){\n        return false\n      }\n    } else {\n      return false\n    }\n  }\n  return true;\n}\n```\n\n# 6. 强制类型转换和隐式类型转换有哪些\n- 强制：\n转换成字符串: toString()、String()\n转换成数字：Number()、parseInt()、parseFloat()\n转换成布尔类型：Boolean()\n- 隐式：\n拼接字符串：let str = 1 + \"\";\n\n# 7. JS 中的作用域和作用域链\n\n- 作用域，即变量（变量作用域又称上下文）和函数生效（能被访问）的区域或集合。作用域决定了代码区块中变量和其他资源的可见性。一般可分为：全局作用域、局部作用域（函数作用域）、块级作用域。\n\n- 全局作用域：任何不在函数中或是大括号中声明的变量，都是在全局作用域下，全局作用域下声明的变量可以在程序的任意位置访问。\n- 局部作用域：也叫做函数作用域，如果一个变量是在函数内部声明的，它就在一个函数作用域下面。这些变量只能在函数内部访问，不能在函数以外去访问。\n块级作用域：凡是代码块就可以划分变量的作用域，这种作用域的规则就叫做块级作用域。\n\n- 作用域链：当在 JS 中使用一个变量时，JS 引擎会尝试在当前作用域下寻找该变量，如果没找到，再到它的上层作用域寻找，以此类推，直至找到该变量或是查找至全局作用域，如果在全局作用域里仍然找不到该变量，它就会在全局范围内隐式声明该变量(非严格模式下)或是直接报错。\n- js 采用的是静态作用域，所以函数的作用域在函数定义时就确定了\n\n# 8. JS 的预解析\n\nJS 代码的执行是由浏览器中的 JS 解析器来执行的，JS 解析器执行 JS 代码时，分为两个过程：预解析过程和代码执行过程。预解析分为变量预解析（变量提升）和函数预解析（函数提升）；代码执行是指按顺序从上至下执行。\n\n- 变量提升：把变量的声明提升到当前作用域的最前面，只提升声明，不提升赋值；\n- 函数提升：把函数的声明提升到当前作用域的最前面，只提升声明，不提升调用；\n\n>函数表达式的写法不存在函数提升\n\n>函数提升优先级高于变量提升，即函数提升在变量提升之上，且不会被同名变量声明时覆盖，但是会被同名变量赋值后覆盖\n\n# 9. 原型和原型链\n\nJS是面向对象的，每个实例对象都有一个__proto__属性，该属性指向它的原型对象。该实例的构造函数有一个原型属性prototype，与实例的__proto__属性指向同一个对象。同时，原型对象的constructor 指向构造函数本身。\n\n当一个对象在查找一个属性时，自身没有就会根据__proto__属性向它的原型进行查找，如果还是没有，则向它的原型的原型继续查找，直至查到Object.prototype.__proto__也就是null，这样就形成了原型链。\n\n# 10. 闭包\n\n在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。可以在一个内层函数中访问到其外层函数的作用域。\n\n闭包就是能够读取其他函数内部变量的函数。主要作用是解决变量污染问题，也可以用来延长局部变量的生命周期。\n- 优点：延长局部变量的生命周期\n- 缺点：会导致函数的变量一直保存在内存中，过多的闭包可能会导致内存泄漏\n\n# 11. new 操作符的实现机制\n\n1. 首先创建了一个新的空对象\n2. 设置原型，将对象的原型设置为函数的prototype对象。\n3. 让函数的this指向这个对象，执行构造函数的代码（为这个新对象添加属性）\n4. 判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\n\n```js\nfunction myNew(context) {\n  const obj = new Object();\n  obj.__proto__ = context.prototype;\n  const res = context.apply(obj, [...arguments].slice(1));\n  return typeof res === \"object\" ? res : obj;\n}\n```\n# 12. this 的理解？\n\n1. 概念：\nthis是 JS 的一个关键字，它是函数运行时，自动生成的一个内部对象，只能在函数内部使用，随着函数使用场合的不同，this的值会发生变化，但有一个总的原则：this指的是调用函数的那个对象。\n2. this的指向：\n- ① 作为普通函数执行时，this指向window，但在严格模式下this指向undefined。\n- ② 函数作为对象里的方法被调用时，this指向该对象.\n- ③ 当用new运算符调用构造函数时，this指向返回的这个对象。\n- ④ 箭头函数的this绑定看的是this所在函数定义在哪个对象下，就绑定哪个对象。- 如果存在嵌套，则this绑定到最近的一层对象上。\n- ⑤ call()、apply()、bind()是函数的三个方法，都可以显式的指定调用函数的this指向。\n\n\n # 13.call、apply、bind的区别以及手写实现\n\n- `call()`可以传递两个参数，第一个参数是指定函数内部中`this`的指向，第二个参数是函数调用时需要传递的参数。改变`this`指向后原函数会立即执行，且此方法只是临时改变`this`指向一次。\n\n```javascript\njavascript复制代码// 实现call方法\nFunction.prototype.myCall = function (context) {\n  // 判断调用对象\n  if (typeof this != \"function\") {\n    throw new Error(\"type error\");\n  }\n  // 首先获取参数\n  let args = [...arguments].slice(1);\n  let res = null;\n  // 判断context是否传入，如果没有，就设置为window\n  context = context || window;\n  // 将被调用的方法置入context的属性\n  // this 即为要调用的方法\n  context.fn = this;\n  // 执行要被调用的方法\n  res = context.fn(...args);\n  // 删除手动增加的属性方法\n  delete context.fn;\n  // 执行结果返回\n  return res;\n}\n```\n\n- `apply()`接受两个参数，第一个参数是`this`的指向，第二个参数是函数接受的参数，以`数组`的形式传入。改变`this`指向后原函数会立即执行，且此方法只是临时改变`this`指向一次。\n\n```javascript\njavascript复制代码// 实现apply方法\nFunction.prototype.myApply = function(context) {\n  if (typeof this != \"function\") {\n    throw new Error(\"type error\");\n  }\n  let res = null;\n  context = context || window;\n  // 使用 symbol 来保证属性唯一\n  // 也就是保证不会重写用户自己原来定义在context中的同名属性\n  const fnSymbol = Symbol();\n  context[fnSymbol] = this;\n  // 执行被调用的方法\n  if (arguments[1]) {\n    res = context[fnSymbol](...arguments[1]);\n  } else {\n    res = context[fnSymbol]();\n  }\n  delete context[fnSymbol];\n  return res;\n}\n```\n\n- `bind()`方法的第一参数也是`this`的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入)。改变`this`指向后不会立即执行，而是返回一个永久改变`this`指向的函数。\n\n```javascript\njavascript复制代码// 实现bind方法\nFunction.prototype.myBind = function (context) {\n  if (typeof this != \"function\") {\n    throw new Error(\"type error\");\n  }\n  let args = [...arguments].slice(1);\n  const fn = this;\n  return function Fn() {\n    return fn.apply(\n      this instanceof Fn ? this : context,\n      // 当前这个 arguments 是指 Fn 的参数\n      args.concat(...arguments)\n    );\n  };\n}\n```\n\n------\n\n共同点：改变函数执行时的上下文，简而言之就是改变函数运行时的`this`指向。\n 不同：\n\n- `call()`和`bind()`第二个参数是列表形式的；`apply()`第二个参数是数组形式。\n- `call()`和`apply()`是立即执行；`bind()`不会立即执行而是生成一个修改`this`之后的新函数。\n\n# 14. 箭头函数\n\n1. 箭头函数是定义函数一种新的方式，比普通函数定义更加方便和简单。\n2. 箭头函数不绑定`this`，会捕获其所在上下文的`this`，作为自己的`this`。\n3. 箭头函数不能用作构造函数，也就是说不可以使用`new`命令，否则会抛出错误。\n4. 箭头函数不绑定`arguments`，取而代之用`rest`参数解决，同时没有`super`和`new.target`。\n5. 使用`call`，`apply`，`bind`并不会改变箭头函数中的`this`指向。对箭头函数使用`call`或`apply`方法时，只会传入参数并调用函数；对箭头函数使用`bind`方法时，只会返回一个预设参数的新函数，并不会改变这个新函数的`this`指向。\n\n## \n\n# 15. 浅拷贝和深拷贝的实现\n\n\n\n`浅拷贝`：如果属性是基本类型，拷贝的就是基本类型的值；如果属性是引用类型，拷贝的就是内存地址。即浅拷贝是`拷贝一层`，深层次的引用类型则共享内存地址。常用的方法有：object.assign，扩展运算符等等\n\n```ini\nini复制代码var a = { count: 1, deep: { count: 2 } };\nvar b = Object.assign({}, a);\n// 或者\nvar c = {...a};\n\n// 实现一个浅拷贝\nfunction shallowClone(obj) {\n  const newObj = {};\n  for (let prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      newObj[prop] = obj[prop];\n    }\n  }\n  return newObj\n}\n```\n\n`深拷贝`：开辟一个新的栈，两个对象的属性完全相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性。\n\n```javascript\njavascript复制代码/**\n * 深拷贝\n * @param {Object} obj 要拷贝的对象\n * @param {Map} map 用于存储循环引用对象的地址\n */\n\nfunction deepClone(obj = {}, map = new Map()) {\n  if (obj === null) return obj // 如果是null或者undefined我就不进行拷贝操作\n  if (obj instanceof Date) return new Date(obj)\n  if (obj instanceof RegExp) return new RegExp(obj)\n  // 可能是对象或者普通的值  如果是函数的话是不需要深拷贝\n  if (typeof obj !== 'object') return obj\n  if (map.get(obj)) {\n    return map.get(obj);\n  }\n  let result = {}; // 初始化返回结果\n  if (\n    obj instanceof Array ||\n    // 加 || 的原因是为了防止 Array 的 prototype 被重写，Array.isArray 也是如此\n    Object.prototype.toString(obj) === \"[object Array]\"\n  ) {\n    result = [];\n  }\n  // 防止循环引用\n \n  for (const key in obj) {\n    // 保证 key 不是原型属性\n    if (obj.hasOwnProperty(key)) {\n      // 递归调用\n      result[key] = deepClone(obj[key], map);\n    }\n  }\n  return result;\n}\n```\n\n\n\n\n\n # 16. JavaScript 中内存泄漏的几种情况\n\n`内存泄漏`一般是指系统进程不再用到的内存，没有及时释放，造成内存资源浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。\n\n造成内存泄漏的原因有：\n\n1. `全局变量。`在局部作用域中，函数执行完毕后，变量就没有存在的必要了，垃圾回收机制很快的做出判断并回收；但是对于全局变量，很难判断什么时候不用这些变量，无法正常回收。\n    解决办法：\n    ① 尽量少使用全局变量；\n    ② 使用严格模式，在 js 文件头部或者函数的顶部加上`use strict`。\n2. `闭包引起的内存泄露。`闭包可以读取函数内部的变量，然后让这些变量始终保存在内存中，如果在使用结束后没有将局部变量清除，就可能导致内存泄露。\n    解决办法：将事件处理函数定义在外部，解除闭包。\n3. `被遗忘的定时器。`定时器`setInterval`或者`setTimeout`不再需要使用时，且没有被清除，导致定时器的回调函数及其内部依赖的变量都不能被回收，就会造成内存泄漏。\n    解决办法：当不需要定时器的时候，调用`clearInterval`或者`clearTimeout`手动清除。\n4. `事件监听。`垃圾回收机制不好判断事件是否需要被解除，导致`callback`不能被释放，此时需要手动解除绑定。\n    解决办法：及时使用`removeEventListener`移除事件监听。\n5. `元素引用没有清理。`\n    解决办法：移除元素后，手动设置元素的引用为`null`。\n6. `console`。传递给`console.log`的对象是不能被垃圾回收，可能会存在内存泄漏。\n    解决办法：清除不必要的`console`。\n\n# 17. 防抖和节流的区别，以及手写实现\n\n\n\n\n\n`防抖`：多次触发事件，事件处理函数只执行一次，并且是在触发操作结束时执行。也就是说，当一个事件被触发，准备执行事件函数前，会等待一定的时间，在这个等待时间内，如果没有再次被触发，那么就执行，如果又触发了，那就本次作废，重置等待时间，直到最终能执行。\n 主要应用场景：搜索框搜索输入，用户最后一次输入完，再发送请求；手机号、邮箱验证输入检测\n\n`节流`：事件触发后，规定时间内，事件处理函数不能再次被调用。也就是说在规定的时间内，函数只能被调用一次，且是最先被触发调用的那次。\n 主要应用场景：高频点击、表单重复提交等。\n\n```javascript\njavascript复制代码/*** 防抖函数 n 秒后再执行该事件，若在 n 秒内被重复触发，则重新计时\n   * @param func 要被防抖的函数\n   * @param wait 规定的时间\n   */\nfunction debounce(func, wait) {\n  let timeout;\n  return function () {\n    let context = this; // 保存this指向\n    let args = arguments; // 拿到event对象\n\n    clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      func.apply(context, args)\n    }, wait)\n  }\n}\n/*** 节流函数 n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效\n   * @param fn 要被节流的函数\n   * @param wait 规定的时间\n   */\nfunction throttled(fn, wait) {\n  let timer = null;\n  return function (...args) {\n    if (!timer) {\n      timer = setTimeout(() => {\n        fn.apply(this, args);\n        timer = null;\n      }, wait);\n    }\n  }\n}\n```\n\n# 18. EventLoop 事件循环\n\njs 是单线程运行的，当遇到一个异步事件后并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当一个异步事件返回结果后，js会将这个事件加入与当前执行栈不同的另一个队列--`事件队列（Task Queue）`。被放入事件队列不会立刻执行其回调，而是等待当前执行栈中的所有任务都执行完毕， 主线程处于闲置状态时，主线程会去查找事件队列是否有任务。如果有，那么主线程会从中取出排在第一位的事件，并把这个事件对应的回调放入执行栈中，然后执行其中的同步代码...，如此反复，这样就形成了一个无限的循环，这个过程被称为`事件循环（Event Loop）`。\n\n实际上,异步任务之间并不相同，它们的执行优先级也有区别。异步任务分两类：`微任务（micro task`）和`宏任务（macro task）`。\n\n微任务包括： `promise 的回调`、node 中的 `process.nextTick` 、对 Dom 变化监听的 `MutationObserver`。\n\n宏任务包括： script 脚本的执行，`setTimeout` 、`setInterval` 和`setImmediate` 一类的定时事件，还有如 I/O 操作，UI 渲染等。\n\n在一个事件循环中，异步事件返回结果后会被放到一个事件队列中。然而，根据这个异步事件的类型，这个事件实际上会被对应的`宏任务队列`或者`微任务队列`中去。并且在当前执行栈为空的时候，主线程会查看微任务队列是否有事件存在。如果不存在，那么再去宏任务队列中取出一个事件并把对应的回调加入当前执行栈；如果存在，则会依次执行队列中事件对应的回调，直到微任务队列为空，然后去宏任务队列中取出最前面的一个事件，把对应的回调加入当前执行栈...如此反复，进入循环。\n\n**在当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行**。\n\n# 19. Promise\n\n`Promise`异步编程的一种解决方案。`Promise`是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是`pending`、`fulfilled`和`rejected`，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 fulfilled 或者 rejected 状态，并且状态一经改变，就无法再改变了。状态的改变是通过`resolve()`和`reject()`函数来实现的，可以在异步操作结束后调用这两个函数改变 Promise 实例的状态。Promise 的原型上定义了一个 `then`方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。\n\n","slug":"js/JS复习","published":1,"layout":"post","photos":[],"link":"","_id":"clijtrgc00003yswhd9017jz3","content":"<p>JS复习记录</p>\n<span id=\"more\"></span>\n<h1 id=\"1-JS-的数据类型有哪些？\"><a href=\"#1-JS-的数据类型有哪些？\" class=\"headerlink\" title=\"1. JS 的数据类型有哪些？\"></a>1. JS 的数据类型有哪些？</h1><ul>\n<li>基本数据类型（值类型）：Number、String、Boolean、Null、Undefined、Symbol、BigInt。保存在栈内存中。</li>\n<li>复杂数据类型（引用类型）：Object、Function、Array、RegExp、Date 基本包装类型及单体内置对象(Global、Math)等。</li>\n</ul>\n<blockquote>\n<p>基本数据类型保存在栈里面，可以直接访问它的值；引用数据类型保存在堆里面，栈里面保存的是地址，通过栈里面的地址去访问堆里面的值。</p>\n</blockquote>\n<h1 id=\"2-null-和-undefined-的区别？\"><a href=\"#2-null-和-undefined-的区别？\" class=\"headerlink\" title=\"2.null 和 undefined 的区别？\"></a>2.null 和 undefined 的区别？</h1><ul>\n<li>null表示一个对象被定义了，值为“空值”。用法：<br>① 作为函数的参数，表示该函数的参数不是对象。<br>② 作为对象原型链的终点。</li>\n<li>undefined表示不存在这个值。就是此处应该有一个值，但是还没有定义，当尝试读取时就会返回 undefined。用法：<br>① 函数没有返回值时，默认返回 undefined。<br>② 变量已声明，没有赋值时，为 undefined。<br>③ 对象中没有赋值的属性，该属性的值为 undefined。<br>④ 调用函数时，应该提供的参数没有提供，该参数等于 undefined。</li>\n</ul>\n<h1 id=\"3-如何判断-JS-的数据类型？\"><a href=\"#3-如何判断-JS-的数据类型？\" class=\"headerlink\" title=\"3. 如何判断 JS 的数据类型？\"></a>3. 如何判断 JS 的数据类型？</h1><h2 id=\"1-typeof\"><a href=\"#1-typeof\" class=\"headerlink\" title=\"1.typeof\"></a>1.typeof</h2><p>typeof可以区分除了Null类型以外的其他基本数据类型，以及从对象类型中识别出函数（function）。<br>其返回值有：number、string、boolean、undefined、symbol、bigint、function、object。<br>其中, typeof null返回 “object”<br>如果要识别null，可直接使用===全等运算符来判断。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">1</span> <span class=\"comment\">// &#x27;number&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"comment\">// &#x27;string&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span> <span class=\"comment\">// &#x27;boolean&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> <span class=\"comment\">// &#x27;undefined&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span>() <span class=\"comment\">// &#x27;symbol&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span> <span class=\"comment\">// &#x27;object&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [] <span class=\"comment\">// &#x27;object&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125; <span class=\"comment\">// &#x27;object&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"variable language_\">console</span> <span class=\"comment\">// &#x27;object&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"variable language_\">console</span>.<span class=\"property\">log</span> <span class=\"comment\">// &#x27;function&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-instanceof\"><a href=\"#2-instanceof\" class=\"headerlink\" title=\"2.instanceof\"></a>2.instanceof</h2><p>instanceof一般是用来判断引用数据类型，但不能正确判断基本数据类型，根据在原型链中查找判断当前数据的原型对象是否存在返回布尔类型。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Number</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">true</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Boolean</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"string\">&#x27;str&#x27;</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">[] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Function</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\">&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">date instance <span class=\"keyword\">of</span> <span class=\"title class_\">Date</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Object-prototype-toString\"><a href=\"#3-Object-prototype-toString\" class=\"headerlink\" title=\"3. Object.prototype.toString\"></a>3. Object.prototype.toString</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">toString</span>(&#123;&#125;) <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(&#123;&#125;) <span class=\"comment\">// 同上结果，加上call也ok</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"number\">1</span>) <span class=\"comment\">// &quot;[object Number]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;1&#x27;</span>) <span class=\"comment\">// &quot;[object String]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">true</span>) <span class=\"comment\">// &quot;[object Boolean]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;) <span class=\"comment\">// &quot;[object Function]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>) <span class=\"comment\">//&quot;[object Null]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>) <span class=\"comment\">//&quot;[object Undefined]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"regexp\">/123/g</span>) <span class=\"comment\">//&quot;[object RegExp]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()) <span class=\"comment\">//&quot;[object Date]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>([]) <span class=\"comment\">//&quot;[object Array]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">document</span>) <span class=\"comment\">//&quot;[object HTMLDocument]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">window</span>) <span class=\"comment\">//&quot;[object Window]&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-Array-isArray\"><a href=\"#4-Array-isArray\" class=\"headerlink\" title=\"4. Array.isArray\"></a>4. Array.isArray</h2><p>Array.isArray(value)可以判断 value 是否为数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>([]); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(&#123;&#125;); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"number\">1</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"string\">&#x27;string&#x27;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"literal\">true</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-如何遍历对象的属性？\"><a href=\"#3-如何遍历对象的属性？\" class=\"headerlink\" title=\"3.如何遍历对象的属性？\"></a>3.如何遍历对象的属性？</h1><ul>\n<li>遍历自身可枚举的属性（可枚举、非继承属性）：Object.keys() 方法,该方法会返回一个由给定对象的自身可枚举属性组成的数组。</li>\n<li>遍历自身的所有属性（可枚举、不可枚举、非继承属性）：Object.getOwnPropertyNames()方法，该方法会返回一个由指定对象的所有自身属性组成的数组</li>\n<li>遍历可枚举的自身属性和继承属性：for … in …</li>\n</ul>\n<h1 id=\"4-和-的区别？\"><a href=\"#4-和-的区别？\" class=\"headerlink\" title=\"4. == 和 === 的区别？\"></a>4. == 和 === 的区别？</h1><ul>\n<li>==：两个等号称为等值符，当等号两边的值为相同类型时比较值是否相同，类型不同时会发生类型的自动转换，转换为相同的类型后再做比较。</li>\n<li>===：三个等号称为等同符，当等号两边的值为相同类型时，直接比较等号两边的值，值相同则返回 true；若等号两边值的类型不同时直接返回 false。也就是三个等号既要判断类型也要判断值是否相等。</li>\n</ul>\n<h1 id=\"5-如何判断两个对象是否相等？\"><a href=\"#5-如何判断两个对象是否相等？\" class=\"headerlink\" title=\"5.如何判断两个对象是否相等？\"></a>5.如何判断两个对象是否相等？</h1><ol>\n<li><p>Object.is(obj1, obj2)，判断两个对象都引用地址是否一致，true 则一致，false 不一致。</p>\n</li>\n<li><p>判断两个对象内容是否一致，思路是遍历对象的所有键名和键值是否都一致<br>① 判断两个对象是否指向同一内存<br>② 使用 Object.getOwnPropertyNames 获取对象所有键名数组<br>③ 判断两个对象的键名数组是否相等<br>④ 遍历键名，判断键值是否都相等</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isObjValueEqual</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断两个对象是否指向同一内存，指向同一内存返回 true</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 获取两个对象的键名数组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> aProps = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyNames</span>(a);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bProps = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyNames</span>(b);</span><br><span class=\"line\">  <span class=\"comment\">// 判断两键名数组长度是否一致，不一致返回 false</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (aProps.<span class=\"property\">length</span> !== bProps.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历对象的键值</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> prop <span class=\"keyword\">in</span> a) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断 a 的键名，在 b 中是否存在，不存在，直接返回 false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b.<span class=\"title function_\">hasOwnProperty</span>(prop)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 判断 a 的键值是否为对象，是对象的话需要递归；</span></span><br><span class=\"line\">      <span class=\"comment\">// 不是对象，直接判断键值是否相等，不相等则返回 false</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a[prop] === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title function_\">isObjValueEqual</span>(a[prop], b[prop])) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[prop] !== b[prop])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-强制类型转换和隐式类型转换有哪些\"><a href=\"#6-强制类型转换和隐式类型转换有哪些\" class=\"headerlink\" title=\"6. 强制类型转换和隐式类型转换有哪些\"></a>6. 强制类型转换和隐式类型转换有哪些</h1><ul>\n<li>强制：<br>转换成字符串: toString()、String()<br>转换成数字：Number()、parseInt()、parseFloat()<br>转换成布尔类型：Boolean()</li>\n<li>隐式：<br>拼接字符串：let str = 1 + “”;</li>\n</ul>\n<h1 id=\"7-JS-中的作用域和作用域链\"><a href=\"#7-JS-中的作用域和作用域链\" class=\"headerlink\" title=\"7. JS 中的作用域和作用域链\"></a>7. JS 中的作用域和作用域链</h1><ul>\n<li><p>作用域，即变量（变量作用域又称上下文）和函数生效（能被访问）的区域或集合。作用域决定了代码区块中变量和其他资源的可见性。一般可分为：全局作用域、局部作用域（函数作用域）、块级作用域。</p>\n</li>\n<li><p>全局作用域：任何不在函数中或是大括号中声明的变量，都是在全局作用域下，全局作用域下声明的变量可以在程序的任意位置访问。</p>\n</li>\n<li><p>局部作用域：也叫做函数作用域，如果一个变量是在函数内部声明的，它就在一个函数作用域下面。这些变量只能在函数内部访问，不能在函数以外去访问。<br>块级作用域：凡是代码块就可以划分变量的作用域，这种作用域的规则就叫做块级作用域。</p>\n</li>\n<li><p>作用域链：当在 JS 中使用一个变量时，JS 引擎会尝试在当前作用域下寻找该变量，如果没找到，再到它的上层作用域寻找，以此类推，直至找到该变量或是查找至全局作用域，如果在全局作用域里仍然找不到该变量，它就会在全局范围内隐式声明该变量(非严格模式下)或是直接报错。</p>\n</li>\n<li><p>js 采用的是静态作用域，所以函数的作用域在函数定义时就确定了</p>\n</li>\n</ul>\n<h1 id=\"8-JS-的预解析\"><a href=\"#8-JS-的预解析\" class=\"headerlink\" title=\"8. JS 的预解析\"></a>8. JS 的预解析</h1><p>JS 代码的执行是由浏览器中的 JS 解析器来执行的，JS 解析器执行 JS 代码时，分为两个过程：预解析过程和代码执行过程。预解析分为变量预解析（变量提升）和函数预解析（函数提升）；代码执行是指按顺序从上至下执行。</p>\n<ul>\n<li>变量提升：把变量的声明提升到当前作用域的最前面，只提升声明，不提升赋值；</li>\n<li>函数提升：把函数的声明提升到当前作用域的最前面，只提升声明，不提升调用；</li>\n</ul>\n<blockquote>\n<p>函数表达式的写法不存在函数提升</p>\n</blockquote>\n<blockquote>\n<p>函数提升优先级高于变量提升，即函数提升在变量提升之上，且不会被同名变量声明时覆盖，但是会被同名变量赋值后覆盖</p>\n</blockquote>\n<h1 id=\"9-原型和原型链\"><a href=\"#9-原型和原型链\" class=\"headerlink\" title=\"9. 原型和原型链\"></a>9. 原型和原型链</h1><p>JS是面向对象的，每个实例对象都有一个__proto__属性，该属性指向它的原型对象。该实例的构造函数有一个原型属性prototype，与实例的__proto__属性指向同一个对象。同时，原型对象的constructor 指向构造函数本身。</p>\n<p>当一个对象在查找一个属性时，自身没有就会根据__proto__属性向它的原型进行查找，如果还是没有，则向它的原型的原型继续查找，直至查到Object.prototype.__proto__也就是null，这样就形成了原型链。</p>\n<h1 id=\"10-闭包\"><a href=\"#10-闭包\" class=\"headerlink\" title=\"10. 闭包\"></a>10. 闭包</h1><p>在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。可以在一个内层函数中访问到其外层函数的作用域。</p>\n<p>闭包就是能够读取其他函数内部变量的函数。主要作用是解决变量污染问题，也可以用来延长局部变量的生命周期。</p>\n<ul>\n<li>优点：延长局部变量的生命周期</li>\n<li>缺点：会导致函数的变量一直保存在内存中，过多的闭包可能会导致内存泄漏</li>\n</ul>\n<h1 id=\"11-new-操作符的实现机制\"><a href=\"#11-new-操作符的实现机制\" class=\"headerlink\" title=\"11. new 操作符的实现机制\"></a>11. new 操作符的实现机制</h1><ol>\n<li>首先创建了一个新的空对象</li>\n<li>设置原型，将对象的原型设置为函数的prototype对象。</li>\n<li>让函数的this指向这个对象，执行构造函数的代码（为这个新对象添加属性）</li>\n<li>判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myNew</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">  obj.<span class=\"property\">__proto__</span> = context.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = context.<span class=\"title function_\">apply</span>(obj, [...<span class=\"variable language_\">arguments</span>].<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> res === <span class=\"string\">&quot;object&quot;</span> ? res : obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-this-的理解？\"><a href=\"#12-this-的理解？\" class=\"headerlink\" title=\"12. this 的理解？\"></a>12. this 的理解？</h1><ol>\n<li>概念：<br>this是 JS 的一个关键字，它是函数运行时，自动生成的一个内部对象，只能在函数内部使用，随着函数使用场合的不同，this的值会发生变化，但有一个总的原则：this指的是调用函数的那个对象。</li>\n<li>this的指向：</li>\n</ol>\n<ul>\n<li>① 作为普通函数执行时，this指向window，但在严格模式下this指向undefined。</li>\n<li>② 函数作为对象里的方法被调用时，this指向该对象.</li>\n<li>③ 当用new运算符调用构造函数时，this指向返回的这个对象。</li>\n<li>④ 箭头函数的this绑定看的是this所在函数定义在哪个对象下，就绑定哪个对象。- 如果存在嵌套，则this绑定到最近的一层对象上。</li>\n<li>⑤ call()、apply()、bind()是函数的三个方法，都可以显式的指定调用函数的this指向。</li>\n</ul>\n<h1 id=\"13-call、apply、bind的区别以及手写实现\"><a href=\"#13-call、apply、bind的区别以及手写实现\" class=\"headerlink\" title=\"13.call、apply、bind的区别以及手写实现\"></a>13.call、apply、bind的区别以及手写实现</h1><ul>\n<li><code>call()</code>可以传递两个参数，第一个参数是指定函数内部中<code>this</code>的指向，第二个参数是函数调用时需要传递的参数。改变<code>this</code>指向后原函数会立即执行，且此方法只是临时改变<code>this</code>指向一次。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript复制代码<span class=\"comment\">// 实现call方法</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myCall</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断调用对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> != <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;type error&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 首先获取参数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = [...<span class=\"variable language_\">arguments</span>].<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 判断context是否传入，如果没有，就设置为window</span></span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 将被调用的方法置入context的属性</span></span><br><span class=\"line\">  <span class=\"comment\">// this 即为要调用的方法</span></span><br><span class=\"line\">  context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 执行要被调用的方法</span></span><br><span class=\"line\">  res = context.<span class=\"title function_\">fn</span>(...args);</span><br><span class=\"line\">  <span class=\"comment\">// 删除手动增加的属性方法</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 执行结果返回</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>apply()</code>接受两个参数，第一个参数是<code>this</code>的指向，第二个参数是函数接受的参数，以<code>数组</code>的形式传入。改变<code>this</code>指向后原函数会立即执行，且此方法只是临时改变<code>this</code>指向一次。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript复制代码<span class=\"comment\">// 实现apply方法</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myApply</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> != <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;type error&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 symbol 来保证属性唯一</span></span><br><span class=\"line\">  <span class=\"comment\">// 也就是保证不会重写用户自己原来定义在context中的同名属性</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fnSymbol = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\">  context[fnSymbol] = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 执行被调用的方法</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">arguments</span>[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    res = context[fnSymbol](...<span class=\"variable language_\">arguments</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    res = context[fnSymbol]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context[fnSymbol];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>bind()</code>方法的第一参数也是<code>this</code>的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入)。改变<code>this</code>指向后不会立即执行，而是返回一个永久改变<code>this</code>指向的函数。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript复制代码<span class=\"comment\">// 实现bind方法</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myBind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> != <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;type error&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = [...<span class=\"variable language_\">arguments</span>].<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(</span><br><span class=\"line\">      <span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Fn</span> ? <span class=\"variable language_\">this</span> : context,</span><br><span class=\"line\">      <span class=\"comment\">// 当前这个 arguments 是指 Fn 的参数</span></span><br><span class=\"line\">      args.<span class=\"title function_\">concat</span>(...<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>共同点：改变函数执行时的上下文，简而言之就是改变函数运行时的<code>this</code>指向。<br> 不同：</p>\n<ul>\n<li><code>call()</code>和<code>bind()</code>第二个参数是列表形式的；<code>apply()</code>第二个参数是数组形式。</li>\n<li><code>call()</code>和<code>apply()</code>是立即执行；<code>bind()</code>不会立即执行而是生成一个修改<code>this</code>之后的新函数。</li>\n</ul>\n<h1 id=\"14-箭头函数\"><a href=\"#14-箭头函数\" class=\"headerlink\" title=\"14. 箭头函数\"></a>14. 箭头函数</h1><ol>\n<li>箭头函数是定义函数一种新的方式，比普通函数定义更加方便和简单。</li>\n<li>箭头函数不绑定<code>this</code>，会捕获其所在上下文的<code>this</code>，作为自己的<code>this</code>。</li>\n<li>箭头函数不能用作构造函数，也就是说不可以使用<code>new</code>命令，否则会抛出错误。</li>\n<li>箭头函数不绑定<code>arguments</code>，取而代之用<code>rest</code>参数解决，同时没有<code>super</code>和<code>new.target</code>。</li>\n<li>使用<code>call</code>，<code>apply</code>，<code>bind</code>并不会改变箭头函数中的<code>this</code>指向。对箭头函数使用<code>call</code>或<code>apply</code>方法时，只会传入参数并调用函数；对箭头函数使用<code>bind</code>方法时，只会返回一个预设参数的新函数，并不会改变这个新函数的<code>this</code>指向。</li>\n</ol>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h1 id=\"15-浅拷贝和深拷贝的实现\"><a href=\"#15-浅拷贝和深拷贝的实现\" class=\"headerlink\" title=\"15. 浅拷贝和深拷贝的实现\"></a>15. 浅拷贝和深拷贝的实现</h1><p><code>浅拷贝</code>：如果属性是基本类型，拷贝的就是基本类型的值；如果属性是引用类型，拷贝的就是内存地址。即浅拷贝是<code>拷贝一层</code>，深层次的引用类型则共享内存地址。常用的方法有：object.assign，扩展运算符等等</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ini复制代码var <span class=\"attr\">a</span> = &#123; count: <span class=\"number\">1</span>, deep: &#123; count: <span class=\"number\">2</span> &#125; &#125;<span class=\"comment\">;</span></span><br><span class=\"line\">var <span class=\"attr\">b</span> = Object.assign(&#123;&#125;, a)<span class=\"comment\">;</span></span><br><span class=\"line\">// 或者</span><br><span class=\"line\">var <span class=\"attr\">c</span> = &#123;...a&#125;<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 实现一个浅拷贝</span><br><span class=\"line\">function shallowClone(obj) &#123;</span><br><span class=\"line\">  const <span class=\"attr\">newObj</span> = &#123;&#125;<span class=\"comment\">;</span></span><br><span class=\"line\">  for (let prop in obj) &#123;</span><br><span class=\"line\">    if (obj.hasOwnProperty(prop)) &#123;</span><br><span class=\"line\">      newObj<span class=\"section\">[prop]</span> = obj<span class=\"section\">[prop]</span><span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return newObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>深拷贝</code>：开辟一个新的栈，两个对象的属性完全相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript复制代码<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 深拷贝</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125; obj 要拷贝的对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Map</span>&#125; map 用于存储循环引用对象的地址</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepClone</span>(<span class=\"params\">obj = &#123;&#125;, map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> obj <span class=\"comment\">// 如果是null或者undefined我就不进行拷贝操作</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Date</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(obj)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">RegExp</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(obj)</span><br><span class=\"line\">  <span class=\"comment\">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;object&#x27;</span>) <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (map.<span class=\"title function_\">get</span>(obj)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map.<span class=\"title function_\">get</span>(obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = &#123;&#125;; <span class=\"comment\">// 初始化返回结果</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span> ||</span><br><span class=\"line\">    <span class=\"comment\">// 加 || 的原因是为了防止 Array 的 prototype 被重写，Array.isArray 也是如此</span></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">toString</span>(obj) === <span class=\"string\">&quot;[object Array]&quot;</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    result = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 防止循环引用</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保证 key 不是原型属性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 递归调用</span></span><br><span class=\"line\">      result[key] = <span class=\"title function_\">deepClone</span>(obj[key], map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"16-JavaScript-中内存泄漏的几种情况\"><a href=\"#16-JavaScript-中内存泄漏的几种情况\" class=\"headerlink\" title=\"16. JavaScript 中内存泄漏的几种情况\"></a>16. JavaScript 中内存泄漏的几种情况</h1><p><code>内存泄漏</code>一般是指系统进程不再用到的内存，没有及时释放，造成内存资源浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p>\n<p>造成内存泄漏的原因有：</p>\n<ol>\n<li><code>全局变量。</code>在局部作用域中，函数执行完毕后，变量就没有存在的必要了，垃圾回收机制很快的做出判断并回收；但是对于全局变量，很难判断什么时候不用这些变量，无法正常回收。<br> 解决办法：<br> ① 尽量少使用全局变量；<br> ② 使用严格模式，在 js 文件头部或者函数的顶部加上<code>use strict</code>。</li>\n<li><code>闭包引起的内存泄露。</code>闭包可以读取函数内部的变量，然后让这些变量始终保存在内存中，如果在使用结束后没有将局部变量清除，就可能导致内存泄露。<br> 解决办法：将事件处理函数定义在外部，解除闭包。</li>\n<li><code>被遗忘的定时器。</code>定时器<code>setInterval</code>或者<code>setTimeout</code>不再需要使用时，且没有被清除，导致定时器的回调函数及其内部依赖的变量都不能被回收，就会造成内存泄漏。<br> 解决办法：当不需要定时器的时候，调用<code>clearInterval</code>或者<code>clearTimeout</code>手动清除。</li>\n<li><code>事件监听。</code>垃圾回收机制不好判断事件是否需要被解除，导致<code>callback</code>不能被释放，此时需要手动解除绑定。<br> 解决办法：及时使用<code>removeEventListener</code>移除事件监听。</li>\n<li><code>元素引用没有清理。</code><br> 解决办法：移除元素后，手动设置元素的引用为<code>null</code>。</li>\n<li><code>console</code>。传递给<code>console.log</code>的对象是不能被垃圾回收，可能会存在内存泄漏。<br> 解决办法：清除不必要的<code>console</code>。</li>\n</ol>\n<h1 id=\"17-防抖和节流的区别，以及手写实现\"><a href=\"#17-防抖和节流的区别，以及手写实现\" class=\"headerlink\" title=\"17. 防抖和节流的区别，以及手写实现\"></a>17. 防抖和节流的区别，以及手写实现</h1><p><code>防抖</code>：多次触发事件，事件处理函数只执行一次，并且是在触发操作结束时执行。也就是说，当一个事件被触发，准备执行事件函数前，会等待一定的时间，在这个等待时间内，如果没有再次被触发，那么就执行，如果又触发了，那就本次作废，重置等待时间，直到最终能执行。<br> 主要应用场景：搜索框搜索输入，用户最后一次输入完，再发送请求；手机号、邮箱验证输入检测</p>\n<p><code>节流</code>：事件触发后，规定时间内，事件处理函数不能再次被调用。也就是说在规定的时间内，函数只能被调用一次，且是最先被触发调用的那次。<br> 主要应用场景：高频点击、表单重复提交等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript复制代码<span class=\"comment\">/*** 防抖函数 n 秒后再执行该事件，若在 n 秒内被重复触发，则重新计时</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> func 要被防抖的函数</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> wait 规定的时间</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">func, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>; <span class=\"comment\">// 保存this指向</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"variable language_\">arguments</span>; <span class=\"comment\">// 拿到event对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      func.<span class=\"title function_\">apply</span>(context, args)</span><br><span class=\"line\">    &#125;, wait)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*** 节流函数 n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> fn 要被节流的函数</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> wait 规定的时间</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttled</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">      timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">        timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"18-EventLoop-事件循环\"><a href=\"#18-EventLoop-事件循环\" class=\"headerlink\" title=\"18. EventLoop 事件循环\"></a>18. EventLoop 事件循环</h1><p>js 是单线程运行的，当遇到一个异步事件后并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当一个异步事件返回结果后，js会将这个事件加入与当前执行栈不同的另一个队列–<code>事件队列（Task Queue）</code>。被放入事件队列不会立刻执行其回调，而是等待当前执行栈中的所有任务都执行完毕， 主线程处于闲置状态时，主线程会去查找事件队列是否有任务。如果有，那么主线程会从中取出排在第一位的事件，并把这个事件对应的回调放入执行栈中，然后执行其中的同步代码…，如此反复，这样就形成了一个无限的循环，这个过程被称为<code>事件循环（Event Loop）</code>。</p>\n<p>实际上,异步任务之间并不相同，它们的执行优先级也有区别。异步任务分两类：<code>微任务（micro task</code>）和<code>宏任务（macro task）</code>。</p>\n<p>微任务包括： <code>promise 的回调</code>、node 中的 <code>process.nextTick</code> 、对 Dom 变化监听的 <code>MutationObserver</code>。</p>\n<p>宏任务包括： script 脚本的执行，<code>setTimeout</code> 、<code>setInterval</code> 和<code>setImmediate</code> 一类的定时事件，还有如 I/O 操作，UI 渲染等。</p>\n<p>在一个事件循环中，异步事件返回结果后会被放到一个事件队列中。然而，根据这个异步事件的类型，这个事件实际上会被对应的<code>宏任务队列</code>或者<code>微任务队列</code>中去。并且在当前执行栈为空的时候，主线程会查看微任务队列是否有事件存在。如果不存在，那么再去宏任务队列中取出一个事件并把对应的回调加入当前执行栈；如果存在，则会依次执行队列中事件对应的回调，直到微任务队列为空，然后去宏任务队列中取出最前面的一个事件，把对应的回调加入当前执行栈…如此反复，进入循环。</p>\n<p><strong>在当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行</strong>。</p>\n<h1 id=\"19-Promise\"><a href=\"#19-Promise\" class=\"headerlink\" title=\"19. Promise\"></a>19. Promise</h1><p><code>Promise</code>异步编程的一种解决方案。<code>Promise</code>是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是<code>pending</code>、<code>fulfilled</code>和<code>rejected</code>，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 fulfilled 或者 rejected 状态，并且状态一经改变，就无法再改变了。状态的改变是通过<code>resolve()</code>和<code>reject()</code>函数来实现的，可以在异步操作结束后调用这两个函数改变 Promise 实例的状态。Promise 的原型上定义了一个 <code>then</code>方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。</p>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"excerpt":"<p>JS复习记录</p>","more":"<h1 id=\"1-JS-的数据类型有哪些？\"><a href=\"#1-JS-的数据类型有哪些？\" class=\"headerlink\" title=\"1. JS 的数据类型有哪些？\"></a>1. JS 的数据类型有哪些？</h1><ul>\n<li>基本数据类型（值类型）：Number、String、Boolean、Null、Undefined、Symbol、BigInt。保存在栈内存中。</li>\n<li>复杂数据类型（引用类型）：Object、Function、Array、RegExp、Date 基本包装类型及单体内置对象(Global、Math)等。</li>\n</ul>\n<blockquote>\n<p>基本数据类型保存在栈里面，可以直接访问它的值；引用数据类型保存在堆里面，栈里面保存的是地址，通过栈里面的地址去访问堆里面的值。</p>\n</blockquote>\n<h1 id=\"2-null-和-undefined-的区别？\"><a href=\"#2-null-和-undefined-的区别？\" class=\"headerlink\" title=\"2.null 和 undefined 的区别？\"></a>2.null 和 undefined 的区别？</h1><ul>\n<li>null表示一个对象被定义了，值为“空值”。用法：<br>① 作为函数的参数，表示该函数的参数不是对象。<br>② 作为对象原型链的终点。</li>\n<li>undefined表示不存在这个值。就是此处应该有一个值，但是还没有定义，当尝试读取时就会返回 undefined。用法：<br>① 函数没有返回值时，默认返回 undefined。<br>② 变量已声明，没有赋值时，为 undefined。<br>③ 对象中没有赋值的属性，该属性的值为 undefined。<br>④ 调用函数时，应该提供的参数没有提供，该参数等于 undefined。</li>\n</ul>\n<h1 id=\"3-如何判断-JS-的数据类型？\"><a href=\"#3-如何判断-JS-的数据类型？\" class=\"headerlink\" title=\"3. 如何判断 JS 的数据类型？\"></a>3. 如何判断 JS 的数据类型？</h1><h2 id=\"1-typeof\"><a href=\"#1-typeof\" class=\"headerlink\" title=\"1.typeof\"></a>1.typeof</h2><p>typeof可以区分除了Null类型以外的其他基本数据类型，以及从对象类型中识别出函数（function）。<br>其返回值有：number、string、boolean、undefined、symbol、bigint、function、object。<br>其中, typeof null返回 “object”<br>如果要识别null，可直接使用===全等运算符来判断。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">1</span> <span class=\"comment\">// &#x27;number&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"comment\">// &#x27;string&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span> <span class=\"comment\">// &#x27;boolean&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> <span class=\"comment\">// &#x27;undefined&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span>() <span class=\"comment\">// &#x27;symbol&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span> <span class=\"comment\">// &#x27;object&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [] <span class=\"comment\">// &#x27;object&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125; <span class=\"comment\">// &#x27;object&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"variable language_\">console</span> <span class=\"comment\">// &#x27;object&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"variable language_\">console</span>.<span class=\"property\">log</span> <span class=\"comment\">// &#x27;function&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-instanceof\"><a href=\"#2-instanceof\" class=\"headerlink\" title=\"2.instanceof\"></a>2.instanceof</h2><p>instanceof一般是用来判断引用数据类型，但不能正确判断基本数据类型，根据在原型链中查找判断当前数据的原型对象是否存在返回布尔类型。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Number</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">true</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Boolean</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"string\">&#x27;str&#x27;</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">[] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Function</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\">&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">date instance <span class=\"keyword\">of</span> <span class=\"title class_\">Date</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Object-prototype-toString\"><a href=\"#3-Object-prototype-toString\" class=\"headerlink\" title=\"3. Object.prototype.toString\"></a>3. Object.prototype.toString</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">toString</span>(&#123;&#125;) <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(&#123;&#125;) <span class=\"comment\">// 同上结果，加上call也ok</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"number\">1</span>) <span class=\"comment\">// &quot;[object Number]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;1&#x27;</span>) <span class=\"comment\">// &quot;[object String]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">true</span>) <span class=\"comment\">// &quot;[object Boolean]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;) <span class=\"comment\">// &quot;[object Function]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>) <span class=\"comment\">//&quot;[object Null]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>) <span class=\"comment\">//&quot;[object Undefined]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"regexp\">/123/g</span>) <span class=\"comment\">//&quot;[object RegExp]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()) <span class=\"comment\">//&quot;[object Date]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>([]) <span class=\"comment\">//&quot;[object Array]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">document</span>) <span class=\"comment\">//&quot;[object HTMLDocument]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">window</span>) <span class=\"comment\">//&quot;[object Window]&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-Array-isArray\"><a href=\"#4-Array-isArray\" class=\"headerlink\" title=\"4. Array.isArray\"></a>4. Array.isArray</h2><p>Array.isArray(value)可以判断 value 是否为数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>([]); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(&#123;&#125;); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"number\">1</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"string\">&#x27;string&#x27;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"literal\">true</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-如何遍历对象的属性？\"><a href=\"#3-如何遍历对象的属性？\" class=\"headerlink\" title=\"3.如何遍历对象的属性？\"></a>3.如何遍历对象的属性？</h1><ul>\n<li>遍历自身可枚举的属性（可枚举、非继承属性）：Object.keys() 方法,该方法会返回一个由给定对象的自身可枚举属性组成的数组。</li>\n<li>遍历自身的所有属性（可枚举、不可枚举、非继承属性）：Object.getOwnPropertyNames()方法，该方法会返回一个由指定对象的所有自身属性组成的数组</li>\n<li>遍历可枚举的自身属性和继承属性：for … in …</li>\n</ul>\n<h1 id=\"4-和-的区别？\"><a href=\"#4-和-的区别？\" class=\"headerlink\" title=\"4. == 和 === 的区别？\"></a>4. == 和 === 的区别？</h1><ul>\n<li>==：两个等号称为等值符，当等号两边的值为相同类型时比较值是否相同，类型不同时会发生类型的自动转换，转换为相同的类型后再做比较。</li>\n<li>===：三个等号称为等同符，当等号两边的值为相同类型时，直接比较等号两边的值，值相同则返回 true；若等号两边值的类型不同时直接返回 false。也就是三个等号既要判断类型也要判断值是否相等。</li>\n</ul>\n<h1 id=\"5-如何判断两个对象是否相等？\"><a href=\"#5-如何判断两个对象是否相等？\" class=\"headerlink\" title=\"5.如何判断两个对象是否相等？\"></a>5.如何判断两个对象是否相等？</h1><ol>\n<li><p>Object.is(obj1, obj2)，判断两个对象都引用地址是否一致，true 则一致，false 不一致。</p>\n</li>\n<li><p>判断两个对象内容是否一致，思路是遍历对象的所有键名和键值是否都一致<br>① 判断两个对象是否指向同一内存<br>② 使用 Object.getOwnPropertyNames 获取对象所有键名数组<br>③ 判断两个对象的键名数组是否相等<br>④ 遍历键名，判断键值是否都相等</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isObjValueEqual</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断两个对象是否指向同一内存，指向同一内存返回 true</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 获取两个对象的键名数组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> aProps = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyNames</span>(a);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bProps = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyNames</span>(b);</span><br><span class=\"line\">  <span class=\"comment\">// 判断两键名数组长度是否一致，不一致返回 false</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (aProps.<span class=\"property\">length</span> !== bProps.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历对象的键值</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> prop <span class=\"keyword\">in</span> a) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断 a 的键名，在 b 中是否存在，不存在，直接返回 false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b.<span class=\"title function_\">hasOwnProperty</span>(prop)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 判断 a 的键值是否为对象，是对象的话需要递归；</span></span><br><span class=\"line\">      <span class=\"comment\">// 不是对象，直接判断键值是否相等，不相等则返回 false</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a[prop] === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title function_\">isObjValueEqual</span>(a[prop], b[prop])) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[prop] !== b[prop])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-强制类型转换和隐式类型转换有哪些\"><a href=\"#6-强制类型转换和隐式类型转换有哪些\" class=\"headerlink\" title=\"6. 强制类型转换和隐式类型转换有哪些\"></a>6. 强制类型转换和隐式类型转换有哪些</h1><ul>\n<li>强制：<br>转换成字符串: toString()、String()<br>转换成数字：Number()、parseInt()、parseFloat()<br>转换成布尔类型：Boolean()</li>\n<li>隐式：<br>拼接字符串：let str = 1 + “”;</li>\n</ul>\n<h1 id=\"7-JS-中的作用域和作用域链\"><a href=\"#7-JS-中的作用域和作用域链\" class=\"headerlink\" title=\"7. JS 中的作用域和作用域链\"></a>7. JS 中的作用域和作用域链</h1><ul>\n<li><p>作用域，即变量（变量作用域又称上下文）和函数生效（能被访问）的区域或集合。作用域决定了代码区块中变量和其他资源的可见性。一般可分为：全局作用域、局部作用域（函数作用域）、块级作用域。</p>\n</li>\n<li><p>全局作用域：任何不在函数中或是大括号中声明的变量，都是在全局作用域下，全局作用域下声明的变量可以在程序的任意位置访问。</p>\n</li>\n<li><p>局部作用域：也叫做函数作用域，如果一个变量是在函数内部声明的，它就在一个函数作用域下面。这些变量只能在函数内部访问，不能在函数以外去访问。<br>块级作用域：凡是代码块就可以划分变量的作用域，这种作用域的规则就叫做块级作用域。</p>\n</li>\n<li><p>作用域链：当在 JS 中使用一个变量时，JS 引擎会尝试在当前作用域下寻找该变量，如果没找到，再到它的上层作用域寻找，以此类推，直至找到该变量或是查找至全局作用域，如果在全局作用域里仍然找不到该变量，它就会在全局范围内隐式声明该变量(非严格模式下)或是直接报错。</p>\n</li>\n<li><p>js 采用的是静态作用域，所以函数的作用域在函数定义时就确定了</p>\n</li>\n</ul>\n<h1 id=\"8-JS-的预解析\"><a href=\"#8-JS-的预解析\" class=\"headerlink\" title=\"8. JS 的预解析\"></a>8. JS 的预解析</h1><p>JS 代码的执行是由浏览器中的 JS 解析器来执行的，JS 解析器执行 JS 代码时，分为两个过程：预解析过程和代码执行过程。预解析分为变量预解析（变量提升）和函数预解析（函数提升）；代码执行是指按顺序从上至下执行。</p>\n<ul>\n<li>变量提升：把变量的声明提升到当前作用域的最前面，只提升声明，不提升赋值；</li>\n<li>函数提升：把函数的声明提升到当前作用域的最前面，只提升声明，不提升调用；</li>\n</ul>\n<blockquote>\n<p>函数表达式的写法不存在函数提升</p>\n</blockquote>\n<blockquote>\n<p>函数提升优先级高于变量提升，即函数提升在变量提升之上，且不会被同名变量声明时覆盖，但是会被同名变量赋值后覆盖</p>\n</blockquote>\n<h1 id=\"9-原型和原型链\"><a href=\"#9-原型和原型链\" class=\"headerlink\" title=\"9. 原型和原型链\"></a>9. 原型和原型链</h1><p>JS是面向对象的，每个实例对象都有一个__proto__属性，该属性指向它的原型对象。该实例的构造函数有一个原型属性prototype，与实例的__proto__属性指向同一个对象。同时，原型对象的constructor 指向构造函数本身。</p>\n<p>当一个对象在查找一个属性时，自身没有就会根据__proto__属性向它的原型进行查找，如果还是没有，则向它的原型的原型继续查找，直至查到Object.prototype.__proto__也就是null，这样就形成了原型链。</p>\n<h1 id=\"10-闭包\"><a href=\"#10-闭包\" class=\"headerlink\" title=\"10. 闭包\"></a>10. 闭包</h1><p>在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。可以在一个内层函数中访问到其外层函数的作用域。</p>\n<p>闭包就是能够读取其他函数内部变量的函数。主要作用是解决变量污染问题，也可以用来延长局部变量的生命周期。</p>\n<ul>\n<li>优点：延长局部变量的生命周期</li>\n<li>缺点：会导致函数的变量一直保存在内存中，过多的闭包可能会导致内存泄漏</li>\n</ul>\n<h1 id=\"11-new-操作符的实现机制\"><a href=\"#11-new-操作符的实现机制\" class=\"headerlink\" title=\"11. new 操作符的实现机制\"></a>11. new 操作符的实现机制</h1><ol>\n<li>首先创建了一个新的空对象</li>\n<li>设置原型，将对象的原型设置为函数的prototype对象。</li>\n<li>让函数的this指向这个对象，执行构造函数的代码（为这个新对象添加属性）</li>\n<li>判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myNew</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">  obj.<span class=\"property\">__proto__</span> = context.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = context.<span class=\"title function_\">apply</span>(obj, [...<span class=\"variable language_\">arguments</span>].<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> res === <span class=\"string\">&quot;object&quot;</span> ? res : obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-this-的理解？\"><a href=\"#12-this-的理解？\" class=\"headerlink\" title=\"12. this 的理解？\"></a>12. this 的理解？</h1><ol>\n<li>概念：<br>this是 JS 的一个关键字，它是函数运行时，自动生成的一个内部对象，只能在函数内部使用，随着函数使用场合的不同，this的值会发生变化，但有一个总的原则：this指的是调用函数的那个对象。</li>\n<li>this的指向：</li>\n</ol>\n<ul>\n<li>① 作为普通函数执行时，this指向window，但在严格模式下this指向undefined。</li>\n<li>② 函数作为对象里的方法被调用时，this指向该对象.</li>\n<li>③ 当用new运算符调用构造函数时，this指向返回的这个对象。</li>\n<li>④ 箭头函数的this绑定看的是this所在函数定义在哪个对象下，就绑定哪个对象。- 如果存在嵌套，则this绑定到最近的一层对象上。</li>\n<li>⑤ call()、apply()、bind()是函数的三个方法，都可以显式的指定调用函数的this指向。</li>\n</ul>\n<h1 id=\"13-call、apply、bind的区别以及手写实现\"><a href=\"#13-call、apply、bind的区别以及手写实现\" class=\"headerlink\" title=\"13.call、apply、bind的区别以及手写实现\"></a>13.call、apply、bind的区别以及手写实现</h1><ul>\n<li><code>call()</code>可以传递两个参数，第一个参数是指定函数内部中<code>this</code>的指向，第二个参数是函数调用时需要传递的参数。改变<code>this</code>指向后原函数会立即执行，且此方法只是临时改变<code>this</code>指向一次。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript复制代码<span class=\"comment\">// 实现call方法</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myCall</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断调用对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> != <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;type error&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 首先获取参数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = [...<span class=\"variable language_\">arguments</span>].<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 判断context是否传入，如果没有，就设置为window</span></span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 将被调用的方法置入context的属性</span></span><br><span class=\"line\">  <span class=\"comment\">// this 即为要调用的方法</span></span><br><span class=\"line\">  context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 执行要被调用的方法</span></span><br><span class=\"line\">  res = context.<span class=\"title function_\">fn</span>(...args);</span><br><span class=\"line\">  <span class=\"comment\">// 删除手动增加的属性方法</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 执行结果返回</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>apply()</code>接受两个参数，第一个参数是<code>this</code>的指向，第二个参数是函数接受的参数，以<code>数组</code>的形式传入。改变<code>this</code>指向后原函数会立即执行，且此方法只是临时改变<code>this</code>指向一次。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript复制代码<span class=\"comment\">// 实现apply方法</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myApply</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> != <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;type error&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 symbol 来保证属性唯一</span></span><br><span class=\"line\">  <span class=\"comment\">// 也就是保证不会重写用户自己原来定义在context中的同名属性</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fnSymbol = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\">  context[fnSymbol] = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 执行被调用的方法</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">arguments</span>[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    res = context[fnSymbol](...<span class=\"variable language_\">arguments</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    res = context[fnSymbol]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context[fnSymbol];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>bind()</code>方法的第一参数也是<code>this</code>的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入)。改变<code>this</code>指向后不会立即执行，而是返回一个永久改变<code>this</code>指向的函数。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript复制代码<span class=\"comment\">// 实现bind方法</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myBind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> != <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;type error&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = [...<span class=\"variable language_\">arguments</span>].<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(</span><br><span class=\"line\">      <span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Fn</span> ? <span class=\"variable language_\">this</span> : context,</span><br><span class=\"line\">      <span class=\"comment\">// 当前这个 arguments 是指 Fn 的参数</span></span><br><span class=\"line\">      args.<span class=\"title function_\">concat</span>(...<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>共同点：改变函数执行时的上下文，简而言之就是改变函数运行时的<code>this</code>指向。<br> 不同：</p>\n<ul>\n<li><code>call()</code>和<code>bind()</code>第二个参数是列表形式的；<code>apply()</code>第二个参数是数组形式。</li>\n<li><code>call()</code>和<code>apply()</code>是立即执行；<code>bind()</code>不会立即执行而是生成一个修改<code>this</code>之后的新函数。</li>\n</ul>\n<h1 id=\"14-箭头函数\"><a href=\"#14-箭头函数\" class=\"headerlink\" title=\"14. 箭头函数\"></a>14. 箭头函数</h1><ol>\n<li>箭头函数是定义函数一种新的方式，比普通函数定义更加方便和简单。</li>\n<li>箭头函数不绑定<code>this</code>，会捕获其所在上下文的<code>this</code>，作为自己的<code>this</code>。</li>\n<li>箭头函数不能用作构造函数，也就是说不可以使用<code>new</code>命令，否则会抛出错误。</li>\n<li>箭头函数不绑定<code>arguments</code>，取而代之用<code>rest</code>参数解决，同时没有<code>super</code>和<code>new.target</code>。</li>\n<li>使用<code>call</code>，<code>apply</code>，<code>bind</code>并不会改变箭头函数中的<code>this</code>指向。对箭头函数使用<code>call</code>或<code>apply</code>方法时，只会传入参数并调用函数；对箭头函数使用<code>bind</code>方法时，只会返回一个预设参数的新函数，并不会改变这个新函数的<code>this</code>指向。</li>\n</ol>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h1 id=\"15-浅拷贝和深拷贝的实现\"><a href=\"#15-浅拷贝和深拷贝的实现\" class=\"headerlink\" title=\"15. 浅拷贝和深拷贝的实现\"></a>15. 浅拷贝和深拷贝的实现</h1><p><code>浅拷贝</code>：如果属性是基本类型，拷贝的就是基本类型的值；如果属性是引用类型，拷贝的就是内存地址。即浅拷贝是<code>拷贝一层</code>，深层次的引用类型则共享内存地址。常用的方法有：object.assign，扩展运算符等等</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ini复制代码var <span class=\"attr\">a</span> = &#123; count: <span class=\"number\">1</span>, deep: &#123; count: <span class=\"number\">2</span> &#125; &#125;<span class=\"comment\">;</span></span><br><span class=\"line\">var <span class=\"attr\">b</span> = Object.assign(&#123;&#125;, a)<span class=\"comment\">;</span></span><br><span class=\"line\">// 或者</span><br><span class=\"line\">var <span class=\"attr\">c</span> = &#123;...a&#125;<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 实现一个浅拷贝</span><br><span class=\"line\">function shallowClone(obj) &#123;</span><br><span class=\"line\">  const <span class=\"attr\">newObj</span> = &#123;&#125;<span class=\"comment\">;</span></span><br><span class=\"line\">  for (let prop in obj) &#123;</span><br><span class=\"line\">    if (obj.hasOwnProperty(prop)) &#123;</span><br><span class=\"line\">      newObj<span class=\"section\">[prop]</span> = obj<span class=\"section\">[prop]</span><span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return newObj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>深拷贝</code>：开辟一个新的栈，两个对象的属性完全相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript复制代码<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 深拷贝</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125; obj 要拷贝的对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Map</span>&#125; map 用于存储循环引用对象的地址</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepClone</span>(<span class=\"params\">obj = &#123;&#125;, map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> obj <span class=\"comment\">// 如果是null或者undefined我就不进行拷贝操作</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Date</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(obj)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">RegExp</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(obj)</span><br><span class=\"line\">  <span class=\"comment\">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;object&#x27;</span>) <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (map.<span class=\"title function_\">get</span>(obj)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map.<span class=\"title function_\">get</span>(obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = &#123;&#125;; <span class=\"comment\">// 初始化返回结果</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span> ||</span><br><span class=\"line\">    <span class=\"comment\">// 加 || 的原因是为了防止 Array 的 prototype 被重写，Array.isArray 也是如此</span></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">toString</span>(obj) === <span class=\"string\">&quot;[object Array]&quot;</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    result = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 防止循环引用</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保证 key 不是原型属性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 递归调用</span></span><br><span class=\"line\">      result[key] = <span class=\"title function_\">deepClone</span>(obj[key], map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"16-JavaScript-中内存泄漏的几种情况\"><a href=\"#16-JavaScript-中内存泄漏的几种情况\" class=\"headerlink\" title=\"16. JavaScript 中内存泄漏的几种情况\"></a>16. JavaScript 中内存泄漏的几种情况</h1><p><code>内存泄漏</code>一般是指系统进程不再用到的内存，没有及时释放，造成内存资源浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p>\n<p>造成内存泄漏的原因有：</p>\n<ol>\n<li><code>全局变量。</code>在局部作用域中，函数执行完毕后，变量就没有存在的必要了，垃圾回收机制很快的做出判断并回收；但是对于全局变量，很难判断什么时候不用这些变量，无法正常回收。<br> 解决办法：<br> ① 尽量少使用全局变量；<br> ② 使用严格模式，在 js 文件头部或者函数的顶部加上<code>use strict</code>。</li>\n<li><code>闭包引起的内存泄露。</code>闭包可以读取函数内部的变量，然后让这些变量始终保存在内存中，如果在使用结束后没有将局部变量清除，就可能导致内存泄露。<br> 解决办法：将事件处理函数定义在外部，解除闭包。</li>\n<li><code>被遗忘的定时器。</code>定时器<code>setInterval</code>或者<code>setTimeout</code>不再需要使用时，且没有被清除，导致定时器的回调函数及其内部依赖的变量都不能被回收，就会造成内存泄漏。<br> 解决办法：当不需要定时器的时候，调用<code>clearInterval</code>或者<code>clearTimeout</code>手动清除。</li>\n<li><code>事件监听。</code>垃圾回收机制不好判断事件是否需要被解除，导致<code>callback</code>不能被释放，此时需要手动解除绑定。<br> 解决办法：及时使用<code>removeEventListener</code>移除事件监听。</li>\n<li><code>元素引用没有清理。</code><br> 解决办法：移除元素后，手动设置元素的引用为<code>null</code>。</li>\n<li><code>console</code>。传递给<code>console.log</code>的对象是不能被垃圾回收，可能会存在内存泄漏。<br> 解决办法：清除不必要的<code>console</code>。</li>\n</ol>\n<h1 id=\"17-防抖和节流的区别，以及手写实现\"><a href=\"#17-防抖和节流的区别，以及手写实现\" class=\"headerlink\" title=\"17. 防抖和节流的区别，以及手写实现\"></a>17. 防抖和节流的区别，以及手写实现</h1><p><code>防抖</code>：多次触发事件，事件处理函数只执行一次，并且是在触发操作结束时执行。也就是说，当一个事件被触发，准备执行事件函数前，会等待一定的时间，在这个等待时间内，如果没有再次被触发，那么就执行，如果又触发了，那就本次作废，重置等待时间，直到最终能执行。<br> 主要应用场景：搜索框搜索输入，用户最后一次输入完，再发送请求；手机号、邮箱验证输入检测</p>\n<p><code>节流</code>：事件触发后，规定时间内，事件处理函数不能再次被调用。也就是说在规定的时间内，函数只能被调用一次，且是最先被触发调用的那次。<br> 主要应用场景：高频点击、表单重复提交等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript复制代码<span class=\"comment\">/*** 防抖函数 n 秒后再执行该事件，若在 n 秒内被重复触发，则重新计时</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> func 要被防抖的函数</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> wait 规定的时间</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">func, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>; <span class=\"comment\">// 保存this指向</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"variable language_\">arguments</span>; <span class=\"comment\">// 拿到event对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      func.<span class=\"title function_\">apply</span>(context, args)</span><br><span class=\"line\">    &#125;, wait)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*** 节流函数 n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> fn 要被节流的函数</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> wait 规定的时间</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttled</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">      timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">        timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"18-EventLoop-事件循环\"><a href=\"#18-EventLoop-事件循环\" class=\"headerlink\" title=\"18. EventLoop 事件循环\"></a>18. EventLoop 事件循环</h1><p>js 是单线程运行的，当遇到一个异步事件后并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当一个异步事件返回结果后，js会将这个事件加入与当前执行栈不同的另一个队列–<code>事件队列（Task Queue）</code>。被放入事件队列不会立刻执行其回调，而是等待当前执行栈中的所有任务都执行完毕， 主线程处于闲置状态时，主线程会去查找事件队列是否有任务。如果有，那么主线程会从中取出排在第一位的事件，并把这个事件对应的回调放入执行栈中，然后执行其中的同步代码…，如此反复，这样就形成了一个无限的循环，这个过程被称为<code>事件循环（Event Loop）</code>。</p>\n<p>实际上,异步任务之间并不相同，它们的执行优先级也有区别。异步任务分两类：<code>微任务（micro task</code>）和<code>宏任务（macro task）</code>。</p>\n<p>微任务包括： <code>promise 的回调</code>、node 中的 <code>process.nextTick</code> 、对 Dom 变化监听的 <code>MutationObserver</code>。</p>\n<p>宏任务包括： script 脚本的执行，<code>setTimeout</code> 、<code>setInterval</code> 和<code>setImmediate</code> 一类的定时事件，还有如 I/O 操作，UI 渲染等。</p>\n<p>在一个事件循环中，异步事件返回结果后会被放到一个事件队列中。然而，根据这个异步事件的类型，这个事件实际上会被对应的<code>宏任务队列</code>或者<code>微任务队列</code>中去。并且在当前执行栈为空的时候，主线程会查看微任务队列是否有事件存在。如果不存在，那么再去宏任务队列中取出一个事件并把对应的回调加入当前执行栈；如果存在，则会依次执行队列中事件对应的回调，直到微任务队列为空，然后去宏任务队列中取出最前面的一个事件，把对应的回调加入当前执行栈…如此反复，进入循环。</p>\n<p><strong>在当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行</strong>。</p>\n<h1 id=\"19-Promise\"><a href=\"#19-Promise\" class=\"headerlink\" title=\"19. Promise\"></a>19. Promise</h1><p><code>Promise</code>异步编程的一种解决方案。<code>Promise</code>是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是<code>pending</code>、<code>fulfilled</code>和<code>rejected</code>，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 fulfilled 或者 rejected 状态，并且状态一经改变，就无法再改变了。状态的改变是通过<code>resolve()</code>和<code>reject()</code>函数来实现的，可以在异步操作结束后调用这两个函数改变 Promise 实例的状态。Promise 的原型上定义了一个 <code>then</code>方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。</p>"},{"title":"quickjs调试工具","keywords":"前端,面试,C","description":"quickjs调试工具","top_img":"设置false不显示顶部图片","sticky":"数值越大越靠前","cover":"https://raw.githubusercontent.com/why862555625/images/main/images/18.jpg","comments":1,"abbrlink":"d9795d10","date":"2023-05-23T07:21:13.000Z","updated":"2023-05-23T07:21:13.000Z","_content":"\n\n\nvela系统quickjs对接devtools\n\n<!-- more -->\n\n## vela快应用调试功能概览\n\n![image-20230525102147522](https://raw.githubusercontent.com/why862555625/images/main/image-20230525102147522.png)\n\n# vela debug调试功能\n\ndebug调试功能图\n\n![image-20230525111407415](https://raw.githubusercontent.com/why862555625/images/main/image-20230525111407415.png)\n\nvela debug调试功能实现大致分为4个步骤：\n\n1. **连接时将所有的源码发送给devtools。**\n2. **在devtools 的source功能中打断点、将请求发送给下层cdp.**\n3. **cdp计算断点具体在字节码中的位置、并记录。**\n4. **在引擎执行字节码时判断有无命中断点。**\n\n下面具体说明这四个步骤：\n\n## 1. 连接时将所有的源码发送给devtools\n\n在调用loadApplication时会将app的路径保存在APP类中，也就是app的rpk的最外层路径。在监听到devtool连接时，会将rpk包中的所js文件发送给devtools，devtools会将这些js文件拼接成上图中的source文件。\n\n## 2. 在devtools 的source功能中打断点、将请求发送给下层cdp\n\n当打开source文件上打断点、devtools会将断点的文件名、行号发送到下层cdp.\n\n## 3. cdp计算断点具体在字节码中的位置、并记录。\n\n- 断点功能的输入实际上是文件名和断点行信息，第一步我们需要利用这个信息，找到模块，进而首先找到目标函数。\n  - quickjs在真实加载module的时候都会调用JS_EvalInternal。我们可以在这个函数里面监听并记录已经加载完的模块。\n\n- 每个函数对象上都记录了自身的起始行，通过pc2line table可以计算得到结束行，进而和传入的行号进行范围匹配计算。\n  - 函数和字节码的映射规则：\n    - 如果一行源码对应的字节码较短，就将前4位存源码的行数，后四位存字节码对应的行数\n    - 如果一个源码对应的字节码较长，就先存入一个0值（解析pc2line_buf的时候遇到0值会自动将下一个当做128  int来解析），后面补一个128的int，这个int的高位用来存源码行数、低位存字节码的行数。\n\n**计算结束行函数：**\n\n```c++\n#define PC2LINE_BASE     (-1)\n#define PC2LINE_RANGE    5\n#define PC2LINE_OP_FIRST 1\n#define PC2LINE_DIFF_PC_MAX ((255 - PC2LINE_OP_FIRST) / PC2LINE_RANGE)\nstatic int caculate_function_last_line(JSFunctionBytecode* b) {\n    unsigned int op;\n    int ret, v;\n    FunctionBytecodeDebugInfo* debug = js_debugger_get_bytecode_debug_info(b);\n    int line_num = debug->line_num, new_line_num;\n    uint8_t *p = debug->pc2line_buf;\n    uint8_t *p_end = p + debug->pc2line_len;\n    int succ = 1;\n\n    // scan line by line\n    while (p < p_end) {\n        op = *p++;\n        if (op == 0) {\n            uint32_t val;\n            ret = get_leb128(&val, p, p_end);\n            if (ret < 0) {\n                succ = 0;\n                break;\n            }\n            // pc += val;\n            p += ret;\n            ret = get_sleb128(&v, p, p_end);\n            if (ret < 0) {\n                succ = 0;\n                break;\n            }\n            p += ret;\n            new_line_num = line_num + v;\n        } else {\n            op -= PC2LINE_OP_FIRST;\n            new_line_num = line_num + (op % PC2LINE_RANGE) + PC2LINE_BASE;\n        }\n        line_num = new_line_num;\n    }\n    return succ ? line_num : 0;\n}\n\nSTATIC int get_leb128(uint32_t *pval, const uint8_t *buf,\n                      const uint8_t *buf_end)\n{\n    const uint8_t *ptr = buf;\n    uint32_t v, a, i;\n    v = 0;\n    for(i = 0; i < 5; i++) {\n        if (unlikely(ptr >= buf_end))\n            break;\n        a = *ptr++;\n        v |= (a & 0x7f) << (i * 7);\n        if (!(a & 0x80)) {\n            *pval = v;\n            return ptr - buf;\n        }\n    }\n    *pval = 0;\n    return -1;\n}\nSTATIC int get_sleb128(int32_t *pval, const uint8_t *buf,\n                       const uint8_t *buf_end)\n{\n    int ret;\n    uint32_t val;\n    ret = get_leb128(&val, buf, buf_end);\n    if (ret < 0) {\n        *pval = 0;\n        return -1;\n    }\n    *pval = (val >> 1) ^ -(val & 1);\n    return ret;\n}\n```\n\n**源码表和字节码表对应规则：**\n\n```c++\n\nstatic void compute_pc2line_info(JSFunctionDef *s)\n{\n    if (!(s->js_mode & JS_MODE_STRIP) && s->line_number_slots) {\n        int last_line_num = s->line_num;\n        uint32_t last_pc = 0;\n        int i;\n\n        js_dbuf_init(s->ctx, &s->pc2line);\n        for (i = 0; i < s->line_number_count; i++) {\n            uint32_t pc = s->line_number_slots[i].pc;\n            int line_num = s->line_number_slots[i].line_num;\n            int diff_pc, diff_line;\n\n            if (line_num < 0)\n                continue;\n\n            diff_pc = pc - last_pc;\n            diff_line = line_num - last_line_num;\n            if (diff_line == 0 || diff_pc < 0)\n                continue;\n\n            if (diff_line >= PC2LINE_BASE &&\n                diff_line < PC2LINE_BASE + PC2LINE_RANGE &&\n                diff_pc <= PC2LINE_DIFF_PC_MAX) {\n                dbuf_putc(&s->pc2line, (diff_line - PC2LINE_BASE) +\n                          diff_pc * PC2LINE_RANGE + PC2LINE_OP_FIRST);\n            } else {\n                /* longer encoding */\n                dbuf_putc(&s->pc2line, 0);\n                dbuf_put_leb128(&s->pc2line, diff_pc);\n                dbuf_put_sleb128(&s->pc2line, diff_line);\n            }\n            last_pc = pc;\n            last_line_num = line_num;\n        }\n    }\n}\n```\n\n\n\n- 需要注意匹配到的函数可能只是外层函数，具体的断点偏移计算时要考虑递归子函数。\n\n  - 基于pc2line table计算断点在函数字节码中的偏移位置，计算时如果目出现计算出来的行号比目标行号大的情况 `end_line_num>cur_line_num>targe_num`，说明断点落在了子函数中，需要递归，直到最终找到或全部失败。\n\n  \n\n  ![image-20230525125207891](https://raw.githubusercontent.com/why862555625/images/main/image-20230525125207891.png)\n\n- 断点断到、将pause消息和目前上下文的变量信息和调用栈发送给devtools。\n\n  - runtime上面保留了当前栈的信息JSStackFrame，JSStackFrame上面保存了栈上的变量、参数、函数信息；并且JSStackFrame可以通过prev_frame向上查找栈信息。这样遍历下来就可以完整的得到栈上的变量和调用栈。\n\n  \n\n**JSRuntime和JSStackFrame的数据结构**\n\n```C++\n\nstruct JSRuntime {\n    JSMallocFunctions mf;\n    JSMallocState malloc_state;\n    const char *rt_info;\n\n    int atom_hash_size; /* power of two */\n    int atom_count;\n    int atom_size;\n    int atom_count_resize; /* resize hash table at this count */\n    uint32_t *atom_hash;\n    JSAtomStruct **atom_array;\n    int atom_free_index; /* 0 = none */\n\n    int class_count;    /* size of class_array */\n    JSClass *class_array;\n\n    struct list_head context_list; /* list of JSContext.link */\n    /* list of JSGCObjectHeader.link. List of allocated GC objects (used\n       by the garbage collector) */\n    struct list_head gc_obj_list;\n    /* list of JSGCObjectHeader.link. Used during JS_FreeValueRT() */\n    struct list_head gc_zero_ref_count_list;\n    struct list_head tmp_obj_list; /* used during GC */\n    JSGCPhaseEnum gc_phase : 8;\n    size_t malloc_gc_threshold;\n#ifdef DUMP_LEAKS\n    struct list_head string_list; /* list of JSString.link */\n#endif\n    /* stack limitation */\n    uintptr_t stack_size; /* in bytes, 0 if no limit */\n    uintptr_t stack_top;\n    uintptr_t stack_limit; /* lower stack limit */\n\n    JSValue current_exception;\n    /* true if inside an out of memory error, to avoid recursing */\n    BOOL in_out_of_memory : 8;\n\n    struct JSStackFrame *current_stack_frame;  // current stack info\n\n    JSInterruptHandler *interrupt_handler;\n    void *interrupt_opaque;\n\n    JSHostPromiseRejectionTracker *host_promise_rejection_tracker;\n    void *host_promise_rejection_tracker_opaque;\n\n    struct list_head job_list; /* list of JSJobEntry.link */\n\n    JSModuleNormalizeFunc *module_normalize_func;\n    JSModuleLoaderFunc *module_loader_func;\n    void *module_loader_opaque;\n\n    BOOL can_block : 8; /* TRUE if Atomics.wait can block */\n    /* used to allocate, free and clone SharedArrayBuffers */\n    JSSharedArrayBufferFunctions sab_funcs;\n\n    /* Shape hash table */\n    int shape_hash_bits;\n    int shape_hash_size;\n    int shape_hash_count; /* number of hashed shapes */\n    JSShape **shape_hash;\n#ifdef CONFIG_BIGNUM\n    bf_context_t bf_ctx;\n    JSNumericOperations bigint_ops;\n    JSNumericOperations bigfloat_ops;\n    JSNumericOperations bigdecimal_ops;\n    uint32_t operator_count;\n#endif\n    void *user_opaque;\n#ifdef CONFIG_INTERPRETERS_QUICKJS_DEBUG\n    struct JSDebuggerInfo debugger_info;\n    struct DumpMemoryInfo dump_memory_info;\n#endif\n    JSOutOfMemoryTracker* oom_tracker;\n#ifdef CONFIG_MEMORY_LEAK_TRACK\n    int isStartMemoryDump;\n    vector* newObjVector;\n    JSContext* currentCtx;\n    char* pageStatus;\n#endif\n};\n\ntypedef struct JSStackFrame {\n    struct JSStackFrame *prev_frame; /* NULL if first stack frame */\n    JSValue cur_func; /* current function, JS_UNDEFINED if the frame is detached */\n    JSValue *arg_buf; /* arguments */\n    JSValue *var_buf; /* variables */\n    struct list_head var_ref_list; /* list of JSVarRef.link */\n    const uint8_t *cur_pc; /* only used in bytecode functions : PC of the\n                        instruction after the call */\n    int arg_count;\n    int js_mode; /* 0 or JS_MODE_MATH for C functions */\n    /* only used in generators. Current stack pointer value. NULL if\n       the function is running. */\n    JSValue *cur_sp;\n} JSStackFrame;\n\n```\n\n**函数数据结构：**\n\n![](https://raw.githubusercontent.com/why862555625/images/main/image-20230525144252998.png)\n\n**查找目标函数流程：**\n\n![](https://raw.githubusercontent.com/why862555625/images/main/image-20230525124949165.png)\n\n\n\n## 4. 在引擎执行字节码时判断有无命中断点。\n\n命中断点有两个设计思路：\n\n**第一种：**\n\n直接修改字节码、插入debugger指令和nop\\需要额外注意在命中后和取消时将字节码恢复、否则会出现问题。\n\n![image-20230525161322186](https://raw.githubusercontent.com/why862555625/images/main/image-20230525161322186.png)\n\n**第二种：**\n\n分配一块和字节码相同长度的数组、在相同的便宜位置写入1、作为断点标志、方便命中检查。\n\n![image-20230525161507336](https://raw.githubusercontent.com/why862555625/images/main/image-20230525161507336.png)\n\n断点命中的核心思路实在引擎解释执行字节码的时候插入堆断点命中的检查、命中断电后停止执行（不在继续解释下一条指令）。\n\n这里选择重定义字节码的case定义、如果开启了调试功能、则每次解释执行字节码都会插入对js_debugger_check函数执行、他负责检查每一步执行是否命中断点。检查方法很简单、检查当前pc是否落在了断点的范围内（依赖设置断点）\n\n```c++\n#ifdef CONFIG_INTERPRETERS_QUICKJS_DEBUG\n#define CASE(op)        case op: js_debugger_check(ctx, pc); stub_ ## op\n#else\n#define CASE(op)        case op: stub_ ## op\n#endif\n```\n\n**执行字节码：**\n\n![image-20230525170447952](https://raw.githubusercontent.com/why862555625/images/main/image-20230525170447952.png)\n\njs_debugger_check 中暂停的主要逻辑是一个`while(ture)`循环，然后每次执行libuv_run_once()推一次主循环的句柄，用来判断服务端是否放开断点。\n\n\n\n# memory 功能\n\n\n\nmemory功能大概可以概述为三个部分：\n\n1. 接受devtools  memory dump的请求之后，开始遍历引擎的堆内存链表（v8是使用图结构来表示的堆内存、quickjs是使用链表表示的）。\n2. 将quickjs中的链表内存转化为图结构内存。（devtools snapshot需要图结构）\n3. 将图结构转化为snapshot发送给devtools、devtools进行解析并显示。\n\n## 1. 理解引擎的堆内存结构\n\nquickjs的runtime中的gc_obj_list保存了引擎中的所有堆对象的JSGCObjectHeader.遍历gc_obj_list就可以得到所有的堆对象信息\n\n```c++\n\nstruct JSGCObjectHeader {\n    int ref_count; /* must come first, 32-bit */\n    JSGCObjectTypeEnum gc_obj_type : 4;\n    uint8_t mark : 4; /* used by the GC */\n    uint8_t dummy1; /* not used by the GC */\n    uint16_t dummy2; /* not used by the GC */\n    struct list_head link;\n    int64_t id;\n};\n```\n\n\n\n![image-20230525171354456](https://raw.githubusercontent.com/why862555625/images/main/image-20230525171354456.png)\n\n\n\n## 2. 理解snapshot文件格式\n\n- V8 HeapSnapshot文件整体采用JSON格式存储。\n- 存储时采用Meta + 内容的方式，Meta里描述了各个字段的含义，各个节点的数量等。\n- 内存dump信息按照点集和边集的形式存储。点集存储节点信息，边集存储对象之间的链接关系。\n- 字符串是单独存储的，节点中使用时采用下标引用的方式以节约内存。\n\n\n\n![image-20230525172031289](https://raw.githubusercontent.com/why862555625/images/main/image-20230525172031289.png)\n\n\n\n\n\n## 3.堆对象处理：从链表到图\n\nQuickjs中GC对象是通过链表保存的，但HeapSnapshot中是按照图结构保存的，所以需要有一个从链表构建对象图的过程，我生成了一个代理结构，额外记录了对象间的链接关系。\n\n如果不这样做，就需要修改quickjs的GC list结构，这样改动会很大。\n\n\n\n![image-20230525172159734](https://raw.githubusercontent.com/why862555625/images/main/image-20230525172159734.png)\n\n## 4. Proxy图的构建算法\n\n![image-20230525172302551](https://raw.githubusercontent.com/why862555625/images/main/image-20230525172302551.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/c/quickjs调试器.md","raw":"---\ntitle: quickjs调试工具\ntags:\n  - 前端\n  - C\ncategories: C\nkeywords: '前端,面试,C'\ndescription: quickjs调试工具\ntop_img: 设置false不显示顶部图片\nsticky: 数值越大越靠前\ncover: \"https://raw.githubusercontent.com/why862555625/images/main/images/18.jpg\"\ncomments: false评论\nabbrlink: d9795d10\ndate: 2023-05-23 15:21:13\nupdated: 2023-05-23 15:21:13\n---\n\n\n\nvela系统quickjs对接devtools\n\n<!-- more -->\n\n## vela快应用调试功能概览\n\n![image-20230525102147522](https://raw.githubusercontent.com/why862555625/images/main/image-20230525102147522.png)\n\n# vela debug调试功能\n\ndebug调试功能图\n\n![image-20230525111407415](https://raw.githubusercontent.com/why862555625/images/main/image-20230525111407415.png)\n\nvela debug调试功能实现大致分为4个步骤：\n\n1. **连接时将所有的源码发送给devtools。**\n2. **在devtools 的source功能中打断点、将请求发送给下层cdp.**\n3. **cdp计算断点具体在字节码中的位置、并记录。**\n4. **在引擎执行字节码时判断有无命中断点。**\n\n下面具体说明这四个步骤：\n\n## 1. 连接时将所有的源码发送给devtools\n\n在调用loadApplication时会将app的路径保存在APP类中，也就是app的rpk的最外层路径。在监听到devtool连接时，会将rpk包中的所js文件发送给devtools，devtools会将这些js文件拼接成上图中的source文件。\n\n## 2. 在devtools 的source功能中打断点、将请求发送给下层cdp\n\n当打开source文件上打断点、devtools会将断点的文件名、行号发送到下层cdp.\n\n## 3. cdp计算断点具体在字节码中的位置、并记录。\n\n- 断点功能的输入实际上是文件名和断点行信息，第一步我们需要利用这个信息，找到模块，进而首先找到目标函数。\n  - quickjs在真实加载module的时候都会调用JS_EvalInternal。我们可以在这个函数里面监听并记录已经加载完的模块。\n\n- 每个函数对象上都记录了自身的起始行，通过pc2line table可以计算得到结束行，进而和传入的行号进行范围匹配计算。\n  - 函数和字节码的映射规则：\n    - 如果一行源码对应的字节码较短，就将前4位存源码的行数，后四位存字节码对应的行数\n    - 如果一个源码对应的字节码较长，就先存入一个0值（解析pc2line_buf的时候遇到0值会自动将下一个当做128  int来解析），后面补一个128的int，这个int的高位用来存源码行数、低位存字节码的行数。\n\n**计算结束行函数：**\n\n```c++\n#define PC2LINE_BASE     (-1)\n#define PC2LINE_RANGE    5\n#define PC2LINE_OP_FIRST 1\n#define PC2LINE_DIFF_PC_MAX ((255 - PC2LINE_OP_FIRST) / PC2LINE_RANGE)\nstatic int caculate_function_last_line(JSFunctionBytecode* b) {\n    unsigned int op;\n    int ret, v;\n    FunctionBytecodeDebugInfo* debug = js_debugger_get_bytecode_debug_info(b);\n    int line_num = debug->line_num, new_line_num;\n    uint8_t *p = debug->pc2line_buf;\n    uint8_t *p_end = p + debug->pc2line_len;\n    int succ = 1;\n\n    // scan line by line\n    while (p < p_end) {\n        op = *p++;\n        if (op == 0) {\n            uint32_t val;\n            ret = get_leb128(&val, p, p_end);\n            if (ret < 0) {\n                succ = 0;\n                break;\n            }\n            // pc += val;\n            p += ret;\n            ret = get_sleb128(&v, p, p_end);\n            if (ret < 0) {\n                succ = 0;\n                break;\n            }\n            p += ret;\n            new_line_num = line_num + v;\n        } else {\n            op -= PC2LINE_OP_FIRST;\n            new_line_num = line_num + (op % PC2LINE_RANGE) + PC2LINE_BASE;\n        }\n        line_num = new_line_num;\n    }\n    return succ ? line_num : 0;\n}\n\nSTATIC int get_leb128(uint32_t *pval, const uint8_t *buf,\n                      const uint8_t *buf_end)\n{\n    const uint8_t *ptr = buf;\n    uint32_t v, a, i;\n    v = 0;\n    for(i = 0; i < 5; i++) {\n        if (unlikely(ptr >= buf_end))\n            break;\n        a = *ptr++;\n        v |= (a & 0x7f) << (i * 7);\n        if (!(a & 0x80)) {\n            *pval = v;\n            return ptr - buf;\n        }\n    }\n    *pval = 0;\n    return -1;\n}\nSTATIC int get_sleb128(int32_t *pval, const uint8_t *buf,\n                       const uint8_t *buf_end)\n{\n    int ret;\n    uint32_t val;\n    ret = get_leb128(&val, buf, buf_end);\n    if (ret < 0) {\n        *pval = 0;\n        return -1;\n    }\n    *pval = (val >> 1) ^ -(val & 1);\n    return ret;\n}\n```\n\n**源码表和字节码表对应规则：**\n\n```c++\n\nstatic void compute_pc2line_info(JSFunctionDef *s)\n{\n    if (!(s->js_mode & JS_MODE_STRIP) && s->line_number_slots) {\n        int last_line_num = s->line_num;\n        uint32_t last_pc = 0;\n        int i;\n\n        js_dbuf_init(s->ctx, &s->pc2line);\n        for (i = 0; i < s->line_number_count; i++) {\n            uint32_t pc = s->line_number_slots[i].pc;\n            int line_num = s->line_number_slots[i].line_num;\n            int diff_pc, diff_line;\n\n            if (line_num < 0)\n                continue;\n\n            diff_pc = pc - last_pc;\n            diff_line = line_num - last_line_num;\n            if (diff_line == 0 || diff_pc < 0)\n                continue;\n\n            if (diff_line >= PC2LINE_BASE &&\n                diff_line < PC2LINE_BASE + PC2LINE_RANGE &&\n                diff_pc <= PC2LINE_DIFF_PC_MAX) {\n                dbuf_putc(&s->pc2line, (diff_line - PC2LINE_BASE) +\n                          diff_pc * PC2LINE_RANGE + PC2LINE_OP_FIRST);\n            } else {\n                /* longer encoding */\n                dbuf_putc(&s->pc2line, 0);\n                dbuf_put_leb128(&s->pc2line, diff_pc);\n                dbuf_put_sleb128(&s->pc2line, diff_line);\n            }\n            last_pc = pc;\n            last_line_num = line_num;\n        }\n    }\n}\n```\n\n\n\n- 需要注意匹配到的函数可能只是外层函数，具体的断点偏移计算时要考虑递归子函数。\n\n  - 基于pc2line table计算断点在函数字节码中的偏移位置，计算时如果目出现计算出来的行号比目标行号大的情况 `end_line_num>cur_line_num>targe_num`，说明断点落在了子函数中，需要递归，直到最终找到或全部失败。\n\n  \n\n  ![image-20230525125207891](https://raw.githubusercontent.com/why862555625/images/main/image-20230525125207891.png)\n\n- 断点断到、将pause消息和目前上下文的变量信息和调用栈发送给devtools。\n\n  - runtime上面保留了当前栈的信息JSStackFrame，JSStackFrame上面保存了栈上的变量、参数、函数信息；并且JSStackFrame可以通过prev_frame向上查找栈信息。这样遍历下来就可以完整的得到栈上的变量和调用栈。\n\n  \n\n**JSRuntime和JSStackFrame的数据结构**\n\n```C++\n\nstruct JSRuntime {\n    JSMallocFunctions mf;\n    JSMallocState malloc_state;\n    const char *rt_info;\n\n    int atom_hash_size; /* power of two */\n    int atom_count;\n    int atom_size;\n    int atom_count_resize; /* resize hash table at this count */\n    uint32_t *atom_hash;\n    JSAtomStruct **atom_array;\n    int atom_free_index; /* 0 = none */\n\n    int class_count;    /* size of class_array */\n    JSClass *class_array;\n\n    struct list_head context_list; /* list of JSContext.link */\n    /* list of JSGCObjectHeader.link. List of allocated GC objects (used\n       by the garbage collector) */\n    struct list_head gc_obj_list;\n    /* list of JSGCObjectHeader.link. Used during JS_FreeValueRT() */\n    struct list_head gc_zero_ref_count_list;\n    struct list_head tmp_obj_list; /* used during GC */\n    JSGCPhaseEnum gc_phase : 8;\n    size_t malloc_gc_threshold;\n#ifdef DUMP_LEAKS\n    struct list_head string_list; /* list of JSString.link */\n#endif\n    /* stack limitation */\n    uintptr_t stack_size; /* in bytes, 0 if no limit */\n    uintptr_t stack_top;\n    uintptr_t stack_limit; /* lower stack limit */\n\n    JSValue current_exception;\n    /* true if inside an out of memory error, to avoid recursing */\n    BOOL in_out_of_memory : 8;\n\n    struct JSStackFrame *current_stack_frame;  // current stack info\n\n    JSInterruptHandler *interrupt_handler;\n    void *interrupt_opaque;\n\n    JSHostPromiseRejectionTracker *host_promise_rejection_tracker;\n    void *host_promise_rejection_tracker_opaque;\n\n    struct list_head job_list; /* list of JSJobEntry.link */\n\n    JSModuleNormalizeFunc *module_normalize_func;\n    JSModuleLoaderFunc *module_loader_func;\n    void *module_loader_opaque;\n\n    BOOL can_block : 8; /* TRUE if Atomics.wait can block */\n    /* used to allocate, free and clone SharedArrayBuffers */\n    JSSharedArrayBufferFunctions sab_funcs;\n\n    /* Shape hash table */\n    int shape_hash_bits;\n    int shape_hash_size;\n    int shape_hash_count; /* number of hashed shapes */\n    JSShape **shape_hash;\n#ifdef CONFIG_BIGNUM\n    bf_context_t bf_ctx;\n    JSNumericOperations bigint_ops;\n    JSNumericOperations bigfloat_ops;\n    JSNumericOperations bigdecimal_ops;\n    uint32_t operator_count;\n#endif\n    void *user_opaque;\n#ifdef CONFIG_INTERPRETERS_QUICKJS_DEBUG\n    struct JSDebuggerInfo debugger_info;\n    struct DumpMemoryInfo dump_memory_info;\n#endif\n    JSOutOfMemoryTracker* oom_tracker;\n#ifdef CONFIG_MEMORY_LEAK_TRACK\n    int isStartMemoryDump;\n    vector* newObjVector;\n    JSContext* currentCtx;\n    char* pageStatus;\n#endif\n};\n\ntypedef struct JSStackFrame {\n    struct JSStackFrame *prev_frame; /* NULL if first stack frame */\n    JSValue cur_func; /* current function, JS_UNDEFINED if the frame is detached */\n    JSValue *arg_buf; /* arguments */\n    JSValue *var_buf; /* variables */\n    struct list_head var_ref_list; /* list of JSVarRef.link */\n    const uint8_t *cur_pc; /* only used in bytecode functions : PC of the\n                        instruction after the call */\n    int arg_count;\n    int js_mode; /* 0 or JS_MODE_MATH for C functions */\n    /* only used in generators. Current stack pointer value. NULL if\n       the function is running. */\n    JSValue *cur_sp;\n} JSStackFrame;\n\n```\n\n**函数数据结构：**\n\n![](https://raw.githubusercontent.com/why862555625/images/main/image-20230525144252998.png)\n\n**查找目标函数流程：**\n\n![](https://raw.githubusercontent.com/why862555625/images/main/image-20230525124949165.png)\n\n\n\n## 4. 在引擎执行字节码时判断有无命中断点。\n\n命中断点有两个设计思路：\n\n**第一种：**\n\n直接修改字节码、插入debugger指令和nop\\需要额外注意在命中后和取消时将字节码恢复、否则会出现问题。\n\n![image-20230525161322186](https://raw.githubusercontent.com/why862555625/images/main/image-20230525161322186.png)\n\n**第二种：**\n\n分配一块和字节码相同长度的数组、在相同的便宜位置写入1、作为断点标志、方便命中检查。\n\n![image-20230525161507336](https://raw.githubusercontent.com/why862555625/images/main/image-20230525161507336.png)\n\n断点命中的核心思路实在引擎解释执行字节码的时候插入堆断点命中的检查、命中断电后停止执行（不在继续解释下一条指令）。\n\n这里选择重定义字节码的case定义、如果开启了调试功能、则每次解释执行字节码都会插入对js_debugger_check函数执行、他负责检查每一步执行是否命中断点。检查方法很简单、检查当前pc是否落在了断点的范围内（依赖设置断点）\n\n```c++\n#ifdef CONFIG_INTERPRETERS_QUICKJS_DEBUG\n#define CASE(op)        case op: js_debugger_check(ctx, pc); stub_ ## op\n#else\n#define CASE(op)        case op: stub_ ## op\n#endif\n```\n\n**执行字节码：**\n\n![image-20230525170447952](https://raw.githubusercontent.com/why862555625/images/main/image-20230525170447952.png)\n\njs_debugger_check 中暂停的主要逻辑是一个`while(ture)`循环，然后每次执行libuv_run_once()推一次主循环的句柄，用来判断服务端是否放开断点。\n\n\n\n# memory 功能\n\n\n\nmemory功能大概可以概述为三个部分：\n\n1. 接受devtools  memory dump的请求之后，开始遍历引擎的堆内存链表（v8是使用图结构来表示的堆内存、quickjs是使用链表表示的）。\n2. 将quickjs中的链表内存转化为图结构内存。（devtools snapshot需要图结构）\n3. 将图结构转化为snapshot发送给devtools、devtools进行解析并显示。\n\n## 1. 理解引擎的堆内存结构\n\nquickjs的runtime中的gc_obj_list保存了引擎中的所有堆对象的JSGCObjectHeader.遍历gc_obj_list就可以得到所有的堆对象信息\n\n```c++\n\nstruct JSGCObjectHeader {\n    int ref_count; /* must come first, 32-bit */\n    JSGCObjectTypeEnum gc_obj_type : 4;\n    uint8_t mark : 4; /* used by the GC */\n    uint8_t dummy1; /* not used by the GC */\n    uint16_t dummy2; /* not used by the GC */\n    struct list_head link;\n    int64_t id;\n};\n```\n\n\n\n![image-20230525171354456](https://raw.githubusercontent.com/why862555625/images/main/image-20230525171354456.png)\n\n\n\n## 2. 理解snapshot文件格式\n\n- V8 HeapSnapshot文件整体采用JSON格式存储。\n- 存储时采用Meta + 内容的方式，Meta里描述了各个字段的含义，各个节点的数量等。\n- 内存dump信息按照点集和边集的形式存储。点集存储节点信息，边集存储对象之间的链接关系。\n- 字符串是单独存储的，节点中使用时采用下标引用的方式以节约内存。\n\n\n\n![image-20230525172031289](https://raw.githubusercontent.com/why862555625/images/main/image-20230525172031289.png)\n\n\n\n\n\n## 3.堆对象处理：从链表到图\n\nQuickjs中GC对象是通过链表保存的，但HeapSnapshot中是按照图结构保存的，所以需要有一个从链表构建对象图的过程，我生成了一个代理结构，额外记录了对象间的链接关系。\n\n如果不这样做，就需要修改quickjs的GC list结构，这样改动会很大。\n\n\n\n![image-20230525172159734](https://raw.githubusercontent.com/why862555625/images/main/image-20230525172159734.png)\n\n## 4. Proxy图的构建算法\n\n![image-20230525172302551](https://raw.githubusercontent.com/why862555625/images/main/image-20230525172302551.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"c/quickjs调试器","published":1,"layout":"post","photos":[],"link":"","_id":"clijtrgc40007yswh0asc8n8y","content":"<p>vela系统quickjs对接devtools</p>\n<span id=\"more\"></span>\n\n<h2 id=\"vela快应用调试功能概览\"><a href=\"#vela快应用调试功能概览\" class=\"headerlink\" title=\"vela快应用调试功能概览\"></a>vela快应用调试功能概览</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525102147522.png\" alt=\"image-20230525102147522\"></p>\n<h1 id=\"vela-debug调试功能\"><a href=\"#vela-debug调试功能\" class=\"headerlink\" title=\"vela debug调试功能\"></a>vela debug调试功能</h1><p>debug调试功能图</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525111407415.png\" alt=\"image-20230525111407415\"></p>\n<p>vela debug调试功能实现大致分为4个步骤：</p>\n<ol>\n<li><strong>连接时将所有的源码发送给devtools。</strong></li>\n<li><strong>在devtools 的source功能中打断点、将请求发送给下层cdp.</strong></li>\n<li><strong>cdp计算断点具体在字节码中的位置、并记录。</strong></li>\n<li><strong>在引擎执行字节码时判断有无命中断点。</strong></li>\n</ol>\n<p>下面具体说明这四个步骤：</p>\n<h2 id=\"1-连接时将所有的源码发送给devtools\"><a href=\"#1-连接时将所有的源码发送给devtools\" class=\"headerlink\" title=\"1. 连接时将所有的源码发送给devtools\"></a>1. 连接时将所有的源码发送给devtools</h2><p>在调用loadApplication时会将app的路径保存在APP类中，也就是app的rpk的最外层路径。在监听到devtool连接时，会将rpk包中的所js文件发送给devtools，devtools会将这些js文件拼接成上图中的source文件。</p>\n<h2 id=\"2-在devtools-的source功能中打断点、将请求发送给下层cdp\"><a href=\"#2-在devtools-的source功能中打断点、将请求发送给下层cdp\" class=\"headerlink\" title=\"2. 在devtools 的source功能中打断点、将请求发送给下层cdp\"></a>2. 在devtools 的source功能中打断点、将请求发送给下层cdp</h2><p>当打开source文件上打断点、devtools会将断点的文件名、行号发送到下层cdp.</p>\n<h2 id=\"3-cdp计算断点具体在字节码中的位置、并记录。\"><a href=\"#3-cdp计算断点具体在字节码中的位置、并记录。\" class=\"headerlink\" title=\"3. cdp计算断点具体在字节码中的位置、并记录。\"></a>3. cdp计算断点具体在字节码中的位置、并记录。</h2><ul>\n<li><p>断点功能的输入实际上是文件名和断点行信息，第一步我们需要利用这个信息，找到模块，进而首先找到目标函数。</p>\n<ul>\n<li>quickjs在真实加载module的时候都会调用JS_EvalInternal。我们可以在这个函数里面监听并记录已经加载完的模块。</li>\n</ul>\n</li>\n<li><p>每个函数对象上都记录了自身的起始行，通过pc2line table可以计算得到结束行，进而和传入的行号进行范围匹配计算。</p>\n<ul>\n<li>函数和字节码的映射规则：<ul>\n<li>如果一行源码对应的字节码较短，就将前4位存源码的行数，后四位存字节码对应的行数</li>\n<li>如果一个源码对应的字节码较长，就先存入一个0值（解析pc2line_buf的时候遇到0值会自动将下一个当做128  int来解析），后面补一个128的int，这个int的高位用来存源码行数、低位存字节码的行数。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>计算结束行函数：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PC2LINE_BASE     (-1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PC2LINE_RANGE    5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PC2LINE_OP_FIRST 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PC2LINE_DIFF_PC_MAX ((255 - PC2LINE_OP_FIRST) / PC2LINE_RANGE)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">caculate_function_last_line</span><span class=\"params\">(JSFunctionBytecode* b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> op;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret, v;</span><br><span class=\"line\">    FunctionBytecodeDebugInfo* debug = <span class=\"built_in\">js_debugger_get_bytecode_debug_info</span>(b);</span><br><span class=\"line\">    <span class=\"type\">int</span> line_num = debug-&gt;line_num, new_line_num;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> *p = debug-&gt;pc2line_buf;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> *p_end = p + debug-&gt;pc2line_len;</span><br><span class=\"line\">    <span class=\"type\">int</span> succ = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// scan line by line</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p &lt; p_end) &#123;</span><br><span class=\"line\">        op = *p++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> val;</span><br><span class=\"line\">            ret = <span class=\"built_in\">get_leb128</span>(&amp;val, p, p_end);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                succ = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// pc += val;</span></span><br><span class=\"line\">            p += ret;</span><br><span class=\"line\">            ret = <span class=\"built_in\">get_sleb128</span>(&amp;v, p, p_end);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                succ = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            p += ret;</span><br><span class=\"line\">            new_line_num = line_num + v;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            op -= PC2LINE_OP_FIRST;</span><br><span class=\"line\">            new_line_num = line_num + (op % PC2LINE_RANGE) + PC2LINE_BASE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        line_num = new_line_num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> succ ? line_num : <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">STATIC <span class=\"type\">int</span> <span class=\"title\">get_leb128</span><span class=\"params\">(<span class=\"type\">uint32_t</span> *pval, <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *buf,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                      <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *buf_end)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *ptr = buf;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> v, a, i;</span><br><span class=\"line\">    v = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">unlikely</span>(ptr &gt;= buf_end))</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        a = *ptr++;</span><br><span class=\"line\">        v |= (a &amp; <span class=\"number\">0x7f</span>) &lt;&lt; (i * <span class=\"number\">7</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(a &amp; <span class=\"number\">0x80</span>)) &#123;</span><br><span class=\"line\">            *pval = v;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ptr - buf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *pval = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">STATIC <span class=\"type\">int</span> <span class=\"title\">get_sleb128</span><span class=\"params\">(<span class=\"type\">int32_t</span> *pval, <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *buf,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                       <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *buf_end)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> val;</span><br><span class=\"line\">    ret = <span class=\"built_in\">get_leb128</span>(&amp;val, buf, buf_end);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        *pval = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *pval = (val &gt;&gt; <span class=\"number\">1</span>) ^ -(val &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>源码表和字节码表对应规则：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">compute_pc2line_info</span><span class=\"params\">(JSFunctionDef *s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(s-&gt;js_mode &amp; JS_MODE_STRIP) &amp;&amp; s-&gt;line_number_slots) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> last_line_num = s-&gt;line_num;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> last_pc = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">js_dbuf_init</span>(s-&gt;ctx, &amp;s-&gt;pc2line);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; s-&gt;line_number_count; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> pc = s-&gt;line_number_slots[i].pc;</span><br><span class=\"line\">            <span class=\"type\">int</span> line_num = s-&gt;line_number_slots[i].line_num;</span><br><span class=\"line\">            <span class=\"type\">int</span> diff_pc, diff_line;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (line_num &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            diff_pc = pc - last_pc;</span><br><span class=\"line\">            diff_line = line_num - last_line_num;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (diff_line == <span class=\"number\">0</span> || diff_pc &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (diff_line &gt;= PC2LINE_BASE &amp;&amp;</span><br><span class=\"line\">                diff_line &lt; PC2LINE_BASE + PC2LINE_RANGE &amp;&amp;</span><br><span class=\"line\">                diff_pc &lt;= PC2LINE_DIFF_PC_MAX) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">dbuf_putc</span>(&amp;s-&gt;pc2line, (diff_line - PC2LINE_BASE) +</span><br><span class=\"line\">                          diff_pc * PC2LINE_RANGE + PC2LINE_OP_FIRST);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/* longer encoding */</span></span><br><span class=\"line\">                <span class=\"built_in\">dbuf_putc</span>(&amp;s-&gt;pc2line, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"built_in\">dbuf_put_leb128</span>(&amp;s-&gt;pc2line, diff_pc);</span><br><span class=\"line\">                <span class=\"built_in\">dbuf_put_sleb128</span>(&amp;s-&gt;pc2line, diff_line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            last_pc = pc;</span><br><span class=\"line\">            last_line_num = line_num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>需要注意匹配到的函数可能只是外层函数，具体的断点偏移计算时要考虑递归子函数。</p>\n<ul>\n<li>基于pc2line table计算断点在函数字节码中的偏移位置，计算时如果目出现计算出来的行号比目标行号大的情况 <code>end_line_num&gt;cur_line_num&gt;targe_num</code>，说明断点落在了子函数中，需要递归，直到最终找到或全部失败。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525125207891.png\" alt=\"image-20230525125207891\"></p>\n</li>\n<li><p>断点断到、将pause消息和目前上下文的变量信息和调用栈发送给devtools。</p>\n<ul>\n<li>runtime上面保留了当前栈的信息JSStackFrame，JSStackFrame上面保存了栈上的变量、参数、函数信息；并且JSStackFrame可以通过prev_frame向上查找栈信息。这样遍历下来就可以完整的得到栈上的变量和调用栈。</li>\n</ul>\n</li>\n</ul>\n<p><strong>JSRuntime和JSStackFrame的数据结构</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">JSRuntime</span> &#123;</span><br><span class=\"line\">    JSMallocFunctions mf;</span><br><span class=\"line\">    JSMallocState malloc_state;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *rt_info;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> atom_hash_size; <span class=\"comment\">/* power of two */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> atom_count;</span><br><span class=\"line\">    <span class=\"type\">int</span> atom_size;</span><br><span class=\"line\">    <span class=\"type\">int</span> atom_count_resize; <span class=\"comment\">/* resize hash table at this count */</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> *atom_hash;</span><br><span class=\"line\">    JSAtomStruct **atom_array;</span><br><span class=\"line\">    <span class=\"type\">int</span> atom_free_index; <span class=\"comment\">/* 0 = none */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> class_count;    <span class=\"comment\">/* size of class_array */</span></span><br><span class=\"line\">    JSClass *class_array;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> context_list; <span class=\"comment\">/* list of JSContext.link */</span></span><br><span class=\"line\">    <span class=\"comment\">/* list of JSGCObjectHeader.link. List of allocated GC objects (used</span></span><br><span class=\"line\"><span class=\"comment\">       by the garbage collector) */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> gc_obj_list;</span><br><span class=\"line\">    <span class=\"comment\">/* list of JSGCObjectHeader.link. Used during JS_FreeValueRT() */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> gc_zero_ref_count_list;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> tmp_obj_list; <span class=\"comment\">/* used during GC */</span></span><br><span class=\"line\">    JSGCPhaseEnum gc_phase : <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> malloc_gc_threshold;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> DUMP_LEAKS</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> string_list; <span class=\"comment\">/* list of JSString.link */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"comment\">/* stack limitation */</span></span><br><span class=\"line\">    <span class=\"type\">uintptr_t</span> stack_size; <span class=\"comment\">/* in bytes, 0 if no limit */</span></span><br><span class=\"line\">    <span class=\"type\">uintptr_t</span> stack_top;</span><br><span class=\"line\">    <span class=\"type\">uintptr_t</span> stack_limit; <span class=\"comment\">/* lower stack limit */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    JSValue current_exception;</span><br><span class=\"line\">    <span class=\"comment\">/* true if inside an out of memory error, to avoid recursing */</span></span><br><span class=\"line\">    BOOL in_out_of_memory : <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">JSStackFrame</span> *current_stack_frame;  <span class=\"comment\">// current stack info</span></span><br><span class=\"line\"></span><br><span class=\"line\">    JSInterruptHandler *interrupt_handler;</span><br><span class=\"line\">    <span class=\"type\">void</span> *interrupt_opaque;</span><br><span class=\"line\"></span><br><span class=\"line\">    JSHostPromiseRejectionTracker *host_promise_rejection_tracker;</span><br><span class=\"line\">    <span class=\"type\">void</span> *host_promise_rejection_tracker_opaque;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> job_list; <span class=\"comment\">/* list of JSJobEntry.link */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    JSModuleNormalizeFunc *module_normalize_func;</span><br><span class=\"line\">    JSModuleLoaderFunc *module_loader_func;</span><br><span class=\"line\">    <span class=\"type\">void</span> *module_loader_opaque;</span><br><span class=\"line\"></span><br><span class=\"line\">    BOOL can_block : <span class=\"number\">8</span>; <span class=\"comment\">/* TRUE if Atomics.wait can block */</span></span><br><span class=\"line\">    <span class=\"comment\">/* used to allocate, free and clone SharedArrayBuffers */</span></span><br><span class=\"line\">    JSSharedArrayBufferFunctions sab_funcs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Shape hash table */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> shape_hash_bits;</span><br><span class=\"line\">    <span class=\"type\">int</span> shape_hash_size;</span><br><span class=\"line\">    <span class=\"type\">int</span> shape_hash_count; <span class=\"comment\">/* number of hashed shapes */</span></span><br><span class=\"line\">    JSShape **shape_hash;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_BIGNUM</span></span><br><span class=\"line\">    <span class=\"type\">bf_context_t</span> bf_ctx;</span><br><span class=\"line\">    JSNumericOperations bigint_ops;</span><br><span class=\"line\">    JSNumericOperations bigfloat_ops;</span><br><span class=\"line\">    JSNumericOperations bigdecimal_ops;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> operator_count;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"type\">void</span> *user_opaque;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_INTERPRETERS_QUICKJS_DEBUG</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">JSDebuggerInfo</span> debugger_info;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">DumpMemoryInfo</span> dump_memory_info;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    JSOutOfMemoryTracker* oom_tracker;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_MEMORY_LEAK_TRACK</span></span><br><span class=\"line\">    <span class=\"type\">int</span> isStartMemoryDump;</span><br><span class=\"line\">    vector* newObjVector;</span><br><span class=\"line\">    JSContext* currentCtx;</span><br><span class=\"line\">    <span class=\"type\">char</span>* pageStatus;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">JSStackFrame</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">JSStackFrame</span> *prev_frame; <span class=\"comment\">/* NULL if first stack frame */</span></span><br><span class=\"line\">    JSValue cur_func; <span class=\"comment\">/* current function, JS_UNDEFINED if the frame is detached */</span></span><br><span class=\"line\">    JSValue *arg_buf; <span class=\"comment\">/* arguments */</span></span><br><span class=\"line\">    JSValue *var_buf; <span class=\"comment\">/* variables */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> var_ref_list; <span class=\"comment\">/* list of JSVarRef.link */</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *cur_pc; <span class=\"comment\">/* only used in bytecode functions : PC of the</span></span><br><span class=\"line\"><span class=\"comment\">                        instruction after the call */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> arg_count;</span><br><span class=\"line\">    <span class=\"type\">int</span> js_mode; <span class=\"comment\">/* 0 or JS_MODE_MATH for C functions */</span></span><br><span class=\"line\">    <span class=\"comment\">/* only used in generators. Current stack pointer value. NULL if</span></span><br><span class=\"line\"><span class=\"comment\">       the function is running. */</span></span><br><span class=\"line\">    JSValue *cur_sp;</span><br><span class=\"line\">&#125; JSStackFrame;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数数据结构：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525144252998.png\"></p>\n<p><strong>查找目标函数流程：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525124949165.png\"></p>\n<h2 id=\"4-在引擎执行字节码时判断有无命中断点。\"><a href=\"#4-在引擎执行字节码时判断有无命中断点。\" class=\"headerlink\" title=\"4. 在引擎执行字节码时判断有无命中断点。\"></a>4. 在引擎执行字节码时判断有无命中断点。</h2><p>命中断点有两个设计思路：</p>\n<p><strong>第一种：</strong></p>\n<p>直接修改字节码、插入debugger指令和nop\\需要额外注意在命中后和取消时将字节码恢复、否则会出现问题。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525161322186.png\" alt=\"image-20230525161322186\"></p>\n<p><strong>第二种：</strong></p>\n<p>分配一块和字节码相同长度的数组、在相同的便宜位置写入1、作为断点标志、方便命中检查。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525161507336.png\" alt=\"image-20230525161507336\"></p>\n<p>断点命中的核心思路实在引擎解释执行字节码的时候插入堆断点命中的检查、命中断电后停止执行（不在继续解释下一条指令）。</p>\n<p>这里选择重定义字节码的case定义、如果开启了调试功能、则每次解释执行字节码都会插入对js_debugger_check函数执行、他负责检查每一步执行是否命中断点。检查方法很简单、检查当前pc是否落在了断点的范围内（依赖设置断点）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_INTERPRETERS_QUICKJS_DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CASE(op)        case op: js_debugger_check(ctx, pc); stub_ ## op</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CASE(op)        case op: stub_ ## op</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>执行字节码：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525170447952.png\" alt=\"image-20230525170447952\"></p>\n<p>js_debugger_check 中暂停的主要逻辑是一个<code>while(ture)</code>循环，然后每次执行libuv_run_once()推一次主循环的句柄，用来判断服务端是否放开断点。</p>\n<h1 id=\"memory-功能\"><a href=\"#memory-功能\" class=\"headerlink\" title=\"memory 功能\"></a>memory 功能</h1><p>memory功能大概可以概述为三个部分：</p>\n<ol>\n<li>接受devtools  memory dump的请求之后，开始遍历引擎的堆内存链表（v8是使用图结构来表示的堆内存、quickjs是使用链表表示的）。</li>\n<li>将quickjs中的链表内存转化为图结构内存。（devtools snapshot需要图结构）</li>\n<li>将图结构转化为snapshot发送给devtools、devtools进行解析并显示。</li>\n</ol>\n<h2 id=\"1-理解引擎的堆内存结构\"><a href=\"#1-理解引擎的堆内存结构\" class=\"headerlink\" title=\"1. 理解引擎的堆内存结构\"></a>1. 理解引擎的堆内存结构</h2><p>quickjs的runtime中的gc_obj_list保存了引擎中的所有堆对象的JSGCObjectHeader.遍历gc_obj_list就可以得到所有的堆对象信息</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">JSGCObjectHeader</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ref_count; <span class=\"comment\">/* must come first, 32-bit */</span></span><br><span class=\"line\">    JSGCObjectTypeEnum gc_obj_type : <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> mark : <span class=\"number\">4</span>; <span class=\"comment\">/* used by the GC */</span></span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> dummy1; <span class=\"comment\">/* not used by the GC */</span></span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> dummy2; <span class=\"comment\">/* not used by the GC */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> link;</span><br><span class=\"line\">    <span class=\"type\">int64_t</span> id;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525171354456.png\" alt=\"image-20230525171354456\"></p>\n<h2 id=\"2-理解snapshot文件格式\"><a href=\"#2-理解snapshot文件格式\" class=\"headerlink\" title=\"2. 理解snapshot文件格式\"></a>2. 理解snapshot文件格式</h2><ul>\n<li>V8 HeapSnapshot文件整体采用JSON格式存储。</li>\n<li>存储时采用Meta + 内容的方式，Meta里描述了各个字段的含义，各个节点的数量等。</li>\n<li>内存dump信息按照点集和边集的形式存储。点集存储节点信息，边集存储对象之间的链接关系。</li>\n<li>字符串是单独存储的，节点中使用时采用下标引用的方式以节约内存。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525172031289.png\" alt=\"image-20230525172031289\"></p>\n<h2 id=\"3-堆对象处理：从链表到图\"><a href=\"#3-堆对象处理：从链表到图\" class=\"headerlink\" title=\"3.堆对象处理：从链表到图\"></a>3.堆对象处理：从链表到图</h2><p>Quickjs中GC对象是通过链表保存的，但HeapSnapshot中是按照图结构保存的，所以需要有一个从链表构建对象图的过程，我生成了一个代理结构，额外记录了对象间的链接关系。</p>\n<p>如果不这样做，就需要修改quickjs的GC list结构，这样改动会很大。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525172159734.png\" alt=\"image-20230525172159734\"></p>\n<h2 id=\"4-Proxy图的构建算法\"><a href=\"#4-Proxy图的构建算法\" class=\"headerlink\" title=\"4. Proxy图的构建算法\"></a>4. Proxy图的构建算法</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525172302551.png\" alt=\"image-20230525172302551\"></p>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"excerpt":"<p>vela系统quickjs对接devtools</p>","more":"<h2 id=\"vela快应用调试功能概览\"><a href=\"#vela快应用调试功能概览\" class=\"headerlink\" title=\"vela快应用调试功能概览\"></a>vela快应用调试功能概览</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525102147522.png\" alt=\"image-20230525102147522\"></p>\n<h1 id=\"vela-debug调试功能\"><a href=\"#vela-debug调试功能\" class=\"headerlink\" title=\"vela debug调试功能\"></a>vela debug调试功能</h1><p>debug调试功能图</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525111407415.png\" alt=\"image-20230525111407415\"></p>\n<p>vela debug调试功能实现大致分为4个步骤：</p>\n<ol>\n<li><strong>连接时将所有的源码发送给devtools。</strong></li>\n<li><strong>在devtools 的source功能中打断点、将请求发送给下层cdp.</strong></li>\n<li><strong>cdp计算断点具体在字节码中的位置、并记录。</strong></li>\n<li><strong>在引擎执行字节码时判断有无命中断点。</strong></li>\n</ol>\n<p>下面具体说明这四个步骤：</p>\n<h2 id=\"1-连接时将所有的源码发送给devtools\"><a href=\"#1-连接时将所有的源码发送给devtools\" class=\"headerlink\" title=\"1. 连接时将所有的源码发送给devtools\"></a>1. 连接时将所有的源码发送给devtools</h2><p>在调用loadApplication时会将app的路径保存在APP类中，也就是app的rpk的最外层路径。在监听到devtool连接时，会将rpk包中的所js文件发送给devtools，devtools会将这些js文件拼接成上图中的source文件。</p>\n<h2 id=\"2-在devtools-的source功能中打断点、将请求发送给下层cdp\"><a href=\"#2-在devtools-的source功能中打断点、将请求发送给下层cdp\" class=\"headerlink\" title=\"2. 在devtools 的source功能中打断点、将请求发送给下层cdp\"></a>2. 在devtools 的source功能中打断点、将请求发送给下层cdp</h2><p>当打开source文件上打断点、devtools会将断点的文件名、行号发送到下层cdp.</p>\n<h2 id=\"3-cdp计算断点具体在字节码中的位置、并记录。\"><a href=\"#3-cdp计算断点具体在字节码中的位置、并记录。\" class=\"headerlink\" title=\"3. cdp计算断点具体在字节码中的位置、并记录。\"></a>3. cdp计算断点具体在字节码中的位置、并记录。</h2><ul>\n<li><p>断点功能的输入实际上是文件名和断点行信息，第一步我们需要利用这个信息，找到模块，进而首先找到目标函数。</p>\n<ul>\n<li>quickjs在真实加载module的时候都会调用JS_EvalInternal。我们可以在这个函数里面监听并记录已经加载完的模块。</li>\n</ul>\n</li>\n<li><p>每个函数对象上都记录了自身的起始行，通过pc2line table可以计算得到结束行，进而和传入的行号进行范围匹配计算。</p>\n<ul>\n<li>函数和字节码的映射规则：<ul>\n<li>如果一行源码对应的字节码较短，就将前4位存源码的行数，后四位存字节码对应的行数</li>\n<li>如果一个源码对应的字节码较长，就先存入一个0值（解析pc2line_buf的时候遇到0值会自动将下一个当做128  int来解析），后面补一个128的int，这个int的高位用来存源码行数、低位存字节码的行数。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>计算结束行函数：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PC2LINE_BASE     (-1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PC2LINE_RANGE    5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PC2LINE_OP_FIRST 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PC2LINE_DIFF_PC_MAX ((255 - PC2LINE_OP_FIRST) / PC2LINE_RANGE)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">caculate_function_last_line</span><span class=\"params\">(JSFunctionBytecode* b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> op;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret, v;</span><br><span class=\"line\">    FunctionBytecodeDebugInfo* debug = <span class=\"built_in\">js_debugger_get_bytecode_debug_info</span>(b);</span><br><span class=\"line\">    <span class=\"type\">int</span> line_num = debug-&gt;line_num, new_line_num;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> *p = debug-&gt;pc2line_buf;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> *p_end = p + debug-&gt;pc2line_len;</span><br><span class=\"line\">    <span class=\"type\">int</span> succ = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// scan line by line</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p &lt; p_end) &#123;</span><br><span class=\"line\">        op = *p++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (op == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> val;</span><br><span class=\"line\">            ret = <span class=\"built_in\">get_leb128</span>(&amp;val, p, p_end);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                succ = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// pc += val;</span></span><br><span class=\"line\">            p += ret;</span><br><span class=\"line\">            ret = <span class=\"built_in\">get_sleb128</span>(&amp;v, p, p_end);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                succ = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            p += ret;</span><br><span class=\"line\">            new_line_num = line_num + v;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            op -= PC2LINE_OP_FIRST;</span><br><span class=\"line\">            new_line_num = line_num + (op % PC2LINE_RANGE) + PC2LINE_BASE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        line_num = new_line_num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> succ ? line_num : <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">STATIC <span class=\"type\">int</span> <span class=\"title\">get_leb128</span><span class=\"params\">(<span class=\"type\">uint32_t</span> *pval, <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *buf,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                      <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *buf_end)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *ptr = buf;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> v, a, i;</span><br><span class=\"line\">    v = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">unlikely</span>(ptr &gt;= buf_end))</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        a = *ptr++;</span><br><span class=\"line\">        v |= (a &amp; <span class=\"number\">0x7f</span>) &lt;&lt; (i * <span class=\"number\">7</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(a &amp; <span class=\"number\">0x80</span>)) &#123;</span><br><span class=\"line\">            *pval = v;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ptr - buf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *pval = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">STATIC <span class=\"type\">int</span> <span class=\"title\">get_sleb128</span><span class=\"params\">(<span class=\"type\">int32_t</span> *pval, <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *buf,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                       <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *buf_end)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> val;</span><br><span class=\"line\">    ret = <span class=\"built_in\">get_leb128</span>(&amp;val, buf, buf_end);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        *pval = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *pval = (val &gt;&gt; <span class=\"number\">1</span>) ^ -(val &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>源码表和字节码表对应规则：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">compute_pc2line_info</span><span class=\"params\">(JSFunctionDef *s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(s-&gt;js_mode &amp; JS_MODE_STRIP) &amp;&amp; s-&gt;line_number_slots) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> last_line_num = s-&gt;line_num;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> last_pc = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">js_dbuf_init</span>(s-&gt;ctx, &amp;s-&gt;pc2line);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; s-&gt;line_number_count; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> pc = s-&gt;line_number_slots[i].pc;</span><br><span class=\"line\">            <span class=\"type\">int</span> line_num = s-&gt;line_number_slots[i].line_num;</span><br><span class=\"line\">            <span class=\"type\">int</span> diff_pc, diff_line;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (line_num &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            diff_pc = pc - last_pc;</span><br><span class=\"line\">            diff_line = line_num - last_line_num;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (diff_line == <span class=\"number\">0</span> || diff_pc &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (diff_line &gt;= PC2LINE_BASE &amp;&amp;</span><br><span class=\"line\">                diff_line &lt; PC2LINE_BASE + PC2LINE_RANGE &amp;&amp;</span><br><span class=\"line\">                diff_pc &lt;= PC2LINE_DIFF_PC_MAX) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">dbuf_putc</span>(&amp;s-&gt;pc2line, (diff_line - PC2LINE_BASE) +</span><br><span class=\"line\">                          diff_pc * PC2LINE_RANGE + PC2LINE_OP_FIRST);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/* longer encoding */</span></span><br><span class=\"line\">                <span class=\"built_in\">dbuf_putc</span>(&amp;s-&gt;pc2line, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"built_in\">dbuf_put_leb128</span>(&amp;s-&gt;pc2line, diff_pc);</span><br><span class=\"line\">                <span class=\"built_in\">dbuf_put_sleb128</span>(&amp;s-&gt;pc2line, diff_line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            last_pc = pc;</span><br><span class=\"line\">            last_line_num = line_num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>需要注意匹配到的函数可能只是外层函数，具体的断点偏移计算时要考虑递归子函数。</p>\n<ul>\n<li>基于pc2line table计算断点在函数字节码中的偏移位置，计算时如果目出现计算出来的行号比目标行号大的情况 <code>end_line_num&gt;cur_line_num&gt;targe_num</code>，说明断点落在了子函数中，需要递归，直到最终找到或全部失败。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525125207891.png\" alt=\"image-20230525125207891\"></p>\n</li>\n<li><p>断点断到、将pause消息和目前上下文的变量信息和调用栈发送给devtools。</p>\n<ul>\n<li>runtime上面保留了当前栈的信息JSStackFrame，JSStackFrame上面保存了栈上的变量、参数、函数信息；并且JSStackFrame可以通过prev_frame向上查找栈信息。这样遍历下来就可以完整的得到栈上的变量和调用栈。</li>\n</ul>\n</li>\n</ul>\n<p><strong>JSRuntime和JSStackFrame的数据结构</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">JSRuntime</span> &#123;</span><br><span class=\"line\">    JSMallocFunctions mf;</span><br><span class=\"line\">    JSMallocState malloc_state;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *rt_info;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> atom_hash_size; <span class=\"comment\">/* power of two */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> atom_count;</span><br><span class=\"line\">    <span class=\"type\">int</span> atom_size;</span><br><span class=\"line\">    <span class=\"type\">int</span> atom_count_resize; <span class=\"comment\">/* resize hash table at this count */</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> *atom_hash;</span><br><span class=\"line\">    JSAtomStruct **atom_array;</span><br><span class=\"line\">    <span class=\"type\">int</span> atom_free_index; <span class=\"comment\">/* 0 = none */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> class_count;    <span class=\"comment\">/* size of class_array */</span></span><br><span class=\"line\">    JSClass *class_array;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> context_list; <span class=\"comment\">/* list of JSContext.link */</span></span><br><span class=\"line\">    <span class=\"comment\">/* list of JSGCObjectHeader.link. List of allocated GC objects (used</span></span><br><span class=\"line\"><span class=\"comment\">       by the garbage collector) */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> gc_obj_list;</span><br><span class=\"line\">    <span class=\"comment\">/* list of JSGCObjectHeader.link. Used during JS_FreeValueRT() */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> gc_zero_ref_count_list;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> tmp_obj_list; <span class=\"comment\">/* used during GC */</span></span><br><span class=\"line\">    JSGCPhaseEnum gc_phase : <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> malloc_gc_threshold;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> DUMP_LEAKS</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> string_list; <span class=\"comment\">/* list of JSString.link */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"comment\">/* stack limitation */</span></span><br><span class=\"line\">    <span class=\"type\">uintptr_t</span> stack_size; <span class=\"comment\">/* in bytes, 0 if no limit */</span></span><br><span class=\"line\">    <span class=\"type\">uintptr_t</span> stack_top;</span><br><span class=\"line\">    <span class=\"type\">uintptr_t</span> stack_limit; <span class=\"comment\">/* lower stack limit */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    JSValue current_exception;</span><br><span class=\"line\">    <span class=\"comment\">/* true if inside an out of memory error, to avoid recursing */</span></span><br><span class=\"line\">    BOOL in_out_of_memory : <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">JSStackFrame</span> *current_stack_frame;  <span class=\"comment\">// current stack info</span></span><br><span class=\"line\"></span><br><span class=\"line\">    JSInterruptHandler *interrupt_handler;</span><br><span class=\"line\">    <span class=\"type\">void</span> *interrupt_opaque;</span><br><span class=\"line\"></span><br><span class=\"line\">    JSHostPromiseRejectionTracker *host_promise_rejection_tracker;</span><br><span class=\"line\">    <span class=\"type\">void</span> *host_promise_rejection_tracker_opaque;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> job_list; <span class=\"comment\">/* list of JSJobEntry.link */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    JSModuleNormalizeFunc *module_normalize_func;</span><br><span class=\"line\">    JSModuleLoaderFunc *module_loader_func;</span><br><span class=\"line\">    <span class=\"type\">void</span> *module_loader_opaque;</span><br><span class=\"line\"></span><br><span class=\"line\">    BOOL can_block : <span class=\"number\">8</span>; <span class=\"comment\">/* TRUE if Atomics.wait can block */</span></span><br><span class=\"line\">    <span class=\"comment\">/* used to allocate, free and clone SharedArrayBuffers */</span></span><br><span class=\"line\">    JSSharedArrayBufferFunctions sab_funcs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Shape hash table */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> shape_hash_bits;</span><br><span class=\"line\">    <span class=\"type\">int</span> shape_hash_size;</span><br><span class=\"line\">    <span class=\"type\">int</span> shape_hash_count; <span class=\"comment\">/* number of hashed shapes */</span></span><br><span class=\"line\">    JSShape **shape_hash;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_BIGNUM</span></span><br><span class=\"line\">    <span class=\"type\">bf_context_t</span> bf_ctx;</span><br><span class=\"line\">    JSNumericOperations bigint_ops;</span><br><span class=\"line\">    JSNumericOperations bigfloat_ops;</span><br><span class=\"line\">    JSNumericOperations bigdecimal_ops;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> operator_count;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"type\">void</span> *user_opaque;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_INTERPRETERS_QUICKJS_DEBUG</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">JSDebuggerInfo</span> debugger_info;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">DumpMemoryInfo</span> dump_memory_info;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    JSOutOfMemoryTracker* oom_tracker;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_MEMORY_LEAK_TRACK</span></span><br><span class=\"line\">    <span class=\"type\">int</span> isStartMemoryDump;</span><br><span class=\"line\">    vector* newObjVector;</span><br><span class=\"line\">    JSContext* currentCtx;</span><br><span class=\"line\">    <span class=\"type\">char</span>* pageStatus;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">JSStackFrame</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">JSStackFrame</span> *prev_frame; <span class=\"comment\">/* NULL if first stack frame */</span></span><br><span class=\"line\">    JSValue cur_func; <span class=\"comment\">/* current function, JS_UNDEFINED if the frame is detached */</span></span><br><span class=\"line\">    JSValue *arg_buf; <span class=\"comment\">/* arguments */</span></span><br><span class=\"line\">    JSValue *var_buf; <span class=\"comment\">/* variables */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> var_ref_list; <span class=\"comment\">/* list of JSVarRef.link */</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *cur_pc; <span class=\"comment\">/* only used in bytecode functions : PC of the</span></span><br><span class=\"line\"><span class=\"comment\">                        instruction after the call */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> arg_count;</span><br><span class=\"line\">    <span class=\"type\">int</span> js_mode; <span class=\"comment\">/* 0 or JS_MODE_MATH for C functions */</span></span><br><span class=\"line\">    <span class=\"comment\">/* only used in generators. Current stack pointer value. NULL if</span></span><br><span class=\"line\"><span class=\"comment\">       the function is running. */</span></span><br><span class=\"line\">    JSValue *cur_sp;</span><br><span class=\"line\">&#125; JSStackFrame;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数数据结构：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525144252998.png\"></p>\n<p><strong>查找目标函数流程：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525124949165.png\"></p>\n<h2 id=\"4-在引擎执行字节码时判断有无命中断点。\"><a href=\"#4-在引擎执行字节码时判断有无命中断点。\" class=\"headerlink\" title=\"4. 在引擎执行字节码时判断有无命中断点。\"></a>4. 在引擎执行字节码时判断有无命中断点。</h2><p>命中断点有两个设计思路：</p>\n<p><strong>第一种：</strong></p>\n<p>直接修改字节码、插入debugger指令和nop\\需要额外注意在命中后和取消时将字节码恢复、否则会出现问题。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525161322186.png\" alt=\"image-20230525161322186\"></p>\n<p><strong>第二种：</strong></p>\n<p>分配一块和字节码相同长度的数组、在相同的便宜位置写入1、作为断点标志、方便命中检查。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525161507336.png\" alt=\"image-20230525161507336\"></p>\n<p>断点命中的核心思路实在引擎解释执行字节码的时候插入堆断点命中的检查、命中断电后停止执行（不在继续解释下一条指令）。</p>\n<p>这里选择重定义字节码的case定义、如果开启了调试功能、则每次解释执行字节码都会插入对js_debugger_check函数执行、他负责检查每一步执行是否命中断点。检查方法很简单、检查当前pc是否落在了断点的范围内（依赖设置断点）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_INTERPRETERS_QUICKJS_DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CASE(op)        case op: js_debugger_check(ctx, pc); stub_ ## op</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CASE(op)        case op: stub_ ## op</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>执行字节码：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525170447952.png\" alt=\"image-20230525170447952\"></p>\n<p>js_debugger_check 中暂停的主要逻辑是一个<code>while(ture)</code>循环，然后每次执行libuv_run_once()推一次主循环的句柄，用来判断服务端是否放开断点。</p>\n<h1 id=\"memory-功能\"><a href=\"#memory-功能\" class=\"headerlink\" title=\"memory 功能\"></a>memory 功能</h1><p>memory功能大概可以概述为三个部分：</p>\n<ol>\n<li>接受devtools  memory dump的请求之后，开始遍历引擎的堆内存链表（v8是使用图结构来表示的堆内存、quickjs是使用链表表示的）。</li>\n<li>将quickjs中的链表内存转化为图结构内存。（devtools snapshot需要图结构）</li>\n<li>将图结构转化为snapshot发送给devtools、devtools进行解析并显示。</li>\n</ol>\n<h2 id=\"1-理解引擎的堆内存结构\"><a href=\"#1-理解引擎的堆内存结构\" class=\"headerlink\" title=\"1. 理解引擎的堆内存结构\"></a>1. 理解引擎的堆内存结构</h2><p>quickjs的runtime中的gc_obj_list保存了引擎中的所有堆对象的JSGCObjectHeader.遍历gc_obj_list就可以得到所有的堆对象信息</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">JSGCObjectHeader</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ref_count; <span class=\"comment\">/* must come first, 32-bit */</span></span><br><span class=\"line\">    JSGCObjectTypeEnum gc_obj_type : <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> mark : <span class=\"number\">4</span>; <span class=\"comment\">/* used by the GC */</span></span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> dummy1; <span class=\"comment\">/* not used by the GC */</span></span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> dummy2; <span class=\"comment\">/* not used by the GC */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">list_head</span> link;</span><br><span class=\"line\">    <span class=\"type\">int64_t</span> id;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525171354456.png\" alt=\"image-20230525171354456\"></p>\n<h2 id=\"2-理解snapshot文件格式\"><a href=\"#2-理解snapshot文件格式\" class=\"headerlink\" title=\"2. 理解snapshot文件格式\"></a>2. 理解snapshot文件格式</h2><ul>\n<li>V8 HeapSnapshot文件整体采用JSON格式存储。</li>\n<li>存储时采用Meta + 内容的方式，Meta里描述了各个字段的含义，各个节点的数量等。</li>\n<li>内存dump信息按照点集和边集的形式存储。点集存储节点信息，边集存储对象之间的链接关系。</li>\n<li>字符串是单独存储的，节点中使用时采用下标引用的方式以节约内存。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525172031289.png\" alt=\"image-20230525172031289\"></p>\n<h2 id=\"3-堆对象处理：从链表到图\"><a href=\"#3-堆对象处理：从链表到图\" class=\"headerlink\" title=\"3.堆对象处理：从链表到图\"></a>3.堆对象处理：从链表到图</h2><p>Quickjs中GC对象是通过链表保存的，但HeapSnapshot中是按照图结构保存的，所以需要有一个从链表构建对象图的过程，我生成了一个代理结构，额外记录了对象间的链接关系。</p>\n<p>如果不这样做，就需要修改quickjs的GC list结构，这样改动会很大。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525172159734.png\" alt=\"image-20230525172159734\"></p>\n<h2 id=\"4-Proxy图的构建算法\"><a href=\"#4-Proxy图的构建算法\" class=\"headerlink\" title=\"4. Proxy图的构建算法\"></a>4. Proxy图的构建算法</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/image-20230525172302551.png\" alt=\"image-20230525172302551\"></p>"},{"title":"vela运行时","keywords":"vela运行时","description":"vela运行时","top_img":"设置false不显示顶部图片","sticky":"数值越大越靠前","cover":"https://raw.githubusercontent.com/why862555625/images/main/images/16.png","comments":1,"abbrlink":"d9795f88","date":"2023-05-25T11:04:29.000Z","updated":"2023-05-25T11:04:29.000Z","_content":"\nvela运行时\n\n\n<!-- more -->\n\n1. 响应式数据实现和原理\n2. vdom和组件\n3. 计算属性\n4. watch实现\n\n","source":"_posts/c/vela运行时.md","raw":"---\ntitle: vela运行时\ntags:\n  - c\n  - js\n  - 运行时\ncategories: JS\nkeywords: 'vela运行时'\ndescription: vela运行时\ntop_img: 设置false不显示顶部图片\nsticky: 数值越大越靠前\ncover: \"https://raw.githubusercontent.com/why862555625/images/main/images/16.png\"\ncomments: false评论\nabbrlink: d9795f88\ndate: 2023-05-25 19:04:29\nupdated: 2023-05-25 19:04:29\n---\n\nvela运行时\n\n\n<!-- more -->\n\n1. 响应式数据实现和原理\n2. vdom和组件\n3. 计算属性\n4. watch实现\n\n","slug":"c/vela运行时","published":1,"layout":"post","photos":[],"link":"","_id":"clijtrgc50009yswh7ckr5ve9","content":"<p>vela运行时</p>\n<span id=\"more\"></span>\n\n<ol>\n<li>响应式数据实现和原理</li>\n<li>vdom和组件</li>\n<li>计算属性</li>\n<li>watch实现</li>\n</ol>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"excerpt":"<p>vela运行时</p>","more":"<ol>\n<li>响应式数据实现和原理</li>\n<li>vdom和组件</li>\n<li>计算属性</li>\n<li>watch实现</li>\n</ol>"},{"title":"前端安全问题","keywords":"JS,前端","description":"前端安全问题","top_img":"设置false不显示顶部图片","sticky":"数值越大越靠前","cover":"首页封面","comments":1,"abbrlink":"ab232981","date":"2023-05-26T07:55:26.000Z","updated":"2023-05-26T07:55:26.000Z","_content":"\n\n\n摘要\n\n<!-- more -->\n","source":"_posts/js/前端安全问题.md","raw":"---\ntitle: 前端安全问题\ntags:\n  - JS\n  - 前端\ncategories: JS\nkeywords: 'JS,前端'\ndescription: 前端安全问题\ntop_img: 设置false不显示顶部图片\nsticky: 数值越大越靠前\ncover: 首页封面\ncomments: false评论\nabbrlink: ab232981\ndate: 2023-05-26 15:55:26\nupdated: 2023-05-26 15:55:26\n---\n\n\n\n摘要\n\n<!-- more -->\n","slug":"js/前端安全问题","published":1,"layout":"post","photos":[],"link":"","_id":"clijtrgc6000byswh7qob5yac","content":"<p>摘要</p>\n<span id=\"more\"></span>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"excerpt":"<p>摘要</p>","more":""},{"title":"react复习","keywords":"react复习","description":"react复习","top_img":"设置false不显示顶部图片","sticky":"数值越大越靠前","cover":"首页封面","comments":1,"abbrlink":"667b4089","date":"2023-05-26T07:57:36.000Z","updated":"2023-05-26T07:57:36.000Z","_content":"\n\n\n摘要\n\n<!-- more -->\n","source":"_posts/js/react复习.md","raw":"---\ntitle: react复习\ntags:\n  - JS\n  - 前端\ncategories: 前端\nkeywords: react复习\ndescription: react复习\ntop_img: 设置false不显示顶部图片\nsticky: 数值越大越靠前\ncover: 首页封面\ncomments: false评论\nabbrlink: 667b4089\ndate: 2023-05-26 15:57:36\nupdated: 2023-05-26 15:57:36\n---\n\n\n\n摘要\n\n<!-- more -->\n","slug":"js/react复习","published":1,"layout":"post","photos":[],"link":"","_id":"clijtrgc7000fyswhbptc05uu","content":"<p>摘要</p>\n<span id=\"more\"></span>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"excerpt":"<p>摘要</p>","more":""},{"title":"HTML & CSS复习","keywords":"前端,面试,HTML","description":"HTMLJS复习记录","top_img":"设置false不显示顶部图片","sticky":"数值越大越靠前","cover":"首页封面","comments":1,"abbrlink":"d9795d88","date":"2023-05-23T07:21:13.000Z","updated":"2023-05-23T07:21:13.000Z","_content":"\nJS复习记录\n\n<!-- more -->\n\n\n\n# HTML\n\n## 1. 语义化\n\n1. 语义化，指对文本内容的结构化（内容语义化），选择合乎语义的标签（代码语义化）。\n\n2. 语义化标签：`header`、`nav`、`main`、`article`、`section`、`aside`、`footer`等。\n\n3. 优点：\n\n   - 代码结构清晰，易于阅读，有利于维护\n   - 方便其他设备解析（如：屏幕阅读器）\n   - 有利于搜索引擎优化（SEO），搜索引擎爬虫会根据不同的标签来赋予不同的权重\n\n   \n\n## 2. script 标签中属性 async 和 defer 的区别？\n\n- `script` 会阻碍 HTML 解析，只有下载好并执行完脚本才会继续解析 HTML\n- `async script`：解析 HTML 的过程中会进行脚本的异步下载，下载成功后立马执行，因此有可能会阻断 HTML 的解析。多个脚本的执行顺序无法保证。\n- `defer script`：也是异步下载脚步，加载完成后，如果此时 HTML 还没有解析完，浏览器不会暂停解析去执行 JS 代码，而是等待 HTML 解析完毕再执行 JS 代码，如果存在多个 `defer script `标签，浏览器（IE9及以下除外）会保证它们按照在 HTML 中出现的顺序执行，不会破坏 JS 脚本之间的依赖关系。\n\n\n\n## 3. DOCTYPE 的作用是什么？\n\n`<!DOCTYE>` 声明一般位于文档的第一行，它的作用主要是告诉浏览器以什么样的模式来解析文档。一般指定了之后会以“标准模式”进行文档解析，否则就以“兼容模式”进行解析。\n\n- 在`标准模式`下，浏览器的解析规则都是按照最新的标准进行解析的。\n- 而在`兼容模式`下，浏览器会以向后兼容的方式来模拟老式浏览器的行为，以保证一些老的网站能正常访问。\n\n## 4. SGML、HTML、XML 和 XHTML的区别\n\n- `SGML` 是标准通用标记语言，是一种定义电子文档结构和描述其内容的国际标准语言，是所有电子文档标记语言的起源。\n- `HTML` 是超文本标记语言，主要是用于规定怎样显示网页。\n- `XML` 是可扩展标记语言，是未来网页语言的发展方向，XML 和 HTML 的最大区别就在于 XML 的标签是可以自己创建的，数量无限多，而 HTML 的标签都是固定的而且数量有限。\n- `XHTML` 也是现在基本上所有网页都在用的标记语言，他其实和 HTML 没什么本质的区别，标签都一样，用法也都一样，就是比 HTML 更严格，比如标签必须都用小写，标签都必须有闭合标签等。\n\n\n\n## 5. HTML5 有哪些新特性、移除了哪些元素？\n\nHTML5 现在已经不是 SGML 的子集，主要是关于图像、位置、存储、多任务等功能的增加。\n\n新增的：\n\n- 绘图 `canvas`\n- 用于媒介回放的 `video` 和 `audio` 元素\n- 本地离线存储 `localStorage` 、`sessionStorage`\n- 语义化更好的内容元素，如：`header`、`article`、`nav`、`section`、`footer`等\n- 表单控件 `calendar`、`date`、`time`、`email`、`url`、`search` 等\n- 新的技术 `webworker`、`websocket`\n- 新的文档属性 `document.visibilityState`\n\n移除的：\n\n- 纯表现的元素：`basefont`、`big`、`center`、`s`、`tt`、`u`\n- 对可用性产生负面影响的元素：`frame`、`frameset`、`noframes`\n\n\n\n\n\n## 6. 对浏览器内核的理解\n\n主要分为两部分：渲染引擎和JS引擎。\n\n- `渲染引擎`：其职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 HTML、 XML 文档及图片，它也可以借助一些浏览器扩展插件显示其他类型数据，如：使用PDF阅读器插件可以显示 PDF 格式。\n- `JS引擎`：解析和执行 JavaScript 来实现网页的动态效果。\n\n最开始渲染引擎和JS引擎并没有区分的很明显，后来JS引擎越来越独立，内核就倾向于只指渲染引擎了\n\n\n\n## 7. 什么是文档的预解析？\n\n当执行 JavaScript 脚本时，另一个线程解析剩下的文档，并加载后面需要通过网络加载的资源。这种方式可以使资源并行加载，从而使整体速度更快。\n\n需要注意的是，预解析并不改变DOM树，它将这个工作交给主解析过程，自己只解析外部资源的引用，比如：外部脚本、样式及图片。\n\n\n\n## 8. 浏览器的渲染原理\n\n简记： 生成DOM树 --> 生成CSS规则树 --> 构建渲染树 --> 布局 --> 绘制\n\n1. 首先解析收到的文档，根据文档定义构建一颗 `DOM 树`，DOM 树是由 DOM 元素及属性节点组成的。\n2. 然后对 CSS 进行解析，生成一颗 `CSS 规则树`。\n3. 根据 DOM 树和 CSS 规则树构建`渲染树`。渲染树的节点被称为渲染对象，它是一个包含有颜色等属性的矩形。渲染对象和 DOM 元素相对应，但这种关系不是一对一的，不可见的 DOM 元素不会插入渲染树。还有一些 DOM 元素对应几个可见对象，它们一般是一些具有复杂结构的元素，无法用一个矩形来描述。\n4. 当渲染对象被创建并添加到树中，它们没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行`布局`（也可以叫做回流）。这一阶段浏览器要做的是计算出各个节点在页面中确切位置和大小。通常这一行为也被称为自动重排。\n5. 布局阶段结束后是`绘制`阶段，遍历渲染树并调用渲染对象的 paint 方法将它们的内容显示到屏幕上。值得注意的是，这个过程是逐步完成的，为了更好的用户体验，渲染引擎会尽早的将内容呈现到屏幕上，并不会等到所有 HMTL 内容都解析完之后再去构建和布局渲染树，它是解析完一部分内容就显示一部分内容，同时，可能还通过网络下载其余内容。\n\n\n\n## 9. 什么是回流和重绘？\n\n1.概念：\n\n- `回流`：当 DOM 的变化影响了元素的几何信息，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做回流（也可以叫做重排）。表现为重新生成布局，重新排列元素。\n- `重绘`：当一个元素的外观发生改变，重新把元素外观绘制出来的过程，叫做重绘。表现为某些元素的外观被改变。\n\n2.常见引起回流和重绘的属性和方法：\n\n任何会改变元素几何信息（元素的位置和尺寸大小）的操作都会触发回流。\n\n- 添加或删除可见的 DOM 元素\n- 元素尺寸改变--边距、填充、宽度、高度\n- 浏览器尺寸改变-- resize 事件发生时\n- 计算 offsetWidth 和 offsetHeight 属性\n- 设置 style 属性的值\n- 修改网页默认字体\n\n**回流必定会发生重绘，重绘不一定会引发回流。**\n\n**回流所需的成本比重绘高得多**\n\n建议阅读文章：[你真的了解回流和重绘吗](https://juejin.cn/post/6844903779700047885)\n\n\n\n## 10. 如何减少回流？\n\n- 使用 transform 代替 top\n- 不要把节点的属性值放在一个循环里，当成循环里的变量\n- 不要使用 table 布局，可能很小的一个改动会造成整个 table 的重新布局\n- 把 DOM 离线后修改。如：使用 documentFragment 对象在内存里操作 DOM\n- 不要一条一条的修改样式，可以预先定义好 class，然后修改 DOM 的 className\n- 使用 absolute 或 fixed 使元素脱离文档流\n\n\n\n## 11. sessionStorage，localStorage 和 cookie 的区别\n\n1. 共同点：都是保存在浏览器端，且同源的\n2. 区别:\n\n- cookie 始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器和服务器之间来回传递；而 sessionStorage 和 localStorage 不会自动把数据发送到服务器，仅在本地保存。cookie 还有路径（path）的概念，可以限制 cookie 只属于某个路径下。\n- 存储大小限制不同。cookie 不能超过 4K，因为每次 http 请求都会携带 cookie，所以 cookie 只适合保存很小的数据，如：会话标识。sessionStorage 和 localStorage 虽然也有存储大小限制，但比 cookie 大得多，可以达到 5M 或更大。\n- 数据有效期不同。sessionStorage 仅在当前浏览器窗口关闭之前有效；localStorage 始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie 只在设置的 cookie 过期时间之前有效。\n- 作用域不同。sessionStorage 不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 和 cookie 在所有同源窗口中都是共享的。\n\n\n\n## 12. iframe 有哪些优缺点？\n\n优点：\n\n1. iframe 能原封不动的把嵌入的网页展现出来。\n2. 如果有多个网页引用 iframe，只需修改 iframe 的内容，就可以实现调用每一个页面的更改，方便快捷。\n\n缺点：\n\n1. iframe 会阻塞主页面的 onload 事件。\n2. iframe 和主页面共享链接池，而浏览器对相同域的链接有限制，所以会影响页面的并行加载。\n3. 不利于 SEO，代码复杂，无法一下被搜索引擎索引到。\n4. iframe 框架页面会增加服务器的 http 请求，对于大型网站不可取。\n5. 很多移动设备无法完全显示框架，设备兼容性差。\n\n注意：通过动态给 iframe 添加 src 属性值，可解决前两个问题。\n\n\n\n## 13. 什么是 canvas，基本用法是什么？\n\ncanvas 元素是 HTML5 的一部分，允许脚步语言动态渲染位图像。canvas 由一个可控制区域 HTML 代码中的属性定义决定高度和宽度。JavaScript 代码可以访问该区域，通过一套完整的绘图功能类似于其他通用二维的 API，从而生成动态的图形。\n\n1. 创建 canvas 标签\n\n```arduino\narduino\n复制代码<canvas id=\"myCanvas\" width=\"150\" height=\"150\">该浏览器不支持canvas</canvas>\n```\n\n1. 渲染上下文\n\n```ini\nini复制代码var canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\n```\n\n代码第一行通过使用 `document.getElementById()` 方法获取 `<canvas>` 元素对应的 DOM 对象，然后可以通过使用它的 `getContext()` 方法来绘制上下文。 创建 canvas 标签时可以在标签内写上不支持的提示信息；也可以通过 `getContext()` 方法判读是否支持编程。\n\n```ini\nini复制代码var canvas = document.getElementById('myCanvas');\nif (canvas.getContext) {\n  var ctx = canvas.getContext('2d');\n  // other code\n} else {\n  // 不支持 canvas 的其他代码\n}\n```\n\n用途：\n\ncanvas 可用于游戏和图表（echarts.js、heightchart.js 都是基于 canvas 来绘图）制作。\n\n# CSS\n\n## 1. css3 有哪些新特性？\n\n- rgba 和 透明度\n- background-image、background-origin、background-size、background-repeat\n- word-wrap: break-word（对长的不可分割的单词换行）\n- 文字阴影 text-shadow\n- font-face属性，定义自己的字体\n- border-radius\n- 边框图片 border-image\n- 盒阴影 box-shadow\n- 媒体查询：定义多套 css，当浏览器尺寸发生变化时采用不同的属性\n\n## 2. style 标签写在 body 后与 body 前有什么区别？\n\n1. 写在 body 标签前有利于浏览器逐步渲染： resources downloading --> cssDOM + DOM --> Render Tree --> layout --> paint\n2. 写在 body 标签后： 由于浏览器以逐行方式对 HTML 文档进行解析，当解析到写在尾部的样式表（外联或写在 style 标签）会导致浏览器停止之前的渲染，等待加载且解析样式完成后重新渲染；在 windows 的 IE 下可能出现样式失效导致的页面闪烁问题。\n\n## 3. CSS选择器及优先级\n\n1. 选择器\n   - id选择器(#myid)\n   - 类选择器(.myclass)\n   - 属性选择器(a[rel=\"external\"])\n   - 伪类选择器(a:hover, li:nth-child)\n   - 标签选择器(div, h1, p)\n   - 伪元素选择器(p::first-line)\n   - 相邻选择器（h1 + p）\n   - 子选择器(ul > li)\n   - 后代选择器(li a)\n   - 通配符选择器(*)\n2. 优先级\n   - `!important`\n   - 内联样式（1000）\n   - ID选择器（0100）\n   - 类选择器 / 属性选择器 / 伪类选择器（0010）\n   - 标签选择器 / 伪元素选择器（0001）\n   - 关系选择器 / 通配符选择器（0000）\n\n带 !important 标记的样式属性优先级最高；样式表的来源相同时：`!important > 行内样式> ID选择器 > 类选择器 > 标签 > 通配符 > 继承 > 浏览器默认属性`\n\n## 4. rgba() 和 opacity 设置透明度的区别是什么？\n\nrgba() 和 opacity 都能实现透明效果，但最大的不同是 opacity 作用于元素，以及元素内的所有内容的透明度；而 rgba() 只作用于元素的颜色或其背景色，设置 rgba() 透明的元素的子元素不会继承透明效果。\n\n## 5. 浏览器是如何解析 css 选择器的？\n\n`从右向左解析的。`若从左向右匹配，发现不符合规则，需要回溯，会损失很多性能。若从右向左匹配，先找到所有的最后节点，对于每一个节点，向上寻找其父节点直到查找至根元素或满足条件的匹配规则，则结束这个分支的遍历。\n\n在 css 解析完毕后，需将解析结果 css 规则树和 DOM Tree 一起进行分析建立一颗 Render Tree，最终用来进行绘图。\n\n## 6. display: none 和 visibility: hidden 两者的区别\n\n1. display: none 隐藏后不占用文档流；而 visibility: hidden 会占用文档流。\n2. visibility 具有继承性，给父元素设置 \"visibility: hidden\"，子元素也会继承该属性，但如果重新给子元素设置 \"visibility: visible\"，则子元素又会显示出来。\n3. visibility: hidden 不会影响计数器的计数，虽然隐藏了，但计数器依然运行着。\n4. 在 css3 中 transition 支持 visibility 属性，但不支持 display。因为 transition 可以延迟执行，因此配合 visibility 使用纯 css 延时显示效果可以提高用户体验。\n5. display: none 会引起回流（重排）和重绘；visibility: hidden 会引起重绘。\n\n\n\n## 7. 简述 transform，transition，animation 的作用\n\n1. `transform`：描述了元素的静态样式，本身不会呈现动画效果，可以对元素进行旋转 rotate、扭曲 skew、缩放 scale 和移动 translate 以及矩阵变形 matrix。`transition` 和 `animation` 两者都能实现动画效果。`transform` 常配合`transition` 和 `animation` 使用。\n2. `transition`：样式过渡，从一种效果逐渐改变为另一种效果，它是一个合写属性。transition: transition-property  transition-duration  transition-timing-function  transition-delay 从左到右，依次是：过渡效果的css属性名称、过渡效果花费时间、速度曲线、过渡开始的延迟时间  `transition` 通常和 hover 等事件配合使用，需要由事件来触发过渡。\n3. `animation`：动画，有 `@keyframes` 来描述每一帧的样式。\n\n区别：\n\n- `transform` 仅描述元素的静态样式，常配合`transition` 和 `animation` 使用。\n- `transition` 通常和 hover 等事件配合使用；`animation` 是自发的，立即播放。\n- `animation` 可以设置循环次数。\n- `animation` 可以设置每一帧的样式和时间，`transition` 只能设置头尾。\n- `transition` 可以与 js 配合使用， js 设定要变化的样式，`transition` 负责动画效果。\n\n\n\n## 8. line-height 如何继承？\n\n- 父元素的 `line-height` 是具体数值，则子元素 `line-height` 继承该值。\n- 父元素的 `line-height` 是比例值，如'2'，则子元素 `line-height` 继承该比例。\n- 父元素的 `line-height` 是百分比，则子元素 `line-height` 继承的是父元素的 font-size * 百分比 计算出来的值。\n\n## 9. 如何让 chrome 支持 10px 的文字？\n\n1. font-size: 12px; -webkit-transform: scale(0.84);\n2. font-size: 20px; -webkit-transform: scale(0.5);\n\n## 10. position 属性的值有哪些？\n\n1. `static`：默认定位。元素出现在正常的文档流中（忽略top，bottom，left，right 或 z-index声明）\n2. `relative`：相对定位。如果对一个元素进行相对定位，将出现在它所在的位置上。然后，可以通过设置垂直或水平位置，使其“相对于”它的起点进行移动。使用相对定位时，无论是否移动，元素仍然占据原来的空间；移动元素会导致其覆盖其他元素。\n3. `absolute`：绝对定位。元素的位置相对于最近的已定位的父元素，如果元素没有已定位的父元素，则相对于根元素（即 html 元素）定位。绝对定位的元素会脱离文档流，不占据空间，会与其他元素重叠。\n4. `fixed`：固定定位。元素的位置相对于浏览器窗口是固定位置，即使窗口滚动它也不会移动。固定定位的元素会脱离文档流，不占据空间，会与其他元素重叠。\n5. `sticky`：粘性定位。粘性定位可以被认为是相对定位和固定定位的混合，元素在跨越特定阈值前为相对定位，之后为固定定位。top，right，buttom，left，必须指定这四个阈值中的一个，才可以使粘性定位生效，否则行为与其相对定位相同。\n6. `inherit`：规定应该从父元素继承 position 属性的值。\n\n## 11. css 盒模型？\n\n- `标准盒模型`，width 指 content 部分的宽度，总宽度 = width + border(左右) + padding（左右）+ margin（左右）；高度同理。\n- `怪异盒模型（IE盒模型）`，width 指 content + border（左右） + padding（左右）三部分的宽度，因此，总宽度 = width + margin（左右）；高度同理。\n\n## 12. box-sizing 属性\n\n1. `content-box`，对应标准盒模型。\n2. `border-box`，IE盒模型。\n3. `inherit`，继承父元素的 box-sizing 值。\n\n## 13. BFC（块级格式上下文）\n\n1. 概念： BFC（Block Formatting Context），块级格式上下文。BFC 是 css 布局的一个概念，是一个独立的渲染区域，规定了内部 box 如何布局，且这个区域内的子元素不会影响到外面的元素。\n2. 布局规则：\n\n- 内部的 box 会在垂直方向一个接一个的放置\n- box 垂直方向的距离由 margin 决定，同一个 BFC 相邻的 box 的 margin 会发生重叠\n- 每个 box 的 margin 左边，与包含块的左 border 相接触（对于从左往右的格式化，否则相反）\n- BFC 的区域不会与 float box 重叠\n- BFC 是一个独立容器，容器内的子元素不会影响到外面的元素\n- 计算 BFC 高度时，浮动元素也参与计算高度\n\n1. 如何创建 BFC ？\n\n- 根元素，即 html 元素\n- float 值不为 none\n- position 值为 absolute 或 fixed\n- display 的值为 inline-block、tabl-cell、table-caption\n- overflow 的值不为 visible\n\n1. BFC 的使用场景\n\n- 去除边距重叠问题\n- 清除浮动（让父元素的高度包含子浮动元素）\n- 阻止元素被浮动元素覆盖\n\n\n\n## 14. 让一个元素水平/垂直居中\n\n1. 水平居中\n\n- 行内元素：`text-align: center;`\n- 对于确定宽度的块级元素\n  - width 和 margin 实现： `mragin: 0 auto;`\n  - 绝对定位和 margin-left 实现： `margin-left: (父width - 子 width)/2；`(前提是父元素相对定位)\n- 对于宽度未知的块级元素\n  - table 标签配合 margin 左右 auto 实现\n  - inline-block 实现：`display: inline-block; text-align: center;`\n  - 绝对定位和 transform 实现， translateX 可以移动本身元素的50%\n  - flex 布局 `justify-content: center`\n\n1. 垂直居中\n\n- 纯文字类，设置 line-height 等于 height\n- 子绝父相，子元素通过 margin 实现自适应居中\n- 子绝父相，通过位移 transform 实现\n- flex 布局，`align-items: center;`\n- table 布局，父级通过转换为表格形式，子级设置 vertical-align 实现\n\n## 15. flex 布局\n\nflex 布局，是一种弹性盒布局模型，给子元素提供了空间分布和对齐能力，由`container`（容器）及`item`（项目）组成。该布局模型提供了一种更加高效的方式来对容器中的项目进行布局、对齐和分配空间。适用于在不同尺寸的屏幕中创建可自动扩展和收缩布局，通常可用于`水平/垂直居中`，`两栏`、`三栏布局`等的场景里。\n\n其中`flex`属性是`flex-grow`，`flex-shrink`和`flex-basis`的简写，默认值为`0 1 auto`。**该属性有两个快捷值：`auto (1 1 auto)` 和 `none (0 0 auto)`。**\n\n- `flex-grow`：定义项目的放大比例，默认值为 0，即如果存在剩余空间，也不放大。如果所有项目的`flex-grow`属性都为 1，则它们将等分剩余空间（如果有的话）。如果一个项目的`flex-grow`属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。\n- `flex-shrink`：项目的缩小比例，默认为 1，即如果空间不足，项目将缩小。如果所有项目的`flex-shrink`属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的`flex-shrink`属性为 0，其他项目都为 1，则空间不足时，前者不缩小。\n- `flex-basis`：定义了在分配多余空间之前，项目占据的主轴空间。浏览器会根据该属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小。当设置为 0 的是，会根据内容撑开。也可以设为跟`width`或`height`属性一样的值（比如 350px），则项目将占据固定空间。\n\n`flex`常用的属性值：\n\n- flex: 1 --> flex: 1 1 0%\n- flex: 2 --> flex: 2 1 0%\n- flex: auto --> flex: 1 1 auto\n- flex: none --> flex: 0 0 auto【常用于固定尺寸不伸缩】\n\n\n\n## 16. 清除浮动\n\n1. 直接把 \n\n   ```\n   <div style=\"clear: both;\"></div>\n   ```\n\n   作为最后一个子标签\n\n   - 优点：通俗易懂，容易掌握；\n   - 缺点：会添加较多无意义的空标签，有违结构与表现的分离，在后期维护中将是噩梦\n\n2. .clearfix { overflow: hidden; zoom: 1; }\n\n   - 优点：不存在结构和语义化问题，代码量极少\n   - 缺点：内容增多时容易造成不自动换行，导致内容被隐藏掉，无法显示需要溢出的元素\n\n3. 建立伪类选择器\n\n\n\n![image.png](https://raw.githubusercontent.com/why862555625/images/main/images/98e2353e3275475095bd26ecedfa32e9%7Etplv-k3u1fbpfcp-zoom-in-crop-mark%3A1512%3A0%3A0%3A0.awebp)\n\n\n\n## 17. css 中优雅降级和渐进增强有什么区别？\n\n优雅降级和渐进增强是随着 css3 流出来的一个概念。由于低级浏览器不支持 css3， 但 css3 的效果又很优秀不忍放弃，所以在高级浏览器中使用 css3 ，而在低级浏览器只保证最基本的功能。二者最关键的区别是它们所侧重的内容，以及这种不同所造成的工作流程的差异。\n\n- `优雅降级`：一开始就构建完整的功能，然后针对浏览器测试和修复。\n- `渐进增强`：一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能以达到更好的体验。\n\n## 18. img 的 alt 和 title 的异同？实现图片懒加载的原理？\n\n- `alt`是图片加载失败时显示在网页上的替代文字；`title`是鼠标放在图片上面时显示的文字，是对图片的进一步描述和说明。\n- `alt`是 img 的必要属性；`title`不是。\n- 对于网站 SEO 优先来说，搜索引擎对图片意思的判断，主要是靠`alt`属性，所以在图片`alt`属性中以简要文字说明，同时包含关键字，也是页面优化的一部分。\n\n`懒加载原理`：先设置图片的 `data-set` 属性值（也可以是其他任意的，只要不发生 http 请求就可以，作用是为了存取值）为图片路径，由于不是 `src` 属性，故不会发生 http 请求。然后计算出页面的 scrollTop 的高度和浏览器的高度之和，如果图片距页面顶端距离小于前两者之和，说明图片要显示出来了，这时将 `data-set` 属性替换为 `src` 属性即可。\n\n## 19. css sprites （雪碧图/精灵图）\n\ncss sprites 就是把网页中一些小图片整合到一张图片文件中，再利用 css 的 background-image、background-repeat、background-position 的组合进行背景定位。\n\n优点： 减少图片体积；减少 http 请求次数\n\n缺点：维护比较麻烦；不能随便改变大小，会失真模糊\n\n## 20. 什么是字体图标？\n\n字体图标简单的说，就是一种特殊的字体，通过这种字体，显示给用户的就像一个个图片一样。字体图标最大的好处，在于它不会变形和加载速度快。字体图标可以像文字一样，随意通过 css 来控制它的大小和颜色，非常方便。\n\n## 21. 主流浏览器内核私有属性 css 前缀？\n\n- mozilla(firefox、flock等): -moz\n- webkit 内核(safari、chrome等): -webkit\n- opera 内核(opera浏览器): -o\n- trident 内核(ie 浏览器): -ms\n\n\n\n\n\n","source":"_posts/js/HTML&css复习.md","raw":"---\ntitle: HTML & CSS复习\ntags:\n  - 前端\n  - HTML\ncategories: HTML\nkeywords: '前端,面试,HTML'\ndescription: HTMLJS复习记录\ntop_img: 设置false不显示顶部图片\nsticky: 数值越大越靠前\ncover: 首页封面\ncomments: false评论\nabbrlink: d9795d88\ndate: 2023-05-23 15:21:13\nupdated: 2023-05-23 15:21:13\n---\n\nJS复习记录\n\n<!-- more -->\n\n\n\n# HTML\n\n## 1. 语义化\n\n1. 语义化，指对文本内容的结构化（内容语义化），选择合乎语义的标签（代码语义化）。\n\n2. 语义化标签：`header`、`nav`、`main`、`article`、`section`、`aside`、`footer`等。\n\n3. 优点：\n\n   - 代码结构清晰，易于阅读，有利于维护\n   - 方便其他设备解析（如：屏幕阅读器）\n   - 有利于搜索引擎优化（SEO），搜索引擎爬虫会根据不同的标签来赋予不同的权重\n\n   \n\n## 2. script 标签中属性 async 和 defer 的区别？\n\n- `script` 会阻碍 HTML 解析，只有下载好并执行完脚本才会继续解析 HTML\n- `async script`：解析 HTML 的过程中会进行脚本的异步下载，下载成功后立马执行，因此有可能会阻断 HTML 的解析。多个脚本的执行顺序无法保证。\n- `defer script`：也是异步下载脚步，加载完成后，如果此时 HTML 还没有解析完，浏览器不会暂停解析去执行 JS 代码，而是等待 HTML 解析完毕再执行 JS 代码，如果存在多个 `defer script `标签，浏览器（IE9及以下除外）会保证它们按照在 HTML 中出现的顺序执行，不会破坏 JS 脚本之间的依赖关系。\n\n\n\n## 3. DOCTYPE 的作用是什么？\n\n`<!DOCTYE>` 声明一般位于文档的第一行，它的作用主要是告诉浏览器以什么样的模式来解析文档。一般指定了之后会以“标准模式”进行文档解析，否则就以“兼容模式”进行解析。\n\n- 在`标准模式`下，浏览器的解析规则都是按照最新的标准进行解析的。\n- 而在`兼容模式`下，浏览器会以向后兼容的方式来模拟老式浏览器的行为，以保证一些老的网站能正常访问。\n\n## 4. SGML、HTML、XML 和 XHTML的区别\n\n- `SGML` 是标准通用标记语言，是一种定义电子文档结构和描述其内容的国际标准语言，是所有电子文档标记语言的起源。\n- `HTML` 是超文本标记语言，主要是用于规定怎样显示网页。\n- `XML` 是可扩展标记语言，是未来网页语言的发展方向，XML 和 HTML 的最大区别就在于 XML 的标签是可以自己创建的，数量无限多，而 HTML 的标签都是固定的而且数量有限。\n- `XHTML` 也是现在基本上所有网页都在用的标记语言，他其实和 HTML 没什么本质的区别，标签都一样，用法也都一样，就是比 HTML 更严格，比如标签必须都用小写，标签都必须有闭合标签等。\n\n\n\n## 5. HTML5 有哪些新特性、移除了哪些元素？\n\nHTML5 现在已经不是 SGML 的子集，主要是关于图像、位置、存储、多任务等功能的增加。\n\n新增的：\n\n- 绘图 `canvas`\n- 用于媒介回放的 `video` 和 `audio` 元素\n- 本地离线存储 `localStorage` 、`sessionStorage`\n- 语义化更好的内容元素，如：`header`、`article`、`nav`、`section`、`footer`等\n- 表单控件 `calendar`、`date`、`time`、`email`、`url`、`search` 等\n- 新的技术 `webworker`、`websocket`\n- 新的文档属性 `document.visibilityState`\n\n移除的：\n\n- 纯表现的元素：`basefont`、`big`、`center`、`s`、`tt`、`u`\n- 对可用性产生负面影响的元素：`frame`、`frameset`、`noframes`\n\n\n\n\n\n## 6. 对浏览器内核的理解\n\n主要分为两部分：渲染引擎和JS引擎。\n\n- `渲染引擎`：其职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 HTML、 XML 文档及图片，它也可以借助一些浏览器扩展插件显示其他类型数据，如：使用PDF阅读器插件可以显示 PDF 格式。\n- `JS引擎`：解析和执行 JavaScript 来实现网页的动态效果。\n\n最开始渲染引擎和JS引擎并没有区分的很明显，后来JS引擎越来越独立，内核就倾向于只指渲染引擎了\n\n\n\n## 7. 什么是文档的预解析？\n\n当执行 JavaScript 脚本时，另一个线程解析剩下的文档，并加载后面需要通过网络加载的资源。这种方式可以使资源并行加载，从而使整体速度更快。\n\n需要注意的是，预解析并不改变DOM树，它将这个工作交给主解析过程，自己只解析外部资源的引用，比如：外部脚本、样式及图片。\n\n\n\n## 8. 浏览器的渲染原理\n\n简记： 生成DOM树 --> 生成CSS规则树 --> 构建渲染树 --> 布局 --> 绘制\n\n1. 首先解析收到的文档，根据文档定义构建一颗 `DOM 树`，DOM 树是由 DOM 元素及属性节点组成的。\n2. 然后对 CSS 进行解析，生成一颗 `CSS 规则树`。\n3. 根据 DOM 树和 CSS 规则树构建`渲染树`。渲染树的节点被称为渲染对象，它是一个包含有颜色等属性的矩形。渲染对象和 DOM 元素相对应，但这种关系不是一对一的，不可见的 DOM 元素不会插入渲染树。还有一些 DOM 元素对应几个可见对象，它们一般是一些具有复杂结构的元素，无法用一个矩形来描述。\n4. 当渲染对象被创建并添加到树中，它们没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行`布局`（也可以叫做回流）。这一阶段浏览器要做的是计算出各个节点在页面中确切位置和大小。通常这一行为也被称为自动重排。\n5. 布局阶段结束后是`绘制`阶段，遍历渲染树并调用渲染对象的 paint 方法将它们的内容显示到屏幕上。值得注意的是，这个过程是逐步完成的，为了更好的用户体验，渲染引擎会尽早的将内容呈现到屏幕上，并不会等到所有 HMTL 内容都解析完之后再去构建和布局渲染树，它是解析完一部分内容就显示一部分内容，同时，可能还通过网络下载其余内容。\n\n\n\n## 9. 什么是回流和重绘？\n\n1.概念：\n\n- `回流`：当 DOM 的变化影响了元素的几何信息，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做回流（也可以叫做重排）。表现为重新生成布局，重新排列元素。\n- `重绘`：当一个元素的外观发生改变，重新把元素外观绘制出来的过程，叫做重绘。表现为某些元素的外观被改变。\n\n2.常见引起回流和重绘的属性和方法：\n\n任何会改变元素几何信息（元素的位置和尺寸大小）的操作都会触发回流。\n\n- 添加或删除可见的 DOM 元素\n- 元素尺寸改变--边距、填充、宽度、高度\n- 浏览器尺寸改变-- resize 事件发生时\n- 计算 offsetWidth 和 offsetHeight 属性\n- 设置 style 属性的值\n- 修改网页默认字体\n\n**回流必定会发生重绘，重绘不一定会引发回流。**\n\n**回流所需的成本比重绘高得多**\n\n建议阅读文章：[你真的了解回流和重绘吗](https://juejin.cn/post/6844903779700047885)\n\n\n\n## 10. 如何减少回流？\n\n- 使用 transform 代替 top\n- 不要把节点的属性值放在一个循环里，当成循环里的变量\n- 不要使用 table 布局，可能很小的一个改动会造成整个 table 的重新布局\n- 把 DOM 离线后修改。如：使用 documentFragment 对象在内存里操作 DOM\n- 不要一条一条的修改样式，可以预先定义好 class，然后修改 DOM 的 className\n- 使用 absolute 或 fixed 使元素脱离文档流\n\n\n\n## 11. sessionStorage，localStorage 和 cookie 的区别\n\n1. 共同点：都是保存在浏览器端，且同源的\n2. 区别:\n\n- cookie 始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器和服务器之间来回传递；而 sessionStorage 和 localStorage 不会自动把数据发送到服务器，仅在本地保存。cookie 还有路径（path）的概念，可以限制 cookie 只属于某个路径下。\n- 存储大小限制不同。cookie 不能超过 4K，因为每次 http 请求都会携带 cookie，所以 cookie 只适合保存很小的数据，如：会话标识。sessionStorage 和 localStorage 虽然也有存储大小限制，但比 cookie 大得多，可以达到 5M 或更大。\n- 数据有效期不同。sessionStorage 仅在当前浏览器窗口关闭之前有效；localStorage 始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie 只在设置的 cookie 过期时间之前有效。\n- 作用域不同。sessionStorage 不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 和 cookie 在所有同源窗口中都是共享的。\n\n\n\n## 12. iframe 有哪些优缺点？\n\n优点：\n\n1. iframe 能原封不动的把嵌入的网页展现出来。\n2. 如果有多个网页引用 iframe，只需修改 iframe 的内容，就可以实现调用每一个页面的更改，方便快捷。\n\n缺点：\n\n1. iframe 会阻塞主页面的 onload 事件。\n2. iframe 和主页面共享链接池，而浏览器对相同域的链接有限制，所以会影响页面的并行加载。\n3. 不利于 SEO，代码复杂，无法一下被搜索引擎索引到。\n4. iframe 框架页面会增加服务器的 http 请求，对于大型网站不可取。\n5. 很多移动设备无法完全显示框架，设备兼容性差。\n\n注意：通过动态给 iframe 添加 src 属性值，可解决前两个问题。\n\n\n\n## 13. 什么是 canvas，基本用法是什么？\n\ncanvas 元素是 HTML5 的一部分，允许脚步语言动态渲染位图像。canvas 由一个可控制区域 HTML 代码中的属性定义决定高度和宽度。JavaScript 代码可以访问该区域，通过一套完整的绘图功能类似于其他通用二维的 API，从而生成动态的图形。\n\n1. 创建 canvas 标签\n\n```arduino\narduino\n复制代码<canvas id=\"myCanvas\" width=\"150\" height=\"150\">该浏览器不支持canvas</canvas>\n```\n\n1. 渲染上下文\n\n```ini\nini复制代码var canvas = document.getElementById('myCanvas');\nvar ctx = canvas.getContext('2d');\n```\n\n代码第一行通过使用 `document.getElementById()` 方法获取 `<canvas>` 元素对应的 DOM 对象，然后可以通过使用它的 `getContext()` 方法来绘制上下文。 创建 canvas 标签时可以在标签内写上不支持的提示信息；也可以通过 `getContext()` 方法判读是否支持编程。\n\n```ini\nini复制代码var canvas = document.getElementById('myCanvas');\nif (canvas.getContext) {\n  var ctx = canvas.getContext('2d');\n  // other code\n} else {\n  // 不支持 canvas 的其他代码\n}\n```\n\n用途：\n\ncanvas 可用于游戏和图表（echarts.js、heightchart.js 都是基于 canvas 来绘图）制作。\n\n# CSS\n\n## 1. css3 有哪些新特性？\n\n- rgba 和 透明度\n- background-image、background-origin、background-size、background-repeat\n- word-wrap: break-word（对长的不可分割的单词换行）\n- 文字阴影 text-shadow\n- font-face属性，定义自己的字体\n- border-radius\n- 边框图片 border-image\n- 盒阴影 box-shadow\n- 媒体查询：定义多套 css，当浏览器尺寸发生变化时采用不同的属性\n\n## 2. style 标签写在 body 后与 body 前有什么区别？\n\n1. 写在 body 标签前有利于浏览器逐步渲染： resources downloading --> cssDOM + DOM --> Render Tree --> layout --> paint\n2. 写在 body 标签后： 由于浏览器以逐行方式对 HTML 文档进行解析，当解析到写在尾部的样式表（外联或写在 style 标签）会导致浏览器停止之前的渲染，等待加载且解析样式完成后重新渲染；在 windows 的 IE 下可能出现样式失效导致的页面闪烁问题。\n\n## 3. CSS选择器及优先级\n\n1. 选择器\n   - id选择器(#myid)\n   - 类选择器(.myclass)\n   - 属性选择器(a[rel=\"external\"])\n   - 伪类选择器(a:hover, li:nth-child)\n   - 标签选择器(div, h1, p)\n   - 伪元素选择器(p::first-line)\n   - 相邻选择器（h1 + p）\n   - 子选择器(ul > li)\n   - 后代选择器(li a)\n   - 通配符选择器(*)\n2. 优先级\n   - `!important`\n   - 内联样式（1000）\n   - ID选择器（0100）\n   - 类选择器 / 属性选择器 / 伪类选择器（0010）\n   - 标签选择器 / 伪元素选择器（0001）\n   - 关系选择器 / 通配符选择器（0000）\n\n带 !important 标记的样式属性优先级最高；样式表的来源相同时：`!important > 行内样式> ID选择器 > 类选择器 > 标签 > 通配符 > 继承 > 浏览器默认属性`\n\n## 4. rgba() 和 opacity 设置透明度的区别是什么？\n\nrgba() 和 opacity 都能实现透明效果，但最大的不同是 opacity 作用于元素，以及元素内的所有内容的透明度；而 rgba() 只作用于元素的颜色或其背景色，设置 rgba() 透明的元素的子元素不会继承透明效果。\n\n## 5. 浏览器是如何解析 css 选择器的？\n\n`从右向左解析的。`若从左向右匹配，发现不符合规则，需要回溯，会损失很多性能。若从右向左匹配，先找到所有的最后节点，对于每一个节点，向上寻找其父节点直到查找至根元素或满足条件的匹配规则，则结束这个分支的遍历。\n\n在 css 解析完毕后，需将解析结果 css 规则树和 DOM Tree 一起进行分析建立一颗 Render Tree，最终用来进行绘图。\n\n## 6. display: none 和 visibility: hidden 两者的区别\n\n1. display: none 隐藏后不占用文档流；而 visibility: hidden 会占用文档流。\n2. visibility 具有继承性，给父元素设置 \"visibility: hidden\"，子元素也会继承该属性，但如果重新给子元素设置 \"visibility: visible\"，则子元素又会显示出来。\n3. visibility: hidden 不会影响计数器的计数，虽然隐藏了，但计数器依然运行着。\n4. 在 css3 中 transition 支持 visibility 属性，但不支持 display。因为 transition 可以延迟执行，因此配合 visibility 使用纯 css 延时显示效果可以提高用户体验。\n5. display: none 会引起回流（重排）和重绘；visibility: hidden 会引起重绘。\n\n\n\n## 7. 简述 transform，transition，animation 的作用\n\n1. `transform`：描述了元素的静态样式，本身不会呈现动画效果，可以对元素进行旋转 rotate、扭曲 skew、缩放 scale 和移动 translate 以及矩阵变形 matrix。`transition` 和 `animation` 两者都能实现动画效果。`transform` 常配合`transition` 和 `animation` 使用。\n2. `transition`：样式过渡，从一种效果逐渐改变为另一种效果，它是一个合写属性。transition: transition-property  transition-duration  transition-timing-function  transition-delay 从左到右，依次是：过渡效果的css属性名称、过渡效果花费时间、速度曲线、过渡开始的延迟时间  `transition` 通常和 hover 等事件配合使用，需要由事件来触发过渡。\n3. `animation`：动画，有 `@keyframes` 来描述每一帧的样式。\n\n区别：\n\n- `transform` 仅描述元素的静态样式，常配合`transition` 和 `animation` 使用。\n- `transition` 通常和 hover 等事件配合使用；`animation` 是自发的，立即播放。\n- `animation` 可以设置循环次数。\n- `animation` 可以设置每一帧的样式和时间，`transition` 只能设置头尾。\n- `transition` 可以与 js 配合使用， js 设定要变化的样式，`transition` 负责动画效果。\n\n\n\n## 8. line-height 如何继承？\n\n- 父元素的 `line-height` 是具体数值，则子元素 `line-height` 继承该值。\n- 父元素的 `line-height` 是比例值，如'2'，则子元素 `line-height` 继承该比例。\n- 父元素的 `line-height` 是百分比，则子元素 `line-height` 继承的是父元素的 font-size * 百分比 计算出来的值。\n\n## 9. 如何让 chrome 支持 10px 的文字？\n\n1. font-size: 12px; -webkit-transform: scale(0.84);\n2. font-size: 20px; -webkit-transform: scale(0.5);\n\n## 10. position 属性的值有哪些？\n\n1. `static`：默认定位。元素出现在正常的文档流中（忽略top，bottom，left，right 或 z-index声明）\n2. `relative`：相对定位。如果对一个元素进行相对定位，将出现在它所在的位置上。然后，可以通过设置垂直或水平位置，使其“相对于”它的起点进行移动。使用相对定位时，无论是否移动，元素仍然占据原来的空间；移动元素会导致其覆盖其他元素。\n3. `absolute`：绝对定位。元素的位置相对于最近的已定位的父元素，如果元素没有已定位的父元素，则相对于根元素（即 html 元素）定位。绝对定位的元素会脱离文档流，不占据空间，会与其他元素重叠。\n4. `fixed`：固定定位。元素的位置相对于浏览器窗口是固定位置，即使窗口滚动它也不会移动。固定定位的元素会脱离文档流，不占据空间，会与其他元素重叠。\n5. `sticky`：粘性定位。粘性定位可以被认为是相对定位和固定定位的混合，元素在跨越特定阈值前为相对定位，之后为固定定位。top，right，buttom，left，必须指定这四个阈值中的一个，才可以使粘性定位生效，否则行为与其相对定位相同。\n6. `inherit`：规定应该从父元素继承 position 属性的值。\n\n## 11. css 盒模型？\n\n- `标准盒模型`，width 指 content 部分的宽度，总宽度 = width + border(左右) + padding（左右）+ margin（左右）；高度同理。\n- `怪异盒模型（IE盒模型）`，width 指 content + border（左右） + padding（左右）三部分的宽度，因此，总宽度 = width + margin（左右）；高度同理。\n\n## 12. box-sizing 属性\n\n1. `content-box`，对应标准盒模型。\n2. `border-box`，IE盒模型。\n3. `inherit`，继承父元素的 box-sizing 值。\n\n## 13. BFC（块级格式上下文）\n\n1. 概念： BFC（Block Formatting Context），块级格式上下文。BFC 是 css 布局的一个概念，是一个独立的渲染区域，规定了内部 box 如何布局，且这个区域内的子元素不会影响到外面的元素。\n2. 布局规则：\n\n- 内部的 box 会在垂直方向一个接一个的放置\n- box 垂直方向的距离由 margin 决定，同一个 BFC 相邻的 box 的 margin 会发生重叠\n- 每个 box 的 margin 左边，与包含块的左 border 相接触（对于从左往右的格式化，否则相反）\n- BFC 的区域不会与 float box 重叠\n- BFC 是一个独立容器，容器内的子元素不会影响到外面的元素\n- 计算 BFC 高度时，浮动元素也参与计算高度\n\n1. 如何创建 BFC ？\n\n- 根元素，即 html 元素\n- float 值不为 none\n- position 值为 absolute 或 fixed\n- display 的值为 inline-block、tabl-cell、table-caption\n- overflow 的值不为 visible\n\n1. BFC 的使用场景\n\n- 去除边距重叠问题\n- 清除浮动（让父元素的高度包含子浮动元素）\n- 阻止元素被浮动元素覆盖\n\n\n\n## 14. 让一个元素水平/垂直居中\n\n1. 水平居中\n\n- 行内元素：`text-align: center;`\n- 对于确定宽度的块级元素\n  - width 和 margin 实现： `mragin: 0 auto;`\n  - 绝对定位和 margin-left 实现： `margin-left: (父width - 子 width)/2；`(前提是父元素相对定位)\n- 对于宽度未知的块级元素\n  - table 标签配合 margin 左右 auto 实现\n  - inline-block 实现：`display: inline-block; text-align: center;`\n  - 绝对定位和 transform 实现， translateX 可以移动本身元素的50%\n  - flex 布局 `justify-content: center`\n\n1. 垂直居中\n\n- 纯文字类，设置 line-height 等于 height\n- 子绝父相，子元素通过 margin 实现自适应居中\n- 子绝父相，通过位移 transform 实现\n- flex 布局，`align-items: center;`\n- table 布局，父级通过转换为表格形式，子级设置 vertical-align 实现\n\n## 15. flex 布局\n\nflex 布局，是一种弹性盒布局模型，给子元素提供了空间分布和对齐能力，由`container`（容器）及`item`（项目）组成。该布局模型提供了一种更加高效的方式来对容器中的项目进行布局、对齐和分配空间。适用于在不同尺寸的屏幕中创建可自动扩展和收缩布局，通常可用于`水平/垂直居中`，`两栏`、`三栏布局`等的场景里。\n\n其中`flex`属性是`flex-grow`，`flex-shrink`和`flex-basis`的简写，默认值为`0 1 auto`。**该属性有两个快捷值：`auto (1 1 auto)` 和 `none (0 0 auto)`。**\n\n- `flex-grow`：定义项目的放大比例，默认值为 0，即如果存在剩余空间，也不放大。如果所有项目的`flex-grow`属性都为 1，则它们将等分剩余空间（如果有的话）。如果一个项目的`flex-grow`属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。\n- `flex-shrink`：项目的缩小比例，默认为 1，即如果空间不足，项目将缩小。如果所有项目的`flex-shrink`属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的`flex-shrink`属性为 0，其他项目都为 1，则空间不足时，前者不缩小。\n- `flex-basis`：定义了在分配多余空间之前，项目占据的主轴空间。浏览器会根据该属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小。当设置为 0 的是，会根据内容撑开。也可以设为跟`width`或`height`属性一样的值（比如 350px），则项目将占据固定空间。\n\n`flex`常用的属性值：\n\n- flex: 1 --> flex: 1 1 0%\n- flex: 2 --> flex: 2 1 0%\n- flex: auto --> flex: 1 1 auto\n- flex: none --> flex: 0 0 auto【常用于固定尺寸不伸缩】\n\n\n\n## 16. 清除浮动\n\n1. 直接把 \n\n   ```\n   <div style=\"clear: both;\"></div>\n   ```\n\n   作为最后一个子标签\n\n   - 优点：通俗易懂，容易掌握；\n   - 缺点：会添加较多无意义的空标签，有违结构与表现的分离，在后期维护中将是噩梦\n\n2. .clearfix { overflow: hidden; zoom: 1; }\n\n   - 优点：不存在结构和语义化问题，代码量极少\n   - 缺点：内容增多时容易造成不自动换行，导致内容被隐藏掉，无法显示需要溢出的元素\n\n3. 建立伪类选择器\n\n\n\n![image.png](https://raw.githubusercontent.com/why862555625/images/main/images/98e2353e3275475095bd26ecedfa32e9%7Etplv-k3u1fbpfcp-zoom-in-crop-mark%3A1512%3A0%3A0%3A0.awebp)\n\n\n\n## 17. css 中优雅降级和渐进增强有什么区别？\n\n优雅降级和渐进增强是随着 css3 流出来的一个概念。由于低级浏览器不支持 css3， 但 css3 的效果又很优秀不忍放弃，所以在高级浏览器中使用 css3 ，而在低级浏览器只保证最基本的功能。二者最关键的区别是它们所侧重的内容，以及这种不同所造成的工作流程的差异。\n\n- `优雅降级`：一开始就构建完整的功能，然后针对浏览器测试和修复。\n- `渐进增强`：一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能以达到更好的体验。\n\n## 18. img 的 alt 和 title 的异同？实现图片懒加载的原理？\n\n- `alt`是图片加载失败时显示在网页上的替代文字；`title`是鼠标放在图片上面时显示的文字，是对图片的进一步描述和说明。\n- `alt`是 img 的必要属性；`title`不是。\n- 对于网站 SEO 优先来说，搜索引擎对图片意思的判断，主要是靠`alt`属性，所以在图片`alt`属性中以简要文字说明，同时包含关键字，也是页面优化的一部分。\n\n`懒加载原理`：先设置图片的 `data-set` 属性值（也可以是其他任意的，只要不发生 http 请求就可以，作用是为了存取值）为图片路径，由于不是 `src` 属性，故不会发生 http 请求。然后计算出页面的 scrollTop 的高度和浏览器的高度之和，如果图片距页面顶端距离小于前两者之和，说明图片要显示出来了，这时将 `data-set` 属性替换为 `src` 属性即可。\n\n## 19. css sprites （雪碧图/精灵图）\n\ncss sprites 就是把网页中一些小图片整合到一张图片文件中，再利用 css 的 background-image、background-repeat、background-position 的组合进行背景定位。\n\n优点： 减少图片体积；减少 http 请求次数\n\n缺点：维护比较麻烦；不能随便改变大小，会失真模糊\n\n## 20. 什么是字体图标？\n\n字体图标简单的说，就是一种特殊的字体，通过这种字体，显示给用户的就像一个个图片一样。字体图标最大的好处，在于它不会变形和加载速度快。字体图标可以像文字一样，随意通过 css 来控制它的大小和颜色，非常方便。\n\n## 21. 主流浏览器内核私有属性 css 前缀？\n\n- mozilla(firefox、flock等): -moz\n- webkit 内核(safari、chrome等): -webkit\n- opera 内核(opera浏览器): -o\n- trident 内核(ie 浏览器): -ms\n\n\n\n\n\n","slug":"js/HTML&css复习","published":1,"layout":"post","photos":[],"link":"","_id":"clijtrgc8000hyswha8z5eqyg","content":"<p>JS复习记录</p>\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1><h2 id=\"1-语义化\"><a href=\"#1-语义化\" class=\"headerlink\" title=\"1. 语义化\"></a>1. 语义化</h2><ol>\n<li><p>语义化，指对文本内容的结构化（内容语义化），选择合乎语义的标签（代码语义化）。</p>\n</li>\n<li><p>语义化标签：<code>header</code>、<code>nav</code>、<code>main</code>、<code>article</code>、<code>section</code>、<code>aside</code>、<code>footer</code>等。</p>\n</li>\n<li><p>优点：</p>\n<ul>\n<li>代码结构清晰，易于阅读，有利于维护</li>\n<li>方便其他设备解析（如：屏幕阅读器）</li>\n<li>有利于搜索引擎优化（SEO），搜索引擎爬虫会根据不同的标签来赋予不同的权重</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-script-标签中属性-async-和-defer-的区别？\"><a href=\"#2-script-标签中属性-async-和-defer-的区别？\" class=\"headerlink\" title=\"2. script 标签中属性 async 和 defer 的区别？\"></a>2. script 标签中属性 async 和 defer 的区别？</h2><ul>\n<li><code>script</code> 会阻碍 HTML 解析，只有下载好并执行完脚本才会继续解析 HTML</li>\n<li><code>async script</code>：解析 HTML 的过程中会进行脚本的异步下载，下载成功后立马执行，因此有可能会阻断 HTML 的解析。多个脚本的执行顺序无法保证。</li>\n<li><code>defer script</code>：也是异步下载脚步，加载完成后，如果此时 HTML 还没有解析完，浏览器不会暂停解析去执行 JS 代码，而是等待 HTML 解析完毕再执行 JS 代码，如果存在多个 <code>defer script </code>标签，浏览器（IE9及以下除外）会保证它们按照在 HTML 中出现的顺序执行，不会破坏 JS 脚本之间的依赖关系。</li>\n</ul>\n<h2 id=\"3-DOCTYPE-的作用是什么？\"><a href=\"#3-DOCTYPE-的作用是什么？\" class=\"headerlink\" title=\"3. DOCTYPE 的作用是什么？\"></a>3. DOCTYPE 的作用是什么？</h2><p><code>&lt;!DOCTYE&gt;</code> 声明一般位于文档的第一行，它的作用主要是告诉浏览器以什么样的模式来解析文档。一般指定了之后会以“标准模式”进行文档解析，否则就以“兼容模式”进行解析。</p>\n<ul>\n<li>在<code>标准模式</code>下，浏览器的解析规则都是按照最新的标准进行解析的。</li>\n<li>而在<code>兼容模式</code>下，浏览器会以向后兼容的方式来模拟老式浏览器的行为，以保证一些老的网站能正常访问。</li>\n</ul>\n<h2 id=\"4-SGML、HTML、XML-和-XHTML的区别\"><a href=\"#4-SGML、HTML、XML-和-XHTML的区别\" class=\"headerlink\" title=\"4. SGML、HTML、XML 和 XHTML的区别\"></a>4. SGML、HTML、XML 和 XHTML的区别</h2><ul>\n<li><code>SGML</code> 是标准通用标记语言，是一种定义电子文档结构和描述其内容的国际标准语言，是所有电子文档标记语言的起源。</li>\n<li><code>HTML</code> 是超文本标记语言，主要是用于规定怎样显示网页。</li>\n<li><code>XML</code> 是可扩展标记语言，是未来网页语言的发展方向，XML 和 HTML 的最大区别就在于 XML 的标签是可以自己创建的，数量无限多，而 HTML 的标签都是固定的而且数量有限。</li>\n<li><code>XHTML</code> 也是现在基本上所有网页都在用的标记语言，他其实和 HTML 没什么本质的区别，标签都一样，用法也都一样，就是比 HTML 更严格，比如标签必须都用小写，标签都必须有闭合标签等。</li>\n</ul>\n<h2 id=\"5-HTML5-有哪些新特性、移除了哪些元素？\"><a href=\"#5-HTML5-有哪些新特性、移除了哪些元素？\" class=\"headerlink\" title=\"5. HTML5 有哪些新特性、移除了哪些元素？\"></a>5. HTML5 有哪些新特性、移除了哪些元素？</h2><p>HTML5 现在已经不是 SGML 的子集，主要是关于图像、位置、存储、多任务等功能的增加。</p>\n<p>新增的：</p>\n<ul>\n<li>绘图 <code>canvas</code></li>\n<li>用于媒介回放的 <code>video</code> 和 <code>audio</code> 元素</li>\n<li>本地离线存储 <code>localStorage</code> 、<code>sessionStorage</code></li>\n<li>语义化更好的内容元素，如：<code>header</code>、<code>article</code>、<code>nav</code>、<code>section</code>、<code>footer</code>等</li>\n<li>表单控件 <code>calendar</code>、<code>date</code>、<code>time</code>、<code>email</code>、<code>url</code>、<code>search</code> 等</li>\n<li>新的技术 <code>webworker</code>、<code>websocket</code></li>\n<li>新的文档属性 <code>document.visibilityState</code></li>\n</ul>\n<p>移除的：</p>\n<ul>\n<li>纯表现的元素：<code>basefont</code>、<code>big</code>、<code>center</code>、<code>s</code>、<code>tt</code>、<code>u</code></li>\n<li>对可用性产生负面影响的元素：<code>frame</code>、<code>frameset</code>、<code>noframes</code></li>\n</ul>\n<h2 id=\"6-对浏览器内核的理解\"><a href=\"#6-对浏览器内核的理解\" class=\"headerlink\" title=\"6. 对浏览器内核的理解\"></a>6. 对浏览器内核的理解</h2><p>主要分为两部分：渲染引擎和JS引擎。</p>\n<ul>\n<li><code>渲染引擎</code>：其职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 HTML、 XML 文档及图片，它也可以借助一些浏览器扩展插件显示其他类型数据，如：使用PDF阅读器插件可以显示 PDF 格式。</li>\n<li><code>JS引擎</code>：解析和执行 JavaScript 来实现网页的动态效果。</li>\n</ul>\n<p>最开始渲染引擎和JS引擎并没有区分的很明显，后来JS引擎越来越独立，内核就倾向于只指渲染引擎了</p>\n<h2 id=\"7-什么是文档的预解析？\"><a href=\"#7-什么是文档的预解析？\" class=\"headerlink\" title=\"7. 什么是文档的预解析？\"></a>7. 什么是文档的预解析？</h2><p>当执行 JavaScript 脚本时，另一个线程解析剩下的文档，并加载后面需要通过网络加载的资源。这种方式可以使资源并行加载，从而使整体速度更快。</p>\n<p>需要注意的是，预解析并不改变DOM树，它将这个工作交给主解析过程，自己只解析外部资源的引用，比如：外部脚本、样式及图片。</p>\n<h2 id=\"8-浏览器的渲染原理\"><a href=\"#8-浏览器的渲染原理\" class=\"headerlink\" title=\"8. 浏览器的渲染原理\"></a>8. 浏览器的渲染原理</h2><p>简记： 生成DOM树 –&gt; 生成CSS规则树 –&gt; 构建渲染树 –&gt; 布局 –&gt; 绘制</p>\n<ol>\n<li>首先解析收到的文档，根据文档定义构建一颗 <code>DOM 树</code>，DOM 树是由 DOM 元素及属性节点组成的。</li>\n<li>然后对 CSS 进行解析，生成一颗 <code>CSS 规则树</code>。</li>\n<li>根据 DOM 树和 CSS 规则树构建<code>渲染树</code>。渲染树的节点被称为渲染对象，它是一个包含有颜色等属性的矩形。渲染对象和 DOM 元素相对应，但这种关系不是一对一的，不可见的 DOM 元素不会插入渲染树。还有一些 DOM 元素对应几个可见对象，它们一般是一些具有复杂结构的元素，无法用一个矩形来描述。</li>\n<li>当渲染对象被创建并添加到树中，它们没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行<code>布局</code>（也可以叫做回流）。这一阶段浏览器要做的是计算出各个节点在页面中确切位置和大小。通常这一行为也被称为自动重排。</li>\n<li>布局阶段结束后是<code>绘制</code>阶段，遍历渲染树并调用渲染对象的 paint 方法将它们的内容显示到屏幕上。值得注意的是，这个过程是逐步完成的，为了更好的用户体验，渲染引擎会尽早的将内容呈现到屏幕上，并不会等到所有 HMTL 内容都解析完之后再去构建和布局渲染树，它是解析完一部分内容就显示一部分内容，同时，可能还通过网络下载其余内容。</li>\n</ol>\n<h2 id=\"9-什么是回流和重绘？\"><a href=\"#9-什么是回流和重绘？\" class=\"headerlink\" title=\"9. 什么是回流和重绘？\"></a>9. 什么是回流和重绘？</h2><p>1.概念：</p>\n<ul>\n<li><code>回流</code>：当 DOM 的变化影响了元素的几何信息，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做回流（也可以叫做重排）。表现为重新生成布局，重新排列元素。</li>\n<li><code>重绘</code>：当一个元素的外观发生改变，重新把元素外观绘制出来的过程，叫做重绘。表现为某些元素的外观被改变。</li>\n</ul>\n<p>2.常见引起回流和重绘的属性和方法：</p>\n<p>任何会改变元素几何信息（元素的位置和尺寸大小）的操作都会触发回流。</p>\n<ul>\n<li>添加或删除可见的 DOM 元素</li>\n<li>元素尺寸改变–边距、填充、宽度、高度</li>\n<li>浏览器尺寸改变– resize 事件发生时</li>\n<li>计算 offsetWidth 和 offsetHeight 属性</li>\n<li>设置 style 属性的值</li>\n<li>修改网页默认字体</li>\n</ul>\n<p><strong>回流必定会发生重绘，重绘不一定会引发回流。</strong></p>\n<p><strong>回流所需的成本比重绘高得多</strong></p>\n<p>建议阅读文章：<a href=\"https://juejin.cn/post/6844903779700047885\">你真的了解回流和重绘吗</a></p>\n<h2 id=\"10-如何减少回流？\"><a href=\"#10-如何减少回流？\" class=\"headerlink\" title=\"10. 如何减少回流？\"></a>10. 如何减少回流？</h2><ul>\n<li>使用 transform 代替 top</li>\n<li>不要把节点的属性值放在一个循环里，当成循环里的变量</li>\n<li>不要使用 table 布局，可能很小的一个改动会造成整个 table 的重新布局</li>\n<li>把 DOM 离线后修改。如：使用 documentFragment 对象在内存里操作 DOM</li>\n<li>不要一条一条的修改样式，可以预先定义好 class，然后修改 DOM 的 className</li>\n<li>使用 absolute 或 fixed 使元素脱离文档流</li>\n</ul>\n<h2 id=\"11-sessionStorage，localStorage-和-cookie-的区别\"><a href=\"#11-sessionStorage，localStorage-和-cookie-的区别\" class=\"headerlink\" title=\"11. sessionStorage，localStorage 和 cookie 的区别\"></a>11. sessionStorage，localStorage 和 cookie 的区别</h2><ol>\n<li>共同点：都是保存在浏览器端，且同源的</li>\n<li>区别:</li>\n</ol>\n<ul>\n<li>cookie 始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器和服务器之间来回传递；而 sessionStorage 和 localStorage 不会自动把数据发送到服务器，仅在本地保存。cookie 还有路径（path）的概念，可以限制 cookie 只属于某个路径下。</li>\n<li>存储大小限制不同。cookie 不能超过 4K，因为每次 http 请求都会携带 cookie，所以 cookie 只适合保存很小的数据，如：会话标识。sessionStorage 和 localStorage 虽然也有存储大小限制，但比 cookie 大得多，可以达到 5M 或更大。</li>\n<li>数据有效期不同。sessionStorage 仅在当前浏览器窗口关闭之前有效；localStorage 始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie 只在设置的 cookie 过期时间之前有效。</li>\n<li>作用域不同。sessionStorage 不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 和 cookie 在所有同源窗口中都是共享的。</li>\n</ul>\n<h2 id=\"12-iframe-有哪些优缺点？\"><a href=\"#12-iframe-有哪些优缺点？\" class=\"headerlink\" title=\"12. iframe 有哪些优缺点？\"></a>12. iframe 有哪些优缺点？</h2><p>优点：</p>\n<ol>\n<li>iframe 能原封不动的把嵌入的网页展现出来。</li>\n<li>如果有多个网页引用 iframe，只需修改 iframe 的内容，就可以实现调用每一个页面的更改，方便快捷。</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>iframe 会阻塞主页面的 onload 事件。</li>\n<li>iframe 和主页面共享链接池，而浏览器对相同域的链接有限制，所以会影响页面的并行加载。</li>\n<li>不利于 SEO，代码复杂，无法一下被搜索引擎索引到。</li>\n<li>iframe 框架页面会增加服务器的 http 请求，对于大型网站不可取。</li>\n<li>很多移动设备无法完全显示框架，设备兼容性差。</li>\n</ol>\n<p>注意：通过动态给 iframe 添加 src 属性值，可解决前两个问题。</p>\n<h2 id=\"13-什么是-canvas，基本用法是什么？\"><a href=\"#13-什么是-canvas，基本用法是什么？\" class=\"headerlink\" title=\"13. 什么是 canvas，基本用法是什么？\"></a>13. 什么是 canvas，基本用法是什么？</h2><p>canvas 元素是 HTML5 的一部分，允许脚步语言动态渲染位图像。canvas 由一个可控制区域 HTML 代码中的属性定义决定高度和宽度。JavaScript 代码可以访问该区域，通过一套完整的绘图功能类似于其他通用二维的 API，从而生成动态的图形。</p>\n<ol>\n<li>创建 canvas 标签</li>\n</ol>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arduino</span><br><span class=\"line\">复制代码&lt;canvas id=<span class=\"string\">&quot;myCanvas&quot;</span> width=<span class=\"string\">&quot;150&quot;</span> height=<span class=\"string\">&quot;150&quot;</span>&gt;该浏览器不支持canvas&lt;/canvas&gt;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>渲染上下文</li>\n</ol>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ini复制代码var <span class=\"attr\">canvas</span> = document.getElementById(<span class=\"string\">&#x27;myCanvas&#x27;</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">var <span class=\"attr\">ctx</span> = canvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>代码第一行通过使用 <code>document.getElementById()</code> 方法获取 <code>&lt;canvas&gt;</code> 元素对应的 DOM 对象，然后可以通过使用它的 <code>getContext()</code> 方法来绘制上下文。 创建 canvas 标签时可以在标签内写上不支持的提示信息；也可以通过 <code>getContext()</code> 方法判读是否支持编程。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ini复制代码var <span class=\"attr\">canvas</span> = document.getElementById(<span class=\"string\">&#x27;myCanvas&#x27;</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">if (canvas.getContext) &#123;</span><br><span class=\"line\">  var <span class=\"attr\">ctx</span> = canvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">  // other code</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  // 不支持 canvas 的其他代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用途：</p>\n<p>canvas 可用于游戏和图表（echarts.js、heightchart.js 都是基于 canvas 来绘图）制作。</p>\n<h1 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h1><h2 id=\"1-css3-有哪些新特性？\"><a href=\"#1-css3-有哪些新特性？\" class=\"headerlink\" title=\"1. css3 有哪些新特性？\"></a>1. css3 有哪些新特性？</h2><ul>\n<li>rgba 和 透明度</li>\n<li>background-image、background-origin、background-size、background-repeat</li>\n<li>word-wrap: break-word（对长的不可分割的单词换行）</li>\n<li>文字阴影 text-shadow</li>\n<li>font-face属性，定义自己的字体</li>\n<li>border-radius</li>\n<li>边框图片 border-image</li>\n<li>盒阴影 box-shadow</li>\n<li>媒体查询：定义多套 css，当浏览器尺寸发生变化时采用不同的属性</li>\n</ul>\n<h2 id=\"2-style-标签写在-body-后与-body-前有什么区别？\"><a href=\"#2-style-标签写在-body-后与-body-前有什么区别？\" class=\"headerlink\" title=\"2. style 标签写在 body 后与 body 前有什么区别？\"></a>2. style 标签写在 body 后与 body 前有什么区别？</h2><ol>\n<li>写在 body 标签前有利于浏览器逐步渲染： resources downloading –&gt; cssDOM + DOM –&gt; Render Tree –&gt; layout –&gt; paint</li>\n<li>写在 body 标签后： 由于浏览器以逐行方式对 HTML 文档进行解析，当解析到写在尾部的样式表（外联或写在 style 标签）会导致浏览器停止之前的渲染，等待加载且解析样式完成后重新渲染；在 windows 的 IE 下可能出现样式失效导致的页面闪烁问题。</li>\n</ol>\n<h2 id=\"3-CSS选择器及优先级\"><a href=\"#3-CSS选择器及优先级\" class=\"headerlink\" title=\"3. CSS选择器及优先级\"></a>3. CSS选择器及优先级</h2><ol>\n<li>选择器<ul>\n<li>id选择器(#myid)</li>\n<li>类选择器(.myclass)</li>\n<li>属性选择器(a[rel=”external”])</li>\n<li>伪类选择器(a:hover, li:nth-child)</li>\n<li>标签选择器(div, h1, p)</li>\n<li>伪元素选择器(p::first-line)</li>\n<li>相邻选择器（h1 + p）</li>\n<li>子选择器(ul &gt; li)</li>\n<li>后代选择器(li a)</li>\n<li>通配符选择器(*)</li>\n</ul>\n</li>\n<li>优先级<ul>\n<li><code>!important</code></li>\n<li>内联样式（1000）</li>\n<li>ID选择器（0100）</li>\n<li>类选择器 / 属性选择器 / 伪类选择器（0010）</li>\n<li>标签选择器 / 伪元素选择器（0001）</li>\n<li>关系选择器 / 通配符选择器（0000）</li>\n</ul>\n</li>\n</ol>\n<p>带 !important 标记的样式属性优先级最高；样式表的来源相同时：<code>!important &gt; 行内样式&gt; ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</code></p>\n<h2 id=\"4-rgba-和-opacity-设置透明度的区别是什么？\"><a href=\"#4-rgba-和-opacity-设置透明度的区别是什么？\" class=\"headerlink\" title=\"4. rgba() 和 opacity 设置透明度的区别是什么？\"></a>4. rgba() 和 opacity 设置透明度的区别是什么？</h2><p>rgba() 和 opacity 都能实现透明效果，但最大的不同是 opacity 作用于元素，以及元素内的所有内容的透明度；而 rgba() 只作用于元素的颜色或其背景色，设置 rgba() 透明的元素的子元素不会继承透明效果。</p>\n<h2 id=\"5-浏览器是如何解析-css-选择器的？\"><a href=\"#5-浏览器是如何解析-css-选择器的？\" class=\"headerlink\" title=\"5. 浏览器是如何解析 css 选择器的？\"></a>5. 浏览器是如何解析 css 选择器的？</h2><p><code>从右向左解析的。</code>若从左向右匹配，发现不符合规则，需要回溯，会损失很多性能。若从右向左匹配，先找到所有的最后节点，对于每一个节点，向上寻找其父节点直到查找至根元素或满足条件的匹配规则，则结束这个分支的遍历。</p>\n<p>在 css 解析完毕后，需将解析结果 css 规则树和 DOM Tree 一起进行分析建立一颗 Render Tree，最终用来进行绘图。</p>\n<h2 id=\"6-display-none-和-visibility-hidden-两者的区别\"><a href=\"#6-display-none-和-visibility-hidden-两者的区别\" class=\"headerlink\" title=\"6. display: none 和 visibility: hidden 两者的区别\"></a>6. display: none 和 visibility: hidden 两者的区别</h2><ol>\n<li>display: none 隐藏后不占用文档流；而 visibility: hidden 会占用文档流。</li>\n<li>visibility 具有继承性，给父元素设置 “visibility: hidden”，子元素也会继承该属性，但如果重新给子元素设置 “visibility: visible”，则子元素又会显示出来。</li>\n<li>visibility: hidden 不会影响计数器的计数，虽然隐藏了，但计数器依然运行着。</li>\n<li>在 css3 中 transition 支持 visibility 属性，但不支持 display。因为 transition 可以延迟执行，因此配合 visibility 使用纯 css 延时显示效果可以提高用户体验。</li>\n<li>display: none 会引起回流（重排）和重绘；visibility: hidden 会引起重绘。</li>\n</ol>\n<h2 id=\"7-简述-transform，transition，animation-的作用\"><a href=\"#7-简述-transform，transition，animation-的作用\" class=\"headerlink\" title=\"7. 简述 transform，transition，animation 的作用\"></a>7. 简述 transform，transition，animation 的作用</h2><ol>\n<li><code>transform</code>：描述了元素的静态样式，本身不会呈现动画效果，可以对元素进行旋转 rotate、扭曲 skew、缩放 scale 和移动 translate 以及矩阵变形 matrix。<code>transition</code> 和 <code>animation</code> 两者都能实现动画效果。<code>transform</code> 常配合<code>transition</code> 和 <code>animation</code> 使用。</li>\n<li><code>transition</code>：样式过渡，从一种效果逐渐改变为另一种效果，它是一个合写属性。transition: transition-property  transition-duration  transition-timing-function  transition-delay 从左到右，依次是：过渡效果的css属性名称、过渡效果花费时间、速度曲线、过渡开始的延迟时间  <code>transition</code> 通常和 hover 等事件配合使用，需要由事件来触发过渡。</li>\n<li><code>animation</code>：动画，有 <code>@keyframes</code> 来描述每一帧的样式。</li>\n</ol>\n<p>区别：</p>\n<ul>\n<li><code>transform</code> 仅描述元素的静态样式，常配合<code>transition</code> 和 <code>animation</code> 使用。</li>\n<li><code>transition</code> 通常和 hover 等事件配合使用；<code>animation</code> 是自发的，立即播放。</li>\n<li><code>animation</code> 可以设置循环次数。</li>\n<li><code>animation</code> 可以设置每一帧的样式和时间，<code>transition</code> 只能设置头尾。</li>\n<li><code>transition</code> 可以与 js 配合使用， js 设定要变化的样式，<code>transition</code> 负责动画效果。</li>\n</ul>\n<h2 id=\"8-line-height-如何继承？\"><a href=\"#8-line-height-如何继承？\" class=\"headerlink\" title=\"8. line-height 如何继承？\"></a>8. line-height 如何继承？</h2><ul>\n<li>父元素的 <code>line-height</code> 是具体数值，则子元素 <code>line-height</code> 继承该值。</li>\n<li>父元素的 <code>line-height</code> 是比例值，如’2’，则子元素 <code>line-height</code> 继承该比例。</li>\n<li>父元素的 <code>line-height</code> 是百分比，则子元素 <code>line-height</code> 继承的是父元素的 font-size * 百分比 计算出来的值。</li>\n</ul>\n<h2 id=\"9-如何让-chrome-支持-10px-的文字？\"><a href=\"#9-如何让-chrome-支持-10px-的文字？\" class=\"headerlink\" title=\"9. 如何让 chrome 支持 10px 的文字？\"></a>9. 如何让 chrome 支持 10px 的文字？</h2><ol>\n<li>font-size: 12px; -webkit-transform: scale(0.84);</li>\n<li>font-size: 20px; -webkit-transform: scale(0.5);</li>\n</ol>\n<h2 id=\"10-position-属性的值有哪些？\"><a href=\"#10-position-属性的值有哪些？\" class=\"headerlink\" title=\"10. position 属性的值有哪些？\"></a>10. position 属性的值有哪些？</h2><ol>\n<li><code>static</code>：默认定位。元素出现在正常的文档流中（忽略top，bottom，left，right 或 z-index声明）</li>\n<li><code>relative</code>：相对定位。如果对一个元素进行相对定位，将出现在它所在的位置上。然后，可以通过设置垂直或水平位置，使其“相对于”它的起点进行移动。使用相对定位时，无论是否移动，元素仍然占据原来的空间；移动元素会导致其覆盖其他元素。</li>\n<li><code>absolute</code>：绝对定位。元素的位置相对于最近的已定位的父元素，如果元素没有已定位的父元素，则相对于根元素（即 html 元素）定位。绝对定位的元素会脱离文档流，不占据空间，会与其他元素重叠。</li>\n<li><code>fixed</code>：固定定位。元素的位置相对于浏览器窗口是固定位置，即使窗口滚动它也不会移动。固定定位的元素会脱离文档流，不占据空间，会与其他元素重叠。</li>\n<li><code>sticky</code>：粘性定位。粘性定位可以被认为是相对定位和固定定位的混合，元素在跨越特定阈值前为相对定位，之后为固定定位。top，right，buttom，left，必须指定这四个阈值中的一个，才可以使粘性定位生效，否则行为与其相对定位相同。</li>\n<li><code>inherit</code>：规定应该从父元素继承 position 属性的值。</li>\n</ol>\n<h2 id=\"11-css-盒模型？\"><a href=\"#11-css-盒模型？\" class=\"headerlink\" title=\"11. css 盒模型？\"></a>11. css 盒模型？</h2><ul>\n<li><code>标准盒模型</code>，width 指 content 部分的宽度，总宽度 = width + border(左右) + padding（左右）+ margin（左右）；高度同理。</li>\n<li><code>怪异盒模型（IE盒模型）</code>，width 指 content + border（左右） + padding（左右）三部分的宽度，因此，总宽度 = width + margin（左右）；高度同理。</li>\n</ul>\n<h2 id=\"12-box-sizing-属性\"><a href=\"#12-box-sizing-属性\" class=\"headerlink\" title=\"12. box-sizing 属性\"></a>12. box-sizing 属性</h2><ol>\n<li><code>content-box</code>，对应标准盒模型。</li>\n<li><code>border-box</code>，IE盒模型。</li>\n<li><code>inherit</code>，继承父元素的 box-sizing 值。</li>\n</ol>\n<h2 id=\"13-BFC（块级格式上下文）\"><a href=\"#13-BFC（块级格式上下文）\" class=\"headerlink\" title=\"13. BFC（块级格式上下文）\"></a>13. BFC（块级格式上下文）</h2><ol>\n<li>概念： BFC（Block Formatting Context），块级格式上下文。BFC 是 css 布局的一个概念，是一个独立的渲染区域，规定了内部 box 如何布局，且这个区域内的子元素不会影响到外面的元素。</li>\n<li>布局规则：</li>\n</ol>\n<ul>\n<li>内部的 box 会在垂直方向一个接一个的放置</li>\n<li>box 垂直方向的距离由 margin 决定，同一个 BFC 相邻的 box 的 margin 会发生重叠</li>\n<li>每个 box 的 margin 左边，与包含块的左 border 相接触（对于从左往右的格式化，否则相反）</li>\n<li>BFC 的区域不会与 float box 重叠</li>\n<li>BFC 是一个独立容器，容器内的子元素不会影响到外面的元素</li>\n<li>计算 BFC 高度时，浮动元素也参与计算高度</li>\n</ul>\n<ol>\n<li>如何创建 BFC ？</li>\n</ol>\n<ul>\n<li>根元素，即 html 元素</li>\n<li>float 值不为 none</li>\n<li>position 值为 absolute 或 fixed</li>\n<li>display 的值为 inline-block、tabl-cell、table-caption</li>\n<li>overflow 的值不为 visible</li>\n</ul>\n<ol>\n<li>BFC 的使用场景</li>\n</ol>\n<ul>\n<li>去除边距重叠问题</li>\n<li>清除浮动（让父元素的高度包含子浮动元素）</li>\n<li>阻止元素被浮动元素覆盖</li>\n</ul>\n<h2 id=\"14-让一个元素水平-垂直居中\"><a href=\"#14-让一个元素水平-垂直居中\" class=\"headerlink\" title=\"14. 让一个元素水平/垂直居中\"></a>14. 让一个元素水平/垂直居中</h2><ol>\n<li>水平居中</li>\n</ol>\n<ul>\n<li>行内元素：<code>text-align: center;</code></li>\n<li>对于确定宽度的块级元素<ul>\n<li>width 和 margin 实现： <code>mragin: 0 auto;</code></li>\n<li>绝对定位和 margin-left 实现： <code>margin-left: (父width - 子 width)/2；</code>(前提是父元素相对定位)</li>\n</ul>\n</li>\n<li>对于宽度未知的块级元素<ul>\n<li>table 标签配合 margin 左右 auto 实现</li>\n<li>inline-block 实现：<code>display: inline-block; text-align: center;</code></li>\n<li>绝对定位和 transform 实现， translateX 可以移动本身元素的50%</li>\n<li>flex 布局 <code>justify-content: center</code></li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>垂直居中</li>\n</ol>\n<ul>\n<li>纯文字类，设置 line-height 等于 height</li>\n<li>子绝父相，子元素通过 margin 实现自适应居中</li>\n<li>子绝父相，通过位移 transform 实现</li>\n<li>flex 布局，<code>align-items: center;</code></li>\n<li>table 布局，父级通过转换为表格形式，子级设置 vertical-align 实现</li>\n</ul>\n<h2 id=\"15-flex-布局\"><a href=\"#15-flex-布局\" class=\"headerlink\" title=\"15. flex 布局\"></a>15. flex 布局</h2><p>flex 布局，是一种弹性盒布局模型，给子元素提供了空间分布和对齐能力，由<code>container</code>（容器）及<code>item</code>（项目）组成。该布局模型提供了一种更加高效的方式来对容器中的项目进行布局、对齐和分配空间。适用于在不同尺寸的屏幕中创建可自动扩展和收缩布局，通常可用于<code>水平/垂直居中</code>，<code>两栏</code>、<code>三栏布局</code>等的场景里。</p>\n<p>其中<code>flex</code>属性是<code>flex-grow</code>，<code>flex-shrink</code>和<code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。<strong>该属性有两个快捷值：<code>auto (1 1 auto)</code> 和 <code>none (0 0 auto)</code>。</strong></p>\n<ul>\n<li><code>flex-grow</code>：定义项目的放大比例，默认值为 0，即如果存在剩余空间，也不放大。如果所有项目的<code>flex-grow</code>属性都为 1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</li>\n<li><code>flex-shrink</code>：项目的缩小比例，默认为 1，即如果空间不足，项目将缩小。如果所有项目的<code>flex-shrink</code>属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为 0，其他项目都为 1，则空间不足时，前者不缩小。</li>\n<li><code>flex-basis</code>：定义了在分配多余空间之前，项目占据的主轴空间。浏览器会根据该属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小。当设置为 0 的是，会根据内容撑开。也可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如 350px），则项目将占据固定空间。</li>\n</ul>\n<p><code>flex</code>常用的属性值：</p>\n<ul>\n<li>flex: 1 –&gt; flex: 1 1 0%</li>\n<li>flex: 2 –&gt; flex: 2 1 0%</li>\n<li>flex: auto –&gt; flex: 1 1 auto</li>\n<li>flex: none –&gt; flex: 0 0 auto【常用于固定尺寸不伸缩】</li>\n</ul>\n<h2 id=\"16-清除浮动\"><a href=\"#16-清除浮动\" class=\"headerlink\" title=\"16. 清除浮动\"></a>16. 清除浮动</h2><ol>\n<li><p>直接把 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>作为最后一个子标签</p>\n<ul>\n<li>优点：通俗易懂，容易掌握；</li>\n<li>缺点：会添加较多无意义的空标签，有违结构与表现的分离，在后期维护中将是噩梦</li>\n</ul>\n</li>\n<li><p>.clearfix { overflow: hidden; zoom: 1; }</p>\n<ul>\n<li>优点：不存在结构和语义化问题，代码量极少</li>\n<li>缺点：内容增多时容易造成不自动换行，导致内容被隐藏掉，无法显示需要溢出的元素</li>\n</ul>\n</li>\n<li><p>建立伪类选择器</p>\n</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/98e2353e3275475095bd26ecedfa32e9%7Etplv-k3u1fbpfcp-zoom-in-crop-mark%3A1512%3A0%3A0%3A0.awebp\" alt=\"image.png\"></p>\n<h2 id=\"17-css-中优雅降级和渐进增强有什么区别？\"><a href=\"#17-css-中优雅降级和渐进增强有什么区别？\" class=\"headerlink\" title=\"17. css 中优雅降级和渐进增强有什么区别？\"></a>17. css 中优雅降级和渐进增强有什么区别？</h2><p>优雅降级和渐进增强是随着 css3 流出来的一个概念。由于低级浏览器不支持 css3， 但 css3 的效果又很优秀不忍放弃，所以在高级浏览器中使用 css3 ，而在低级浏览器只保证最基本的功能。二者最关键的区别是它们所侧重的内容，以及这种不同所造成的工作流程的差异。</p>\n<ul>\n<li><code>优雅降级</code>：一开始就构建完整的功能，然后针对浏览器测试和修复。</li>\n<li><code>渐进增强</code>：一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能以达到更好的体验。</li>\n</ul>\n<h2 id=\"18-img-的-alt-和-title-的异同？实现图片懒加载的原理？\"><a href=\"#18-img-的-alt-和-title-的异同？实现图片懒加载的原理？\" class=\"headerlink\" title=\"18. img 的 alt 和 title 的异同？实现图片懒加载的原理？\"></a>18. img 的 alt 和 title 的异同？实现图片懒加载的原理？</h2><ul>\n<li><code>alt</code>是图片加载失败时显示在网页上的替代文字；<code>title</code>是鼠标放在图片上面时显示的文字，是对图片的进一步描述和说明。</li>\n<li><code>alt</code>是 img 的必要属性；<code>title</code>不是。</li>\n<li>对于网站 SEO 优先来说，搜索引擎对图片意思的判断，主要是靠<code>alt</code>属性，所以在图片<code>alt</code>属性中以简要文字说明，同时包含关键字，也是页面优化的一部分。</li>\n</ul>\n<p><code>懒加载原理</code>：先设置图片的 <code>data-set</code> 属性值（也可以是其他任意的，只要不发生 http 请求就可以，作用是为了存取值）为图片路径，由于不是 <code>src</code> 属性，故不会发生 http 请求。然后计算出页面的 scrollTop 的高度和浏览器的高度之和，如果图片距页面顶端距离小于前两者之和，说明图片要显示出来了，这时将 <code>data-set</code> 属性替换为 <code>src</code> 属性即可。</p>\n<h2 id=\"19-css-sprites-（雪碧图-精灵图）\"><a href=\"#19-css-sprites-（雪碧图-精灵图）\" class=\"headerlink\" title=\"19. css sprites （雪碧图/精灵图）\"></a>19. css sprites （雪碧图/精灵图）</h2><p>css sprites 就是把网页中一些小图片整合到一张图片文件中，再利用 css 的 background-image、background-repeat、background-position 的组合进行背景定位。</p>\n<p>优点： 减少图片体积；减少 http 请求次数</p>\n<p>缺点：维护比较麻烦；不能随便改变大小，会失真模糊</p>\n<h2 id=\"20-什么是字体图标？\"><a href=\"#20-什么是字体图标？\" class=\"headerlink\" title=\"20. 什么是字体图标？\"></a>20. 什么是字体图标？</h2><p>字体图标简单的说，就是一种特殊的字体，通过这种字体，显示给用户的就像一个个图片一样。字体图标最大的好处，在于它不会变形和加载速度快。字体图标可以像文字一样，随意通过 css 来控制它的大小和颜色，非常方便。</p>\n<h2 id=\"21-主流浏览器内核私有属性-css-前缀？\"><a href=\"#21-主流浏览器内核私有属性-css-前缀？\" class=\"headerlink\" title=\"21. 主流浏览器内核私有属性 css 前缀？\"></a>21. 主流浏览器内核私有属性 css 前缀？</h2><ul>\n<li>mozilla(firefox、flock等): -moz</li>\n<li>webkit 内核(safari、chrome等): -webkit</li>\n<li>opera 内核(opera浏览器): -o</li>\n<li>trident 内核(ie 浏览器): -ms</li>\n</ul>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"excerpt":"<p>JS复习记录</p>","more":"<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1><h2 id=\"1-语义化\"><a href=\"#1-语义化\" class=\"headerlink\" title=\"1. 语义化\"></a>1. 语义化</h2><ol>\n<li><p>语义化，指对文本内容的结构化（内容语义化），选择合乎语义的标签（代码语义化）。</p>\n</li>\n<li><p>语义化标签：<code>header</code>、<code>nav</code>、<code>main</code>、<code>article</code>、<code>section</code>、<code>aside</code>、<code>footer</code>等。</p>\n</li>\n<li><p>优点：</p>\n<ul>\n<li>代码结构清晰，易于阅读，有利于维护</li>\n<li>方便其他设备解析（如：屏幕阅读器）</li>\n<li>有利于搜索引擎优化（SEO），搜索引擎爬虫会根据不同的标签来赋予不同的权重</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-script-标签中属性-async-和-defer-的区别？\"><a href=\"#2-script-标签中属性-async-和-defer-的区别？\" class=\"headerlink\" title=\"2. script 标签中属性 async 和 defer 的区别？\"></a>2. script 标签中属性 async 和 defer 的区别？</h2><ul>\n<li><code>script</code> 会阻碍 HTML 解析，只有下载好并执行完脚本才会继续解析 HTML</li>\n<li><code>async script</code>：解析 HTML 的过程中会进行脚本的异步下载，下载成功后立马执行，因此有可能会阻断 HTML 的解析。多个脚本的执行顺序无法保证。</li>\n<li><code>defer script</code>：也是异步下载脚步，加载完成后，如果此时 HTML 还没有解析完，浏览器不会暂停解析去执行 JS 代码，而是等待 HTML 解析完毕再执行 JS 代码，如果存在多个 <code>defer script </code>标签，浏览器（IE9及以下除外）会保证它们按照在 HTML 中出现的顺序执行，不会破坏 JS 脚本之间的依赖关系。</li>\n</ul>\n<h2 id=\"3-DOCTYPE-的作用是什么？\"><a href=\"#3-DOCTYPE-的作用是什么？\" class=\"headerlink\" title=\"3. DOCTYPE 的作用是什么？\"></a>3. DOCTYPE 的作用是什么？</h2><p><code>&lt;!DOCTYE&gt;</code> 声明一般位于文档的第一行，它的作用主要是告诉浏览器以什么样的模式来解析文档。一般指定了之后会以“标准模式”进行文档解析，否则就以“兼容模式”进行解析。</p>\n<ul>\n<li>在<code>标准模式</code>下，浏览器的解析规则都是按照最新的标准进行解析的。</li>\n<li>而在<code>兼容模式</code>下，浏览器会以向后兼容的方式来模拟老式浏览器的行为，以保证一些老的网站能正常访问。</li>\n</ul>\n<h2 id=\"4-SGML、HTML、XML-和-XHTML的区别\"><a href=\"#4-SGML、HTML、XML-和-XHTML的区别\" class=\"headerlink\" title=\"4. SGML、HTML、XML 和 XHTML的区别\"></a>4. SGML、HTML、XML 和 XHTML的区别</h2><ul>\n<li><code>SGML</code> 是标准通用标记语言，是一种定义电子文档结构和描述其内容的国际标准语言，是所有电子文档标记语言的起源。</li>\n<li><code>HTML</code> 是超文本标记语言，主要是用于规定怎样显示网页。</li>\n<li><code>XML</code> 是可扩展标记语言，是未来网页语言的发展方向，XML 和 HTML 的最大区别就在于 XML 的标签是可以自己创建的，数量无限多，而 HTML 的标签都是固定的而且数量有限。</li>\n<li><code>XHTML</code> 也是现在基本上所有网页都在用的标记语言，他其实和 HTML 没什么本质的区别，标签都一样，用法也都一样，就是比 HTML 更严格，比如标签必须都用小写，标签都必须有闭合标签等。</li>\n</ul>\n<h2 id=\"5-HTML5-有哪些新特性、移除了哪些元素？\"><a href=\"#5-HTML5-有哪些新特性、移除了哪些元素？\" class=\"headerlink\" title=\"5. HTML5 有哪些新特性、移除了哪些元素？\"></a>5. HTML5 有哪些新特性、移除了哪些元素？</h2><p>HTML5 现在已经不是 SGML 的子集，主要是关于图像、位置、存储、多任务等功能的增加。</p>\n<p>新增的：</p>\n<ul>\n<li>绘图 <code>canvas</code></li>\n<li>用于媒介回放的 <code>video</code> 和 <code>audio</code> 元素</li>\n<li>本地离线存储 <code>localStorage</code> 、<code>sessionStorage</code></li>\n<li>语义化更好的内容元素，如：<code>header</code>、<code>article</code>、<code>nav</code>、<code>section</code>、<code>footer</code>等</li>\n<li>表单控件 <code>calendar</code>、<code>date</code>、<code>time</code>、<code>email</code>、<code>url</code>、<code>search</code> 等</li>\n<li>新的技术 <code>webworker</code>、<code>websocket</code></li>\n<li>新的文档属性 <code>document.visibilityState</code></li>\n</ul>\n<p>移除的：</p>\n<ul>\n<li>纯表现的元素：<code>basefont</code>、<code>big</code>、<code>center</code>、<code>s</code>、<code>tt</code>、<code>u</code></li>\n<li>对可用性产生负面影响的元素：<code>frame</code>、<code>frameset</code>、<code>noframes</code></li>\n</ul>\n<h2 id=\"6-对浏览器内核的理解\"><a href=\"#6-对浏览器内核的理解\" class=\"headerlink\" title=\"6. 对浏览器内核的理解\"></a>6. 对浏览器内核的理解</h2><p>主要分为两部分：渲染引擎和JS引擎。</p>\n<ul>\n<li><code>渲染引擎</code>：其职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 HTML、 XML 文档及图片，它也可以借助一些浏览器扩展插件显示其他类型数据，如：使用PDF阅读器插件可以显示 PDF 格式。</li>\n<li><code>JS引擎</code>：解析和执行 JavaScript 来实现网页的动态效果。</li>\n</ul>\n<p>最开始渲染引擎和JS引擎并没有区分的很明显，后来JS引擎越来越独立，内核就倾向于只指渲染引擎了</p>\n<h2 id=\"7-什么是文档的预解析？\"><a href=\"#7-什么是文档的预解析？\" class=\"headerlink\" title=\"7. 什么是文档的预解析？\"></a>7. 什么是文档的预解析？</h2><p>当执行 JavaScript 脚本时，另一个线程解析剩下的文档，并加载后面需要通过网络加载的资源。这种方式可以使资源并行加载，从而使整体速度更快。</p>\n<p>需要注意的是，预解析并不改变DOM树，它将这个工作交给主解析过程，自己只解析外部资源的引用，比如：外部脚本、样式及图片。</p>\n<h2 id=\"8-浏览器的渲染原理\"><a href=\"#8-浏览器的渲染原理\" class=\"headerlink\" title=\"8. 浏览器的渲染原理\"></a>8. 浏览器的渲染原理</h2><p>简记： 生成DOM树 –&gt; 生成CSS规则树 –&gt; 构建渲染树 –&gt; 布局 –&gt; 绘制</p>\n<ol>\n<li>首先解析收到的文档，根据文档定义构建一颗 <code>DOM 树</code>，DOM 树是由 DOM 元素及属性节点组成的。</li>\n<li>然后对 CSS 进行解析，生成一颗 <code>CSS 规则树</code>。</li>\n<li>根据 DOM 树和 CSS 规则树构建<code>渲染树</code>。渲染树的节点被称为渲染对象，它是一个包含有颜色等属性的矩形。渲染对象和 DOM 元素相对应，但这种关系不是一对一的，不可见的 DOM 元素不会插入渲染树。还有一些 DOM 元素对应几个可见对象，它们一般是一些具有复杂结构的元素，无法用一个矩形来描述。</li>\n<li>当渲染对象被创建并添加到树中，它们没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行<code>布局</code>（也可以叫做回流）。这一阶段浏览器要做的是计算出各个节点在页面中确切位置和大小。通常这一行为也被称为自动重排。</li>\n<li>布局阶段结束后是<code>绘制</code>阶段，遍历渲染树并调用渲染对象的 paint 方法将它们的内容显示到屏幕上。值得注意的是，这个过程是逐步完成的，为了更好的用户体验，渲染引擎会尽早的将内容呈现到屏幕上，并不会等到所有 HMTL 内容都解析完之后再去构建和布局渲染树，它是解析完一部分内容就显示一部分内容，同时，可能还通过网络下载其余内容。</li>\n</ol>\n<h2 id=\"9-什么是回流和重绘？\"><a href=\"#9-什么是回流和重绘？\" class=\"headerlink\" title=\"9. 什么是回流和重绘？\"></a>9. 什么是回流和重绘？</h2><p>1.概念：</p>\n<ul>\n<li><code>回流</code>：当 DOM 的变化影响了元素的几何信息，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做回流（也可以叫做重排）。表现为重新生成布局，重新排列元素。</li>\n<li><code>重绘</code>：当一个元素的外观发生改变，重新把元素外观绘制出来的过程，叫做重绘。表现为某些元素的外观被改变。</li>\n</ul>\n<p>2.常见引起回流和重绘的属性和方法：</p>\n<p>任何会改变元素几何信息（元素的位置和尺寸大小）的操作都会触发回流。</p>\n<ul>\n<li>添加或删除可见的 DOM 元素</li>\n<li>元素尺寸改变–边距、填充、宽度、高度</li>\n<li>浏览器尺寸改变– resize 事件发生时</li>\n<li>计算 offsetWidth 和 offsetHeight 属性</li>\n<li>设置 style 属性的值</li>\n<li>修改网页默认字体</li>\n</ul>\n<p><strong>回流必定会发生重绘，重绘不一定会引发回流。</strong></p>\n<p><strong>回流所需的成本比重绘高得多</strong></p>\n<p>建议阅读文章：<a href=\"https://juejin.cn/post/6844903779700047885\">你真的了解回流和重绘吗</a></p>\n<h2 id=\"10-如何减少回流？\"><a href=\"#10-如何减少回流？\" class=\"headerlink\" title=\"10. 如何减少回流？\"></a>10. 如何减少回流？</h2><ul>\n<li>使用 transform 代替 top</li>\n<li>不要把节点的属性值放在一个循环里，当成循环里的变量</li>\n<li>不要使用 table 布局，可能很小的一个改动会造成整个 table 的重新布局</li>\n<li>把 DOM 离线后修改。如：使用 documentFragment 对象在内存里操作 DOM</li>\n<li>不要一条一条的修改样式，可以预先定义好 class，然后修改 DOM 的 className</li>\n<li>使用 absolute 或 fixed 使元素脱离文档流</li>\n</ul>\n<h2 id=\"11-sessionStorage，localStorage-和-cookie-的区别\"><a href=\"#11-sessionStorage，localStorage-和-cookie-的区别\" class=\"headerlink\" title=\"11. sessionStorage，localStorage 和 cookie 的区别\"></a>11. sessionStorage，localStorage 和 cookie 的区别</h2><ol>\n<li>共同点：都是保存在浏览器端，且同源的</li>\n<li>区别:</li>\n</ol>\n<ul>\n<li>cookie 始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器和服务器之间来回传递；而 sessionStorage 和 localStorage 不会自动把数据发送到服务器，仅在本地保存。cookie 还有路径（path）的概念，可以限制 cookie 只属于某个路径下。</li>\n<li>存储大小限制不同。cookie 不能超过 4K，因为每次 http 请求都会携带 cookie，所以 cookie 只适合保存很小的数据，如：会话标识。sessionStorage 和 localStorage 虽然也有存储大小限制，但比 cookie 大得多，可以达到 5M 或更大。</li>\n<li>数据有效期不同。sessionStorage 仅在当前浏览器窗口关闭之前有效；localStorage 始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie 只在设置的 cookie 过期时间之前有效。</li>\n<li>作用域不同。sessionStorage 不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 和 cookie 在所有同源窗口中都是共享的。</li>\n</ul>\n<h2 id=\"12-iframe-有哪些优缺点？\"><a href=\"#12-iframe-有哪些优缺点？\" class=\"headerlink\" title=\"12. iframe 有哪些优缺点？\"></a>12. iframe 有哪些优缺点？</h2><p>优点：</p>\n<ol>\n<li>iframe 能原封不动的把嵌入的网页展现出来。</li>\n<li>如果有多个网页引用 iframe，只需修改 iframe 的内容，就可以实现调用每一个页面的更改，方便快捷。</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>iframe 会阻塞主页面的 onload 事件。</li>\n<li>iframe 和主页面共享链接池，而浏览器对相同域的链接有限制，所以会影响页面的并行加载。</li>\n<li>不利于 SEO，代码复杂，无法一下被搜索引擎索引到。</li>\n<li>iframe 框架页面会增加服务器的 http 请求，对于大型网站不可取。</li>\n<li>很多移动设备无法完全显示框架，设备兼容性差。</li>\n</ol>\n<p>注意：通过动态给 iframe 添加 src 属性值，可解决前两个问题。</p>\n<h2 id=\"13-什么是-canvas，基本用法是什么？\"><a href=\"#13-什么是-canvas，基本用法是什么？\" class=\"headerlink\" title=\"13. 什么是 canvas，基本用法是什么？\"></a>13. 什么是 canvas，基本用法是什么？</h2><p>canvas 元素是 HTML5 的一部分，允许脚步语言动态渲染位图像。canvas 由一个可控制区域 HTML 代码中的属性定义决定高度和宽度。JavaScript 代码可以访问该区域，通过一套完整的绘图功能类似于其他通用二维的 API，从而生成动态的图形。</p>\n<ol>\n<li>创建 canvas 标签</li>\n</ol>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arduino</span><br><span class=\"line\">复制代码&lt;canvas id=<span class=\"string\">&quot;myCanvas&quot;</span> width=<span class=\"string\">&quot;150&quot;</span> height=<span class=\"string\">&quot;150&quot;</span>&gt;该浏览器不支持canvas&lt;/canvas&gt;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>渲染上下文</li>\n</ol>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ini复制代码var <span class=\"attr\">canvas</span> = document.getElementById(<span class=\"string\">&#x27;myCanvas&#x27;</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">var <span class=\"attr\">ctx</span> = canvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<p>代码第一行通过使用 <code>document.getElementById()</code> 方法获取 <code>&lt;canvas&gt;</code> 元素对应的 DOM 对象，然后可以通过使用它的 <code>getContext()</code> 方法来绘制上下文。 创建 canvas 标签时可以在标签内写上不支持的提示信息；也可以通过 <code>getContext()</code> 方法判读是否支持编程。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ini复制代码var <span class=\"attr\">canvas</span> = document.getElementById(<span class=\"string\">&#x27;myCanvas&#x27;</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">if (canvas.getContext) &#123;</span><br><span class=\"line\">  var <span class=\"attr\">ctx</span> = canvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">  // other code</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  // 不支持 canvas 的其他代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用途：</p>\n<p>canvas 可用于游戏和图表（echarts.js、heightchart.js 都是基于 canvas 来绘图）制作。</p>\n<h1 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h1><h2 id=\"1-css3-有哪些新特性？\"><a href=\"#1-css3-有哪些新特性？\" class=\"headerlink\" title=\"1. css3 有哪些新特性？\"></a>1. css3 有哪些新特性？</h2><ul>\n<li>rgba 和 透明度</li>\n<li>background-image、background-origin、background-size、background-repeat</li>\n<li>word-wrap: break-word（对长的不可分割的单词换行）</li>\n<li>文字阴影 text-shadow</li>\n<li>font-face属性，定义自己的字体</li>\n<li>border-radius</li>\n<li>边框图片 border-image</li>\n<li>盒阴影 box-shadow</li>\n<li>媒体查询：定义多套 css，当浏览器尺寸发生变化时采用不同的属性</li>\n</ul>\n<h2 id=\"2-style-标签写在-body-后与-body-前有什么区别？\"><a href=\"#2-style-标签写在-body-后与-body-前有什么区别？\" class=\"headerlink\" title=\"2. style 标签写在 body 后与 body 前有什么区别？\"></a>2. style 标签写在 body 后与 body 前有什么区别？</h2><ol>\n<li>写在 body 标签前有利于浏览器逐步渲染： resources downloading –&gt; cssDOM + DOM –&gt; Render Tree –&gt; layout –&gt; paint</li>\n<li>写在 body 标签后： 由于浏览器以逐行方式对 HTML 文档进行解析，当解析到写在尾部的样式表（外联或写在 style 标签）会导致浏览器停止之前的渲染，等待加载且解析样式完成后重新渲染；在 windows 的 IE 下可能出现样式失效导致的页面闪烁问题。</li>\n</ol>\n<h2 id=\"3-CSS选择器及优先级\"><a href=\"#3-CSS选择器及优先级\" class=\"headerlink\" title=\"3. CSS选择器及优先级\"></a>3. CSS选择器及优先级</h2><ol>\n<li>选择器<ul>\n<li>id选择器(#myid)</li>\n<li>类选择器(.myclass)</li>\n<li>属性选择器(a[rel=”external”])</li>\n<li>伪类选择器(a:hover, li:nth-child)</li>\n<li>标签选择器(div, h1, p)</li>\n<li>伪元素选择器(p::first-line)</li>\n<li>相邻选择器（h1 + p）</li>\n<li>子选择器(ul &gt; li)</li>\n<li>后代选择器(li a)</li>\n<li>通配符选择器(*)</li>\n</ul>\n</li>\n<li>优先级<ul>\n<li><code>!important</code></li>\n<li>内联样式（1000）</li>\n<li>ID选择器（0100）</li>\n<li>类选择器 / 属性选择器 / 伪类选择器（0010）</li>\n<li>标签选择器 / 伪元素选择器（0001）</li>\n<li>关系选择器 / 通配符选择器（0000）</li>\n</ul>\n</li>\n</ol>\n<p>带 !important 标记的样式属性优先级最高；样式表的来源相同时：<code>!important &gt; 行内样式&gt; ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</code></p>\n<h2 id=\"4-rgba-和-opacity-设置透明度的区别是什么？\"><a href=\"#4-rgba-和-opacity-设置透明度的区别是什么？\" class=\"headerlink\" title=\"4. rgba() 和 opacity 设置透明度的区别是什么？\"></a>4. rgba() 和 opacity 设置透明度的区别是什么？</h2><p>rgba() 和 opacity 都能实现透明效果，但最大的不同是 opacity 作用于元素，以及元素内的所有内容的透明度；而 rgba() 只作用于元素的颜色或其背景色，设置 rgba() 透明的元素的子元素不会继承透明效果。</p>\n<h2 id=\"5-浏览器是如何解析-css-选择器的？\"><a href=\"#5-浏览器是如何解析-css-选择器的？\" class=\"headerlink\" title=\"5. 浏览器是如何解析 css 选择器的？\"></a>5. 浏览器是如何解析 css 选择器的？</h2><p><code>从右向左解析的。</code>若从左向右匹配，发现不符合规则，需要回溯，会损失很多性能。若从右向左匹配，先找到所有的最后节点，对于每一个节点，向上寻找其父节点直到查找至根元素或满足条件的匹配规则，则结束这个分支的遍历。</p>\n<p>在 css 解析完毕后，需将解析结果 css 规则树和 DOM Tree 一起进行分析建立一颗 Render Tree，最终用来进行绘图。</p>\n<h2 id=\"6-display-none-和-visibility-hidden-两者的区别\"><a href=\"#6-display-none-和-visibility-hidden-两者的区别\" class=\"headerlink\" title=\"6. display: none 和 visibility: hidden 两者的区别\"></a>6. display: none 和 visibility: hidden 两者的区别</h2><ol>\n<li>display: none 隐藏后不占用文档流；而 visibility: hidden 会占用文档流。</li>\n<li>visibility 具有继承性，给父元素设置 “visibility: hidden”，子元素也会继承该属性，但如果重新给子元素设置 “visibility: visible”，则子元素又会显示出来。</li>\n<li>visibility: hidden 不会影响计数器的计数，虽然隐藏了，但计数器依然运行着。</li>\n<li>在 css3 中 transition 支持 visibility 属性，但不支持 display。因为 transition 可以延迟执行，因此配合 visibility 使用纯 css 延时显示效果可以提高用户体验。</li>\n<li>display: none 会引起回流（重排）和重绘；visibility: hidden 会引起重绘。</li>\n</ol>\n<h2 id=\"7-简述-transform，transition，animation-的作用\"><a href=\"#7-简述-transform，transition，animation-的作用\" class=\"headerlink\" title=\"7. 简述 transform，transition，animation 的作用\"></a>7. 简述 transform，transition，animation 的作用</h2><ol>\n<li><code>transform</code>：描述了元素的静态样式，本身不会呈现动画效果，可以对元素进行旋转 rotate、扭曲 skew、缩放 scale 和移动 translate 以及矩阵变形 matrix。<code>transition</code> 和 <code>animation</code> 两者都能实现动画效果。<code>transform</code> 常配合<code>transition</code> 和 <code>animation</code> 使用。</li>\n<li><code>transition</code>：样式过渡，从一种效果逐渐改变为另一种效果，它是一个合写属性。transition: transition-property  transition-duration  transition-timing-function  transition-delay 从左到右，依次是：过渡效果的css属性名称、过渡效果花费时间、速度曲线、过渡开始的延迟时间  <code>transition</code> 通常和 hover 等事件配合使用，需要由事件来触发过渡。</li>\n<li><code>animation</code>：动画，有 <code>@keyframes</code> 来描述每一帧的样式。</li>\n</ol>\n<p>区别：</p>\n<ul>\n<li><code>transform</code> 仅描述元素的静态样式，常配合<code>transition</code> 和 <code>animation</code> 使用。</li>\n<li><code>transition</code> 通常和 hover 等事件配合使用；<code>animation</code> 是自发的，立即播放。</li>\n<li><code>animation</code> 可以设置循环次数。</li>\n<li><code>animation</code> 可以设置每一帧的样式和时间，<code>transition</code> 只能设置头尾。</li>\n<li><code>transition</code> 可以与 js 配合使用， js 设定要变化的样式，<code>transition</code> 负责动画效果。</li>\n</ul>\n<h2 id=\"8-line-height-如何继承？\"><a href=\"#8-line-height-如何继承？\" class=\"headerlink\" title=\"8. line-height 如何继承？\"></a>8. line-height 如何继承？</h2><ul>\n<li>父元素的 <code>line-height</code> 是具体数值，则子元素 <code>line-height</code> 继承该值。</li>\n<li>父元素的 <code>line-height</code> 是比例值，如’2’，则子元素 <code>line-height</code> 继承该比例。</li>\n<li>父元素的 <code>line-height</code> 是百分比，则子元素 <code>line-height</code> 继承的是父元素的 font-size * 百分比 计算出来的值。</li>\n</ul>\n<h2 id=\"9-如何让-chrome-支持-10px-的文字？\"><a href=\"#9-如何让-chrome-支持-10px-的文字？\" class=\"headerlink\" title=\"9. 如何让 chrome 支持 10px 的文字？\"></a>9. 如何让 chrome 支持 10px 的文字？</h2><ol>\n<li>font-size: 12px; -webkit-transform: scale(0.84);</li>\n<li>font-size: 20px; -webkit-transform: scale(0.5);</li>\n</ol>\n<h2 id=\"10-position-属性的值有哪些？\"><a href=\"#10-position-属性的值有哪些？\" class=\"headerlink\" title=\"10. position 属性的值有哪些？\"></a>10. position 属性的值有哪些？</h2><ol>\n<li><code>static</code>：默认定位。元素出现在正常的文档流中（忽略top，bottom，left，right 或 z-index声明）</li>\n<li><code>relative</code>：相对定位。如果对一个元素进行相对定位，将出现在它所在的位置上。然后，可以通过设置垂直或水平位置，使其“相对于”它的起点进行移动。使用相对定位时，无论是否移动，元素仍然占据原来的空间；移动元素会导致其覆盖其他元素。</li>\n<li><code>absolute</code>：绝对定位。元素的位置相对于最近的已定位的父元素，如果元素没有已定位的父元素，则相对于根元素（即 html 元素）定位。绝对定位的元素会脱离文档流，不占据空间，会与其他元素重叠。</li>\n<li><code>fixed</code>：固定定位。元素的位置相对于浏览器窗口是固定位置，即使窗口滚动它也不会移动。固定定位的元素会脱离文档流，不占据空间，会与其他元素重叠。</li>\n<li><code>sticky</code>：粘性定位。粘性定位可以被认为是相对定位和固定定位的混合，元素在跨越特定阈值前为相对定位，之后为固定定位。top，right，buttom，left，必须指定这四个阈值中的一个，才可以使粘性定位生效，否则行为与其相对定位相同。</li>\n<li><code>inherit</code>：规定应该从父元素继承 position 属性的值。</li>\n</ol>\n<h2 id=\"11-css-盒模型？\"><a href=\"#11-css-盒模型？\" class=\"headerlink\" title=\"11. css 盒模型？\"></a>11. css 盒模型？</h2><ul>\n<li><code>标准盒模型</code>，width 指 content 部分的宽度，总宽度 = width + border(左右) + padding（左右）+ margin（左右）；高度同理。</li>\n<li><code>怪异盒模型（IE盒模型）</code>，width 指 content + border（左右） + padding（左右）三部分的宽度，因此，总宽度 = width + margin（左右）；高度同理。</li>\n</ul>\n<h2 id=\"12-box-sizing-属性\"><a href=\"#12-box-sizing-属性\" class=\"headerlink\" title=\"12. box-sizing 属性\"></a>12. box-sizing 属性</h2><ol>\n<li><code>content-box</code>，对应标准盒模型。</li>\n<li><code>border-box</code>，IE盒模型。</li>\n<li><code>inherit</code>，继承父元素的 box-sizing 值。</li>\n</ol>\n<h2 id=\"13-BFC（块级格式上下文）\"><a href=\"#13-BFC（块级格式上下文）\" class=\"headerlink\" title=\"13. BFC（块级格式上下文）\"></a>13. BFC（块级格式上下文）</h2><ol>\n<li>概念： BFC（Block Formatting Context），块级格式上下文。BFC 是 css 布局的一个概念，是一个独立的渲染区域，规定了内部 box 如何布局，且这个区域内的子元素不会影响到外面的元素。</li>\n<li>布局规则：</li>\n</ol>\n<ul>\n<li>内部的 box 会在垂直方向一个接一个的放置</li>\n<li>box 垂直方向的距离由 margin 决定，同一个 BFC 相邻的 box 的 margin 会发生重叠</li>\n<li>每个 box 的 margin 左边，与包含块的左 border 相接触（对于从左往右的格式化，否则相反）</li>\n<li>BFC 的区域不会与 float box 重叠</li>\n<li>BFC 是一个独立容器，容器内的子元素不会影响到外面的元素</li>\n<li>计算 BFC 高度时，浮动元素也参与计算高度</li>\n</ul>\n<ol>\n<li>如何创建 BFC ？</li>\n</ol>\n<ul>\n<li>根元素，即 html 元素</li>\n<li>float 值不为 none</li>\n<li>position 值为 absolute 或 fixed</li>\n<li>display 的值为 inline-block、tabl-cell、table-caption</li>\n<li>overflow 的值不为 visible</li>\n</ul>\n<ol>\n<li>BFC 的使用场景</li>\n</ol>\n<ul>\n<li>去除边距重叠问题</li>\n<li>清除浮动（让父元素的高度包含子浮动元素）</li>\n<li>阻止元素被浮动元素覆盖</li>\n</ul>\n<h2 id=\"14-让一个元素水平-垂直居中\"><a href=\"#14-让一个元素水平-垂直居中\" class=\"headerlink\" title=\"14. 让一个元素水平/垂直居中\"></a>14. 让一个元素水平/垂直居中</h2><ol>\n<li>水平居中</li>\n</ol>\n<ul>\n<li>行内元素：<code>text-align: center;</code></li>\n<li>对于确定宽度的块级元素<ul>\n<li>width 和 margin 实现： <code>mragin: 0 auto;</code></li>\n<li>绝对定位和 margin-left 实现： <code>margin-left: (父width - 子 width)/2；</code>(前提是父元素相对定位)</li>\n</ul>\n</li>\n<li>对于宽度未知的块级元素<ul>\n<li>table 标签配合 margin 左右 auto 实现</li>\n<li>inline-block 实现：<code>display: inline-block; text-align: center;</code></li>\n<li>绝对定位和 transform 实现， translateX 可以移动本身元素的50%</li>\n<li>flex 布局 <code>justify-content: center</code></li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>垂直居中</li>\n</ol>\n<ul>\n<li>纯文字类，设置 line-height 等于 height</li>\n<li>子绝父相，子元素通过 margin 实现自适应居中</li>\n<li>子绝父相，通过位移 transform 实现</li>\n<li>flex 布局，<code>align-items: center;</code></li>\n<li>table 布局，父级通过转换为表格形式，子级设置 vertical-align 实现</li>\n</ul>\n<h2 id=\"15-flex-布局\"><a href=\"#15-flex-布局\" class=\"headerlink\" title=\"15. flex 布局\"></a>15. flex 布局</h2><p>flex 布局，是一种弹性盒布局模型，给子元素提供了空间分布和对齐能力，由<code>container</code>（容器）及<code>item</code>（项目）组成。该布局模型提供了一种更加高效的方式来对容器中的项目进行布局、对齐和分配空间。适用于在不同尺寸的屏幕中创建可自动扩展和收缩布局，通常可用于<code>水平/垂直居中</code>，<code>两栏</code>、<code>三栏布局</code>等的场景里。</p>\n<p>其中<code>flex</code>属性是<code>flex-grow</code>，<code>flex-shrink</code>和<code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。<strong>该属性有两个快捷值：<code>auto (1 1 auto)</code> 和 <code>none (0 0 auto)</code>。</strong></p>\n<ul>\n<li><code>flex-grow</code>：定义项目的放大比例，默认值为 0，即如果存在剩余空间，也不放大。如果所有项目的<code>flex-grow</code>属性都为 1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</li>\n<li><code>flex-shrink</code>：项目的缩小比例，默认为 1，即如果空间不足，项目将缩小。如果所有项目的<code>flex-shrink</code>属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为 0，其他项目都为 1，则空间不足时，前者不缩小。</li>\n<li><code>flex-basis</code>：定义了在分配多余空间之前，项目占据的主轴空间。浏览器会根据该属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小。当设置为 0 的是，会根据内容撑开。也可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如 350px），则项目将占据固定空间。</li>\n</ul>\n<p><code>flex</code>常用的属性值：</p>\n<ul>\n<li>flex: 1 –&gt; flex: 1 1 0%</li>\n<li>flex: 2 –&gt; flex: 2 1 0%</li>\n<li>flex: auto –&gt; flex: 1 1 auto</li>\n<li>flex: none –&gt; flex: 0 0 auto【常用于固定尺寸不伸缩】</li>\n</ul>\n<h2 id=\"16-清除浮动\"><a href=\"#16-清除浮动\" class=\"headerlink\" title=\"16. 清除浮动\"></a>16. 清除浮动</h2><ol>\n<li><p>直接把 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>作为最后一个子标签</p>\n<ul>\n<li>优点：通俗易懂，容易掌握；</li>\n<li>缺点：会添加较多无意义的空标签，有违结构与表现的分离，在后期维护中将是噩梦</li>\n</ul>\n</li>\n<li><p>.clearfix { overflow: hidden; zoom: 1; }</p>\n<ul>\n<li>优点：不存在结构和语义化问题，代码量极少</li>\n<li>缺点：内容增多时容易造成不自动换行，导致内容被隐藏掉，无法显示需要溢出的元素</li>\n</ul>\n</li>\n<li><p>建立伪类选择器</p>\n</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/98e2353e3275475095bd26ecedfa32e9%7Etplv-k3u1fbpfcp-zoom-in-crop-mark%3A1512%3A0%3A0%3A0.awebp\" alt=\"image.png\"></p>\n<h2 id=\"17-css-中优雅降级和渐进增强有什么区别？\"><a href=\"#17-css-中优雅降级和渐进增强有什么区别？\" class=\"headerlink\" title=\"17. css 中优雅降级和渐进增强有什么区别？\"></a>17. css 中优雅降级和渐进增强有什么区别？</h2><p>优雅降级和渐进增强是随着 css3 流出来的一个概念。由于低级浏览器不支持 css3， 但 css3 的效果又很优秀不忍放弃，所以在高级浏览器中使用 css3 ，而在低级浏览器只保证最基本的功能。二者最关键的区别是它们所侧重的内容，以及这种不同所造成的工作流程的差异。</p>\n<ul>\n<li><code>优雅降级</code>：一开始就构建完整的功能，然后针对浏览器测试和修复。</li>\n<li><code>渐进增强</code>：一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能以达到更好的体验。</li>\n</ul>\n<h2 id=\"18-img-的-alt-和-title-的异同？实现图片懒加载的原理？\"><a href=\"#18-img-的-alt-和-title-的异同？实现图片懒加载的原理？\" class=\"headerlink\" title=\"18. img 的 alt 和 title 的异同？实现图片懒加载的原理？\"></a>18. img 的 alt 和 title 的异同？实现图片懒加载的原理？</h2><ul>\n<li><code>alt</code>是图片加载失败时显示在网页上的替代文字；<code>title</code>是鼠标放在图片上面时显示的文字，是对图片的进一步描述和说明。</li>\n<li><code>alt</code>是 img 的必要属性；<code>title</code>不是。</li>\n<li>对于网站 SEO 优先来说，搜索引擎对图片意思的判断，主要是靠<code>alt</code>属性，所以在图片<code>alt</code>属性中以简要文字说明，同时包含关键字，也是页面优化的一部分。</li>\n</ul>\n<p><code>懒加载原理</code>：先设置图片的 <code>data-set</code> 属性值（也可以是其他任意的，只要不发生 http 请求就可以，作用是为了存取值）为图片路径，由于不是 <code>src</code> 属性，故不会发生 http 请求。然后计算出页面的 scrollTop 的高度和浏览器的高度之和，如果图片距页面顶端距离小于前两者之和，说明图片要显示出来了，这时将 <code>data-set</code> 属性替换为 <code>src</code> 属性即可。</p>\n<h2 id=\"19-css-sprites-（雪碧图-精灵图）\"><a href=\"#19-css-sprites-（雪碧图-精灵图）\" class=\"headerlink\" title=\"19. css sprites （雪碧图/精灵图）\"></a>19. css sprites （雪碧图/精灵图）</h2><p>css sprites 就是把网页中一些小图片整合到一张图片文件中，再利用 css 的 background-image、background-repeat、background-position 的组合进行背景定位。</p>\n<p>优点： 减少图片体积；减少 http 请求次数</p>\n<p>缺点：维护比较麻烦；不能随便改变大小，会失真模糊</p>\n<h2 id=\"20-什么是字体图标？\"><a href=\"#20-什么是字体图标？\" class=\"headerlink\" title=\"20. 什么是字体图标？\"></a>20. 什么是字体图标？</h2><p>字体图标简单的说，就是一种特殊的字体，通过这种字体，显示给用户的就像一个个图片一样。字体图标最大的好处，在于它不会变形和加载速度快。字体图标可以像文字一样，随意通过 css 来控制它的大小和颜色，非常方便。</p>\n<h2 id=\"21-主流浏览器内核私有属性-css-前缀？\"><a href=\"#21-主流浏览器内核私有属性-css-前缀？\" class=\"headerlink\" title=\"21. 主流浏览器内核私有属性 css 前缀？\"></a>21. 主流浏览器内核私有属性 css 前缀？</h2><ul>\n<li>mozilla(firefox、flock等): -moz</li>\n<li>webkit 内核(safari、chrome等): -webkit</li>\n<li>opera 内核(opera浏览器): -o</li>\n<li>trident 内核(ie 浏览器): -ms</li>\n</ul>"},{"title":"前端工程化","keywords":"前端工程化","description":"前端工程化","top_img":"设置false不显示顶部图片","sticky":"数值越大越靠前","cover":"首页封面","comments":1,"abbrlink":"7db00131","date":"2023-05-26T07:59:17.000Z","updated":"2023-05-26T07:59:17.000Z","_content":"前端工程化\n<!-- more -->\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/js/前端工程化.md","raw":"---\ntitle: 前端工程化\ntags:\n  - 前端\ncategories: 前端\nkeywords: 前端工程化\ndescription: 前端工程化\ntop_img: 设置false不显示顶部图片\nsticky: 数值越大越靠前\ncover: 首页封面\ncomments: false评论\nabbrlink: 7db00131\ndate: 2023-05-26 15:59:17\nupdated: 2023-05-26 15:59:17\n---\n前端工程化\n<!-- more -->\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"js/前端工程化","published":1,"layout":"post","photos":[],"link":"","_id":"clijtrgca000myswhh2zu50tq","content":"<p>前端工程化</p>\n<span id=\"more\"></span>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"excerpt":"<p>前端工程化</p>","more":""},{"title":"网络","keywords":"网络","description":"网络","top_img":"设置false不显示顶部图片","sticky":"数值越大越靠前","cover":"首页封面","comments":1,"abbrlink":"50daec4","date":"2023-05-26T07:56:47.000Z","updated":"2023-05-26T07:56:47.000Z","_content":"\n\n\n摘要\n\n<!-- more -->\n","source":"_posts/js/网络.md","raw":"---\ntitle: 网络\ntags:\n  - 网络\ncategories: 网络\nkeywords: 网络\ndescription: 网络\ntop_img: 设置false不显示顶部图片\nsticky: 数值越大越靠前\ncover: 首页封面\ncomments: false评论\nabbrlink: 50daec4\ndate: 2023-05-26 15:56:47\nupdated: 2023-05-26 15:56:47\n---\n\n\n\n摘要\n\n<!-- more -->\n","slug":"js/网络","published":1,"layout":"post","photos":[],"link":"","_id":"clijtrgcb000pyswh3sg44tig","content":"<p>摘要</p>\n<span id=\"more\"></span>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"excerpt":"<p>摘要</p>","more":""},{"title":"算法复习","keywords":"JS","description":"算法总结","top_img":"设置false不显示顶部图片","sticky":"数值越大越靠前","cover":"首页封面","comments":1,"abbrlink":"fa264d8c","date":"2023-05-31T12:18:34.000Z","updated":"2023-05-31T12:18:34.000Z","_content":"\n\n\n算法复习\n\n<!-- more -->\n\n# 链表\n\n## 1. \n\n\n\n![image-20230531202054172](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531202054172.png)\n\n由于会直接返回翻转链表，最后一个就是翻转后的链表头。因此只需要保留前一个链表，让后一个链表不停的指向前一个链表就可以。\n\n```js\nfunction ReverseList(pHead)\n{\n    let pred =null;\n    while(pHead){\n        [pHead.next,pred,pHead] = [pred,pHead,pHead.next]\n    }\n    return pred\n}\n```\n\n## 2.\n\n\n\n![image-20230531225422160](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531225422160.png)\n\n首先将中间需要翻转的那段拿出来单独翻转，可以将这段的最后一个设为null作为翻转结束的标志。然后将这段在插回来就可以了\n\n\n\n```js\nfunction reverse(head) {\n    let pre = null;\n    let cur = head;\n    let next;\n    while(cur) {\n        next = cur.next;\n        cur.next = pre;\n         \n        pre = cur;\n        cur = next;\n    }\n    return [pre, head];\n}\nfunction reverseBetween( head ,  m ,  n ) {\n    // 增加一个origin方便返回最终结果 origin.next\n    // 因为head也有可能被翻转了\n    const origin = { next: head };\n    head = origin;\n    let left, right;\n    let i = 0;\n    for(; i < m - 1; i++) {\n        head = head.next;\n    }\n    left = head;\n    for(; i < n; i++) {\n        head = head.next;\n    }\n    right = head.next;\n    head.next = null;\n    const [ start, end ] = reverse(left.next);\n    left.next = start;\n    end.next = right;\n    return  origin.next\n}\nmodule.exports = {\n    reverseBetween : reverseBetween\n};\n```\n\n\n\n## 3. \n\n![image-20230531232244456](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531232244456.png)\n\n和上一题类似 只需要翻转前记录下前一个节点 和后一个节点  然后拼接起来就可以\n\n```js\nfunction reverse(head) {\n    let pre = null;\n    let cur = head;\n    while(cur) {\n        [cur.next,pre,cur] = [pre,cur,cur.next]\n    }\n    return [pre, head];\n}\nfunction reverseKGroup(head, k) {\n    if(!head||!head.next||k ==1) return head\n    let result ={'next':head},\n    num = 0,\n    //记录前一个翻转列表的尾结点\n    prev = result\n    //记录下一个翻转开始节点\n    nextNode = head\n    while(head){\n        if(num+1 == k){\n            //此时head为这一次翻转列表的最后一个节点  需要记录一下下一个翻转周期的开始节点\n            let temp = head.next\n            head.next = null\n            let [start,end] = reverse(nextNode)\n            nextNode  = temp\n            prev.next = start\n            prev = end\n            num = 0\n            if(!nextNode){break}\n            head = nextNode.next\n        }else{\n            head = head.next\n        }\n        num ++\n    }\n    if(num){\n        //如果还有剩余 补充到末尾\n        prev.next = nextNode\n    }\n    return result.next\n}\nmodule.exports = {\n    reverseKGroup: reverseKGroup,\n};\n\n```\n\n## 4.\n\n![image-20230601125414404](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230601125414404.png)\n\n双指针遍历 小的放到新链表中、由于是引用不会增加额外空间\n\n```ts\nexport function Merge(pHead1: ListNode, pHead2: ListNode): ListNode {\n    // write code here\n    let result = new ListNode(-1)\n    let cur = result\n    while(pHead1&&pHead2){\n        if(pHead1.val>pHead2.val){\n            cur .next = pHead2\n            pHead2 =pHead2.next\n\n        }else{\n            cur .next = pHead1\n            pHead1 =pHead1.next\n        }\n        cur = cur.next\n\n    }\n    if(pHead1) \n            cur .next = pHead1\n    if(pHead2) \n            cur .next = pHead2\n    return result.next\n}\n```\n\n## 5.\n\n","source":"_posts/js/算法练习.md","raw":"---\ntitle: 算法复习\ntags:\n  - JS\ncategories: JS\nkeywords: JS\ndescription: 算法总结\ntop_img: 设置false不显示顶部图片\nsticky: 数值越大越靠前\ncover: 首页封面\ncomments: false评论\nabbrlink: fa264d8c\ndate: 2023-05-31 20:18:34\nupdated: 2023-05-31 20:18:34\n---\n\n\n\n算法复习\n\n<!-- more -->\n\n# 链表\n\n## 1. \n\n\n\n![image-20230531202054172](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531202054172.png)\n\n由于会直接返回翻转链表，最后一个就是翻转后的链表头。因此只需要保留前一个链表，让后一个链表不停的指向前一个链表就可以。\n\n```js\nfunction ReverseList(pHead)\n{\n    let pred =null;\n    while(pHead){\n        [pHead.next,pred,pHead] = [pred,pHead,pHead.next]\n    }\n    return pred\n}\n```\n\n## 2.\n\n\n\n![image-20230531225422160](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531225422160.png)\n\n首先将中间需要翻转的那段拿出来单独翻转，可以将这段的最后一个设为null作为翻转结束的标志。然后将这段在插回来就可以了\n\n\n\n```js\nfunction reverse(head) {\n    let pre = null;\n    let cur = head;\n    let next;\n    while(cur) {\n        next = cur.next;\n        cur.next = pre;\n         \n        pre = cur;\n        cur = next;\n    }\n    return [pre, head];\n}\nfunction reverseBetween( head ,  m ,  n ) {\n    // 增加一个origin方便返回最终结果 origin.next\n    // 因为head也有可能被翻转了\n    const origin = { next: head };\n    head = origin;\n    let left, right;\n    let i = 0;\n    for(; i < m - 1; i++) {\n        head = head.next;\n    }\n    left = head;\n    for(; i < n; i++) {\n        head = head.next;\n    }\n    right = head.next;\n    head.next = null;\n    const [ start, end ] = reverse(left.next);\n    left.next = start;\n    end.next = right;\n    return  origin.next\n}\nmodule.exports = {\n    reverseBetween : reverseBetween\n};\n```\n\n\n\n## 3. \n\n![image-20230531232244456](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531232244456.png)\n\n和上一题类似 只需要翻转前记录下前一个节点 和后一个节点  然后拼接起来就可以\n\n```js\nfunction reverse(head) {\n    let pre = null;\n    let cur = head;\n    while(cur) {\n        [cur.next,pre,cur] = [pre,cur,cur.next]\n    }\n    return [pre, head];\n}\nfunction reverseKGroup(head, k) {\n    if(!head||!head.next||k ==1) return head\n    let result ={'next':head},\n    num = 0,\n    //记录前一个翻转列表的尾结点\n    prev = result\n    //记录下一个翻转开始节点\n    nextNode = head\n    while(head){\n        if(num+1 == k){\n            //此时head为这一次翻转列表的最后一个节点  需要记录一下下一个翻转周期的开始节点\n            let temp = head.next\n            head.next = null\n            let [start,end] = reverse(nextNode)\n            nextNode  = temp\n            prev.next = start\n            prev = end\n            num = 0\n            if(!nextNode){break}\n            head = nextNode.next\n        }else{\n            head = head.next\n        }\n        num ++\n    }\n    if(num){\n        //如果还有剩余 补充到末尾\n        prev.next = nextNode\n    }\n    return result.next\n}\nmodule.exports = {\n    reverseKGroup: reverseKGroup,\n};\n\n```\n\n## 4.\n\n![image-20230601125414404](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230601125414404.png)\n\n双指针遍历 小的放到新链表中、由于是引用不会增加额外空间\n\n```ts\nexport function Merge(pHead1: ListNode, pHead2: ListNode): ListNode {\n    // write code here\n    let result = new ListNode(-1)\n    let cur = result\n    while(pHead1&&pHead2){\n        if(pHead1.val>pHead2.val){\n            cur .next = pHead2\n            pHead2 =pHead2.next\n\n        }else{\n            cur .next = pHead1\n            pHead1 =pHead1.next\n        }\n        cur = cur.next\n\n    }\n    if(pHead1) \n            cur .next = pHead1\n    if(pHead2) \n            cur .next = pHead2\n    return result.next\n}\n```\n\n## 5.\n\n","slug":"js/算法练习","published":1,"layout":"post","photos":[],"link":"","_id":"clijtrgcc000vyswhglk60i9m","content":"<p>算法复习</p>\n<span id=\"more\"></span>\n\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531202054172.png\" alt=\"image-20230531202054172\"></p>\n<p>由于会直接返回翻转链表，最后一个就是翻转后的链表头。因此只需要保留前一个链表，让后一个链表不停的指向前一个链表就可以。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ReverseList</span>(<span class=\"params\">pHead</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pred =<span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pHead)&#123;</span><br><span class=\"line\">        [pHead.<span class=\"property\">next</span>,pred,pHead] = [pred,pHead,pHead.<span class=\"property\">next</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pred</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531225422160.png\" alt=\"image-20230531225422160\"></p>\n<p>首先将中间需要翻转的那段拿出来单独翻转，可以将这段的最后一个设为null作为翻转结束的标志。然后将这段在插回来就可以了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur) &#123;</span><br><span class=\"line\">        next = cur.<span class=\"property\">next</span>;</span><br><span class=\"line\">        cur.<span class=\"property\">next</span> = pre;</span><br><span class=\"line\">         </span><br><span class=\"line\">        pre = cur;</span><br><span class=\"line\">        cur = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [pre, head];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseBetween</span>(<span class=\"params\"> head ,  m ,  n </span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 增加一个origin方便返回最终结果 origin.next</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为head也有可能被翻转了</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> origin = &#123; <span class=\"attr\">next</span>: head &#125;;</span><br><span class=\"line\">    head = origin;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left, right;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; i &lt; m - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        head = head.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    left = head;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; i &lt; n; i++) &#123;</span><br><span class=\"line\">        head = head.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    right = head.<span class=\"property\">next</span>;</span><br><span class=\"line\">    head.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [ start, end ] = <span class=\"title function_\">reverse</span>(left.<span class=\"property\">next</span>);</span><br><span class=\"line\">    left.<span class=\"property\">next</span> = start;</span><br><span class=\"line\">    end.<span class=\"property\">next</span> = right;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  origin.<span class=\"property\">next</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    reverseBetween : reverseBetween</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531232244456.png\" alt=\"image-20230531232244456\"></p>\n<p>和上一题类似 只需要翻转前记录下前一个节点 和后一个节点  然后拼接起来就可以</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur) &#123;</span><br><span class=\"line\">        [cur.<span class=\"property\">next</span>,pre,cur] = [pre,cur,cur.<span class=\"property\">next</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [pre, head];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseKGroup</span>(<span class=\"params\">head, k</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head||!head.<span class=\"property\">next</span>||k ==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result =&#123;<span class=\"string\">&#x27;next&#x27;</span>:head&#125;,</span><br><span class=\"line\">    num = <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\">//记录前一个翻转列表的尾结点</span></span><br><span class=\"line\">    prev = result</span><br><span class=\"line\">    <span class=\"comment\">//记录下一个翻转开始节点</span></span><br><span class=\"line\">    nextNode = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(head)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num+<span class=\"number\">1</span> == k)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//此时head为这一次翻转列表的最后一个节点  需要记录一下下一个翻转周期的开始节点</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = head.<span class=\"property\">next</span></span><br><span class=\"line\">            head.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> [start,end] = <span class=\"title function_\">reverse</span>(nextNode)</span><br><span class=\"line\">            nextNode  = temp</span><br><span class=\"line\">            prev.<span class=\"property\">next</span> = start</span><br><span class=\"line\">            prev = end</span><br><span class=\"line\">            num = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!nextNode)&#123;<span class=\"keyword\">break</span>&#125;</span><br><span class=\"line\">            head = nextNode.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            head = head.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        num ++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果还有剩余 补充到末尾</span></span><br><span class=\"line\">        prev.<span class=\"property\">next</span> = nextNode</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.<span class=\"property\">next</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">reverseKGroup</span>: reverseKGroup,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230601125414404.png\" alt=\"image-20230601125414404\"></p>\n<p>双指针遍历 小的放到新链表中、由于是引用不会增加额外空间</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Merge</span>(<span class=\"params\">pHead1: ListNode, pHead2: ListNode</span>): <span class=\"title class_\">ListNode</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// write code here</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = result</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pHead1&amp;&amp;pHead2)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pHead1.<span class=\"property\">val</span>&gt;pHead2.<span class=\"property\">val</span>)&#123;</span><br><span class=\"line\">            cur .<span class=\"property\">next</span> = pHead2</span><br><span class=\"line\">            pHead2 =pHead2.<span class=\"property\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cur .<span class=\"property\">next</span> = pHead1</span><br><span class=\"line\">            pHead1 =pHead1.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur = cur.<span class=\"property\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pHead1) </span><br><span class=\"line\">            cur .<span class=\"property\">next</span> = pHead1</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pHead2) </span><br><span class=\"line\">            cur .<span class=\"property\">next</span> = pHead2</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.<span class=\"property\">next</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5.\"></a>5.</h2>","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"excerpt":"<p>算法复习</p>","more":"<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531202054172.png\" alt=\"image-20230531202054172\"></p>\n<p>由于会直接返回翻转链表，最后一个就是翻转后的链表头。因此只需要保留前一个链表，让后一个链表不停的指向前一个链表就可以。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ReverseList</span>(<span class=\"params\">pHead</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pred =<span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pHead)&#123;</span><br><span class=\"line\">        [pHead.<span class=\"property\">next</span>,pred,pHead] = [pred,pHead,pHead.<span class=\"property\">next</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pred</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531225422160.png\" alt=\"image-20230531225422160\"></p>\n<p>首先将中间需要翻转的那段拿出来单独翻转，可以将这段的最后一个设为null作为翻转结束的标志。然后将这段在插回来就可以了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur) &#123;</span><br><span class=\"line\">        next = cur.<span class=\"property\">next</span>;</span><br><span class=\"line\">        cur.<span class=\"property\">next</span> = pre;</span><br><span class=\"line\">         </span><br><span class=\"line\">        pre = cur;</span><br><span class=\"line\">        cur = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [pre, head];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseBetween</span>(<span class=\"params\"> head ,  m ,  n </span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 增加一个origin方便返回最终结果 origin.next</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为head也有可能被翻转了</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> origin = &#123; <span class=\"attr\">next</span>: head &#125;;</span><br><span class=\"line\">    head = origin;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left, right;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; i &lt; m - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        head = head.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    left = head;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; i &lt; n; i++) &#123;</span><br><span class=\"line\">        head = head.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    right = head.<span class=\"property\">next</span>;</span><br><span class=\"line\">    head.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [ start, end ] = <span class=\"title function_\">reverse</span>(left.<span class=\"property\">next</span>);</span><br><span class=\"line\">    left.<span class=\"property\">next</span> = start;</span><br><span class=\"line\">    end.<span class=\"property\">next</span> = right;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  origin.<span class=\"property\">next</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    reverseBetween : reverseBetween</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230531232244456.png\" alt=\"image-20230531232244456\"></p>\n<p>和上一题类似 只需要翻转前记录下前一个节点 和后一个节点  然后拼接起来就可以</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur) &#123;</span><br><span class=\"line\">        [cur.<span class=\"property\">next</span>,pre,cur] = [pre,cur,cur.<span class=\"property\">next</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [pre, head];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseKGroup</span>(<span class=\"params\">head, k</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head||!head.<span class=\"property\">next</span>||k ==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result =&#123;<span class=\"string\">&#x27;next&#x27;</span>:head&#125;,</span><br><span class=\"line\">    num = <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\">//记录前一个翻转列表的尾结点</span></span><br><span class=\"line\">    prev = result</span><br><span class=\"line\">    <span class=\"comment\">//记录下一个翻转开始节点</span></span><br><span class=\"line\">    nextNode = head</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(head)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num+<span class=\"number\">1</span> == k)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//此时head为这一次翻转列表的最后一个节点  需要记录一下下一个翻转周期的开始节点</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = head.<span class=\"property\">next</span></span><br><span class=\"line\">            head.<span class=\"property\">next</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> [start,end] = <span class=\"title function_\">reverse</span>(nextNode)</span><br><span class=\"line\">            nextNode  = temp</span><br><span class=\"line\">            prev.<span class=\"property\">next</span> = start</span><br><span class=\"line\">            prev = end</span><br><span class=\"line\">            num = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!nextNode)&#123;<span class=\"keyword\">break</span>&#125;</span><br><span class=\"line\">            head = nextNode.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            head = head.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        num ++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果还有剩余 补充到末尾</span></span><br><span class=\"line\">        prev.<span class=\"property\">next</span> = nextNode</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.<span class=\"property\">next</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">reverseKGroup</span>: reverseKGroup,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h2><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230601125414404.png\" alt=\"image-20230601125414404\"></p>\n<p>双指针遍历 小的放到新链表中、由于是引用不会增加额外空间</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Merge</span>(<span class=\"params\">pHead1: ListNode, pHead2: ListNode</span>): <span class=\"title class_\">ListNode</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// write code here</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = result</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pHead1&amp;&amp;pHead2)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pHead1.<span class=\"property\">val</span>&gt;pHead2.<span class=\"property\">val</span>)&#123;</span><br><span class=\"line\">            cur .<span class=\"property\">next</span> = pHead2</span><br><span class=\"line\">            pHead2 =pHead2.<span class=\"property\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cur .<span class=\"property\">next</span> = pHead1</span><br><span class=\"line\">            pHead1 =pHead1.<span class=\"property\">next</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur = cur.<span class=\"property\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pHead1) </span><br><span class=\"line\">            cur .<span class=\"property\">next</span> = pHead1</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pHead2) </span><br><span class=\"line\">            cur .<span class=\"property\">next</span> = pHead2</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.<span class=\"property\">next</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5.\"></a>5.</h2>"},{"title":"算法总结","keywords":"JS","description":"算法总结","top_img":"设置false不显示顶部图片","sticky":"数值越大越靠前","cover":"首页封面","comments":1,"abbrlink":"1213ac56","date":"2023-05-31T12:18:34.000Z","updated":"2023-05-31T12:18:34.000Z","_content":"\n\n\n算法总结\n\n<!-- more -->\n\n# 1. 动态规划\n\n#### 传统递归 vs. DP\n\n先用一个被大佬们举例举到烂的🌰，这个栗子很烂，但是真的**很香**：必须着重**强调**.\n\n**《斐波那契（Fibonacci）数列的第n项》**\n\n**举荐理由：**在我自己看来Fibonacci是动态规划设计中的入门级案例，就好比说编程中的“hello world”，大数据中的“word count”.\n\nFibonacci几乎完美的诠释了**动态规划带来的思想和技巧**然而没有任何其他的要考虑的细枝末节，这种很清晰的方法看起来很适合整个的动态规划的思维方式，很适合入门来进行的思考方式.\n\n接下来咱们先来看题目：\n\n```题目\n题目复制代码写一个函数，输入n，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：\n\nF(0) = 0, F(1) = 1\nF(N) = F(N - 1) + F(N - 2), 其中 N > 1.\n斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。\n```\n\n比较一下传统递归解法和动态规划思想下的解决对比\n\n#### 1. 先 递归解决\n\n传统对于这种题目的思考方式会利用递归求解，做起来比较简单，就是不断的去递归调用，看下面代码：\n\n```js\nlet i = 0;\nfunction fib_recur(N){\n    console.log(i)\n    if N <= 1:\n        return N\n    return fib_recur(N-1) + fib_recur(N-2)  # 递归输出  \n}\n```\n\n输出的结果：\n\n```python\nF( 1 ) =  3\nF( 2 ) =  2\nF( 3 ) =  1\nF( 4 ) =  0\nF( 5 ) =  1\nF( 6 ) =  2\nF( 7 ) =  1\nF( 8 ) =  0\n```\n\n**重复计算**\n\n明显可以看到，总计 8 次的计算过程中，相同的计算结果有三对进行了**重复计算**（下图中同色项，不包含灰色），也就是说在递归的过程中，把曾经计算过的项进行了**又一次的重复计算**，这样对于时间效率是比较低的，唯一的好处可能就是代码看起来比较好懂，但是终归不是一个好的算法设计方法。\n\n代码中，在计算N的时候就去递归计算 `fib(N-1) + fib(N-2)`，那么，这种情况下的计算过程中。会是下面图中的一个计算过程。\n\n可以发现，会有相当一部分的重复计算，这样对于时间都是重复的消耗。\n\n> 参考图中相同颜色的项，比如说粉色的重复计算、黄色的重复计算等\n>\n> 注意：递归中没有对空间进行了增加，始终都是同样的长度，仅仅是不断的弹出和压入\n\n![image-20230605114156368](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114156368.png)\n\n为了更好的说明这种重复计算带来时间效率的低下。再比如说，相比上述图中的计算节点，再增加一个节点的计算，增加计算F(5)，那么由于递归的计算方式，会有更多的项（下图中线框中部分）进行了重复的计算。在计算`F(5)`的时候，会递归调用`F(4)`和`F(3)`，而在下图中，计算`F(4)`的时候，又会完整的去计算`F(3)`。这样，如果N很大的话，会有更大的时间消耗.\n\n这样，这棵树的规模进行进行成倍增加，时间复杂度很明显的进行了成倍的扩张。对于时间上来说是很恐怖的.\n\n时间复杂度带来的低效率严重超过了代码的可读性，所以我们可以想办法将**过去计算**过的节点**进行保存**。这样，我们就会用到下面要说的动态规划思想带来的时间上的高效.\n\n![image-20230605114342318](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114342318.png)\n\n> 时间复杂度：o(2**n) ---> 指数级\n>\n> 空间复杂度：o(n)\n\n#### 2. 后 动态规划解决\n\n**大概解释一下字面意思：**\n\n**动态规划：我们不直接去解决问题，而是在每一步解决问题的时候，达到每一步的最优情况。换句话说，就是在每一步解决问题过程中，利用过去的状态**以及**当前状态**的情况而达到一个当前的最优状态.\n\n**规划：在一般解决该类问题的时候，会有一个“填表格”的过程，无论是简单情况下的\\**一维表格**还是复杂一点的**二维表格**，都是以**开辟空间换时间**的思想，以争取最佳的时间效率. （保存过程中间值，方便后续直接使用）.\n\n**动态：**用上面的案例来说，递归解决过程中的每一步都会从基本问题不断的“自顶向下”去求解，在每一步骤中，会有相同的计算逻辑进行了重复的计算。相比于递归思想，动态规划思想增加了对历史上计算结果的保存，逐步记录下中间的计算结果，在每一步求得最优值.\n\n因此，动态规划可以避免重复计算，达到了时间上的最优，从O(2N)O(2^N)O(2N)指数级变为O(N)O(N)O(N)常数级别，相较于开辟的一段内存空间存放中间过程值的开销，是非常值得的.\n\n**那么，接下来咱们依照动态规划的思路进行对Fibonacci进行下解决**\n\n依据题中的规则：\n\nF(0) = 0, F(1) = 1\n\nF(N) = F(N - 1) + F(N - 2),  when N > 1\n\n那么，👇👇F(N) 的值只与他的前两个状态有关系👇👇\n\na. 初始化值 : F(0) = 0, F(1) = 1 b. 想要计算得到F(2)， 那么F(2) = F(0) + F(1)   -->  保存 F(2) c. 想要计算得到F(3)， 那么F(3) = F(2) + F(1)   -->  保存 F(3) d. 想要计算得到F(3)， 那么F(4) = F(3) + F(2)   -->  保存 F(4)\n\n利用动态规划思想，以一维数组辅助实现的Fibonacci，看下图\n\n![image-20230605114740415](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114740415.png)\n\n是不是很简单的思路，仅仅靠保存过程中的一些值就能很简单的利用循环就可以实现了，没必要用递归反复计算进行实现。\n\n想要计算得到第 n 个值的多少？那么，以下几点是我们必须要做到的\n\n​\ta. **定义一个一维数组**   --->  一般用dp来命名\n\n​\tb. **动态方程的设定**   --->  题中的F(N) = F(N - 1) + F(N - 2)\n\n​\tc. **初始化数值**   --->  F(0) = 0和F(1) = 1\n\n上述的 a、b 和 c 点就是动态规划思想的几个核心要素\n\n下面来看下要实现的代码（代码中，用dp来代替上面的F()）\n\n```python\nclass Solution(object):\n    def fib(self, N):\n        if N == 0:\n            return 0\n        dp = [0 for _ in range(N+1)] # 1定义dp[i]保存第i个计算得到的数值\n        dp[0] = 0   \t# 2初始化\n        dp[1] = 1\t\t\t# 2初始化\n        for i in range(2, N+1):\t# 3动态方程实现，由于0和1都实现了赋值，现在需要从第2个位置开始赋值\n            dp[i] = dp[i - 1] + dp[i - 2]\n       \n        print dp\t\t # 记录计算过程中的次数，与上述递归形成对比\n        return dp[N]\n```\n\n输出:\n\n```python\n[0, 1, 1, 2, 3]\n3\n```\n\n以上，最重要的就是1 2 3 点，而执行过程参照**输出**对比递归算法，计算少了很多，同样的计算只计算了一次。\n\n> 时间复杂度：O(N)\n>\n> 空间复杂度：O(N)\n\n介绍了上面的内容了，此处来条分割线吧，针对上述的 **递归 vs. DP**\n\n------\n\n既然动态规划的方案也介绍了，下面咱们再仔细看看，是否有优化的空间，毕竟对于一个算法方案的设计，都有找到其优化点，无论是时间还是空间的效率都想要达到一个理想的值。\n\n#### 3. 动态规划 + 优化\n\n咱们看下这张图解，发现每个计算节点都**只与前两个项有关系**。换句话说，咱们只要保存两个值就好了，计算新的节点值的时候，把新的值赋值给前两个值的第一个就好了\n\n![image-20230605115233956](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115233956.png)\n\n话说只要两个值，现在定义两个变量 dp1 和 dp2。那么，现在咱们一步一步模拟一下：\n\na. 初始化值 : F(0) = 0, F(1) = 1\n\n\n\n![image-20230605115254829](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115254829.png)\n\nb. 想要计算得到F(2)， 那么F(2) = F(0) + F(1) --> 保存 F(2)\n\n 顺带将F(1)赋值给dp1， f(2)赋值给dp2\n\n![image-20230605115319902](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115319902.png)\n\nc. 想要计算得到F(3)， 那么F(3) = F(2) + F(1) --> 保存 F(3)\n\n 顺带将F(2)赋值给dp1， F(3)赋值给dp2\n\n![image-20230605115336720](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115336720.png)\n\nd. 想要计算得到F(3)， 那么F(4) = F(3) + F(2) --> 保存 F(4)\n\n 顺带将F(3)赋值给dp1， F(4)赋值给dp2\n\n![image-20230605115356096](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115356096.png)\n\n至此为止，整个过程仅仅用到了两个变量来存储过程中产生的值，也就之前没有优化的空间效率得到了优化\n\n咱们把代码也贴一下吧，供参考\n\n```python\nclass Solution(object):\n    def fib_dp1(self, N):\n        if N == 0: return 0\n\n        dp1, dp2 = 0, 1\n\n        for i in range(2, N+1):\n            dp1 = dp1 + dp2\n            dp1, dp2 = dp2, dp1\n\n        return dp2\n```\n\n看起来是不是更加简洁了。\n\n三点说明：**1.定义dp数组 2.动态方程 3.初始化数值**\n\n这也说明了为什么用**斐波那契数列**来引入**动态规划**的，因为斐波那契数列本身就明确的告诉你动态方程是什么，初始化的值是什么，所以好好的体会这种思想，尤其是从传统递归 -> 动态规划的思想解决，再到优化的方面，很值得深思。\n\n那接下来，咱们就找几个有代表性的栗子来尝尝鲜\n\n![image-20230605115624586](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115624586.png)\n\n## 二、动态规划四大解题步骤处理问题\n\n上面用斐波那契数列问题，引出了下面的几点，在这里再详细赘述一下\n\n在后面的案例中将会尽量严格按照这几个步骤进行解决问题\n\n> 步骤一：定义dp数组的含义\n>\n> 步骤二：定义状态转移方程\n>\n> 步骤三：初始化过程转移的初始值\n>\n> 步骤四：可优化点(可选)\n\n#### 步骤一：定义dp数组的含义\n\n绝大部分情况下，我们需要定义一维数组或者二维数组进行存储在计算过程中产生的最优值，这里为什么是最优值呢？是因为在解决问题过程中，一般情况dp数组用来保存**从开始到当前情况的最优值**，故而保存的是截止到目前的最优值，避免重复计算（这里看起来思维有混乱的同学们，想想上面Fibonacci 递归解法和动态规划的对比）\n\n**所以，dp无论是一维的还是二维的，要想清楚代表什么，一般来说代表的是截止到目前情况下的最优值**\n\n#### 步骤二：定义状态转移方程\n\n什么是动态转移方程？ 如果有一个问题摆在我们面前，然后这个问题在解决的过程中，会发现有很多的重叠的子问题，重叠子结构，而通过这些子问题的解决，最终将会把该问题进行解决\n\n通俗来说，在解决问题过程中，能够发现一个不断解决子问题的动态规律，比如说Fibonacci中的F(N) = F(N - 1) + F(N - 2)，而在其他的可以用动态规划解决的问题中，需要我们自己去发现这样的内在规律。这个是最难的也是最终于要的，只要这一步解决了，接下来我们解决这个问题基本就没问题了.\n\n#### 步骤三：初始化过程转移的初始值\n\n顺着步骤二的思路来，既然动态方程定义好了，是不是需要一个**支点**来撬动它进行不断的计算下去。\n\n那么，这个**支点**就需要我们来初始定义，将动态方程激活，进行计算。举例来说Fibonacci中的F(0) = 0和F(1) = 1，有了这两个值，它的动态方程F(N) = F(N - 1) + F(N - 2)就可以进行下去了\n\n这个就是我们要想好的初始值，实际问题可能还需要我们想想清楚.\n\n#### 步骤四：可优化点(可选)\n\n可优化的这里，最重要的会是dp数组这块，也会有不同问题不同的优化点\n\n在例子中，我们会进行不同的优化.\n\n总之一点，建议大家动笔多画画图，很多细节慢慢就会出现了.\n\n### 案例一：打家劫舍I 「来自leetcode198」\n\n你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n\n给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。\n\n**示例 1:**\n\n```题目\n代码输入: [1,2,3,1]\n输出: 4\n解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n     偷窃到的最高金额 = 1 + 3 = 4 。\n```\n\n**示例2：**\n\n```python\n输入: [2,7,9,3,1]\n输出: 12\n解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。\n     偷窃到的最高金额 = 2 + 9 + 1 = 12 。\n```\n\n把经典案例系列拆分开讨论下吧，咱们首先将「打家劫舍I」来看看\n\n该题可以用动态规划的思想来解决的原因是，在小偷不断偷取的过程中，始终想要偷得的物品价值最大，最优，每一步骤都与之前的偷取情况有关系，而且每一步都要考虑是否能偷，是否会带来最大利益，这就使得我们可以用动态规划的思想来解决问题。  然后严格按照四步骤进行解题.\n\n##### 步骤一： 定义dp数组的含义\n\n​\t之前提到的，dp数组存储的值一般代表截止目前的最优值，在该题目中，我们定义：\n\n​\t**dp[i] 代表到达第 i 个房屋偷得的最高金额，也就是当前最大子序和**\n\n​\t无论房屋有几间，最后我们取到dp数组的最后一个值就求得小偷偷得的最高金额\n\n##### 步骤二：找出关系元素间的动态方程\n\n​\t动态规划解决的问题，一般来说就是解决最优子问题，“自顶向下” 的去不断的计算每一步骤的最优值。\n\n​\t也就是想要得到dp[i]的值，我们必须要知道dp[i-1]，dp[i-2]，dp[i-3] ... 的每一步的最优值，在这个状态转移的过程中，我们必须要想清楚怎么去定义关系式。然而在每一步的计算中，都与前几项有关系，这个固定的关系就是我们要寻找的重叠子问题，也同样是接下来要详细定义的动态方程\n\n​\t该题目中，当小偷到达第 i 个屋子的时候，他的选择有两种：一种是偷，另外一种是不偷， 然后选择价值较大者\n\n​\ta. 偷的情况计算：必然是dp[3] = nums[2] + dp[1]，如果是偷取该屋子的话，相邻屋子是不能偷取的，因此，通项式子是：dp[i] =  nums[i-1] + dp[i-2]\n\n![image-20230605123128436](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605123128436.png)\n\n b. 不偷的情况计算：必然是dp[3] = dp[2]，如果是不偷取该屋子的话，相邻屋子就是其最优值，因此，通项式子是：dp[i] = dp[i-1]\n\n![image-20230605123322989](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605123322989.png)\n\n​\t最后，要想偷得最高金额，那么，必须选取在偷与不偷之间的最大值作为我们是否选取的关键点。即：\n\n​\t**动态方程:** dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])\n\n##### 步骤三：初始化数值设定\n\n​\t初始化: 给没有房子时，dp一个位置，即：dp[0] \t\t1 当size=0时，没有房子，dp[0]=0； \t\t2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]\n\n那么，按照这个思路来整理一下代码：\n\n```python\nclass Solution(object):\n\n    def rob(self, nums):\n      # 1.dp[i] 代表当前最大子序和\n      # 2.动态方程: dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])\n      # 3.初始化: 给没有房子时，dp一个位置，即：dp[0]\n      #   3.1 当size=0时，没有房子，dp[0]=0；\n      #   3.2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]\n      size = len(nums)\n      if size == 0:\n        return 0\n\n      dp = [0 for _ in range(size+1)]\n\n      dp[0] = 0\n      dp[1] = nums[0]\n      for i in range(2, size+1):\n        dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])\n        return dp[size]\n```\n\n> 时间复杂度：O(N)\n>\n> 空间复杂度：O(N)\n\n那下面想想看有没有可优化的地方，尽量的释放一部分计算机资源\n\n##### 步骤四：优化\n\n​\t从 dp[i] = max(dp[i-1], nums[i-1]+dp[i-2]) 关系来看，每一次动态变化，都与前两次状态有关系（dp[i-1], dp[i-2])，而前面的一些值是没有必要留存的.\n\n​\t所以，dp只需要定义两个变量就好，将空间复杂度降为O(1)\n\n```python\nclass Solution(object):\n\n    def rob_o(self, nums):\n        # 依照上面的思路，其实我们用到的数据永远都是dp的dp[i-1]和dp[i-2]两个变量\n        # 因此，我们可以使用两个变量来存放前两个状态值\n        # 空间使用由O(N) -> O(1)\n\n        size = len(nums)\n        if size == 0:\n            return 0\n\n        dp1 = 0\n        dp2 = nums[0]\n        for i in range(2, size+1):\n            dp1 = max(dp2, nums[i-1]+dp1)\n            dp1, dp2 = dp2, dp1\n        return dp2\n```\n\n> 时间复杂度：O(N)\n>\n> 空间复杂度：O(1)\n\n说完《打家劫舍I 》，中间穿插另外一道题目，利用二维dp来解决的一个问题。\n\n最后再说说《打家劫舍II 》和《打家劫舍III》，把这一系列的**打家劫舍**问题搞明白了，相信你对动态规划有一个较为深刻的入门体验\n\n### 案例二：不同路径「来自leetcode62」\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n\n问总共有多少条不同的路径？\n\n![image-20230605130822926](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605130822926.png)\n\n**示例 1:**\n\n```python\n输入: m = 3, n = 2\n输出: 3\n解释:\n从左上角开始，总共有 3 条路径可以到达右下角。\n\n1. 向右 -> 向右 -> 向下\n2. 向右 -> 向下 -> 向右\n3. 向下 -> 向右 -> 向右\n```\n\n**示例 2:**\n\n```python\npython复制代码输入: m = 7, n = 3\n输出: 28\n```\n\n*提示：*\n\n1 <= m, n <= 100 题目数据保证答案小于等于 2 * 10 ^ 9\n\n下面依然按照四个步骤来进行讨论：\n\n##### 步骤一：定义dp数组的含义\n\n​\t当前这道题是从左上角到右下角的，题目中规定只能向右或者向下走，所以我们必须要定义一个二维数组来保存计算过程中的值。所以，这块定义：\n\n​\t**dp[i][j]: 代表到达位置 (i, j) 的所有路径的总数**\n\n​\t即：机器人从左上角到右下角所有路径的总和，dp中每个位置的值代表行走到达 (i, j) 每个位置的总共的路径数\n\n##### 步骤二：找出关系元素间的动态方程\n\n​\t由于题目中规定只能向右或者向下走，所以在机器人行进的时候，只能是向右或向下.\n\n​\t那么，分别讨论下两种情况，想要到达位置(i, j)，可以从位置(i-1, j)或者(i, j-1)出发到达。因此，到达位置(i, j) 的总的路径数一定是 **到达位置(i-1, j)路径数** + **到达位置(i, j-1)路径数**。那么，现在可以定义动态方程：\n\n​\t**动态方程：dp[i][j] = dp[i-1][j] + dp[i][j-1]**\n\n##### 步骤三：初始化数值设定\n\n​\t很明显，在机器人走第 0 行，第 0 列的时候，无论怎么走，都只有 1 种走法。\n\n​\t因此，初始化值的设定，一定是 dp[0..m][1] 或者 dp[1][0..n] 都等于1\n\n​\t因此初始值如下：\n\n​\t**dp[0] [0….n-1] = 1;**  // 机器人一直向右走，第 0 列统统为 1\n\n​\t**dp[0…m-1] [0] = 1;**  // 机器人一直向下走，第 0 列统统为 1\n\n​\t现在，按照这个思路来整理一下代码\n\n```python\nclass Solution(object):\n\n    def uniquePaths1(self, m, n):\n\n        # 初始化表格，由于初始化0行 0列都为1。那么，先全部置为1\n        dp = [[1 for _ in range(m)] for _ in range(n)]\n\n        for i in range(1, n):\n            for j in range(1, m):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n        return dp[n-1][m-1]\n```\n\n上述代码中由于dp[[0..m][1] ][1]或者 dp[1][0..n] 都等于1，所以在定义二维数组dp时候，统统赋初始值为 1\n\n然后从位置(1, 1)开始计算每个位置的总路径数\n\n> 时间复杂度：O(M*N)\n>\n> 空间复杂度：O(M*N)\n\n既然到这里了，下面再想想看有没有可优化的地方\n\n##### 步骤四：优化\n\n​\t可以依照前面的解决的思路，应该也可以从空间上进行一定的优化\n\n​\t参照前面的案例，之前定义的是一维数组dp，优化点是每一步骤都只与前面的两个计算好的数值有关系，然后优化点就是将dp[N] -> dp1和dp2，空间复杂度由 O(N) -> O(1)，如果是很大规模的数据计算的话，空间效率提升了不少.\n\n​\t现在这个例子中的动态方程是**dp[i][j] = dp[i-1][j] + dp[i][j-1]**，很明显，每一步骤中的状态值只与左边相邻的值和上面的值相关。举例（为了方便，用 3*4 来举例）：\n\n![image-20230605131507215](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131507215.png)\n\n​\t这个完整的图片描述中，机器人从左上角的位置(1, 1)开始移动，逐渐每一步都根据动态方程进行前进，明显的可以看出机器人每移动一格，所得到的路径总和只与它的上方和左方数值有关系。也就是我们会发现，机器人移动到第2行的时候，第0行数据完全是没有用的状态。\n\n​\t因此，这个优化点就出来了，在算法设计的时候，dp仅仅定义2行N列的数组就ok了，省去了m-2行的空间开销。这个代码如果大家想明白了请自行设计出来，自己写出来一定会有更加深刻的理解，再强调：多思考，形成潜移默化的思维方式.\n\n​\t看完这个步骤之后，是不是很明显的优化点，为什么上面没有给出大家代码呢？是因为我看到貌似可以继续优化的点（粘住空间优化项了哈哈哈），那就继续在空间开销上做文章。\n\n​\t**引导：**根据上述咱们的优化方案，说道 \"机器人移动到第2行的时候，第0行数据完全是没有用的状态\"，其实当前聪明的读者你想想，再看看，下面的图中（从上图截取过来）。 其实，不仅仅是第 0 行完全没用了，而且在第2 行做移动的时候，移动到位置(i, j)的时候，计算好位置(i, j)，那么接下来，位置(i-1, j)的数据也就没用了。换句话说，边走，第 1 行开始的某些数据也就没用了，还在占着空间\n\n​\t**这块大家一定多想想，多理解，多画图**\n\n\n\n![image-20230605131650290](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131650290.png)\n\n下面按照这种思路，看下图的步骤，也画好了用一维数组进行解决问题，也画出来每一步骤与上图的类比过程：\n\n![image-20230605131721361](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131721361.png)\n\n在这里，有犯困的同学可以自己动手画一画，理解一下，个人感觉是一个很好的思维扩展\n\n接下来，就按照这样的思路进行代码实现，会发现码起来很简单\n\n```python\nclass Solution(object):\n\n    def uniquePaths2(self, m, n):\n        if m > n:\n            m, n = n, m\n\n        dp = [1 for _ in range(m)]\n\n        for i in range(1, n):\n            for j in range(1, m):\n                dp[j] = dp[j] + dp[j-1]\n\n        return dp[m-1]\n```\n\n> 时间复杂度：O(m*n)\n>\n> 空间复杂度：O(min(m ,n))\n\n是不是从思维方面简单干净了许多\n\n搞清楚上面的栗子之后呢，我们将上面的例题进行一个简单的难度增加，说白了，就是在路上打几个阻碍点\n\n来看:\n\n### 案例三：不同路径II 「来自leetcode63」\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n\n现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？\n\n![image-20230605131800138](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131800138.png)\n\n> 说明：m 和 n 的值均不超过 100。\n\n**示例 1:**\n\n```python\n代码输入:\n[\n  [0,0,0],\n  [0,1,0],\n  [0,0,0]\n]\n输出: 2\n解释:\n3x3 网格的正中间有一个障碍物。\n从左上角到右下角一共有 2 条不同的路径：\n\n1. 向右 -> 向右 -> 向下 -> 向下\n2. 向下 -> 向下 -> 向右 -> 向右\n```\n\n**咱们先看一下题中的两个关键点：** 关键点1：只能向右或者向下 关键点2：有障碍物为1， 无障碍物为0\n\n根据 关键点1 和 关键点2 依然按照四个步骤来进行讨论：\n\n##### 步骤一：定义dp数组的含义\n\n这个题目中定义的dp数组是和上一个例题中定义的dp数组的含义是相同的，但由于该题中已经定义有数组obstacleGrid，可以直接利用，无需额外开辟空间 那么，就利用obstacleGrid作为动态规划中存储计算过程中的最优值\n\n##### 步骤二：找出关系元素间的动态方程\n\n参照上一题目，规定动态方程: obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1] 由于机器人在移动过程中有障碍物，那么，对上面动态方程加一些限制条件 a.若当前 obstacleGrid[i][j] 为0。那么，直接计算动态方程下的计算过程 b.若当前 obstacleGrid[i][j] 不为0。那么，直接置该位置的值为0\n\n所以，在进行动态方程遍历的时候，先进行 obstacleGrid[i][j]的判断，再进行动态方程的计算执行\n\n##### 步骤三：初始化数值设定\n\n​\t相比于上一题目，相似的是，在机器人走第 0 行，第 0 列的时候，无论怎么走，都只有 1 种走法 \t但由于有障碍物，那走到障碍物的时候，后面都是走不下去的（下图用第一行来举例）。\n\n![image-20230605131926886](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131926886.png)\n\n​\t所以，初始化第 0 行，第 0 列的时候，障碍物 1 后面的都是不可达的。所以，初始化行和列的逻辑表达：\n\n​\t**该位置是否可达=前一个位置的状态and该位置能否可达 得到能否到达这个位置**\n\n​\t只有前一个位置为1（可达，只有1种方式） ，当前位置为0（无障碍物）这种情况才能到达该位置，然后为该位置设 1 （可达，只有1种方式）\n\n```python\n# 0 行初始化表达式: \nobstacleGrid[0][row] = int(obstacleGrid[0][row] == 0 and obstacleGrid[0][row-1] == 1)\n# 0 列初始化表达式: \nobstacleGrid[clo][0] = int(obstacleGrid[clo][0] == 0 and obstacleGrid[clo-1][0] == 1)\n```\n\n这些都准备就绪之后，按照相关思路进行编码\n\n```python\nclass Solution(object):\n\n    def uniquePathsWithObstacles1(self, obstacleGrid):\n      \t# 行列长度\n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n\n        # 如果在位置(0, 0)，哪里都去不了，直接返回0\n        if obstacleGrid[0][0] == 1:\n            return 0\n\n        # 否则，位置(0, 0)可以到达\n        obstacleGrid[0][0] = 1\n\n        # 初始化 0 列\n        for clo in range(1, m):\n            obstacleGrid[clo][0] = int(obstacleGrid[clo][0] == 0 and obstacleGrid[clo-1][0] == 1)\n\n        # 初始化 0 行\n        for row in range(1, n):\n            obstacleGrid[0][row] = int(obstacleGrid[0][row] == 0 and obstacleGrid[0][row-1] == 1)\n\n        # 从位置(1, 1)根据动态方程开始计算\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 0:\n                    obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1]\n                else:\n                    obstacleGrid[i][j] = 0\n\n        return obstacleGrid[m-1][n-1]\n```\n\n> 时间复杂度: O(mxn)\n>\n> 空间复杂度: O(1)\n\n##### 步骤四：优化\n\n​\t这块的优化先不谈了，这里基本没有什么优化点，之前都是由于自己要开辟内存空间，通过空间的优化来进行，而本题是在给定的数组中进行操作的\n\n有了这几个案例的基础之后，咱们后面把经典的《打家劫舍》系列剩下的两个题目讨论完，就先告一段落，后面也希望以不同的方式与大家多多交流，互相学习\n\n如果有读者看着累了，可以先保存，收藏下来，待消化了前面的内容，方便再回来看看。\n\n### 案例四：打家劫舍II 「来自leetcode213」\n\n你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n\n给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。\n\n**示例 1:**\n\n```python\npython复制代码输入: [2,3,2]\n输出: 3\n解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。\n```\n\n**示例 2:**\n\n```python\npython复制代码输入: [1,2,3,1]\n输出: 4\n解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。\n     偷窃到的最高金额 = 1 + 3 = 4 。\n```\n\n与《打家劫舍I》不同的是，《打家劫舍I》的屋子是线性的，而《打家劫舍II》是环状的，所以要考虑的点会增加一些，因为首位相连接的情况，咱们分为下面三种情况进行设定：\n\na. 不偷首偷尾\n\nb. 偷首不偷尾\n\nc. 首位都不偷 显然，c 种方式损失太大，不会获得最高的金额，故选取 a 和 b。 那么，下面分为两种情况，分别计算不包含首和不包含尾这两种情况来判断小偷哪种方式偷取的金额最高。\n\n下面依然按照之前的四个步骤来进行分析\n\n##### 步骤一： 定义dp数组的含义\n\n​\tdp[i] 代表的含义和之前一致，dp数组存储的值一般代表截止目前的最优值\n\n​\t所以，**dp[i] 代表到达第 i 个房屋偷得的最高金额，也就是当前最大子序和**\n\n​\t但是最后会讨论**不包含首**和**不包含尾**这两种情况下得到的dp数组的最后一位，然后获取其中较大者，就是我们要取得的最高金额\n\n##### 步骤二：找出关系元素间的动态方程\n\n​\t动态方程可参照《打家劫舍I》，有很详细的图解过程，该例子动态方程的变化和之前是完全一致的：\n\n​\t**dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])**\n\n##### 步骤三：初始化设定\n\n​\t初始化: 给没有房子时，dp一个位置，即：dp[0] \t\ta. 当size=0时，没有房子，小偷没办法偷：dp[0]=0； \t\tb. 当size=1时，有一间房子，只要偷即可：dp[1]=nums[0]\n\n![image-20230605150914733](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605150914733.png)\n\n​\t由于屋子首位相连接，所以在计算时候，直接分为两种情况。第一种略过第一个屋子，第二种略过第二个屋子，这样得到的两个数组结果。最后只要比较最后一位数值的大小就ok了。解决！\n\n该例子步骤三之后，感兴趣的同学可以自己写一下代码，和《打家劫舍I》的代码很类似，后面我写了优化后的代码，可能会更加的明白怎么写。咱们直接到步骤四，有了上面的案例，直接来看看优化后的方案:\n\n\n\n##### 步骤四：优化\n\n​\t同样从 dp[i] = max(dp[i-1], nums[i-1]+dp[i-2]) 关系来看，每一次动态变化，都与前两次状态有关系（dp[i-1], dp[i-2])，而前面的一些值是没有必要留存的，只要保存两个变量来保存过程最优值就好.\n\n​\t代码中有详细的注释：\n\n    class Solution(object):\n    def rob(self, nums):\n        # 点睛：与打家劫舍I的区别是屋子围成了一个环\n        #   那么，很明显可以分为三种情况：\n        #   1. 首位都不偷\n        #   2. 偷首不偷尾\n        #   3. 不偷首偷尾\n        # 显然，第1种方式损失太大，选取2、3。\n        # 那么，分为两种情况，分别计算不包含首和不包含尾这两种情况来判断哪个大哪个小\n    \n        # 1.dp[i] 代表当前最大子序和\n        # 2.动态方程: dp[i] = max(dp[i-1] and , nums[i-1]+dp[i-2])\n        # 3.初始化: 给没有房子时，dp一个位置，即：dp[0]\n        #   3.1 当size=0时，没有房子，dp[0]=0；\n        #   3.2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]\n    \n        # 依照《打家劫舍I》的优化方案进行计算\n    \n        # nums处理，分别切割出去首和去尾的子串\n        nums1 = nums[1:]\n        nums2 = nums[:-1]\n    \n        size = len(nums)\n        if size == 0:\n            return 0\n        if size == 1:\n            return nums[0]\n    \n        def handle(size, nums):\n            dp1 = 0\n            dp2 = nums[0]\n            for i in range(2, size+1):\n                dp1 = max(dp2, nums[i-1]+dp1)\n                dp1, dp2 = dp2, dp1\n            return dp2\n    \n        res1 = handle(size-1, nums1)\n        res2 = handle(size-1, nums2)\n    \n        return max(res1, res2)\n\n> 时间复杂度：O(N)\n>\n> 空间复杂度：O(1)\n\n再看看下面小偷遇到的情况，感叹：即使当小偷，也要步步规划才能拿到最高的金额啊...\n\n### 案例五：打家劫舍III 「来自leetcode337」\n\n在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。\n\n计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。\n\n**示例 1:**\n\n```python\n代码输入: [3,2,3,null,3,null,1]\n\n     3\n\t/ \\\n   2   3\n    \\   \\ \n     3   1\n\n输出: 7 \n解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.\n```\n\n**示例 2:**\n\n```python\n输入: [3,4,5,1,3,null,1]\n\n \t 3\n\t/ \\\n   4   5\n  / \\   \\ \n 1   3   1\n输出: 9\n解释: 小偷一晚能够盗取的最高金额 = 4 + 5 = 9.\n```\n\n题目出的很好，但是立马会给人一种小偷也不是好当的的赶脚...\n\n言归正传，咱们先来说说题目本身\n\n《打家劫舍》的小偷从一维线性到环形，再到二维矩形的屋子？是我想简单了，直接就干到树形了，是不是看着很香，而且很想，看下去，研究研究...\n\n来整理几点思路，再来按照四步走：\n\n1.由于房屋是树状的，因此，我们可以使用遍历树的传统方法进行遍历(前序、中序、后续) 2.简单的思路是，从树低进行往上遍历，拿到最优的打劫值。可以选用后续遍历 3.得到每一节点的最优值，最后选取最优的结果\n\n依然按照三个步骤来进行分析（无优化点）\n\n##### 步骤一： 定义dp数组的含义\n\n​\tdp[i]代表该节点及以下打最多的劫（拿到最多的钱）\n\n##### 步骤二：找出关系元素间的动态方程\n\n​\t根据我们每走到一个节点，都会有两种情况，那就是 **偷(1)** 与 **不偷(0)**。我们分开来讨论：\n\n​\ta. 用 **dp[0]** 代表不偷取该节点到目前为止拿到最多的钱，那么儿子节点偷不偷都ok。\n\n​\t\t所以： **dp[0] = max(left[0], left[1]) + max(right[0], right[1])**\n\n​\tb. 用 **dp[1]** 代表偷了该节点到目前为止拿到最多的钱，则儿子节点都不能被偷。\n\n​\t\t所以：**dp[1] = value + left[0] + right[0]**  (value代表该节点的价值)\n\n​\t有看不懂的地方吗？再紧接着解释一下：\n\n​\t\tleft[0]代表不偷取左孩子拿到最高的金额\n\n​\t\tleft[1]代表偷取左孩子拿到最高的金额\n\n​\t\tright[0]代表不偷取右孩子拿到最高的金额\n\n​\t\tright[1]代表偷取右孩子拿到最高的金额\n\n​\t*如果还有不太懂的话，留言或者私信我联系我，随时骚扰我哈*\n\n##### 步骤三：初始化设定\n\n​\t该例子的初始化比较简单，就是当前树的形状为空的时候，直接返回dp[0, 0]\n\n下面贴出完整代码，其中包含**树的初始化**代码 && 一大堆的注释：\n\n```python\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution():\n    def rob(self, root):\n        # 说明：\n        # 1.由于房屋是树状的，因此，我们可以使用遍历树的传统方法进行遍历(前序、中序、后续)\n        # 2.简单的思路是，从树低进行往上遍历，拿到最优的打劫值。可以选用后续遍历\n        # 3.得到每一节点的最优值，最后选取最优的结果\n\n        # 1.dp[i]代表该节点及以下拿到的最多的钱\n        # 2.动态方程：\n        #   2.1 dp[0]代表不偷该节点拿到最多的钱，则儿子节点偷不偷都ok。dp[0] = max(left[0], left[1]) + max(right[0], right[1])\n        #   2.2 dp[1]代表偷了该节点拿到最多的钱，则儿子节点都不能被偷。dp[1] = var + left[0] + right[0]\n        # 3.初始化：当前树的形状为空的时候，直接返回dp[0, 0]\n        def postTrasval(root):\n            dp = [0, 0]\n            if not root:\n                return dp\n            left = postTrasval(root.left)\n            right = postTrasval(root.right)\n\n            dp[0] = max(left[0], left[1]) + max(right[0], right[1])\n            dp[1] = root.val + left[0] + right[0]\n            return dp\n        dp = postTrasval(root)\n        return max(dp[0], dp[1])\nif __name__ == '__main__':\n    # initial tree structure\n    T = TreeNode(3)\n    T.left = TreeNode(2)\n    T.right = TreeNode(3)\n    T.left.right = TreeNode(3)\n    T.right.right = TreeNode(1)\n    # The solution to the Question\n    s = Solution()\n    print(s.rob(T))\n```\n\n\n\n# 2. 递归\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/js/算法总结.md","raw":"---\ntitle: 算法总结\ntags:\n  - JS\ncategories: JS\nkeywords: JS\ndescription: 算法总结\ntop_img: 设置false不显示顶部图片\nsticky: 数值越大越靠前\ncover: 首页封面\ncomments: false评论\nabbrlink: 1213ac56\ndate: 2023-05-31 20:18:34\nupdated: 2023-05-31 20:18:34\n---\n\n\n\n算法总结\n\n<!-- more -->\n\n# 1. 动态规划\n\n#### 传统递归 vs. DP\n\n先用一个被大佬们举例举到烂的🌰，这个栗子很烂，但是真的**很香**：必须着重**强调**.\n\n**《斐波那契（Fibonacci）数列的第n项》**\n\n**举荐理由：**在我自己看来Fibonacci是动态规划设计中的入门级案例，就好比说编程中的“hello world”，大数据中的“word count”.\n\nFibonacci几乎完美的诠释了**动态规划带来的思想和技巧**然而没有任何其他的要考虑的细枝末节，这种很清晰的方法看起来很适合整个的动态规划的思维方式，很适合入门来进行的思考方式.\n\n接下来咱们先来看题目：\n\n```题目\n题目复制代码写一个函数，输入n，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：\n\nF(0) = 0, F(1) = 1\nF(N) = F(N - 1) + F(N - 2), 其中 N > 1.\n斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。\n```\n\n比较一下传统递归解法和动态规划思想下的解决对比\n\n#### 1. 先 递归解决\n\n传统对于这种题目的思考方式会利用递归求解，做起来比较简单，就是不断的去递归调用，看下面代码：\n\n```js\nlet i = 0;\nfunction fib_recur(N){\n    console.log(i)\n    if N <= 1:\n        return N\n    return fib_recur(N-1) + fib_recur(N-2)  # 递归输出  \n}\n```\n\n输出的结果：\n\n```python\nF( 1 ) =  3\nF( 2 ) =  2\nF( 3 ) =  1\nF( 4 ) =  0\nF( 5 ) =  1\nF( 6 ) =  2\nF( 7 ) =  1\nF( 8 ) =  0\n```\n\n**重复计算**\n\n明显可以看到，总计 8 次的计算过程中，相同的计算结果有三对进行了**重复计算**（下图中同色项，不包含灰色），也就是说在递归的过程中，把曾经计算过的项进行了**又一次的重复计算**，这样对于时间效率是比较低的，唯一的好处可能就是代码看起来比较好懂，但是终归不是一个好的算法设计方法。\n\n代码中，在计算N的时候就去递归计算 `fib(N-1) + fib(N-2)`，那么，这种情况下的计算过程中。会是下面图中的一个计算过程。\n\n可以发现，会有相当一部分的重复计算，这样对于时间都是重复的消耗。\n\n> 参考图中相同颜色的项，比如说粉色的重复计算、黄色的重复计算等\n>\n> 注意：递归中没有对空间进行了增加，始终都是同样的长度，仅仅是不断的弹出和压入\n\n![image-20230605114156368](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114156368.png)\n\n为了更好的说明这种重复计算带来时间效率的低下。再比如说，相比上述图中的计算节点，再增加一个节点的计算，增加计算F(5)，那么由于递归的计算方式，会有更多的项（下图中线框中部分）进行了重复的计算。在计算`F(5)`的时候，会递归调用`F(4)`和`F(3)`，而在下图中，计算`F(4)`的时候，又会完整的去计算`F(3)`。这样，如果N很大的话，会有更大的时间消耗.\n\n这样，这棵树的规模进行进行成倍增加，时间复杂度很明显的进行了成倍的扩张。对于时间上来说是很恐怖的.\n\n时间复杂度带来的低效率严重超过了代码的可读性，所以我们可以想办法将**过去计算**过的节点**进行保存**。这样，我们就会用到下面要说的动态规划思想带来的时间上的高效.\n\n![image-20230605114342318](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114342318.png)\n\n> 时间复杂度：o(2**n) ---> 指数级\n>\n> 空间复杂度：o(n)\n\n#### 2. 后 动态规划解决\n\n**大概解释一下字面意思：**\n\n**动态规划：我们不直接去解决问题，而是在每一步解决问题的时候，达到每一步的最优情况。换句话说，就是在每一步解决问题过程中，利用过去的状态**以及**当前状态**的情况而达到一个当前的最优状态.\n\n**规划：在一般解决该类问题的时候，会有一个“填表格”的过程，无论是简单情况下的\\**一维表格**还是复杂一点的**二维表格**，都是以**开辟空间换时间**的思想，以争取最佳的时间效率. （保存过程中间值，方便后续直接使用）.\n\n**动态：**用上面的案例来说，递归解决过程中的每一步都会从基本问题不断的“自顶向下”去求解，在每一步骤中，会有相同的计算逻辑进行了重复的计算。相比于递归思想，动态规划思想增加了对历史上计算结果的保存，逐步记录下中间的计算结果，在每一步求得最优值.\n\n因此，动态规划可以避免重复计算，达到了时间上的最优，从O(2N)O(2^N)O(2N)指数级变为O(N)O(N)O(N)常数级别，相较于开辟的一段内存空间存放中间过程值的开销，是非常值得的.\n\n**那么，接下来咱们依照动态规划的思路进行对Fibonacci进行下解决**\n\n依据题中的规则：\n\nF(0) = 0, F(1) = 1\n\nF(N) = F(N - 1) + F(N - 2),  when N > 1\n\n那么，👇👇F(N) 的值只与他的前两个状态有关系👇👇\n\na. 初始化值 : F(0) = 0, F(1) = 1 b. 想要计算得到F(2)， 那么F(2) = F(0) + F(1)   -->  保存 F(2) c. 想要计算得到F(3)， 那么F(3) = F(2) + F(1)   -->  保存 F(3) d. 想要计算得到F(3)， 那么F(4) = F(3) + F(2)   -->  保存 F(4)\n\n利用动态规划思想，以一维数组辅助实现的Fibonacci，看下图\n\n![image-20230605114740415](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114740415.png)\n\n是不是很简单的思路，仅仅靠保存过程中的一些值就能很简单的利用循环就可以实现了，没必要用递归反复计算进行实现。\n\n想要计算得到第 n 个值的多少？那么，以下几点是我们必须要做到的\n\n​\ta. **定义一个一维数组**   --->  一般用dp来命名\n\n​\tb. **动态方程的设定**   --->  题中的F(N) = F(N - 1) + F(N - 2)\n\n​\tc. **初始化数值**   --->  F(0) = 0和F(1) = 1\n\n上述的 a、b 和 c 点就是动态规划思想的几个核心要素\n\n下面来看下要实现的代码（代码中，用dp来代替上面的F()）\n\n```python\nclass Solution(object):\n    def fib(self, N):\n        if N == 0:\n            return 0\n        dp = [0 for _ in range(N+1)] # 1定义dp[i]保存第i个计算得到的数值\n        dp[0] = 0   \t# 2初始化\n        dp[1] = 1\t\t\t# 2初始化\n        for i in range(2, N+1):\t# 3动态方程实现，由于0和1都实现了赋值，现在需要从第2个位置开始赋值\n            dp[i] = dp[i - 1] + dp[i - 2]\n       \n        print dp\t\t # 记录计算过程中的次数，与上述递归形成对比\n        return dp[N]\n```\n\n输出:\n\n```python\n[0, 1, 1, 2, 3]\n3\n```\n\n以上，最重要的就是1 2 3 点，而执行过程参照**输出**对比递归算法，计算少了很多，同样的计算只计算了一次。\n\n> 时间复杂度：O(N)\n>\n> 空间复杂度：O(N)\n\n介绍了上面的内容了，此处来条分割线吧，针对上述的 **递归 vs. DP**\n\n------\n\n既然动态规划的方案也介绍了，下面咱们再仔细看看，是否有优化的空间，毕竟对于一个算法方案的设计，都有找到其优化点，无论是时间还是空间的效率都想要达到一个理想的值。\n\n#### 3. 动态规划 + 优化\n\n咱们看下这张图解，发现每个计算节点都**只与前两个项有关系**。换句话说，咱们只要保存两个值就好了，计算新的节点值的时候，把新的值赋值给前两个值的第一个就好了\n\n![image-20230605115233956](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115233956.png)\n\n话说只要两个值，现在定义两个变量 dp1 和 dp2。那么，现在咱们一步一步模拟一下：\n\na. 初始化值 : F(0) = 0, F(1) = 1\n\n\n\n![image-20230605115254829](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115254829.png)\n\nb. 想要计算得到F(2)， 那么F(2) = F(0) + F(1) --> 保存 F(2)\n\n 顺带将F(1)赋值给dp1， f(2)赋值给dp2\n\n![image-20230605115319902](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115319902.png)\n\nc. 想要计算得到F(3)， 那么F(3) = F(2) + F(1) --> 保存 F(3)\n\n 顺带将F(2)赋值给dp1， F(3)赋值给dp2\n\n![image-20230605115336720](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115336720.png)\n\nd. 想要计算得到F(3)， 那么F(4) = F(3) + F(2) --> 保存 F(4)\n\n 顺带将F(3)赋值给dp1， F(4)赋值给dp2\n\n![image-20230605115356096](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115356096.png)\n\n至此为止，整个过程仅仅用到了两个变量来存储过程中产生的值，也就之前没有优化的空间效率得到了优化\n\n咱们把代码也贴一下吧，供参考\n\n```python\nclass Solution(object):\n    def fib_dp1(self, N):\n        if N == 0: return 0\n\n        dp1, dp2 = 0, 1\n\n        for i in range(2, N+1):\n            dp1 = dp1 + dp2\n            dp1, dp2 = dp2, dp1\n\n        return dp2\n```\n\n看起来是不是更加简洁了。\n\n三点说明：**1.定义dp数组 2.动态方程 3.初始化数值**\n\n这也说明了为什么用**斐波那契数列**来引入**动态规划**的，因为斐波那契数列本身就明确的告诉你动态方程是什么，初始化的值是什么，所以好好的体会这种思想，尤其是从传统递归 -> 动态规划的思想解决，再到优化的方面，很值得深思。\n\n那接下来，咱们就找几个有代表性的栗子来尝尝鲜\n\n![image-20230605115624586](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115624586.png)\n\n## 二、动态规划四大解题步骤处理问题\n\n上面用斐波那契数列问题，引出了下面的几点，在这里再详细赘述一下\n\n在后面的案例中将会尽量严格按照这几个步骤进行解决问题\n\n> 步骤一：定义dp数组的含义\n>\n> 步骤二：定义状态转移方程\n>\n> 步骤三：初始化过程转移的初始值\n>\n> 步骤四：可优化点(可选)\n\n#### 步骤一：定义dp数组的含义\n\n绝大部分情况下，我们需要定义一维数组或者二维数组进行存储在计算过程中产生的最优值，这里为什么是最优值呢？是因为在解决问题过程中，一般情况dp数组用来保存**从开始到当前情况的最优值**，故而保存的是截止到目前的最优值，避免重复计算（这里看起来思维有混乱的同学们，想想上面Fibonacci 递归解法和动态规划的对比）\n\n**所以，dp无论是一维的还是二维的，要想清楚代表什么，一般来说代表的是截止到目前情况下的最优值**\n\n#### 步骤二：定义状态转移方程\n\n什么是动态转移方程？ 如果有一个问题摆在我们面前，然后这个问题在解决的过程中，会发现有很多的重叠的子问题，重叠子结构，而通过这些子问题的解决，最终将会把该问题进行解决\n\n通俗来说，在解决问题过程中，能够发现一个不断解决子问题的动态规律，比如说Fibonacci中的F(N) = F(N - 1) + F(N - 2)，而在其他的可以用动态规划解决的问题中，需要我们自己去发现这样的内在规律。这个是最难的也是最终于要的，只要这一步解决了，接下来我们解决这个问题基本就没问题了.\n\n#### 步骤三：初始化过程转移的初始值\n\n顺着步骤二的思路来，既然动态方程定义好了，是不是需要一个**支点**来撬动它进行不断的计算下去。\n\n那么，这个**支点**就需要我们来初始定义，将动态方程激活，进行计算。举例来说Fibonacci中的F(0) = 0和F(1) = 1，有了这两个值，它的动态方程F(N) = F(N - 1) + F(N - 2)就可以进行下去了\n\n这个就是我们要想好的初始值，实际问题可能还需要我们想想清楚.\n\n#### 步骤四：可优化点(可选)\n\n可优化的这里，最重要的会是dp数组这块，也会有不同问题不同的优化点\n\n在例子中，我们会进行不同的优化.\n\n总之一点，建议大家动笔多画画图，很多细节慢慢就会出现了.\n\n### 案例一：打家劫舍I 「来自leetcode198」\n\n你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n\n给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。\n\n**示例 1:**\n\n```题目\n代码输入: [1,2,3,1]\n输出: 4\n解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n     偷窃到的最高金额 = 1 + 3 = 4 。\n```\n\n**示例2：**\n\n```python\n输入: [2,7,9,3,1]\n输出: 12\n解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。\n     偷窃到的最高金额 = 2 + 9 + 1 = 12 。\n```\n\n把经典案例系列拆分开讨论下吧，咱们首先将「打家劫舍I」来看看\n\n该题可以用动态规划的思想来解决的原因是，在小偷不断偷取的过程中，始终想要偷得的物品价值最大，最优，每一步骤都与之前的偷取情况有关系，而且每一步都要考虑是否能偷，是否会带来最大利益，这就使得我们可以用动态规划的思想来解决问题。  然后严格按照四步骤进行解题.\n\n##### 步骤一： 定义dp数组的含义\n\n​\t之前提到的，dp数组存储的值一般代表截止目前的最优值，在该题目中，我们定义：\n\n​\t**dp[i] 代表到达第 i 个房屋偷得的最高金额，也就是当前最大子序和**\n\n​\t无论房屋有几间，最后我们取到dp数组的最后一个值就求得小偷偷得的最高金额\n\n##### 步骤二：找出关系元素间的动态方程\n\n​\t动态规划解决的问题，一般来说就是解决最优子问题，“自顶向下” 的去不断的计算每一步骤的最优值。\n\n​\t也就是想要得到dp[i]的值，我们必须要知道dp[i-1]，dp[i-2]，dp[i-3] ... 的每一步的最优值，在这个状态转移的过程中，我们必须要想清楚怎么去定义关系式。然而在每一步的计算中，都与前几项有关系，这个固定的关系就是我们要寻找的重叠子问题，也同样是接下来要详细定义的动态方程\n\n​\t该题目中，当小偷到达第 i 个屋子的时候，他的选择有两种：一种是偷，另外一种是不偷， 然后选择价值较大者\n\n​\ta. 偷的情况计算：必然是dp[3] = nums[2] + dp[1]，如果是偷取该屋子的话，相邻屋子是不能偷取的，因此，通项式子是：dp[i] =  nums[i-1] + dp[i-2]\n\n![image-20230605123128436](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605123128436.png)\n\n b. 不偷的情况计算：必然是dp[3] = dp[2]，如果是不偷取该屋子的话，相邻屋子就是其最优值，因此，通项式子是：dp[i] = dp[i-1]\n\n![image-20230605123322989](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605123322989.png)\n\n​\t最后，要想偷得最高金额，那么，必须选取在偷与不偷之间的最大值作为我们是否选取的关键点。即：\n\n​\t**动态方程:** dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])\n\n##### 步骤三：初始化数值设定\n\n​\t初始化: 给没有房子时，dp一个位置，即：dp[0] \t\t1 当size=0时，没有房子，dp[0]=0； \t\t2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]\n\n那么，按照这个思路来整理一下代码：\n\n```python\nclass Solution(object):\n\n    def rob(self, nums):\n      # 1.dp[i] 代表当前最大子序和\n      # 2.动态方程: dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])\n      # 3.初始化: 给没有房子时，dp一个位置，即：dp[0]\n      #   3.1 当size=0时，没有房子，dp[0]=0；\n      #   3.2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]\n      size = len(nums)\n      if size == 0:\n        return 0\n\n      dp = [0 for _ in range(size+1)]\n\n      dp[0] = 0\n      dp[1] = nums[0]\n      for i in range(2, size+1):\n        dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])\n        return dp[size]\n```\n\n> 时间复杂度：O(N)\n>\n> 空间复杂度：O(N)\n\n那下面想想看有没有可优化的地方，尽量的释放一部分计算机资源\n\n##### 步骤四：优化\n\n​\t从 dp[i] = max(dp[i-1], nums[i-1]+dp[i-2]) 关系来看，每一次动态变化，都与前两次状态有关系（dp[i-1], dp[i-2])，而前面的一些值是没有必要留存的.\n\n​\t所以，dp只需要定义两个变量就好，将空间复杂度降为O(1)\n\n```python\nclass Solution(object):\n\n    def rob_o(self, nums):\n        # 依照上面的思路，其实我们用到的数据永远都是dp的dp[i-1]和dp[i-2]两个变量\n        # 因此，我们可以使用两个变量来存放前两个状态值\n        # 空间使用由O(N) -> O(1)\n\n        size = len(nums)\n        if size == 0:\n            return 0\n\n        dp1 = 0\n        dp2 = nums[0]\n        for i in range(2, size+1):\n            dp1 = max(dp2, nums[i-1]+dp1)\n            dp1, dp2 = dp2, dp1\n        return dp2\n```\n\n> 时间复杂度：O(N)\n>\n> 空间复杂度：O(1)\n\n说完《打家劫舍I 》，中间穿插另外一道题目，利用二维dp来解决的一个问题。\n\n最后再说说《打家劫舍II 》和《打家劫舍III》，把这一系列的**打家劫舍**问题搞明白了，相信你对动态规划有一个较为深刻的入门体验\n\n### 案例二：不同路径「来自leetcode62」\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n\n问总共有多少条不同的路径？\n\n![image-20230605130822926](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605130822926.png)\n\n**示例 1:**\n\n```python\n输入: m = 3, n = 2\n输出: 3\n解释:\n从左上角开始，总共有 3 条路径可以到达右下角。\n\n1. 向右 -> 向右 -> 向下\n2. 向右 -> 向下 -> 向右\n3. 向下 -> 向右 -> 向右\n```\n\n**示例 2:**\n\n```python\npython复制代码输入: m = 7, n = 3\n输出: 28\n```\n\n*提示：*\n\n1 <= m, n <= 100 题目数据保证答案小于等于 2 * 10 ^ 9\n\n下面依然按照四个步骤来进行讨论：\n\n##### 步骤一：定义dp数组的含义\n\n​\t当前这道题是从左上角到右下角的，题目中规定只能向右或者向下走，所以我们必须要定义一个二维数组来保存计算过程中的值。所以，这块定义：\n\n​\t**dp[i][j]: 代表到达位置 (i, j) 的所有路径的总数**\n\n​\t即：机器人从左上角到右下角所有路径的总和，dp中每个位置的值代表行走到达 (i, j) 每个位置的总共的路径数\n\n##### 步骤二：找出关系元素间的动态方程\n\n​\t由于题目中规定只能向右或者向下走，所以在机器人行进的时候，只能是向右或向下.\n\n​\t那么，分别讨论下两种情况，想要到达位置(i, j)，可以从位置(i-1, j)或者(i, j-1)出发到达。因此，到达位置(i, j) 的总的路径数一定是 **到达位置(i-1, j)路径数** + **到达位置(i, j-1)路径数**。那么，现在可以定义动态方程：\n\n​\t**动态方程：dp[i][j] = dp[i-1][j] + dp[i][j-1]**\n\n##### 步骤三：初始化数值设定\n\n​\t很明显，在机器人走第 0 行，第 0 列的时候，无论怎么走，都只有 1 种走法。\n\n​\t因此，初始化值的设定，一定是 dp[0..m][1] 或者 dp[1][0..n] 都等于1\n\n​\t因此初始值如下：\n\n​\t**dp[0] [0….n-1] = 1;**  // 机器人一直向右走，第 0 列统统为 1\n\n​\t**dp[0…m-1] [0] = 1;**  // 机器人一直向下走，第 0 列统统为 1\n\n​\t现在，按照这个思路来整理一下代码\n\n```python\nclass Solution(object):\n\n    def uniquePaths1(self, m, n):\n\n        # 初始化表格，由于初始化0行 0列都为1。那么，先全部置为1\n        dp = [[1 for _ in range(m)] for _ in range(n)]\n\n        for i in range(1, n):\n            for j in range(1, m):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n        return dp[n-1][m-1]\n```\n\n上述代码中由于dp[[0..m][1] ][1]或者 dp[1][0..n] 都等于1，所以在定义二维数组dp时候，统统赋初始值为 1\n\n然后从位置(1, 1)开始计算每个位置的总路径数\n\n> 时间复杂度：O(M*N)\n>\n> 空间复杂度：O(M*N)\n\n既然到这里了，下面再想想看有没有可优化的地方\n\n##### 步骤四：优化\n\n​\t可以依照前面的解决的思路，应该也可以从空间上进行一定的优化\n\n​\t参照前面的案例，之前定义的是一维数组dp，优化点是每一步骤都只与前面的两个计算好的数值有关系，然后优化点就是将dp[N] -> dp1和dp2，空间复杂度由 O(N) -> O(1)，如果是很大规模的数据计算的话，空间效率提升了不少.\n\n​\t现在这个例子中的动态方程是**dp[i][j] = dp[i-1][j] + dp[i][j-1]**，很明显，每一步骤中的状态值只与左边相邻的值和上面的值相关。举例（为了方便，用 3*4 来举例）：\n\n![image-20230605131507215](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131507215.png)\n\n​\t这个完整的图片描述中，机器人从左上角的位置(1, 1)开始移动，逐渐每一步都根据动态方程进行前进，明显的可以看出机器人每移动一格，所得到的路径总和只与它的上方和左方数值有关系。也就是我们会发现，机器人移动到第2行的时候，第0行数据完全是没有用的状态。\n\n​\t因此，这个优化点就出来了，在算法设计的时候，dp仅仅定义2行N列的数组就ok了，省去了m-2行的空间开销。这个代码如果大家想明白了请自行设计出来，自己写出来一定会有更加深刻的理解，再强调：多思考，形成潜移默化的思维方式.\n\n​\t看完这个步骤之后，是不是很明显的优化点，为什么上面没有给出大家代码呢？是因为我看到貌似可以继续优化的点（粘住空间优化项了哈哈哈），那就继续在空间开销上做文章。\n\n​\t**引导：**根据上述咱们的优化方案，说道 \"机器人移动到第2行的时候，第0行数据完全是没有用的状态\"，其实当前聪明的读者你想想，再看看，下面的图中（从上图截取过来）。 其实，不仅仅是第 0 行完全没用了，而且在第2 行做移动的时候，移动到位置(i, j)的时候，计算好位置(i, j)，那么接下来，位置(i-1, j)的数据也就没用了。换句话说，边走，第 1 行开始的某些数据也就没用了，还在占着空间\n\n​\t**这块大家一定多想想，多理解，多画图**\n\n\n\n![image-20230605131650290](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131650290.png)\n\n下面按照这种思路，看下图的步骤，也画好了用一维数组进行解决问题，也画出来每一步骤与上图的类比过程：\n\n![image-20230605131721361](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131721361.png)\n\n在这里，有犯困的同学可以自己动手画一画，理解一下，个人感觉是一个很好的思维扩展\n\n接下来，就按照这样的思路进行代码实现，会发现码起来很简单\n\n```python\nclass Solution(object):\n\n    def uniquePaths2(self, m, n):\n        if m > n:\n            m, n = n, m\n\n        dp = [1 for _ in range(m)]\n\n        for i in range(1, n):\n            for j in range(1, m):\n                dp[j] = dp[j] + dp[j-1]\n\n        return dp[m-1]\n```\n\n> 时间复杂度：O(m*n)\n>\n> 空间复杂度：O(min(m ,n))\n\n是不是从思维方面简单干净了许多\n\n搞清楚上面的栗子之后呢，我们将上面的例题进行一个简单的难度增加，说白了，就是在路上打几个阻碍点\n\n来看:\n\n### 案例三：不同路径II 「来自leetcode63」\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n\n现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？\n\n![image-20230605131800138](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131800138.png)\n\n> 说明：m 和 n 的值均不超过 100。\n\n**示例 1:**\n\n```python\n代码输入:\n[\n  [0,0,0],\n  [0,1,0],\n  [0,0,0]\n]\n输出: 2\n解释:\n3x3 网格的正中间有一个障碍物。\n从左上角到右下角一共有 2 条不同的路径：\n\n1. 向右 -> 向右 -> 向下 -> 向下\n2. 向下 -> 向下 -> 向右 -> 向右\n```\n\n**咱们先看一下题中的两个关键点：** 关键点1：只能向右或者向下 关键点2：有障碍物为1， 无障碍物为0\n\n根据 关键点1 和 关键点2 依然按照四个步骤来进行讨论：\n\n##### 步骤一：定义dp数组的含义\n\n这个题目中定义的dp数组是和上一个例题中定义的dp数组的含义是相同的，但由于该题中已经定义有数组obstacleGrid，可以直接利用，无需额外开辟空间 那么，就利用obstacleGrid作为动态规划中存储计算过程中的最优值\n\n##### 步骤二：找出关系元素间的动态方程\n\n参照上一题目，规定动态方程: obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1] 由于机器人在移动过程中有障碍物，那么，对上面动态方程加一些限制条件 a.若当前 obstacleGrid[i][j] 为0。那么，直接计算动态方程下的计算过程 b.若当前 obstacleGrid[i][j] 不为0。那么，直接置该位置的值为0\n\n所以，在进行动态方程遍历的时候，先进行 obstacleGrid[i][j]的判断，再进行动态方程的计算执行\n\n##### 步骤三：初始化数值设定\n\n​\t相比于上一题目，相似的是，在机器人走第 0 行，第 0 列的时候，无论怎么走，都只有 1 种走法 \t但由于有障碍物，那走到障碍物的时候，后面都是走不下去的（下图用第一行来举例）。\n\n![image-20230605131926886](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131926886.png)\n\n​\t所以，初始化第 0 行，第 0 列的时候，障碍物 1 后面的都是不可达的。所以，初始化行和列的逻辑表达：\n\n​\t**该位置是否可达=前一个位置的状态and该位置能否可达 得到能否到达这个位置**\n\n​\t只有前一个位置为1（可达，只有1种方式） ，当前位置为0（无障碍物）这种情况才能到达该位置，然后为该位置设 1 （可达，只有1种方式）\n\n```python\n# 0 行初始化表达式: \nobstacleGrid[0][row] = int(obstacleGrid[0][row] == 0 and obstacleGrid[0][row-1] == 1)\n# 0 列初始化表达式: \nobstacleGrid[clo][0] = int(obstacleGrid[clo][0] == 0 and obstacleGrid[clo-1][0] == 1)\n```\n\n这些都准备就绪之后，按照相关思路进行编码\n\n```python\nclass Solution(object):\n\n    def uniquePathsWithObstacles1(self, obstacleGrid):\n      \t# 行列长度\n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n\n        # 如果在位置(0, 0)，哪里都去不了，直接返回0\n        if obstacleGrid[0][0] == 1:\n            return 0\n\n        # 否则，位置(0, 0)可以到达\n        obstacleGrid[0][0] = 1\n\n        # 初始化 0 列\n        for clo in range(1, m):\n            obstacleGrid[clo][0] = int(obstacleGrid[clo][0] == 0 and obstacleGrid[clo-1][0] == 1)\n\n        # 初始化 0 行\n        for row in range(1, n):\n            obstacleGrid[0][row] = int(obstacleGrid[0][row] == 0 and obstacleGrid[0][row-1] == 1)\n\n        # 从位置(1, 1)根据动态方程开始计算\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 0:\n                    obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1]\n                else:\n                    obstacleGrid[i][j] = 0\n\n        return obstacleGrid[m-1][n-1]\n```\n\n> 时间复杂度: O(mxn)\n>\n> 空间复杂度: O(1)\n\n##### 步骤四：优化\n\n​\t这块的优化先不谈了，这里基本没有什么优化点，之前都是由于自己要开辟内存空间，通过空间的优化来进行，而本题是在给定的数组中进行操作的\n\n有了这几个案例的基础之后，咱们后面把经典的《打家劫舍》系列剩下的两个题目讨论完，就先告一段落，后面也希望以不同的方式与大家多多交流，互相学习\n\n如果有读者看着累了，可以先保存，收藏下来，待消化了前面的内容，方便再回来看看。\n\n### 案例四：打家劫舍II 「来自leetcode213」\n\n你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n\n给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。\n\n**示例 1:**\n\n```python\npython复制代码输入: [2,3,2]\n输出: 3\n解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。\n```\n\n**示例 2:**\n\n```python\npython复制代码输入: [1,2,3,1]\n输出: 4\n解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。\n     偷窃到的最高金额 = 1 + 3 = 4 。\n```\n\n与《打家劫舍I》不同的是，《打家劫舍I》的屋子是线性的，而《打家劫舍II》是环状的，所以要考虑的点会增加一些，因为首位相连接的情况，咱们分为下面三种情况进行设定：\n\na. 不偷首偷尾\n\nb. 偷首不偷尾\n\nc. 首位都不偷 显然，c 种方式损失太大，不会获得最高的金额，故选取 a 和 b。 那么，下面分为两种情况，分别计算不包含首和不包含尾这两种情况来判断小偷哪种方式偷取的金额最高。\n\n下面依然按照之前的四个步骤来进行分析\n\n##### 步骤一： 定义dp数组的含义\n\n​\tdp[i] 代表的含义和之前一致，dp数组存储的值一般代表截止目前的最优值\n\n​\t所以，**dp[i] 代表到达第 i 个房屋偷得的最高金额，也就是当前最大子序和**\n\n​\t但是最后会讨论**不包含首**和**不包含尾**这两种情况下得到的dp数组的最后一位，然后获取其中较大者，就是我们要取得的最高金额\n\n##### 步骤二：找出关系元素间的动态方程\n\n​\t动态方程可参照《打家劫舍I》，有很详细的图解过程，该例子动态方程的变化和之前是完全一致的：\n\n​\t**dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])**\n\n##### 步骤三：初始化设定\n\n​\t初始化: 给没有房子时，dp一个位置，即：dp[0] \t\ta. 当size=0时，没有房子，小偷没办法偷：dp[0]=0； \t\tb. 当size=1时，有一间房子，只要偷即可：dp[1]=nums[0]\n\n![image-20230605150914733](https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605150914733.png)\n\n​\t由于屋子首位相连接，所以在计算时候，直接分为两种情况。第一种略过第一个屋子，第二种略过第二个屋子，这样得到的两个数组结果。最后只要比较最后一位数值的大小就ok了。解决！\n\n该例子步骤三之后，感兴趣的同学可以自己写一下代码，和《打家劫舍I》的代码很类似，后面我写了优化后的代码，可能会更加的明白怎么写。咱们直接到步骤四，有了上面的案例，直接来看看优化后的方案:\n\n\n\n##### 步骤四：优化\n\n​\t同样从 dp[i] = max(dp[i-1], nums[i-1]+dp[i-2]) 关系来看，每一次动态变化，都与前两次状态有关系（dp[i-1], dp[i-2])，而前面的一些值是没有必要留存的，只要保存两个变量来保存过程最优值就好.\n\n​\t代码中有详细的注释：\n\n    class Solution(object):\n    def rob(self, nums):\n        # 点睛：与打家劫舍I的区别是屋子围成了一个环\n        #   那么，很明显可以分为三种情况：\n        #   1. 首位都不偷\n        #   2. 偷首不偷尾\n        #   3. 不偷首偷尾\n        # 显然，第1种方式损失太大，选取2、3。\n        # 那么，分为两种情况，分别计算不包含首和不包含尾这两种情况来判断哪个大哪个小\n    \n        # 1.dp[i] 代表当前最大子序和\n        # 2.动态方程: dp[i] = max(dp[i-1] and , nums[i-1]+dp[i-2])\n        # 3.初始化: 给没有房子时，dp一个位置，即：dp[0]\n        #   3.1 当size=0时，没有房子，dp[0]=0；\n        #   3.2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]\n    \n        # 依照《打家劫舍I》的优化方案进行计算\n    \n        # nums处理，分别切割出去首和去尾的子串\n        nums1 = nums[1:]\n        nums2 = nums[:-1]\n    \n        size = len(nums)\n        if size == 0:\n            return 0\n        if size == 1:\n            return nums[0]\n    \n        def handle(size, nums):\n            dp1 = 0\n            dp2 = nums[0]\n            for i in range(2, size+1):\n                dp1 = max(dp2, nums[i-1]+dp1)\n                dp1, dp2 = dp2, dp1\n            return dp2\n    \n        res1 = handle(size-1, nums1)\n        res2 = handle(size-1, nums2)\n    \n        return max(res1, res2)\n\n> 时间复杂度：O(N)\n>\n> 空间复杂度：O(1)\n\n再看看下面小偷遇到的情况，感叹：即使当小偷，也要步步规划才能拿到最高的金额啊...\n\n### 案例五：打家劫舍III 「来自leetcode337」\n\n在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。\n\n计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。\n\n**示例 1:**\n\n```python\n代码输入: [3,2,3,null,3,null,1]\n\n     3\n\t/ \\\n   2   3\n    \\   \\ \n     3   1\n\n输出: 7 \n解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.\n```\n\n**示例 2:**\n\n```python\n输入: [3,4,5,1,3,null,1]\n\n \t 3\n\t/ \\\n   4   5\n  / \\   \\ \n 1   3   1\n输出: 9\n解释: 小偷一晚能够盗取的最高金额 = 4 + 5 = 9.\n```\n\n题目出的很好，但是立马会给人一种小偷也不是好当的的赶脚...\n\n言归正传，咱们先来说说题目本身\n\n《打家劫舍》的小偷从一维线性到环形，再到二维矩形的屋子？是我想简单了，直接就干到树形了，是不是看着很香，而且很想，看下去，研究研究...\n\n来整理几点思路，再来按照四步走：\n\n1.由于房屋是树状的，因此，我们可以使用遍历树的传统方法进行遍历(前序、中序、后续) 2.简单的思路是，从树低进行往上遍历，拿到最优的打劫值。可以选用后续遍历 3.得到每一节点的最优值，最后选取最优的结果\n\n依然按照三个步骤来进行分析（无优化点）\n\n##### 步骤一： 定义dp数组的含义\n\n​\tdp[i]代表该节点及以下打最多的劫（拿到最多的钱）\n\n##### 步骤二：找出关系元素间的动态方程\n\n​\t根据我们每走到一个节点，都会有两种情况，那就是 **偷(1)** 与 **不偷(0)**。我们分开来讨论：\n\n​\ta. 用 **dp[0]** 代表不偷取该节点到目前为止拿到最多的钱，那么儿子节点偷不偷都ok。\n\n​\t\t所以： **dp[0] = max(left[0], left[1]) + max(right[0], right[1])**\n\n​\tb. 用 **dp[1]** 代表偷了该节点到目前为止拿到最多的钱，则儿子节点都不能被偷。\n\n​\t\t所以：**dp[1] = value + left[0] + right[0]**  (value代表该节点的价值)\n\n​\t有看不懂的地方吗？再紧接着解释一下：\n\n​\t\tleft[0]代表不偷取左孩子拿到最高的金额\n\n​\t\tleft[1]代表偷取左孩子拿到最高的金额\n\n​\t\tright[0]代表不偷取右孩子拿到最高的金额\n\n​\t\tright[1]代表偷取右孩子拿到最高的金额\n\n​\t*如果还有不太懂的话，留言或者私信我联系我，随时骚扰我哈*\n\n##### 步骤三：初始化设定\n\n​\t该例子的初始化比较简单，就是当前树的形状为空的时候，直接返回dp[0, 0]\n\n下面贴出完整代码，其中包含**树的初始化**代码 && 一大堆的注释：\n\n```python\n# Definition for a binary tree node.\nclass TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution():\n    def rob(self, root):\n        # 说明：\n        # 1.由于房屋是树状的，因此，我们可以使用遍历树的传统方法进行遍历(前序、中序、后续)\n        # 2.简单的思路是，从树低进行往上遍历，拿到最优的打劫值。可以选用后续遍历\n        # 3.得到每一节点的最优值，最后选取最优的结果\n\n        # 1.dp[i]代表该节点及以下拿到的最多的钱\n        # 2.动态方程：\n        #   2.1 dp[0]代表不偷该节点拿到最多的钱，则儿子节点偷不偷都ok。dp[0] = max(left[0], left[1]) + max(right[0], right[1])\n        #   2.2 dp[1]代表偷了该节点拿到最多的钱，则儿子节点都不能被偷。dp[1] = var + left[0] + right[0]\n        # 3.初始化：当前树的形状为空的时候，直接返回dp[0, 0]\n        def postTrasval(root):\n            dp = [0, 0]\n            if not root:\n                return dp\n            left = postTrasval(root.left)\n            right = postTrasval(root.right)\n\n            dp[0] = max(left[0], left[1]) + max(right[0], right[1])\n            dp[1] = root.val + left[0] + right[0]\n            return dp\n        dp = postTrasval(root)\n        return max(dp[0], dp[1])\nif __name__ == '__main__':\n    # initial tree structure\n    T = TreeNode(3)\n    T.left = TreeNode(2)\n    T.right = TreeNode(3)\n    T.left.right = TreeNode(3)\n    T.right.right = TreeNode(1)\n    # The solution to the Question\n    s = Solution()\n    print(s.rob(T))\n```\n\n\n\n# 2. 递归\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"js/算法总结","published":1,"layout":"post","photos":[],"link":"","_id":"clijtrgcd000yyswh2fu02taf","content":"<p>算法总结</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1-动态规划\"><a href=\"#1-动态规划\" class=\"headerlink\" title=\"1. 动态规划\"></a>1. 动态规划</h1><h4 id=\"传统递归-vs-DP\"><a href=\"#传统递归-vs-DP\" class=\"headerlink\" title=\"传统递归 vs. DP\"></a>传统递归 vs. DP</h4><p>先用一个被大佬们举例举到烂的🌰，这个栗子很烂，但是真的<strong>很香</strong>：必须着重<strong>强调</strong>.</p>\n<p><strong>《斐波那契（Fibonacci）数列的第n项》</strong></p>\n<p><strong>举荐理由：</strong>在我自己看来Fibonacci是动态规划设计中的入门级案例，就好比说编程中的“hello world”，大数据中的“word count”.</p>\n<p>Fibonacci几乎完美的诠释了<strong>动态规划带来的思想和技巧</strong>然而没有任何其他的要考虑的细枝末节，这种很清晰的方法看起来很适合整个的动态规划的思维方式，很适合入门来进行的思考方式.</p>\n<p>接下来咱们先来看题目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">题目复制代码写一个函数，输入n，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：</span><br><span class=\"line\"></span><br><span class=\"line\">F(0) = 0, F(1) = 1</span><br><span class=\"line\">F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</span><br><span class=\"line\">斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</span><br></pre></td></tr></table></figure>\n\n<p>比较一下传统递归解法和动态规划思想下的解决对比</p>\n<h4 id=\"1-先-递归解决\"><a href=\"#1-先-递归解决\" class=\"headerlink\" title=\"1. 先 递归解决\"></a>1. 先 递归解决</h4><p>传统对于这种题目的思考方式会利用递归求解，做起来比较简单，就是不断的去递归调用，看下面代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fib_recur</span>(<span class=\"params\">N</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> N &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">fib_recur</span>(N-<span class=\"number\">1</span>) + <span class=\"title function_\">fib_recur</span>(N-<span class=\"number\">2</span>)  # 递归输出  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出的结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F( <span class=\"number\">1</span> ) =  <span class=\"number\">3</span></span><br><span class=\"line\">F( <span class=\"number\">2</span> ) =  <span class=\"number\">2</span></span><br><span class=\"line\">F( <span class=\"number\">3</span> ) =  <span class=\"number\">1</span></span><br><span class=\"line\">F( <span class=\"number\">4</span> ) =  <span class=\"number\">0</span></span><br><span class=\"line\">F( <span class=\"number\">5</span> ) =  <span class=\"number\">1</span></span><br><span class=\"line\">F( <span class=\"number\">6</span> ) =  <span class=\"number\">2</span></span><br><span class=\"line\">F( <span class=\"number\">7</span> ) =  <span class=\"number\">1</span></span><br><span class=\"line\">F( <span class=\"number\">8</span> ) =  <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>重复计算</strong></p>\n<p>明显可以看到，总计 8 次的计算过程中，相同的计算结果有三对进行了<strong>重复计算</strong>（下图中同色项，不包含灰色），也就是说在递归的过程中，把曾经计算过的项进行了<strong>又一次的重复计算</strong>，这样对于时间效率是比较低的，唯一的好处可能就是代码看起来比较好懂，但是终归不是一个好的算法设计方法。</p>\n<p>代码中，在计算N的时候就去递归计算 <code>fib(N-1) + fib(N-2)</code>，那么，这种情况下的计算过程中。会是下面图中的一个计算过程。</p>\n<p>可以发现，会有相当一部分的重复计算，这样对于时间都是重复的消耗。</p>\n<blockquote>\n<p>参考图中相同颜色的项，比如说粉色的重复计算、黄色的重复计算等</p>\n<p>注意：递归中没有对空间进行了增加，始终都是同样的长度，仅仅是不断的弹出和压入</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114156368.png\" alt=\"image-20230605114156368\"></p>\n<p>为了更好的说明这种重复计算带来时间效率的低下。再比如说，相比上述图中的计算节点，再增加一个节点的计算，增加计算F(5)，那么由于递归的计算方式，会有更多的项（下图中线框中部分）进行了重复的计算。在计算<code>F(5)</code>的时候，会递归调用<code>F(4)</code>和<code>F(3)</code>，而在下图中，计算<code>F(4)</code>的时候，又会完整的去计算<code>F(3)</code>。这样，如果N很大的话，会有更大的时间消耗.</p>\n<p>这样，这棵树的规模进行进行成倍增加，时间复杂度很明显的进行了成倍的扩张。对于时间上来说是很恐怖的.</p>\n<p>时间复杂度带来的低效率严重超过了代码的可读性，所以我们可以想办法将<strong>过去计算</strong>过的节点<strong>进行保存</strong>。这样，我们就会用到下面要说的动态规划思想带来的时间上的高效.</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114342318.png\" alt=\"image-20230605114342318\"></p>\n<blockquote>\n<p>时间复杂度：o(2**n) —&gt; 指数级</p>\n<p>空间复杂度：o(n)</p>\n</blockquote>\n<h4 id=\"2-后-动态规划解决\"><a href=\"#2-后-动态规划解决\" class=\"headerlink\" title=\"2. 后 动态规划解决\"></a>2. 后 动态规划解决</h4><p><strong>大概解释一下字面意思：</strong></p>\n<p><strong>动态规划：我们不直接去解决问题，而是在每一步解决问题的时候，达到每一步的最优情况。换句话说，就是在每一步解决问题过程中，利用过去的状态</strong>以及<strong>当前状态</strong>的情况而达到一个当前的最优状态.</p>\n<p><em>*规划：在一般解决该类问题的时候，会有一个“填表格”的过程，无论是简单情况下的**一维表格**还是复杂一点的</em>*二维表格<strong>，都是以</strong>开辟空间换时间**的思想，以争取最佳的时间效率. （保存过程中间值，方便后续直接使用）.</p>\n<p><strong>动态：</strong>用上面的案例来说，递归解决过程中的每一步都会从基本问题不断的“自顶向下”去求解，在每一步骤中，会有相同的计算逻辑进行了重复的计算。相比于递归思想，动态规划思想增加了对历史上计算结果的保存，逐步记录下中间的计算结果，在每一步求得最优值.</p>\n<p>因此，动态规划可以避免重复计算，达到了时间上的最优，从O(2N)O(2^N)O(2N)指数级变为O(N)O(N)O(N)常数级别，相较于开辟的一段内存空间存放中间过程值的开销，是非常值得的.</p>\n<p><strong>那么，接下来咱们依照动态规划的思路进行对Fibonacci进行下解决</strong></p>\n<p>依据题中的规则：</p>\n<p>F(0) = 0, F(1) = 1</p>\n<p>F(N) = F(N - 1) + F(N - 2),  when N &gt; 1</p>\n<p>那么，👇👇F(N) 的值只与他的前两个状态有关系👇👇</p>\n<p>a. 初始化值 : F(0) = 0, F(1) = 1 b. 想要计算得到F(2)， 那么F(2) = F(0) + F(1)   –&gt;  保存 F(2) c. 想要计算得到F(3)， 那么F(3) = F(2) + F(1)   –&gt;  保存 F(3) d. 想要计算得到F(3)， 那么F(4) = F(3) + F(2)   –&gt;  保存 F(4)</p>\n<p>利用动态规划思想，以一维数组辅助实现的Fibonacci，看下图</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114740415.png\" alt=\"image-20230605114740415\"></p>\n<p>是不是很简单的思路，仅仅靠保存过程中的一些值就能很简单的利用循环就可以实现了，没必要用递归反复计算进行实现。</p>\n<p>想要计算得到第 n 个值的多少？那么，以下几点是我们必须要做到的</p>\n<p>​    a. <strong>定义一个一维数组</strong>   —&gt;  一般用dp来命名</p>\n<p>​    b. <strong>动态方程的设定</strong>   —&gt;  题中的F(N) = F(N - 1) + F(N - 2)</p>\n<p>​    c. <strong>初始化数值</strong>   —&gt;  F(0) = 0和F(1) = 1</p>\n<p>上述的 a、b 和 c 点就是动态规划思想的几个核心要素</p>\n<p>下面来看下要实现的代码（代码中，用dp来代替上面的F()）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">fib</span>(<span class=\"params\">self, N</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> N == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        dp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N+<span class=\"number\">1</span>)] <span class=\"comment\"># 1定义dp[i]保存第i个计算得到的数值</span></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>   \t<span class=\"comment\"># 2初始化</span></span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>\t\t\t<span class=\"comment\"># 2初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, N+<span class=\"number\">1</span>):\t<span class=\"comment\"># 3动态方程实现，由于0和1都实现了赋值，现在需要从第2个位置开始赋值</span></span><br><span class=\"line\">            dp[i] = dp[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">2</span>]</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"built_in\">print</span> dp\t\t <span class=\"comment\"># 记录计算过程中的次数，与上述递归形成对比</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[N]</span><br></pre></td></tr></table></figure>\n\n<p>输出:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>以上，最重要的就是1 2 3 点，而执行过程参照<strong>输出</strong>对比递归算法，计算少了很多，同样的计算只计算了一次。</p>\n<blockquote>\n<p>时间复杂度：O(N)</p>\n<p>空间复杂度：O(N)</p>\n</blockquote>\n<p>介绍了上面的内容了，此处来条分割线吧，针对上述的 <strong>递归 vs. DP</strong></p>\n<hr>\n<p>既然动态规划的方案也介绍了，下面咱们再仔细看看，是否有优化的空间，毕竟对于一个算法方案的设计，都有找到其优化点，无论是时间还是空间的效率都想要达到一个理想的值。</p>\n<h4 id=\"3-动态规划-优化\"><a href=\"#3-动态规划-优化\" class=\"headerlink\" title=\"3. 动态规划 + 优化\"></a>3. 动态规划 + 优化</h4><p>咱们看下这张图解，发现每个计算节点都<strong>只与前两个项有关系</strong>。换句话说，咱们只要保存两个值就好了，计算新的节点值的时候，把新的值赋值给前两个值的第一个就好了</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115233956.png\" alt=\"image-20230605115233956\"></p>\n<p>话说只要两个值，现在定义两个变量 dp1 和 dp2。那么，现在咱们一步一步模拟一下：</p>\n<p>a. 初始化值 : F(0) = 0, F(1) = 1</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115254829.png\" alt=\"image-20230605115254829\"></p>\n<p>b. 想要计算得到F(2)， 那么F(2) = F(0) + F(1) –&gt; 保存 F(2)</p>\n<p> 顺带将F(1)赋值给dp1， f(2)赋值给dp2</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115319902.png\" alt=\"image-20230605115319902\"></p>\n<p>c. 想要计算得到F(3)， 那么F(3) = F(2) + F(1) –&gt; 保存 F(3)</p>\n<p> 顺带将F(2)赋值给dp1， F(3)赋值给dp2</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115336720.png\" alt=\"image-20230605115336720\"></p>\n<p>d. 想要计算得到F(3)， 那么F(4) = F(3) + F(2) –&gt; 保存 F(4)</p>\n<p> 顺带将F(3)赋值给dp1， F(4)赋值给dp2</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115356096.png\" alt=\"image-20230605115356096\"></p>\n<p>至此为止，整个过程仅仅用到了两个变量来存储过程中产生的值，也就之前没有优化的空间效率得到了优化</p>\n<p>咱们把代码也贴一下吧，供参考</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">fib_dp1</span>(<span class=\"params\">self, N</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> N == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dp1, dp2 = <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, N+<span class=\"number\">1</span>):</span><br><span class=\"line\">            dp1 = dp1 + dp2</span><br><span class=\"line\">            dp1, dp2 = dp2, dp1</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp2</span><br></pre></td></tr></table></figure>\n\n<p>看起来是不是更加简洁了。</p>\n<p>三点说明：<strong>1.定义dp数组 2.动态方程 3.初始化数值</strong></p>\n<p>这也说明了为什么用<strong>斐波那契数列</strong>来引入<strong>动态规划</strong>的，因为斐波那契数列本身就明确的告诉你动态方程是什么，初始化的值是什么，所以好好的体会这种思想，尤其是从传统递归 -&gt; 动态规划的思想解决，再到优化的方面，很值得深思。</p>\n<p>那接下来，咱们就找几个有代表性的栗子来尝尝鲜</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115624586.png\" alt=\"image-20230605115624586\"></p>\n<h2 id=\"二、动态规划四大解题步骤处理问题\"><a href=\"#二、动态规划四大解题步骤处理问题\" class=\"headerlink\" title=\"二、动态规划四大解题步骤处理问题\"></a>二、动态规划四大解题步骤处理问题</h2><p>上面用斐波那契数列问题，引出了下面的几点，在这里再详细赘述一下</p>\n<p>在后面的案例中将会尽量严格按照这几个步骤进行解决问题</p>\n<blockquote>\n<p>步骤一：定义dp数组的含义</p>\n<p>步骤二：定义状态转移方程</p>\n<p>步骤三：初始化过程转移的初始值</p>\n<p>步骤四：可优化点(可选)</p>\n</blockquote>\n<h4 id=\"步骤一：定义dp数组的含义\"><a href=\"#步骤一：定义dp数组的含义\" class=\"headerlink\" title=\"步骤一：定义dp数组的含义\"></a>步骤一：定义dp数组的含义</h4><p>绝大部分情况下，我们需要定义一维数组或者二维数组进行存储在计算过程中产生的最优值，这里为什么是最优值呢？是因为在解决问题过程中，一般情况dp数组用来保存<strong>从开始到当前情况的最优值</strong>，故而保存的是截止到目前的最优值，避免重复计算（这里看起来思维有混乱的同学们，想想上面Fibonacci 递归解法和动态规划的对比）</p>\n<p><strong>所以，dp无论是一维的还是二维的，要想清楚代表什么，一般来说代表的是截止到目前情况下的最优值</strong></p>\n<h4 id=\"步骤二：定义状态转移方程\"><a href=\"#步骤二：定义状态转移方程\" class=\"headerlink\" title=\"步骤二：定义状态转移方程\"></a>步骤二：定义状态转移方程</h4><p>什么是动态转移方程？ 如果有一个问题摆在我们面前，然后这个问题在解决的过程中，会发现有很多的重叠的子问题，重叠子结构，而通过这些子问题的解决，最终将会把该问题进行解决</p>\n<p>通俗来说，在解决问题过程中，能够发现一个不断解决子问题的动态规律，比如说Fibonacci中的F(N) = F(N - 1) + F(N - 2)，而在其他的可以用动态规划解决的问题中，需要我们自己去发现这样的内在规律。这个是最难的也是最终于要的，只要这一步解决了，接下来我们解决这个问题基本就没问题了.</p>\n<h4 id=\"步骤三：初始化过程转移的初始值\"><a href=\"#步骤三：初始化过程转移的初始值\" class=\"headerlink\" title=\"步骤三：初始化过程转移的初始值\"></a>步骤三：初始化过程转移的初始值</h4><p>顺着步骤二的思路来，既然动态方程定义好了，是不是需要一个<strong>支点</strong>来撬动它进行不断的计算下去。</p>\n<p>那么，这个<strong>支点</strong>就需要我们来初始定义，将动态方程激活，进行计算。举例来说Fibonacci中的F(0) = 0和F(1) = 1，有了这两个值，它的动态方程F(N) = F(N - 1) + F(N - 2)就可以进行下去了</p>\n<p>这个就是我们要想好的初始值，实际问题可能还需要我们想想清楚.</p>\n<h4 id=\"步骤四：可优化点-可选\"><a href=\"#步骤四：可优化点-可选\" class=\"headerlink\" title=\"步骤四：可优化点(可选)\"></a>步骤四：可优化点(可选)</h4><p>可优化的这里，最重要的会是dp数组这块，也会有不同问题不同的优化点</p>\n<p>在例子中，我们会进行不同的优化.</p>\n<p>总之一点，建议大家动笔多画画图，很多细节慢慢就会出现了.</p>\n<h3 id=\"案例一：打家劫舍I-「来自leetcode198」\"><a href=\"#案例一：打家劫舍I-「来自leetcode198」\" class=\"headerlink\" title=\"案例一：打家劫舍I 「来自leetcode198」\"></a>案例一：打家劫舍I 「来自leetcode198」</h3><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码输入: [1,2,3,1]</span><br><span class=\"line\">输出: 4</span><br><span class=\"line\">解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class=\"line\">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例2：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出: <span class=\"number\">12</span></span><br><span class=\"line\">解释: 偷窃 <span class=\"number\">1</span> 号房屋 (金额 = <span class=\"number\">2</span>), 偷窃 <span class=\"number\">3</span> 号房屋 (金额 = <span class=\"number\">9</span>)，接着偷窃 <span class=\"number\">5</span> 号房屋 (金额 = <span class=\"number\">1</span>)。</span><br><span class=\"line\">     偷窃到的最高金额 = <span class=\"number\">2</span> + <span class=\"number\">9</span> + <span class=\"number\">1</span> = <span class=\"number\">12</span> 。</span><br></pre></td></tr></table></figure>\n\n<p>把经典案例系列拆分开讨论下吧，咱们首先将「打家劫舍I」来看看</p>\n<p>该题可以用动态规划的思想来解决的原因是，在小偷不断偷取的过程中，始终想要偷得的物品价值最大，最优，每一步骤都与之前的偷取情况有关系，而且每一步都要考虑是否能偷，是否会带来最大利益，这就使得我们可以用动态规划的思想来解决问题。  然后严格按照四步骤进行解题.</p>\n<h5 id=\"步骤一：-定义dp数组的含义\"><a href=\"#步骤一：-定义dp数组的含义\" class=\"headerlink\" title=\"步骤一： 定义dp数组的含义\"></a>步骤一： 定义dp数组的含义</h5><p>​    之前提到的，dp数组存储的值一般代表截止目前的最优值，在该题目中，我们定义：</p>\n<p>​    <strong>dp[i] 代表到达第 i 个房屋偷得的最高金额，也就是当前最大子序和</strong></p>\n<p>​    无论房屋有几间，最后我们取到dp数组的最后一个值就求得小偷偷得的最高金额</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程\"><a href=\"#步骤二：找出关系元素间的动态方程\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>​    动态规划解决的问题，一般来说就是解决最优子问题，“自顶向下” 的去不断的计算每一步骤的最优值。</p>\n<p>​    也就是想要得到dp[i]的值，我们必须要知道dp[i-1]，dp[i-2]，dp[i-3] … 的每一步的最优值，在这个状态转移的过程中，我们必须要想清楚怎么去定义关系式。然而在每一步的计算中，都与前几项有关系，这个固定的关系就是我们要寻找的重叠子问题，也同样是接下来要详细定义的动态方程</p>\n<p>​    该题目中，当小偷到达第 i 个屋子的时候，他的选择有两种：一种是偷，另外一种是不偷， 然后选择价值较大者</p>\n<p>​    a. 偷的情况计算：必然是dp[3] = nums[2] + dp[1]，如果是偷取该屋子的话，相邻屋子是不能偷取的，因此，通项式子是：dp[i] =  nums[i-1] + dp[i-2]</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605123128436.png\" alt=\"image-20230605123128436\"></p>\n<p> b. 不偷的情况计算：必然是dp[3] = dp[2]，如果是不偷取该屋子的话，相邻屋子就是其最优值，因此，通项式子是：dp[i] = dp[i-1]</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605123322989.png\" alt=\"image-20230605123322989\"></p>\n<p>​    最后，要想偷得最高金额，那么，必须选取在偷与不偷之间的最大值作为我们是否选取的关键点。即：</p>\n<p>​    <strong>动态方程:</strong> dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])</p>\n<h5 id=\"步骤三：初始化数值设定\"><a href=\"#步骤三：初始化数值设定\" class=\"headerlink\" title=\"步骤三：初始化数值设定\"></a>步骤三：初始化数值设定</h5><p>​    初始化: 给没有房子时，dp一个位置，即：dp[0]         1 当size=0时，没有房子，dp[0]=0；         2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]</p>\n<p>那么，按照这个思路来整理一下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">rob</span>(<span class=\"params\">self, nums</span>):</span><br><span class=\"line\">      <span class=\"comment\"># 1.dp[i] 代表当前最大子序和</span></span><br><span class=\"line\">      <span class=\"comment\"># 2.动态方程: dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])</span></span><br><span class=\"line\">      <span class=\"comment\"># 3.初始化: 给没有房子时，dp一个位置，即：dp[0]</span></span><br><span class=\"line\">      <span class=\"comment\">#   3.1 当size=0时，没有房子，dp[0]=0；</span></span><br><span class=\"line\">      <span class=\"comment\">#   3.2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]</span></span><br><span class=\"line\">      size = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> size == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">      dp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(size+<span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">      dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">      dp[<span class=\"number\">1</span>] = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, size+<span class=\"number\">1</span>):</span><br><span class=\"line\">        dp[i] = <span class=\"built_in\">max</span>(dp[i-<span class=\"number\">1</span>], nums[i-<span class=\"number\">1</span>]+dp[i-<span class=\"number\">2</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[size]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时间复杂度：O(N)</p>\n<p>空间复杂度：O(N)</p>\n</blockquote>\n<p>那下面想想看有没有可优化的地方，尽量的释放一部分计算机资源</p>\n<h5 id=\"步骤四：优化\"><a href=\"#步骤四：优化\" class=\"headerlink\" title=\"步骤四：优化\"></a>步骤四：优化</h5><p>​    从 dp[i] = max(dp[i-1], nums[i-1]+dp[i-2]) 关系来看，每一次动态变化，都与前两次状态有关系（dp[i-1], dp[i-2])，而前面的一些值是没有必要留存的.</p>\n<p>​    所以，dp只需要定义两个变量就好，将空间复杂度降为O(1)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">rob_o</span>(<span class=\"params\">self, nums</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 依照上面的思路，其实我们用到的数据永远都是dp的dp[i-1]和dp[i-2]两个变量</span></span><br><span class=\"line\">        <span class=\"comment\"># 因此，我们可以使用两个变量来存放前两个状态值</span></span><br><span class=\"line\">        <span class=\"comment\"># 空间使用由O(N) -&gt; O(1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        size = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> size == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dp1 = <span class=\"number\">0</span></span><br><span class=\"line\">        dp2 = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, size+<span class=\"number\">1</span>):</span><br><span class=\"line\">            dp1 = <span class=\"built_in\">max</span>(dp2, nums[i-<span class=\"number\">1</span>]+dp1)</span><br><span class=\"line\">            dp1, dp2 = dp2, dp1</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp2</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时间复杂度：O(N)</p>\n<p>空间复杂度：O(1)</p>\n</blockquote>\n<p>说完《打家劫舍I 》，中间穿插另外一道题目，利用二维dp来解决的一个问题。</p>\n<p>最后再说说《打家劫舍II 》和《打家劫舍III》，把这一系列的<strong>打家劫舍</strong>问题搞明白了，相信你对动态规划有一个较为深刻的入门体验</p>\n<h3 id=\"案例二：不同路径「来自leetcode62」\"><a href=\"#案例二：不同路径「来自leetcode62」\" class=\"headerlink\" title=\"案例二：不同路径「来自leetcode62」\"></a>案例二：不同路径「来自leetcode62」</h3><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605130822926.png\" alt=\"image-20230605130822926\"></p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: m = <span class=\"number\">3</span>, n = <span class=\"number\">2</span></span><br><span class=\"line\">输出: <span class=\"number\">3</span></span><br><span class=\"line\">解释:</span><br><span class=\"line\">从左上角开始，总共有 <span class=\"number\">3</span> 条路径可以到达右下角。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 向右 -&gt; 向右 -&gt; 向下</span><br><span class=\"line\"><span class=\"number\">2.</span> 向右 -&gt; 向下 -&gt; 向右</span><br><span class=\"line\"><span class=\"number\">3.</span> 向下 -&gt; 向右 -&gt; 向右</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python复制代码输入: m = <span class=\"number\">7</span>, n = <span class=\"number\">3</span></span><br><span class=\"line\">输出: <span class=\"number\">28</span></span><br></pre></td></tr></table></figure>\n\n<p><em>提示：</em></p>\n<p>1 &lt;= m, n &lt;= 100 题目数据保证答案小于等于 2 * 10 ^ 9</p>\n<p>下面依然按照四个步骤来进行讨论：</p>\n<h5 id=\"步骤一：定义dp数组的含义-1\"><a href=\"#步骤一：定义dp数组的含义-1\" class=\"headerlink\" title=\"步骤一：定义dp数组的含义\"></a>步骤一：定义dp数组的含义</h5><p>​    当前这道题是从左上角到右下角的，题目中规定只能向右或者向下走，所以我们必须要定义一个二维数组来保存计算过程中的值。所以，这块定义：</p>\n<p>​    <strong>dp[i][j]: 代表到达位置 (i, j) 的所有路径的总数</strong></p>\n<p>​    即：机器人从左上角到右下角所有路径的总和，dp中每个位置的值代表行走到达 (i, j) 每个位置的总共的路径数</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程-1\"><a href=\"#步骤二：找出关系元素间的动态方程-1\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>​    由于题目中规定只能向右或者向下走，所以在机器人行进的时候，只能是向右或向下.</p>\n<p>​    那么，分别讨论下两种情况，想要到达位置(i, j)，可以从位置(i-1, j)或者(i, j-1)出发到达。因此，到达位置(i, j) 的总的路径数一定是 <strong>到达位置(i-1, j)路径数</strong> + <strong>到达位置(i, j-1)路径数</strong>。那么，现在可以定义动态方程：</p>\n<p>​    <strong>动态方程：dp[i][j] = dp[i-1][j] + dp[i][j-1]</strong></p>\n<h5 id=\"步骤三：初始化数值设定-1\"><a href=\"#步骤三：初始化数值设定-1\" class=\"headerlink\" title=\"步骤三：初始化数值设定\"></a>步骤三：初始化数值设定</h5><p>​    很明显，在机器人走第 0 行，第 0 列的时候，无论怎么走，都只有 1 种走法。</p>\n<p>​    因此，初始化值的设定，一定是 dp[0..m][1] 或者 dp[1][0..n] 都等于1</p>\n<p>​    因此初始值如下：</p>\n<p>​    <strong>dp[0] [0….n-1] = 1;</strong>  // 机器人一直向右走，第 0 列统统为 1</p>\n<p>​    <strong>dp[0…m-1] [0] = 1;</strong>  // 机器人一直向下走，第 0 列统统为 1</p>\n<p>​    现在，按照这个思路来整理一下代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">uniquePaths1</span>(<span class=\"params\">self, m, n</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 初始化表格，由于初始化0行 0列都为1。那么，先全部置为1</span></span><br><span class=\"line\">        dp = [[<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m):</span><br><span class=\"line\">                dp[i][j] = dp[i-<span class=\"number\">1</span>][j] + dp[i][j-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n-<span class=\"number\">1</span>][m-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中由于dp[[0..m][1] ][1]或者 dp[1][0..n] 都等于1，所以在定义二维数组dp时候，统统赋初始值为 1</p>\n<p>然后从位置(1, 1)开始计算每个位置的总路径数</p>\n<blockquote>\n<p>时间复杂度：O(M*N)</p>\n<p>空间复杂度：O(M*N)</p>\n</blockquote>\n<p>既然到这里了，下面再想想看有没有可优化的地方</p>\n<h5 id=\"步骤四：优化-1\"><a href=\"#步骤四：优化-1\" class=\"headerlink\" title=\"步骤四：优化\"></a>步骤四：优化</h5><p>​    可以依照前面的解决的思路，应该也可以从空间上进行一定的优化</p>\n<p>​    参照前面的案例，之前定义的是一维数组dp，优化点是每一步骤都只与前面的两个计算好的数值有关系，然后优化点就是将dp[N] -&gt; dp1和dp2，空间复杂度由 O(N) -&gt; O(1)，如果是很大规模的数据计算的话，空间效率提升了不少.</p>\n<p>​    现在这个例子中的动态方程是**dp[i][j] = dp[i-1][j] + dp[i][j-1]*<em>，很明显，每一步骤中的状态值只与左边相邻的值和上面的值相关。举例（为了方便，用 3</em>4 来举例）：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131507215.png\" alt=\"image-20230605131507215\"></p>\n<p>​    这个完整的图片描述中，机器人从左上角的位置(1, 1)开始移动，逐渐每一步都根据动态方程进行前进，明显的可以看出机器人每移动一格，所得到的路径总和只与它的上方和左方数值有关系。也就是我们会发现，机器人移动到第2行的时候，第0行数据完全是没有用的状态。</p>\n<p>​    因此，这个优化点就出来了，在算法设计的时候，dp仅仅定义2行N列的数组就ok了，省去了m-2行的空间开销。这个代码如果大家想明白了请自行设计出来，自己写出来一定会有更加深刻的理解，再强调：多思考，形成潜移默化的思维方式.</p>\n<p>​    看完这个步骤之后，是不是很明显的优化点，为什么上面没有给出大家代码呢？是因为我看到貌似可以继续优化的点（粘住空间优化项了哈哈哈），那就继续在空间开销上做文章。</p>\n<p>​    <strong>引导：</strong>根据上述咱们的优化方案，说道 “机器人移动到第2行的时候，第0行数据完全是没有用的状态”，其实当前聪明的读者你想想，再看看，下面的图中（从上图截取过来）。 其实，不仅仅是第 0 行完全没用了，而且在第2 行做移动的时候，移动到位置(i, j)的时候，计算好位置(i, j)，那么接下来，位置(i-1, j)的数据也就没用了。换句话说，边走，第 1 行开始的某些数据也就没用了，还在占着空间</p>\n<p>​    <strong>这块大家一定多想想，多理解，多画图</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131650290.png\" alt=\"image-20230605131650290\"></p>\n<p>下面按照这种思路，看下图的步骤，也画好了用一维数组进行解决问题，也画出来每一步骤与上图的类比过程：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131721361.png\" alt=\"image-20230605131721361\"></p>\n<p>在这里，有犯困的同学可以自己动手画一画，理解一下，个人感觉是一个很好的思维扩展</p>\n<p>接下来，就按照这样的思路进行代码实现，会发现码起来很简单</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">uniquePaths2</span>(<span class=\"params\">self, m, n</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> m &gt; n:</span><br><span class=\"line\">            m, n = n, m</span><br><span class=\"line\"></span><br><span class=\"line\">        dp = [<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m):</span><br><span class=\"line\">                dp[j] = dp[j] + dp[j-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时间复杂度：O(m*n)</p>\n<p>空间复杂度：O(min(m ,n))</p>\n</blockquote>\n<p>是不是从思维方面简单干净了许多</p>\n<p>搞清楚上面的栗子之后呢，我们将上面的例题进行一个简单的难度增加，说白了，就是在路上打几个阻碍点</p>\n<p>来看:</p>\n<h3 id=\"案例三：不同路径II-「来自leetcode63」\"><a href=\"#案例三：不同路径II-「来自leetcode63」\" class=\"headerlink\" title=\"案例三：不同路径II 「来自leetcode63」\"></a>案例三：不同路径II 「来自leetcode63」</h3><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>\n<p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131800138.png\" alt=\"image-20230605131800138\"></p>\n<blockquote>\n<p>说明：m 和 n 的值均不超过 100。</p>\n</blockquote>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码输入:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">  [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">  [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">输出: <span class=\"number\">2</span></span><br><span class=\"line\">解释:</span><br><span class=\"line\">3x3 网格的正中间有一个障碍物。</span><br><span class=\"line\">从左上角到右下角一共有 <span class=\"number\">2</span> 条不同的路径：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</span><br><span class=\"line\"><span class=\"number\">2.</span> 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</span><br></pre></td></tr></table></figure>\n\n<p><strong>咱们先看一下题中的两个关键点：</strong> 关键点1：只能向右或者向下 关键点2：有障碍物为1， 无障碍物为0</p>\n<p>根据 关键点1 和 关键点2 依然按照四个步骤来进行讨论：</p>\n<h5 id=\"步骤一：定义dp数组的含义-2\"><a href=\"#步骤一：定义dp数组的含义-2\" class=\"headerlink\" title=\"步骤一：定义dp数组的含义\"></a>步骤一：定义dp数组的含义</h5><p>这个题目中定义的dp数组是和上一个例题中定义的dp数组的含义是相同的，但由于该题中已经定义有数组obstacleGrid，可以直接利用，无需额外开辟空间 那么，就利用obstacleGrid作为动态规划中存储计算过程中的最优值</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程-2\"><a href=\"#步骤二：找出关系元素间的动态方程-2\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>参照上一题目，规定动态方程: obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1] 由于机器人在移动过程中有障碍物，那么，对上面动态方程加一些限制条件 a.若当前 obstacleGrid[i][j] 为0。那么，直接计算动态方程下的计算过程 b.若当前 obstacleGrid[i][j] 不为0。那么，直接置该位置的值为0</p>\n<p>所以，在进行动态方程遍历的时候，先进行 obstacleGrid[i][j]的判断，再进行动态方程的计算执行</p>\n<h5 id=\"步骤三：初始化数值设定-2\"><a href=\"#步骤三：初始化数值设定-2\" class=\"headerlink\" title=\"步骤三：初始化数值设定\"></a>步骤三：初始化数值设定</h5><p>​    相比于上一题目，相似的是，在机器人走第 0 行，第 0 列的时候，无论怎么走，都只有 1 种走法     但由于有障碍物，那走到障碍物的时候，后面都是走不下去的（下图用第一行来举例）。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131926886.png\" alt=\"image-20230605131926886\"></p>\n<p>​    所以，初始化第 0 行，第 0 列的时候，障碍物 1 后面的都是不可达的。所以，初始化行和列的逻辑表达：</p>\n<p>​    <strong>该位置是否可达=前一个位置的状态and该位置能否可达 得到能否到达这个位置</strong></p>\n<p>​    只有前一个位置为1（可达，只有1种方式） ，当前位置为0（无障碍物）这种情况才能到达该位置，然后为该位置设 1 （可达，只有1种方式）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0 行初始化表达式: </span></span><br><span class=\"line\">obstacleGrid[<span class=\"number\">0</span>][row] = <span class=\"built_in\">int</span>(obstacleGrid[<span class=\"number\">0</span>][row] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> obstacleGrid[<span class=\"number\">0</span>][row-<span class=\"number\">1</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\"># 0 列初始化表达式: </span></span><br><span class=\"line\">obstacleGrid[clo][<span class=\"number\">0</span>] = <span class=\"built_in\">int</span>(obstacleGrid[clo][<span class=\"number\">0</span>] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> obstacleGrid[clo-<span class=\"number\">1</span>][<span class=\"number\">0</span>] == <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这些都准备就绪之后，按照相关思路进行编码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">uniquePathsWithObstacles1</span>(<span class=\"params\">self, obstacleGrid</span>):</span><br><span class=\"line\">      \t<span class=\"comment\"># 行列长度</span></span><br><span class=\"line\">        m = <span class=\"built_in\">len</span>(obstacleGrid)</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(obstacleGrid[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果在位置(0, 0)，哪里都去不了，直接返回0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> obstacleGrid[<span class=\"number\">0</span>][<span class=\"number\">0</span>] == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 否则，位置(0, 0)可以到达</span></span><br><span class=\"line\">        obstacleGrid[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 初始化 0 列</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> clo <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m):</span><br><span class=\"line\">            obstacleGrid[clo][<span class=\"number\">0</span>] = <span class=\"built_in\">int</span>(obstacleGrid[clo][<span class=\"number\">0</span>] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> obstacleGrid[clo-<span class=\"number\">1</span>][<span class=\"number\">0</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 初始化 0 行</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            obstacleGrid[<span class=\"number\">0</span>][row] = <span class=\"built_in\">int</span>(obstacleGrid[<span class=\"number\">0</span>][row] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> obstacleGrid[<span class=\"number\">0</span>][row-<span class=\"number\">1</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 从位置(1, 1)根据动态方程开始计算</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> obstacleGrid[i][j] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    obstacleGrid[i][j] = obstacleGrid[i-<span class=\"number\">1</span>][j] + obstacleGrid[i][j-<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    obstacleGrid[i][j] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> obstacleGrid[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时间复杂度: O(mxn)</p>\n<p>空间复杂度: O(1)</p>\n</blockquote>\n<h5 id=\"步骤四：优化-2\"><a href=\"#步骤四：优化-2\" class=\"headerlink\" title=\"步骤四：优化\"></a>步骤四：优化</h5><p>​    这块的优化先不谈了，这里基本没有什么优化点，之前都是由于自己要开辟内存空间，通过空间的优化来进行，而本题是在给定的数组中进行操作的</p>\n<p>有了这几个案例的基础之后，咱们后面把经典的《打家劫舍》系列剩下的两个题目讨论完，就先告一段落，后面也希望以不同的方式与大家多多交流，互相学习</p>\n<p>如果有读者看着累了，可以先保存，收藏下来，待消化了前面的内容，方便再回来看看。</p>\n<h3 id=\"案例四：打家劫舍II-「来自leetcode213」\"><a href=\"#案例四：打家劫舍II-「来自leetcode213」\" class=\"headerlink\" title=\"案例四：打家劫舍II 「来自leetcode213」\"></a>案例四：打家劫舍II 「来自leetcode213」</h3><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python复制代码输入: [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出: <span class=\"number\">3</span></span><br><span class=\"line\">解释: 你不能先偷窃 <span class=\"number\">1</span> 号房屋（金额 = <span class=\"number\">2</span>），然后偷窃 <span class=\"number\">3</span> 号房屋（金额 = <span class=\"number\">2</span>）, 因为他们是相邻的。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python复制代码输入: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出: <span class=\"number\">4</span></span><br><span class=\"line\">解释: 你可以先偷窃 <span class=\"number\">1</span> 号房屋（金额 = <span class=\"number\">1</span>），然后偷窃 <span class=\"number\">3</span> 号房屋（金额 = <span class=\"number\">3</span>）。</span><br><span class=\"line\">     偷窃到的最高金额 = <span class=\"number\">1</span> + <span class=\"number\">3</span> = <span class=\"number\">4</span> 。</span><br></pre></td></tr></table></figure>\n\n<p>与《打家劫舍I》不同的是，《打家劫舍I》的屋子是线性的，而《打家劫舍II》是环状的，所以要考虑的点会增加一些，因为首位相连接的情况，咱们分为下面三种情况进行设定：</p>\n<p>a. 不偷首偷尾</p>\n<p>b. 偷首不偷尾</p>\n<p>c. 首位都不偷 显然，c 种方式损失太大，不会获得最高的金额，故选取 a 和 b。 那么，下面分为两种情况，分别计算不包含首和不包含尾这两种情况来判断小偷哪种方式偷取的金额最高。</p>\n<p>下面依然按照之前的四个步骤来进行分析</p>\n<h5 id=\"步骤一：-定义dp数组的含义-1\"><a href=\"#步骤一：-定义dp数组的含义-1\" class=\"headerlink\" title=\"步骤一： 定义dp数组的含义\"></a>步骤一： 定义dp数组的含义</h5><p>​    dp[i] 代表的含义和之前一致，dp数组存储的值一般代表截止目前的最优值</p>\n<p>​    所以，<strong>dp[i] 代表到达第 i 个房屋偷得的最高金额，也就是当前最大子序和</strong></p>\n<p>​    但是最后会讨论<strong>不包含首</strong>和<strong>不包含尾</strong>这两种情况下得到的dp数组的最后一位，然后获取其中较大者，就是我们要取得的最高金额</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程-3\"><a href=\"#步骤二：找出关系元素间的动态方程-3\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>​    动态方程可参照《打家劫舍I》，有很详细的图解过程，该例子动态方程的变化和之前是完全一致的：</p>\n<p>​    <strong>dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])</strong></p>\n<h5 id=\"步骤三：初始化设定\"><a href=\"#步骤三：初始化设定\" class=\"headerlink\" title=\"步骤三：初始化设定\"></a>步骤三：初始化设定</h5><p>​    初始化: 给没有房子时，dp一个位置，即：dp[0]         a. 当size=0时，没有房子，小偷没办法偷：dp[0]=0；         b. 当size=1时，有一间房子，只要偷即可：dp[1]=nums[0]</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605150914733.png\" alt=\"image-20230605150914733\"></p>\n<p>​    由于屋子首位相连接，所以在计算时候，直接分为两种情况。第一种略过第一个屋子，第二种略过第二个屋子，这样得到的两个数组结果。最后只要比较最后一位数值的大小就ok了。解决！</p>\n<p>该例子步骤三之后，感兴趣的同学可以自己写一下代码，和《打家劫舍I》的代码很类似，后面我写了优化后的代码，可能会更加的明白怎么写。咱们直接到步骤四，有了上面的案例，直接来看看优化后的方案:</p>\n<h5 id=\"步骤四：优化-3\"><a href=\"#步骤四：优化-3\" class=\"headerlink\" title=\"步骤四：优化\"></a>步骤四：优化</h5><p>​    同样从 dp[i] = max(dp[i-1], nums[i-1]+dp[i-2]) 关系来看，每一次动态变化，都与前两次状态有关系（dp[i-1], dp[i-2])，而前面的一些值是没有必要留存的，只要保存两个变量来保存过程最优值就好.</p>\n<p>​    代码中有详细的注释：</p>\n<pre><code>class Solution(object):\ndef rob(self, nums):\n    # 点睛：与打家劫舍I的区别是屋子围成了一个环\n    #   那么，很明显可以分为三种情况：\n    #   1. 首位都不偷\n    #   2. 偷首不偷尾\n    #   3. 不偷首偷尾\n    # 显然，第1种方式损失太大，选取2、3。\n    # 那么，分为两种情况，分别计算不包含首和不包含尾这两种情况来判断哪个大哪个小\n\n    # 1.dp[i] 代表当前最大子序和\n    # 2.动态方程: dp[i] = max(dp[i-1] and , nums[i-1]+dp[i-2])\n    # 3.初始化: 给没有房子时，dp一个位置，即：dp[0]\n    #   3.1 当size=0时，没有房子，dp[0]=0；\n    #   3.2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]\n\n    # 依照《打家劫舍I》的优化方案进行计算\n\n    # nums处理，分别切割出去首和去尾的子串\n    nums1 = nums[1:]\n    nums2 = nums[:-1]\n\n    size = len(nums)\n    if size == 0:\n        return 0\n    if size == 1:\n        return nums[0]\n\n    def handle(size, nums):\n        dp1 = 0\n        dp2 = nums[0]\n        for i in range(2, size+1):\n            dp1 = max(dp2, nums[i-1]+dp1)\n            dp1, dp2 = dp2, dp1\n        return dp2\n\n    res1 = handle(size-1, nums1)\n    res2 = handle(size-1, nums2)\n\n    return max(res1, res2)\n</code></pre>\n<blockquote>\n<p>时间复杂度：O(N)</p>\n<p>空间复杂度：O(1)</p>\n</blockquote>\n<p>再看看下面小偷遇到的情况，感叹：即使当小偷，也要步步规划才能拿到最高的金额啊…</p>\n<h3 id=\"案例五：打家劫舍III-「来自leetcode337」\"><a href=\"#案例五：打家劫舍III-「来自leetcode337」\" class=\"headerlink\" title=\"案例五：打家劫舍III 「来自leetcode337」\"></a>案例五：打家劫舍III 「来自leetcode337」</h3><p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。</p>\n<p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码输入: [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,null,<span class=\"number\">3</span>,null,<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"number\">3</span></span><br><span class=\"line\">\t/ \\</span><br><span class=\"line\">   <span class=\"number\">2</span>   <span class=\"number\">3</span></span><br><span class=\"line\">    \\   \\ </span><br><span class=\"line\">     <span class=\"number\">3</span>   <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出: <span class=\"number\">7</span> </span><br><span class=\"line\">解释: 小偷一晚能够盗取的最高金额 = <span class=\"number\">3</span> + <span class=\"number\">3</span> + <span class=\"number\">1</span> = <span class=\"number\">7.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,null,<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"> \t <span class=\"number\">3</span></span><br><span class=\"line\">\t/ \\</span><br><span class=\"line\">   <span class=\"number\">4</span>   <span class=\"number\">5</span></span><br><span class=\"line\">  / \\   \\ </span><br><span class=\"line\"> <span class=\"number\">1</span>   <span class=\"number\">3</span>   <span class=\"number\">1</span></span><br><span class=\"line\">输出: <span class=\"number\">9</span></span><br><span class=\"line\">解释: 小偷一晚能够盗取的最高金额 = <span class=\"number\">4</span> + <span class=\"number\">5</span> = <span class=\"number\">9.</span></span><br></pre></td></tr></table></figure>\n\n<p>题目出的很好，但是立马会给人一种小偷也不是好当的的赶脚…</p>\n<p>言归正传，咱们先来说说题目本身</p>\n<p>《打家劫舍》的小偷从一维线性到环形，再到二维矩形的屋子？是我想简单了，直接就干到树形了，是不是看着很香，而且很想，看下去，研究研究…</p>\n<p>来整理几点思路，再来按照四步走：</p>\n<p>1.由于房屋是树状的，因此，我们可以使用遍历树的传统方法进行遍历(前序、中序、后续) 2.简单的思路是，从树低进行往上遍历，拿到最优的打劫值。可以选用后续遍历 3.得到每一节点的最优值，最后选取最优的结果</p>\n<p>依然按照三个步骤来进行分析（无优化点）</p>\n<h5 id=\"步骤一：-定义dp数组的含义-2\"><a href=\"#步骤一：-定义dp数组的含义-2\" class=\"headerlink\" title=\"步骤一： 定义dp数组的含义\"></a>步骤一： 定义dp数组的含义</h5><p>​    dp[i]代表该节点及以下打最多的劫（拿到最多的钱）</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程-4\"><a href=\"#步骤二：找出关系元素间的动态方程-4\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>​    根据我们每走到一个节点，都会有两种情况，那就是 <strong>偷(1)</strong> 与 **不偷(0)**。我们分开来讨论：</p>\n<p>​    a. 用 <strong>dp[0]</strong> 代表不偷取该节点到目前为止拿到最多的钱，那么儿子节点偷不偷都ok。</p>\n<p>​        所以： <strong>dp[0] = max(left[0], left[1]) + max(right[0], right[1])</strong></p>\n<p>​    b. 用 <strong>dp[1]</strong> 代表偷了该节点到目前为止拿到最多的钱，则儿子节点都不能被偷。</p>\n<p>​        所以：<strong>dp[1] = value + left[0] + right[0]</strong>  (value代表该节点的价值)</p>\n<p>​    有看不懂的地方吗？再紧接着解释一下：</p>\n<p>​        left[0]代表不偷取左孩子拿到最高的金额</p>\n<p>​        left[1]代表偷取左孩子拿到最高的金额</p>\n<p>​        right[0]代表不偷取右孩子拿到最高的金额</p>\n<p>​        right[1]代表偷取右孩子拿到最高的金额</p>\n<p>​    <em>如果还有不太懂的话，留言或者私信我联系我，随时骚扰我哈</em></p>\n<h5 id=\"步骤三：初始化设定-1\"><a href=\"#步骤三：初始化设定-1\" class=\"headerlink\" title=\"步骤三：初始化设定\"></a>步骤三：初始化设定</h5><p>​    该例子的初始化比较简单，就是当前树的形状为空的时候，直接返回dp[0, 0]</p>\n<p>下面贴出完整代码，其中包含<strong>树的初始化</strong>代码 &amp;&amp; 一大堆的注释：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        self.val = x</span><br><span class=\"line\">        self.left = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.right = <span class=\"literal\">None</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">rob</span>(<span class=\"params\">self, root</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 说明：</span></span><br><span class=\"line\">        <span class=\"comment\"># 1.由于房屋是树状的，因此，我们可以使用遍历树的传统方法进行遍历(前序、中序、后续)</span></span><br><span class=\"line\">        <span class=\"comment\"># 2.简单的思路是，从树低进行往上遍历，拿到最优的打劫值。可以选用后续遍历</span></span><br><span class=\"line\">        <span class=\"comment\"># 3.得到每一节点的最优值，最后选取最优的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 1.dp[i]代表该节点及以下拿到的最多的钱</span></span><br><span class=\"line\">        <span class=\"comment\"># 2.动态方程：</span></span><br><span class=\"line\">        <span class=\"comment\">#   2.1 dp[0]代表不偷该节点拿到最多的钱，则儿子节点偷不偷都ok。dp[0] = max(left[0], left[1]) + max(right[0], right[1])</span></span><br><span class=\"line\">        <span class=\"comment\">#   2.2 dp[1]代表偷了该节点拿到最多的钱，则儿子节点都不能被偷。dp[1] = var + left[0] + right[0]</span></span><br><span class=\"line\">        <span class=\"comment\"># 3.初始化：当前树的形状为空的时候，直接返回dp[0, 0]</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">postTrasval</span>(<span class=\"params\">root</span>):</span><br><span class=\"line\">            dp = [<span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> dp</span><br><span class=\"line\">            left = postTrasval(root.left)</span><br><span class=\"line\">            right = postTrasval(root.right)</span><br><span class=\"line\"></span><br><span class=\"line\">            dp[<span class=\"number\">0</span>] = <span class=\"built_in\">max</span>(left[<span class=\"number\">0</span>], left[<span class=\"number\">1</span>]) + <span class=\"built_in\">max</span>(right[<span class=\"number\">0</span>], right[<span class=\"number\">1</span>])</span><br><span class=\"line\">            dp[<span class=\"number\">1</span>] = root.val + left[<span class=\"number\">0</span>] + right[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dp</span><br><span class=\"line\">        dp = postTrasval(root)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(dp[<span class=\"number\">0</span>], dp[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># initial tree structure</span></span><br><span class=\"line\">    T = TreeNode(<span class=\"number\">3</span>)</span><br><span class=\"line\">    T.left = TreeNode(<span class=\"number\">2</span>)</span><br><span class=\"line\">    T.right = TreeNode(<span class=\"number\">3</span>)</span><br><span class=\"line\">    T.left.right = TreeNode(<span class=\"number\">3</span>)</span><br><span class=\"line\">    T.right.right = TreeNode(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># The solution to the Question</span></span><br><span class=\"line\">    s = Solution()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s.rob(T))</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2-递归\"><a href=\"#2-递归\" class=\"headerlink\" title=\"2. 递归\"></a>2. 递归</h1>","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"excerpt":"<p>算法总结</p>","more":"<h1 id=\"1-动态规划\"><a href=\"#1-动态规划\" class=\"headerlink\" title=\"1. 动态规划\"></a>1. 动态规划</h1><h4 id=\"传统递归-vs-DP\"><a href=\"#传统递归-vs-DP\" class=\"headerlink\" title=\"传统递归 vs. DP\"></a>传统递归 vs. DP</h4><p>先用一个被大佬们举例举到烂的🌰，这个栗子很烂，但是真的<strong>很香</strong>：必须着重<strong>强调</strong>.</p>\n<p><strong>《斐波那契（Fibonacci）数列的第n项》</strong></p>\n<p><strong>举荐理由：</strong>在我自己看来Fibonacci是动态规划设计中的入门级案例，就好比说编程中的“hello world”，大数据中的“word count”.</p>\n<p>Fibonacci几乎完美的诠释了<strong>动态规划带来的思想和技巧</strong>然而没有任何其他的要考虑的细枝末节，这种很清晰的方法看起来很适合整个的动态规划的思维方式，很适合入门来进行的思考方式.</p>\n<p>接下来咱们先来看题目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">题目复制代码写一个函数，输入n，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：</span><br><span class=\"line\"></span><br><span class=\"line\">F(0) = 0, F(1) = 1</span><br><span class=\"line\">F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</span><br><span class=\"line\">斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</span><br></pre></td></tr></table></figure>\n\n<p>比较一下传统递归解法和动态规划思想下的解决对比</p>\n<h4 id=\"1-先-递归解决\"><a href=\"#1-先-递归解决\" class=\"headerlink\" title=\"1. 先 递归解决\"></a>1. 先 递归解决</h4><p>传统对于这种题目的思考方式会利用递归求解，做起来比较简单，就是不断的去递归调用，看下面代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fib_recur</span>(<span class=\"params\">N</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> N &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">fib_recur</span>(N-<span class=\"number\">1</span>) + <span class=\"title function_\">fib_recur</span>(N-<span class=\"number\">2</span>)  # 递归输出  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出的结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F( <span class=\"number\">1</span> ) =  <span class=\"number\">3</span></span><br><span class=\"line\">F( <span class=\"number\">2</span> ) =  <span class=\"number\">2</span></span><br><span class=\"line\">F( <span class=\"number\">3</span> ) =  <span class=\"number\">1</span></span><br><span class=\"line\">F( <span class=\"number\">4</span> ) =  <span class=\"number\">0</span></span><br><span class=\"line\">F( <span class=\"number\">5</span> ) =  <span class=\"number\">1</span></span><br><span class=\"line\">F( <span class=\"number\">6</span> ) =  <span class=\"number\">2</span></span><br><span class=\"line\">F( <span class=\"number\">7</span> ) =  <span class=\"number\">1</span></span><br><span class=\"line\">F( <span class=\"number\">8</span> ) =  <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>重复计算</strong></p>\n<p>明显可以看到，总计 8 次的计算过程中，相同的计算结果有三对进行了<strong>重复计算</strong>（下图中同色项，不包含灰色），也就是说在递归的过程中，把曾经计算过的项进行了<strong>又一次的重复计算</strong>，这样对于时间效率是比较低的，唯一的好处可能就是代码看起来比较好懂，但是终归不是一个好的算法设计方法。</p>\n<p>代码中，在计算N的时候就去递归计算 <code>fib(N-1) + fib(N-2)</code>，那么，这种情况下的计算过程中。会是下面图中的一个计算过程。</p>\n<p>可以发现，会有相当一部分的重复计算，这样对于时间都是重复的消耗。</p>\n<blockquote>\n<p>参考图中相同颜色的项，比如说粉色的重复计算、黄色的重复计算等</p>\n<p>注意：递归中没有对空间进行了增加，始终都是同样的长度，仅仅是不断的弹出和压入</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114156368.png\" alt=\"image-20230605114156368\"></p>\n<p>为了更好的说明这种重复计算带来时间效率的低下。再比如说，相比上述图中的计算节点，再增加一个节点的计算，增加计算F(5)，那么由于递归的计算方式，会有更多的项（下图中线框中部分）进行了重复的计算。在计算<code>F(5)</code>的时候，会递归调用<code>F(4)</code>和<code>F(3)</code>，而在下图中，计算<code>F(4)</code>的时候，又会完整的去计算<code>F(3)</code>。这样，如果N很大的话，会有更大的时间消耗.</p>\n<p>这样，这棵树的规模进行进行成倍增加，时间复杂度很明显的进行了成倍的扩张。对于时间上来说是很恐怖的.</p>\n<p>时间复杂度带来的低效率严重超过了代码的可读性，所以我们可以想办法将<strong>过去计算</strong>过的节点<strong>进行保存</strong>。这样，我们就会用到下面要说的动态规划思想带来的时间上的高效.</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114342318.png\" alt=\"image-20230605114342318\"></p>\n<blockquote>\n<p>时间复杂度：o(2**n) —&gt; 指数级</p>\n<p>空间复杂度：o(n)</p>\n</blockquote>\n<h4 id=\"2-后-动态规划解决\"><a href=\"#2-后-动态规划解决\" class=\"headerlink\" title=\"2. 后 动态规划解决\"></a>2. 后 动态规划解决</h4><p><strong>大概解释一下字面意思：</strong></p>\n<p><strong>动态规划：我们不直接去解决问题，而是在每一步解决问题的时候，达到每一步的最优情况。换句话说，就是在每一步解决问题过程中，利用过去的状态</strong>以及<strong>当前状态</strong>的情况而达到一个当前的最优状态.</p>\n<p><em>*规划：在一般解决该类问题的时候，会有一个“填表格”的过程，无论是简单情况下的**一维表格**还是复杂一点的</em>*二维表格<strong>，都是以</strong>开辟空间换时间**的思想，以争取最佳的时间效率. （保存过程中间值，方便后续直接使用）.</p>\n<p><strong>动态：</strong>用上面的案例来说，递归解决过程中的每一步都会从基本问题不断的“自顶向下”去求解，在每一步骤中，会有相同的计算逻辑进行了重复的计算。相比于递归思想，动态规划思想增加了对历史上计算结果的保存，逐步记录下中间的计算结果，在每一步求得最优值.</p>\n<p>因此，动态规划可以避免重复计算，达到了时间上的最优，从O(2N)O(2^N)O(2N)指数级变为O(N)O(N)O(N)常数级别，相较于开辟的一段内存空间存放中间过程值的开销，是非常值得的.</p>\n<p><strong>那么，接下来咱们依照动态规划的思路进行对Fibonacci进行下解决</strong></p>\n<p>依据题中的规则：</p>\n<p>F(0) = 0, F(1) = 1</p>\n<p>F(N) = F(N - 1) + F(N - 2),  when N &gt; 1</p>\n<p>那么，👇👇F(N) 的值只与他的前两个状态有关系👇👇</p>\n<p>a. 初始化值 : F(0) = 0, F(1) = 1 b. 想要计算得到F(2)， 那么F(2) = F(0) + F(1)   –&gt;  保存 F(2) c. 想要计算得到F(3)， 那么F(3) = F(2) + F(1)   –&gt;  保存 F(3) d. 想要计算得到F(3)， 那么F(4) = F(3) + F(2)   –&gt;  保存 F(4)</p>\n<p>利用动态规划思想，以一维数组辅助实现的Fibonacci，看下图</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605114740415.png\" alt=\"image-20230605114740415\"></p>\n<p>是不是很简单的思路，仅仅靠保存过程中的一些值就能很简单的利用循环就可以实现了，没必要用递归反复计算进行实现。</p>\n<p>想要计算得到第 n 个值的多少？那么，以下几点是我们必须要做到的</p>\n<p>​    a. <strong>定义一个一维数组</strong>   —&gt;  一般用dp来命名</p>\n<p>​    b. <strong>动态方程的设定</strong>   —&gt;  题中的F(N) = F(N - 1) + F(N - 2)</p>\n<p>​    c. <strong>初始化数值</strong>   —&gt;  F(0) = 0和F(1) = 1</p>\n<p>上述的 a、b 和 c 点就是动态规划思想的几个核心要素</p>\n<p>下面来看下要实现的代码（代码中，用dp来代替上面的F()）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">fib</span>(<span class=\"params\">self, N</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> N == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        dp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N+<span class=\"number\">1</span>)] <span class=\"comment\"># 1定义dp[i]保存第i个计算得到的数值</span></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>   \t<span class=\"comment\"># 2初始化</span></span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>\t\t\t<span class=\"comment\"># 2初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, N+<span class=\"number\">1</span>):\t<span class=\"comment\"># 3动态方程实现，由于0和1都实现了赋值，现在需要从第2个位置开始赋值</span></span><br><span class=\"line\">            dp[i] = dp[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">2</span>]</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"built_in\">print</span> dp\t\t <span class=\"comment\"># 记录计算过程中的次数，与上述递归形成对比</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[N]</span><br></pre></td></tr></table></figure>\n\n<p>输出:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>以上，最重要的就是1 2 3 点，而执行过程参照<strong>输出</strong>对比递归算法，计算少了很多，同样的计算只计算了一次。</p>\n<blockquote>\n<p>时间复杂度：O(N)</p>\n<p>空间复杂度：O(N)</p>\n</blockquote>\n<p>介绍了上面的内容了，此处来条分割线吧，针对上述的 <strong>递归 vs. DP</strong></p>\n<hr>\n<p>既然动态规划的方案也介绍了，下面咱们再仔细看看，是否有优化的空间，毕竟对于一个算法方案的设计，都有找到其优化点，无论是时间还是空间的效率都想要达到一个理想的值。</p>\n<h4 id=\"3-动态规划-优化\"><a href=\"#3-动态规划-优化\" class=\"headerlink\" title=\"3. 动态规划 + 优化\"></a>3. 动态规划 + 优化</h4><p>咱们看下这张图解，发现每个计算节点都<strong>只与前两个项有关系</strong>。换句话说，咱们只要保存两个值就好了，计算新的节点值的时候，把新的值赋值给前两个值的第一个就好了</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115233956.png\" alt=\"image-20230605115233956\"></p>\n<p>话说只要两个值，现在定义两个变量 dp1 和 dp2。那么，现在咱们一步一步模拟一下：</p>\n<p>a. 初始化值 : F(0) = 0, F(1) = 1</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115254829.png\" alt=\"image-20230605115254829\"></p>\n<p>b. 想要计算得到F(2)， 那么F(2) = F(0) + F(1) –&gt; 保存 F(2)</p>\n<p> 顺带将F(1)赋值给dp1， f(2)赋值给dp2</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115319902.png\" alt=\"image-20230605115319902\"></p>\n<p>c. 想要计算得到F(3)， 那么F(3) = F(2) + F(1) –&gt; 保存 F(3)</p>\n<p> 顺带将F(2)赋值给dp1， F(3)赋值给dp2</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115336720.png\" alt=\"image-20230605115336720\"></p>\n<p>d. 想要计算得到F(3)， 那么F(4) = F(3) + F(2) –&gt; 保存 F(4)</p>\n<p> 顺带将F(3)赋值给dp1， F(4)赋值给dp2</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115356096.png\" alt=\"image-20230605115356096\"></p>\n<p>至此为止，整个过程仅仅用到了两个变量来存储过程中产生的值，也就之前没有优化的空间效率得到了优化</p>\n<p>咱们把代码也贴一下吧，供参考</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">fib_dp1</span>(<span class=\"params\">self, N</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> N == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dp1, dp2 = <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, N+<span class=\"number\">1</span>):</span><br><span class=\"line\">            dp1 = dp1 + dp2</span><br><span class=\"line\">            dp1, dp2 = dp2, dp1</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp2</span><br></pre></td></tr></table></figure>\n\n<p>看起来是不是更加简洁了。</p>\n<p>三点说明：<strong>1.定义dp数组 2.动态方程 3.初始化数值</strong></p>\n<p>这也说明了为什么用<strong>斐波那契数列</strong>来引入<strong>动态规划</strong>的，因为斐波那契数列本身就明确的告诉你动态方程是什么，初始化的值是什么，所以好好的体会这种思想，尤其是从传统递归 -&gt; 动态规划的思想解决，再到优化的方面，很值得深思。</p>\n<p>那接下来，咱们就找几个有代表性的栗子来尝尝鲜</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605115624586.png\" alt=\"image-20230605115624586\"></p>\n<h2 id=\"二、动态规划四大解题步骤处理问题\"><a href=\"#二、动态规划四大解题步骤处理问题\" class=\"headerlink\" title=\"二、动态规划四大解题步骤处理问题\"></a>二、动态规划四大解题步骤处理问题</h2><p>上面用斐波那契数列问题，引出了下面的几点，在这里再详细赘述一下</p>\n<p>在后面的案例中将会尽量严格按照这几个步骤进行解决问题</p>\n<blockquote>\n<p>步骤一：定义dp数组的含义</p>\n<p>步骤二：定义状态转移方程</p>\n<p>步骤三：初始化过程转移的初始值</p>\n<p>步骤四：可优化点(可选)</p>\n</blockquote>\n<h4 id=\"步骤一：定义dp数组的含义\"><a href=\"#步骤一：定义dp数组的含义\" class=\"headerlink\" title=\"步骤一：定义dp数组的含义\"></a>步骤一：定义dp数组的含义</h4><p>绝大部分情况下，我们需要定义一维数组或者二维数组进行存储在计算过程中产生的最优值，这里为什么是最优值呢？是因为在解决问题过程中，一般情况dp数组用来保存<strong>从开始到当前情况的最优值</strong>，故而保存的是截止到目前的最优值，避免重复计算（这里看起来思维有混乱的同学们，想想上面Fibonacci 递归解法和动态规划的对比）</p>\n<p><strong>所以，dp无论是一维的还是二维的，要想清楚代表什么，一般来说代表的是截止到目前情况下的最优值</strong></p>\n<h4 id=\"步骤二：定义状态转移方程\"><a href=\"#步骤二：定义状态转移方程\" class=\"headerlink\" title=\"步骤二：定义状态转移方程\"></a>步骤二：定义状态转移方程</h4><p>什么是动态转移方程？ 如果有一个问题摆在我们面前，然后这个问题在解决的过程中，会发现有很多的重叠的子问题，重叠子结构，而通过这些子问题的解决，最终将会把该问题进行解决</p>\n<p>通俗来说，在解决问题过程中，能够发现一个不断解决子问题的动态规律，比如说Fibonacci中的F(N) = F(N - 1) + F(N - 2)，而在其他的可以用动态规划解决的问题中，需要我们自己去发现这样的内在规律。这个是最难的也是最终于要的，只要这一步解决了，接下来我们解决这个问题基本就没问题了.</p>\n<h4 id=\"步骤三：初始化过程转移的初始值\"><a href=\"#步骤三：初始化过程转移的初始值\" class=\"headerlink\" title=\"步骤三：初始化过程转移的初始值\"></a>步骤三：初始化过程转移的初始值</h4><p>顺着步骤二的思路来，既然动态方程定义好了，是不是需要一个<strong>支点</strong>来撬动它进行不断的计算下去。</p>\n<p>那么，这个<strong>支点</strong>就需要我们来初始定义，将动态方程激活，进行计算。举例来说Fibonacci中的F(0) = 0和F(1) = 1，有了这两个值，它的动态方程F(N) = F(N - 1) + F(N - 2)就可以进行下去了</p>\n<p>这个就是我们要想好的初始值，实际问题可能还需要我们想想清楚.</p>\n<h4 id=\"步骤四：可优化点-可选\"><a href=\"#步骤四：可优化点-可选\" class=\"headerlink\" title=\"步骤四：可优化点(可选)\"></a>步骤四：可优化点(可选)</h4><p>可优化的这里，最重要的会是dp数组这块，也会有不同问题不同的优化点</p>\n<p>在例子中，我们会进行不同的优化.</p>\n<p>总之一点，建议大家动笔多画画图，很多细节慢慢就会出现了.</p>\n<h3 id=\"案例一：打家劫舍I-「来自leetcode198」\"><a href=\"#案例一：打家劫舍I-「来自leetcode198」\" class=\"headerlink\" title=\"案例一：打家劫舍I 「来自leetcode198」\"></a>案例一：打家劫舍I 「来自leetcode198」</h3><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码输入: [1,2,3,1]</span><br><span class=\"line\">输出: 4</span><br><span class=\"line\">解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class=\"line\">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例2：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出: <span class=\"number\">12</span></span><br><span class=\"line\">解释: 偷窃 <span class=\"number\">1</span> 号房屋 (金额 = <span class=\"number\">2</span>), 偷窃 <span class=\"number\">3</span> 号房屋 (金额 = <span class=\"number\">9</span>)，接着偷窃 <span class=\"number\">5</span> 号房屋 (金额 = <span class=\"number\">1</span>)。</span><br><span class=\"line\">     偷窃到的最高金额 = <span class=\"number\">2</span> + <span class=\"number\">9</span> + <span class=\"number\">1</span> = <span class=\"number\">12</span> 。</span><br></pre></td></tr></table></figure>\n\n<p>把经典案例系列拆分开讨论下吧，咱们首先将「打家劫舍I」来看看</p>\n<p>该题可以用动态规划的思想来解决的原因是，在小偷不断偷取的过程中，始终想要偷得的物品价值最大，最优，每一步骤都与之前的偷取情况有关系，而且每一步都要考虑是否能偷，是否会带来最大利益，这就使得我们可以用动态规划的思想来解决问题。  然后严格按照四步骤进行解题.</p>\n<h5 id=\"步骤一：-定义dp数组的含义\"><a href=\"#步骤一：-定义dp数组的含义\" class=\"headerlink\" title=\"步骤一： 定义dp数组的含义\"></a>步骤一： 定义dp数组的含义</h5><p>​    之前提到的，dp数组存储的值一般代表截止目前的最优值，在该题目中，我们定义：</p>\n<p>​    <strong>dp[i] 代表到达第 i 个房屋偷得的最高金额，也就是当前最大子序和</strong></p>\n<p>​    无论房屋有几间，最后我们取到dp数组的最后一个值就求得小偷偷得的最高金额</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程\"><a href=\"#步骤二：找出关系元素间的动态方程\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>​    动态规划解决的问题，一般来说就是解决最优子问题，“自顶向下” 的去不断的计算每一步骤的最优值。</p>\n<p>​    也就是想要得到dp[i]的值，我们必须要知道dp[i-1]，dp[i-2]，dp[i-3] … 的每一步的最优值，在这个状态转移的过程中，我们必须要想清楚怎么去定义关系式。然而在每一步的计算中，都与前几项有关系，这个固定的关系就是我们要寻找的重叠子问题，也同样是接下来要详细定义的动态方程</p>\n<p>​    该题目中，当小偷到达第 i 个屋子的时候，他的选择有两种：一种是偷，另外一种是不偷， 然后选择价值较大者</p>\n<p>​    a. 偷的情况计算：必然是dp[3] = nums[2] + dp[1]，如果是偷取该屋子的话，相邻屋子是不能偷取的，因此，通项式子是：dp[i] =  nums[i-1] + dp[i-2]</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605123128436.png\" alt=\"image-20230605123128436\"></p>\n<p> b. 不偷的情况计算：必然是dp[3] = dp[2]，如果是不偷取该屋子的话，相邻屋子就是其最优值，因此，通项式子是：dp[i] = dp[i-1]</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605123322989.png\" alt=\"image-20230605123322989\"></p>\n<p>​    最后，要想偷得最高金额，那么，必须选取在偷与不偷之间的最大值作为我们是否选取的关键点。即：</p>\n<p>​    <strong>动态方程:</strong> dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])</p>\n<h5 id=\"步骤三：初始化数值设定\"><a href=\"#步骤三：初始化数值设定\" class=\"headerlink\" title=\"步骤三：初始化数值设定\"></a>步骤三：初始化数值设定</h5><p>​    初始化: 给没有房子时，dp一个位置，即：dp[0]         1 当size=0时，没有房子，dp[0]=0；         2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]</p>\n<p>那么，按照这个思路来整理一下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">rob</span>(<span class=\"params\">self, nums</span>):</span><br><span class=\"line\">      <span class=\"comment\"># 1.dp[i] 代表当前最大子序和</span></span><br><span class=\"line\">      <span class=\"comment\"># 2.动态方程: dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])</span></span><br><span class=\"line\">      <span class=\"comment\"># 3.初始化: 给没有房子时，dp一个位置，即：dp[0]</span></span><br><span class=\"line\">      <span class=\"comment\">#   3.1 当size=0时，没有房子，dp[0]=0；</span></span><br><span class=\"line\">      <span class=\"comment\">#   3.2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]</span></span><br><span class=\"line\">      size = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> size == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">      dp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(size+<span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">      dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">      dp[<span class=\"number\">1</span>] = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, size+<span class=\"number\">1</span>):</span><br><span class=\"line\">        dp[i] = <span class=\"built_in\">max</span>(dp[i-<span class=\"number\">1</span>], nums[i-<span class=\"number\">1</span>]+dp[i-<span class=\"number\">2</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[size]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时间复杂度：O(N)</p>\n<p>空间复杂度：O(N)</p>\n</blockquote>\n<p>那下面想想看有没有可优化的地方，尽量的释放一部分计算机资源</p>\n<h5 id=\"步骤四：优化\"><a href=\"#步骤四：优化\" class=\"headerlink\" title=\"步骤四：优化\"></a>步骤四：优化</h5><p>​    从 dp[i] = max(dp[i-1], nums[i-1]+dp[i-2]) 关系来看，每一次动态变化，都与前两次状态有关系（dp[i-1], dp[i-2])，而前面的一些值是没有必要留存的.</p>\n<p>​    所以，dp只需要定义两个变量就好，将空间复杂度降为O(1)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">rob_o</span>(<span class=\"params\">self, nums</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 依照上面的思路，其实我们用到的数据永远都是dp的dp[i-1]和dp[i-2]两个变量</span></span><br><span class=\"line\">        <span class=\"comment\"># 因此，我们可以使用两个变量来存放前两个状态值</span></span><br><span class=\"line\">        <span class=\"comment\"># 空间使用由O(N) -&gt; O(1)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        size = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> size == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dp1 = <span class=\"number\">0</span></span><br><span class=\"line\">        dp2 = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, size+<span class=\"number\">1</span>):</span><br><span class=\"line\">            dp1 = <span class=\"built_in\">max</span>(dp2, nums[i-<span class=\"number\">1</span>]+dp1)</span><br><span class=\"line\">            dp1, dp2 = dp2, dp1</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp2</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时间复杂度：O(N)</p>\n<p>空间复杂度：O(1)</p>\n</blockquote>\n<p>说完《打家劫舍I 》，中间穿插另外一道题目，利用二维dp来解决的一个问题。</p>\n<p>最后再说说《打家劫舍II 》和《打家劫舍III》，把这一系列的<strong>打家劫舍</strong>问题搞明白了，相信你对动态规划有一个较为深刻的入门体验</p>\n<h3 id=\"案例二：不同路径「来自leetcode62」\"><a href=\"#案例二：不同路径「来自leetcode62」\" class=\"headerlink\" title=\"案例二：不同路径「来自leetcode62」\"></a>案例二：不同路径「来自leetcode62」</h3><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605130822926.png\" alt=\"image-20230605130822926\"></p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: m = <span class=\"number\">3</span>, n = <span class=\"number\">2</span></span><br><span class=\"line\">输出: <span class=\"number\">3</span></span><br><span class=\"line\">解释:</span><br><span class=\"line\">从左上角开始，总共有 <span class=\"number\">3</span> 条路径可以到达右下角。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 向右 -&gt; 向右 -&gt; 向下</span><br><span class=\"line\"><span class=\"number\">2.</span> 向右 -&gt; 向下 -&gt; 向右</span><br><span class=\"line\"><span class=\"number\">3.</span> 向下 -&gt; 向右 -&gt; 向右</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python复制代码输入: m = <span class=\"number\">7</span>, n = <span class=\"number\">3</span></span><br><span class=\"line\">输出: <span class=\"number\">28</span></span><br></pre></td></tr></table></figure>\n\n<p><em>提示：</em></p>\n<p>1 &lt;= m, n &lt;= 100 题目数据保证答案小于等于 2 * 10 ^ 9</p>\n<p>下面依然按照四个步骤来进行讨论：</p>\n<h5 id=\"步骤一：定义dp数组的含义-1\"><a href=\"#步骤一：定义dp数组的含义-1\" class=\"headerlink\" title=\"步骤一：定义dp数组的含义\"></a>步骤一：定义dp数组的含义</h5><p>​    当前这道题是从左上角到右下角的，题目中规定只能向右或者向下走，所以我们必须要定义一个二维数组来保存计算过程中的值。所以，这块定义：</p>\n<p>​    <strong>dp[i][j]: 代表到达位置 (i, j) 的所有路径的总数</strong></p>\n<p>​    即：机器人从左上角到右下角所有路径的总和，dp中每个位置的值代表行走到达 (i, j) 每个位置的总共的路径数</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程-1\"><a href=\"#步骤二：找出关系元素间的动态方程-1\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>​    由于题目中规定只能向右或者向下走，所以在机器人行进的时候，只能是向右或向下.</p>\n<p>​    那么，分别讨论下两种情况，想要到达位置(i, j)，可以从位置(i-1, j)或者(i, j-1)出发到达。因此，到达位置(i, j) 的总的路径数一定是 <strong>到达位置(i-1, j)路径数</strong> + <strong>到达位置(i, j-1)路径数</strong>。那么，现在可以定义动态方程：</p>\n<p>​    <strong>动态方程：dp[i][j] = dp[i-1][j] + dp[i][j-1]</strong></p>\n<h5 id=\"步骤三：初始化数值设定-1\"><a href=\"#步骤三：初始化数值设定-1\" class=\"headerlink\" title=\"步骤三：初始化数值设定\"></a>步骤三：初始化数值设定</h5><p>​    很明显，在机器人走第 0 行，第 0 列的时候，无论怎么走，都只有 1 种走法。</p>\n<p>​    因此，初始化值的设定，一定是 dp[0..m][1] 或者 dp[1][0..n] 都等于1</p>\n<p>​    因此初始值如下：</p>\n<p>​    <strong>dp[0] [0….n-1] = 1;</strong>  // 机器人一直向右走，第 0 列统统为 1</p>\n<p>​    <strong>dp[0…m-1] [0] = 1;</strong>  // 机器人一直向下走，第 0 列统统为 1</p>\n<p>​    现在，按照这个思路来整理一下代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">uniquePaths1</span>(<span class=\"params\">self, m, n</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 初始化表格，由于初始化0行 0列都为1。那么，先全部置为1</span></span><br><span class=\"line\">        dp = [[<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m):</span><br><span class=\"line\">                dp[i][j] = dp[i-<span class=\"number\">1</span>][j] + dp[i][j-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n-<span class=\"number\">1</span>][m-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中由于dp[[0..m][1] ][1]或者 dp[1][0..n] 都等于1，所以在定义二维数组dp时候，统统赋初始值为 1</p>\n<p>然后从位置(1, 1)开始计算每个位置的总路径数</p>\n<blockquote>\n<p>时间复杂度：O(M*N)</p>\n<p>空间复杂度：O(M*N)</p>\n</blockquote>\n<p>既然到这里了，下面再想想看有没有可优化的地方</p>\n<h5 id=\"步骤四：优化-1\"><a href=\"#步骤四：优化-1\" class=\"headerlink\" title=\"步骤四：优化\"></a>步骤四：优化</h5><p>​    可以依照前面的解决的思路，应该也可以从空间上进行一定的优化</p>\n<p>​    参照前面的案例，之前定义的是一维数组dp，优化点是每一步骤都只与前面的两个计算好的数值有关系，然后优化点就是将dp[N] -&gt; dp1和dp2，空间复杂度由 O(N) -&gt; O(1)，如果是很大规模的数据计算的话，空间效率提升了不少.</p>\n<p>​    现在这个例子中的动态方程是**dp[i][j] = dp[i-1][j] + dp[i][j-1]*<em>，很明显，每一步骤中的状态值只与左边相邻的值和上面的值相关。举例（为了方便，用 3</em>4 来举例）：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131507215.png\" alt=\"image-20230605131507215\"></p>\n<p>​    这个完整的图片描述中，机器人从左上角的位置(1, 1)开始移动，逐渐每一步都根据动态方程进行前进，明显的可以看出机器人每移动一格，所得到的路径总和只与它的上方和左方数值有关系。也就是我们会发现，机器人移动到第2行的时候，第0行数据完全是没有用的状态。</p>\n<p>​    因此，这个优化点就出来了，在算法设计的时候，dp仅仅定义2行N列的数组就ok了，省去了m-2行的空间开销。这个代码如果大家想明白了请自行设计出来，自己写出来一定会有更加深刻的理解，再强调：多思考，形成潜移默化的思维方式.</p>\n<p>​    看完这个步骤之后，是不是很明显的优化点，为什么上面没有给出大家代码呢？是因为我看到貌似可以继续优化的点（粘住空间优化项了哈哈哈），那就继续在空间开销上做文章。</p>\n<p>​    <strong>引导：</strong>根据上述咱们的优化方案，说道 “机器人移动到第2行的时候，第0行数据完全是没有用的状态”，其实当前聪明的读者你想想，再看看，下面的图中（从上图截取过来）。 其实，不仅仅是第 0 行完全没用了，而且在第2 行做移动的时候，移动到位置(i, j)的时候，计算好位置(i, j)，那么接下来，位置(i-1, j)的数据也就没用了。换句话说，边走，第 1 行开始的某些数据也就没用了，还在占着空间</p>\n<p>​    <strong>这块大家一定多想想，多理解，多画图</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131650290.png\" alt=\"image-20230605131650290\"></p>\n<p>下面按照这种思路，看下图的步骤，也画好了用一维数组进行解决问题，也画出来每一步骤与上图的类比过程：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131721361.png\" alt=\"image-20230605131721361\"></p>\n<p>在这里，有犯困的同学可以自己动手画一画，理解一下，个人感觉是一个很好的思维扩展</p>\n<p>接下来，就按照这样的思路进行代码实现，会发现码起来很简单</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">uniquePaths2</span>(<span class=\"params\">self, m, n</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> m &gt; n:</span><br><span class=\"line\">            m, n = n, m</span><br><span class=\"line\"></span><br><span class=\"line\">        dp = [<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m):</span><br><span class=\"line\">                dp[j] = dp[j] + dp[j-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时间复杂度：O(m*n)</p>\n<p>空间复杂度：O(min(m ,n))</p>\n</blockquote>\n<p>是不是从思维方面简单干净了许多</p>\n<p>搞清楚上面的栗子之后呢，我们将上面的例题进行一个简单的难度增加，说白了，就是在路上打几个阻碍点</p>\n<p>来看:</p>\n<h3 id=\"案例三：不同路径II-「来自leetcode63」\"><a href=\"#案例三：不同路径II-「来自leetcode63」\" class=\"headerlink\" title=\"案例三：不同路径II 「来自leetcode63」\"></a>案例三：不同路径II 「来自leetcode63」</h3><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>\n<p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131800138.png\" alt=\"image-20230605131800138\"></p>\n<blockquote>\n<p>说明：m 和 n 的值均不超过 100。</p>\n</blockquote>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码输入:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">  [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">  [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">输出: <span class=\"number\">2</span></span><br><span class=\"line\">解释:</span><br><span class=\"line\">3x3 网格的正中间有一个障碍物。</span><br><span class=\"line\">从左上角到右下角一共有 <span class=\"number\">2</span> 条不同的路径：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</span><br><span class=\"line\"><span class=\"number\">2.</span> 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</span><br></pre></td></tr></table></figure>\n\n<p><strong>咱们先看一下题中的两个关键点：</strong> 关键点1：只能向右或者向下 关键点2：有障碍物为1， 无障碍物为0</p>\n<p>根据 关键点1 和 关键点2 依然按照四个步骤来进行讨论：</p>\n<h5 id=\"步骤一：定义dp数组的含义-2\"><a href=\"#步骤一：定义dp数组的含义-2\" class=\"headerlink\" title=\"步骤一：定义dp数组的含义\"></a>步骤一：定义dp数组的含义</h5><p>这个题目中定义的dp数组是和上一个例题中定义的dp数组的含义是相同的，但由于该题中已经定义有数组obstacleGrid，可以直接利用，无需额外开辟空间 那么，就利用obstacleGrid作为动态规划中存储计算过程中的最优值</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程-2\"><a href=\"#步骤二：找出关系元素间的动态方程-2\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>参照上一题目，规定动态方程: obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1] 由于机器人在移动过程中有障碍物，那么，对上面动态方程加一些限制条件 a.若当前 obstacleGrid[i][j] 为0。那么，直接计算动态方程下的计算过程 b.若当前 obstacleGrid[i][j] 不为0。那么，直接置该位置的值为0</p>\n<p>所以，在进行动态方程遍历的时候，先进行 obstacleGrid[i][j]的判断，再进行动态方程的计算执行</p>\n<h5 id=\"步骤三：初始化数值设定-2\"><a href=\"#步骤三：初始化数值设定-2\" class=\"headerlink\" title=\"步骤三：初始化数值设定\"></a>步骤三：初始化数值设定</h5><p>​    相比于上一题目，相似的是，在机器人走第 0 行，第 0 列的时候，无论怎么走，都只有 1 种走法     但由于有障碍物，那走到障碍物的时候，后面都是走不下去的（下图用第一行来举例）。</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605131926886.png\" alt=\"image-20230605131926886\"></p>\n<p>​    所以，初始化第 0 行，第 0 列的时候，障碍物 1 后面的都是不可达的。所以，初始化行和列的逻辑表达：</p>\n<p>​    <strong>该位置是否可达=前一个位置的状态and该位置能否可达 得到能否到达这个位置</strong></p>\n<p>​    只有前一个位置为1（可达，只有1种方式） ，当前位置为0（无障碍物）这种情况才能到达该位置，然后为该位置设 1 （可达，只有1种方式）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0 行初始化表达式: </span></span><br><span class=\"line\">obstacleGrid[<span class=\"number\">0</span>][row] = <span class=\"built_in\">int</span>(obstacleGrid[<span class=\"number\">0</span>][row] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> obstacleGrid[<span class=\"number\">0</span>][row-<span class=\"number\">1</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\"># 0 列初始化表达式: </span></span><br><span class=\"line\">obstacleGrid[clo][<span class=\"number\">0</span>] = <span class=\"built_in\">int</span>(obstacleGrid[clo][<span class=\"number\">0</span>] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> obstacleGrid[clo-<span class=\"number\">1</span>][<span class=\"number\">0</span>] == <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这些都准备就绪之后，按照相关思路进行编码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">uniquePathsWithObstacles1</span>(<span class=\"params\">self, obstacleGrid</span>):</span><br><span class=\"line\">      \t<span class=\"comment\"># 行列长度</span></span><br><span class=\"line\">        m = <span class=\"built_in\">len</span>(obstacleGrid)</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(obstacleGrid[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果在位置(0, 0)，哪里都去不了，直接返回0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> obstacleGrid[<span class=\"number\">0</span>][<span class=\"number\">0</span>] == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 否则，位置(0, 0)可以到达</span></span><br><span class=\"line\">        obstacleGrid[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 初始化 0 列</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> clo <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m):</span><br><span class=\"line\">            obstacleGrid[clo][<span class=\"number\">0</span>] = <span class=\"built_in\">int</span>(obstacleGrid[clo][<span class=\"number\">0</span>] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> obstacleGrid[clo-<span class=\"number\">1</span>][<span class=\"number\">0</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 初始化 0 行</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            obstacleGrid[<span class=\"number\">0</span>][row] = <span class=\"built_in\">int</span>(obstacleGrid[<span class=\"number\">0</span>][row] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> obstacleGrid[<span class=\"number\">0</span>][row-<span class=\"number\">1</span>] == <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 从位置(1, 1)根据动态方程开始计算</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> obstacleGrid[i][j] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    obstacleGrid[i][j] = obstacleGrid[i-<span class=\"number\">1</span>][j] + obstacleGrid[i][j-<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    obstacleGrid[i][j] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> obstacleGrid[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>时间复杂度: O(mxn)</p>\n<p>空间复杂度: O(1)</p>\n</blockquote>\n<h5 id=\"步骤四：优化-2\"><a href=\"#步骤四：优化-2\" class=\"headerlink\" title=\"步骤四：优化\"></a>步骤四：优化</h5><p>​    这块的优化先不谈了，这里基本没有什么优化点，之前都是由于自己要开辟内存空间，通过空间的优化来进行，而本题是在给定的数组中进行操作的</p>\n<p>有了这几个案例的基础之后，咱们后面把经典的《打家劫舍》系列剩下的两个题目讨论完，就先告一段落，后面也希望以不同的方式与大家多多交流，互相学习</p>\n<p>如果有读者看着累了，可以先保存，收藏下来，待消化了前面的内容，方便再回来看看。</p>\n<h3 id=\"案例四：打家劫舍II-「来自leetcode213」\"><a href=\"#案例四：打家劫舍II-「来自leetcode213」\" class=\"headerlink\" title=\"案例四：打家劫舍II 「来自leetcode213」\"></a>案例四：打家劫舍II 「来自leetcode213」</h3><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python复制代码输入: [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出: <span class=\"number\">3</span></span><br><span class=\"line\">解释: 你不能先偷窃 <span class=\"number\">1</span> 号房屋（金额 = <span class=\"number\">2</span>），然后偷窃 <span class=\"number\">3</span> 号房屋（金额 = <span class=\"number\">2</span>）, 因为他们是相邻的。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python复制代码输入: [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出: <span class=\"number\">4</span></span><br><span class=\"line\">解释: 你可以先偷窃 <span class=\"number\">1</span> 号房屋（金额 = <span class=\"number\">1</span>），然后偷窃 <span class=\"number\">3</span> 号房屋（金额 = <span class=\"number\">3</span>）。</span><br><span class=\"line\">     偷窃到的最高金额 = <span class=\"number\">1</span> + <span class=\"number\">3</span> = <span class=\"number\">4</span> 。</span><br></pre></td></tr></table></figure>\n\n<p>与《打家劫舍I》不同的是，《打家劫舍I》的屋子是线性的，而《打家劫舍II》是环状的，所以要考虑的点会增加一些，因为首位相连接的情况，咱们分为下面三种情况进行设定：</p>\n<p>a. 不偷首偷尾</p>\n<p>b. 偷首不偷尾</p>\n<p>c. 首位都不偷 显然，c 种方式损失太大，不会获得最高的金额，故选取 a 和 b。 那么，下面分为两种情况，分别计算不包含首和不包含尾这两种情况来判断小偷哪种方式偷取的金额最高。</p>\n<p>下面依然按照之前的四个步骤来进行分析</p>\n<h5 id=\"步骤一：-定义dp数组的含义-1\"><a href=\"#步骤一：-定义dp数组的含义-1\" class=\"headerlink\" title=\"步骤一： 定义dp数组的含义\"></a>步骤一： 定义dp数组的含义</h5><p>​    dp[i] 代表的含义和之前一致，dp数组存储的值一般代表截止目前的最优值</p>\n<p>​    所以，<strong>dp[i] 代表到达第 i 个房屋偷得的最高金额，也就是当前最大子序和</strong></p>\n<p>​    但是最后会讨论<strong>不包含首</strong>和<strong>不包含尾</strong>这两种情况下得到的dp数组的最后一位，然后获取其中较大者，就是我们要取得的最高金额</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程-3\"><a href=\"#步骤二：找出关系元素间的动态方程-3\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>​    动态方程可参照《打家劫舍I》，有很详细的图解过程，该例子动态方程的变化和之前是完全一致的：</p>\n<p>​    <strong>dp[i] = max(dp[i-1], nums[i-1]+dp[i-2])</strong></p>\n<h5 id=\"步骤三：初始化设定\"><a href=\"#步骤三：初始化设定\" class=\"headerlink\" title=\"步骤三：初始化设定\"></a>步骤三：初始化设定</h5><p>​    初始化: 给没有房子时，dp一个位置，即：dp[0]         a. 当size=0时，没有房子，小偷没办法偷：dp[0]=0；         b. 当size=1时，有一间房子，只要偷即可：dp[1]=nums[0]</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/imagesimage-20230605150914733.png\" alt=\"image-20230605150914733\"></p>\n<p>​    由于屋子首位相连接，所以在计算时候，直接分为两种情况。第一种略过第一个屋子，第二种略过第二个屋子，这样得到的两个数组结果。最后只要比较最后一位数值的大小就ok了。解决！</p>\n<p>该例子步骤三之后，感兴趣的同学可以自己写一下代码，和《打家劫舍I》的代码很类似，后面我写了优化后的代码，可能会更加的明白怎么写。咱们直接到步骤四，有了上面的案例，直接来看看优化后的方案:</p>\n<h5 id=\"步骤四：优化-3\"><a href=\"#步骤四：优化-3\" class=\"headerlink\" title=\"步骤四：优化\"></a>步骤四：优化</h5><p>​    同样从 dp[i] = max(dp[i-1], nums[i-1]+dp[i-2]) 关系来看，每一次动态变化，都与前两次状态有关系（dp[i-1], dp[i-2])，而前面的一些值是没有必要留存的，只要保存两个变量来保存过程最优值就好.</p>\n<p>​    代码中有详细的注释：</p>\n<pre><code>class Solution(object):\ndef rob(self, nums):\n    # 点睛：与打家劫舍I的区别是屋子围成了一个环\n    #   那么，很明显可以分为三种情况：\n    #   1. 首位都不偷\n    #   2. 偷首不偷尾\n    #   3. 不偷首偷尾\n    # 显然，第1种方式损失太大，选取2、3。\n    # 那么，分为两种情况，分别计算不包含首和不包含尾这两种情况来判断哪个大哪个小\n\n    # 1.dp[i] 代表当前最大子序和\n    # 2.动态方程: dp[i] = max(dp[i-1] and , nums[i-1]+dp[i-2])\n    # 3.初始化: 给没有房子时，dp一个位置，即：dp[0]\n    #   3.1 当size=0时，没有房子，dp[0]=0；\n    #   3.2 当size=1时，有一间房子，偷即可：dp[1]=nums[0]\n\n    # 依照《打家劫舍I》的优化方案进行计算\n\n    # nums处理，分别切割出去首和去尾的子串\n    nums1 = nums[1:]\n    nums2 = nums[:-1]\n\n    size = len(nums)\n    if size == 0:\n        return 0\n    if size == 1:\n        return nums[0]\n\n    def handle(size, nums):\n        dp1 = 0\n        dp2 = nums[0]\n        for i in range(2, size+1):\n            dp1 = max(dp2, nums[i-1]+dp1)\n            dp1, dp2 = dp2, dp1\n        return dp2\n\n    res1 = handle(size-1, nums1)\n    res2 = handle(size-1, nums2)\n\n    return max(res1, res2)\n</code></pre>\n<blockquote>\n<p>时间复杂度：O(N)</p>\n<p>空间复杂度：O(1)</p>\n</blockquote>\n<p>再看看下面小偷遇到的情况，感叹：即使当小偷，也要步步规划才能拿到最高的金额啊…</p>\n<h3 id=\"案例五：打家劫舍III-「来自leetcode337」\"><a href=\"#案例五：打家劫舍III-「来自leetcode337」\" class=\"headerlink\" title=\"案例五：打家劫舍III 「来自leetcode337」\"></a>案例五：打家劫舍III 「来自leetcode337」</h3><p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。</p>\n<p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码输入: [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,null,<span class=\"number\">3</span>,null,<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"number\">3</span></span><br><span class=\"line\">\t/ \\</span><br><span class=\"line\">   <span class=\"number\">2</span>   <span class=\"number\">3</span></span><br><span class=\"line\">    \\   \\ </span><br><span class=\"line\">     <span class=\"number\">3</span>   <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出: <span class=\"number\">7</span> </span><br><span class=\"line\">解释: 小偷一晚能够盗取的最高金额 = <span class=\"number\">3</span> + <span class=\"number\">3</span> + <span class=\"number\">1</span> = <span class=\"number\">7.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,null,<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"> \t <span class=\"number\">3</span></span><br><span class=\"line\">\t/ \\</span><br><span class=\"line\">   <span class=\"number\">4</span>   <span class=\"number\">5</span></span><br><span class=\"line\">  / \\   \\ </span><br><span class=\"line\"> <span class=\"number\">1</span>   <span class=\"number\">3</span>   <span class=\"number\">1</span></span><br><span class=\"line\">输出: <span class=\"number\">9</span></span><br><span class=\"line\">解释: 小偷一晚能够盗取的最高金额 = <span class=\"number\">4</span> + <span class=\"number\">5</span> = <span class=\"number\">9.</span></span><br></pre></td></tr></table></figure>\n\n<p>题目出的很好，但是立马会给人一种小偷也不是好当的的赶脚…</p>\n<p>言归正传，咱们先来说说题目本身</p>\n<p>《打家劫舍》的小偷从一维线性到环形，再到二维矩形的屋子？是我想简单了，直接就干到树形了，是不是看着很香，而且很想，看下去，研究研究…</p>\n<p>来整理几点思路，再来按照四步走：</p>\n<p>1.由于房屋是树状的，因此，我们可以使用遍历树的传统方法进行遍历(前序、中序、后续) 2.简单的思路是，从树低进行往上遍历，拿到最优的打劫值。可以选用后续遍历 3.得到每一节点的最优值，最后选取最优的结果</p>\n<p>依然按照三个步骤来进行分析（无优化点）</p>\n<h5 id=\"步骤一：-定义dp数组的含义-2\"><a href=\"#步骤一：-定义dp数组的含义-2\" class=\"headerlink\" title=\"步骤一： 定义dp数组的含义\"></a>步骤一： 定义dp数组的含义</h5><p>​    dp[i]代表该节点及以下打最多的劫（拿到最多的钱）</p>\n<h5 id=\"步骤二：找出关系元素间的动态方程-4\"><a href=\"#步骤二：找出关系元素间的动态方程-4\" class=\"headerlink\" title=\"步骤二：找出关系元素间的动态方程\"></a>步骤二：找出关系元素间的动态方程</h5><p>​    根据我们每走到一个节点，都会有两种情况，那就是 <strong>偷(1)</strong> 与 **不偷(0)**。我们分开来讨论：</p>\n<p>​    a. 用 <strong>dp[0]</strong> 代表不偷取该节点到目前为止拿到最多的钱，那么儿子节点偷不偷都ok。</p>\n<p>​        所以： <strong>dp[0] = max(left[0], left[1]) + max(right[0], right[1])</strong></p>\n<p>​    b. 用 <strong>dp[1]</strong> 代表偷了该节点到目前为止拿到最多的钱，则儿子节点都不能被偷。</p>\n<p>​        所以：<strong>dp[1] = value + left[0] + right[0]</strong>  (value代表该节点的价值)</p>\n<p>​    有看不懂的地方吗？再紧接着解释一下：</p>\n<p>​        left[0]代表不偷取左孩子拿到最高的金额</p>\n<p>​        left[1]代表偷取左孩子拿到最高的金额</p>\n<p>​        right[0]代表不偷取右孩子拿到最高的金额</p>\n<p>​        right[1]代表偷取右孩子拿到最高的金额</p>\n<p>​    <em>如果还有不太懂的话，留言或者私信我联系我，随时骚扰我哈</em></p>\n<h5 id=\"步骤三：初始化设定-1\"><a href=\"#步骤三：初始化设定-1\" class=\"headerlink\" title=\"步骤三：初始化设定\"></a>步骤三：初始化设定</h5><p>​    该例子的初始化比较简单，就是当前树的形状为空的时候，直接返回dp[0, 0]</p>\n<p>下面贴出完整代码，其中包含<strong>树的初始化</strong>代码 &amp;&amp; 一大堆的注释：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">        self.val = x</span><br><span class=\"line\">        self.left = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.right = <span class=\"literal\">None</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">rob</span>(<span class=\"params\">self, root</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 说明：</span></span><br><span class=\"line\">        <span class=\"comment\"># 1.由于房屋是树状的，因此，我们可以使用遍历树的传统方法进行遍历(前序、中序、后续)</span></span><br><span class=\"line\">        <span class=\"comment\"># 2.简单的思路是，从树低进行往上遍历，拿到最优的打劫值。可以选用后续遍历</span></span><br><span class=\"line\">        <span class=\"comment\"># 3.得到每一节点的最优值，最后选取最优的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 1.dp[i]代表该节点及以下拿到的最多的钱</span></span><br><span class=\"line\">        <span class=\"comment\"># 2.动态方程：</span></span><br><span class=\"line\">        <span class=\"comment\">#   2.1 dp[0]代表不偷该节点拿到最多的钱，则儿子节点偷不偷都ok。dp[0] = max(left[0], left[1]) + max(right[0], right[1])</span></span><br><span class=\"line\">        <span class=\"comment\">#   2.2 dp[1]代表偷了该节点拿到最多的钱，则儿子节点都不能被偷。dp[1] = var + left[0] + right[0]</span></span><br><span class=\"line\">        <span class=\"comment\"># 3.初始化：当前树的形状为空的时候，直接返回dp[0, 0]</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">postTrasval</span>(<span class=\"params\">root</span>):</span><br><span class=\"line\">            dp = [<span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> dp</span><br><span class=\"line\">            left = postTrasval(root.left)</span><br><span class=\"line\">            right = postTrasval(root.right)</span><br><span class=\"line\"></span><br><span class=\"line\">            dp[<span class=\"number\">0</span>] = <span class=\"built_in\">max</span>(left[<span class=\"number\">0</span>], left[<span class=\"number\">1</span>]) + <span class=\"built_in\">max</span>(right[<span class=\"number\">0</span>], right[<span class=\"number\">1</span>])</span><br><span class=\"line\">            dp[<span class=\"number\">1</span>] = root.val + left[<span class=\"number\">0</span>] + right[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dp</span><br><span class=\"line\">        dp = postTrasval(root)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(dp[<span class=\"number\">0</span>], dp[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># initial tree structure</span></span><br><span class=\"line\">    T = TreeNode(<span class=\"number\">3</span>)</span><br><span class=\"line\">    T.left = TreeNode(<span class=\"number\">2</span>)</span><br><span class=\"line\">    T.right = TreeNode(<span class=\"number\">3</span>)</span><br><span class=\"line\">    T.left.right = TreeNode(<span class=\"number\">3</span>)</span><br><span class=\"line\">    T.right.right = TreeNode(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># The solution to the Question</span></span><br><span class=\"line\">    s = Solution()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(s.rob(T))</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2-递归\"><a href=\"#2-递归\" class=\"headerlink\" title=\"2. 递归\"></a>2. 递归</h1>"},{"title":"加油","keywords":"读书","description":"描述 Butterfly安裝文檔-快速開始","top_img":"设置false不显示顶部图片","sticky":"数值越大越靠前","cover":"首页封面","comments":1,"abbrlink":"8857f1a4","date":"2023-06-06T04:56:20.000Z","updated":"2023-06-06T04:56:20.000Z","_content":"\n文字鉴赏\n\n<!-- more -->\n\n# 1.\n\n我从来不想鹤立鸡群，我只想快点离开那群鸡，我目睹了一场谋杀，但我看不见他，他站在道德的制高点，站在阳光下，怪异的动物会被保护起来，怪异的人会被孤立，圣人也有过去，罪人也有未来，当愚昧成为主流，清醒就成为了犯罪，你要么闭嘴，要么使用他们的语言，每个人都在愤世嫉俗，每个人都在同流合污。你是在拜佛还是在拜自己的欲望。伊洛先生说：有钱能治愈一切自卑，光善良没有用你得优秀，活着就应该遇山开路，遇水架桥，其实，真正让你好起来的只有自律和自信，没有人能阻止你变好，除了你自己，如果你每天只是在床上追逐剧集，刷抖音，不积极运动，到了晚上还为感情问题而怀疑人生，那你迟早会被这个世界抛弃，不要失去信心，在工作中努力拼搏，不努力就会失去你想要的一切，你一定要努力奋斗，努力成为一个出色的人，不要让别人知道你得计划，直到有一天，你可以自由地离开那些让你不舒服的圈子和人，让他们都对你刮目相看。现在开始悄悄努力吧，做最好的自己，等待那些值得的人，趁现在还有时间，全力以赴去完成你一直想做的事情，成为你一直梦寐以求的那种人，过上你一直向往的那种生活。不要在等待中浪费岁月，每一天都给予自己最大的努力，让自己的光芒照亮前行的路，即使面临困难和挫折，也要坚持住，因为在哪些努力中，你将发现自己的价值和无限的可能。\n","source":"_posts/freedom/励志文字.md","raw":"---\ntitle: 加油\ntags:\n  - 加油\ncategories: 加油\nkeywords: 读书\ndescription: 描述 Butterfly安裝文檔-快速開始\ntop_img: 设置false不显示顶部图片\nsticky: 数值越大越靠前\ncover: 首页封面\ncomments: false评论\nabbrlink: 8857f1a4\ndate: 2023-06-06 12:56:20\nupdated: 2023-06-06 12:56:20\n---\n\n文字鉴赏\n\n<!-- more -->\n\n# 1.\n\n我从来不想鹤立鸡群，我只想快点离开那群鸡，我目睹了一场谋杀，但我看不见他，他站在道德的制高点，站在阳光下，怪异的动物会被保护起来，怪异的人会被孤立，圣人也有过去，罪人也有未来，当愚昧成为主流，清醒就成为了犯罪，你要么闭嘴，要么使用他们的语言，每个人都在愤世嫉俗，每个人都在同流合污。你是在拜佛还是在拜自己的欲望。伊洛先生说：有钱能治愈一切自卑，光善良没有用你得优秀，活着就应该遇山开路，遇水架桥，其实，真正让你好起来的只有自律和自信，没有人能阻止你变好，除了你自己，如果你每天只是在床上追逐剧集，刷抖音，不积极运动，到了晚上还为感情问题而怀疑人生，那你迟早会被这个世界抛弃，不要失去信心，在工作中努力拼搏，不努力就会失去你想要的一切，你一定要努力奋斗，努力成为一个出色的人，不要让别人知道你得计划，直到有一天，你可以自由地离开那些让你不舒服的圈子和人，让他们都对你刮目相看。现在开始悄悄努力吧，做最好的自己，等待那些值得的人，趁现在还有时间，全力以赴去完成你一直想做的事情，成为你一直梦寐以求的那种人，过上你一直向往的那种生活。不要在等待中浪费岁月，每一天都给予自己最大的努力，让自己的光芒照亮前行的路，即使面临困难和挫折，也要坚持住，因为在哪些努力中，你将发现自己的价值和无限的可能。\n","slug":"freedom/励志文字","published":1,"_id":"clijtrgce0014yswhdiuyefot","layout":"post","photos":[],"link":"","content":"<p>文字鉴赏</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h1><p>我从来不想鹤立鸡群，我只想快点离开那群鸡，我目睹了一场谋杀，但我看不见他，他站在道德的制高点，站在阳光下，怪异的动物会被保护起来，怪异的人会被孤立，圣人也有过去，罪人也有未来，当愚昧成为主流，清醒就成为了犯罪，你要么闭嘴，要么使用他们的语言，每个人都在愤世嫉俗，每个人都在同流合污。你是在拜佛还是在拜自己的欲望。伊洛先生说：有钱能治愈一切自卑，光善良没有用你得优秀，活着就应该遇山开路，遇水架桥，其实，真正让你好起来的只有自律和自信，没有人能阻止你变好，除了你自己，如果你每天只是在床上追逐剧集，刷抖音，不积极运动，到了晚上还为感情问题而怀疑人生，那你迟早会被这个世界抛弃，不要失去信心，在工作中努力拼搏，不努力就会失去你想要的一切，你一定要努力奋斗，努力成为一个出色的人，不要让别人知道你得计划，直到有一天，你可以自由地离开那些让你不舒服的圈子和人，让他们都对你刮目相看。现在开始悄悄努力吧，做最好的自己，等待那些值得的人，趁现在还有时间，全力以赴去完成你一直想做的事情，成为你一直梦寐以求的那种人，过上你一直向往的那种生活。不要在等待中浪费岁月，每一天都给予自己最大的努力，让自己的光芒照亮前行的路，即使面临困难和挫折，也要坚持住，因为在哪些努力中，你将发现自己的价值和无限的可能。</p>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"excerpt":"<p>文字鉴赏</p>","more":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h1><p>我从来不想鹤立鸡群，我只想快点离开那群鸡，我目睹了一场谋杀，但我看不见他，他站在道德的制高点，站在阳光下，怪异的动物会被保护起来，怪异的人会被孤立，圣人也有过去，罪人也有未来，当愚昧成为主流，清醒就成为了犯罪，你要么闭嘴，要么使用他们的语言，每个人都在愤世嫉俗，每个人都在同流合污。你是在拜佛还是在拜自己的欲望。伊洛先生说：有钱能治愈一切自卑，光善良没有用你得优秀，活着就应该遇山开路，遇水架桥，其实，真正让你好起来的只有自律和自信，没有人能阻止你变好，除了你自己，如果你每天只是在床上追逐剧集，刷抖音，不积极运动，到了晚上还为感情问题而怀疑人生，那你迟早会被这个世界抛弃，不要失去信心，在工作中努力拼搏，不努力就会失去你想要的一切，你一定要努力奋斗，努力成为一个出色的人，不要让别人知道你得计划，直到有一天，你可以自由地离开那些让你不舒服的圈子和人，让他们都对你刮目相看。现在开始悄悄努力吧，做最好的自己，等待那些值得的人，趁现在还有时间，全力以赴去完成你一直想做的事情，成为你一直梦寐以求的那种人，过上你一直向往的那种生活。不要在等待中浪费岁月，每一天都给予自己最大的努力，让自己的光芒照亮前行的路，即使面临困难和挫折，也要坚持住，因为在哪些努力中，你将发现自己的价值和无限的可能。</p>"},{"title":"vue复习","keywords":"vue复习","description":"vue复习","top_img":"设置false不显示顶部图片","sticky":"数值越大越靠前","cover":"https://raw.githubusercontent.com/why862555625/images/main/images/15.jpg","comments":1,"abbrlink":"c9a941a3","date":"2023-05-26T07:38:34.000Z","updated":"2023-05-26T07:38:34.000Z","_content":"\n\n\nvue复习\n\n<!-- more -->\n\n### MVVM模型？\n\nMVVM，是`Model-View-ViewModel`的简写，其本质是`MVC`模型的升级版。其中 `Model` 代表数据模型，`View` 代表看到的页面，`ViewModel`是`View`和`Model`之间的桥梁，数据会绑定到`ViewModel`层并自动将数据渲染到页面中，视图变化的时候会通知`ViewModel`层更新数据。以前是通过操作`DOM`来更新视图，现在是`数据驱动视图`。\n\n### Vue的生命周期\n\nVue 的生命周期可以分为8个阶段：创建前后、挂载前后、更新前后、销毁前后，以及一些特殊场景的生命周期。Vue 3 中还新增了是3个用于调试和服务端渲染的场景。\n\n| Vue 2中的生命周期钩子 | Vue 3选项式API的生命周期选项 | Vue 3 组合API中生命周期钩子 | 描述                                                   |\n| --------------------- | ---------------------------- | --------------------------- | ------------------------------------------------------ |\n| `beforeCreate`        | `beforeCreate`               | `setup()`                   | 创建前，此时`data`和 `methods`的数据都还没有初始化     |\n| `created`             | `created`                    | `setup()`                   | 创建后，`data`中有值，尚未挂载，可以进行一些`Ajax`请求 |\n| `beforeMount`         | `beforeMount`                | `onBeforeMount`             | 挂载前，会找到虚拟`DOM`，编译成`Render`                |\n| `mounted`             | `mounted`                    | `onMounted`                 | 挂载后，`DOM`已创建，可用于获取访问数据和`DOM`元素     |\n| `beforeUpdate`        | `beforeUpdate`               | `onBeforeUpdate`            | 更新前，可用于获取更新前各种状态                       |\n| `updated`             | `updated`                    | `onUpdated`                 | 更新后，所有状态已是最新                               |\n| `beforeDestroy`       | `beforeUnmount`              | `onBeforeUnmount`           | 销毁前，可用于一些定时器或订阅的取消                   |\n| `destroyed`           | `unmounted`                  | `onUnmounted`               | 销毁后，可用于一些定时器或订阅的取消                   |\n| `activated`           | `activated`                  | `onActivated`               | `keep-alive`缓存的组件激活时                           |\n| `deactivated`         | `deactivated`                | `onDeactivated`             | `keep-alive`缓存的组件停用时                           |\n| `errorCaptured`       | `errorCaptured`              | `onErrorCaptured`           | 捕获一个来自子孙组件的错误时调用                       |\n| —                     | `renderTracked`              | `onRenderTracked`           | 调试钩子，响应式依赖被收集时调用                       |\n| —                     | `renderTriggered`            | `onRenderTriggered`         | 调试钩子，响应式依赖被触发时调用                       |\n| —                     | `serverPrefetch`             | `onServerPrefetch`          | 组件实例在服务器上被渲染前调用                         |\n\n**关于Vue 3中的生命周期建议阅读官方文档!!!!**\n\n[组合式 API：生命周期钩子--官方文档](https://link.juejin.cn/?target=https%3A%2F%2Fcn.vuejs.org%2Fapi%2Fcomposition-api-lifecycle.html)\n[选项式 API：生命周期选项--官方文档](https://link.juejin.cn/?target=https%3A%2F%2Fcn.vuejs.org%2Fapi%2Foptions-lifecycle.html)\n\n**父子组件的生命周期：**\n\n- `加载渲染阶段`：父 beforeCreate -> 父 created -> 父 beforeMount -> 子 beforeCreate -> 子 created -> 子 beforeMount -> 子 mounted -> 父 mounted\n- `更新阶段`：父 beforeUpdate -> 子 beforeUpdate -> 子 updated -> 父 updated\n- `销毁阶段`：父 beforeDestroy -> 子 beforeDestroy -> 子 destroyed -> 父 destroyed\n\n### Vue.$nextTick\n\n**在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。**\n\n`nextTick` 是 Vue 提供的一个全局 API，由于 Vue 的异步更新策略，导致我们对数据修改后不会直接体现在 DOM 上，此时如果想要立即获取更新后的 DOM 状态，就需要借助该方法。\n\nVue 在更新 DOM 时是异步执行的。当数据发生变化，Vue 将开启一个异步更新队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 `watcher` 被多次触发，只会被推入队列一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。`nextTick`方法会在队列中加入一个回调函数，确保该函数在前面的 DOM 操作完成后才调用。\n\n使用场景：\n\n1. 如果想要在修改数据后立刻得到更新后的`DOM`结构，可以使用`Vue.nextTick()`\n2. 在`created`生命周期中进行`DOM`操作\n\n### Vue 实例挂载过程中发生了什么？\n\n挂载过程指的是 `app.mount()`过程，这是一个初始化过程，整体上做了两件事情：`初始化`和`建立更新机制`。\n\n初始化会创建组件实例、初始化组件状态、创建各种响应式数据。\n\n建立更新机制这一步会立即执行一次组件的更新函数，这会首次执行组件渲染函数并执行`patch`将`vnode` 转换为 `dom`； 同时首次执行渲染函数会创建它内部响应式数据和组件更新函数之间的依赖关系，这使得以后数据发生变化时会执行对应的更新函数。\n\n### Vue 的模版编译原理\n\nVue 中有个独特的编译器模块，称为`compiler`，它的主要作用是将用户编写的`template`编译为js中可执行的`render`函数。\n 在Vue 中，编译器会先对`template`进行解析，这一步称为`parse`，结束之后得到一个JS对象，称之为`抽象语法树AST`；然后是对`AST`进行深加工的转换过程，这一步称为`transform`，最后将前面得到的`AST`生成JS代码，也就是`render`函数。\n\n### Vue 的响应式原理\n\n1. Vue 2 中的数据响应式会根据数据类型做不同的处理。如果是对象，则通过\n\n   ```\n   Object.defineProperty(obj,key,descriptor)\n   ```\n\n   拦截对象属性访问，当数据被访问或改变时，感知并作出反应；如果是数组，则通过覆盖数组原型的方法，扩展它的7个变更方法（push、pop、shift、unshift、splice、sort、reverse），使这些方法可以额外的做更新通知，从而做出响应。\n\n   缺点：\n\n   - 初始化时的递归遍历会造成性能损失；\n   - 通知更新过程需要维护大量 `dep` 实例和 `watcher` 实例，额外占用内存较多；\n   - 新增或删除对象属性无法拦截，需要通过 `Vue.set` 及 `delete` 这样的 API 才能生效；\n   - 对于`ES6`中新产生的`Map`、`Set`这些数据结构不支持。\n\n2. Vue 3 中利用`ES6`的`Proxy`机制代理需要响应化的数据。可以同时支持对象和数组，动态属性增、删都可以拦截，新增数据结构均支持，对象嵌套属性运行时递归，用到时才代理，也不需要维护特别多的依赖关系，性能取得很大进步。\n\n### 虚拟DOM\n\n1. 概念：\n    虚拟DOM，顾名思义就是虚拟的DOM对象，它本身就是一个JS对象，只不过是通过不同的属性去描述一个视图结构。\n2. 虚拟DOM的好处：\n    (1) 性能提升\n    直接操作DOM是有限制的，一个真实元素上有很多属性，如果直接对其进行操作，同时会对很多额外的属性内容进行了操作，这是没有必要的。如果将这些操作转移到JS对象上，就会简单很多。另外，操作DOM的代价是比较昂贵的，频繁的操作DOM容易引起页面的重绘和回流。如果通过抽象VNode进行中间处理，可以有效减少直接操作DOM次数，从而减少页面的重绘和回流。\n    (2) 方便跨平台实现\n    同一VNode节点可以渲染成不同平台上对应的内容，比如：渲染在浏览器是DOM元素节点，渲染在Native（iOS、Android）变为对应的控件。Vue 3 中允许开发者基于VNode实现自定义渲染器（renderer），以便于针对不同平台进行渲染。\n3. 结构：\n    没有统一的标准，一般包括`tag`、`props`、`children`三项。\n    `tag`：必选。就是标签，也可以是组件，或者函数。\n    `props`：非必选。就是这个标签上的属性和方法。\n    `children`：非必选。就是这个标签的内容或者子节点。如果是文本节点就是字符串；如果有子节点就是数组。换句话说，如果判断`children`是字符串的话，就表示一定是文本节点，这个节点肯定没有子元素。\n\n### diff 算法\n\n由于目前`Vue3`对于性能的优化做了很多的处理，所以其在更新时并不会对所有的节点都进行`diff`更新。目前会进行`diff`更新的有以下两种情况：\n\n- `v-for`容器节点\n- 自写的`render()`函数\n\n还有一种特殊情况会进行无`diff`的按序更新，这种更新是全替换模式，非常耗时：\n\n- 无`key`值的`v-for`语句，此时会打上`UNKEYED_FRAGMENT`标记\n\n注意，`Vue3`没有主动提供片段这个功能，仅会在出现以下写法时会生成片段：\n\n- 一个组件有多个根节点，会生成一个片段包裹，此时其为稳定片段(`STABLE_FRAGMENT`)\n- `v-for`语句，会生成一个片段包裹\n- `v-if`语句，有多个子节点或不为单个文本节点，会生成一个片段包裹(`STABLE_FRAGMENT`)\n\n> 本文上述论点都是基于浏览器环境，非*NodeJS*环境(*SSR*)。文中提供的代码进行了**适当的简化**。\n\n在我们使用`template`的情况下，更新基本上会通过`block`进行更新——即节点自更新\n\n#### diff 更新\n\n##### VUE2\n\n![image-20230528150909234](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528150909234.png)\n\n\n\n![image-20230528150936549](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528150936549.png)\n\n\n\n![image-20230528151019742](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151019742.png)\n\n\n\n![image-20230528151119230](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151119230.png)\n\n第一次对比后结果\n\n![image-20230528151309763](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151309763.png)\n\n第二次\n\n![image-20230528151400771](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151400771.png)\n\n第三次\n\n![image-20230528151428703](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151428703.png)\n\n最后整理\n\n![image-20230528151504941](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151504941.png)\n\n##### VUE3\n\n`diff`更新调用的内部的`patchKeyedChildren`方法，其大致流程分为三步：\n\n1. 对比新旧节点头部相同指针的节点，相同则进行`diff`，不同则跳转下一步。\n2. 对比新旧节点尾部指针指向节点，相同则进行`diff`，不同则跳转下一步。\n3. 此时剩余新旧节点，可能存在乱序、已移除或新增的情况，进行特殊处理来更新。\n\n下面是函数最开始做的初始化，其中`c1/c2`分别代表新旧节点的子节点数组；`i`表示两个新旧节点指向同步的指针，它们是同步的；`e1/e2`分别代表指向两个子节点数组尾部的指针：\n\n```js\nlet i = 0\nconst l2 = c2.length\n\n// 变更前节点的尾下标\nlet e1 = c1.length - 1 // prev ending index\n\n// 变更后节点的尾下标\nlet e2 = l2 - 1 // next ending index\n```\n\n其中`patch()`函数用于对节点进行更新，`isSameVNodeType()`函数用于判断两个节点是否具有相同的类型，此时其需要满足类型一样且`key`值相等。\n\n> 这里的类型指，例如组件，则其为组件的配置对象，元素则为元素的标记。\n\n\n\n#### 1. 对比头部等位指针节点\n\n首先其会从头部指针开始，对比新旧节点是否相同：\n\n```js\njs复制代码// 1. sync from start\n// 1. 从开始位置同步\n// (a b) c\n// (a b) d e\nwhile (i <= e1 && i <= e2) {\n  const n1 = c1[i]\n  const n2 = c2[i]\n\n  // 节点没有发生变更时，进行patch\n  if (isSameVNodeType(n1, n2)) {\n    patch(n1, n2)\n    // 不同节点时，立刻结束\n  } else {\n    break\n  }\n  i++\n}\n```\n\n注释中给出了一个例子，即如果存在下图的新旧队列：\n\n![image-20230527224906472](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527224906472.png)\n\n由于此时两个指针的`VNode`相同，那么可以复用则直接进行`patch()`更新。之后指针向右移动一位，对比两个数组下标为 `1` 的位置：\n\n![image-20230527225018797](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225018797.png)\n\n同样的，节点相同，进行更新然后指针向后移动：\n\n![image-20230527225137121](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225137121.png)\n\n\n\n此时两个节点不一样了，那么本次头部对比到此结束。到此我们排除了头部位置可复用的节点，接下来那么肯定是排除尾部位置的可复用节点。\n\n### 2. 对比尾部等位指针节点\n\n尾部的可复用节点检查方法与头部一样，唯一一点不同的是，它们有各自的指针分别指向子节点数组尾部。所以此时要使用两个指针`e1/e2`。\n\n以此时要使用两个指针`e1/e2`。\n\n```js\njs复制代码// 2. sync from end\n// 2. 从尾部位置开始查找\n// a (b c)\n// d e (b c)\nwhile (i <= e1 && i <= e2) {\n  const n1 = c1[e1]\n  const n2 = c2[e2]\n  if (isSameVNodeType(n1, n2)) {\n    patch(n1, n2)\n  } else {\n    break\n  }\n  e1--\n  e2--\n}\n```\n\n还是按注释中的例子放图：\n\n![image-20230527225256542](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225256542.png)\n\n当前指针指向节点相同，节点可复用，直接更新，同时指针向前一起移动：\n\n![image-20230527225417598](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225417598.png)\n\n当前指针指向节点相同，节点可复用，直接更新，同时指针向前一起移动：\n\n![](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225513256.png)\n\n\n\n此时，两个指针指向节点不再相同，停止此处的对比。\n\n------\n\n经过前两步的处理，新旧队列已经进一步缩短了，此时剩下的节点就可能存在下面三种情况：\n\n- 有新增的节点\n- 有节点被删除了\n- 相同的节点，但是移动了位置\n\n在实际的场景中，那么就只能存在下面三种剩余情况：\n\n- 仅有新增的节点(此时一定`i > e1`)\n- 仅进行了节点删除(此时一定`i > e2`)\n- 乱序的，一定有移动的节点，其中可能包含新增或有删除的节点(此时一定有`i <= e2`且`i <= e1`)\n\n`Vue`按处理的简易程度，`Vue`先对前两种情况进行了单独的处理，再对三种混有的情况进行了处理。\n\n#### 3.1 处理新增的节点的单独情况\n\n判断新增的节点是以旧队列为基准，那么此时的情况是这样的：\n\n![image-20230527230120660](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230120660.png)\n\n\n\n或新增的节点在首部：\n\n![image-20230527230226562](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230226562.png)\n\n\n\n此时会存在这样的情况`e1 < i`且`e2 >= i`，那么我们只需要更新`e1 => i`间的节点即可，于是有了这些代码：\n\n```js\n// 3. common sequence + mount\n// 3. 有新增的节点时\n// (a b)\n// (a b) c\n// i = 2, e1 = 1, e2 = 2\n// (a b)\n// c (a b)\n// i = 0, e1 = -1, e2 = 0\nif (i <= e2) {\n  if (i > e1) {\n    //  当前节点后面的节点\n    const nextPos = e2 + 1\n\n    // 我们要以这个节点为锚点在其之前添加元素，没有则添加到父节点最后\n    const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor\n    while (i <= e2) {\n      patch(null, c2[i])\n      i++\n    }\n  }\n}\n```\n\n#### 3.2 处理删除节点的单独情况\n\n如果没有存在仅有新增节点的情况，那么其会判断是否是仅进行删除节点的情况，此时可能出现下图的两种情况：\n\n删除节点在尾部：\n\n![](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230416959.png)\n\n\n\n删除节点在尾部：\n\n![image-20230527230458558](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230458558.png)\n\n\n\n此时`i > e2`，那么我们只需要将旧节点数组中`i => e1`之间的所有节点删除即可(下面的`else if`语句承接上面)：\n\n```js\njs复制代码// 4. common sequence + unmount\n// 4. 节点移除\n// (a b) c\n// (a b)\n// i = 2, e1 = 2, e2 = 1\n// a (b c)\n// (b c)\n// i = 0, e1 = 0, e2 = -1\nelse if (i > e2) {\n  while (i <= e1) {\n    // 移除原节点\n    unmount(c1[i])\n    i++\n  }\n}\n```\n\n#### 3.3 乱序，但一定有移动的节点的情况\n\n最后一种情况就是比较复杂的情况，此时`Vue`做的处理是，先查看旧节点序列在变为新节点序列后，旧节点序列中是否有些节点还是按现在的顺序排列的(可以间断)，此时只对其余变更的节点进行操作，就能进行最小幅度的`DOM`操作了。\n\n> 此时相对于求旧节点的最长递增序列，这里你可以会想到为什么不求最小编辑距离，因为最小编辑距离的时间复杂度在大多数情况下比它高\n\n##### 3.3.1 建立新节点 key 与其下标的映射\n\n首先，`Vue`先将新节点数组进行遍历，将它们有`key`值的节点与其在新节点数组中的下标建立映射，存储在`keyToNewIndexMap`中，方便在复用时查找：\n\n```js\nconst s1 = i // prev starting index\nconst s2 = i // next starting index\n\n// 5.1 build key:index map for newChildren\n// 5.1 生成一个key map\nconst keyToNewIndexMap = new Map()\n\n// 遍历新节点，乱序的部分，将这些具有key的节点存入map\nfor (i = s2; i <= e2; i++) {\n  const nextChild = c2[i]\n  if (nextChild.key != null) {\n    keyToNewIndexMap.set(nextChild.key, i)\n  }\n}\n```\n\n##### 3.3.2 移除新节点队列中不存在的旧节点并更新复用节点\n\n之后，遍历旧节点数组，通过刚刚建立的`Map`，如果当前旧节点在新节点数组中已经不存在了，那么说明要移除了。\n\n整个过程比较复杂，因为要预先做处理，为后续是否需要移动节点做准备：\n\n```js\n// 5.2 loop through old children left to be patched and try to patch\n// matching nodes & remove nodes that are no longer present\n// 5.2 遍历旧节点，patch匹配的节点，移除不再在节点\nlet j\n\n// 当前处理过的节点数\nlet patched = 0\n\n// 需要patch的节点数\nconst toBePatched = e2 - s2 + 1\n\n// 是否需要移动节点\nlet moved = false\n\n// used to track whether any node has moved\n// 记录节点是否已经移动\nlet maxNewIndexSoFar = 0\n\n// works as Map<newIndex, oldIndex>\n// Note that oldIndex is offset by +1\n// and oldIndex = 0 is a special value indicating the new node has\n// no corresponding old node.\n// 注意旧下标的值都会+1，因为0表示没有对应的旧节点\n// used for determining longest stable subsequence\n// 新下标与旧下标的map\n// 这里的新下标以s2位置为0下标，而旧下标为旧下标值 +１\nconst newIndexToOldIndexMap = new Array(toBePatched)\n\n// 初始化值为0\nfor (i = 0; i < toBePatched; i++) newIndexToOldIndexMap[i] = 0\n```\n\n这里我说明下三个变量，首先是`newIndexToOldIndexMap`，其用来记录节点的新坐标到旧坐标的映射(当然是节点可复用的情况下)。为了后续计算最长递增子序列，所以其新坐标以`s2`为起点，长度为当前需要处理的节点总数，并且其存入的旧节点下标要在原值的基础上`+ 1`(因为`0`表示当前节点没有对应的旧节点)。举个例子，有如下图一样的更新序列：\n\n![image-20230527230956800](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230956800.png)\n\n那么节点`e`存入`newIndexToOldIndexMap`后为：\n\n```js\n// 展示，不是赋值语句\nnewIndexToOldIndexMap = [4, 0, 0, 0]\n```\n\n其余全部节点存入后为：\n\n```js\n// 展示，不是赋值语句\nnewIndexToOldIndexMap = [4, 3, 2, 0]\n```\n\n`moved`变量则是表示是否有节点需要移动，其判定要基于`maxNewIndexSoFar`的值。\n\n`maxNewIndexSoFar`表示当前可复用节点距离`s2`(即第一个乱序节点的最远距离)。如果有对应可以复用的节点，那么在每次迭代处理节点时，如果当前节点所处位置距离`s2`距离超过`maxNewIndexSoFar`，那么`maxNewIndexSoFar`会更新为当前节点在新队列中的下标；当其小于`maxNewIndexSoFar`时，就会标记`moved = true`。\n\n```js\n// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，\n// 那么每次都会进入该if语句\nif (newIndex >= maxNewIndexSoFar) {\n  // 当前节点未移动，更新下标\n  maxNewIndexSoFar = newIndex\n\n  // 如果进入该else语句说明有节点之前节点交叉了\n} else {\n  moved = true\n}\n```\n\n想象一下，如果节点在新旧序列中，都是按照相同的顺序递增，那么`maxNewIndexSoFar`也会一直递增，即每次迭代`newIndex >= maxNewIndexSoFar`，那么就不需要移动节点；但是如果某次迭代，`newIndex < maxNewIndexSoFar`，那么说明当前节点由之前靠后的位置移动了现在靠前的位置。\n\n就拿刚刚乱序的图举例，第一次迭代`c`节点的`newIndex = 4`，则`maxNewIndexSoFar = 4`；第二次迭代`d`节点时，其`newIndex = 3`，此时`newIndex < maxNewIndexSoFar`，说明`c/d`节点之间的位置在新旧发生了交叉，所以我们至少需要移动它们其中一个节点。\n\n理解了这个道理，现在我们可以正式看看这段代码了。由于要卸载节点，那么本次遍历要以`s1 <-> e1`之间的节点为基准进行遍历，整体遍历代码如下：\n\n```js\n// 遍历旧节点\nfor (i = s1; i <= e1; i++) {\n  // 当前下标的旧节点\n  const prevChild = c1[i]\n\n  // 当前patch的节点数超过新节点中要patch的总数时，执行unmount操作\n  // 直接进行卸载操作，因为多余的节点不需要了\n  if (patched >= toBePatched) {\n    // all new children have been patched so this can only be a removal\n    unmount(prevChild)\n    continue\n  }\n\n  // 尝试寻找是否有对应的新节点\n  let newIndex\n\n  // 旧节点具有key时，获取相同key值节点所处的下标\n  if (prevChild.key != null) {\n    newIndex = keyToNewIndexMap.get(prevChild.key)\n\n    // 没有key时则找相同类型的节点是否存在\n  } else {\n    // key-less node, try to locate a key-less node of the same type\n    // 当前查找范围为新节点中需要patch的节点之间\n    for (j = s2; j <= e2; j++) {\n      if (\n        // 0表示对应下标下当前还未有节点(注意当前是以s2为0下标基准)\n        // 这里确认当前新下标位置未有对应的旧下标，防止是已在map中的节点\n\n        newIndexToOldIndexMap[j - s2] === 0 &&\n        isSameVNodeType(prevChild, c2[j])\n      ) {\n        newIndex = j\n        break\n      }\n    }\n  }\n\n  // 没找到对应节点时说明该节点已经不存在了，直接进行unmount\n  if (newIndex === undefined) {\n    unmount(prevChild)\n\n    // 找到时进行位置移动操作，并patch\n  } else {\n    // 将旧节点位置下标+1后存入，新节点以s2为起点，即0坐标\n    newIndexToOldIndexMap[newIndex - s2] = i + 1\n\n    // 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，\n    // 那么每次都会进入该if语句\n    if (newIndex >= maxNewIndexSoFar) {\n      // 当前节点未移动，更新下标\n      maxNewIndexSoFar = newIndex\n\n      // 如果进入该else语句说明有节点之前节点交叉了\n    } else {\n      moved = true\n    }\n\n    // patch该节点\n    patch(prevChild, c2[newIndex])\n    patched++\n  }\n}\n```\n\n首先当当前可复用的节点复用时，会使`patched`值`+1`，当复用的节点超过乱序的新节点长度时，那么其余的节点肯定是要卸载的节点(因为新节点序列都处理完毕了)：\n\n```js\nif (patched >= toBePatched) {\n    // all new children have been patched so this can only be a removal\n    unmount(prevChild)\n    continue\n  }\n```\n\n之后，`Vue`尝试寻找一下当前旧节点是否被复用，即它被移动到了新节点序列的其他位置。首先如果当前节点有`key`值，那么其会尝试直接从刚刚的`keyToNewIndexMap`中查找；如果没有找到，那么其会遍历当前所有的新节点序列，依次对比是否与当前节点相同，在复合同类型节点时对其进行复用。\n\n```js\n// 尝试寻找是否有对应的新节点\nlet newIndex\n\n// 旧节点具有 key 时，获取相同 key 值节点所处的下标\nif (prevChild.key != null) {\n  newIndex = keyToNewIndexMap.get(prevChild.key)\n\n  // 没有key时则找相同类型的节点是否存在\n} else {\n  // key-less node, try to locate a key-less node of the same type\n  // 当前查找范围为新节点中需要 patch 的节点之间\n  for (j = s2; j <= e2; j++) {\n    if (\n      // 0 表示对应下标下当前还未有节点(注意当前是以 s2 为 0 下标基准)\n      // 这里确认当前新下标位置未有对应的旧下标，防止是已在 map 中的节点\n      newIndexToOldIndexMap[j - s2] === 0 &&\n      isSameVNodeType(prevChild, c2[j])\n    ) {\n      newIndex = j\n      break\n    }\n  }\n}\n```\n\n在直接通过类型查找复用节点时，其存在一个`newIndexToOldIndexMap[j - s2] === 0`条件，它表示当前新节点下标未有对应的旧节点(`0`表示没有，在之后的代码中，如果查找到对应的`newIndex`，其会存入`newIndexToOldIndexMap`中)。这样可以防止新旧节点被重复复用或已被处理再次被处理。\n\n到此，对于旧节点的`newIndex`是否被查找到就会出现两种情况了：\n\n1. 没有，说明当前节点已删除了，移除该`DOM`节点\n2. 有，复用，**更新节点属性**\n\n```js\n// 没找到对应节点时说明该节点已经不存在了，直接进行unmount\nif (newIndex === undefined) {\n  unmount(prevChild)\n\n  // 找到时进行位置移动操作，并patch\n} else {\n  // 将旧节点位置下标+1后存入，新节点以s2为起点，即0坐标\n  newIndexToOldIndexMap[newIndex - s2] = i + 1\n\n  // 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，\n  // 那么每次都会进入该if语句\n  if (newIndex >= maxNewIndexSoFar) {\n    // 当前节点未移动，更新下标\n    maxNewIndexSoFar = newIndex\n\n    // 如果进入该else语句说明有节点之前节点交叉了\n  } else {\n    moved = true\n  }\n\n  // patch该节点\n  patch(prevChild, c2[newIndex])\n  patched++\n}\n```\n\n在复用的情况下，有我们刚刚提到的[计算节点交叉(是否需要移动)](#332-移除新节点队列中不存在的旧节点并更新复用节点)的场景：\n\n```js\n// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，\n// 那么每次都会进入该if语句\nif (newIndex >= maxNewIndexSoFar) {\n  // 当前节点未移动，更新下标\n  maxNewIndexSoFar = newIndex\n\n  // 如果进入该else语句说明有节点之前节点交叉了\n} else {\n  moved = true\n}\n```\n\n这里就不赘述了。\n\n> 注意，这里对复用的节点进行了`patch()`更新，那么后面就只用进行移动即可，而不需要更新了。\n\n#### 3.3.3 处理新增节点与移动的节点\n\n到此为止，就只有新增节点与移动节点的情况没有处理了。\n\n首先其会需要移动节点时(`moved = true`)根据刚刚创建的`newIndexToOldIndexMap`生成一个最长递增的新节点序列`increasingNewIndexSequence`。\n\n```js\njs复制代码// 5.3 move and mount\n// 5.3 移动与mount\n// generate longest stable subsequence only when nodes have moved\n// 有节点需要移动，生成长期稳定的子序列，仅对移动过的节点处理\nconst increasingNewIndexSequence = moved\n  ? // 获取最长递增子序列的下标数组\n    getSequence(newIndexToOldIndexMap)\n  : EMPTY_ARR\n```\n\n那么这个序列的作用是什么？它就是用来**辅助移动节点**，而且是在最小次数下移动节点。由于`newIndexToOldIndexMap`是根据新旧节点之间的映射创建的，其**下标天然代表乱序的新节点数组的顺序**，而且其对应下标中存储的元素也代表该新节点复用的旧节点的下标，那么这里我们就可以看到两个序列：\n\n1. 新节点下标组成的序列(**递增**的，因为我们以它为基准创建的数组)\n2. `newIndexToOldIndexMap`中旧节点下标组成的序列，可能递增也可能乱序\n\n> 关于如何求[最长递增子序列](https://link.juejin.cn?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FLongest_increasing_subsequence)，请单独自行学习，这里就不说明了。\n\n此时倘若旧节点下标组成的序列**也**呈现递增趋势，那么我们便可以操作那些非递增的节点来达到变更为新节点序列的目的。并且这个递增的序列越长，那么我们要操作(移动)的节点就越少。比如下图的情况：\n\n![image-20230528124733993](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124733993.png)\n\n从图中观察，我们可以清楚的看到`c/d`两个节点在前后都保持了递增的关系，那么此时我们只需要移动`e`节点与创建`h`节点即可。\n\n此时其`newIndexToOldIndexMap`为：\n\n```js\njs复制代码newIndexToOldIndexMap = [4, 2, 3, 0]\n\n// 该数组返回的是对应的元素在newIndexToOldIndexMap的下标\n// 而并非实际的旧节点下标\nincreasingNewIndexSequence = [1, 2]\n```\n\n可以看到`2、3`节点与新节点的下标的**递增关系保持一致**，其最长递增子序列(`increasingNewIndexSequence`)为`[1, 2]`，此时我们只需要操作`4/0`两个节点即可。\n\n> `increasingNewIndexSequence`返回的结果为对应的元素在 `newIndexToOldIndexMap`的下标而并非实际的旧节点下标\n\n明白了这个现在我们来看其具体处理的代码：\n\n```js\n// 获取递增序列的尾坐标\nj = increasingNewIndexSequence.length - 1\n\n// looping backwards so that we can use last patched node as anchor\n// 向后循环，这样我们可以用上一个patch过了的节点做锚点\nfor (i = toBePatched - 1; i >= 0; i--) {\n  // 当前要处理的新节点下标及其节点\n  const nextIndex = s2 + i\n  const nextChild = c2[nextIndex]\n\n  // 获取其后一个节点，如果没有则获取其父节点\n  const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor\n\n  // 如果当前新旧节点Map中未找到当前位置新节点的旧节点信息，\n  // 说明是新增节点\n  if (newIndexToOldIndexMap[i] === 0) {\n    // mount new\n    patch(null, nextChild)\n\n    // moved说明有节点需要移动，通过塑造一个递增序列，处于递增序列的节点就可以\n    // 不进行移动，只移动其余节点，这样就减少了节点的移动\n  } else if (moved) {\n    // 如果存在以下情况则移动：\n    // 1. 没有稳定的子序列\n    // 2. 当前节点不在这个稳定的子序列中\n    // move if:\n    // There is no stable subsequence (e.g. a reverse)\n    // OR current node is not among the stable sequence\n    if (j < 0 || i !== increasingNewIndexSequence[j]) {\n      move(nextChild, container, anchor)\n    } else {\n      j--\n    }\n  }\n}\n```\n\n本次遍历以新节点的乱序序列(`s2 <-> e2`)为基准，逆向进行遍历。逆向的原因是因为其在新增节点或更新节点时，可以以后面已经操作过的节点为锚点进行更新(想象一下`Node.insertBefore()/Node.appendChild()`的参数)。\n\n每次遍历会出现三种情况：\n\n- 当前节点未有对应的旧节点下标，则说明是新增节点\n- 该节点需要移动，进行移动\n- 该节点与旧节点序列都保持递增顺序，直接跳过即可(实际反应在代码里面就是没做任何处理)\n\n> 情况`2`与`3`在完整的迭代中是互斥的，两者不会同时出现在整个迭代流程中。\n\n第一种情况，比较简单，这里就不解释了：\n\n```js\n// 如果当前新旧节点Map中未找到当前位置新节点的旧节点信息，\n// 说明是新增节点\nif (newIndexToOldIndexMap[i] === 0) {\n  // mount new\n  patch(null, nextChild\n}\n```\n\n第二种情况要判定`moved = true`，它的原理[之前我们已经解释过了](#332-移除新节点队列中不存在的旧节点并更新复用节点)。这里我们要关注的是它的函数体。根据我们刚刚对递增子序列的理解，那么其应该会在以下情况移动或不移动节点：\n\n- 当前节点处于最长递增子序列中 —— 跳过\n- 当前节点不存在最长递增子序列中 —— 移动\n  - 递增序列已经没有需要跳过的节点了但任存在节点需要更新(实际和不存在的情况一样)\n  - 当前节点不存在最长递增子序列\n\n```js\n// 如果存在以下情况则移动：\n// 1. 没有稳定的子序列(实际和情况2一致，反序时会返回任意一个节点作为最长序列)\n// 2. 当前节点不在这个稳定的子序列中\n// move if:\n// There is no stable subsequence (e.g. a reverse)\n// OR current node is not among the stable sequence\nif (j < 0 || i !== increasingNewIndexSequence[j]) {\n  // 将当前节点移动到锚点节点前或容器节点最后(没有锚点时)\n  move(nextChild, container, anchor)\n} else {\n  j--\n}\n```\n\n![image-20230528124834143](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124834143.png)\n\n在第二次更新中，发现`d`节点存在于单调增序列中，所以本次更新可以跳过：\n\n![image-20230528124910205](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124910205.png)\n\n同理`c`节点也一样，这里就不放图了，处理完`c`节点后此时为这样\n\n![image-20230528124931580](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124931580.png)\n\n此时`e`节点可复用，则将其移动到新`c`节点前即可。\n\n到此为止，上图的`diff`就结束了。\n\n对于第三种情况，由于复用的节点在前后都保持了递增的关系，所以此时我们不需要再重复对节点进行处理，所以遇到复用的节点时直接跳过即可：\n\n![image-20230528125006064](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528125006064.png)\n\n到此为止全部节点的更新就已经完毕了。\n\n### 为什么组件中的 data 是一个函数？\n\n在 new Vue() 中，可以是函数也可以是对象，因为根实例只有一个，不会产生数据污染。\n\n在组件中，data 必须为函数，目的是为了防止多个组件实例对象之间共用一个 data，产生数据污染；而采用函数的形式，initData 时会将其作为工厂函数都会返回全新的 data 对象。\n\n### Vue 中组件间的通信方式？\n\n1. 父子组件通信：\n\n   父向子传递数据是通过`props`，子向父是通过`$emit`触发事件；通过父链/子链也可以通信（`$parent`/`$children`）；`ref`也可以访问组件实例；`provide`/`inject`；`$attrs`/`$listeners`。\n\n2. 兄弟组件通信：\n\n   全局事件总线`EventBus`、`Vuex`。\n\n3. 跨层级组件通信：\n\n   全局事件总线`EventBus`、`Vuex`、`provide`/`inject`。\n\n### v-show 和 v-if 的区别？\n\n1. 控制手段不同。`v-show`是通过给元素添加 css 属性`display: none`，但元素仍然存在；而`v-if`控制元素显示或隐藏是将元素整个添加或删除。\n2. 编译过程不同。`v-if`切换有一个局部编译/卸载的过程，切换过程中合适的销毁和重建内部的事件监听和子组件；`v-show`只是简单的基于 css 切换。\n3. 编译条件不同。`v-if`是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建，渲染条件为假时，并不做操作，直到为真才渲染。\n4. 触发生命周期不同。`v-show`由 false 变为 true 的时候不会触发组件的生命周期；`v-if`由 false 变为 true 的时候，触发组件的`beforeCreate`、`created`、`beforeMount`、`mounted`钩子，由 true 变为 false 的时候触发组件的`beforeDestory`、`destoryed`钩子。\n5. 性能消耗不同。`v-if`有更高的切换消耗；`v-show`有更高的初始渲染消耗。\n\n使用场景：\n 如果需要非常频繁地切换，则使用`v-show`较好，如：手风琴菜单，tab 页签等； 如果在运行时条件很少改变，则使用`v-if`较好，如：用户登录之后，根据权限不同来显示不同的内容。\n\n### computed 和 watch 的区别？\n\n- `computed`计算属性，依赖其它属性计算值，内部任一依赖项的变化都会重新执行该函数，计算属性有缓存，多次重复使用计算属性时会从缓存中获取返回值，计算属性必须要有`return`关键词。\n- `watch`侦听到某一数据的变化从而触发函数。当数据为对象类型时，对象中的属性值变化时需要使用深度侦听`deep`属性，也可在页面第一次加载时使用立即侦听`immdiate`属性。\n\n运用场景：\n 计算属性一般用在模板渲染中，某个值是依赖其它响应对象甚至是计算属性而来；而侦听属性适用于观测某个值的变化去完成一段复杂的业务逻辑。\n\n### v-if 和 v-for 为什么不建议放在一起使用？\n\nVue 2 中，`v-for`的优先级比`v-if`高，这意味着`v-if`将分别重复运行于每一个`v-for`循环中。如果要遍历的数组很大，而真正要展示的数据很少时，将造成很大的性能浪费。\n\nVue 3 中，则完全相反，`v-if`的优先级高于`v-for`，所以`v-if`执行时，它调用的变量还不存在，会导致异常。\n\n通常有两种情况导致要这样做：\n\n- 为了过滤列表中的项目，比如：`v-for = \"user in users\" v-if = \"user.active\"`。这种情况，可以定义一个计算属性，让其返回过滤后的列表即可。\n- 为了避免渲染本该被隐藏的列表，比如`v-for = \"user in users\"  v-if = \"showUsersFlag\"`。这种情况，可以将`v-if`移至容器元素上或在外面包一层`template`即可。\n\n### Vue 2中的set方法？\n\n[`set`是Vue 2中的一个全局API](https://link.juejin.cn?target=https%3A%2F%2Fv2.cn.vuejs.org%2Fv2%2Fapi%2F%23Vue-set)。可手动添加响应式数据，解决数据变化视图未更新问题。当在项目中直接设置数组的某一项的值，或者直接设置对象的某个属性值，会发现页面并没有更新。这是因为`Object.defineProperty()`的限制，监听不到数据变化，可通过`this.$set(数组或对象，数组下标或对象的属性名，更新后的值)`解决。\n\n### keep-alive 是什么？\n\n- 作用：实现组件缓存，保持组件的状态，避免反复渲染导致的性能问题。\n- 工作原理：Vue.js 内部将 DOM 节点，抽象成了一个个的 VNode 节点，`keep-alive`组件的缓存也是基于 VNode 节点的。它将满足条件的组件在 cache 对象中缓存起来，重新渲染的时候再将 VNode 节点从 cache 对象中取出并渲染。\n- 可以设置以下属性：\n   ① `include`：字符串或正则，只有名称匹配的组件会被缓存。\n   ② `exclude`：字符串或正则，任何名称匹配的组件都不会被缓存。\n   ③ `max`：数字，最多可以缓存多少组件实例。\n   匹配首先检查组件的`name`选项，如果`name`选项不可用，则匹配它的局部注册名称（父组件 components选项的键值），匿名组件不能被匹配。\n\n如果同时使用了`include`、`exclude`，那么`exclude`的优先级高于`include`。\n\n设置了`keep-alive`缓存的组件，会多出两个生命周期钩子：`activated`、`deactivated`。\n 首次进入组件时：beforeCreate --> created --> beforeMount --> mounted --> activated --> beforeUpdate --> updated --> deactivated\n 再次进入组件时：activated --> beforeUpdate --> updated --> deactivated\n\n### mixin\n\n`mixin`（混入）， 它提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。\n\n使用场景： 不同组件中经常会用到一些相同或相似的代码，这些代码的功能相对独立。可以通过mixin 将相同或相似的代码提出来。\n\n缺点：\n\n1. 变量来源不明确\n2. 多 mixin 可能会造成命名冲突（解决方式：Vue 3的组合API）\n3. mixin 和组件出现多对多的关系，使项目复杂度变高。\n\n### 插槽\n\n`slot`插槽，一般在组件内部使用，封装组件时，在组件内部不确定该位置是以何种形式的元素展示时，可以通过`slot`占据这个位置，该位置的元素需要父组件以内容形式传递过来。`slot`分为：\n\n- `默认插槽`：子组件用`<slot>`标签来确定渲染的位置，标签里面可以放`DOM`结构作为后备内容，当父组件在使用的时候，可以直接在子组件的标签内写入内容，该部分内容将插入子组件的`<slot>`标签位置。如果父组件使用的时候没有往插槽传入内容，后备内容就会显示在页面。\n- `具名插槽`：子组件用`name`属性来表示插槽的名字，没有指定`name`的插槽，会有隐含的名称叫做 `default`。父组件中在使用时在默认插槽的基础上通过`v-slot`指令指定元素需要放在哪个插槽中，`v-slot`值为子组件插槽`name`属性值。使用`v-slot`指令指定元素放在哪个插槽中，必须配合`<template>`元素，且一个`<template>`元素只能对应一个预留的插槽，即不能多个`<template>` 元素都使用`v-slot`指令指定相同的插槽。`v-slot`的简写是`#`，例如`v-slot:header`可以简写为`#header`。\n- 作用域插槽：子组件在<slot>标签上绑定props数据，以将子组件数据传给父组件使用。父组件获取插槽绑定 props 数据的方法：\n  1. scope=\"接收的变量名\"：`<template scope=\"接收的变量名\">`\n  2. slot-scope=\"接收的变量名\"：`<template slot-scope=\"接收的变量名\">`\n  3. v-slot:插槽名=\"接收的变量名\"：`<template v-slot:插槽名=\"接收的变量名\">`\n\n### Vue 中的修饰符有哪些？\n\n在Vue 中，修饰符处理了许多 DOM 事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理。Vue中修饰符分为以下几种：\n\n1. 表单修饰符\n    `lazy` 填完信息，光标离开标签的时候，才会将值赋予给value，也就是在`change`事件之后再进行信息同步。\n    `number` 自动将用户输入值转化为数值类型，但如果这个值无法被`parseFloat`解析，则会返回原来的值。\n    `trim` 自动过滤用户输入的首尾空格，而中间的空格不会被过滤。\n\n2. 事件修饰符\n    `stop` 阻止了事件冒泡，相当于调用了`event.stopPropagation`方法。\n    `prevent` 阻止了事件的默认行为，相当于调用了`event.preventDefault`方法。\n    `self` 只当在 `event.target` 是当前元素自身时触发处理函数。\n    `once` 绑定了事件以后只能触发一次，第二次就不会触发。\n    `capture` 使用事件捕获模式，即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理。\n    `passive` 告诉浏览器你不想阻止事件的默认行为。\n    `native` 让组件变成像`html`内置标签那样监听根元素的原生事件，否则组件上使用 `v-on` 只会监听自定义事件。\n\n3. 鼠标按键修饰符\n    `left` 左键点击。\n    `right` 右键点击。\n    `middle` 中键点击。\n\n4. 键值修饰符\n\n   键盘修饰符是用来修饰键盘事件（onkeyup，onkeydown）的，有如下：keyCode\n\n   存在很多，但vue为我们提供了别名，分为以下两种：\n\n   - 普通键（enter、tab、delete、space、esc、up...）\n   - 系统修饰键（ctrl、alt、meta、shift...）\n\n### 对 SPA 的理解？\n\n1. 概念：\n    `SPA（Single-page  application）`，即单页面应用，它是一种网络应用程序或网站的模型，通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换时打断用户体验。在`SPA`中，所有必要的代码（HTML、JavaScript 和 CSS）都通过单个页面的加载而检索，或者根据需要（通常是响应用户操作）动态装载适当的资源并添加到页面。页面在任何时间点都不会重新加载，也不会将控制转移到其他页面。举个例子，就像一个杯子，上午装的是牛奶，中午装的是咖啡，下午装的是茶，变得始终是内容，杯子始终不变。\n\n2. `SPA`与`MPA`的区别：\n    `MPA（Muti-page application）`，即多页面应用。在`MPA`中，每个页面都是一个主页面，都是独立的，每当访问一个页面时，都需要重新加载 Html、CSS、JS 文件，公共文件则根据需求按需加载。\n\n   |                 | SPA                       | MPA                                 |\n   | --------------- | ------------------------- | ----------------------------------- |\n   | 组成            | 一个主页面和多个页面片段  | 多个主页面                          |\n   | url模式         | hash模式                  | history模式                         |\n   | SEO搜索引擎优化 | 难实现，可使用SSR方式改善 | 容易实现                            |\n   | 数据传递        | 容易                      | 通过url、cookie、localStorage等传递 |\n   | 页面切换        | 速度快，用户体验良好      | 切换加载资源，速度慢，用户体验差    |\n   | 维护成本        | 相对容易                  | 相对复杂                            |\n\n3. `SPA`的优缺点：\n    优点：\n\n   - 具有桌面应用的即时性、网站的可移植性和可访问性\n   - 用户体验好、快，内容的改变不需要重新加载整个页面\n   - 良好的前后端分离，分工更明确\n\n   缺点：\n\n   - 不利于搜索引擎的抓取\n   - 首次渲染速度相对较慢\n\n### 双向绑定？\n\n1. 概念：\n    Vue 中双向绑定是一个指令`v-model`，可以绑定一个响应式数据到视图，同时视图的变化能改变该值。`v-model`是语法糖，默认情况下相当于`:value`和`@input`，使用`v-model`可以减少大量繁琐的事件处理代码，提高开发效率。\n2. 使用：\n    通常在表单项上使用`v-model`，还可以在自定义组件上使用，表示某个值的输入和输出控制。\n3. 原理：\n    `v-model`是一个指令，双向绑定实际上是Vue 的编译器完成的，通过输出包含`v-model`模版的组件渲染函数，实际上还是`value`属性的绑定及`input`事件监听，事件回调函数中会做相应变量的更新操作。\n\n### 子组件是否可以直接改变父组件的数据？\n\n1. 所有的`prop`都遵循着单项绑定原则，`props`因父组件的更新而变化，自然地将新状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。\n    另外，每次父组件更新后，所有的子组件中的`props`都会被更新为最新值，这就意味着不应该子组件中去修改一个`prop`，若这么做了，Vue 会在控制台上抛出警告。\n2. 实际开发过程中通常有两个场景导致要修改prop：\n   - `prop`被用于传入初始值，而子组件想在之后将其作为一个局部数据属性。这种情况下，最好是新定义一个局部数据属性，从`props`获取初始值即可。\n   - 需要对传入的`prop`值做进一步转换。最好是基于该`prop`值定义一个计算属性。\n3. 实践中，如果确实要更改父组件属性，应`emit`一个事件让父组件变更。当对象或数组作为`props`被传入时，虽然子组件无法更改`props`绑定，但仍然**可以**更改对象或数组内部的值。这是因为JS的对象和数组是按引用传递，而对于 Vue 来说，禁止这样的改动虽然可能，但是有很大的性能损耗，比较得不偿失。\n\n### router 和 route 的区别？\n\n1. `$router`是VueRouter的实例对象，是一个全局的路由对象，包含了所有路由的对象和属性。\n2. `$route`是一个跳转的路由对象，可以认为是当前组件的路由管理，指当前激活的路由对象，包含当前url解析得到的数据，可以从对象里获取一些数据，如：name，path，params，query等。\n\n\n\n### vue-router 的路由传参方式？\n\n1. 声明式导航 `router-link`：\n\n```js\n<router-link :to=\"'/users?userId:1'\"></router-link>\n<router-link :to=\"{ name: 'users', params: { userId: 1 } }\"></router-link>\n<router-link :to=\"{ path: '/users', query: { userId: 1 } }\"></router-link>\n```\n\n1. 编程式导航 router-push：\n\n   - 通过`params`传参\n\n   ```js\n   this.$router.push({\n       name: 'users',\n       params: {\n           userId: 1\n       }\n   });\n   // 路由配置\n   {\n       path: '/users',\n       name: 'users',\n       component: User\n   }\n   // 跳转后获取路由参数\n   this.$route.params.userId // 为 1\n   ```\n\n   - 通过`query`传参\n\n   ```php\n   this.$router.push({\n       path: '/users',\n       query: {\n           userId: 1\n       } \n   });\n   // 路由配置\n   {\n       path: '/users',\n       name: 'users',\n       component: User\n   }\n   // 跳转后获取路由参数\n   this.$route.query.userId\n   ```\n\n   - 动态路由\n\n   ```js\n   this.$router.push('/users/${userId}');\n   // 路由配置\n   {\n       path: '/users/:userId',\n       name: 'users',\n       component: User\n   }\n   // 跳转后获取路由参数\n   this.$route.params.userId\n   ```\n\n\n\n### Vue Router中的常用路由模式和原理？\n\n1. hash 模式：\n\n- `location.hash`的值就是url中 `#` 后面的东西。它的特点在于：hash虽然出现url中，但不会被包含在HTTP请求中，对后端完全没有影响，因此改变hash不会重新加载页面。\n- 可以为hash的改变添加监听事件`window.addEventListener(\"hashchange\", funcRef, false)`，每一次改变`hash (window.location.hash)`，都会在浏览器的访问历史中增加一个记录，利用hash的以上特点，就可以实现**前端路由更新视图但不重新请求页面**的功能了。\n   特点：兼容性好但是不美观\n\n1. history 模式：\n    利用 HTML5 History Interface 中新增的`pushState()`和`replaceState()`方法。\n    这两个方法应用于浏览器的历史记录栈，在当前已有的`back`、`forward`、`go` 的基础上(使用`popState()`方法)，他们提供了对历史记录进行修改的功能。\n    这两个方法有个共同点：当调用他们修改浏览器历史记录栈后，虽然当前url改变了，但浏览器不会刷新页面，这就为单页面应用前端路由“更新视图但不重新请求页面”提供了基础\n    特点：虽然美观，但是刷新会出现 404 需要后端进行配置。\n\n### 动态路由？\n\n很多时候，我们需要将给定匹配模式的路由映射到同一个组件，这种情况就需要定义动态路由。例如，我们有一个 User组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用`动态路径参数（dynamic segment）`来达到这个效果：`{path: '/user/:id', compenent: User}`，其中`:id`就是动态路径参数。\n\n### 对Vuex的理解？\n\n1. 概念：\n    Vuex 是 Vue 专用的状态管理库，它以全局方式集中管理应用的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n2. 解决的问题：\n    Vuex 主要解决的问题是多组件之间状态共享。利用各种通信方式，虽然也能够实现状态共享，但是往往需要在多个组件之间保持状态的一致性，这种模式很容易出问题，也会使程序逻辑变得复杂。Vuex 通过把组件的共享状态抽取出来，以全局单例模式管理，这样任何组件都能用一致的方式获取和修改状态，响应式的数据也能够保证简洁的单向流动，使代码变得更具结构化且易于维护。\n3. 什么时候用:\n    Vuex 并非是必须的，它能够管理状态，但同时也带来更多的概念和框架。如果我们不打算开发大型单页应用或应用里没有大量全局的状态需要维护，完全没有使用Vuex的必要，一个简单的 store 模式就够了。反之，Vuex将是自然而然的选择。\n4. 用法：\n    Vuex 将全局状态放入`state`对象中，它本身是一颗状态树，组件中使用`store`实例的`state`访问这些状态；然后用配套的`mutation`方法修改这些状态，并且只能用`mutation`修改状态，在组件中调用`commit`方法提交`mutation`；如果应用中有异步操作或复杂逻辑组合，需要编写`action`，执行结束如果有状态修改仍需提交`mutation`，组件中通过`dispatch`派发`action`。最后是模块化，通过`modules`选项组织拆分出去的各个子模块，在访问状态（state）时需注意添加子模块的名称，如果子模块有设置`namespace`，那么提交`mutation`和派发`action`时还需要额外的命名空间前缀。\n\n### 页面刷新后Vuex 状态丢失怎么解决？\n\nVuex 只是在内存中保存状态，刷新后就会丢失，如果要持久化就需要保存起来。\n\n`localStorage`就很合适，提交`mutation`的时候同时存入`localStorage`，在`store`中把值取出来作为`state`的初始值即可。\n\n也可以使用第三方插件，推荐使用`vuex-persist`插件，它是为 Vuex 持久化储存而生的一个插件，不需要你手动存取`storage`，而是直接将状态保存至 `cookie` 或者 `localStorage`中。\n\n### 关于 Vue SSR 的理解？\n\n`SSR`即`服务端渲染（Server Side Render）`，就是将 Vue 在客户端把标签渲染成 html 的工作放在服务端完成，然后再把 html 直接返回给客户端。\n\n- 优点：\n   有着更好的 SEO，并且首屏加载速度更快。\n- 缺点：\n   开发条件会受限制，服务器端渲染只支持 beforeCreate 和 created 两个钩子，当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于 Node.js 的运行环境。服务器会有更大的负载需求。\n\n### 了解哪些 Vue 的性能优化方法？\n\n- 路由懒加载。有效拆分应用大小，访问时才异步加载。\n- `keep-alive`缓存页面。避免重复创建组件实例，且能保留缓存组件状态。\n- `v-for`遍历避免同时使用`v-if`。实际上在 Vue 3 中已经是一个错误用法了。\n- 长列表性能优化，可采用虚拟列表。\n- `v-once`。不再变化的数据使用`v-once`。\n- 事件销毁。组件销毁后把全局变量和定时器销毁。\n- 图片懒加载。\n- 第三方插件按需引入。\n- 子组件分割。较重的状态组件适合拆分。\n- 服务端渲染。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/js/vue复习.md","raw":"---\ntitle: vue复习\ntags:\n  - vue\n  - JS\ncategories: JS\nkeywords: vue复习\ndescription: vue复习\ntop_img: 设置false不显示顶部图片\nsticky: 数值越大越靠前\ncover: \"https://raw.githubusercontent.com/why862555625/images/main/images/15.jpg\"\ncomments: false评论\nabbrlink: c9a941a3\ndate: 2023-05-26 15:38:34\nupdated: 2023-05-26 15:38:34\n---\n\n\n\nvue复习\n\n<!-- more -->\n\n### MVVM模型？\n\nMVVM，是`Model-View-ViewModel`的简写，其本质是`MVC`模型的升级版。其中 `Model` 代表数据模型，`View` 代表看到的页面，`ViewModel`是`View`和`Model`之间的桥梁，数据会绑定到`ViewModel`层并自动将数据渲染到页面中，视图变化的时候会通知`ViewModel`层更新数据。以前是通过操作`DOM`来更新视图，现在是`数据驱动视图`。\n\n### Vue的生命周期\n\nVue 的生命周期可以分为8个阶段：创建前后、挂载前后、更新前后、销毁前后，以及一些特殊场景的生命周期。Vue 3 中还新增了是3个用于调试和服务端渲染的场景。\n\n| Vue 2中的生命周期钩子 | Vue 3选项式API的生命周期选项 | Vue 3 组合API中生命周期钩子 | 描述                                                   |\n| --------------------- | ---------------------------- | --------------------------- | ------------------------------------------------------ |\n| `beforeCreate`        | `beforeCreate`               | `setup()`                   | 创建前，此时`data`和 `methods`的数据都还没有初始化     |\n| `created`             | `created`                    | `setup()`                   | 创建后，`data`中有值，尚未挂载，可以进行一些`Ajax`请求 |\n| `beforeMount`         | `beforeMount`                | `onBeforeMount`             | 挂载前，会找到虚拟`DOM`，编译成`Render`                |\n| `mounted`             | `mounted`                    | `onMounted`                 | 挂载后，`DOM`已创建，可用于获取访问数据和`DOM`元素     |\n| `beforeUpdate`        | `beforeUpdate`               | `onBeforeUpdate`            | 更新前，可用于获取更新前各种状态                       |\n| `updated`             | `updated`                    | `onUpdated`                 | 更新后，所有状态已是最新                               |\n| `beforeDestroy`       | `beforeUnmount`              | `onBeforeUnmount`           | 销毁前，可用于一些定时器或订阅的取消                   |\n| `destroyed`           | `unmounted`                  | `onUnmounted`               | 销毁后，可用于一些定时器或订阅的取消                   |\n| `activated`           | `activated`                  | `onActivated`               | `keep-alive`缓存的组件激活时                           |\n| `deactivated`         | `deactivated`                | `onDeactivated`             | `keep-alive`缓存的组件停用时                           |\n| `errorCaptured`       | `errorCaptured`              | `onErrorCaptured`           | 捕获一个来自子孙组件的错误时调用                       |\n| —                     | `renderTracked`              | `onRenderTracked`           | 调试钩子，响应式依赖被收集时调用                       |\n| —                     | `renderTriggered`            | `onRenderTriggered`         | 调试钩子，响应式依赖被触发时调用                       |\n| —                     | `serverPrefetch`             | `onServerPrefetch`          | 组件实例在服务器上被渲染前调用                         |\n\n**关于Vue 3中的生命周期建议阅读官方文档!!!!**\n\n[组合式 API：生命周期钩子--官方文档](https://link.juejin.cn/?target=https%3A%2F%2Fcn.vuejs.org%2Fapi%2Fcomposition-api-lifecycle.html)\n[选项式 API：生命周期选项--官方文档](https://link.juejin.cn/?target=https%3A%2F%2Fcn.vuejs.org%2Fapi%2Foptions-lifecycle.html)\n\n**父子组件的生命周期：**\n\n- `加载渲染阶段`：父 beforeCreate -> 父 created -> 父 beforeMount -> 子 beforeCreate -> 子 created -> 子 beforeMount -> 子 mounted -> 父 mounted\n- `更新阶段`：父 beforeUpdate -> 子 beforeUpdate -> 子 updated -> 父 updated\n- `销毁阶段`：父 beforeDestroy -> 子 beforeDestroy -> 子 destroyed -> 父 destroyed\n\n### Vue.$nextTick\n\n**在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。**\n\n`nextTick` 是 Vue 提供的一个全局 API，由于 Vue 的异步更新策略，导致我们对数据修改后不会直接体现在 DOM 上，此时如果想要立即获取更新后的 DOM 状态，就需要借助该方法。\n\nVue 在更新 DOM 时是异步执行的。当数据发生变化，Vue 将开启一个异步更新队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 `watcher` 被多次触发，只会被推入队列一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。`nextTick`方法会在队列中加入一个回调函数，确保该函数在前面的 DOM 操作完成后才调用。\n\n使用场景：\n\n1. 如果想要在修改数据后立刻得到更新后的`DOM`结构，可以使用`Vue.nextTick()`\n2. 在`created`生命周期中进行`DOM`操作\n\n### Vue 实例挂载过程中发生了什么？\n\n挂载过程指的是 `app.mount()`过程，这是一个初始化过程，整体上做了两件事情：`初始化`和`建立更新机制`。\n\n初始化会创建组件实例、初始化组件状态、创建各种响应式数据。\n\n建立更新机制这一步会立即执行一次组件的更新函数，这会首次执行组件渲染函数并执行`patch`将`vnode` 转换为 `dom`； 同时首次执行渲染函数会创建它内部响应式数据和组件更新函数之间的依赖关系，这使得以后数据发生变化时会执行对应的更新函数。\n\n### Vue 的模版编译原理\n\nVue 中有个独特的编译器模块，称为`compiler`，它的主要作用是将用户编写的`template`编译为js中可执行的`render`函数。\n 在Vue 中，编译器会先对`template`进行解析，这一步称为`parse`，结束之后得到一个JS对象，称之为`抽象语法树AST`；然后是对`AST`进行深加工的转换过程，这一步称为`transform`，最后将前面得到的`AST`生成JS代码，也就是`render`函数。\n\n### Vue 的响应式原理\n\n1. Vue 2 中的数据响应式会根据数据类型做不同的处理。如果是对象，则通过\n\n   ```\n   Object.defineProperty(obj,key,descriptor)\n   ```\n\n   拦截对象属性访问，当数据被访问或改变时，感知并作出反应；如果是数组，则通过覆盖数组原型的方法，扩展它的7个变更方法（push、pop、shift、unshift、splice、sort、reverse），使这些方法可以额外的做更新通知，从而做出响应。\n\n   缺点：\n\n   - 初始化时的递归遍历会造成性能损失；\n   - 通知更新过程需要维护大量 `dep` 实例和 `watcher` 实例，额外占用内存较多；\n   - 新增或删除对象属性无法拦截，需要通过 `Vue.set` 及 `delete` 这样的 API 才能生效；\n   - 对于`ES6`中新产生的`Map`、`Set`这些数据结构不支持。\n\n2. Vue 3 中利用`ES6`的`Proxy`机制代理需要响应化的数据。可以同时支持对象和数组，动态属性增、删都可以拦截，新增数据结构均支持，对象嵌套属性运行时递归，用到时才代理，也不需要维护特别多的依赖关系，性能取得很大进步。\n\n### 虚拟DOM\n\n1. 概念：\n    虚拟DOM，顾名思义就是虚拟的DOM对象，它本身就是一个JS对象，只不过是通过不同的属性去描述一个视图结构。\n2. 虚拟DOM的好处：\n    (1) 性能提升\n    直接操作DOM是有限制的，一个真实元素上有很多属性，如果直接对其进行操作，同时会对很多额外的属性内容进行了操作，这是没有必要的。如果将这些操作转移到JS对象上，就会简单很多。另外，操作DOM的代价是比较昂贵的，频繁的操作DOM容易引起页面的重绘和回流。如果通过抽象VNode进行中间处理，可以有效减少直接操作DOM次数，从而减少页面的重绘和回流。\n    (2) 方便跨平台实现\n    同一VNode节点可以渲染成不同平台上对应的内容，比如：渲染在浏览器是DOM元素节点，渲染在Native（iOS、Android）变为对应的控件。Vue 3 中允许开发者基于VNode实现自定义渲染器（renderer），以便于针对不同平台进行渲染。\n3. 结构：\n    没有统一的标准，一般包括`tag`、`props`、`children`三项。\n    `tag`：必选。就是标签，也可以是组件，或者函数。\n    `props`：非必选。就是这个标签上的属性和方法。\n    `children`：非必选。就是这个标签的内容或者子节点。如果是文本节点就是字符串；如果有子节点就是数组。换句话说，如果判断`children`是字符串的话，就表示一定是文本节点，这个节点肯定没有子元素。\n\n### diff 算法\n\n由于目前`Vue3`对于性能的优化做了很多的处理，所以其在更新时并不会对所有的节点都进行`diff`更新。目前会进行`diff`更新的有以下两种情况：\n\n- `v-for`容器节点\n- 自写的`render()`函数\n\n还有一种特殊情况会进行无`diff`的按序更新，这种更新是全替换模式，非常耗时：\n\n- 无`key`值的`v-for`语句，此时会打上`UNKEYED_FRAGMENT`标记\n\n注意，`Vue3`没有主动提供片段这个功能，仅会在出现以下写法时会生成片段：\n\n- 一个组件有多个根节点，会生成一个片段包裹，此时其为稳定片段(`STABLE_FRAGMENT`)\n- `v-for`语句，会生成一个片段包裹\n- `v-if`语句，有多个子节点或不为单个文本节点，会生成一个片段包裹(`STABLE_FRAGMENT`)\n\n> 本文上述论点都是基于浏览器环境，非*NodeJS*环境(*SSR*)。文中提供的代码进行了**适当的简化**。\n\n在我们使用`template`的情况下，更新基本上会通过`block`进行更新——即节点自更新\n\n#### diff 更新\n\n##### VUE2\n\n![image-20230528150909234](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528150909234.png)\n\n\n\n![image-20230528150936549](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528150936549.png)\n\n\n\n![image-20230528151019742](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151019742.png)\n\n\n\n![image-20230528151119230](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151119230.png)\n\n第一次对比后结果\n\n![image-20230528151309763](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151309763.png)\n\n第二次\n\n![image-20230528151400771](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151400771.png)\n\n第三次\n\n![image-20230528151428703](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151428703.png)\n\n最后整理\n\n![image-20230528151504941](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151504941.png)\n\n##### VUE3\n\n`diff`更新调用的内部的`patchKeyedChildren`方法，其大致流程分为三步：\n\n1. 对比新旧节点头部相同指针的节点，相同则进行`diff`，不同则跳转下一步。\n2. 对比新旧节点尾部指针指向节点，相同则进行`diff`，不同则跳转下一步。\n3. 此时剩余新旧节点，可能存在乱序、已移除或新增的情况，进行特殊处理来更新。\n\n下面是函数最开始做的初始化，其中`c1/c2`分别代表新旧节点的子节点数组；`i`表示两个新旧节点指向同步的指针，它们是同步的；`e1/e2`分别代表指向两个子节点数组尾部的指针：\n\n```js\nlet i = 0\nconst l2 = c2.length\n\n// 变更前节点的尾下标\nlet e1 = c1.length - 1 // prev ending index\n\n// 变更后节点的尾下标\nlet e2 = l2 - 1 // next ending index\n```\n\n其中`patch()`函数用于对节点进行更新，`isSameVNodeType()`函数用于判断两个节点是否具有相同的类型，此时其需要满足类型一样且`key`值相等。\n\n> 这里的类型指，例如组件，则其为组件的配置对象，元素则为元素的标记。\n\n\n\n#### 1. 对比头部等位指针节点\n\n首先其会从头部指针开始，对比新旧节点是否相同：\n\n```js\njs复制代码// 1. sync from start\n// 1. 从开始位置同步\n// (a b) c\n// (a b) d e\nwhile (i <= e1 && i <= e2) {\n  const n1 = c1[i]\n  const n2 = c2[i]\n\n  // 节点没有发生变更时，进行patch\n  if (isSameVNodeType(n1, n2)) {\n    patch(n1, n2)\n    // 不同节点时，立刻结束\n  } else {\n    break\n  }\n  i++\n}\n```\n\n注释中给出了一个例子，即如果存在下图的新旧队列：\n\n![image-20230527224906472](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527224906472.png)\n\n由于此时两个指针的`VNode`相同，那么可以复用则直接进行`patch()`更新。之后指针向右移动一位，对比两个数组下标为 `1` 的位置：\n\n![image-20230527225018797](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225018797.png)\n\n同样的，节点相同，进行更新然后指针向后移动：\n\n![image-20230527225137121](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225137121.png)\n\n\n\n此时两个节点不一样了，那么本次头部对比到此结束。到此我们排除了头部位置可复用的节点，接下来那么肯定是排除尾部位置的可复用节点。\n\n### 2. 对比尾部等位指针节点\n\n尾部的可复用节点检查方法与头部一样，唯一一点不同的是，它们有各自的指针分别指向子节点数组尾部。所以此时要使用两个指针`e1/e2`。\n\n以此时要使用两个指针`e1/e2`。\n\n```js\njs复制代码// 2. sync from end\n// 2. 从尾部位置开始查找\n// a (b c)\n// d e (b c)\nwhile (i <= e1 && i <= e2) {\n  const n1 = c1[e1]\n  const n2 = c2[e2]\n  if (isSameVNodeType(n1, n2)) {\n    patch(n1, n2)\n  } else {\n    break\n  }\n  e1--\n  e2--\n}\n```\n\n还是按注释中的例子放图：\n\n![image-20230527225256542](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225256542.png)\n\n当前指针指向节点相同，节点可复用，直接更新，同时指针向前一起移动：\n\n![image-20230527225417598](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225417598.png)\n\n当前指针指向节点相同，节点可复用，直接更新，同时指针向前一起移动：\n\n![](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225513256.png)\n\n\n\n此时，两个指针指向节点不再相同，停止此处的对比。\n\n------\n\n经过前两步的处理，新旧队列已经进一步缩短了，此时剩下的节点就可能存在下面三种情况：\n\n- 有新增的节点\n- 有节点被删除了\n- 相同的节点，但是移动了位置\n\n在实际的场景中，那么就只能存在下面三种剩余情况：\n\n- 仅有新增的节点(此时一定`i > e1`)\n- 仅进行了节点删除(此时一定`i > e2`)\n- 乱序的，一定有移动的节点，其中可能包含新增或有删除的节点(此时一定有`i <= e2`且`i <= e1`)\n\n`Vue`按处理的简易程度，`Vue`先对前两种情况进行了单独的处理，再对三种混有的情况进行了处理。\n\n#### 3.1 处理新增的节点的单独情况\n\n判断新增的节点是以旧队列为基准，那么此时的情况是这样的：\n\n![image-20230527230120660](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230120660.png)\n\n\n\n或新增的节点在首部：\n\n![image-20230527230226562](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230226562.png)\n\n\n\n此时会存在这样的情况`e1 < i`且`e2 >= i`，那么我们只需要更新`e1 => i`间的节点即可，于是有了这些代码：\n\n```js\n// 3. common sequence + mount\n// 3. 有新增的节点时\n// (a b)\n// (a b) c\n// i = 2, e1 = 1, e2 = 2\n// (a b)\n// c (a b)\n// i = 0, e1 = -1, e2 = 0\nif (i <= e2) {\n  if (i > e1) {\n    //  当前节点后面的节点\n    const nextPos = e2 + 1\n\n    // 我们要以这个节点为锚点在其之前添加元素，没有则添加到父节点最后\n    const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor\n    while (i <= e2) {\n      patch(null, c2[i])\n      i++\n    }\n  }\n}\n```\n\n#### 3.2 处理删除节点的单独情况\n\n如果没有存在仅有新增节点的情况，那么其会判断是否是仅进行删除节点的情况，此时可能出现下图的两种情况：\n\n删除节点在尾部：\n\n![](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230416959.png)\n\n\n\n删除节点在尾部：\n\n![image-20230527230458558](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230458558.png)\n\n\n\n此时`i > e2`，那么我们只需要将旧节点数组中`i => e1`之间的所有节点删除即可(下面的`else if`语句承接上面)：\n\n```js\njs复制代码// 4. common sequence + unmount\n// 4. 节点移除\n// (a b) c\n// (a b)\n// i = 2, e1 = 2, e2 = 1\n// a (b c)\n// (b c)\n// i = 0, e1 = 0, e2 = -1\nelse if (i > e2) {\n  while (i <= e1) {\n    // 移除原节点\n    unmount(c1[i])\n    i++\n  }\n}\n```\n\n#### 3.3 乱序，但一定有移动的节点的情况\n\n最后一种情况就是比较复杂的情况，此时`Vue`做的处理是，先查看旧节点序列在变为新节点序列后，旧节点序列中是否有些节点还是按现在的顺序排列的(可以间断)，此时只对其余变更的节点进行操作，就能进行最小幅度的`DOM`操作了。\n\n> 此时相对于求旧节点的最长递增序列，这里你可以会想到为什么不求最小编辑距离，因为最小编辑距离的时间复杂度在大多数情况下比它高\n\n##### 3.3.1 建立新节点 key 与其下标的映射\n\n首先，`Vue`先将新节点数组进行遍历，将它们有`key`值的节点与其在新节点数组中的下标建立映射，存储在`keyToNewIndexMap`中，方便在复用时查找：\n\n```js\nconst s1 = i // prev starting index\nconst s2 = i // next starting index\n\n// 5.1 build key:index map for newChildren\n// 5.1 生成一个key map\nconst keyToNewIndexMap = new Map()\n\n// 遍历新节点，乱序的部分，将这些具有key的节点存入map\nfor (i = s2; i <= e2; i++) {\n  const nextChild = c2[i]\n  if (nextChild.key != null) {\n    keyToNewIndexMap.set(nextChild.key, i)\n  }\n}\n```\n\n##### 3.3.2 移除新节点队列中不存在的旧节点并更新复用节点\n\n之后，遍历旧节点数组，通过刚刚建立的`Map`，如果当前旧节点在新节点数组中已经不存在了，那么说明要移除了。\n\n整个过程比较复杂，因为要预先做处理，为后续是否需要移动节点做准备：\n\n```js\n// 5.2 loop through old children left to be patched and try to patch\n// matching nodes & remove nodes that are no longer present\n// 5.2 遍历旧节点，patch匹配的节点，移除不再在节点\nlet j\n\n// 当前处理过的节点数\nlet patched = 0\n\n// 需要patch的节点数\nconst toBePatched = e2 - s2 + 1\n\n// 是否需要移动节点\nlet moved = false\n\n// used to track whether any node has moved\n// 记录节点是否已经移动\nlet maxNewIndexSoFar = 0\n\n// works as Map<newIndex, oldIndex>\n// Note that oldIndex is offset by +1\n// and oldIndex = 0 is a special value indicating the new node has\n// no corresponding old node.\n// 注意旧下标的值都会+1，因为0表示没有对应的旧节点\n// used for determining longest stable subsequence\n// 新下标与旧下标的map\n// 这里的新下标以s2位置为0下标，而旧下标为旧下标值 +１\nconst newIndexToOldIndexMap = new Array(toBePatched)\n\n// 初始化值为0\nfor (i = 0; i < toBePatched; i++) newIndexToOldIndexMap[i] = 0\n```\n\n这里我说明下三个变量，首先是`newIndexToOldIndexMap`，其用来记录节点的新坐标到旧坐标的映射(当然是节点可复用的情况下)。为了后续计算最长递增子序列，所以其新坐标以`s2`为起点，长度为当前需要处理的节点总数，并且其存入的旧节点下标要在原值的基础上`+ 1`(因为`0`表示当前节点没有对应的旧节点)。举个例子，有如下图一样的更新序列：\n\n![image-20230527230956800](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230956800.png)\n\n那么节点`e`存入`newIndexToOldIndexMap`后为：\n\n```js\n// 展示，不是赋值语句\nnewIndexToOldIndexMap = [4, 0, 0, 0]\n```\n\n其余全部节点存入后为：\n\n```js\n// 展示，不是赋值语句\nnewIndexToOldIndexMap = [4, 3, 2, 0]\n```\n\n`moved`变量则是表示是否有节点需要移动，其判定要基于`maxNewIndexSoFar`的值。\n\n`maxNewIndexSoFar`表示当前可复用节点距离`s2`(即第一个乱序节点的最远距离)。如果有对应可以复用的节点，那么在每次迭代处理节点时，如果当前节点所处位置距离`s2`距离超过`maxNewIndexSoFar`，那么`maxNewIndexSoFar`会更新为当前节点在新队列中的下标；当其小于`maxNewIndexSoFar`时，就会标记`moved = true`。\n\n```js\n// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，\n// 那么每次都会进入该if语句\nif (newIndex >= maxNewIndexSoFar) {\n  // 当前节点未移动，更新下标\n  maxNewIndexSoFar = newIndex\n\n  // 如果进入该else语句说明有节点之前节点交叉了\n} else {\n  moved = true\n}\n```\n\n想象一下，如果节点在新旧序列中，都是按照相同的顺序递增，那么`maxNewIndexSoFar`也会一直递增，即每次迭代`newIndex >= maxNewIndexSoFar`，那么就不需要移动节点；但是如果某次迭代，`newIndex < maxNewIndexSoFar`，那么说明当前节点由之前靠后的位置移动了现在靠前的位置。\n\n就拿刚刚乱序的图举例，第一次迭代`c`节点的`newIndex = 4`，则`maxNewIndexSoFar = 4`；第二次迭代`d`节点时，其`newIndex = 3`，此时`newIndex < maxNewIndexSoFar`，说明`c/d`节点之间的位置在新旧发生了交叉，所以我们至少需要移动它们其中一个节点。\n\n理解了这个道理，现在我们可以正式看看这段代码了。由于要卸载节点，那么本次遍历要以`s1 <-> e1`之间的节点为基准进行遍历，整体遍历代码如下：\n\n```js\n// 遍历旧节点\nfor (i = s1; i <= e1; i++) {\n  // 当前下标的旧节点\n  const prevChild = c1[i]\n\n  // 当前patch的节点数超过新节点中要patch的总数时，执行unmount操作\n  // 直接进行卸载操作，因为多余的节点不需要了\n  if (patched >= toBePatched) {\n    // all new children have been patched so this can only be a removal\n    unmount(prevChild)\n    continue\n  }\n\n  // 尝试寻找是否有对应的新节点\n  let newIndex\n\n  // 旧节点具有key时，获取相同key值节点所处的下标\n  if (prevChild.key != null) {\n    newIndex = keyToNewIndexMap.get(prevChild.key)\n\n    // 没有key时则找相同类型的节点是否存在\n  } else {\n    // key-less node, try to locate a key-less node of the same type\n    // 当前查找范围为新节点中需要patch的节点之间\n    for (j = s2; j <= e2; j++) {\n      if (\n        // 0表示对应下标下当前还未有节点(注意当前是以s2为0下标基准)\n        // 这里确认当前新下标位置未有对应的旧下标，防止是已在map中的节点\n\n        newIndexToOldIndexMap[j - s2] === 0 &&\n        isSameVNodeType(prevChild, c2[j])\n      ) {\n        newIndex = j\n        break\n      }\n    }\n  }\n\n  // 没找到对应节点时说明该节点已经不存在了，直接进行unmount\n  if (newIndex === undefined) {\n    unmount(prevChild)\n\n    // 找到时进行位置移动操作，并patch\n  } else {\n    // 将旧节点位置下标+1后存入，新节点以s2为起点，即0坐标\n    newIndexToOldIndexMap[newIndex - s2] = i + 1\n\n    // 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，\n    // 那么每次都会进入该if语句\n    if (newIndex >= maxNewIndexSoFar) {\n      // 当前节点未移动，更新下标\n      maxNewIndexSoFar = newIndex\n\n      // 如果进入该else语句说明有节点之前节点交叉了\n    } else {\n      moved = true\n    }\n\n    // patch该节点\n    patch(prevChild, c2[newIndex])\n    patched++\n  }\n}\n```\n\n首先当当前可复用的节点复用时，会使`patched`值`+1`，当复用的节点超过乱序的新节点长度时，那么其余的节点肯定是要卸载的节点(因为新节点序列都处理完毕了)：\n\n```js\nif (patched >= toBePatched) {\n    // all new children have been patched so this can only be a removal\n    unmount(prevChild)\n    continue\n  }\n```\n\n之后，`Vue`尝试寻找一下当前旧节点是否被复用，即它被移动到了新节点序列的其他位置。首先如果当前节点有`key`值，那么其会尝试直接从刚刚的`keyToNewIndexMap`中查找；如果没有找到，那么其会遍历当前所有的新节点序列，依次对比是否与当前节点相同，在复合同类型节点时对其进行复用。\n\n```js\n// 尝试寻找是否有对应的新节点\nlet newIndex\n\n// 旧节点具有 key 时，获取相同 key 值节点所处的下标\nif (prevChild.key != null) {\n  newIndex = keyToNewIndexMap.get(prevChild.key)\n\n  // 没有key时则找相同类型的节点是否存在\n} else {\n  // key-less node, try to locate a key-less node of the same type\n  // 当前查找范围为新节点中需要 patch 的节点之间\n  for (j = s2; j <= e2; j++) {\n    if (\n      // 0 表示对应下标下当前还未有节点(注意当前是以 s2 为 0 下标基准)\n      // 这里确认当前新下标位置未有对应的旧下标，防止是已在 map 中的节点\n      newIndexToOldIndexMap[j - s2] === 0 &&\n      isSameVNodeType(prevChild, c2[j])\n    ) {\n      newIndex = j\n      break\n    }\n  }\n}\n```\n\n在直接通过类型查找复用节点时，其存在一个`newIndexToOldIndexMap[j - s2] === 0`条件，它表示当前新节点下标未有对应的旧节点(`0`表示没有，在之后的代码中，如果查找到对应的`newIndex`，其会存入`newIndexToOldIndexMap`中)。这样可以防止新旧节点被重复复用或已被处理再次被处理。\n\n到此，对于旧节点的`newIndex`是否被查找到就会出现两种情况了：\n\n1. 没有，说明当前节点已删除了，移除该`DOM`节点\n2. 有，复用，**更新节点属性**\n\n```js\n// 没找到对应节点时说明该节点已经不存在了，直接进行unmount\nif (newIndex === undefined) {\n  unmount(prevChild)\n\n  // 找到时进行位置移动操作，并patch\n} else {\n  // 将旧节点位置下标+1后存入，新节点以s2为起点，即0坐标\n  newIndexToOldIndexMap[newIndex - s2] = i + 1\n\n  // 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，\n  // 那么每次都会进入该if语句\n  if (newIndex >= maxNewIndexSoFar) {\n    // 当前节点未移动，更新下标\n    maxNewIndexSoFar = newIndex\n\n    // 如果进入该else语句说明有节点之前节点交叉了\n  } else {\n    moved = true\n  }\n\n  // patch该节点\n  patch(prevChild, c2[newIndex])\n  patched++\n}\n```\n\n在复用的情况下，有我们刚刚提到的[计算节点交叉(是否需要移动)](#332-移除新节点队列中不存在的旧节点并更新复用节点)的场景：\n\n```js\n// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，\n// 那么每次都会进入该if语句\nif (newIndex >= maxNewIndexSoFar) {\n  // 当前节点未移动，更新下标\n  maxNewIndexSoFar = newIndex\n\n  // 如果进入该else语句说明有节点之前节点交叉了\n} else {\n  moved = true\n}\n```\n\n这里就不赘述了。\n\n> 注意，这里对复用的节点进行了`patch()`更新，那么后面就只用进行移动即可，而不需要更新了。\n\n#### 3.3.3 处理新增节点与移动的节点\n\n到此为止，就只有新增节点与移动节点的情况没有处理了。\n\n首先其会需要移动节点时(`moved = true`)根据刚刚创建的`newIndexToOldIndexMap`生成一个最长递增的新节点序列`increasingNewIndexSequence`。\n\n```js\njs复制代码// 5.3 move and mount\n// 5.3 移动与mount\n// generate longest stable subsequence only when nodes have moved\n// 有节点需要移动，生成长期稳定的子序列，仅对移动过的节点处理\nconst increasingNewIndexSequence = moved\n  ? // 获取最长递增子序列的下标数组\n    getSequence(newIndexToOldIndexMap)\n  : EMPTY_ARR\n```\n\n那么这个序列的作用是什么？它就是用来**辅助移动节点**，而且是在最小次数下移动节点。由于`newIndexToOldIndexMap`是根据新旧节点之间的映射创建的，其**下标天然代表乱序的新节点数组的顺序**，而且其对应下标中存储的元素也代表该新节点复用的旧节点的下标，那么这里我们就可以看到两个序列：\n\n1. 新节点下标组成的序列(**递增**的，因为我们以它为基准创建的数组)\n2. `newIndexToOldIndexMap`中旧节点下标组成的序列，可能递增也可能乱序\n\n> 关于如何求[最长递增子序列](https://link.juejin.cn?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FLongest_increasing_subsequence)，请单独自行学习，这里就不说明了。\n\n此时倘若旧节点下标组成的序列**也**呈现递增趋势，那么我们便可以操作那些非递增的节点来达到变更为新节点序列的目的。并且这个递增的序列越长，那么我们要操作(移动)的节点就越少。比如下图的情况：\n\n![image-20230528124733993](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124733993.png)\n\n从图中观察，我们可以清楚的看到`c/d`两个节点在前后都保持了递增的关系，那么此时我们只需要移动`e`节点与创建`h`节点即可。\n\n此时其`newIndexToOldIndexMap`为：\n\n```js\njs复制代码newIndexToOldIndexMap = [4, 2, 3, 0]\n\n// 该数组返回的是对应的元素在newIndexToOldIndexMap的下标\n// 而并非实际的旧节点下标\nincreasingNewIndexSequence = [1, 2]\n```\n\n可以看到`2、3`节点与新节点的下标的**递增关系保持一致**，其最长递增子序列(`increasingNewIndexSequence`)为`[1, 2]`，此时我们只需要操作`4/0`两个节点即可。\n\n> `increasingNewIndexSequence`返回的结果为对应的元素在 `newIndexToOldIndexMap`的下标而并非实际的旧节点下标\n\n明白了这个现在我们来看其具体处理的代码：\n\n```js\n// 获取递增序列的尾坐标\nj = increasingNewIndexSequence.length - 1\n\n// looping backwards so that we can use last patched node as anchor\n// 向后循环，这样我们可以用上一个patch过了的节点做锚点\nfor (i = toBePatched - 1; i >= 0; i--) {\n  // 当前要处理的新节点下标及其节点\n  const nextIndex = s2 + i\n  const nextChild = c2[nextIndex]\n\n  // 获取其后一个节点，如果没有则获取其父节点\n  const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor\n\n  // 如果当前新旧节点Map中未找到当前位置新节点的旧节点信息，\n  // 说明是新增节点\n  if (newIndexToOldIndexMap[i] === 0) {\n    // mount new\n    patch(null, nextChild)\n\n    // moved说明有节点需要移动，通过塑造一个递增序列，处于递增序列的节点就可以\n    // 不进行移动，只移动其余节点，这样就减少了节点的移动\n  } else if (moved) {\n    // 如果存在以下情况则移动：\n    // 1. 没有稳定的子序列\n    // 2. 当前节点不在这个稳定的子序列中\n    // move if:\n    // There is no stable subsequence (e.g. a reverse)\n    // OR current node is not among the stable sequence\n    if (j < 0 || i !== increasingNewIndexSequence[j]) {\n      move(nextChild, container, anchor)\n    } else {\n      j--\n    }\n  }\n}\n```\n\n本次遍历以新节点的乱序序列(`s2 <-> e2`)为基准，逆向进行遍历。逆向的原因是因为其在新增节点或更新节点时，可以以后面已经操作过的节点为锚点进行更新(想象一下`Node.insertBefore()/Node.appendChild()`的参数)。\n\n每次遍历会出现三种情况：\n\n- 当前节点未有对应的旧节点下标，则说明是新增节点\n- 该节点需要移动，进行移动\n- 该节点与旧节点序列都保持递增顺序，直接跳过即可(实际反应在代码里面就是没做任何处理)\n\n> 情况`2`与`3`在完整的迭代中是互斥的，两者不会同时出现在整个迭代流程中。\n\n第一种情况，比较简单，这里就不解释了：\n\n```js\n// 如果当前新旧节点Map中未找到当前位置新节点的旧节点信息，\n// 说明是新增节点\nif (newIndexToOldIndexMap[i] === 0) {\n  // mount new\n  patch(null, nextChild\n}\n```\n\n第二种情况要判定`moved = true`，它的原理[之前我们已经解释过了](#332-移除新节点队列中不存在的旧节点并更新复用节点)。这里我们要关注的是它的函数体。根据我们刚刚对递增子序列的理解，那么其应该会在以下情况移动或不移动节点：\n\n- 当前节点处于最长递增子序列中 —— 跳过\n- 当前节点不存在最长递增子序列中 —— 移动\n  - 递增序列已经没有需要跳过的节点了但任存在节点需要更新(实际和不存在的情况一样)\n  - 当前节点不存在最长递增子序列\n\n```js\n// 如果存在以下情况则移动：\n// 1. 没有稳定的子序列(实际和情况2一致，反序时会返回任意一个节点作为最长序列)\n// 2. 当前节点不在这个稳定的子序列中\n// move if:\n// There is no stable subsequence (e.g. a reverse)\n// OR current node is not among the stable sequence\nif (j < 0 || i !== increasingNewIndexSequence[j]) {\n  // 将当前节点移动到锚点节点前或容器节点最后(没有锚点时)\n  move(nextChild, container, anchor)\n} else {\n  j--\n}\n```\n\n![image-20230528124834143](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124834143.png)\n\n在第二次更新中，发现`d`节点存在于单调增序列中，所以本次更新可以跳过：\n\n![image-20230528124910205](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124910205.png)\n\n同理`c`节点也一样，这里就不放图了，处理完`c`节点后此时为这样\n\n![image-20230528124931580](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124931580.png)\n\n此时`e`节点可复用，则将其移动到新`c`节点前即可。\n\n到此为止，上图的`diff`就结束了。\n\n对于第三种情况，由于复用的节点在前后都保持了递增的关系，所以此时我们不需要再重复对节点进行处理，所以遇到复用的节点时直接跳过即可：\n\n![image-20230528125006064](https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528125006064.png)\n\n到此为止全部节点的更新就已经完毕了。\n\n### 为什么组件中的 data 是一个函数？\n\n在 new Vue() 中，可以是函数也可以是对象，因为根实例只有一个，不会产生数据污染。\n\n在组件中，data 必须为函数，目的是为了防止多个组件实例对象之间共用一个 data，产生数据污染；而采用函数的形式，initData 时会将其作为工厂函数都会返回全新的 data 对象。\n\n### Vue 中组件间的通信方式？\n\n1. 父子组件通信：\n\n   父向子传递数据是通过`props`，子向父是通过`$emit`触发事件；通过父链/子链也可以通信（`$parent`/`$children`）；`ref`也可以访问组件实例；`provide`/`inject`；`$attrs`/`$listeners`。\n\n2. 兄弟组件通信：\n\n   全局事件总线`EventBus`、`Vuex`。\n\n3. 跨层级组件通信：\n\n   全局事件总线`EventBus`、`Vuex`、`provide`/`inject`。\n\n### v-show 和 v-if 的区别？\n\n1. 控制手段不同。`v-show`是通过给元素添加 css 属性`display: none`，但元素仍然存在；而`v-if`控制元素显示或隐藏是将元素整个添加或删除。\n2. 编译过程不同。`v-if`切换有一个局部编译/卸载的过程，切换过程中合适的销毁和重建内部的事件监听和子组件；`v-show`只是简单的基于 css 切换。\n3. 编译条件不同。`v-if`是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建，渲染条件为假时，并不做操作，直到为真才渲染。\n4. 触发生命周期不同。`v-show`由 false 变为 true 的时候不会触发组件的生命周期；`v-if`由 false 变为 true 的时候，触发组件的`beforeCreate`、`created`、`beforeMount`、`mounted`钩子，由 true 变为 false 的时候触发组件的`beforeDestory`、`destoryed`钩子。\n5. 性能消耗不同。`v-if`有更高的切换消耗；`v-show`有更高的初始渲染消耗。\n\n使用场景：\n 如果需要非常频繁地切换，则使用`v-show`较好，如：手风琴菜单，tab 页签等； 如果在运行时条件很少改变，则使用`v-if`较好，如：用户登录之后，根据权限不同来显示不同的内容。\n\n### computed 和 watch 的区别？\n\n- `computed`计算属性，依赖其它属性计算值，内部任一依赖项的变化都会重新执行该函数，计算属性有缓存，多次重复使用计算属性时会从缓存中获取返回值，计算属性必须要有`return`关键词。\n- `watch`侦听到某一数据的变化从而触发函数。当数据为对象类型时，对象中的属性值变化时需要使用深度侦听`deep`属性，也可在页面第一次加载时使用立即侦听`immdiate`属性。\n\n运用场景：\n 计算属性一般用在模板渲染中，某个值是依赖其它响应对象甚至是计算属性而来；而侦听属性适用于观测某个值的变化去完成一段复杂的业务逻辑。\n\n### v-if 和 v-for 为什么不建议放在一起使用？\n\nVue 2 中，`v-for`的优先级比`v-if`高，这意味着`v-if`将分别重复运行于每一个`v-for`循环中。如果要遍历的数组很大，而真正要展示的数据很少时，将造成很大的性能浪费。\n\nVue 3 中，则完全相反，`v-if`的优先级高于`v-for`，所以`v-if`执行时，它调用的变量还不存在，会导致异常。\n\n通常有两种情况导致要这样做：\n\n- 为了过滤列表中的项目，比如：`v-for = \"user in users\" v-if = \"user.active\"`。这种情况，可以定义一个计算属性，让其返回过滤后的列表即可。\n- 为了避免渲染本该被隐藏的列表，比如`v-for = \"user in users\"  v-if = \"showUsersFlag\"`。这种情况，可以将`v-if`移至容器元素上或在外面包一层`template`即可。\n\n### Vue 2中的set方法？\n\n[`set`是Vue 2中的一个全局API](https://link.juejin.cn?target=https%3A%2F%2Fv2.cn.vuejs.org%2Fv2%2Fapi%2F%23Vue-set)。可手动添加响应式数据，解决数据变化视图未更新问题。当在项目中直接设置数组的某一项的值，或者直接设置对象的某个属性值，会发现页面并没有更新。这是因为`Object.defineProperty()`的限制，监听不到数据变化，可通过`this.$set(数组或对象，数组下标或对象的属性名，更新后的值)`解决。\n\n### keep-alive 是什么？\n\n- 作用：实现组件缓存，保持组件的状态，避免反复渲染导致的性能问题。\n- 工作原理：Vue.js 内部将 DOM 节点，抽象成了一个个的 VNode 节点，`keep-alive`组件的缓存也是基于 VNode 节点的。它将满足条件的组件在 cache 对象中缓存起来，重新渲染的时候再将 VNode 节点从 cache 对象中取出并渲染。\n- 可以设置以下属性：\n   ① `include`：字符串或正则，只有名称匹配的组件会被缓存。\n   ② `exclude`：字符串或正则，任何名称匹配的组件都不会被缓存。\n   ③ `max`：数字，最多可以缓存多少组件实例。\n   匹配首先检查组件的`name`选项，如果`name`选项不可用，则匹配它的局部注册名称（父组件 components选项的键值），匿名组件不能被匹配。\n\n如果同时使用了`include`、`exclude`，那么`exclude`的优先级高于`include`。\n\n设置了`keep-alive`缓存的组件，会多出两个生命周期钩子：`activated`、`deactivated`。\n 首次进入组件时：beforeCreate --> created --> beforeMount --> mounted --> activated --> beforeUpdate --> updated --> deactivated\n 再次进入组件时：activated --> beforeUpdate --> updated --> deactivated\n\n### mixin\n\n`mixin`（混入）， 它提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。\n\n使用场景： 不同组件中经常会用到一些相同或相似的代码，这些代码的功能相对独立。可以通过mixin 将相同或相似的代码提出来。\n\n缺点：\n\n1. 变量来源不明确\n2. 多 mixin 可能会造成命名冲突（解决方式：Vue 3的组合API）\n3. mixin 和组件出现多对多的关系，使项目复杂度变高。\n\n### 插槽\n\n`slot`插槽，一般在组件内部使用，封装组件时，在组件内部不确定该位置是以何种形式的元素展示时，可以通过`slot`占据这个位置，该位置的元素需要父组件以内容形式传递过来。`slot`分为：\n\n- `默认插槽`：子组件用`<slot>`标签来确定渲染的位置，标签里面可以放`DOM`结构作为后备内容，当父组件在使用的时候，可以直接在子组件的标签内写入内容，该部分内容将插入子组件的`<slot>`标签位置。如果父组件使用的时候没有往插槽传入内容，后备内容就会显示在页面。\n- `具名插槽`：子组件用`name`属性来表示插槽的名字，没有指定`name`的插槽，会有隐含的名称叫做 `default`。父组件中在使用时在默认插槽的基础上通过`v-slot`指令指定元素需要放在哪个插槽中，`v-slot`值为子组件插槽`name`属性值。使用`v-slot`指令指定元素放在哪个插槽中，必须配合`<template>`元素，且一个`<template>`元素只能对应一个预留的插槽，即不能多个`<template>` 元素都使用`v-slot`指令指定相同的插槽。`v-slot`的简写是`#`，例如`v-slot:header`可以简写为`#header`。\n- 作用域插槽：子组件在<slot>标签上绑定props数据，以将子组件数据传给父组件使用。父组件获取插槽绑定 props 数据的方法：\n  1. scope=\"接收的变量名\"：`<template scope=\"接收的变量名\">`\n  2. slot-scope=\"接收的变量名\"：`<template slot-scope=\"接收的变量名\">`\n  3. v-slot:插槽名=\"接收的变量名\"：`<template v-slot:插槽名=\"接收的变量名\">`\n\n### Vue 中的修饰符有哪些？\n\n在Vue 中，修饰符处理了许多 DOM 事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理。Vue中修饰符分为以下几种：\n\n1. 表单修饰符\n    `lazy` 填完信息，光标离开标签的时候，才会将值赋予给value，也就是在`change`事件之后再进行信息同步。\n    `number` 自动将用户输入值转化为数值类型，但如果这个值无法被`parseFloat`解析，则会返回原来的值。\n    `trim` 自动过滤用户输入的首尾空格，而中间的空格不会被过滤。\n\n2. 事件修饰符\n    `stop` 阻止了事件冒泡，相当于调用了`event.stopPropagation`方法。\n    `prevent` 阻止了事件的默认行为，相当于调用了`event.preventDefault`方法。\n    `self` 只当在 `event.target` 是当前元素自身时触发处理函数。\n    `once` 绑定了事件以后只能触发一次，第二次就不会触发。\n    `capture` 使用事件捕获模式，即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理。\n    `passive` 告诉浏览器你不想阻止事件的默认行为。\n    `native` 让组件变成像`html`内置标签那样监听根元素的原生事件，否则组件上使用 `v-on` 只会监听自定义事件。\n\n3. 鼠标按键修饰符\n    `left` 左键点击。\n    `right` 右键点击。\n    `middle` 中键点击。\n\n4. 键值修饰符\n\n   键盘修饰符是用来修饰键盘事件（onkeyup，onkeydown）的，有如下：keyCode\n\n   存在很多，但vue为我们提供了别名，分为以下两种：\n\n   - 普通键（enter、tab、delete、space、esc、up...）\n   - 系统修饰键（ctrl、alt、meta、shift...）\n\n### 对 SPA 的理解？\n\n1. 概念：\n    `SPA（Single-page  application）`，即单页面应用，它是一种网络应用程序或网站的模型，通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换时打断用户体验。在`SPA`中，所有必要的代码（HTML、JavaScript 和 CSS）都通过单个页面的加载而检索，或者根据需要（通常是响应用户操作）动态装载适当的资源并添加到页面。页面在任何时间点都不会重新加载，也不会将控制转移到其他页面。举个例子，就像一个杯子，上午装的是牛奶，中午装的是咖啡，下午装的是茶，变得始终是内容，杯子始终不变。\n\n2. `SPA`与`MPA`的区别：\n    `MPA（Muti-page application）`，即多页面应用。在`MPA`中，每个页面都是一个主页面，都是独立的，每当访问一个页面时，都需要重新加载 Html、CSS、JS 文件，公共文件则根据需求按需加载。\n\n   |                 | SPA                       | MPA                                 |\n   | --------------- | ------------------------- | ----------------------------------- |\n   | 组成            | 一个主页面和多个页面片段  | 多个主页面                          |\n   | url模式         | hash模式                  | history模式                         |\n   | SEO搜索引擎优化 | 难实现，可使用SSR方式改善 | 容易实现                            |\n   | 数据传递        | 容易                      | 通过url、cookie、localStorage等传递 |\n   | 页面切换        | 速度快，用户体验良好      | 切换加载资源，速度慢，用户体验差    |\n   | 维护成本        | 相对容易                  | 相对复杂                            |\n\n3. `SPA`的优缺点：\n    优点：\n\n   - 具有桌面应用的即时性、网站的可移植性和可访问性\n   - 用户体验好、快，内容的改变不需要重新加载整个页面\n   - 良好的前后端分离，分工更明确\n\n   缺点：\n\n   - 不利于搜索引擎的抓取\n   - 首次渲染速度相对较慢\n\n### 双向绑定？\n\n1. 概念：\n    Vue 中双向绑定是一个指令`v-model`，可以绑定一个响应式数据到视图，同时视图的变化能改变该值。`v-model`是语法糖，默认情况下相当于`:value`和`@input`，使用`v-model`可以减少大量繁琐的事件处理代码，提高开发效率。\n2. 使用：\n    通常在表单项上使用`v-model`，还可以在自定义组件上使用，表示某个值的输入和输出控制。\n3. 原理：\n    `v-model`是一个指令，双向绑定实际上是Vue 的编译器完成的，通过输出包含`v-model`模版的组件渲染函数，实际上还是`value`属性的绑定及`input`事件监听，事件回调函数中会做相应变量的更新操作。\n\n### 子组件是否可以直接改变父组件的数据？\n\n1. 所有的`prop`都遵循着单项绑定原则，`props`因父组件的更新而变化，自然地将新状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。\n    另外，每次父组件更新后，所有的子组件中的`props`都会被更新为最新值，这就意味着不应该子组件中去修改一个`prop`，若这么做了，Vue 会在控制台上抛出警告。\n2. 实际开发过程中通常有两个场景导致要修改prop：\n   - `prop`被用于传入初始值，而子组件想在之后将其作为一个局部数据属性。这种情况下，最好是新定义一个局部数据属性，从`props`获取初始值即可。\n   - 需要对传入的`prop`值做进一步转换。最好是基于该`prop`值定义一个计算属性。\n3. 实践中，如果确实要更改父组件属性，应`emit`一个事件让父组件变更。当对象或数组作为`props`被传入时，虽然子组件无法更改`props`绑定，但仍然**可以**更改对象或数组内部的值。这是因为JS的对象和数组是按引用传递，而对于 Vue 来说，禁止这样的改动虽然可能，但是有很大的性能损耗，比较得不偿失。\n\n### router 和 route 的区别？\n\n1. `$router`是VueRouter的实例对象，是一个全局的路由对象，包含了所有路由的对象和属性。\n2. `$route`是一个跳转的路由对象，可以认为是当前组件的路由管理，指当前激活的路由对象，包含当前url解析得到的数据，可以从对象里获取一些数据，如：name，path，params，query等。\n\n\n\n### vue-router 的路由传参方式？\n\n1. 声明式导航 `router-link`：\n\n```js\n<router-link :to=\"'/users?userId:1'\"></router-link>\n<router-link :to=\"{ name: 'users', params: { userId: 1 } }\"></router-link>\n<router-link :to=\"{ path: '/users', query: { userId: 1 } }\"></router-link>\n```\n\n1. 编程式导航 router-push：\n\n   - 通过`params`传参\n\n   ```js\n   this.$router.push({\n       name: 'users',\n       params: {\n           userId: 1\n       }\n   });\n   // 路由配置\n   {\n       path: '/users',\n       name: 'users',\n       component: User\n   }\n   // 跳转后获取路由参数\n   this.$route.params.userId // 为 1\n   ```\n\n   - 通过`query`传参\n\n   ```php\n   this.$router.push({\n       path: '/users',\n       query: {\n           userId: 1\n       } \n   });\n   // 路由配置\n   {\n       path: '/users',\n       name: 'users',\n       component: User\n   }\n   // 跳转后获取路由参数\n   this.$route.query.userId\n   ```\n\n   - 动态路由\n\n   ```js\n   this.$router.push('/users/${userId}');\n   // 路由配置\n   {\n       path: '/users/:userId',\n       name: 'users',\n       component: User\n   }\n   // 跳转后获取路由参数\n   this.$route.params.userId\n   ```\n\n\n\n### Vue Router中的常用路由模式和原理？\n\n1. hash 模式：\n\n- `location.hash`的值就是url中 `#` 后面的东西。它的特点在于：hash虽然出现url中，但不会被包含在HTTP请求中，对后端完全没有影响，因此改变hash不会重新加载页面。\n- 可以为hash的改变添加监听事件`window.addEventListener(\"hashchange\", funcRef, false)`，每一次改变`hash (window.location.hash)`，都会在浏览器的访问历史中增加一个记录，利用hash的以上特点，就可以实现**前端路由更新视图但不重新请求页面**的功能了。\n   特点：兼容性好但是不美观\n\n1. history 模式：\n    利用 HTML5 History Interface 中新增的`pushState()`和`replaceState()`方法。\n    这两个方法应用于浏览器的历史记录栈，在当前已有的`back`、`forward`、`go` 的基础上(使用`popState()`方法)，他们提供了对历史记录进行修改的功能。\n    这两个方法有个共同点：当调用他们修改浏览器历史记录栈后，虽然当前url改变了，但浏览器不会刷新页面，这就为单页面应用前端路由“更新视图但不重新请求页面”提供了基础\n    特点：虽然美观，但是刷新会出现 404 需要后端进行配置。\n\n### 动态路由？\n\n很多时候，我们需要将给定匹配模式的路由映射到同一个组件，这种情况就需要定义动态路由。例如，我们有一个 User组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用`动态路径参数（dynamic segment）`来达到这个效果：`{path: '/user/:id', compenent: User}`，其中`:id`就是动态路径参数。\n\n### 对Vuex的理解？\n\n1. 概念：\n    Vuex 是 Vue 专用的状态管理库，它以全局方式集中管理应用的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n2. 解决的问题：\n    Vuex 主要解决的问题是多组件之间状态共享。利用各种通信方式，虽然也能够实现状态共享，但是往往需要在多个组件之间保持状态的一致性，这种模式很容易出问题，也会使程序逻辑变得复杂。Vuex 通过把组件的共享状态抽取出来，以全局单例模式管理，这样任何组件都能用一致的方式获取和修改状态，响应式的数据也能够保证简洁的单向流动，使代码变得更具结构化且易于维护。\n3. 什么时候用:\n    Vuex 并非是必须的，它能够管理状态，但同时也带来更多的概念和框架。如果我们不打算开发大型单页应用或应用里没有大量全局的状态需要维护，完全没有使用Vuex的必要，一个简单的 store 模式就够了。反之，Vuex将是自然而然的选择。\n4. 用法：\n    Vuex 将全局状态放入`state`对象中，它本身是一颗状态树，组件中使用`store`实例的`state`访问这些状态；然后用配套的`mutation`方法修改这些状态，并且只能用`mutation`修改状态，在组件中调用`commit`方法提交`mutation`；如果应用中有异步操作或复杂逻辑组合，需要编写`action`，执行结束如果有状态修改仍需提交`mutation`，组件中通过`dispatch`派发`action`。最后是模块化，通过`modules`选项组织拆分出去的各个子模块，在访问状态（state）时需注意添加子模块的名称，如果子模块有设置`namespace`，那么提交`mutation`和派发`action`时还需要额外的命名空间前缀。\n\n### 页面刷新后Vuex 状态丢失怎么解决？\n\nVuex 只是在内存中保存状态，刷新后就会丢失，如果要持久化就需要保存起来。\n\n`localStorage`就很合适，提交`mutation`的时候同时存入`localStorage`，在`store`中把值取出来作为`state`的初始值即可。\n\n也可以使用第三方插件，推荐使用`vuex-persist`插件，它是为 Vuex 持久化储存而生的一个插件，不需要你手动存取`storage`，而是直接将状态保存至 `cookie` 或者 `localStorage`中。\n\n### 关于 Vue SSR 的理解？\n\n`SSR`即`服务端渲染（Server Side Render）`，就是将 Vue 在客户端把标签渲染成 html 的工作放在服务端完成，然后再把 html 直接返回给客户端。\n\n- 优点：\n   有着更好的 SEO，并且首屏加载速度更快。\n- 缺点：\n   开发条件会受限制，服务器端渲染只支持 beforeCreate 和 created 两个钩子，当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于 Node.js 的运行环境。服务器会有更大的负载需求。\n\n### 了解哪些 Vue 的性能优化方法？\n\n- 路由懒加载。有效拆分应用大小，访问时才异步加载。\n- `keep-alive`缓存页面。避免重复创建组件实例，且能保留缓存组件状态。\n- `v-for`遍历避免同时使用`v-if`。实际上在 Vue 3 中已经是一个错误用法了。\n- 长列表性能优化，可采用虚拟列表。\n- `v-once`。不再变化的数据使用`v-once`。\n- 事件销毁。组件销毁后把全局变量和定时器销毁。\n- 图片懒加载。\n- 第三方插件按需引入。\n- 子组件分割。较重的状态组件适合拆分。\n- 服务端渲染。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"js/vue复习","published":1,"layout":"post","photos":[],"link":"","_id":"clijtrgce0017yswh3947f0vw","content":"<p>vue复习</p>\n<span id=\"more\"></span>\n\n<h3 id=\"MVVM模型？\"><a href=\"#MVVM模型？\" class=\"headerlink\" title=\"MVVM模型？\"></a>MVVM模型？</h3><p>MVVM，是<code>Model-View-ViewModel</code>的简写，其本质是<code>MVC</code>模型的升级版。其中 <code>Model</code> 代表数据模型，<code>View</code> 代表看到的页面，<code>ViewModel</code>是<code>View</code>和<code>Model</code>之间的桥梁，数据会绑定到<code>ViewModel</code>层并自动将数据渲染到页面中，视图变化的时候会通知<code>ViewModel</code>层更新数据。以前是通过操作<code>DOM</code>来更新视图，现在是<code>数据驱动视图</code>。</p>\n<h3 id=\"Vue的生命周期\"><a href=\"#Vue的生命周期\" class=\"headerlink\" title=\"Vue的生命周期\"></a>Vue的生命周期</h3><p>Vue 的生命周期可以分为8个阶段：创建前后、挂载前后、更新前后、销毁前后，以及一些特殊场景的生命周期。Vue 3 中还新增了是3个用于调试和服务端渲染的场景。</p>\n<table>\n<thead>\n<tr>\n<th>Vue 2中的生命周期钩子</th>\n<th>Vue 3选项式API的生命周期选项</th>\n<th>Vue 3 组合API中生命周期钩子</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>beforeCreate</code></td>\n<td><code>beforeCreate</code></td>\n<td><code>setup()</code></td>\n<td>创建前，此时<code>data</code>和 <code>methods</code>的数据都还没有初始化</td>\n</tr>\n<tr>\n<td><code>created</code></td>\n<td><code>created</code></td>\n<td><code>setup()</code></td>\n<td>创建后，<code>data</code>中有值，尚未挂载，可以进行一些<code>Ajax</code>请求</td>\n</tr>\n<tr>\n<td><code>beforeMount</code></td>\n<td><code>beforeMount</code></td>\n<td><code>onBeforeMount</code></td>\n<td>挂载前，会找到虚拟<code>DOM</code>，编译成<code>Render</code></td>\n</tr>\n<tr>\n<td><code>mounted</code></td>\n<td><code>mounted</code></td>\n<td><code>onMounted</code></td>\n<td>挂载后，<code>DOM</code>已创建，可用于获取访问数据和<code>DOM</code>元素</td>\n</tr>\n<tr>\n<td><code>beforeUpdate</code></td>\n<td><code>beforeUpdate</code></td>\n<td><code>onBeforeUpdate</code></td>\n<td>更新前，可用于获取更新前各种状态</td>\n</tr>\n<tr>\n<td><code>updated</code></td>\n<td><code>updated</code></td>\n<td><code>onUpdated</code></td>\n<td>更新后，所有状态已是最新</td>\n</tr>\n<tr>\n<td><code>beforeDestroy</code></td>\n<td><code>beforeUnmount</code></td>\n<td><code>onBeforeUnmount</code></td>\n<td>销毁前，可用于一些定时器或订阅的取消</td>\n</tr>\n<tr>\n<td><code>destroyed</code></td>\n<td><code>unmounted</code></td>\n<td><code>onUnmounted</code></td>\n<td>销毁后，可用于一些定时器或订阅的取消</td>\n</tr>\n<tr>\n<td><code>activated</code></td>\n<td><code>activated</code></td>\n<td><code>onActivated</code></td>\n<td><code>keep-alive</code>缓存的组件激活时</td>\n</tr>\n<tr>\n<td><code>deactivated</code></td>\n<td><code>deactivated</code></td>\n<td><code>onDeactivated</code></td>\n<td><code>keep-alive</code>缓存的组件停用时</td>\n</tr>\n<tr>\n<td><code>errorCaptured</code></td>\n<td><code>errorCaptured</code></td>\n<td><code>onErrorCaptured</code></td>\n<td>捕获一个来自子孙组件的错误时调用</td>\n</tr>\n<tr>\n<td>—</td>\n<td><code>renderTracked</code></td>\n<td><code>onRenderTracked</code></td>\n<td>调试钩子，响应式依赖被收集时调用</td>\n</tr>\n<tr>\n<td>—</td>\n<td><code>renderTriggered</code></td>\n<td><code>onRenderTriggered</code></td>\n<td>调试钩子，响应式依赖被触发时调用</td>\n</tr>\n<tr>\n<td>—</td>\n<td><code>serverPrefetch</code></td>\n<td><code>onServerPrefetch</code></td>\n<td>组件实例在服务器上被渲染前调用</td>\n</tr>\n</tbody></table>\n<p><strong>关于Vue 3中的生命周期建议阅读官方文档!!!!</strong></p>\n<p><a href=\"https://link.juejin.cn/?target=https://cn.vuejs.org/api/composition-api-lifecycle.html\">组合式 API：生命周期钩子–官方文档</a><br><a href=\"https://link.juejin.cn/?target=https://cn.vuejs.org/api/options-lifecycle.html\">选项式 API：生命周期选项–官方文档</a></p>\n<p><strong>父子组件的生命周期：</strong></p>\n<ul>\n<li><code>加载渲染阶段</code>：父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</li>\n<li><code>更新阶段</code>：父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</li>\n<li><code>销毁阶段</code>：父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</li>\n</ul>\n<h3 id=\"Vue-nextTick\"><a href=\"#Vue-nextTick\" class=\"headerlink\" title=\"Vue.$nextTick\"></a>Vue.$nextTick</h3><p><strong>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</strong></p>\n<p><code>nextTick</code> 是 Vue 提供的一个全局 API，由于 Vue 的异步更新策略，导致我们对数据修改后不会直接体现在 DOM 上，此时如果想要立即获取更新后的 DOM 状态，就需要借助该方法。</p>\n<p>Vue 在更新 DOM 时是异步执行的。当数据发生变化，Vue 将开启一个异步更新队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 <code>watcher</code> 被多次触发，只会被推入队列一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。<code>nextTick</code>方法会在队列中加入一个回调函数，确保该函数在前面的 DOM 操作完成后才调用。</p>\n<p>使用场景：</p>\n<ol>\n<li>如果想要在修改数据后立刻得到更新后的<code>DOM</code>结构，可以使用<code>Vue.nextTick()</code></li>\n<li>在<code>created</code>生命周期中进行<code>DOM</code>操作</li>\n</ol>\n<h3 id=\"Vue-实例挂载过程中发生了什么？\"><a href=\"#Vue-实例挂载过程中发生了什么？\" class=\"headerlink\" title=\"Vue 实例挂载过程中发生了什么？\"></a>Vue 实例挂载过程中发生了什么？</h3><p>挂载过程指的是 <code>app.mount()</code>过程，这是一个初始化过程，整体上做了两件事情：<code>初始化</code>和<code>建立更新机制</code>。</p>\n<p>初始化会创建组件实例、初始化组件状态、创建各种响应式数据。</p>\n<p>建立更新机制这一步会立即执行一次组件的更新函数，这会首次执行组件渲染函数并执行<code>patch</code>将<code>vnode</code> 转换为 <code>dom</code>； 同时首次执行渲染函数会创建它内部响应式数据和组件更新函数之间的依赖关系，这使得以后数据发生变化时会执行对应的更新函数。</p>\n<h3 id=\"Vue-的模版编译原理\"><a href=\"#Vue-的模版编译原理\" class=\"headerlink\" title=\"Vue 的模版编译原理\"></a>Vue 的模版编译原理</h3><p>Vue 中有个独特的编译器模块，称为<code>compiler</code>，它的主要作用是将用户编写的<code>template</code>编译为js中可执行的<code>render</code>函数。<br> 在Vue 中，编译器会先对<code>template</code>进行解析，这一步称为<code>parse</code>，结束之后得到一个JS对象，称之为<code>抽象语法树AST</code>；然后是对<code>AST</code>进行深加工的转换过程，这一步称为<code>transform</code>，最后将前面得到的<code>AST</code>生成JS代码，也就是<code>render</code>函数。</p>\n<h3 id=\"Vue-的响应式原理\"><a href=\"#Vue-的响应式原理\" class=\"headerlink\" title=\"Vue 的响应式原理\"></a>Vue 的响应式原理</h3><ol>\n<li><p>Vue 2 中的数据响应式会根据数据类型做不同的处理。如果是对象，则通过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(obj,key,descriptor)</span><br></pre></td></tr></table></figure>\n\n<p>拦截对象属性访问，当数据被访问或改变时，感知并作出反应；如果是数组，则通过覆盖数组原型的方法，扩展它的7个变更方法（push、pop、shift、unshift、splice、sort、reverse），使这些方法可以额外的做更新通知，从而做出响应。</p>\n<p>缺点：</p>\n<ul>\n<li>初始化时的递归遍历会造成性能损失；</li>\n<li>通知更新过程需要维护大量 <code>dep</code> 实例和 <code>watcher</code> 实例，额外占用内存较多；</li>\n<li>新增或删除对象属性无法拦截，需要通过 <code>Vue.set</code> 及 <code>delete</code> 这样的 API 才能生效；</li>\n<li>对于<code>ES6</code>中新产生的<code>Map</code>、<code>Set</code>这些数据结构不支持。</li>\n</ul>\n</li>\n<li><p>Vue 3 中利用<code>ES6</code>的<code>Proxy</code>机制代理需要响应化的数据。可以同时支持对象和数组，动态属性增、删都可以拦截，新增数据结构均支持，对象嵌套属性运行时递归，用到时才代理，也不需要维护特别多的依赖关系，性能取得很大进步。</p>\n</li>\n</ol>\n<h3 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h3><ol>\n<li>概念：<br> 虚拟DOM，顾名思义就是虚拟的DOM对象，它本身就是一个JS对象，只不过是通过不同的属性去描述一个视图结构。</li>\n<li>虚拟DOM的好处：<br> (1) 性能提升<br> 直接操作DOM是有限制的，一个真实元素上有很多属性，如果直接对其进行操作，同时会对很多额外的属性内容进行了操作，这是没有必要的。如果将这些操作转移到JS对象上，就会简单很多。另外，操作DOM的代价是比较昂贵的，频繁的操作DOM容易引起页面的重绘和回流。如果通过抽象VNode进行中间处理，可以有效减少直接操作DOM次数，从而减少页面的重绘和回流。<br> (2) 方便跨平台实现<br> 同一VNode节点可以渲染成不同平台上对应的内容，比如：渲染在浏览器是DOM元素节点，渲染在Native（iOS、Android）变为对应的控件。Vue 3 中允许开发者基于VNode实现自定义渲染器（renderer），以便于针对不同平台进行渲染。</li>\n<li>结构：<br> 没有统一的标准，一般包括<code>tag</code>、<code>props</code>、<code>children</code>三项。<br> <code>tag</code>：必选。就是标签，也可以是组件，或者函数。<br> <code>props</code>：非必选。就是这个标签上的属性和方法。<br> <code>children</code>：非必选。就是这个标签的内容或者子节点。如果是文本节点就是字符串；如果有子节点就是数组。换句话说，如果判断<code>children</code>是字符串的话，就表示一定是文本节点，这个节点肯定没有子元素。</li>\n</ol>\n<h3 id=\"diff-算法\"><a href=\"#diff-算法\" class=\"headerlink\" title=\"diff 算法\"></a>diff 算法</h3><p>由于目前<code>Vue3</code>对于性能的优化做了很多的处理，所以其在更新时并不会对所有的节点都进行<code>diff</code>更新。目前会进行<code>diff</code>更新的有以下两种情况：</p>\n<ul>\n<li><code>v-for</code>容器节点</li>\n<li>自写的<code>render()</code>函数</li>\n</ul>\n<p>还有一种特殊情况会进行无<code>diff</code>的按序更新，这种更新是全替换模式，非常耗时：</p>\n<ul>\n<li>无<code>key</code>值的<code>v-for</code>语句，此时会打上<code>UNKEYED_FRAGMENT</code>标记</li>\n</ul>\n<p>注意，<code>Vue3</code>没有主动提供片段这个功能，仅会在出现以下写法时会生成片段：</p>\n<ul>\n<li>一个组件有多个根节点，会生成一个片段包裹，此时其为稳定片段(<code>STABLE_FRAGMENT</code>)</li>\n<li><code>v-for</code>语句，会生成一个片段包裹</li>\n<li><code>v-if</code>语句，有多个子节点或不为单个文本节点，会生成一个片段包裹(<code>STABLE_FRAGMENT</code>)</li>\n</ul>\n<blockquote>\n<p>本文上述论点都是基于浏览器环境，非<em>NodeJS</em>环境(<em>SSR</em>)。文中提供的代码进行了<strong>适当的简化</strong>。</p>\n</blockquote>\n<p>在我们使用<code>template</code>的情况下，更新基本上会通过<code>block</code>进行更新——即节点自更新</p>\n<h4 id=\"diff-更新\"><a href=\"#diff-更新\" class=\"headerlink\" title=\"diff 更新\"></a>diff 更新</h4><h5 id=\"VUE2\"><a href=\"#VUE2\" class=\"headerlink\" title=\"VUE2\"></a>VUE2</h5><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528150909234.png\" alt=\"image-20230528150909234\"></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528150936549.png\" alt=\"image-20230528150936549\"></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151019742.png\" alt=\"image-20230528151019742\"></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151119230.png\" alt=\"image-20230528151119230\"></p>\n<p>第一次对比后结果</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151309763.png\" alt=\"image-20230528151309763\"></p>\n<p>第二次</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151400771.png\" alt=\"image-20230528151400771\"></p>\n<p>第三次</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151428703.png\" alt=\"image-20230528151428703\"></p>\n<p>最后整理</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151504941.png\" alt=\"image-20230528151504941\"></p>\n<h5 id=\"VUE3\"><a href=\"#VUE3\" class=\"headerlink\" title=\"VUE3\"></a>VUE3</h5><p><code>diff</code>更新调用的内部的<code>patchKeyedChildren</code>方法，其大致流程分为三步：</p>\n<ol>\n<li>对比新旧节点头部相同指针的节点，相同则进行<code>diff</code>，不同则跳转下一步。</li>\n<li>对比新旧节点尾部指针指向节点，相同则进行<code>diff</code>，不同则跳转下一步。</li>\n<li>此时剩余新旧节点，可能存在乱序、已移除或新增的情况，进行特殊处理来更新。</li>\n</ol>\n<p>下面是函数最开始做的初始化，其中<code>c1/c2</code>分别代表新旧节点的子节点数组；<code>i</code>表示两个新旧节点指向同步的指针，它们是同步的；<code>e1/e2</code>分别代表指向两个子节点数组尾部的指针：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> l2 = c2.<span class=\"property\">length</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 变更前节点的尾下标</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> e1 = c1.<span class=\"property\">length</span> - <span class=\"number\">1</span> <span class=\"comment\">// prev ending index</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 变更后节点的尾下标</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> e2 = l2 - <span class=\"number\">1</span> <span class=\"comment\">// next ending index</span></span><br></pre></td></tr></table></figure>\n\n<p>其中<code>patch()</code>函数用于对节点进行更新，<code>isSameVNodeType()</code>函数用于判断两个节点是否具有相同的类型，此时其需要满足类型一样且<code>key</code>值相等。</p>\n<blockquote>\n<p>这里的类型指，例如组件，则其为组件的配置对象，元素则为元素的标记。</p>\n</blockquote>\n<h4 id=\"1-对比头部等位指针节点\"><a href=\"#1-对比头部等位指针节点\" class=\"headerlink\" title=\"1. 对比头部等位指针节点\"></a>1. 对比头部等位指针节点</h4><p>首先其会从头部指针开始，对比新旧节点是否相同：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码<span class=\"comment\">// 1. sync from start</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 从开始位置同步</span></span><br><span class=\"line\"><span class=\"comment\">// (a b) c</span></span><br><span class=\"line\"><span class=\"comment\">// (a b) d e</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n1 = c1[i]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n2 = c2[i]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 节点没有发生变更时，进行patch</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isSameVNodeType</span>(n1, n2)) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">patch</span>(n1, n2)</span><br><span class=\"line\">    <span class=\"comment\">// 不同节点时，立刻结束</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  i++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注释中给出了一个例子，即如果存在下图的新旧队列：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527224906472.png\" alt=\"image-20230527224906472\"></p>\n<p>由于此时两个指针的<code>VNode</code>相同，那么可以复用则直接进行<code>patch()</code>更新。之后指针向右移动一位，对比两个数组下标为 <code>1</code> 的位置：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225018797.png\" alt=\"image-20230527225018797\"></p>\n<p>同样的，节点相同，进行更新然后指针向后移动：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225137121.png\" alt=\"image-20230527225137121\"></p>\n<p>此时两个节点不一样了，那么本次头部对比到此结束。到此我们排除了头部位置可复用的节点，接下来那么肯定是排除尾部位置的可复用节点。</p>\n<h3 id=\"2-对比尾部等位指针节点\"><a href=\"#2-对比尾部等位指针节点\" class=\"headerlink\" title=\"2. 对比尾部等位指针节点\"></a>2. 对比尾部等位指针节点</h3><p>尾部的可复用节点检查方法与头部一样，唯一一点不同的是，它们有各自的指针分别指向子节点数组尾部。所以此时要使用两个指针<code>e1/e2</code>。</p>\n<p>以此时要使用两个指针<code>e1/e2</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码<span class=\"comment\">// 2. sync from end</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 从尾部位置开始查找</span></span><br><span class=\"line\"><span class=\"comment\">// a (b c)</span></span><br><span class=\"line\"><span class=\"comment\">// d e (b c)</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n1 = c1[e1]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n2 = c2[e2]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isSameVNodeType</span>(n1, n2)) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">patch</span>(n1, n2)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  e1--</span><br><span class=\"line\">  e2--</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还是按注释中的例子放图：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225256542.png\" alt=\"image-20230527225256542\"></p>\n<p>当前指针指向节点相同，节点可复用，直接更新，同时指针向前一起移动：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225417598.png\" alt=\"image-20230527225417598\"></p>\n<p>当前指针指向节点相同，节点可复用，直接更新，同时指针向前一起移动：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225513256.png\"></p>\n<p>此时，两个指针指向节点不再相同，停止此处的对比。</p>\n<hr>\n<p>经过前两步的处理，新旧队列已经进一步缩短了，此时剩下的节点就可能存在下面三种情况：</p>\n<ul>\n<li>有新增的节点</li>\n<li>有节点被删除了</li>\n<li>相同的节点，但是移动了位置</li>\n</ul>\n<p>在实际的场景中，那么就只能存在下面三种剩余情况：</p>\n<ul>\n<li>仅有新增的节点(此时一定<code>i &gt; e1</code>)</li>\n<li>仅进行了节点删除(此时一定<code>i &gt; e2</code>)</li>\n<li>乱序的，一定有移动的节点，其中可能包含新增或有删除的节点(此时一定有<code>i &lt;= e2</code>且<code>i &lt;= e1</code>)</li>\n</ul>\n<p><code>Vue</code>按处理的简易程度，<code>Vue</code>先对前两种情况进行了单独的处理，再对三种混有的情况进行了处理。</p>\n<h4 id=\"3-1-处理新增的节点的单独情况\"><a href=\"#3-1-处理新增的节点的单独情况\" class=\"headerlink\" title=\"3.1 处理新增的节点的单独情况\"></a>3.1 处理新增的节点的单独情况</h4><p>判断新增的节点是以旧队列为基准，那么此时的情况是这样的：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230120660.png\" alt=\"image-20230527230120660\"></p>\n<p>或新增的节点在首部：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230226562.png\" alt=\"image-20230527230226562\"></p>\n<p>此时会存在这样的情况<code>e1 &lt; i</code>且<code>e2 &gt;= i</code>，那么我们只需要更新<code>e1 =&gt; i</code>间的节点即可，于是有了这些代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3. common sequence + mount</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 有新增的节点时</span></span><br><span class=\"line\"><span class=\"comment\">// (a b)</span></span><br><span class=\"line\"><span class=\"comment\">// (a b) c</span></span><br><span class=\"line\"><span class=\"comment\">// i = 2, e1 = 1, e2 = 2</span></span><br><span class=\"line\"><span class=\"comment\">// (a b)</span></span><br><span class=\"line\"><span class=\"comment\">// c (a b)</span></span><br><span class=\"line\"><span class=\"comment\">// i = 0, e1 = -1, e2 = 0</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (i &lt;= e2) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &gt; e1) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//  当前节点后面的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextPos = e2 + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 我们要以这个节点为锚点在其之前添加元素，没有则添加到父节点最后</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> anchor = nextPos &lt; l2 ? c2[nextPos].<span class=\"property\">el</span> : parentAnchor</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= e2) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">patch</span>(<span class=\"literal\">null</span>, c2[i])</span><br><span class=\"line\">      i++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-处理删除节点的单独情况\"><a href=\"#3-2-处理删除节点的单独情况\" class=\"headerlink\" title=\"3.2 处理删除节点的单独情况\"></a>3.2 处理删除节点的单独情况</h4><p>如果没有存在仅有新增节点的情况，那么其会判断是否是仅进行删除节点的情况，此时可能出现下图的两种情况：</p>\n<p>删除节点在尾部：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230416959.png\"></p>\n<p>删除节点在尾部：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230458558.png\" alt=\"image-20230527230458558\"></p>\n<p>此时<code>i &gt; e2</code>，那么我们只需要将旧节点数组中<code>i =&gt; e1</code>之间的所有节点删除即可(下面的<code>else if</code>语句承接上面)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码<span class=\"comment\">// 4. common sequence + unmount</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 节点移除</span></span><br><span class=\"line\"><span class=\"comment\">// (a b) c</span></span><br><span class=\"line\"><span class=\"comment\">// (a b)</span></span><br><span class=\"line\"><span class=\"comment\">// i = 2, e1 = 2, e2 = 1</span></span><br><span class=\"line\"><span class=\"comment\">// a (b c)</span></span><br><span class=\"line\"><span class=\"comment\">// (b c)</span></span><br><span class=\"line\"><span class=\"comment\">// i = 0, e1 = 0, e2 = -1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &gt; e2) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt;= e1) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 移除原节点</span></span><br><span class=\"line\">    <span class=\"title function_\">unmount</span>(c1[i])</span><br><span class=\"line\">    i++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-乱序，但一定有移动的节点的情况\"><a href=\"#3-3-乱序，但一定有移动的节点的情况\" class=\"headerlink\" title=\"3.3 乱序，但一定有移动的节点的情况\"></a>3.3 乱序，但一定有移动的节点的情况</h4><p>最后一种情况就是比较复杂的情况，此时<code>Vue</code>做的处理是，先查看旧节点序列在变为新节点序列后，旧节点序列中是否有些节点还是按现在的顺序排列的(可以间断)，此时只对其余变更的节点进行操作，就能进行最小幅度的<code>DOM</code>操作了。</p>\n<blockquote>\n<p>此时相对于求旧节点的最长递增序列，这里你可以会想到为什么不求最小编辑距离，因为最小编辑距离的时间复杂度在大多数情况下比它高</p>\n</blockquote>\n<h5 id=\"3-3-1-建立新节点-key-与其下标的映射\"><a href=\"#3-3-1-建立新节点-key-与其下标的映射\" class=\"headerlink\" title=\"3.3.1 建立新节点 key 与其下标的映射\"></a>3.3.1 建立新节点 key 与其下标的映射</h5><p>首先，<code>Vue</code>先将新节点数组进行遍历，将它们有<code>key</code>值的节点与其在新节点数组中的下标建立映射，存储在<code>keyToNewIndexMap</code>中，方便在复用时查找：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s1 = i <span class=\"comment\">// prev starting index</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> s2 = i <span class=\"comment\">// next starting index</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5.1 build key:index map for newChildren</span></span><br><span class=\"line\"><span class=\"comment\">// 5.1 生成一个key map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> keyToNewIndexMap = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历新节点，乱序的部分，将这些具有key的节点存入map</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = s2; i &lt;= e2; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nextChild = c2[i]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nextChild.<span class=\"property\">key</span> != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    keyToNewIndexMap.<span class=\"title function_\">set</span>(nextChild.<span class=\"property\">key</span>, i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-3-2-移除新节点队列中不存在的旧节点并更新复用节点\"><a href=\"#3-3-2-移除新节点队列中不存在的旧节点并更新复用节点\" class=\"headerlink\" title=\"3.3.2 移除新节点队列中不存在的旧节点并更新复用节点\"></a>3.3.2 移除新节点队列中不存在的旧节点并更新复用节点</h5><p>之后，遍历旧节点数组，通过刚刚建立的<code>Map</code>，如果当前旧节点在新节点数组中已经不存在了，那么说明要移除了。</p>\n<p>整个过程比较复杂，因为要预先做处理，为后续是否需要移动节点做准备：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 5.2 loop through old children left to be patched and try to patch</span></span><br><span class=\"line\"><span class=\"comment\">// matching nodes &amp; remove nodes that are no longer present</span></span><br><span class=\"line\"><span class=\"comment\">// 5.2 遍历旧节点，patch匹配的节点，移除不再在节点</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> j</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前处理过的节点数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> patched = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 需要patch的节点数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> toBePatched = e2 - s2 + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否需要移动节点</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> moved = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// used to track whether any node has moved</span></span><br><span class=\"line\"><span class=\"comment\">// 记录节点是否已经移动</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> maxNewIndexSoFar = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// works as Map&lt;newIndex, oldIndex&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// Note that oldIndex is offset by +1</span></span><br><span class=\"line\"><span class=\"comment\">// and oldIndex = 0 is a special value indicating the new node has</span></span><br><span class=\"line\"><span class=\"comment\">// no corresponding old node.</span></span><br><span class=\"line\"><span class=\"comment\">// 注意旧下标的值都会+1，因为0表示没有对应的旧节点</span></span><br><span class=\"line\"><span class=\"comment\">// used for determining longest stable subsequence</span></span><br><span class=\"line\"><span class=\"comment\">// 新下标与旧下标的map</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的新下标以s2位置为0下标，而旧下标为旧下标值 +１</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newIndexToOldIndexMap = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(toBePatched)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化值为0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; toBePatched; i++) newIndexToOldIndexMap[i] = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我说明下三个变量，首先是<code>newIndexToOldIndexMap</code>，其用来记录节点的新坐标到旧坐标的映射(当然是节点可复用的情况下)。为了后续计算最长递增子序列，所以其新坐标以<code>s2</code>为起点，长度为当前需要处理的节点总数，并且其存入的旧节点下标要在原值的基础上<code>+ 1</code>(因为<code>0</code>表示当前节点没有对应的旧节点)。举个例子，有如下图一样的更新序列：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230956800.png\" alt=\"image-20230527230956800\"></p>\n<p>那么节点<code>e</code>存入<code>newIndexToOldIndexMap</code>后为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 展示，不是赋值语句</span></span><br><span class=\"line\">newIndexToOldIndexMap = [<span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<p>其余全部节点存入后为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 展示，不是赋值语句</span></span><br><span class=\"line\">newIndexToOldIndexMap = [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<p><code>moved</code>变量则是表示是否有节点需要移动，其判定要基于<code>maxNewIndexSoFar</code>的值。</p>\n<p><code>maxNewIndexSoFar</code>表示当前可复用节点距离<code>s2</code>(即第一个乱序节点的最远距离)。如果有对应可以复用的节点，那么在每次迭代处理节点时，如果当前节点所处位置距离<code>s2</code>距离超过<code>maxNewIndexSoFar</code>，那么<code>maxNewIndexSoFar</code>会更新为当前节点在新队列中的下标；当其小于<code>maxNewIndexSoFar</code>时，就会标记<code>moved = true</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，</span></span><br><span class=\"line\"><span class=\"comment\">// 那么每次都会进入该if语句</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前节点未移动，更新下标</span></span><br><span class=\"line\">  maxNewIndexSoFar = newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果进入该else语句说明有节点之前节点交叉了</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  moved = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>想象一下，如果节点在新旧序列中，都是按照相同的顺序递增，那么<code>maxNewIndexSoFar</code>也会一直递增，即每次迭代<code>newIndex &gt;= maxNewIndexSoFar</code>，那么就不需要移动节点；但是如果某次迭代，<code>newIndex &lt; maxNewIndexSoFar</code>，那么说明当前节点由之前靠后的位置移动了现在靠前的位置。</p>\n<p>就拿刚刚乱序的图举例，第一次迭代<code>c</code>节点的<code>newIndex = 4</code>，则<code>maxNewIndexSoFar = 4</code>；第二次迭代<code>d</code>节点时，其<code>newIndex = 3</code>，此时<code>newIndex &lt; maxNewIndexSoFar</code>，说明<code>c/d</code>节点之间的位置在新旧发生了交叉，所以我们至少需要移动它们其中一个节点。</p>\n<p>理解了这个道理，现在我们可以正式看看这段代码了。由于要卸载节点，那么本次遍历要以<code>s1 &lt;-&gt; e1</code>之间的节点为基准进行遍历，整体遍历代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历旧节点</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = s1; i &lt;= e1; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前下标的旧节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> prevChild = c1[i]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 当前patch的节点数超过新节点中要patch的总数时，执行unmount操作</span></span><br><span class=\"line\">  <span class=\"comment\">// 直接进行卸载操作，因为多余的节点不需要了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (patched &gt;= toBePatched) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// all new children have been patched so this can only be a removal</span></span><br><span class=\"line\">    <span class=\"title function_\">unmount</span>(prevChild)</span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 尝试寻找是否有对应的新节点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 旧节点具有key时，获取相同key值节点所处的下标</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (prevChild.<span class=\"property\">key</span> != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    newIndex = keyToNewIndexMap.<span class=\"title function_\">get</span>(prevChild.<span class=\"property\">key</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 没有key时则找相同类型的节点是否存在</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// key-less node, try to locate a key-less node of the same type</span></span><br><span class=\"line\">    <span class=\"comment\">// 当前查找范围为新节点中需要patch的节点之间</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = s2; j &lt;= e2; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        <span class=\"comment\">// 0表示对应下标下当前还未有节点(注意当前是以s2为0下标基准)</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里确认当前新下标位置未有对应的旧下标，防止是已在map中的节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        newIndexToOldIndexMap[j - s2] === <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"title function_\">isSameVNodeType</span>(prevChild, c2[j])</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        newIndex = j</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 没找到对应节点时说明该节点已经不存在了，直接进行unmount</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newIndex === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">unmount</span>(prevChild)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找到时进行位置移动操作，并patch</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将旧节点位置下标+1后存入，新节点以s2为起点，即0坐标</span></span><br><span class=\"line\">    newIndexToOldIndexMap[newIndex - s2] = i + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，</span></span><br><span class=\"line\">    <span class=\"comment\">// 那么每次都会进入该if语句</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 当前节点未移动，更新下标</span></span><br><span class=\"line\">      maxNewIndexSoFar = newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果进入该else语句说明有节点之前节点交叉了</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      moved = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// patch该节点</span></span><br><span class=\"line\">    <span class=\"title function_\">patch</span>(prevChild, c2[newIndex])</span><br><span class=\"line\">    patched++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先当当前可复用的节点复用时，会使<code>patched</code>值<code>+1</code>，当复用的节点超过乱序的新节点长度时，那么其余的节点肯定是要卸载的节点(因为新节点序列都处理完毕了)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (patched &gt;= toBePatched) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// all new children have been patched so this can only be a removal</span></span><br><span class=\"line\">    <span class=\"title function_\">unmount</span>(prevChild)</span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后，<code>Vue</code>尝试寻找一下当前旧节点是否被复用，即它被移动到了新节点序列的其他位置。首先如果当前节点有<code>key</code>值，那么其会尝试直接从刚刚的<code>keyToNewIndexMap</code>中查找；如果没有找到，那么其会遍历当前所有的新节点序列，依次对比是否与当前节点相同，在复合同类型节点时对其进行复用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 尝试寻找是否有对应的新节点</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newIndex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 旧节点具有 key 时，获取相同 key 值节点所处的下标</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (prevChild.<span class=\"property\">key</span> != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">  newIndex = keyToNewIndexMap.<span class=\"title function_\">get</span>(prevChild.<span class=\"property\">key</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 没有key时则找相同类型的节点是否存在</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// key-less node, try to locate a key-less node of the same type</span></span><br><span class=\"line\">  <span class=\"comment\">// 当前查找范围为新节点中需要 patch 的节点之间</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (j = s2; j &lt;= e2; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"comment\">// 0 表示对应下标下当前还未有节点(注意当前是以 s2 为 0 下标基准)</span></span><br><span class=\"line\">      <span class=\"comment\">// 这里确认当前新下标位置未有对应的旧下标，防止是已在 map 中的节点</span></span><br><span class=\"line\">      newIndexToOldIndexMap[j - s2] === <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">      <span class=\"title function_\">isSameVNodeType</span>(prevChild, c2[j])</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      newIndex = j</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在直接通过类型查找复用节点时，其存在一个<code>newIndexToOldIndexMap[j - s2] === 0</code>条件，它表示当前新节点下标未有对应的旧节点(<code>0</code>表示没有，在之后的代码中，如果查找到对应的<code>newIndex</code>，其会存入<code>newIndexToOldIndexMap</code>中)。这样可以防止新旧节点被重复复用或已被处理再次被处理。</p>\n<p>到此，对于旧节点的<code>newIndex</code>是否被查找到就会出现两种情况了：</p>\n<ol>\n<li>没有，说明当前节点已删除了，移除该<code>DOM</code>节点</li>\n<li>有，复用，<strong>更新节点属性</strong></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 没找到对应节点时说明该节点已经不存在了，直接进行unmount</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (newIndex === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">unmount</span>(prevChild)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 找到时进行位置移动操作，并patch</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将旧节点位置下标+1后存入，新节点以s2为起点，即0坐标</span></span><br><span class=\"line\">  newIndexToOldIndexMap[newIndex - s2] = i + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，</span></span><br><span class=\"line\">  <span class=\"comment\">// 那么每次都会进入该if语句</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前节点未移动，更新下标</span></span><br><span class=\"line\">    maxNewIndexSoFar = newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果进入该else语句说明有节点之前节点交叉了</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    moved = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// patch该节点</span></span><br><span class=\"line\">  <span class=\"title function_\">patch</span>(prevChild, c2[newIndex])</span><br><span class=\"line\">  patched++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在复用的情况下，有我们刚刚提到的<a href=\"#332-%E7%A7%BB%E9%99%A4%E6%96%B0%E8%8A%82%E7%82%B9%E9%98%9F%E5%88%97%E4%B8%AD%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E6%97%A7%E8%8A%82%E7%82%B9%E5%B9%B6%E6%9B%B4%E6%96%B0%E5%A4%8D%E7%94%A8%E8%8A%82%E7%82%B9\">计算节点交叉(是否需要移动)</a>的场景：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，</span></span><br><span class=\"line\"><span class=\"comment\">// 那么每次都会进入该if语句</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前节点未移动，更新下标</span></span><br><span class=\"line\">  maxNewIndexSoFar = newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果进入该else语句说明有节点之前节点交叉了</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  moved = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里就不赘述了。</p>\n<blockquote>\n<p>注意，这里对复用的节点进行了<code>patch()</code>更新，那么后面就只用进行移动即可，而不需要更新了。</p>\n</blockquote>\n<h4 id=\"3-3-3-处理新增节点与移动的节点\"><a href=\"#3-3-3-处理新增节点与移动的节点\" class=\"headerlink\" title=\"3.3.3 处理新增节点与移动的节点\"></a>3.3.3 处理新增节点与移动的节点</h4><p>到此为止，就只有新增节点与移动节点的情况没有处理了。</p>\n<p>首先其会需要移动节点时(<code>moved = true</code>)根据刚刚创建的<code>newIndexToOldIndexMap</code>生成一个最长递增的新节点序列<code>increasingNewIndexSequence</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码<span class=\"comment\">// 5.3 move and mount</span></span><br><span class=\"line\"><span class=\"comment\">// 5.3 移动与mount</span></span><br><span class=\"line\"><span class=\"comment\">// generate longest stable subsequence only when nodes have moved</span></span><br><span class=\"line\"><span class=\"comment\">// 有节点需要移动，生成长期稳定的子序列，仅对移动过的节点处理</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> increasingNewIndexSequence = moved</span><br><span class=\"line\">  ? <span class=\"comment\">// 获取最长递增子序列的下标数组</span></span><br><span class=\"line\">    <span class=\"title function_\">getSequence</span>(newIndexToOldIndexMap)</span><br><span class=\"line\">  : <span class=\"variable constant_\">EMPTY_ARR</span></span><br></pre></td></tr></table></figure>\n\n<p>那么这个序列的作用是什么？它就是用来<strong>辅助移动节点</strong>，而且是在最小次数下移动节点。由于<code>newIndexToOldIndexMap</code>是根据新旧节点之间的映射创建的，其<strong>下标天然代表乱序的新节点数组的顺序</strong>，而且其对应下标中存储的元素也代表该新节点复用的旧节点的下标，那么这里我们就可以看到两个序列：</p>\n<ol>\n<li>新节点下标组成的序列(<strong>递增</strong>的，因为我们以它为基准创建的数组)</li>\n<li><code>newIndexToOldIndexMap</code>中旧节点下标组成的序列，可能递增也可能乱序</li>\n</ol>\n<blockquote>\n<p>关于如何求<a href=\"https://link.juejin.cn/?target=https://en.wikipedia.org/wiki/Longest_increasing_subsequence\">最长递增子序列</a>，请单独自行学习，这里就不说明了。</p>\n</blockquote>\n<p>此时倘若旧节点下标组成的序列<strong>也</strong>呈现递增趋势，那么我们便可以操作那些非递增的节点来达到变更为新节点序列的目的。并且这个递增的序列越长，那么我们要操作(移动)的节点就越少。比如下图的情况：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124733993.png\" alt=\"image-20230528124733993\"></p>\n<p>从图中观察，我们可以清楚的看到<code>c/d</code>两个节点在前后都保持了递增的关系，那么此时我们只需要移动<code>e</code>节点与创建<code>h</code>节点即可。</p>\n<p>此时其<code>newIndexToOldIndexMap</code>为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码newIndexToOldIndexMap = [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 该数组返回的是对应的元素在newIndexToOldIndexMap的下标</span></span><br><span class=\"line\"><span class=\"comment\">// 而并非实际的旧节点下标</span></span><br><span class=\"line\">increasingNewIndexSequence = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>2、3</code>节点与新节点的下标的<strong>递增关系保持一致</strong>，其最长递增子序列(<code>increasingNewIndexSequence</code>)为<code>[1, 2]</code>，此时我们只需要操作<code>4/0</code>两个节点即可。</p>\n<blockquote>\n<p><code>increasingNewIndexSequence</code>返回的结果为对应的元素在 <code>newIndexToOldIndexMap</code>的下标而并非实际的旧节点下标</p>\n</blockquote>\n<p>明白了这个现在我们来看其具体处理的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取递增序列的尾坐标</span></span><br><span class=\"line\">j = increasingNewIndexSequence.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// looping backwards so that we can use last patched node as anchor</span></span><br><span class=\"line\"><span class=\"comment\">// 向后循环，这样我们可以用上一个patch过了的节点做锚点</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = toBePatched - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前要处理的新节点下标及其节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> nextIndex = s2 + i</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nextChild = c2[nextIndex]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取其后一个节点，如果没有则获取其父节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> anchor = nextIndex + <span class=\"number\">1</span> &lt; l2 ? c2[nextIndex + <span class=\"number\">1</span>].<span class=\"property\">el</span> : parentAnchor</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果当前新旧节点Map中未找到当前位置新节点的旧节点信息，</span></span><br><span class=\"line\">  <span class=\"comment\">// 说明是新增节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newIndexToOldIndexMap[i] === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// mount new</span></span><br><span class=\"line\">    <span class=\"title function_\">patch</span>(<span class=\"literal\">null</span>, nextChild)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// moved说明有节点需要移动，通过塑造一个递增序列，处于递增序列的节点就可以</span></span><br><span class=\"line\">    <span class=\"comment\">// 不进行移动，只移动其余节点，这样就减少了节点的移动</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (moved) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果存在以下情况则移动：</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 没有稳定的子序列</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 当前节点不在这个稳定的子序列中</span></span><br><span class=\"line\">    <span class=\"comment\">// move if:</span></span><br><span class=\"line\">    <span class=\"comment\">// There is no stable subsequence (e.g. a reverse)</span></span><br><span class=\"line\">    <span class=\"comment\">// OR current node is not among the stable sequence</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j &lt; <span class=\"number\">0</span> || i !== increasingNewIndexSequence[j]) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">move</span>(nextChild, container, anchor)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      j--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>本次遍历以新节点的乱序序列(<code>s2 &lt;-&gt; e2</code>)为基准，逆向进行遍历。逆向的原因是因为其在新增节点或更新节点时，可以以后面已经操作过的节点为锚点进行更新(想象一下<code>Node.insertBefore()/Node.appendChild()</code>的参数)。</p>\n<p>每次遍历会出现三种情况：</p>\n<ul>\n<li>当前节点未有对应的旧节点下标，则说明是新增节点</li>\n<li>该节点需要移动，进行移动</li>\n<li>该节点与旧节点序列都保持递增顺序，直接跳过即可(实际反应在代码里面就是没做任何处理)</li>\n</ul>\n<blockquote>\n<p>情况<code>2</code>与<code>3</code>在完整的迭代中是互斥的，两者不会同时出现在整个迭代流程中。</p>\n</blockquote>\n<p>第一种情况，比较简单，这里就不解释了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果当前新旧节点Map中未找到当前位置新节点的旧节点信息，</span></span><br><span class=\"line\"><span class=\"comment\">// 说明是新增节点</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (newIndexToOldIndexMap[i] === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// mount new</span></span><br><span class=\"line\">  <span class=\"title function_\">patch</span>(<span class=\"literal\">null</span>, nextChild</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二种情况要判定<code>moved = true</code>，它的原理<a href=\"#332-%E7%A7%BB%E9%99%A4%E6%96%B0%E8%8A%82%E7%82%B9%E9%98%9F%E5%88%97%E4%B8%AD%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E6%97%A7%E8%8A%82%E7%82%B9%E5%B9%B6%E6%9B%B4%E6%96%B0%E5%A4%8D%E7%94%A8%E8%8A%82%E7%82%B9\">之前我们已经解释过了</a>。这里我们要关注的是它的函数体。根据我们刚刚对递增子序列的理解，那么其应该会在以下情况移动或不移动节点：</p>\n<ul>\n<li>当前节点处于最长递增子序列中 —— 跳过</li>\n<li>当前节点不存在最长递增子序列中 —— 移动<ul>\n<li>递增序列已经没有需要跳过的节点了但任存在节点需要更新(实际和不存在的情况一样)</li>\n<li>当前节点不存在最长递增子序列</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果存在以下情况则移动：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 没有稳定的子序列(实际和情况2一致，反序时会返回任意一个节点作为最长序列)</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 当前节点不在这个稳定的子序列中</span></span><br><span class=\"line\"><span class=\"comment\">// move if:</span></span><br><span class=\"line\"><span class=\"comment\">// There is no stable subsequence (e.g. a reverse)</span></span><br><span class=\"line\"><span class=\"comment\">// OR current node is not among the stable sequence</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (j &lt; <span class=\"number\">0</span> || i !== increasingNewIndexSequence[j]) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将当前节点移动到锚点节点前或容器节点最后(没有锚点时)</span></span><br><span class=\"line\">  <span class=\"title function_\">move</span>(nextChild, container, anchor)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  j--</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124834143.png\" alt=\"image-20230528124834143\"></p>\n<p>在第二次更新中，发现<code>d</code>节点存在于单调增序列中，所以本次更新可以跳过：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124910205.png\" alt=\"image-20230528124910205\"></p>\n<p>同理<code>c</code>节点也一样，这里就不放图了，处理完<code>c</code>节点后此时为这样</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124931580.png\" alt=\"image-20230528124931580\"></p>\n<p>此时<code>e</code>节点可复用，则将其移动到新<code>c</code>节点前即可。</p>\n<p>到此为止，上图的<code>diff</code>就结束了。</p>\n<p>对于第三种情况，由于复用的节点在前后都保持了递增的关系，所以此时我们不需要再重复对节点进行处理，所以遇到复用的节点时直接跳过即可：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528125006064.png\" alt=\"image-20230528125006064\"></p>\n<p>到此为止全部节点的更新就已经完毕了。</p>\n<h3 id=\"为什么组件中的-data-是一个函数？\"><a href=\"#为什么组件中的-data-是一个函数？\" class=\"headerlink\" title=\"为什么组件中的 data 是一个函数？\"></a>为什么组件中的 data 是一个函数？</h3><p>在 new Vue() 中，可以是函数也可以是对象，因为根实例只有一个，不会产生数据污染。</p>\n<p>在组件中，data 必须为函数，目的是为了防止多个组件实例对象之间共用一个 data，产生数据污染；而采用函数的形式，initData 时会将其作为工厂函数都会返回全新的 data 对象。</p>\n<h3 id=\"Vue-中组件间的通信方式？\"><a href=\"#Vue-中组件间的通信方式？\" class=\"headerlink\" title=\"Vue 中组件间的通信方式？\"></a>Vue 中组件间的通信方式？</h3><ol>\n<li><p>父子组件通信：</p>\n<p>父向子传递数据是通过<code>props</code>，子向父是通过<code>$emit</code>触发事件；通过父链/子链也可以通信（<code>$parent</code>/<code>$children</code>）；<code>ref</code>也可以访问组件实例；<code>provide</code>/<code>inject</code>；<code>$attrs</code>/<code>$listeners</code>。</p>\n</li>\n<li><p>兄弟组件通信：</p>\n<p>全局事件总线<code>EventBus</code>、<code>Vuex</code>。</p>\n</li>\n<li><p>跨层级组件通信：</p>\n<p>全局事件总线<code>EventBus</code>、<code>Vuex</code>、<code>provide</code>/<code>inject</code>。</p>\n</li>\n</ol>\n<h3 id=\"v-show-和-v-if-的区别？\"><a href=\"#v-show-和-v-if-的区别？\" class=\"headerlink\" title=\"v-show 和 v-if 的区别？\"></a>v-show 和 v-if 的区别？</h3><ol>\n<li>控制手段不同。<code>v-show</code>是通过给元素添加 css 属性<code>display: none</code>，但元素仍然存在；而<code>v-if</code>控制元素显示或隐藏是将元素整个添加或删除。</li>\n<li>编译过程不同。<code>v-if</code>切换有一个局部编译/卸载的过程，切换过程中合适的销毁和重建内部的事件监听和子组件；<code>v-show</code>只是简单的基于 css 切换。</li>\n<li>编译条件不同。<code>v-if</code>是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建，渲染条件为假时，并不做操作，直到为真才渲染。</li>\n<li>触发生命周期不同。<code>v-show</code>由 false 变为 true 的时候不会触发组件的生命周期；<code>v-if</code>由 false 变为 true 的时候，触发组件的<code>beforeCreate</code>、<code>created</code>、<code>beforeMount</code>、<code>mounted</code>钩子，由 true 变为 false 的时候触发组件的<code>beforeDestory</code>、<code>destoryed</code>钩子。</li>\n<li>性能消耗不同。<code>v-if</code>有更高的切换消耗；<code>v-show</code>有更高的初始渲染消耗。</li>\n</ol>\n<p>使用场景：<br> 如果需要非常频繁地切换，则使用<code>v-show</code>较好，如：手风琴菜单，tab 页签等； 如果在运行时条件很少改变，则使用<code>v-if</code>较好，如：用户登录之后，根据权限不同来显示不同的内容。</p>\n<h3 id=\"computed-和-watch-的区别？\"><a href=\"#computed-和-watch-的区别？\" class=\"headerlink\" title=\"computed 和 watch 的区别？\"></a>computed 和 watch 的区别？</h3><ul>\n<li><code>computed</code>计算属性，依赖其它属性计算值，内部任一依赖项的变化都会重新执行该函数，计算属性有缓存，多次重复使用计算属性时会从缓存中获取返回值，计算属性必须要有<code>return</code>关键词。</li>\n<li><code>watch</code>侦听到某一数据的变化从而触发函数。当数据为对象类型时，对象中的属性值变化时需要使用深度侦听<code>deep</code>属性，也可在页面第一次加载时使用立即侦听<code>immdiate</code>属性。</li>\n</ul>\n<p>运用场景：<br> 计算属性一般用在模板渲染中，某个值是依赖其它响应对象甚至是计算属性而来；而侦听属性适用于观测某个值的变化去完成一段复杂的业务逻辑。</p>\n<h3 id=\"v-if-和-v-for-为什么不建议放在一起使用？\"><a href=\"#v-if-和-v-for-为什么不建议放在一起使用？\" class=\"headerlink\" title=\"v-if 和 v-for 为什么不建议放在一起使用？\"></a>v-if 和 v-for 为什么不建议放在一起使用？</h3><p>Vue 2 中，<code>v-for</code>的优先级比<code>v-if</code>高，这意味着<code>v-if</code>将分别重复运行于每一个<code>v-for</code>循环中。如果要遍历的数组很大，而真正要展示的数据很少时，将造成很大的性能浪费。</p>\n<p>Vue 3 中，则完全相反，<code>v-if</code>的优先级高于<code>v-for</code>，所以<code>v-if</code>执行时，它调用的变量还不存在，会导致异常。</p>\n<p>通常有两种情况导致要这样做：</p>\n<ul>\n<li>为了过滤列表中的项目，比如：<code>v-for = &quot;user in users&quot; v-if = &quot;user.active&quot;</code>。这种情况，可以定义一个计算属性，让其返回过滤后的列表即可。</li>\n<li>为了避免渲染本该被隐藏的列表，比如<code>v-for = &quot;user in users&quot;  v-if = &quot;showUsersFlag&quot;</code>。这种情况，可以将<code>v-if</code>移至容器元素上或在外面包一层<code>template</code>即可。</li>\n</ul>\n<h3 id=\"Vue-2中的set方法？\"><a href=\"#Vue-2中的set方法？\" class=\"headerlink\" title=\"Vue 2中的set方法？\"></a>Vue 2中的set方法？</h3><p><a href=\"https://link.juejin.cn/?target=https://v2.cn.vuejs.org/v2/api/%23Vue-set\"><code>set</code>是Vue 2中的一个全局API</a>。可手动添加响应式数据，解决数据变化视图未更新问题。当在项目中直接设置数组的某一项的值，或者直接设置对象的某个属性值，会发现页面并没有更新。这是因为<code>Object.defineProperty()</code>的限制，监听不到数据变化，可通过<code>this.$set(数组或对象，数组下标或对象的属性名，更新后的值)</code>解决。</p>\n<h3 id=\"keep-alive-是什么？\"><a href=\"#keep-alive-是什么？\" class=\"headerlink\" title=\"keep-alive 是什么？\"></a>keep-alive 是什么？</h3><ul>\n<li>作用：实现组件缓存，保持组件的状态，避免反复渲染导致的性能问题。</li>\n<li>工作原理：Vue.js 内部将 DOM 节点，抽象成了一个个的 VNode 节点，<code>keep-alive</code>组件的缓存也是基于 VNode 节点的。它将满足条件的组件在 cache 对象中缓存起来，重新渲染的时候再将 VNode 节点从 cache 对象中取出并渲染。</li>\n<li>可以设置以下属性：<br> ① <code>include</code>：字符串或正则，只有名称匹配的组件会被缓存。<br> ② <code>exclude</code>：字符串或正则，任何名称匹配的组件都不会被缓存。<br> ③ <code>max</code>：数字，最多可以缓存多少组件实例。<br> 匹配首先检查组件的<code>name</code>选项，如果<code>name</code>选项不可用，则匹配它的局部注册名称（父组件 components选项的键值），匿名组件不能被匹配。</li>\n</ul>\n<p>如果同时使用了<code>include</code>、<code>exclude</code>，那么<code>exclude</code>的优先级高于<code>include</code>。</p>\n<p>设置了<code>keep-alive</code>缓存的组件，会多出两个生命周期钩子：<code>activated</code>、<code>deactivated</code>。<br> 首次进入组件时：beforeCreate –&gt; created –&gt; beforeMount –&gt; mounted –&gt; activated –&gt; beforeUpdate –&gt; updated –&gt; deactivated<br> 再次进入组件时：activated –&gt; beforeUpdate –&gt; updated –&gt; deactivated</p>\n<h3 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h3><p><code>mixin</code>（混入）， 它提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。</p>\n<p>使用场景： 不同组件中经常会用到一些相同或相似的代码，这些代码的功能相对独立。可以通过mixin 将相同或相似的代码提出来。</p>\n<p>缺点：</p>\n<ol>\n<li>变量来源不明确</li>\n<li>多 mixin 可能会造成命名冲突（解决方式：Vue 3的组合API）</li>\n<li>mixin 和组件出现多对多的关系，使项目复杂度变高。</li>\n</ol>\n<h3 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h3><p><code>slot</code>插槽，一般在组件内部使用，封装组件时，在组件内部不确定该位置是以何种形式的元素展示时，可以通过<code>slot</code>占据这个位置，该位置的元素需要父组件以内容形式传递过来。<code>slot</code>分为：</p>\n<ul>\n<li><code>默认插槽</code>：子组件用<code>&lt;slot&gt;</code>标签来确定渲染的位置，标签里面可以放<code>DOM</code>结构作为后备内容，当父组件在使用的时候，可以直接在子组件的标签内写入内容，该部分内容将插入子组件的<code>&lt;slot&gt;</code>标签位置。如果父组件使用的时候没有往插槽传入内容，后备内容就会显示在页面。</li>\n<li><code>具名插槽</code>：子组件用<code>name</code>属性来表示插槽的名字，没有指定<code>name</code>的插槽，会有隐含的名称叫做 <code>default</code>。父组件中在使用时在默认插槽的基础上通过<code>v-slot</code>指令指定元素需要放在哪个插槽中，<code>v-slot</code>值为子组件插槽<code>name</code>属性值。使用<code>v-slot</code>指令指定元素放在哪个插槽中，必须配合<code>&lt;template&gt;</code>元素，且一个<code>&lt;template&gt;</code>元素只能对应一个预留的插槽，即不能多个<code>&lt;template&gt;</code> 元素都使用<code>v-slot</code>指令指定相同的插槽。<code>v-slot</code>的简写是<code>#</code>，例如<code>v-slot:header</code>可以简写为<code>#header</code>。</li>\n<li>作用域插槽：子组件在<slot>标签上绑定props数据，以将子组件数据传给父组件使用。父组件获取插槽绑定 props 数据的方法：<ol>\n<li>scope=”接收的变量名”：<code>&lt;template scope=&quot;接收的变量名&quot;&gt;</code></li>\n<li>slot-scope=”接收的变量名”：<code>&lt;template slot-scope=&quot;接收的变量名&quot;&gt;</code></li>\n<li>v-slot:插槽名=”接收的变量名”：<code>&lt;template v-slot:插槽名=&quot;接收的变量名&quot;&gt;</code></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Vue-中的修饰符有哪些？\"><a href=\"#Vue-中的修饰符有哪些？\" class=\"headerlink\" title=\"Vue 中的修饰符有哪些？\"></a>Vue 中的修饰符有哪些？</h3><p>在Vue 中，修饰符处理了许多 DOM 事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理。Vue中修饰符分为以下几种：</p>\n<ol>\n<li><p>表单修饰符<br> <code>lazy</code> 填完信息，光标离开标签的时候，才会将值赋予给value，也就是在<code>change</code>事件之后再进行信息同步。<br> <code>number</code> 自动将用户输入值转化为数值类型，但如果这个值无法被<code>parseFloat</code>解析，则会返回原来的值。<br> <code>trim</code> 自动过滤用户输入的首尾空格，而中间的空格不会被过滤。</p>\n</li>\n<li><p>事件修饰符<br> <code>stop</code> 阻止了事件冒泡，相当于调用了<code>event.stopPropagation</code>方法。<br> <code>prevent</code> 阻止了事件的默认行为，相当于调用了<code>event.preventDefault</code>方法。<br> <code>self</code> 只当在 <code>event.target</code> 是当前元素自身时触发处理函数。<br> <code>once</code> 绑定了事件以后只能触发一次，第二次就不会触发。<br> <code>capture</code> 使用事件捕获模式，即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理。<br> <code>passive</code> 告诉浏览器你不想阻止事件的默认行为。<br> <code>native</code> 让组件变成像<code>html</code>内置标签那样监听根元素的原生事件，否则组件上使用 <code>v-on</code> 只会监听自定义事件。</p>\n</li>\n<li><p>鼠标按键修饰符<br> <code>left</code> 左键点击。<br> <code>right</code> 右键点击。<br> <code>middle</code> 中键点击。</p>\n</li>\n<li><p>键值修饰符</p>\n<p>键盘修饰符是用来修饰键盘事件（onkeyup，onkeydown）的，有如下：keyCode</p>\n<p>存在很多，但vue为我们提供了别名，分为以下两种：</p>\n<ul>\n<li>普通键（enter、tab、delete、space、esc、up…）</li>\n<li>系统修饰键（ctrl、alt、meta、shift…）</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"对-SPA-的理解？\"><a href=\"#对-SPA-的理解？\" class=\"headerlink\" title=\"对 SPA 的理解？\"></a>对 SPA 的理解？</h3><ol>\n<li><p>概念：<br> <code>SPA（Single-page  application）</code>，即单页面应用，它是一种网络应用程序或网站的模型，通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换时打断用户体验。在<code>SPA</code>中，所有必要的代码（HTML、JavaScript 和 CSS）都通过单个页面的加载而检索，或者根据需要（通常是响应用户操作）动态装载适当的资源并添加到页面。页面在任何时间点都不会重新加载，也不会将控制转移到其他页面。举个例子，就像一个杯子，上午装的是牛奶，中午装的是咖啡，下午装的是茶，变得始终是内容，杯子始终不变。</p>\n</li>\n<li><p><code>SPA</code>与<code>MPA</code>的区别：<br> <code>MPA（Muti-page application）</code>，即多页面应用。在<code>MPA</code>中，每个页面都是一个主页面，都是独立的，每当访问一个页面时，都需要重新加载 Html、CSS、JS 文件，公共文件则根据需求按需加载。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>SPA</th>\n<th>MPA</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>组成</td>\n<td>一个主页面和多个页面片段</td>\n<td>多个主页面</td>\n</tr>\n<tr>\n<td>url模式</td>\n<td>hash模式</td>\n<td>history模式</td>\n</tr>\n<tr>\n<td>SEO搜索引擎优化</td>\n<td>难实现，可使用SSR方式改善</td>\n<td>容易实现</td>\n</tr>\n<tr>\n<td>数据传递</td>\n<td>容易</td>\n<td>通过url、cookie、localStorage等传递</td>\n</tr>\n<tr>\n<td>页面切换</td>\n<td>速度快，用户体验良好</td>\n<td>切换加载资源，速度慢，用户体验差</td>\n</tr>\n<tr>\n<td>维护成本</td>\n<td>相对容易</td>\n<td>相对复杂</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><code>SPA</code>的优缺点：<br> 优点：</p>\n<ul>\n<li>具有桌面应用的即时性、网站的可移植性和可访问性</li>\n<li>用户体验好、快，内容的改变不需要重新加载整个页面</li>\n<li>良好的前后端分离，分工更明确</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>不利于搜索引擎的抓取</li>\n<li>首次渲染速度相对较慢</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"双向绑定？\"><a href=\"#双向绑定？\" class=\"headerlink\" title=\"双向绑定？\"></a>双向绑定？</h3><ol>\n<li>概念：<br> Vue 中双向绑定是一个指令<code>v-model</code>，可以绑定一个响应式数据到视图，同时视图的变化能改变该值。<code>v-model</code>是语法糖，默认情况下相当于<code>:value</code>和<code>@input</code>，使用<code>v-model</code>可以减少大量繁琐的事件处理代码，提高开发效率。</li>\n<li>使用：<br> 通常在表单项上使用<code>v-model</code>，还可以在自定义组件上使用，表示某个值的输入和输出控制。</li>\n<li>原理：<br> <code>v-model</code>是一个指令，双向绑定实际上是Vue 的编译器完成的，通过输出包含<code>v-model</code>模版的组件渲染函数，实际上还是<code>value</code>属性的绑定及<code>input</code>事件监听，事件回调函数中会做相应变量的更新操作。</li>\n</ol>\n<h3 id=\"子组件是否可以直接改变父组件的数据？\"><a href=\"#子组件是否可以直接改变父组件的数据？\" class=\"headerlink\" title=\"子组件是否可以直接改变父组件的数据？\"></a>子组件是否可以直接改变父组件的数据？</h3><ol>\n<li>所有的<code>prop</code>都遵循着单项绑定原则，<code>props</code>因父组件的更新而变化，自然地将新状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。<br> 另外，每次父组件更新后，所有的子组件中的<code>props</code>都会被更新为最新值，这就意味着不应该子组件中去修改一个<code>prop</code>，若这么做了，Vue 会在控制台上抛出警告。</li>\n<li>实际开发过程中通常有两个场景导致要修改prop：<ul>\n<li><code>prop</code>被用于传入初始值，而子组件想在之后将其作为一个局部数据属性。这种情况下，最好是新定义一个局部数据属性，从<code>props</code>获取初始值即可。</li>\n<li>需要对传入的<code>prop</code>值做进一步转换。最好是基于该<code>prop</code>值定义一个计算属性。</li>\n</ul>\n</li>\n<li>实践中，如果确实要更改父组件属性，应<code>emit</code>一个事件让父组件变更。当对象或数组作为<code>props</code>被传入时，虽然子组件无法更改<code>props</code>绑定，但仍然<strong>可以</strong>更改对象或数组内部的值。这是因为JS的对象和数组是按引用传递，而对于 Vue 来说，禁止这样的改动虽然可能，但是有很大的性能损耗，比较得不偿失。</li>\n</ol>\n<h3 id=\"router-和-route-的区别？\"><a href=\"#router-和-route-的区别？\" class=\"headerlink\" title=\"router 和 route 的区别？\"></a>router 和 route 的区别？</h3><ol>\n<li><code>$router</code>是VueRouter的实例对象，是一个全局的路由对象，包含了所有路由的对象和属性。</li>\n<li><code>$route</code>是一个跳转的路由对象，可以认为是当前组件的路由管理，指当前激活的路由对象，包含当前url解析得到的数据，可以从对象里获取一些数据，如：name，path，params，query等。</li>\n</ol>\n<h3 id=\"vue-router-的路由传参方式？\"><a href=\"#vue-router-的路由传参方式？\" class=\"headerlink\" title=\"vue-router 的路由传参方式？\"></a>vue-router 的路由传参方式？</h3><ol>\n<li>声明式导航 <code>router-link</code>：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link :to=<span class=\"string\">&quot;&#x27;/users?userId:1&#x27;&quot;</span>&gt;&lt;/router-link&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123; name: &#x27;users&#x27;, params: &#123; userId: 1 &#125; &#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123; path: &#x27;/users&#x27;, query: &#123; userId: 1 &#125; &#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>编程式导航 router-push：</p>\n<ul>\n<li>通过<code>params</code>传参</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">userId</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 路由配置</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">User</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 跳转后获取路由参数</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">params</span>.<span class=\"property\">userId</span> <span class=\"comment\">// 为 1</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过<code>query</code>传参</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.<span class=\"variable\">$router</span>.<span class=\"title function_ invoke__\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">query</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">userId</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 路由配置</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    path: <span class=\"string\">&#x27;/users&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">    component: User</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 跳转后获取路由参数</span></span><br><span class=\"line\">this.<span class=\"variable\">$route</span>.query.userId</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>动态路由</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;/users/$&#123;userId&#125;&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 路由配置</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/users/:userId&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">User</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 跳转后获取路由参数</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">params</span>.<span class=\"property\">userId</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"Vue-Router中的常用路由模式和原理？\"><a href=\"#Vue-Router中的常用路由模式和原理？\" class=\"headerlink\" title=\"Vue Router中的常用路由模式和原理？\"></a>Vue Router中的常用路由模式和原理？</h3><ol>\n<li>hash 模式：</li>\n</ol>\n<ul>\n<li><code>location.hash</code>的值就是url中 <code>#</code> 后面的东西。它的特点在于：hash虽然出现url中，但不会被包含在HTTP请求中，对后端完全没有影响，因此改变hash不会重新加载页面。</li>\n<li>可以为hash的改变添加监听事件<code>window.addEventListener(&quot;hashchange&quot;, funcRef, false)</code>，每一次改变<code>hash (window.location.hash)</code>，都会在浏览器的访问历史中增加一个记录，利用hash的以上特点，就可以实现<strong>前端路由更新视图但不重新请求页面</strong>的功能了。<br> 特点：兼容性好但是不美观</li>\n</ul>\n<ol>\n<li>history 模式：<br> 利用 HTML5 History Interface 中新增的<code>pushState()</code>和<code>replaceState()</code>方法。<br> 这两个方法应用于浏览器的历史记录栈，在当前已有的<code>back</code>、<code>forward</code>、<code>go</code> 的基础上(使用<code>popState()</code>方法)，他们提供了对历史记录进行修改的功能。<br> 这两个方法有个共同点：当调用他们修改浏览器历史记录栈后，虽然当前url改变了，但浏览器不会刷新页面，这就为单页面应用前端路由“更新视图但不重新请求页面”提供了基础<br> 特点：虽然美观，但是刷新会出现 404 需要后端进行配置。</li>\n</ol>\n<h3 id=\"动态路由？\"><a href=\"#动态路由？\" class=\"headerlink\" title=\"动态路由？\"></a>动态路由？</h3><p>很多时候，我们需要将给定匹配模式的路由映射到同一个组件，这种情况就需要定义动态路由。例如，我们有一个 User组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用<code>动态路径参数（dynamic segment）</code>来达到这个效果：<code>&#123;path: &#39;/user/:id&#39;, compenent: User&#125;</code>，其中<code>:id</code>就是动态路径参数。</p>\n<h3 id=\"对Vuex的理解？\"><a href=\"#对Vuex的理解？\" class=\"headerlink\" title=\"对Vuex的理解？\"></a>对Vuex的理解？</h3><ol>\n<li>概念：<br> Vuex 是 Vue 专用的状态管理库，它以全局方式集中管理应用的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</li>\n<li>解决的问题：<br> Vuex 主要解决的问题是多组件之间状态共享。利用各种通信方式，虽然也能够实现状态共享，但是往往需要在多个组件之间保持状态的一致性，这种模式很容易出问题，也会使程序逻辑变得复杂。Vuex 通过把组件的共享状态抽取出来，以全局单例模式管理，这样任何组件都能用一致的方式获取和修改状态，响应式的数据也能够保证简洁的单向流动，使代码变得更具结构化且易于维护。</li>\n<li>什么时候用:<br> Vuex 并非是必须的，它能够管理状态，但同时也带来更多的概念和框架。如果我们不打算开发大型单页应用或应用里没有大量全局的状态需要维护，完全没有使用Vuex的必要，一个简单的 store 模式就够了。反之，Vuex将是自然而然的选择。</li>\n<li>用法：<br> Vuex 将全局状态放入<code>state</code>对象中，它本身是一颗状态树，组件中使用<code>store</code>实例的<code>state</code>访问这些状态；然后用配套的<code>mutation</code>方法修改这些状态，并且只能用<code>mutation</code>修改状态，在组件中调用<code>commit</code>方法提交<code>mutation</code>；如果应用中有异步操作或复杂逻辑组合，需要编写<code>action</code>，执行结束如果有状态修改仍需提交<code>mutation</code>，组件中通过<code>dispatch</code>派发<code>action</code>。最后是模块化，通过<code>modules</code>选项组织拆分出去的各个子模块，在访问状态（state）时需注意添加子模块的名称，如果子模块有设置<code>namespace</code>，那么提交<code>mutation</code>和派发<code>action</code>时还需要额外的命名空间前缀。</li>\n</ol>\n<h3 id=\"页面刷新后Vuex-状态丢失怎么解决？\"><a href=\"#页面刷新后Vuex-状态丢失怎么解决？\" class=\"headerlink\" title=\"页面刷新后Vuex 状态丢失怎么解决？\"></a>页面刷新后Vuex 状态丢失怎么解决？</h3><p>Vuex 只是在内存中保存状态，刷新后就会丢失，如果要持久化就需要保存起来。</p>\n<p><code>localStorage</code>就很合适，提交<code>mutation</code>的时候同时存入<code>localStorage</code>，在<code>store</code>中把值取出来作为<code>state</code>的初始值即可。</p>\n<p>也可以使用第三方插件，推荐使用<code>vuex-persist</code>插件，它是为 Vuex 持久化储存而生的一个插件，不需要你手动存取<code>storage</code>，而是直接将状态保存至 <code>cookie</code> 或者 <code>localStorage</code>中。</p>\n<h3 id=\"关于-Vue-SSR-的理解？\"><a href=\"#关于-Vue-SSR-的理解？\" class=\"headerlink\" title=\"关于 Vue SSR 的理解？\"></a>关于 Vue SSR 的理解？</h3><p><code>SSR</code>即<code>服务端渲染（Server Side Render）</code>，就是将 Vue 在客户端把标签渲染成 html 的工作放在服务端完成，然后再把 html 直接返回给客户端。</p>\n<ul>\n<li>优点：<br> 有着更好的 SEO，并且首屏加载速度更快。</li>\n<li>缺点：<br> 开发条件会受限制，服务器端渲染只支持 beforeCreate 和 created 两个钩子，当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于 Node.js 的运行环境。服务器会有更大的负载需求。</li>\n</ul>\n<h3 id=\"了解哪些-Vue-的性能优化方法？\"><a href=\"#了解哪些-Vue-的性能优化方法？\" class=\"headerlink\" title=\"了解哪些 Vue 的性能优化方法？\"></a>了解哪些 Vue 的性能优化方法？</h3><ul>\n<li>路由懒加载。有效拆分应用大小，访问时才异步加载。</li>\n<li><code>keep-alive</code>缓存页面。避免重复创建组件实例，且能保留缓存组件状态。</li>\n<li><code>v-for</code>遍历避免同时使用<code>v-if</code>。实际上在 Vue 3 中已经是一个错误用法了。</li>\n<li>长列表性能优化，可采用虚拟列表。</li>\n<li><code>v-once</code>。不再变化的数据使用<code>v-once</code>。</li>\n<li>事件销毁。组件销毁后把全局变量和定时器销毁。</li>\n<li>图片懒加载。</li>\n<li>第三方插件按需引入。</li>\n<li>子组件分割。较重的状态组件适合拆分。</li>\n<li>服务端渲染。</li>\n</ul>\n","site":{"data":{"indexwz":[{"date":"精品","msg":"魔改目录","color":"color: #e04f4f;","url":"/posts/c6050a1d.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（一）","color":"color: #3d82ff;","url":"/posts/b48f40bd.html"},{"date":"css","msg":"主题butterfly4.5.1css美化教程（二）","color":"color: #3d82ff;","url":"/posts/eb769414.html"},{"date":"bat","msg":"hexo博客系统快速命令工具（CMD快速辅助工具）","color":null,"url":"/posts/db0a31c8.html"},{"date":"教程","msg":"5分钟搭一个hexo博客","color":null,"url":"/posts/b9dc5266.html"},{"date":"J  S","msg":"主题butterfly顶部复制提示弹窗","color":null,"url":"/posts/3296cbc9.html"},{"date":"教程","msg":"主题butterfly拥有星空背景和流星特效","color":null,"url":"/posts/9ee2cd59.html"},{"date":"教程","msg":"Butterfly 安裝文檔(一) 快速開始","color":null,"url":"/posts/21cfbf15.html"},{"date":"J  S","msg":"友情链接快速添加js代码按钮填写内容","color":null,"url":"/posts/80adb334.html"}],"creativity":[{"class_name":"开启创造力","creativity_list":[{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#ffffff","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#d57979","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"},{"name":"AfterEffect","color":"#989bf8","icon":"https://img.zhheo.com/i/2022/08/22/6302f0748a83b.png"},{"name":"Sketch","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63030a85d6458.png"},{"name":"Docker","color":"#57b6e6","icon":"https://img.zhheo.com/i/2022/08/22/6303102c049d1.png"},{"name":"Photoshop","color":"#4082c3","icon":"https://img.zhheo.com/i/2022/08/22/63030fe730a69.png"},{"name":"FinalCutPro","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/630310dea00f5.png"},{"name":"Python","color":"#54cdda","icon":"https://img.zhheo.com/i/2022/08/22/63031127e8e2b.png"},{"name":"Swift","color":"#eb6840","icon":"https://img.zhheo.com/i/2022/08/22/630311760ca04.png"},{"name":"Principle","color":"#8f55ba","icon":"https://img.zhheo.com/i/2022/08/22/630311cf9dded.png"},{"name":"illustrator","color":"#f29e39","icon":"https://img.zhheo.com/i/2022/08/22/6303121db0410.png"},{"name":"CSS3","color":"#2c51db","icon":"https://img.zhheo.com/i/2022/08/22/630312c06cdc5.png"},{"name":"JS","color":"#f7cb4f","icon":"https://img.zhheo.com/i/2022/08/22/630312f898a1c.png"},{"name":"HTML","color":"#e9572b","icon":"https://img.zhheo.com/i/2022/08/22/6303132113bbb.png"},{"name":"Git","color":"#df5b40","icon":"https://img.zhheo.com/i/2022/09/23/632d2d33b1e1b.webp"},{"name":"Apifox","color":"#e65164","icon":"https://img.zhheo.com/i/2022/09/23/632d2e083fc9b.webp"}]}],"notice":{"index1":[{"date":"biubiu"},{"date":"吐泡泡"}],"index2":[{"date":"一个"},{"date":"两个"}],"index3":[{"date":"一串"},{"date":"两串"}]},"reward":[{"class_name":"赞赏","reward_list":[{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"}]}],"video":[{"cover":"https://npm.elemecdn.com/justlovesmile-img/33f7ad7c55b5df1e5bdb6a6ea3eb35b.jpg","time":"2022/03/10","link":"//player.bilibili.com/player.html?aid=937145035&bvid=BV18T4y1D7wj&cid=545915013&page=1","title":"雷神池，璃月雷神前来报道","description":"【原神】20220310"}],"shuanbian":[{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/45663c9f2ce54eb2ae8628efb0c43390.jpg","link":"/posts/d9795d10.html","title":"quickjs调试器","xiao":"梅花","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/fe86174cbe99485e85f43b37c16622da.jpg","link":"/posts/d9795d88.html","title":"HTML & CSS复习","xiao":"落叶"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/v2-8e40cc0dbad304617ad773d0f256d339_r.jpg","link":"/posts/d9795d86.html","title":"js复习","xiao":"球手","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/posts/d9795d89.html","title":"vela快应用框架","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cdn.bywind.xyz/img/cover/image-20221208194011653.png","link":"/","title":"基于Butterfly的外挂标签引入 - 独特的风格让你的博客别具一格","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/background/63233ec9893f4.webp","link":"/","title":"Fiddler抓包 - 功能非常强大的web调试利器","xiao":"精品","riqi":"2022.01.01"},{"cover":"https://cloud-image-host.oss-cn-beijing.aliyuncs.com/page/cover/2022112902.png","link":"/","title":"博客美化日记 - 囊括本博客Butterfly主题的基本美化升级","xiao":"精品","riqi":"2022.01.01"}],"widget":{"bottom":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"card-widget heo-right-widget\" id=\"card-wechat\"><div id=\"flip-wrapper\"><div id=\"flip-content\"><div class=\"face\"></div><div class=\"back face\"></div></div></div></div>"}],"top":[{"class_name":null,"id_name":"newYear","name":null,"icon":null,"order":1,"html":"<div class=\"about-statistic author-content-item2\"><div class=\"card-content\"><div class=\"lightning\"><div class=\"lightning1\"><img src=\"https://drfs.ctcontents.com/file/14237530/755647870/e44191/img/index/swordsmen.webp\"></div><div class=\"lightning2\"><img src=\"https://www.jiangweishan.com/demo/lightning2.png\"></div></div><span class=\"author-content-item-title\">文章归档  </span><div class=\"banner-button-group\"><a class=\"banner-button\" onclick=\"pjax.loadUrl(&quot;/archives/&quot;)\" data-pjax-state=\"data-pjax-state\"><span class=\"banner-button-text\">文章隧道</span></a></div></div></div>"}]},"link":[{"class_name":"<i class=\"fas fa-check-double\" style=\"color: #FF6666;padding-right: 0.4rem\"></i>網站<div class=\"addBtn\"><button onclick=\"toRandomFlink()\"><i class=\"fas fa-shuffle\"></i>随机打开一个链接</button></div>","class_desc":"<span style=\"font-style: italic;\">小窝的装修参考了以下博客</span>","link_list":[{"name":"Akilarの糖果屋","link":"https://akilar.top/","siteshot":"https://npm.elemecdn.com/akilar-friends@latest/siteshot/akilar.top.jpg","avatar":"https://npm.elemecdn.com/akilar-friends@latest/avatar/akilar.top.jpg","descr":"欢迎光临糖果屋"},{"name":"张洪Heo","link":"https://blog.zhheo.com/","avatar":"https://img.zhheo.com/i/2022/08/19/62ff32fa28da1.png","descr":"是一名 设计师、产品经理、独立开发者、博主"},{"name":"安知鱼`Blog","link":"https://anzhiy.cn/","avatar":"https://image.anzhiy.cn/adminuploads/1/2022/09/15/63232b7d91d22.jpg","descr":"生活明朗，万物可爱"}]},{"class_name":"<i class=\"fas fa-fan\" style=\"color:#00cccc;padding-right: 0.4rem\"></i>我的好朋友们","class_desc":"<span style=\"font-style: italic;\">最可愛的朋友在這裏</span>","link_list":[{"name":"轻笑Chuckle","link":"https://www.chuckle.top/","avatar":"https://www.chuckle.top/img/head.webp","descr":"宁静致远，倾城轻笑"},{"name":"ichikaの小窝","link":"https://ichika.cc/","avatar":"https://ichika.cc/img/Page/HeadIcon.jpg","descr":"Hello,gamer!"},{"name":"Leonus","link":"https://blog.leonus.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=553344777&s=5","descr":"进一寸有进一寸的欢喜。"},{"name":"Sianx's Blog","link":"https://sianx.com","avatar":"https://cdn.bilicdn.tk/npm/picture-sianx@1.0.0/Blog/logo.png","descr":"总之岁月漫长, 然而值得等待。"},{"name":"Fomalhaut🥝","link":"https://www.fomal.cc/","avatar":"https://www.fomal.cc/assets/head.jpg","descr":"Future is now 🍭🍭🍭"},{"name":"小城故事","link":"https://www.webxc.ml","avatar":"https://npm.elemecdn.com/webxc/logo/logo.jpg","descr":"欢迎光临小城故事"},{"name":"呆鱼","link":"https://daiyu-233.top/","avatar":"https://daiyu-233.top/img/avatar.png","descr":"命运之所以称为命运，正是因为它无可改变。"},{"name":"Ethan.Tzy","link":"https://tzy1997.com/","avatar":"https://bu.dusays.com/2022/05/02/626f92e193879.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志"},{"name":"青衣","link":"https://www.qingyi1220.cn/","avatar":"https://www.qingyi1220.cn/img/Tsingyi.jpg","descr":"世界既不黑也不白，而是一道精致的灰"},{"name":"子辰辰","link":"https://www.xiaozhuzi.xyz/","avatar":"https://ghost.xiaozhuzi.xyz/cc3/99.jpg","descr":"一个渗透测试在学的小菜鸡"},{"name":"小华同学927のBlog","link":"https://blog.xiaohua927.top/","avatar":"https://i.imgtg.com/2022/12/01/DM501.jpg","descr":"行而不辍，未来可期！"},{"name":"无影博客","link":"https://wyblog1.eu.org","avatar":"https://gcore.jsdelivr.net/gh/612901/661111@main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-12-21%20102358.png","descr":"无影博客"},{"name":"Echocbx","link":"https://ezgx.tk/","avatar":"https://wlopck.gitee.io/img/avatar.png","descr":"分享科技与狠活~"},{"name":"wsbのblog","link":"https://wsbblog.cn","avatar":"https://wsbblog.cn/img/wsb.webp","descr":"己所不欲，勿施于人"},{"name":"LyShark - 孤风洗剑","link":"https://www.lyshark.com","avatar":"https://www.lyshark.com/images/baidu_logo.png","descr":"道，可道，非常道；名，可名，非常名。—— 老子《道德经》"}]}]}},"excerpt":"<p>vue复习</p>","more":"<h3 id=\"MVVM模型？\"><a href=\"#MVVM模型？\" class=\"headerlink\" title=\"MVVM模型？\"></a>MVVM模型？</h3><p>MVVM，是<code>Model-View-ViewModel</code>的简写，其本质是<code>MVC</code>模型的升级版。其中 <code>Model</code> 代表数据模型，<code>View</code> 代表看到的页面，<code>ViewModel</code>是<code>View</code>和<code>Model</code>之间的桥梁，数据会绑定到<code>ViewModel</code>层并自动将数据渲染到页面中，视图变化的时候会通知<code>ViewModel</code>层更新数据。以前是通过操作<code>DOM</code>来更新视图，现在是<code>数据驱动视图</code>。</p>\n<h3 id=\"Vue的生命周期\"><a href=\"#Vue的生命周期\" class=\"headerlink\" title=\"Vue的生命周期\"></a>Vue的生命周期</h3><p>Vue 的生命周期可以分为8个阶段：创建前后、挂载前后、更新前后、销毁前后，以及一些特殊场景的生命周期。Vue 3 中还新增了是3个用于调试和服务端渲染的场景。</p>\n<table>\n<thead>\n<tr>\n<th>Vue 2中的生命周期钩子</th>\n<th>Vue 3选项式API的生命周期选项</th>\n<th>Vue 3 组合API中生命周期钩子</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>beforeCreate</code></td>\n<td><code>beforeCreate</code></td>\n<td><code>setup()</code></td>\n<td>创建前，此时<code>data</code>和 <code>methods</code>的数据都还没有初始化</td>\n</tr>\n<tr>\n<td><code>created</code></td>\n<td><code>created</code></td>\n<td><code>setup()</code></td>\n<td>创建后，<code>data</code>中有值，尚未挂载，可以进行一些<code>Ajax</code>请求</td>\n</tr>\n<tr>\n<td><code>beforeMount</code></td>\n<td><code>beforeMount</code></td>\n<td><code>onBeforeMount</code></td>\n<td>挂载前，会找到虚拟<code>DOM</code>，编译成<code>Render</code></td>\n</tr>\n<tr>\n<td><code>mounted</code></td>\n<td><code>mounted</code></td>\n<td><code>onMounted</code></td>\n<td>挂载后，<code>DOM</code>已创建，可用于获取访问数据和<code>DOM</code>元素</td>\n</tr>\n<tr>\n<td><code>beforeUpdate</code></td>\n<td><code>beforeUpdate</code></td>\n<td><code>onBeforeUpdate</code></td>\n<td>更新前，可用于获取更新前各种状态</td>\n</tr>\n<tr>\n<td><code>updated</code></td>\n<td><code>updated</code></td>\n<td><code>onUpdated</code></td>\n<td>更新后，所有状态已是最新</td>\n</tr>\n<tr>\n<td><code>beforeDestroy</code></td>\n<td><code>beforeUnmount</code></td>\n<td><code>onBeforeUnmount</code></td>\n<td>销毁前，可用于一些定时器或订阅的取消</td>\n</tr>\n<tr>\n<td><code>destroyed</code></td>\n<td><code>unmounted</code></td>\n<td><code>onUnmounted</code></td>\n<td>销毁后，可用于一些定时器或订阅的取消</td>\n</tr>\n<tr>\n<td><code>activated</code></td>\n<td><code>activated</code></td>\n<td><code>onActivated</code></td>\n<td><code>keep-alive</code>缓存的组件激活时</td>\n</tr>\n<tr>\n<td><code>deactivated</code></td>\n<td><code>deactivated</code></td>\n<td><code>onDeactivated</code></td>\n<td><code>keep-alive</code>缓存的组件停用时</td>\n</tr>\n<tr>\n<td><code>errorCaptured</code></td>\n<td><code>errorCaptured</code></td>\n<td><code>onErrorCaptured</code></td>\n<td>捕获一个来自子孙组件的错误时调用</td>\n</tr>\n<tr>\n<td>—</td>\n<td><code>renderTracked</code></td>\n<td><code>onRenderTracked</code></td>\n<td>调试钩子，响应式依赖被收集时调用</td>\n</tr>\n<tr>\n<td>—</td>\n<td><code>renderTriggered</code></td>\n<td><code>onRenderTriggered</code></td>\n<td>调试钩子，响应式依赖被触发时调用</td>\n</tr>\n<tr>\n<td>—</td>\n<td><code>serverPrefetch</code></td>\n<td><code>onServerPrefetch</code></td>\n<td>组件实例在服务器上被渲染前调用</td>\n</tr>\n</tbody></table>\n<p><strong>关于Vue 3中的生命周期建议阅读官方文档!!!!</strong></p>\n<p><a href=\"https://link.juejin.cn/?target=https://cn.vuejs.org/api/composition-api-lifecycle.html\">组合式 API：生命周期钩子–官方文档</a><br><a href=\"https://link.juejin.cn/?target=https://cn.vuejs.org/api/options-lifecycle.html\">选项式 API：生命周期选项–官方文档</a></p>\n<p><strong>父子组件的生命周期：</strong></p>\n<ul>\n<li><code>加载渲染阶段</code>：父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</li>\n<li><code>更新阶段</code>：父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</li>\n<li><code>销毁阶段</code>：父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</li>\n</ul>\n<h3 id=\"Vue-nextTick\"><a href=\"#Vue-nextTick\" class=\"headerlink\" title=\"Vue.$nextTick\"></a>Vue.$nextTick</h3><p><strong>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</strong></p>\n<p><code>nextTick</code> 是 Vue 提供的一个全局 API，由于 Vue 的异步更新策略，导致我们对数据修改后不会直接体现在 DOM 上，此时如果想要立即获取更新后的 DOM 状态，就需要借助该方法。</p>\n<p>Vue 在更新 DOM 时是异步执行的。当数据发生变化，Vue 将开启一个异步更新队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 <code>watcher</code> 被多次触发，只会被推入队列一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。<code>nextTick</code>方法会在队列中加入一个回调函数，确保该函数在前面的 DOM 操作完成后才调用。</p>\n<p>使用场景：</p>\n<ol>\n<li>如果想要在修改数据后立刻得到更新后的<code>DOM</code>结构，可以使用<code>Vue.nextTick()</code></li>\n<li>在<code>created</code>生命周期中进行<code>DOM</code>操作</li>\n</ol>\n<h3 id=\"Vue-实例挂载过程中发生了什么？\"><a href=\"#Vue-实例挂载过程中发生了什么？\" class=\"headerlink\" title=\"Vue 实例挂载过程中发生了什么？\"></a>Vue 实例挂载过程中发生了什么？</h3><p>挂载过程指的是 <code>app.mount()</code>过程，这是一个初始化过程，整体上做了两件事情：<code>初始化</code>和<code>建立更新机制</code>。</p>\n<p>初始化会创建组件实例、初始化组件状态、创建各种响应式数据。</p>\n<p>建立更新机制这一步会立即执行一次组件的更新函数，这会首次执行组件渲染函数并执行<code>patch</code>将<code>vnode</code> 转换为 <code>dom</code>； 同时首次执行渲染函数会创建它内部响应式数据和组件更新函数之间的依赖关系，这使得以后数据发生变化时会执行对应的更新函数。</p>\n<h3 id=\"Vue-的模版编译原理\"><a href=\"#Vue-的模版编译原理\" class=\"headerlink\" title=\"Vue 的模版编译原理\"></a>Vue 的模版编译原理</h3><p>Vue 中有个独特的编译器模块，称为<code>compiler</code>，它的主要作用是将用户编写的<code>template</code>编译为js中可执行的<code>render</code>函数。<br> 在Vue 中，编译器会先对<code>template</code>进行解析，这一步称为<code>parse</code>，结束之后得到一个JS对象，称之为<code>抽象语法树AST</code>；然后是对<code>AST</code>进行深加工的转换过程，这一步称为<code>transform</code>，最后将前面得到的<code>AST</code>生成JS代码，也就是<code>render</code>函数。</p>\n<h3 id=\"Vue-的响应式原理\"><a href=\"#Vue-的响应式原理\" class=\"headerlink\" title=\"Vue 的响应式原理\"></a>Vue 的响应式原理</h3><ol>\n<li><p>Vue 2 中的数据响应式会根据数据类型做不同的处理。如果是对象，则通过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(obj,key,descriptor)</span><br></pre></td></tr></table></figure>\n\n<p>拦截对象属性访问，当数据被访问或改变时，感知并作出反应；如果是数组，则通过覆盖数组原型的方法，扩展它的7个变更方法（push、pop、shift、unshift、splice、sort、reverse），使这些方法可以额外的做更新通知，从而做出响应。</p>\n<p>缺点：</p>\n<ul>\n<li>初始化时的递归遍历会造成性能损失；</li>\n<li>通知更新过程需要维护大量 <code>dep</code> 实例和 <code>watcher</code> 实例，额外占用内存较多；</li>\n<li>新增或删除对象属性无法拦截，需要通过 <code>Vue.set</code> 及 <code>delete</code> 这样的 API 才能生效；</li>\n<li>对于<code>ES6</code>中新产生的<code>Map</code>、<code>Set</code>这些数据结构不支持。</li>\n</ul>\n</li>\n<li><p>Vue 3 中利用<code>ES6</code>的<code>Proxy</code>机制代理需要响应化的数据。可以同时支持对象和数组，动态属性增、删都可以拦截，新增数据结构均支持，对象嵌套属性运行时递归，用到时才代理，也不需要维护特别多的依赖关系，性能取得很大进步。</p>\n</li>\n</ol>\n<h3 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h3><ol>\n<li>概念：<br> 虚拟DOM，顾名思义就是虚拟的DOM对象，它本身就是一个JS对象，只不过是通过不同的属性去描述一个视图结构。</li>\n<li>虚拟DOM的好处：<br> (1) 性能提升<br> 直接操作DOM是有限制的，一个真实元素上有很多属性，如果直接对其进行操作，同时会对很多额外的属性内容进行了操作，这是没有必要的。如果将这些操作转移到JS对象上，就会简单很多。另外，操作DOM的代价是比较昂贵的，频繁的操作DOM容易引起页面的重绘和回流。如果通过抽象VNode进行中间处理，可以有效减少直接操作DOM次数，从而减少页面的重绘和回流。<br> (2) 方便跨平台实现<br> 同一VNode节点可以渲染成不同平台上对应的内容，比如：渲染在浏览器是DOM元素节点，渲染在Native（iOS、Android）变为对应的控件。Vue 3 中允许开发者基于VNode实现自定义渲染器（renderer），以便于针对不同平台进行渲染。</li>\n<li>结构：<br> 没有统一的标准，一般包括<code>tag</code>、<code>props</code>、<code>children</code>三项。<br> <code>tag</code>：必选。就是标签，也可以是组件，或者函数。<br> <code>props</code>：非必选。就是这个标签上的属性和方法。<br> <code>children</code>：非必选。就是这个标签的内容或者子节点。如果是文本节点就是字符串；如果有子节点就是数组。换句话说，如果判断<code>children</code>是字符串的话，就表示一定是文本节点，这个节点肯定没有子元素。</li>\n</ol>\n<h3 id=\"diff-算法\"><a href=\"#diff-算法\" class=\"headerlink\" title=\"diff 算法\"></a>diff 算法</h3><p>由于目前<code>Vue3</code>对于性能的优化做了很多的处理，所以其在更新时并不会对所有的节点都进行<code>diff</code>更新。目前会进行<code>diff</code>更新的有以下两种情况：</p>\n<ul>\n<li><code>v-for</code>容器节点</li>\n<li>自写的<code>render()</code>函数</li>\n</ul>\n<p>还有一种特殊情况会进行无<code>diff</code>的按序更新，这种更新是全替换模式，非常耗时：</p>\n<ul>\n<li>无<code>key</code>值的<code>v-for</code>语句，此时会打上<code>UNKEYED_FRAGMENT</code>标记</li>\n</ul>\n<p>注意，<code>Vue3</code>没有主动提供片段这个功能，仅会在出现以下写法时会生成片段：</p>\n<ul>\n<li>一个组件有多个根节点，会生成一个片段包裹，此时其为稳定片段(<code>STABLE_FRAGMENT</code>)</li>\n<li><code>v-for</code>语句，会生成一个片段包裹</li>\n<li><code>v-if</code>语句，有多个子节点或不为单个文本节点，会生成一个片段包裹(<code>STABLE_FRAGMENT</code>)</li>\n</ul>\n<blockquote>\n<p>本文上述论点都是基于浏览器环境，非<em>NodeJS</em>环境(<em>SSR</em>)。文中提供的代码进行了<strong>适当的简化</strong>。</p>\n</blockquote>\n<p>在我们使用<code>template</code>的情况下，更新基本上会通过<code>block</code>进行更新——即节点自更新</p>\n<h4 id=\"diff-更新\"><a href=\"#diff-更新\" class=\"headerlink\" title=\"diff 更新\"></a>diff 更新</h4><h5 id=\"VUE2\"><a href=\"#VUE2\" class=\"headerlink\" title=\"VUE2\"></a>VUE2</h5><p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528150909234.png\" alt=\"image-20230528150909234\"></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528150936549.png\" alt=\"image-20230528150936549\"></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151019742.png\" alt=\"image-20230528151019742\"></p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151119230.png\" alt=\"image-20230528151119230\"></p>\n<p>第一次对比后结果</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151309763.png\" alt=\"image-20230528151309763\"></p>\n<p>第二次</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151400771.png\" alt=\"image-20230528151400771\"></p>\n<p>第三次</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151428703.png\" alt=\"image-20230528151428703\"></p>\n<p>最后整理</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528151504941.png\" alt=\"image-20230528151504941\"></p>\n<h5 id=\"VUE3\"><a href=\"#VUE3\" class=\"headerlink\" title=\"VUE3\"></a>VUE3</h5><p><code>diff</code>更新调用的内部的<code>patchKeyedChildren</code>方法，其大致流程分为三步：</p>\n<ol>\n<li>对比新旧节点头部相同指针的节点，相同则进行<code>diff</code>，不同则跳转下一步。</li>\n<li>对比新旧节点尾部指针指向节点，相同则进行<code>diff</code>，不同则跳转下一步。</li>\n<li>此时剩余新旧节点，可能存在乱序、已移除或新增的情况，进行特殊处理来更新。</li>\n</ol>\n<p>下面是函数最开始做的初始化，其中<code>c1/c2</code>分别代表新旧节点的子节点数组；<code>i</code>表示两个新旧节点指向同步的指针，它们是同步的；<code>e1/e2</code>分别代表指向两个子节点数组尾部的指针：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> l2 = c2.<span class=\"property\">length</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 变更前节点的尾下标</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> e1 = c1.<span class=\"property\">length</span> - <span class=\"number\">1</span> <span class=\"comment\">// prev ending index</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 变更后节点的尾下标</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> e2 = l2 - <span class=\"number\">1</span> <span class=\"comment\">// next ending index</span></span><br></pre></td></tr></table></figure>\n\n<p>其中<code>patch()</code>函数用于对节点进行更新，<code>isSameVNodeType()</code>函数用于判断两个节点是否具有相同的类型，此时其需要满足类型一样且<code>key</code>值相等。</p>\n<blockquote>\n<p>这里的类型指，例如组件，则其为组件的配置对象，元素则为元素的标记。</p>\n</blockquote>\n<h4 id=\"1-对比头部等位指针节点\"><a href=\"#1-对比头部等位指针节点\" class=\"headerlink\" title=\"1. 对比头部等位指针节点\"></a>1. 对比头部等位指针节点</h4><p>首先其会从头部指针开始，对比新旧节点是否相同：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码<span class=\"comment\">// 1. sync from start</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 从开始位置同步</span></span><br><span class=\"line\"><span class=\"comment\">// (a b) c</span></span><br><span class=\"line\"><span class=\"comment\">// (a b) d e</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n1 = c1[i]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n2 = c2[i]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 节点没有发生变更时，进行patch</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isSameVNodeType</span>(n1, n2)) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">patch</span>(n1, n2)</span><br><span class=\"line\">    <span class=\"comment\">// 不同节点时，立刻结束</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  i++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注释中给出了一个例子，即如果存在下图的新旧队列：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527224906472.png\" alt=\"image-20230527224906472\"></p>\n<p>由于此时两个指针的<code>VNode</code>相同，那么可以复用则直接进行<code>patch()</code>更新。之后指针向右移动一位，对比两个数组下标为 <code>1</code> 的位置：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225018797.png\" alt=\"image-20230527225018797\"></p>\n<p>同样的，节点相同，进行更新然后指针向后移动：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225137121.png\" alt=\"image-20230527225137121\"></p>\n<p>此时两个节点不一样了，那么本次头部对比到此结束。到此我们排除了头部位置可复用的节点，接下来那么肯定是排除尾部位置的可复用节点。</p>\n<h3 id=\"2-对比尾部等位指针节点\"><a href=\"#2-对比尾部等位指针节点\" class=\"headerlink\" title=\"2. 对比尾部等位指针节点\"></a>2. 对比尾部等位指针节点</h3><p>尾部的可复用节点检查方法与头部一样，唯一一点不同的是，它们有各自的指针分别指向子节点数组尾部。所以此时要使用两个指针<code>e1/e2</code>。</p>\n<p>以此时要使用两个指针<code>e1/e2</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码<span class=\"comment\">// 2. sync from end</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 从尾部位置开始查找</span></span><br><span class=\"line\"><span class=\"comment\">// a (b c)</span></span><br><span class=\"line\"><span class=\"comment\">// d e (b c)</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n1 = c1[e1]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n2 = c2[e2]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isSameVNodeType</span>(n1, n2)) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">patch</span>(n1, n2)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  e1--</span><br><span class=\"line\">  e2--</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还是按注释中的例子放图：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225256542.png\" alt=\"image-20230527225256542\"></p>\n<p>当前指针指向节点相同，节点可复用，直接更新，同时指针向前一起移动：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225417598.png\" alt=\"image-20230527225417598\"></p>\n<p>当前指针指向节点相同，节点可复用，直接更新，同时指针向前一起移动：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527225513256.png\"></p>\n<p>此时，两个指针指向节点不再相同，停止此处的对比。</p>\n<hr>\n<p>经过前两步的处理，新旧队列已经进一步缩短了，此时剩下的节点就可能存在下面三种情况：</p>\n<ul>\n<li>有新增的节点</li>\n<li>有节点被删除了</li>\n<li>相同的节点，但是移动了位置</li>\n</ul>\n<p>在实际的场景中，那么就只能存在下面三种剩余情况：</p>\n<ul>\n<li>仅有新增的节点(此时一定<code>i &gt; e1</code>)</li>\n<li>仅进行了节点删除(此时一定<code>i &gt; e2</code>)</li>\n<li>乱序的，一定有移动的节点，其中可能包含新增或有删除的节点(此时一定有<code>i &lt;= e2</code>且<code>i &lt;= e1</code>)</li>\n</ul>\n<p><code>Vue</code>按处理的简易程度，<code>Vue</code>先对前两种情况进行了单独的处理，再对三种混有的情况进行了处理。</p>\n<h4 id=\"3-1-处理新增的节点的单独情况\"><a href=\"#3-1-处理新增的节点的单独情况\" class=\"headerlink\" title=\"3.1 处理新增的节点的单独情况\"></a>3.1 处理新增的节点的单独情况</h4><p>判断新增的节点是以旧队列为基准，那么此时的情况是这样的：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230120660.png\" alt=\"image-20230527230120660\"></p>\n<p>或新增的节点在首部：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230226562.png\" alt=\"image-20230527230226562\"></p>\n<p>此时会存在这样的情况<code>e1 &lt; i</code>且<code>e2 &gt;= i</code>，那么我们只需要更新<code>e1 =&gt; i</code>间的节点即可，于是有了这些代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3. common sequence + mount</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 有新增的节点时</span></span><br><span class=\"line\"><span class=\"comment\">// (a b)</span></span><br><span class=\"line\"><span class=\"comment\">// (a b) c</span></span><br><span class=\"line\"><span class=\"comment\">// i = 2, e1 = 1, e2 = 2</span></span><br><span class=\"line\"><span class=\"comment\">// (a b)</span></span><br><span class=\"line\"><span class=\"comment\">// c (a b)</span></span><br><span class=\"line\"><span class=\"comment\">// i = 0, e1 = -1, e2 = 0</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (i &lt;= e2) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &gt; e1) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//  当前节点后面的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextPos = e2 + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 我们要以这个节点为锚点在其之前添加元素，没有则添加到父节点最后</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> anchor = nextPos &lt; l2 ? c2[nextPos].<span class=\"property\">el</span> : parentAnchor</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= e2) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">patch</span>(<span class=\"literal\">null</span>, c2[i])</span><br><span class=\"line\">      i++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-处理删除节点的单独情况\"><a href=\"#3-2-处理删除节点的单独情况\" class=\"headerlink\" title=\"3.2 处理删除节点的单独情况\"></a>3.2 处理删除节点的单独情况</h4><p>如果没有存在仅有新增节点的情况，那么其会判断是否是仅进行删除节点的情况，此时可能出现下图的两种情况：</p>\n<p>删除节点在尾部：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230416959.png\"></p>\n<p>删除节点在尾部：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230458558.png\" alt=\"image-20230527230458558\"></p>\n<p>此时<code>i &gt; e2</code>，那么我们只需要将旧节点数组中<code>i =&gt; e1</code>之间的所有节点删除即可(下面的<code>else if</code>语句承接上面)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码<span class=\"comment\">// 4. common sequence + unmount</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 节点移除</span></span><br><span class=\"line\"><span class=\"comment\">// (a b) c</span></span><br><span class=\"line\"><span class=\"comment\">// (a b)</span></span><br><span class=\"line\"><span class=\"comment\">// i = 2, e1 = 2, e2 = 1</span></span><br><span class=\"line\"><span class=\"comment\">// a (b c)</span></span><br><span class=\"line\"><span class=\"comment\">// (b c)</span></span><br><span class=\"line\"><span class=\"comment\">// i = 0, e1 = 0, e2 = -1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &gt; e2) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt;= e1) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 移除原节点</span></span><br><span class=\"line\">    <span class=\"title function_\">unmount</span>(c1[i])</span><br><span class=\"line\">    i++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-乱序，但一定有移动的节点的情况\"><a href=\"#3-3-乱序，但一定有移动的节点的情况\" class=\"headerlink\" title=\"3.3 乱序，但一定有移动的节点的情况\"></a>3.3 乱序，但一定有移动的节点的情况</h4><p>最后一种情况就是比较复杂的情况，此时<code>Vue</code>做的处理是，先查看旧节点序列在变为新节点序列后，旧节点序列中是否有些节点还是按现在的顺序排列的(可以间断)，此时只对其余变更的节点进行操作，就能进行最小幅度的<code>DOM</code>操作了。</p>\n<blockquote>\n<p>此时相对于求旧节点的最长递增序列，这里你可以会想到为什么不求最小编辑距离，因为最小编辑距离的时间复杂度在大多数情况下比它高</p>\n</blockquote>\n<h5 id=\"3-3-1-建立新节点-key-与其下标的映射\"><a href=\"#3-3-1-建立新节点-key-与其下标的映射\" class=\"headerlink\" title=\"3.3.1 建立新节点 key 与其下标的映射\"></a>3.3.1 建立新节点 key 与其下标的映射</h5><p>首先，<code>Vue</code>先将新节点数组进行遍历，将它们有<code>key</code>值的节点与其在新节点数组中的下标建立映射，存储在<code>keyToNewIndexMap</code>中，方便在复用时查找：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s1 = i <span class=\"comment\">// prev starting index</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> s2 = i <span class=\"comment\">// next starting index</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5.1 build key:index map for newChildren</span></span><br><span class=\"line\"><span class=\"comment\">// 5.1 生成一个key map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> keyToNewIndexMap = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历新节点，乱序的部分，将这些具有key的节点存入map</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = s2; i &lt;= e2; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nextChild = c2[i]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nextChild.<span class=\"property\">key</span> != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    keyToNewIndexMap.<span class=\"title function_\">set</span>(nextChild.<span class=\"property\">key</span>, i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-3-2-移除新节点队列中不存在的旧节点并更新复用节点\"><a href=\"#3-3-2-移除新节点队列中不存在的旧节点并更新复用节点\" class=\"headerlink\" title=\"3.3.2 移除新节点队列中不存在的旧节点并更新复用节点\"></a>3.3.2 移除新节点队列中不存在的旧节点并更新复用节点</h5><p>之后，遍历旧节点数组，通过刚刚建立的<code>Map</code>，如果当前旧节点在新节点数组中已经不存在了，那么说明要移除了。</p>\n<p>整个过程比较复杂，因为要预先做处理，为后续是否需要移动节点做准备：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 5.2 loop through old children left to be patched and try to patch</span></span><br><span class=\"line\"><span class=\"comment\">// matching nodes &amp; remove nodes that are no longer present</span></span><br><span class=\"line\"><span class=\"comment\">// 5.2 遍历旧节点，patch匹配的节点，移除不再在节点</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> j</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前处理过的节点数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> patched = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 需要patch的节点数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> toBePatched = e2 - s2 + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否需要移动节点</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> moved = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// used to track whether any node has moved</span></span><br><span class=\"line\"><span class=\"comment\">// 记录节点是否已经移动</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> maxNewIndexSoFar = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// works as Map&lt;newIndex, oldIndex&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// Note that oldIndex is offset by +1</span></span><br><span class=\"line\"><span class=\"comment\">// and oldIndex = 0 is a special value indicating the new node has</span></span><br><span class=\"line\"><span class=\"comment\">// no corresponding old node.</span></span><br><span class=\"line\"><span class=\"comment\">// 注意旧下标的值都会+1，因为0表示没有对应的旧节点</span></span><br><span class=\"line\"><span class=\"comment\">// used for determining longest stable subsequence</span></span><br><span class=\"line\"><span class=\"comment\">// 新下标与旧下标的map</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的新下标以s2位置为0下标，而旧下标为旧下标值 +１</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newIndexToOldIndexMap = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(toBePatched)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化值为0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; toBePatched; i++) newIndexToOldIndexMap[i] = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>这里我说明下三个变量，首先是<code>newIndexToOldIndexMap</code>，其用来记录节点的新坐标到旧坐标的映射(当然是节点可复用的情况下)。为了后续计算最长递增子序列，所以其新坐标以<code>s2</code>为起点，长度为当前需要处理的节点总数，并且其存入的旧节点下标要在原值的基础上<code>+ 1</code>(因为<code>0</code>表示当前节点没有对应的旧节点)。举个例子，有如下图一样的更新序列：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230527230956800.png\" alt=\"image-20230527230956800\"></p>\n<p>那么节点<code>e</code>存入<code>newIndexToOldIndexMap</code>后为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 展示，不是赋值语句</span></span><br><span class=\"line\">newIndexToOldIndexMap = [<span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<p>其余全部节点存入后为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 展示，不是赋值语句</span></span><br><span class=\"line\">newIndexToOldIndexMap = [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<p><code>moved</code>变量则是表示是否有节点需要移动，其判定要基于<code>maxNewIndexSoFar</code>的值。</p>\n<p><code>maxNewIndexSoFar</code>表示当前可复用节点距离<code>s2</code>(即第一个乱序节点的最远距离)。如果有对应可以复用的节点，那么在每次迭代处理节点时，如果当前节点所处位置距离<code>s2</code>距离超过<code>maxNewIndexSoFar</code>，那么<code>maxNewIndexSoFar</code>会更新为当前节点在新队列中的下标；当其小于<code>maxNewIndexSoFar</code>时，就会标记<code>moved = true</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，</span></span><br><span class=\"line\"><span class=\"comment\">// 那么每次都会进入该if语句</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前节点未移动，更新下标</span></span><br><span class=\"line\">  maxNewIndexSoFar = newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果进入该else语句说明有节点之前节点交叉了</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  moved = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>想象一下，如果节点在新旧序列中，都是按照相同的顺序递增，那么<code>maxNewIndexSoFar</code>也会一直递增，即每次迭代<code>newIndex &gt;= maxNewIndexSoFar</code>，那么就不需要移动节点；但是如果某次迭代，<code>newIndex &lt; maxNewIndexSoFar</code>，那么说明当前节点由之前靠后的位置移动了现在靠前的位置。</p>\n<p>就拿刚刚乱序的图举例，第一次迭代<code>c</code>节点的<code>newIndex = 4</code>，则<code>maxNewIndexSoFar = 4</code>；第二次迭代<code>d</code>节点时，其<code>newIndex = 3</code>，此时<code>newIndex &lt; maxNewIndexSoFar</code>，说明<code>c/d</code>节点之间的位置在新旧发生了交叉，所以我们至少需要移动它们其中一个节点。</p>\n<p>理解了这个道理，现在我们可以正式看看这段代码了。由于要卸载节点，那么本次遍历要以<code>s1 &lt;-&gt; e1</code>之间的节点为基准进行遍历，整体遍历代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历旧节点</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = s1; i &lt;= e1; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前下标的旧节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> prevChild = c1[i]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 当前patch的节点数超过新节点中要patch的总数时，执行unmount操作</span></span><br><span class=\"line\">  <span class=\"comment\">// 直接进行卸载操作，因为多余的节点不需要了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (patched &gt;= toBePatched) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// all new children have been patched so this can only be a removal</span></span><br><span class=\"line\">    <span class=\"title function_\">unmount</span>(prevChild)</span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 尝试寻找是否有对应的新节点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 旧节点具有key时，获取相同key值节点所处的下标</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (prevChild.<span class=\"property\">key</span> != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    newIndex = keyToNewIndexMap.<span class=\"title function_\">get</span>(prevChild.<span class=\"property\">key</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 没有key时则找相同类型的节点是否存在</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// key-less node, try to locate a key-less node of the same type</span></span><br><span class=\"line\">    <span class=\"comment\">// 当前查找范围为新节点中需要patch的节点之间</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = s2; j &lt;= e2; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        <span class=\"comment\">// 0表示对应下标下当前还未有节点(注意当前是以s2为0下标基准)</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里确认当前新下标位置未有对应的旧下标，防止是已在map中的节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        newIndexToOldIndexMap[j - s2] === <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"title function_\">isSameVNodeType</span>(prevChild, c2[j])</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        newIndex = j</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 没找到对应节点时说明该节点已经不存在了，直接进行unmount</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newIndex === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">unmount</span>(prevChild)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 找到时进行位置移动操作，并patch</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将旧节点位置下标+1后存入，新节点以s2为起点，即0坐标</span></span><br><span class=\"line\">    newIndexToOldIndexMap[newIndex - s2] = i + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，</span></span><br><span class=\"line\">    <span class=\"comment\">// 那么每次都会进入该if语句</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 当前节点未移动，更新下标</span></span><br><span class=\"line\">      maxNewIndexSoFar = newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果进入该else语句说明有节点之前节点交叉了</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      moved = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// patch该节点</span></span><br><span class=\"line\">    <span class=\"title function_\">patch</span>(prevChild, c2[newIndex])</span><br><span class=\"line\">    patched++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先当当前可复用的节点复用时，会使<code>patched</code>值<code>+1</code>，当复用的节点超过乱序的新节点长度时，那么其余的节点肯定是要卸载的节点(因为新节点序列都处理完毕了)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (patched &gt;= toBePatched) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// all new children have been patched so this can only be a removal</span></span><br><span class=\"line\">    <span class=\"title function_\">unmount</span>(prevChild)</span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后，<code>Vue</code>尝试寻找一下当前旧节点是否被复用，即它被移动到了新节点序列的其他位置。首先如果当前节点有<code>key</code>值，那么其会尝试直接从刚刚的<code>keyToNewIndexMap</code>中查找；如果没有找到，那么其会遍历当前所有的新节点序列，依次对比是否与当前节点相同，在复合同类型节点时对其进行复用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 尝试寻找是否有对应的新节点</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newIndex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 旧节点具有 key 时，获取相同 key 值节点所处的下标</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (prevChild.<span class=\"property\">key</span> != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">  newIndex = keyToNewIndexMap.<span class=\"title function_\">get</span>(prevChild.<span class=\"property\">key</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 没有key时则找相同类型的节点是否存在</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// key-less node, try to locate a key-less node of the same type</span></span><br><span class=\"line\">  <span class=\"comment\">// 当前查找范围为新节点中需要 patch 的节点之间</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (j = s2; j &lt;= e2; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"comment\">// 0 表示对应下标下当前还未有节点(注意当前是以 s2 为 0 下标基准)</span></span><br><span class=\"line\">      <span class=\"comment\">// 这里确认当前新下标位置未有对应的旧下标，防止是已在 map 中的节点</span></span><br><span class=\"line\">      newIndexToOldIndexMap[j - s2] === <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">      <span class=\"title function_\">isSameVNodeType</span>(prevChild, c2[j])</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      newIndex = j</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在直接通过类型查找复用节点时，其存在一个<code>newIndexToOldIndexMap[j - s2] === 0</code>条件，它表示当前新节点下标未有对应的旧节点(<code>0</code>表示没有，在之后的代码中，如果查找到对应的<code>newIndex</code>，其会存入<code>newIndexToOldIndexMap</code>中)。这样可以防止新旧节点被重复复用或已被处理再次被处理。</p>\n<p>到此，对于旧节点的<code>newIndex</code>是否被查找到就会出现两种情况了：</p>\n<ol>\n<li>没有，说明当前节点已删除了，移除该<code>DOM</code>节点</li>\n<li>有，复用，<strong>更新节点属性</strong></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 没找到对应节点时说明该节点已经不存在了，直接进行unmount</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (newIndex === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">unmount</span>(prevChild)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 找到时进行位置移动操作，并patch</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将旧节点位置下标+1后存入，新节点以s2为起点，即0坐标</span></span><br><span class=\"line\">  newIndexToOldIndexMap[newIndex - s2] = i + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，</span></span><br><span class=\"line\">  <span class=\"comment\">// 那么每次都会进入该if语句</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前节点未移动，更新下标</span></span><br><span class=\"line\">    maxNewIndexSoFar = newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果进入该else语句说明有节点之前节点交叉了</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    moved = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// patch该节点</span></span><br><span class=\"line\">  <span class=\"title function_\">patch</span>(prevChild, c2[newIndex])</span><br><span class=\"line\">  patched++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在复用的情况下，有我们刚刚提到的<a href=\"#332-%E7%A7%BB%E9%99%A4%E6%96%B0%E8%8A%82%E7%82%B9%E9%98%9F%E5%88%97%E4%B8%AD%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E6%97%A7%E8%8A%82%E7%82%B9%E5%B9%B6%E6%9B%B4%E6%96%B0%E5%A4%8D%E7%94%A8%E8%8A%82%E7%82%B9\">计算节点交叉(是否需要移动)</a>的场景：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断是否需要移动当前节点，想象一下，如果每个节点都按序递增，</span></span><br><span class=\"line\"><span class=\"comment\">// 那么每次都会进入该if语句</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前节点未移动，更新下标</span></span><br><span class=\"line\">  maxNewIndexSoFar = newIndex</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果进入该else语句说明有节点之前节点交叉了</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  moved = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里就不赘述了。</p>\n<blockquote>\n<p>注意，这里对复用的节点进行了<code>patch()</code>更新，那么后面就只用进行移动即可，而不需要更新了。</p>\n</blockquote>\n<h4 id=\"3-3-3-处理新增节点与移动的节点\"><a href=\"#3-3-3-处理新增节点与移动的节点\" class=\"headerlink\" title=\"3.3.3 处理新增节点与移动的节点\"></a>3.3.3 处理新增节点与移动的节点</h4><p>到此为止，就只有新增节点与移动节点的情况没有处理了。</p>\n<p>首先其会需要移动节点时(<code>moved = true</code>)根据刚刚创建的<code>newIndexToOldIndexMap</code>生成一个最长递增的新节点序列<code>increasingNewIndexSequence</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码<span class=\"comment\">// 5.3 move and mount</span></span><br><span class=\"line\"><span class=\"comment\">// 5.3 移动与mount</span></span><br><span class=\"line\"><span class=\"comment\">// generate longest stable subsequence only when nodes have moved</span></span><br><span class=\"line\"><span class=\"comment\">// 有节点需要移动，生成长期稳定的子序列，仅对移动过的节点处理</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> increasingNewIndexSequence = moved</span><br><span class=\"line\">  ? <span class=\"comment\">// 获取最长递增子序列的下标数组</span></span><br><span class=\"line\">    <span class=\"title function_\">getSequence</span>(newIndexToOldIndexMap)</span><br><span class=\"line\">  : <span class=\"variable constant_\">EMPTY_ARR</span></span><br></pre></td></tr></table></figure>\n\n<p>那么这个序列的作用是什么？它就是用来<strong>辅助移动节点</strong>，而且是在最小次数下移动节点。由于<code>newIndexToOldIndexMap</code>是根据新旧节点之间的映射创建的，其<strong>下标天然代表乱序的新节点数组的顺序</strong>，而且其对应下标中存储的元素也代表该新节点复用的旧节点的下标，那么这里我们就可以看到两个序列：</p>\n<ol>\n<li>新节点下标组成的序列(<strong>递增</strong>的，因为我们以它为基准创建的数组)</li>\n<li><code>newIndexToOldIndexMap</code>中旧节点下标组成的序列，可能递增也可能乱序</li>\n</ol>\n<blockquote>\n<p>关于如何求<a href=\"https://link.juejin.cn/?target=https://en.wikipedia.org/wiki/Longest_increasing_subsequence\">最长递增子序列</a>，请单独自行学习，这里就不说明了。</p>\n</blockquote>\n<p>此时倘若旧节点下标组成的序列<strong>也</strong>呈现递增趋势，那么我们便可以操作那些非递增的节点来达到变更为新节点序列的目的。并且这个递增的序列越长，那么我们要操作(移动)的节点就越少。比如下图的情况：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124733993.png\" alt=\"image-20230528124733993\"></p>\n<p>从图中观察，我们可以清楚的看到<code>c/d</code>两个节点在前后都保持了递增的关系，那么此时我们只需要移动<code>e</code>节点与创建<code>h</code>节点即可。</p>\n<p>此时其<code>newIndexToOldIndexMap</code>为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">js复制代码newIndexToOldIndexMap = [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 该数组返回的是对应的元素在newIndexToOldIndexMap的下标</span></span><br><span class=\"line\"><span class=\"comment\">// 而并非实际的旧节点下标</span></span><br><span class=\"line\">increasingNewIndexSequence = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>2、3</code>节点与新节点的下标的<strong>递增关系保持一致</strong>，其最长递增子序列(<code>increasingNewIndexSequence</code>)为<code>[1, 2]</code>，此时我们只需要操作<code>4/0</code>两个节点即可。</p>\n<blockquote>\n<p><code>increasingNewIndexSequence</code>返回的结果为对应的元素在 <code>newIndexToOldIndexMap</code>的下标而并非实际的旧节点下标</p>\n</blockquote>\n<p>明白了这个现在我们来看其具体处理的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取递增序列的尾坐标</span></span><br><span class=\"line\">j = increasingNewIndexSequence.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// looping backwards so that we can use last patched node as anchor</span></span><br><span class=\"line\"><span class=\"comment\">// 向后循环，这样我们可以用上一个patch过了的节点做锚点</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = toBePatched - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前要处理的新节点下标及其节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> nextIndex = s2 + i</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nextChild = c2[nextIndex]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取其后一个节点，如果没有则获取其父节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> anchor = nextIndex + <span class=\"number\">1</span> &lt; l2 ? c2[nextIndex + <span class=\"number\">1</span>].<span class=\"property\">el</span> : parentAnchor</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果当前新旧节点Map中未找到当前位置新节点的旧节点信息，</span></span><br><span class=\"line\">  <span class=\"comment\">// 说明是新增节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newIndexToOldIndexMap[i] === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// mount new</span></span><br><span class=\"line\">    <span class=\"title function_\">patch</span>(<span class=\"literal\">null</span>, nextChild)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// moved说明有节点需要移动，通过塑造一个递增序列，处于递增序列的节点就可以</span></span><br><span class=\"line\">    <span class=\"comment\">// 不进行移动，只移动其余节点，这样就减少了节点的移动</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (moved) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果存在以下情况则移动：</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 没有稳定的子序列</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 当前节点不在这个稳定的子序列中</span></span><br><span class=\"line\">    <span class=\"comment\">// move if:</span></span><br><span class=\"line\">    <span class=\"comment\">// There is no stable subsequence (e.g. a reverse)</span></span><br><span class=\"line\">    <span class=\"comment\">// OR current node is not among the stable sequence</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j &lt; <span class=\"number\">0</span> || i !== increasingNewIndexSequence[j]) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">move</span>(nextChild, container, anchor)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      j--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>本次遍历以新节点的乱序序列(<code>s2 &lt;-&gt; e2</code>)为基准，逆向进行遍历。逆向的原因是因为其在新增节点或更新节点时，可以以后面已经操作过的节点为锚点进行更新(想象一下<code>Node.insertBefore()/Node.appendChild()</code>的参数)。</p>\n<p>每次遍历会出现三种情况：</p>\n<ul>\n<li>当前节点未有对应的旧节点下标，则说明是新增节点</li>\n<li>该节点需要移动，进行移动</li>\n<li>该节点与旧节点序列都保持递增顺序，直接跳过即可(实际反应在代码里面就是没做任何处理)</li>\n</ul>\n<blockquote>\n<p>情况<code>2</code>与<code>3</code>在完整的迭代中是互斥的，两者不会同时出现在整个迭代流程中。</p>\n</blockquote>\n<p>第一种情况，比较简单，这里就不解释了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果当前新旧节点Map中未找到当前位置新节点的旧节点信息，</span></span><br><span class=\"line\"><span class=\"comment\">// 说明是新增节点</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (newIndexToOldIndexMap[i] === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// mount new</span></span><br><span class=\"line\">  <span class=\"title function_\">patch</span>(<span class=\"literal\">null</span>, nextChild</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二种情况要判定<code>moved = true</code>，它的原理<a href=\"#332-%E7%A7%BB%E9%99%A4%E6%96%B0%E8%8A%82%E7%82%B9%E9%98%9F%E5%88%97%E4%B8%AD%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E6%97%A7%E8%8A%82%E7%82%B9%E5%B9%B6%E6%9B%B4%E6%96%B0%E5%A4%8D%E7%94%A8%E8%8A%82%E7%82%B9\">之前我们已经解释过了</a>。这里我们要关注的是它的函数体。根据我们刚刚对递增子序列的理解，那么其应该会在以下情况移动或不移动节点：</p>\n<ul>\n<li>当前节点处于最长递增子序列中 —— 跳过</li>\n<li>当前节点不存在最长递增子序列中 —— 移动<ul>\n<li>递增序列已经没有需要跳过的节点了但任存在节点需要更新(实际和不存在的情况一样)</li>\n<li>当前节点不存在最长递增子序列</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果存在以下情况则移动：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 没有稳定的子序列(实际和情况2一致，反序时会返回任意一个节点作为最长序列)</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 当前节点不在这个稳定的子序列中</span></span><br><span class=\"line\"><span class=\"comment\">// move if:</span></span><br><span class=\"line\"><span class=\"comment\">// There is no stable subsequence (e.g. a reverse)</span></span><br><span class=\"line\"><span class=\"comment\">// OR current node is not among the stable sequence</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (j &lt; <span class=\"number\">0</span> || i !== increasingNewIndexSequence[j]) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将当前节点移动到锚点节点前或容器节点最后(没有锚点时)</span></span><br><span class=\"line\">  <span class=\"title function_\">move</span>(nextChild, container, anchor)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  j--</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124834143.png\" alt=\"image-20230528124834143\"></p>\n<p>在第二次更新中，发现<code>d</code>节点存在于单调增序列中，所以本次更新可以跳过：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124910205.png\" alt=\"image-20230528124910205\"></p>\n<p>同理<code>c</code>节点也一样，这里就不放图了，处理完<code>c</code>节点后此时为这样</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528124931580.png\" alt=\"image-20230528124931580\"></p>\n<p>此时<code>e</code>节点可复用，则将其移动到新<code>c</code>节点前即可。</p>\n<p>到此为止，上图的<code>diff</code>就结束了。</p>\n<p>对于第三种情况，由于复用的节点在前后都保持了递增的关系，所以此时我们不需要再重复对节点进行处理，所以遇到复用的节点时直接跳过即可：</p>\n<p><img src=\"https://raw.githubusercontent.com/why862555625/images/main/images/image-20230528125006064.png\" alt=\"image-20230528125006064\"></p>\n<p>到此为止全部节点的更新就已经完毕了。</p>\n<h3 id=\"为什么组件中的-data-是一个函数？\"><a href=\"#为什么组件中的-data-是一个函数？\" class=\"headerlink\" title=\"为什么组件中的 data 是一个函数？\"></a>为什么组件中的 data 是一个函数？</h3><p>在 new Vue() 中，可以是函数也可以是对象，因为根实例只有一个，不会产生数据污染。</p>\n<p>在组件中，data 必须为函数，目的是为了防止多个组件实例对象之间共用一个 data，产生数据污染；而采用函数的形式，initData 时会将其作为工厂函数都会返回全新的 data 对象。</p>\n<h3 id=\"Vue-中组件间的通信方式？\"><a href=\"#Vue-中组件间的通信方式？\" class=\"headerlink\" title=\"Vue 中组件间的通信方式？\"></a>Vue 中组件间的通信方式？</h3><ol>\n<li><p>父子组件通信：</p>\n<p>父向子传递数据是通过<code>props</code>，子向父是通过<code>$emit</code>触发事件；通过父链/子链也可以通信（<code>$parent</code>/<code>$children</code>）；<code>ref</code>也可以访问组件实例；<code>provide</code>/<code>inject</code>；<code>$attrs</code>/<code>$listeners</code>。</p>\n</li>\n<li><p>兄弟组件通信：</p>\n<p>全局事件总线<code>EventBus</code>、<code>Vuex</code>。</p>\n</li>\n<li><p>跨层级组件通信：</p>\n<p>全局事件总线<code>EventBus</code>、<code>Vuex</code>、<code>provide</code>/<code>inject</code>。</p>\n</li>\n</ol>\n<h3 id=\"v-show-和-v-if-的区别？\"><a href=\"#v-show-和-v-if-的区别？\" class=\"headerlink\" title=\"v-show 和 v-if 的区别？\"></a>v-show 和 v-if 的区别？</h3><ol>\n<li>控制手段不同。<code>v-show</code>是通过给元素添加 css 属性<code>display: none</code>，但元素仍然存在；而<code>v-if</code>控制元素显示或隐藏是将元素整个添加或删除。</li>\n<li>编译过程不同。<code>v-if</code>切换有一个局部编译/卸载的过程，切换过程中合适的销毁和重建内部的事件监听和子组件；<code>v-show</code>只是简单的基于 css 切换。</li>\n<li>编译条件不同。<code>v-if</code>是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建，渲染条件为假时，并不做操作，直到为真才渲染。</li>\n<li>触发生命周期不同。<code>v-show</code>由 false 变为 true 的时候不会触发组件的生命周期；<code>v-if</code>由 false 变为 true 的时候，触发组件的<code>beforeCreate</code>、<code>created</code>、<code>beforeMount</code>、<code>mounted</code>钩子，由 true 变为 false 的时候触发组件的<code>beforeDestory</code>、<code>destoryed</code>钩子。</li>\n<li>性能消耗不同。<code>v-if</code>有更高的切换消耗；<code>v-show</code>有更高的初始渲染消耗。</li>\n</ol>\n<p>使用场景：<br> 如果需要非常频繁地切换，则使用<code>v-show</code>较好，如：手风琴菜单，tab 页签等； 如果在运行时条件很少改变，则使用<code>v-if</code>较好，如：用户登录之后，根据权限不同来显示不同的内容。</p>\n<h3 id=\"computed-和-watch-的区别？\"><a href=\"#computed-和-watch-的区别？\" class=\"headerlink\" title=\"computed 和 watch 的区别？\"></a>computed 和 watch 的区别？</h3><ul>\n<li><code>computed</code>计算属性，依赖其它属性计算值，内部任一依赖项的变化都会重新执行该函数，计算属性有缓存，多次重复使用计算属性时会从缓存中获取返回值，计算属性必须要有<code>return</code>关键词。</li>\n<li><code>watch</code>侦听到某一数据的变化从而触发函数。当数据为对象类型时，对象中的属性值变化时需要使用深度侦听<code>deep</code>属性，也可在页面第一次加载时使用立即侦听<code>immdiate</code>属性。</li>\n</ul>\n<p>运用场景：<br> 计算属性一般用在模板渲染中，某个值是依赖其它响应对象甚至是计算属性而来；而侦听属性适用于观测某个值的变化去完成一段复杂的业务逻辑。</p>\n<h3 id=\"v-if-和-v-for-为什么不建议放在一起使用？\"><a href=\"#v-if-和-v-for-为什么不建议放在一起使用？\" class=\"headerlink\" title=\"v-if 和 v-for 为什么不建议放在一起使用？\"></a>v-if 和 v-for 为什么不建议放在一起使用？</h3><p>Vue 2 中，<code>v-for</code>的优先级比<code>v-if</code>高，这意味着<code>v-if</code>将分别重复运行于每一个<code>v-for</code>循环中。如果要遍历的数组很大，而真正要展示的数据很少时，将造成很大的性能浪费。</p>\n<p>Vue 3 中，则完全相反，<code>v-if</code>的优先级高于<code>v-for</code>，所以<code>v-if</code>执行时，它调用的变量还不存在，会导致异常。</p>\n<p>通常有两种情况导致要这样做：</p>\n<ul>\n<li>为了过滤列表中的项目，比如：<code>v-for = &quot;user in users&quot; v-if = &quot;user.active&quot;</code>。这种情况，可以定义一个计算属性，让其返回过滤后的列表即可。</li>\n<li>为了避免渲染本该被隐藏的列表，比如<code>v-for = &quot;user in users&quot;  v-if = &quot;showUsersFlag&quot;</code>。这种情况，可以将<code>v-if</code>移至容器元素上或在外面包一层<code>template</code>即可。</li>\n</ul>\n<h3 id=\"Vue-2中的set方法？\"><a href=\"#Vue-2中的set方法？\" class=\"headerlink\" title=\"Vue 2中的set方法？\"></a>Vue 2中的set方法？</h3><p><a href=\"https://link.juejin.cn/?target=https://v2.cn.vuejs.org/v2/api/%23Vue-set\"><code>set</code>是Vue 2中的一个全局API</a>。可手动添加响应式数据，解决数据变化视图未更新问题。当在项目中直接设置数组的某一项的值，或者直接设置对象的某个属性值，会发现页面并没有更新。这是因为<code>Object.defineProperty()</code>的限制，监听不到数据变化，可通过<code>this.$set(数组或对象，数组下标或对象的属性名，更新后的值)</code>解决。</p>\n<h3 id=\"keep-alive-是什么？\"><a href=\"#keep-alive-是什么？\" class=\"headerlink\" title=\"keep-alive 是什么？\"></a>keep-alive 是什么？</h3><ul>\n<li>作用：实现组件缓存，保持组件的状态，避免反复渲染导致的性能问题。</li>\n<li>工作原理：Vue.js 内部将 DOM 节点，抽象成了一个个的 VNode 节点，<code>keep-alive</code>组件的缓存也是基于 VNode 节点的。它将满足条件的组件在 cache 对象中缓存起来，重新渲染的时候再将 VNode 节点从 cache 对象中取出并渲染。</li>\n<li>可以设置以下属性：<br> ① <code>include</code>：字符串或正则，只有名称匹配的组件会被缓存。<br> ② <code>exclude</code>：字符串或正则，任何名称匹配的组件都不会被缓存。<br> ③ <code>max</code>：数字，最多可以缓存多少组件实例。<br> 匹配首先检查组件的<code>name</code>选项，如果<code>name</code>选项不可用，则匹配它的局部注册名称（父组件 components选项的键值），匿名组件不能被匹配。</li>\n</ul>\n<p>如果同时使用了<code>include</code>、<code>exclude</code>，那么<code>exclude</code>的优先级高于<code>include</code>。</p>\n<p>设置了<code>keep-alive</code>缓存的组件，会多出两个生命周期钩子：<code>activated</code>、<code>deactivated</code>。<br> 首次进入组件时：beforeCreate –&gt; created –&gt; beforeMount –&gt; mounted –&gt; activated –&gt; beforeUpdate –&gt; updated –&gt; deactivated<br> 再次进入组件时：activated –&gt; beforeUpdate –&gt; updated –&gt; deactivated</p>\n<h3 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h3><p><code>mixin</code>（混入）， 它提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。</p>\n<p>使用场景： 不同组件中经常会用到一些相同或相似的代码，这些代码的功能相对独立。可以通过mixin 将相同或相似的代码提出来。</p>\n<p>缺点：</p>\n<ol>\n<li>变量来源不明确</li>\n<li>多 mixin 可能会造成命名冲突（解决方式：Vue 3的组合API）</li>\n<li>mixin 和组件出现多对多的关系，使项目复杂度变高。</li>\n</ol>\n<h3 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h3><p><code>slot</code>插槽，一般在组件内部使用，封装组件时，在组件内部不确定该位置是以何种形式的元素展示时，可以通过<code>slot</code>占据这个位置，该位置的元素需要父组件以内容形式传递过来。<code>slot</code>分为：</p>\n<ul>\n<li><code>默认插槽</code>：子组件用<code>&lt;slot&gt;</code>标签来确定渲染的位置，标签里面可以放<code>DOM</code>结构作为后备内容，当父组件在使用的时候，可以直接在子组件的标签内写入内容，该部分内容将插入子组件的<code>&lt;slot&gt;</code>标签位置。如果父组件使用的时候没有往插槽传入内容，后备内容就会显示在页面。</li>\n<li><code>具名插槽</code>：子组件用<code>name</code>属性来表示插槽的名字，没有指定<code>name</code>的插槽，会有隐含的名称叫做 <code>default</code>。父组件中在使用时在默认插槽的基础上通过<code>v-slot</code>指令指定元素需要放在哪个插槽中，<code>v-slot</code>值为子组件插槽<code>name</code>属性值。使用<code>v-slot</code>指令指定元素放在哪个插槽中，必须配合<code>&lt;template&gt;</code>元素，且一个<code>&lt;template&gt;</code>元素只能对应一个预留的插槽，即不能多个<code>&lt;template&gt;</code> 元素都使用<code>v-slot</code>指令指定相同的插槽。<code>v-slot</code>的简写是<code>#</code>，例如<code>v-slot:header</code>可以简写为<code>#header</code>。</li>\n<li>作用域插槽：子组件在<slot>标签上绑定props数据，以将子组件数据传给父组件使用。父组件获取插槽绑定 props 数据的方法：<ol>\n<li>scope=”接收的变量名”：<code>&lt;template scope=&quot;接收的变量名&quot;&gt;</code></li>\n<li>slot-scope=”接收的变量名”：<code>&lt;template slot-scope=&quot;接收的变量名&quot;&gt;</code></li>\n<li>v-slot:插槽名=”接收的变量名”：<code>&lt;template v-slot:插槽名=&quot;接收的变量名&quot;&gt;</code></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Vue-中的修饰符有哪些？\"><a href=\"#Vue-中的修饰符有哪些？\" class=\"headerlink\" title=\"Vue 中的修饰符有哪些？\"></a>Vue 中的修饰符有哪些？</h3><p>在Vue 中，修饰符处理了许多 DOM 事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理。Vue中修饰符分为以下几种：</p>\n<ol>\n<li><p>表单修饰符<br> <code>lazy</code> 填完信息，光标离开标签的时候，才会将值赋予给value，也就是在<code>change</code>事件之后再进行信息同步。<br> <code>number</code> 自动将用户输入值转化为数值类型，但如果这个值无法被<code>parseFloat</code>解析，则会返回原来的值。<br> <code>trim</code> 自动过滤用户输入的首尾空格，而中间的空格不会被过滤。</p>\n</li>\n<li><p>事件修饰符<br> <code>stop</code> 阻止了事件冒泡，相当于调用了<code>event.stopPropagation</code>方法。<br> <code>prevent</code> 阻止了事件的默认行为，相当于调用了<code>event.preventDefault</code>方法。<br> <code>self</code> 只当在 <code>event.target</code> 是当前元素自身时触发处理函数。<br> <code>once</code> 绑定了事件以后只能触发一次，第二次就不会触发。<br> <code>capture</code> 使用事件捕获模式，即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理。<br> <code>passive</code> 告诉浏览器你不想阻止事件的默认行为。<br> <code>native</code> 让组件变成像<code>html</code>内置标签那样监听根元素的原生事件，否则组件上使用 <code>v-on</code> 只会监听自定义事件。</p>\n</li>\n<li><p>鼠标按键修饰符<br> <code>left</code> 左键点击。<br> <code>right</code> 右键点击。<br> <code>middle</code> 中键点击。</p>\n</li>\n<li><p>键值修饰符</p>\n<p>键盘修饰符是用来修饰键盘事件（onkeyup，onkeydown）的，有如下：keyCode</p>\n<p>存在很多，但vue为我们提供了别名，分为以下两种：</p>\n<ul>\n<li>普通键（enter、tab、delete、space、esc、up…）</li>\n<li>系统修饰键（ctrl、alt、meta、shift…）</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"对-SPA-的理解？\"><a href=\"#对-SPA-的理解？\" class=\"headerlink\" title=\"对 SPA 的理解？\"></a>对 SPA 的理解？</h3><ol>\n<li><p>概念：<br> <code>SPA（Single-page  application）</code>，即单页面应用，它是一种网络应用程序或网站的模型，通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换时打断用户体验。在<code>SPA</code>中，所有必要的代码（HTML、JavaScript 和 CSS）都通过单个页面的加载而检索，或者根据需要（通常是响应用户操作）动态装载适当的资源并添加到页面。页面在任何时间点都不会重新加载，也不会将控制转移到其他页面。举个例子，就像一个杯子，上午装的是牛奶，中午装的是咖啡，下午装的是茶，变得始终是内容，杯子始终不变。</p>\n</li>\n<li><p><code>SPA</code>与<code>MPA</code>的区别：<br> <code>MPA（Muti-page application）</code>，即多页面应用。在<code>MPA</code>中，每个页面都是一个主页面，都是独立的，每当访问一个页面时，都需要重新加载 Html、CSS、JS 文件，公共文件则根据需求按需加载。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>SPA</th>\n<th>MPA</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>组成</td>\n<td>一个主页面和多个页面片段</td>\n<td>多个主页面</td>\n</tr>\n<tr>\n<td>url模式</td>\n<td>hash模式</td>\n<td>history模式</td>\n</tr>\n<tr>\n<td>SEO搜索引擎优化</td>\n<td>难实现，可使用SSR方式改善</td>\n<td>容易实现</td>\n</tr>\n<tr>\n<td>数据传递</td>\n<td>容易</td>\n<td>通过url、cookie、localStorage等传递</td>\n</tr>\n<tr>\n<td>页面切换</td>\n<td>速度快，用户体验良好</td>\n<td>切换加载资源，速度慢，用户体验差</td>\n</tr>\n<tr>\n<td>维护成本</td>\n<td>相对容易</td>\n<td>相对复杂</td>\n</tr>\n</tbody></table>\n</li>\n<li><p><code>SPA</code>的优缺点：<br> 优点：</p>\n<ul>\n<li>具有桌面应用的即时性、网站的可移植性和可访问性</li>\n<li>用户体验好、快，内容的改变不需要重新加载整个页面</li>\n<li>良好的前后端分离，分工更明确</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>不利于搜索引擎的抓取</li>\n<li>首次渲染速度相对较慢</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"双向绑定？\"><a href=\"#双向绑定？\" class=\"headerlink\" title=\"双向绑定？\"></a>双向绑定？</h3><ol>\n<li>概念：<br> Vue 中双向绑定是一个指令<code>v-model</code>，可以绑定一个响应式数据到视图，同时视图的变化能改变该值。<code>v-model</code>是语法糖，默认情况下相当于<code>:value</code>和<code>@input</code>，使用<code>v-model</code>可以减少大量繁琐的事件处理代码，提高开发效率。</li>\n<li>使用：<br> 通常在表单项上使用<code>v-model</code>，还可以在自定义组件上使用，表示某个值的输入和输出控制。</li>\n<li>原理：<br> <code>v-model</code>是一个指令，双向绑定实际上是Vue 的编译器完成的，通过输出包含<code>v-model</code>模版的组件渲染函数，实际上还是<code>value</code>属性的绑定及<code>input</code>事件监听，事件回调函数中会做相应变量的更新操作。</li>\n</ol>\n<h3 id=\"子组件是否可以直接改变父组件的数据？\"><a href=\"#子组件是否可以直接改变父组件的数据？\" class=\"headerlink\" title=\"子组件是否可以直接改变父组件的数据？\"></a>子组件是否可以直接改变父组件的数据？</h3><ol>\n<li>所有的<code>prop</code>都遵循着单项绑定原则，<code>props</code>因父组件的更新而变化，自然地将新状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。<br> 另外，每次父组件更新后，所有的子组件中的<code>props</code>都会被更新为最新值，这就意味着不应该子组件中去修改一个<code>prop</code>，若这么做了，Vue 会在控制台上抛出警告。</li>\n<li>实际开发过程中通常有两个场景导致要修改prop：<ul>\n<li><code>prop</code>被用于传入初始值，而子组件想在之后将其作为一个局部数据属性。这种情况下，最好是新定义一个局部数据属性，从<code>props</code>获取初始值即可。</li>\n<li>需要对传入的<code>prop</code>值做进一步转换。最好是基于该<code>prop</code>值定义一个计算属性。</li>\n</ul>\n</li>\n<li>实践中，如果确实要更改父组件属性，应<code>emit</code>一个事件让父组件变更。当对象或数组作为<code>props</code>被传入时，虽然子组件无法更改<code>props</code>绑定，但仍然<strong>可以</strong>更改对象或数组内部的值。这是因为JS的对象和数组是按引用传递，而对于 Vue 来说，禁止这样的改动虽然可能，但是有很大的性能损耗，比较得不偿失。</li>\n</ol>\n<h3 id=\"router-和-route-的区别？\"><a href=\"#router-和-route-的区别？\" class=\"headerlink\" title=\"router 和 route 的区别？\"></a>router 和 route 的区别？</h3><ol>\n<li><code>$router</code>是VueRouter的实例对象，是一个全局的路由对象，包含了所有路由的对象和属性。</li>\n<li><code>$route</code>是一个跳转的路由对象，可以认为是当前组件的路由管理，指当前激活的路由对象，包含当前url解析得到的数据，可以从对象里获取一些数据，如：name，path，params，query等。</li>\n</ol>\n<h3 id=\"vue-router-的路由传参方式？\"><a href=\"#vue-router-的路由传参方式？\" class=\"headerlink\" title=\"vue-router 的路由传参方式？\"></a>vue-router 的路由传参方式？</h3><ol>\n<li>声明式导航 <code>router-link</code>：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link :to=<span class=\"string\">&quot;&#x27;/users?userId:1&#x27;&quot;</span>&gt;&lt;/router-link&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123; name: &#x27;users&#x27;, params: &#123; userId: 1 &#125; &#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123; path: &#x27;/users&#x27;, query: &#123; userId: 1 &#125; &#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>编程式导航 router-push：</p>\n<ul>\n<li>通过<code>params</code>传参</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">userId</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 路由配置</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">User</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 跳转后获取路由参数</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">params</span>.<span class=\"property\">userId</span> <span class=\"comment\">// 为 1</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过<code>query</code>传参</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.<span class=\"variable\">$router</span>.<span class=\"title function_ invoke__\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">query</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">userId</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 路由配置</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    path: <span class=\"string\">&#x27;/users&#x27;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">    component: User</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 跳转后获取路由参数</span></span><br><span class=\"line\">this.<span class=\"variable\">$route</span>.query.userId</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>动态路由</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;/users/$&#123;userId&#125;&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 路由配置</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/users/:userId&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">User</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 跳转后获取路由参数</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">params</span>.<span class=\"property\">userId</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"Vue-Router中的常用路由模式和原理？\"><a href=\"#Vue-Router中的常用路由模式和原理？\" class=\"headerlink\" title=\"Vue Router中的常用路由模式和原理？\"></a>Vue Router中的常用路由模式和原理？</h3><ol>\n<li>hash 模式：</li>\n</ol>\n<ul>\n<li><code>location.hash</code>的值就是url中 <code>#</code> 后面的东西。它的特点在于：hash虽然出现url中，但不会被包含在HTTP请求中，对后端完全没有影响，因此改变hash不会重新加载页面。</li>\n<li>可以为hash的改变添加监听事件<code>window.addEventListener(&quot;hashchange&quot;, funcRef, false)</code>，每一次改变<code>hash (window.location.hash)</code>，都会在浏览器的访问历史中增加一个记录，利用hash的以上特点，就可以实现<strong>前端路由更新视图但不重新请求页面</strong>的功能了。<br> 特点：兼容性好但是不美观</li>\n</ul>\n<ol>\n<li>history 模式：<br> 利用 HTML5 History Interface 中新增的<code>pushState()</code>和<code>replaceState()</code>方法。<br> 这两个方法应用于浏览器的历史记录栈，在当前已有的<code>back</code>、<code>forward</code>、<code>go</code> 的基础上(使用<code>popState()</code>方法)，他们提供了对历史记录进行修改的功能。<br> 这两个方法有个共同点：当调用他们修改浏览器历史记录栈后，虽然当前url改变了，但浏览器不会刷新页面，这就为单页面应用前端路由“更新视图但不重新请求页面”提供了基础<br> 特点：虽然美观，但是刷新会出现 404 需要后端进行配置。</li>\n</ol>\n<h3 id=\"动态路由？\"><a href=\"#动态路由？\" class=\"headerlink\" title=\"动态路由？\"></a>动态路由？</h3><p>很多时候，我们需要将给定匹配模式的路由映射到同一个组件，这种情况就需要定义动态路由。例如，我们有一个 User组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用<code>动态路径参数（dynamic segment）</code>来达到这个效果：<code>&#123;path: &#39;/user/:id&#39;, compenent: User&#125;</code>，其中<code>:id</code>就是动态路径参数。</p>\n<h3 id=\"对Vuex的理解？\"><a href=\"#对Vuex的理解？\" class=\"headerlink\" title=\"对Vuex的理解？\"></a>对Vuex的理解？</h3><ol>\n<li>概念：<br> Vuex 是 Vue 专用的状态管理库，它以全局方式集中管理应用的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</li>\n<li>解决的问题：<br> Vuex 主要解决的问题是多组件之间状态共享。利用各种通信方式，虽然也能够实现状态共享，但是往往需要在多个组件之间保持状态的一致性，这种模式很容易出问题，也会使程序逻辑变得复杂。Vuex 通过把组件的共享状态抽取出来，以全局单例模式管理，这样任何组件都能用一致的方式获取和修改状态，响应式的数据也能够保证简洁的单向流动，使代码变得更具结构化且易于维护。</li>\n<li>什么时候用:<br> Vuex 并非是必须的，它能够管理状态，但同时也带来更多的概念和框架。如果我们不打算开发大型单页应用或应用里没有大量全局的状态需要维护，完全没有使用Vuex的必要，一个简单的 store 模式就够了。反之，Vuex将是自然而然的选择。</li>\n<li>用法：<br> Vuex 将全局状态放入<code>state</code>对象中，它本身是一颗状态树，组件中使用<code>store</code>实例的<code>state</code>访问这些状态；然后用配套的<code>mutation</code>方法修改这些状态，并且只能用<code>mutation</code>修改状态，在组件中调用<code>commit</code>方法提交<code>mutation</code>；如果应用中有异步操作或复杂逻辑组合，需要编写<code>action</code>，执行结束如果有状态修改仍需提交<code>mutation</code>，组件中通过<code>dispatch</code>派发<code>action</code>。最后是模块化，通过<code>modules</code>选项组织拆分出去的各个子模块，在访问状态（state）时需注意添加子模块的名称，如果子模块有设置<code>namespace</code>，那么提交<code>mutation</code>和派发<code>action</code>时还需要额外的命名空间前缀。</li>\n</ol>\n<h3 id=\"页面刷新后Vuex-状态丢失怎么解决？\"><a href=\"#页面刷新后Vuex-状态丢失怎么解决？\" class=\"headerlink\" title=\"页面刷新后Vuex 状态丢失怎么解决？\"></a>页面刷新后Vuex 状态丢失怎么解决？</h3><p>Vuex 只是在内存中保存状态，刷新后就会丢失，如果要持久化就需要保存起来。</p>\n<p><code>localStorage</code>就很合适，提交<code>mutation</code>的时候同时存入<code>localStorage</code>，在<code>store</code>中把值取出来作为<code>state</code>的初始值即可。</p>\n<p>也可以使用第三方插件，推荐使用<code>vuex-persist</code>插件，它是为 Vuex 持久化储存而生的一个插件，不需要你手动存取<code>storage</code>，而是直接将状态保存至 <code>cookie</code> 或者 <code>localStorage</code>中。</p>\n<h3 id=\"关于-Vue-SSR-的理解？\"><a href=\"#关于-Vue-SSR-的理解？\" class=\"headerlink\" title=\"关于 Vue SSR 的理解？\"></a>关于 Vue SSR 的理解？</h3><p><code>SSR</code>即<code>服务端渲染（Server Side Render）</code>，就是将 Vue 在客户端把标签渲染成 html 的工作放在服务端完成，然后再把 html 直接返回给客户端。</p>\n<ul>\n<li>优点：<br> 有着更好的 SEO，并且首屏加载速度更快。</li>\n<li>缺点：<br> 开发条件会受限制，服务器端渲染只支持 beforeCreate 和 created 两个钩子，当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于 Node.js 的运行环境。服务器会有更大的负载需求。</li>\n</ul>\n<h3 id=\"了解哪些-Vue-的性能优化方法？\"><a href=\"#了解哪些-Vue-的性能优化方法？\" class=\"headerlink\" title=\"了解哪些 Vue 的性能优化方法？\"></a>了解哪些 Vue 的性能优化方法？</h3><ul>\n<li>路由懒加载。有效拆分应用大小，访问时才异步加载。</li>\n<li><code>keep-alive</code>缓存页面。避免重复创建组件实例，且能保留缓存组件状态。</li>\n<li><code>v-for</code>遍历避免同时使用<code>v-if</code>。实际上在 Vue 3 中已经是一个错误用法了。</li>\n<li>长列表性能优化，可采用虚拟列表。</li>\n<li><code>v-once</code>。不再变化的数据使用<code>v-once</code>。</li>\n<li>事件销毁。组件销毁后把全局变量和定时器销毁。</li>\n<li>图片懒加载。</li>\n<li>第三方插件按需引入。</li>\n<li>子组件分割。较重的状态组件适合拆分。</li>\n<li>服务端渲染。</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"clijtrgbx0001yswhbgxj8w48","category_id":"clijtrgc20004yswhbpx317qp","_id":"clijtrgc8000iyswh9aig4xqx"},{"post_id":"clijtrgc00003yswhd9017jz3","category_id":"clijtrgc6000cyswh2otnh0fr","_id":"clijtrgcb000syswha5fd90kn"},{"post_id":"clijtrgc40007yswh0asc8n8y","category_id":"clijtrgc20004yswhbpx317qp","_id":"clijtrgcd0010yswh66cc4fj7"},{"post_id":"clijtrgcc000vyswhglk60i9m","category_id":"clijtrgc6000cyswh2otnh0fr","_id":"clijtrgce0018yswh55rh3oev"},{"post_id":"clijtrgc50009yswh7ckr5ve9","category_id":"clijtrgc6000cyswh2otnh0fr","_id":"clijtrgcf001dyswh317ufgvx"},{"post_id":"clijtrgcd000yyswh2fu02taf","category_id":"clijtrgc6000cyswh2otnh0fr","_id":"clijtrgcf001gyswh1radgirk"},{"post_id":"clijtrgc6000byswh7qob5yac","category_id":"clijtrgc6000cyswh2otnh0fr","_id":"clijtrgcg001jyswh2t882j7h"},{"post_id":"clijtrgce0017yswh3947f0vw","category_id":"clijtrgc6000cyswh2otnh0fr","_id":"clijtrgcg001nyswh9z9se1wv"},{"post_id":"clijtrgc7000fyswhbptc05uu","category_id":"clijtrgcf0019yswh3wtuga5r","_id":"clijtrgcg001qyswh6jq9e5q0"},{"post_id":"clijtrgc8000hyswha8z5eqyg","category_id":"clijtrgcf001hyswh1itbfiyr","_id":"clijtrgch001tyswh984w7l3f"},{"post_id":"clijtrgca000myswhh2zu50tq","category_id":"clijtrgcf0019yswh3wtuga5r","_id":"clijtrgch001vyswh89hdawv2"},{"post_id":"clijtrgcb000pyswh3sg44tig","category_id":"clijtrgch001syswh4ngkavl1","_id":"clijtrgci001zyswh712fa8l1"},{"post_id":"clijtrgce0014yswhdiuyefot","category_id":"clijtrgch001wyswhdwum67o0","_id":"clijtrgcj0023yswh81jm3hx1"}],"PostTag":[{"post_id":"clijtrgbx0001yswhbgxj8w48","tag_id":"clijtrgc30005yswh1bty99fq","_id":"clijtrgca000nyswh03c99kx7"},{"post_id":"clijtrgbx0001yswhbgxj8w48","tag_id":"clijtrgc6000dyswha8guerr0","_id":"clijtrgcb000qyswh389hek1z"},{"post_id":"clijtrgca000myswhh2zu50tq","tag_id":"clijtrgc8000kyswh4roo26ug","_id":"clijtrgcc000wyswh7fiubfwl"},{"post_id":"clijtrgcc000vyswhglk60i9m","tag_id":"clijtrgcc000tyswh4013fm3o","_id":"clijtrgcd0011yswh6wch5ci6"},{"post_id":"clijtrgc00003yswhd9017jz3","tag_id":"clijtrgc8000kyswh4roo26ug","_id":"clijtrgce0015yswh9za1gwkq"},{"post_id":"clijtrgc00003yswhd9017jz3","tag_id":"clijtrgcc000tyswh4013fm3o","_id":"clijtrgcf001ayswh0i4qaw21"},{"post_id":"clijtrgcd000yyswh2fu02taf","tag_id":"clijtrgcc000tyswh4013fm3o","_id":"clijtrgcf001eyswh207jc3j2"},{"post_id":"clijtrgc40007yswh0asc8n8y","tag_id":"clijtrgc8000kyswh4roo26ug","_id":"clijtrgcg001lyswh5dli9oso"},{"post_id":"clijtrgc40007yswh0asc8n8y","tag_id":"clijtrgcf001byswh9yloc81g","_id":"clijtrgcg001pyswh6nt16si0"},{"post_id":"clijtrgc50009yswh7ckr5ve9","tag_id":"clijtrgcg001kyswh2qe3fp83","_id":"clijtrgci001yyswh0av5787m"},{"post_id":"clijtrgc50009yswh7ckr5ve9","tag_id":"clijtrgch001ryswh9ft7h906","_id":"clijtrgci0020yswh5poz375f"},{"post_id":"clijtrgc50009yswh7ckr5ve9","tag_id":"clijtrgch001uyswh4kai9e71","_id":"clijtrgci0022yswhbpiq8za8"},{"post_id":"clijtrgc6000byswh7qob5yac","tag_id":"clijtrgcc000tyswh4013fm3o","_id":"clijtrgcj0025yswhdt1l7280"},{"post_id":"clijtrgc6000byswh7qob5yac","tag_id":"clijtrgc8000kyswh4roo26ug","_id":"clijtrgcj0026yswheyo0dbc0"},{"post_id":"clijtrgc7000fyswhbptc05uu","tag_id":"clijtrgcc000tyswh4013fm3o","_id":"clijtrgcj0029yswh2l5v3mhr"},{"post_id":"clijtrgc7000fyswhbptc05uu","tag_id":"clijtrgc8000kyswh4roo26ug","_id":"clijtrgcj002ayswhebceexsr"},{"post_id":"clijtrgc8000hyswha8z5eqyg","tag_id":"clijtrgc8000kyswh4roo26ug","_id":"clijtrgcj002dyswh31sj5gzw"},{"post_id":"clijtrgc8000hyswha8z5eqyg","tag_id":"clijtrgcj002byswhcuo72hos","_id":"clijtrgcj002eyswh16u9edc3"},{"post_id":"clijtrgcb000pyswh3sg44tig","tag_id":"clijtrgcj002cyswhd7u40yzg","_id":"clijtrgck002gyswhhjaicte8"},{"post_id":"clijtrgce0014yswhdiuyefot","tag_id":"clijtrgcj002fyswhehv248wa","_id":"clijtrgck002iyswh0z8y4r48"},{"post_id":"clijtrgce0017yswh3947f0vw","tag_id":"clijtrgck002hyswhh23ea6rh","_id":"clijtrgck002jyswhdb2ua7ek"},{"post_id":"clijtrgce0017yswh3947f0vw","tag_id":"clijtrgcc000tyswh4013fm3o","_id":"clijtrgck002kyswhbda55es3"}],"Tag":[{"name":"quickjs","_id":"clijtrgc30005yswh1bty99fq"},{"name":"devtools","_id":"clijtrgc6000dyswha8guerr0"},{"name":"前端","_id":"clijtrgc8000kyswh4roo26ug"},{"name":"JS","_id":"clijtrgcc000tyswh4013fm3o"},{"name":"C","_id":"clijtrgcf001byswh9yloc81g"},{"name":"c","_id":"clijtrgcg001kyswh2qe3fp83"},{"name":"js","_id":"clijtrgch001ryswh9ft7h906"},{"name":"运行时","_id":"clijtrgch001uyswh4kai9e71"},{"name":"HTML","_id":"clijtrgcj002byswhcuo72hos"},{"name":"网络","_id":"clijtrgcj002cyswhd7u40yzg"},{"name":"加油","_id":"clijtrgcj002fyswhehv248wa"},{"name":"vue","_id":"clijtrgck002hyswhh23ea6rh"}]}}